[
    {
        "content": "<p>Hi all, I've been trying to write a tactic proof of the fact that <code>m * n = 1 ↔ m = 1 ∧ n = 1 ∨ m = -1 ∧ n = -1</code> over the integers. I've managed to muddle this together:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">mul_eq_one_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">is_unit_of_mul_eq_one</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">a_unit</span> <span class=\"n\">h_a</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h_a_one_or_neg_one</span> <span class=\"o\">:</span> <span class=\"n\">a_unit</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a_unit</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">units_eq_one_or</span> <span class=\"n\">a_unit</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">h_a</span><span class=\"o\">,</span> <span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">h_a_one_or_neg_one</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_eq_one</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">-- use result that a * b = 1 → a = 1 ∨ a = -1</span>\n    <span class=\"c1\">-- on m and n</span>\n    <span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_one_left</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_one_left</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">-- enumerate combos of m, n = {1, -1}</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- m = 1, n = 1</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- m = 1, n = -1 → false</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- m = -1, n = 1 → false</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- m = -1, n = -1</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">-- prove other direction of iff</span>\n    <span class=\"c1\">-- i.e. 1 * 1 = 1 and -1 * -1 = 1</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>which works OK, but feels very length for a result that I feel like should follow quite easily from <code>int.units_eq_one_or</code> and <code>is_unit_of_mul_eq_one</code>? Is my approach here silly? Am I missing any approaches to shorten/clean up this proof?</p>",
        "id": 204398529,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1595234657
    },
    {
        "content": "<p>Your code doesn't run as it stands. Can you add the relevant imports/opens etc?</p>",
        "id": 204399146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595235177
    },
    {
        "content": "<p><code>import tactic</code> is enough</p>",
        "id": 204399163,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595235199
    },
    {
        "content": "<p>Ah yes, sorry, it's missing an <code>import tactic</code> at the start</p>",
        "id": 204399537,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1595235489
    },
    {
        "content": "<p>The easy direction looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_eq_one&#39;</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204399599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595235545
    },
    {
        "content": "<p>The trick is that <code>rintros</code> will let you use <code>rfl</code> to mean \"don't just make a new hypothesis <code>h : m = 1</code>, but define m to be 1 and then eliminate it, replacing all m's with 1's\"</p>",
        "id": 204404854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595239390
    },
    {
        "content": "<p>You can eliminate the second <code>cases hn</code> by using a semicolon to separate the first two cases</p>",
        "id": 204405530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595239998
    },
    {
        "content": "<p>For the harder way, I think some units.coe lemmas are maybe missing?</p>",
        "id": 204405666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595240112
    },
    {
        "content": "<p>You can golf the harder way to:</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n        <span class=\"c1\">-- use result that a * b = 1 → a = 1 ∨ a = -1</span>\n        <span class=\"c1\">-- on m and n</span>\n        <span class=\"k\">obtain</span> <span class=\"n\">hm</span> <span class=\"bp\">|</span> <span class=\"n\">hm</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_one_left</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n        <span class=\"k\">obtain</span> <span class=\"n\">hn</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_one_left</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">mul_comm</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n        <span class=\"n\">tauto</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 204406285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595240689
    },
    {
        "content": "<p>Not that that really addresses your concerns</p>",
        "id": 204406304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595240715
    },
    {
        "content": "<p>I think that these are missing from the <code>units</code> API:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">units</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coe_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">↔</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coe_eq_one</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">coe_one</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">coe_eq_coe</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204406319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595240739
    },
    {
        "content": "<p><code>norm_cast</code> should help here but I don't really know how to steer it.</p>",
        "id": 204406405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595240789
    },
    {
        "content": "<p>Oh, <code>coe_eq_coe</code> is <code>ext_iff.symm</code></p>",
        "id": 204407441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595241643
    },
    {
        "content": "<p>and <code>ext.eq_iff</code>. It should probably be tagged <code>norm_cast</code> I guess?</p>",
        "id": 204407859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595241971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248283\">@Alex Peattie</span>, if you feel like making a PR with Kevin's suggestions here, that would be great! :-) (See <a href=\"https://leanprover-community.github.io/contribute/index.html\">#contrib</a>.)</p>",
        "id": 204411142,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595244605
    },
    {
        "content": "<p>Yes I'd be happy to take a crack at it <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 204412112,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1595245375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248283\">@Alex Peattie</span> What's your github username? Then we can give you push access</p>",
        "id": 204412248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595245449
    },
    {
        "content": "<p>It's <code>alexpeattie</code></p>",
        "id": 204412276,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1595245477
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 204412355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595245539
    },
    {
        "content": "<p>PR is here - <a href=\"https://github.com/leanprover-community/mathlib/pull/3472\">https://github.com/leanprover-community/mathlib/pull/3472</a></p>\n<p>Incidentally, I don't think I've quite wrapped my head around how to use the extra coe lemmas on units to simplify things <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> ? I'm guessing it allows getting rid of the <code>simpa [←h_a, units.ext_iff]</code> part, and maybe using <code>norm_cast</code> instead?</p>",
        "id": 204441181,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1595260880
    },
    {
        "content": "<p>Yeah I couldn't get them to do anything useful. I don't really know how <code>norm_cast</code> works any more. The docstring for <code>norm_cast</code> used to have a bunch of information on what kind of lemmas to tag with what attribute, but then it all got simplified and the helpful docstring disappeared because it was all supposed to be easier -- \"tag everything with <code>norm_cast</code>\". The upshot is that I now don't really know what to tag with <code>norm_cast</code> because I can't see the examples any more.</p>",
        "id": 204445596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595263306
    },
    {
        "content": "<p>Ah OK, thanks. I've just seen from the build on my PR that for some reason <code>coe_eq_one</code> seems to be causing <code>int.units_eq_one_or</code> to timeout during build, but I'm afraid it's well beyond my limited Lean skills to see why...</p>",
        "id": 204448551,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1595264874
    },
    {
        "content": "<p>Try removing the <code>simp</code> tag from <code>coe_eq_one</code>?</p>",
        "id": 204450783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595265971
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 204450848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595266012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248283\">@Alex Peattie</span> Here's what you could do to \"fix\" <code>int.units_eq_one_or</code>:</p>\n<p>(1) add <code>, - units.coe_eq_one</code> to the arguments of <code>simpa</code><br>\n(2) turn the <code>simpa</code> into a <code>simpa only</code>.</p>",
        "id": 204451475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595266413
    },
    {
        "content": "<p>I pushed a commit that does (2).</p>",
        "id": 204451487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595266423
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> and <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> . So just so I understand, the <code>simp</code> tag on <code>coe_eq_one</code> is the \"culprit\" but based on Johan's suggestions I guess that it's still useful to have it there, so a better solution is being more specific in the <code>simpa</code> call in <code>units_eq_one_or</code>?</p>",
        "id": 204451846,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1595266582
    },
    {
        "content": "<p>I'm sure <code>norm_cast</code> should be helpful here. If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a ring then there's a <code>has_neg</code> instance on <code>units R</code>, as well as a <code>has_one</code> instance.</p>",
        "id": 204451878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595266608
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">mul_eq_one_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">is_unit_of_mul_eq_one</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">a_unit</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">units_eq_one_or</span> <span class=\"n\">a_unit</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now what?</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  case or.inl</span>\n<span class=\"cm\">b: ℤ</span>\n<span class=\"cm\">a_unit: units ℤ</span>\n<span class=\"cm\">h: ↑a_unit * b = 1</span>\n<span class=\"cm\">h: a_unit = 1</span>\n<span class=\"cm\">⊢ ↑a_unit = 1 ∨ ↑a_unit = -1</span>\n<span class=\"cm\">case or.inr</span>\n<span class=\"cm\">b: ℤ</span>\n<span class=\"cm\">a_unit: units ℤ</span>\n<span class=\"cm\">h: ↑a_unit * b = 1</span>\n<span class=\"cm\">h: a_unit = -1</span>\n<span class=\"cm\">⊢ ↑a_unit = 1 ∨ ↑a_unit = -1</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204452391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595266885
    },
    {
        "content": "<p>I want to run <code>norm_cast</code> on the goal and turn it to <code>a_unit = 1 \\or a_unit = -1</code></p>",
        "id": 204452519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595266942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> it seems like <code>rw h, left, norm_cast</code> closes the first goal, but <code>rw h, right, norm_cast</code> doesn't close the second goal...</p>",
        "id": 204453193,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1595267314
    },
    {
        "content": "<p>so it seems like <code>norm_cast</code> gets stuck with <code>↑-1 = -1</code>?</p>",
        "id": 204453263,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1595267366
    },
    {
        "content": "<p>It might need to be taught about that lemma...</p>",
        "id": 204453385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595267430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248283\">@Alex Peattie</span> Does <code>push_cast</code> instead of <code>norm_cast</code> help you?</p>",
        "id": 204453438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595267467
    },
    {
        "content": "<p>It \"goes the other way\"</p>",
        "id": 204453458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595267476
    },
    {
        "content": "<p><code>norm_cast</code> tries to pull coercions as far out as possible (and tries to strip them away if they get all the way to the outside).</p>",
        "id": 204453509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595267510
    },
    {
        "content": "<p><code>push_cast</code> tries to <em>push</em> coercions to the inside of expressions... and there they might cancel because of lemmas like <code>↑1 = 1</code></p>",
        "id": 204453619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595267552
    },
    {
        "content": "<p>Ah OK, interesting. <code>push_cast</code> in place of <code>norm_cast</code> the way I'm using it (i.e. <code>rw h, right, norm_cast</code>) doesn't seem to make progress, no.</p>",
        "id": 204453784,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1595267644
    },
    {
        "content": "<p>This was what I couldn't fathom out, because</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">coe_neg</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"bp\">-</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 204454950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595268227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> But if you apply that to <code>1</code>, it doesn't work, because you would need a <code>\\u</code> before the <code>1</code> on the RHS.</p>",
        "id": 204455133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595268310
    },
    {
        "content": "<p>So we maybe need a coe_neg_one?</p>",
        "id": 204455197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595268350
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">b</span>\n</code></pre></div>\n\n\n<p>Should either that, or its <code>symm</code>, be <code>@[norm_cast]</code>? This is exactly the sort of question which used to be answered in the docstring (or somewhere describing <code>norm_cast</code>) and no longer is (or at least I can't find it)</p>",
        "id": 204455572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595268504
    },
    {
        "content": "<p>When all the attributes were normalised, the examples were removed (or at least moved) (or at least I can't find them any more)</p>",
        "id": 204455645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595268540
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#norm_cast%20attributes\">https://leanprover-community.github.io/mathlib_docs/attributes.html#norm_cast%20attributes</a></p>",
        "id": 204455670,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595268554
    },
    {
        "content": "<p>Thanks Rob! I was looking under \"tactics\", and not under \"attributes\"</p>",
        "id": 204455732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595268591
    },
    {
        "content": "<p>My main problem now is that I'm on a machine with a screen that isn't wide enough to read the link  without scrolling to the bottom and dragging from left to right and then scrolling back up again :-)</p>",
        "id": 204455969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595268697
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- should be in mathlib</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">units</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">to_additive</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coe_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">↔</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"n\">eq_iff</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coe_eq_one</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">norm_cast</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coe_neg_one</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">units</span>\n<span class=\"c1\">-- end of mathlib stuff</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_eq_one_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">is_unit_of_mul_eq_one</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">a_unit</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">units_eq_one_or</span> <span class=\"n\">a_unit</span> <span class=\"k\">with</span> <span class=\"n\">h2</span> <span class=\"n\">h2</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_eq_one</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">obtain</span> <span class=\"n\">hm</span> <span class=\"bp\">|</span> <span class=\"n\">hm</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_one_left</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n    <span class=\"k\">obtain</span> <span class=\"n\">hn</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_one_left</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">mul_comm</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n    <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>OK so this is looking in better shape. I am a bit confused about which of the proposed mathlib lemmas should be <code>simp</code> lemmas (I'm not very good at <code>simp</code>) but perhaps I've managed to get the <code>norm_cast</code> lemmas into good shape.</p>",
        "id": 204457598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595269547
    },
    {
        "content": "<p>OK the PR's merged so <code>coe_eq_coe</code> and <code>coe_eq_one</code> should be in mathlib now, I'll do a new PR tomorrow to add <code>coe_neg_one</code> <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 204470479,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1595276064
    },
    {
        "content": "<p>Oh, nice! You're a fast mover :-)</p>",
        "id": 204471666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595276744
    },
    {
        "content": "<p>OK <code>coe_neg_one</code> is in the latest mathlib now <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span></p>",
        "id": 204652839,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1595416244
    },
    {
        "content": "<p>In case it's of interest to anyone, I originally wanted to prove the theorem above on my way to proving that 0 and 1 are the only consecutive perfect squares:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_eq_one_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">is_unit_of_mul_eq_one</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">a_unit</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">units_eq_one_or</span> <span class=\"n\">a_unit</span> <span class=\"k\">with</span> <span class=\"n\">h2</span> <span class=\"n\">h2</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_eq_one</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">obtain</span> <span class=\"n\">hm</span> <span class=\"bp\">|</span> <span class=\"n\">hm</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_one_left</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n    <span class=\"k\">obtain</span> <span class=\"n\">hn</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_one_left</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">mul_comm</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n    <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_one_only_consec_perfect_squares</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">h_ab</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">h_ab</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_one</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"n\">assumption</span>\n  <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_b0</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h_b0</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_zero</span> <span class=\"n\">at</span> <span class=\"n\">h_ab</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h_ab</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204652890,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1595416301
    },
    {
        "content": "<p>Nice :-) Now can you prove that there are no integer solutions to 4a^2=b^3+1 in integers is a=0 and b=-1?</p>",
        "id": 204723020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595451944
    },
    {
        "content": "<p>That's more challenging.</p>",
        "id": 204723045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595451957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Shortening.20proof.20on.20product.20of.20units.20in.20Z/near/204723020\">said</a>:</p>\n<blockquote>\n<p>Nice :-) Now can you prove that there are no integer solutions to 4a^2=b^3+1 in integers is a=0 and b=-1?</p>\n</blockquote>\n<p>I managed to prove this in the end. As you say much more challenging - it took me 500 or so lines, although I'm sure lots of parts are very \"golfable\" <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span>. I'll clean up and the comment the proof, then stick it on Github</p>",
        "id": 206496625,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1597084756
    },
    {
        "content": "<p>I'm not sure the main result is very applicable elsewhere, but hopefully (once cleaned up) a couple of the lemmas I proved along the way might be useful mathlib additions</p>",
        "id": 206496746,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1597084806
    },
    {
        "content": "<p>I'm sure the main result is not of much use in some sense, but if you managed to get Lean to do it then that's great -- you probably learnt a lot about Lean along the way! And indeed you might have found some holes in mathlib. You should make a level at codewars :-)</p>",
        "id": 206501669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597087073
    },
    {
        "content": "<p>Yes is seems the best way to learn Lean is to just throw yourself into trying to prove things! I hadn't realised there was a Lean section on Codewars, I'll take a look <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> !</p>",
        "id": 206502636,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1597087673
    }
]