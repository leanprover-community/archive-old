[
    {
        "content": "<p>I am learning how to use lean 3 by solving Dummit &amp; Foote's Abstract Algebra.<br>\nI am also not using mathlib's <code>group</code> or <code>group_theory</code> modules, since I want to do everything myself (C will do that to ya ^^').<br>\nIn D&amp;F,  the order of an element g is defined as the smallest natural number n for which g^n = 1, or \\infty if such a number doesn't exist.<br>\nI've looked at the mathlib implementation, and it looks like the order there is defined only for finite groups, which is unsuitable for my needs.</p>\n<p>Any tips about how would one go about implementing an order function that does what I need?</p>",
        "id": 226665647,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613573157
    },
    {
        "content": "<p>Yes, this ought to be refactored in mathlib</p>",
        "id": 226666040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613573328
    },
    {
        "content": "<p>I think that a better definition would be that the \"order\" of an element of infinite order should be 0.</p>",
        "id": 226666121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613573366
    },
    {
        "content": "<p>Then the natural map from the integers to G sending 1 to g has kernel principal generated by <code>order g</code>.</p>",
        "id": 226666274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613573412
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">order_of'</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">nat.find</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 226666481,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613573493
    },
    {
        "content": "<p>We just need someone with the time and energy to rewrite that part of mathlib</p>",
        "id": 226666650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613573546
    },
    {
        "content": "<p>Is it possible to case on <code>fintype</code> or not?</p>",
        "id": 226666983,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613573654
    },
    {
        "content": "<p>Thank you!</p>\n<p>Just to see that I understand how this works:<br>\nIt tries to check if there exists an n: N which is the order of g, and finds it, or otherwise returns zero.</p>\n<p>But how does it know if a proof of that exists (aka, h exists)? Does it make me provide a proof of that when I try t assert that the order of g is 5 (for example)?</p>",
        "id": 226667100,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613573704
    },
    {
        "content": "<p>Twitter rant : <a href=\"https://twitter.com/XenaProject/status/1301802013278318593?s=20\">https://twitter.com/XenaProject/status/1301802013278318593?s=20</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/XenaProject/status/1301802013278318593?s=20\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1263810297560735744/gMianQ_V_normal.jpg\"></a><p>Here's a funny thing. The set** of ideals of the integers is canonically isomorphic to the natural numbers {0, 1, 2...}. Ideals have a multiplication and it agrees with natural number multiplicatuon. Ideals also have an addition -- and it doesn't! Can we use this?\n\n** Type\n\n1/n</p><span>- The Xena Project (@XenaProject)</span></div></div>",
        "id": 226667470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613573840
    },
    {
        "content": "<p>You shouldn't worry about the definition, because as well as the definition you need an API for the definition -- that would be part of the refactoring.</p>",
        "id": 226667630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613573883
    },
    {
        "content": "<p>For example if G was a finite group then Lean would know that some n existed (e.g. the order of G)</p>",
        "id": 226667712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613573908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"390327\">@Ariel Fridman</span> If you want to prove <code>order_of' g = 5</code> you will need to show that <code>g ^ 5 = 1</code> and you will need to show that <code>g ^ 1 ... g ^ 4</code> are not <code>1</code>.</p>",
        "id": 226670088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613574758
    },
    {
        "content": "<p>Of course there is redundance there, so you will want helper lemmas that make your life easier.</p>",
        "id": 226670173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613574798
    },
    {
        "content": "<p>E.g., a lemma that says that <code>order_of' g = n</code> iff <code>g ^ n = 1</code> and <code>g ^ k \\ne 1</code> for all <em>proper</em> divisors <code>k</code> of <code>n</code>.</p>",
        "id": 226670378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613574876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I see. Thanks!</p>",
        "id": 226670563,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613574959
    },
    {
        "content": "<p>Note that that statement, once corrected to \"all proper divisosrs k of n\", remains true for n=0 with my convention ;-)</p>",
        "id": 226671266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613575208
    },
    {
        "content": "<p>I am probably dense, because I can't seem to be able to prove even simple statements using this definition ^^'.</p>\n<p>What I am trying to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">order_of'</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">nat.find</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`|`</span> <span class=\"n\">g</span> <span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">order_of'</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">g</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I tried providing a term of type <code>∃ n : ℕ , 0 &lt; n ∧ g^n = 1</code>, which was quite easy to prove, but that wasn't it.<br>\nCould you please explain what exactly an I supposed to provide/prove, or at least point me in the direction of some docs in which its explained?</p>",
        "id": 226676436,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613577049
    },
    {
        "content": "<p>and if possible, the same for the other direction (i.e. <code>|g| = 1 → g = 1</code>), since I also haven't been able to see on how to <code>case</code> on it, or desugar it.</p>",
        "id": 226676679,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613577140
    },
    {
        "content": "<p>What are your imports?</p>",
        "id": 226678498,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613577673
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.enat</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.interval_cases</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">order_of'</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">nat.find</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`|`</span> <span class=\"n\">g</span> <span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">order_of'</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">order_of'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.find_eq_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hc</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">interval_cases</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">g</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">order_of'</span> <span class=\"n\">at</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.find_spec</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(obviously can be golfed)</p>",
        "id": 226679113,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1613577799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20define.20the.20order.20of.20an.20element.20for.20non-finite.20groups.3F/near/226678498\">said</a>:</p>\n<blockquote>\n<p>What are your imports?</p>\n</blockquote>\n<p>just <code>tactic</code> and <code>init.data.int</code>. I don't actually use <code>group</code>, but rather a typeclass I made myself called <code>Group</code>.</p>",
        "id": 226679508,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613577885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> Thank you!, I'll look at it and try to understand what you're doing.</p>",
        "id": 226679726,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613577943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"390327\">@Ariel Fridman</span> The definition uses <code>nat.find</code>, so you will have to use lemmas about <code>nat.find</code>.</p>",
        "id": 226681734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613578606
    },
    {
        "content": "<p>If you <code>Ctrl-click</code> on it (assuming you are using VScode as editor), then you will go to the definition.</p>",
        "id": 226681794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613578628
    },
    {
        "content": "<p>Just below it will be 10 useful lemmas for using it</p>",
        "id": 226681820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613578636
    },
    {
        "content": "<p>Note that you usually don't have to import anything that starts with <code>init</code>, all of that comes \"for free\" in every Lean file, unless you put <code>prelude</code> at the top of your file. If you do happen to have <code>prelude</code> at the top of your file, you would have gotten everything in <code>init</code> by importing <code>tactic</code>.</p>",
        "id": 226682279,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613578801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  I'll take a look at it, thanks!</p>",
        "id": 226683632,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613579302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>  and thank you for this tip. so <code>init</code> just an autoinclude prelude? I assumed it was part of mathlib, but I guess I was wrong.</p>",
        "id": 226683767,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613579354
    },
    {
        "content": "<p>Yep, everything in <code>init.</code> is part of what we call \"core Lean\", and can be found in the community Lean 3 repository <a href=\"https://github.com/leanprover-community/lean/tree/master/library/init\">here</a>.</p>",
        "id": 226684863,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613579700
    }
]