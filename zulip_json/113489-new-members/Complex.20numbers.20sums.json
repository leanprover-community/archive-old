[
    {
        "content": "<p>Hello! I was playing with some sums over real and complex numbers, but I got stuck at the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test_lemma</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">)},</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">key</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test_real</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">i</span>\n<span class=\"kd\">def</span> <span class=\"n\">test_complex</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"c1\">-- definition 'test_complex' is noncomputable, it depends on 'complex.field'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum_elems</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"c1\">-- same</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">product_elems</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"n\">j</span> <span class=\"c1\">-- same</span>\n</code></pre></div>\n<p>I was trying to create a function that would do a \"dot_product\" between a real and a complex vector, but I got an error, and apparently I can't have a definition that, given a complex vector, returns the sum of its elements. The explanation I see is that the part where we prove that the set of complex numbers is a field is noncomputable, but from what I saw (correct me if I'm wrong), this is also the case for the set of real numbers. However, for real numbers everything is fine. Additionally, I could work in a lemma with the sum I wanted to obtain (and I tested it on a simple lemma to see how it behaves) without any complains. What should I do?</p>",
        "id": 234176580,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618240208
    },
    {
        "content": "<p>Quick answer: you can put <code>noncomputable theory</code> after the imports, then Lean will stop warning you about noncomputability.</p>",
        "id": 234176731,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618240263
    },
    {
        "content": "<p>You need to warn that a <code>def</code> is noncomputable because normally, Lean produces executable code for a <code>def</code>. For lemmas, it only checks that the lemma proof has the type of the lemma statement.</p>",
        "id": 234177071,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618240400
    },
    {
        "content": "<p>The reason why it happens to work for reals and not for complex numbers is kind of technical: in principle both <code>test_real</code> and <code>test_complex</code> should be computable, since addition, subtraction and multiplication of real numbers are computable, so are the equivalent operations for complex numbers: there is a computable <code>comm_ring ℝ</code> structure in mathlib (called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.comm_ring\">docs#real.comm_ring</a>). But for complex numbers, there is only a <code>field ℂ</code> structure available, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.field\">docs#complex.field</a>, and mathlib's division operator is not computable for real or complex numbers. This noncomputability also \"infects\" the <code>add_comm_monoid ℂ</code> structure used by the summation over <code>V</code>, making it noncomputable too.</p>",
        "id": 234178835,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618240964
    },
    {
        "content": "<p>But if I want to continue working with the sum_elems and product_elems definitons, is it ok to make them noncomputable and then carry on using them?</p>",
        "id": 234179647,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618241284
    },
    {
        "content": "<p>Yes, there should be no problem marking them noncomputable.</p>",
        "id": 234179779,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618241332
    },
    {
        "content": "<p>Ultimately, I am trying to work with the eigenvalues of a real-valued matrix, and since they can be complex, my plan is to define eigenvectors as complex and this would imply a (real)matrix-(complex)vector multiplication operation. I don't know if this is a good approach, but might get more experience from it.</p>",
        "id": 234180014,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618241424
    },
    {
        "content": "<p>That sounds like a good start if you are doing the project to practice. If you want to contribute to mathlib, be sure to check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.End.has_eigenvector\">docs#module.End.has_eigenvector</a> as well, so you don't do too much duplicate work :)</p>",
        "id": 234180395,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618241578
    },
    {
        "content": "<p>I consulted that as well, but it seems a little too complicated for me at the moment, as I am not a very experienced mathematician :( .  I don't really see how to apply the definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eigenspace</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">End</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">End</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span>\n</code></pre></div>\n<p>to my case with f being a matrix (linear transformation) with coefficients in ℝ and μ a complex value. So that's why I wanted to make something more restricted (even though I am using noncomputable to every definition I create <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> ), but obviously the best way would be to use the already existing model and build from it.</p>",
        "id": 234181273,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618241880
    },
    {
        "content": "<p>You can interpret the real matrix as being in C, then the types match up</p>",
        "id": 234181682,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618242012
    },
    {
        "content": "<p>Would you rather work with <code>matrix ...</code> or <code>linear_map</code>?</p>",
        "id": 234181840,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618242066
    },
    {
        "content": "<p>I am not sure what would be the best option. I already have some work with matrices and I wanted to develop that more with some eigenvalue properties, so that's why I wanted to work with matrices. Can I juggle between them  easily/efficiently?</p>",
        "id": 234182354,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618242250
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.to_lin'\">docs#matrix.to_lin'</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.to_matrix'\">docs#linear_map.to_matrix'</a></p>",
        "id": 234182778,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618242392
    },
    {
        "content": "<p>So easy interconversion retaining the linear structure</p>",
        "id": 234182836,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618242414
    },
    {
        "content": "<p>And you can use a <code>coe</code> that is a <code>linear_map</code> to express your linear map on R as a linear map on C</p>",
        "id": 234183172,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618242524
    },
    {
        "content": "<p>Thank you! I'll see how I can work with those!</p>",
        "id": 234183424,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618242613
    },
    {
        "content": "<p>I'm sure somewhere in mathlib we have the linear_map, or even linear_isometry of the embedding of R into C</p>",
        "id": 234183508,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618242640
    },
    {
        "content": "<p>Then you get your <code>End C C</code> iiuc</p>",
        "id": 234183629,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618242695
    },
    {
        "content": "<p>How would a lemma like \"Eigenvalues of a symmetric real matrix are real\" be stated using linear maps then?</p>",
        "id": 234184166,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618242898
    },
    {
        "content": "<p>for all <code>mu</code> such that <code>End.has_eigenvalue (real_to_complex f) mu</code>, <code>mu.im = 0</code> or something more neat</p>",
        "id": 234184609,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618243066
    },
    {
        "content": "<p>And where does the symmetry come into place?</p>",
        "id": 234184758,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618243115
    },
    {
        "content": "<p>Well, it's a constraint on what <code>f</code> you provide</p>",
        "id": 234184848,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618243149
    },
    {
        "content": "<p>If you're working on <code>End</code>, you might use <code>linear_equiv</code></p>",
        "id": 234185081,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618243237
    },
    {
        "content": "<p>I see, and btw if I have a noncomputable definition test_def, I can't have a command \"unfold test_def\" I suppose, right?</p>",
        "id": 234185454,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618243351
    },
    {
        "content": "<p>Yes, you can. <code>noncomputable</code> just means that no VM code is generated for that defn</p>",
        "id": 234185682,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618243439
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 234188129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618244461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/Complex.20numbers.20sums/near/234178835\">said</a>:</p>\n<blockquote>\n<p>But for complex numbers, there is only a <code>field ℂ</code> structure available, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.field\">docs#complex.field</a>,</p>\n</blockquote>\n<p>Citation needed: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.comm_ring\">docs#complex.comm_ring</a></p>",
        "id": 234188261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618244522
    },
    {
        "content": "<p>It sounds like the action problem is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.add_comm_monoid\">docs#complex.add_comm_monoid</a> is missing</p>",
        "id": 234188383,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618244567
    },
    {
        "content": "<p>Is there a way to prove that :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_complex_re</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span>\n</code></pre></div>\n<p>I was thinking about using the \"add_re\" lemma, but I don't see how.</p>",
        "id": 234196864,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618247938
    },
    {
        "content": "<p>Previously that would be <code>linear_map.re.map_sum</code></p>",
        "id": 234198250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618248504
    },
    {
        "content": "<p>But I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.re\">docs#linear_map.re</a> got renamed</p>",
        "id": 234198276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618248518
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.re_lm\">docs#complex.re_lm</a>?</p>",
        "id": 234198309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618248534
    },
    {
        "content": "<p>And how can it be used for the sum?</p>",
        "id": 234198667,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618248694
    },
    {
        "content": "<p>You'd need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.map_sum\">docs#linear_map.map_sum</a> with <code>re_lm</code> as <code>f</code></p>",
        "id": 234199301,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1618248944
    },
    {
        "content": "<p><code>complex.re_lm.map_sum</code> I think is the proof of your lemma</p>",
        "id": 234199385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618248969
    },
    {
        "content": "<p>Found it, it was  <code>linear_map.re.map_sum</code>, thanks!</p>",
        "id": 234200286,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618249365
    },
    {
        "content": "<p>Sounds like you're on an old mathlib</p>",
        "id": 234201513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618249880
    },
    {
        "content": "<p>There's no such thing as a symmetric linear map -- this is a predicate on matrices, ie it depends on the choice of basis</p>",
        "id": 234234435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618263067
    },
    {
        "content": "<p>You can still phrase this about linear_maps in a round-about way via <code>matrix.to_lin</code>, which does require two explicit bases</p>",
        "id": 234234893,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618263301
    },
    {
        "content": "<p>Is there a lemma which states that the sum of nonnegative (real) numbers is 0 iff all the numbers are 0?</p>",
        "id": 234346360,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618327106
    },
    {
        "content": "<p>That's a lemma about a constant function</p>",
        "id": 234346597,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618327201
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_const_zero\">docs#finset.sum_const_zero</a></p>",
        "id": 234346954,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618327311
    },
    {
        "content": "<p>That's only one direction of the iff, surely</p>",
        "id": 234347080,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1618327340
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_subset\">docs#finset.sum_subset</a></p>",
        "id": 234347278,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618327405
    },
    {
        "content": "<p>Yeah, I am more interested in the =&gt; direction. (sum = 0 =&gt; numbers are 0)</p>",
        "id": 234347458,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618327458
    },
    {
        "content": "<p>I don't think the iff is stated anywhere obvious because nonnegative numbers isn't a type.</p>",
        "id": 234347502,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618327472
    },
    {
        "content": "<p>Unless you're working on nnreal</p>",
        "id": 234347541,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618327486
    },
    {
        "content": "<p>Or it is, but I can't guess the name at the moment</p>",
        "id": 234347645,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618327522
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_eq_zero_iff_of_nonneg\">docs#finset.sum_eq_zero_iff_of_nonneg</a>  ?</p>",
        "id": 234347673,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1618327531
    },
    {
        "content": "<p>This one looks helpful</p>",
        "id": 234347726,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618327553
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_eq_zero_iff\">docs#finset.sum_eq_zero_iff</a> seems to work on nnreal</p>",
        "id": 234348341,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1618327748
    },
    {
        "content": "<p>Is there a lemma which states that a polynomial of degree n (with real coefficients) has n (complex) roots?</p>",
        "id": 234479294,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618398038
    },
    {
        "content": "<p>Probably the easiest: combine <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.degree_eq_card_roots\">docs#polynomial.degree_eq_card_roots</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.is_alg_closed\">docs#complex.is_alg_closed</a>, via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_alg_closed.splits\">docs#is_alg_closed.splits</a></p>",
        "id": 234479631,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618398217
    },
    {
        "content": "<p>And the homomorphism should be from C to C? I am a little confused about the \"splits\" part</p>",
        "id": 234481012,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618399068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366674\">@Gabriel Moise</span> in general a polynomial only split over a some larger field extension.</p>",
        "id": 234481139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618399133
    },
    {
        "content": "<p>So you have to give the ring hom that describes this extension.</p>",
        "id": 234481164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618399148
    },
    {
        "content": "<p>But that last lemma that Anne linked to shows that <code>id : C -&gt; C</code> will work, because <code>C</code> is alg. closed (2nd link).</p>",
        "id": 234481223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618399184
    },
    {
        "content": "<p>Since your coefficients are real, the specific ring hom will be <code>algebra_map ℝ ℂ</code>.</p>",
        "id": 234481224,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618399185
    },
    {
        "content": "<p>Good point, I forgot the actual question <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 234481299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618399211
    },
    {
        "content": "<p>Hmm, you'll have to do some rewriting (composing <code>algebra_map ℝ ℂ</code> with the identity) to get this to work. Should we define <code>is_alg_closed.splits : ∀ {R S} (f : R →+* S) (p : polynomial R), p.splits f</code> instead?</p>",
        "id": 234481576,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618399361
    },
    {
        "content": "<p>That is: keep the definition of <code>is_alg_closed</code>, rename <code>is_alg_closed.splits</code> to <code>is_alg_closed.splits'</code> and add this as a better eliminator.</p>",
        "id": 234481645,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618399426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> yes, that seems very reasonable</p>",
        "id": 234481764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618399506
    },
    {
        "content": "<p>Where I assume <code>S</code> is your preferred letter for algebraically closed fields <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 234481887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618399565
    },
    {
        "content": "<p>Ah nevermind, that is literally the next definition <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.splits'\">docs#polynomial.splits'</a> :P</p>",
        "id": 234481945,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618399601
    },
    {
        "content": "<p>Wait no, there <code>f</code> goes in the opposite direction.</p>",
        "id": 234482161,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618399730
    },
    {
        "content": "<p>Lol... I guess we want both</p>",
        "id": 234482402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618399876
    },
    {
        "content": "<p>I don't want to call them <code>polynomial.splits'</code> and <code>polynomial.splits''</code>, how about <code>is_alg_closed.splits_domain</code> (the domain of <code>f</code> is alg closed) and <code>is_alg_closed.splits_codomain</code> (the codomain of <code>f</code> is alg closed)?</p>",
        "id": 234482662,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618399994
    },
    {
        "content": "<p>I am a little stuck with these two now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">help_split</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">help_algebra_map</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiset.card</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">roots</span> <span class=\"bp\">=</span> <span class=\"n\">multiset.card</span> <span class=\"n\">P.roots</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 234483280,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618400310
    },
    {
        "content": "<p>I would imagine that <code>multiset.card P.roots</code> is just the roots of P in the reals, so that second one might not be true for something like x^2+1 right?</p>",
        "id": 234483337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618400366
    },
    {
        "content": "<p>Oh, I see, then this approach doesn't work then?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">help_split</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">degree_n_poly_has_n_roots</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_P</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P.degree</span> <span class=\"bp\">=</span> <span class=\"n\">P.roots.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→+*</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsplit</span> <span class=\"o\">:</span> <span class=\"n\">splits</span> <span class=\"n\">i</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">help_split</span> <span class=\"n\">P</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">degree_eq_card_roots</span> <span class=\"n\">H_P</span> <span class=\"n\">hsplit</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Goal : ↑(⇑multiset.card (map i P).roots) = ↑(⇑multiset.card P.roots)</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234483689,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618400548
    },
    {
        "content": "<p>Question 1:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">help_split</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">id_comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">splits_map_iff</span><span class=\"o\">],</span>\n     <span class=\"n\">exact</span> <span class=\"n\">is_alg_closed.splits</span> <span class=\"o\">(</span><span class=\"n\">P.map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(soon it will just be <code>:= is_alg_closed.splits_codomain _ _</code>).</p>",
        "id": 234484370,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618400931
    },
    {
        "content": "<p>Indeed, <code>degree_n_poly_has_n_roots</code> as is stated now is not true, because <code>P.roots</code> does not include any complex roots.</p>",
        "id": 234484430,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618400978
    },
    {
        "content": "<p>PR created: <a href=\"https://github.com/leanprover-community/mathlib/issues/7187\">#7187</a></p>",
        "id": 234484636,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618401085
    },
    {
        "content": "<p>I see, thank you very much for the clarifications!</p>",
        "id": 234484677,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618401119
    },
    {
        "content": "<p>But if I modify P to be a polynomial over C, the degree_n_poly_has_n_roots would be correct, though I don't know how to continue with that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">degree_n_poly_has_n_roots</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_P</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P.degree</span> <span class=\"bp\">=</span> <span class=\"n\">P.roots.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→+*</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℂ</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsplit</span> <span class=\"o\">:</span> <span class=\"n\">splits</span> <span class=\"n\">i</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">help_split</span> <span class=\"n\">P</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">degree_eq_card_roots</span> <span class=\"n\">H_P</span> <span class=\"n\">hsplit</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Goal : ↑(⇑multiset.card (map i P).roots) = ↑(⇑multiset.card P.roots)</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234485750,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1618401653
    },
    {
        "content": "<p>Does <code>refl</code> solve it?</p>",
        "id": 234485945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618401726
    },
    {
        "content": "<p><code>dsimp [i], simp [map_id]</code> hopefully.</p>",
        "id": 234486338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618401933
    },
    {
        "content": "<p>The original computability problem at the top of this thread will be solved by <a href=\"https://github.com/leanprover-community/mathlib/issues/8166\">#8166</a></p>",
        "id": 244612326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625166187
    }
]