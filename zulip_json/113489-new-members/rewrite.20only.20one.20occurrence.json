[
    {
        "content": "<p>I have a goal with two occurrences of <code>v</code>, and would like to rewrite only one of them. Can I do that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin.tail</span> <span class=\"o\">(</span><span class=\"n\">matrix.vec_cons</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">fin.tail_cons</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I need it for this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lin_indep</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">matrix.vec_cons</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">w</span> <span class=\"bp\">∉</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">linear_independent_fin_succ</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">fin.tail</span> <span class=\"o\">(</span><span class=\"n\">matrix.vec_cons</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284691824,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1654136046
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#nth_rewrite\">tactic#nth_rewrite</a></p>",
        "id": 284692376,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654136695
    },
    {
        "content": "<p>Is it intentional that <code>example (α : Type) (n : ℕ) (v : fin n → α) (w : α) : fin.tail (matrix.vec_cons w v) = v</code> and similar variants do not exist in <code>matrix</code> but do exist in <code>fin</code>? It seems that translating between them is quite tedious (mostly because <code>fin.cons w v</code> does not work for <code>(α : Type) (n : ℕ) (v : fin n → α) (w : α)</code>)</p>",
        "id": 284692792,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1654137232
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.vec_tail\">docs#matrix.vec_tail</a>?</p>",
        "id": 284713354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654157933
    },
    {
        "content": "<p>Yes; so you're not supposed to mix the two APIs it seems</p>",
        "id": 284713391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654157961
    }
]