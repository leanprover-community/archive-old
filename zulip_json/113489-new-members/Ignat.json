[
    {
        "content": "<p>Hello!</p>\n<p>I like programming so naturally I want to program my Mathematics. Hopefully Lean can help me with that!</p>",
        "id": 255970312,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633286272
    },
    {
        "content": "<p>Yo, so I have these overlapping instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Same</span> <span class=\"o\">(</span><span class=\"n\">φ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">same</span><span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"n\">ℙ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">same</span> <span class=\"o\">{</span><span class=\"n\">φ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Same</span> <span class=\"n\">φ</span><span class=\"o\">]:</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"n\">ℙ</span> <span class=\"o\">:=</span> <span class=\"n\">Same.same</span>\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">same</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Same_thing</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">):</span> <span class=\"n\">Same</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Same.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Same_arrow</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Same</span> <span class=\"n\">β</span><span class=\"o\">]:</span> <span class=\"n\">Same</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Same.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f₁</span> <span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"n\">f₂</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Same_proposition</span><span class=\"o\">:</span> <span class=\"n\">Same</span> <span class=\"n\">ℙ</span> <span class=\"o\">:=</span> <span class=\"n\">Same.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What I want to say is that being same for functions means extensional equality, for propositions it is two way implication and for everything else equality. But I do not think it works — <code>same</code> seems to unfold into equality by default.</p>\n<p>How can I make sure that more specific instances are preferred?</p>",
        "id": 255976836,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633292284
    },
    {
        "content": "<p>So as far as I understand, there is ways to do this (changing instance priority);  however, I don't see why you'd want to do this at all! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/funext\">docs#funext</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/propext\">docs#propext</a> may be interesting</p>",
        "id": 255977427,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1633292865
    },
    {
        "content": "<p>Yep, I reckon that I can add some axioms. I am really doing this for fun.</p>",
        "id": 255977644,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633293079
    },
    {
        "content": "<p>Instance priorities aren't that useful a tool from what I've seen - if you have multiple non-equal instance available, you can still end up with the \"wrong\" one. Most often we use priorities in mathlib simply for performance.</p>",
        "id": 255978849,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633294316
    },
    {
        "content": "<p>Generally we use instances for \"canonical\" structures.</p>",
        "id": 255979071,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633294522
    },
    {
        "content": "<p>You have to be careful when going down this path, as other said. You can do it with priorities though: we're doing it in mathlib for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable\">docs#decidable</a>, where <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.prop_decidable\">docs#classical.prop_decidable</a> is our catch-all. <br>\nThe main thing you have to be careful about is that your statements are general enough. If you prove some theorem <code>T</code> about a type <code>α</code> with the <code>Same_thing</code> instance, you run into problems if you later apply <code>T</code> to <code>ℙ</code>, since for that type it generally will find the <code>Same_proposition</code> instance. The solution was to prove the statement <code>T</code> for an arbitrary instance, not just the <code>Same_thing</code> instance.</p>",
        "id": 255979583,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1633294974
    },
    {
        "content": "<p>So, another hardship is that Lean cannot infer an instance when I add some notations. See:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ℙ</span> <span class=\"o\">:=</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">def</span> <span class=\"n\">Binary_Relation</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℙ</span>\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">~</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Binary_Relation</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n<span class=\"kd\">def</span> <span class=\"n\">identity</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}:</span> <span class=\"n\">α</span> <span class=\"bp\">~</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n<span class=\"kd\">def</span> <span class=\"n\">compose</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">~</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">~</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">~</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">r₂</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">r₂</span> <span class=\"bp\">∘</span> <span class=\"n\">r₁</span> <span class=\"o\">:=</span> <span class=\"n\">compose</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">has_identity</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">~</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">∘</span> <span class=\"n\">identity</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">identity</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">compose</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">x'</span> <span class=\"n\">proof</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">proof</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">proof_left</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">proof_right</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">reflexivity</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Same</span> <span class=\"o\">(</span><span class=\"n\">φ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">same</span><span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"n\">ℙ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">same</span> <span class=\"o\">{</span><span class=\"n\">φ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Same</span> <span class=\"n\">φ</span><span class=\"o\">]:</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"n\">ℙ</span> <span class=\"o\">:=</span> <span class=\"n\">Same.same</span>\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">same</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"c1\">-- @[priority std.priority.default+1]</span>\n<span class=\"c1\">-- instance Same_thing (α: Type): Same α := Same.mk (λ x y, x = y)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Same_arrow</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Same</span> <span class=\"n\">β</span><span class=\"o\">]:</span> <span class=\"n\">Same</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Same.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f₁</span> <span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"n\">f₂</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Same_proposition</span><span class=\"o\">:</span> <span class=\"n\">Same</span> <span class=\"n\">ℙ</span> <span class=\"o\">:=</span> <span class=\"n\">Same.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">:</span> <span class=\"n\">Same</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">ℙ</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">Binary_Relation</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span><span class=\"o\">:</span> <span class=\"n\">Same</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">~</span> <span class=\"n\">bool</span><span class=\"o\">))</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">has_identity_fancy</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">~</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">∘</span> <span class=\"n\">identity</span><span class=\"o\">)</span> <span class=\"bp\">≡</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The invocation of <code>≡</code> in the statement of the theorem <code>has_identity_fancy</code> is not working.</p>\n<p>Is this a dead end?</p>",
        "id": 255980006,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633295353
    },
    {
        "content": "<p>No, it is not a dead end. I should add the type thing as a parameter to the theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">has_identity_fancy</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Same</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">~</span> <span class=\"n\">β</span><span class=\"o\">)]:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">~</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">∘</span> <span class=\"n\">identity</span><span class=\"o\">)</span> <span class=\"bp\">≡</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>— Then I can proceed to the proof.</p>",
        "id": 255981655,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633297049
    },
    {
        "content": "<p>In Lean, it's also typical to be universe polymorphic, so you should use <code>Type*</code> pretty much everywhere you use <code>Type</code></p>",
        "id": 255981734,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1633297118
    },
    {
        "content": "<p>It should (?) then infer the instance regardless</p>",
        "id": 255981749,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1633297133
    },
    {
        "content": "<p>I do not think it does. I added stars everywhere but nothing happened.</p>",
        "id": 255981871,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633297270
    },
    {
        "content": "<p>I am not sure I understand this. So, with <code>[Same (α ~ β)]</code> I tell Lean that the theorem accepts an instance as an argument. Any instance. But what I really want is for it to pick the specific definition of sameness, specifically <code>λ x y, r₁ x y ↔ r₂ x y</code> — I could not possibly prove anything until I have this specific formula in the goal.</p>",
        "id": 255982065,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633297448
    },
    {
        "content": "<p>Is there some reference that explains how type class inference works from first principles?</p>",
        "id": 255982469,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633297884
    },
    {
        "content": "<p>I don't know if it qualifies as first principles, but the usual reference is <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html\">chapter 10 of TPiL</a>.</p>",
        "id": 255983052,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1633298479
    },
    {
        "content": "<p>Yes, I read it like three times already.</p>",
        "id": 256010473,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633327444
    },
    {
        "content": "<p>I do not think it explains this situation.</p>",
        "id": 256010484,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633327453
    },
    {
        "content": "<p>It says like:</p>\n<blockquote>\n<p>Sometimes Lean can’t find an instance because the class is buried under a definition. … Alternatively, we can help Lean out by unfolding the definition.</p>\n</blockquote>\n<p>So, in this case I should unfold the definition of <code>~</code>, but how do I unfold anything in the statement of a theorem?</p>",
        "id": 256011076,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633327936
    },
    {
        "content": "<p>When you make a new definition of the form <code>def X := Y</code>, typeclasses which were available for <code>Y</code> are not available for <code>X</code>. You can \"copy them across\" using a <code>@[derive]</code> handler, e.g. <code>@[derive T] def X := Y</code>. If previously you had <code>T Y</code> available, this will make <code>T X</code> available.</p>",
        "id": 256012629,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633329400
    },
    {
        "content": "<p>It says \"failed to find a derive handler for\"…</p>",
        "id": 256012989,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633329697
    },
    {
        "content": "<p>This will not work if <code>T Y</code> was not already available. Try posting a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 256013344,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633329980
    },
    {
        "content": "<p>Voilà:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ℙ</span> <span class=\"o\">:=</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">class</span> <span class=\"n\">Same</span> <span class=\"o\">(</span><span class=\"n\">φ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">same</span><span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"n\">ℙ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">same</span> <span class=\"o\">{</span><span class=\"n\">φ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Same</span> <span class=\"n\">φ</span><span class=\"o\">]:</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"n\">ℙ</span> <span class=\"o\">:=</span> <span class=\"n\">Same.same</span>\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">same</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Same_arrow</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Same</span> <span class=\"n\">β</span><span class=\"o\">]:</span> <span class=\"n\">Same</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Same.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f₁</span> <span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"n\">f₂</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Same_proposition</span><span class=\"o\">:</span> <span class=\"n\">Same</span> <span class=\"n\">ℙ</span> <span class=\"o\">:=</span> <span class=\"n\">Same.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Same</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">ℙ</span><span class=\"o\">)</span>\n<span class=\"kd\">@[derive Same]</span> <span class=\"kd\">def</span> <span class=\"n\">Binary_Relation</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℙ</span>\n</code></pre></div>",
        "id": 256013684,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633330301
    },
    {
        "content": "<p>I am not sure if I am misinterpreting, but <code>check</code> seems to confirm that the instance exists.</p>",
        "id": 256013834,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633330412
    },
    {
        "content": "<p>I get <code>unexpected token</code> on your <code>≡</code>. You need to replace the notation line with <code>notation x `≡` y := same x y</code>.</p>",
        "id": 256014219,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633330729
    },
    {
        "content": "<p>After that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Same</span> <span class=\"o\">(</span><span class=\"n\">Binary_Relation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Binary_Relation</span><span class=\"o\">],</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>will do what you want.</p>",
        "id": 256014238,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633330745
    },
    {
        "content": "<p>(After removing the <code>@[derive Same]</code>.)</p>",
        "id": 256014274,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633330775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Ignat/near/256014219\">said</a>:</p>\n<blockquote>\n<p>I get <code>unexpected token</code> on your <code>≡</code>. You need to replace the notation line with <code>notation x `≡` y := same x y</code>.</p>\n</blockquote>\n<p>Works alright for me though, without any back ticks. Maybe this depends on the version of Lean. <code>Lean (version 3.4.2, commit cbd2b6686ddb, Release)</code></p>",
        "id": 256014557,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633330928
    },
    {
        "content": "<p>So the <code>derive</code> magic is not working. How can I get a similar magic but such that it can do the <code>dsimp</code> thing for me?</p>",
        "id": 256014607,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633330974
    },
    {
        "content": "<p>I am also looking at <a href=\"https://arxiv.org/pdf/1505.04324.pdf\">this paper</a> and it says that definitions may be marked as reducible. <em>(Section 2.3.)</em> Maybe I should mark my definition as reducible?</p>",
        "id": 256014662,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633331029
    },
    {
        "content": "<p>You are using an <em>ancient</em> version of Lean</p>",
        "id": 256014770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633331091
    },
    {
        "content": "<p>Did you follow the instructions on <a href=\"https://leanprover-community.github.io/get_started.html#regular-install\">https://leanprover-community.github.io/get_started.html#regular-install</a> and <a href=\"https://leanprover-community.github.io/install/project.html\">https://leanprover-community.github.io/install/project.html</a> ?</p>",
        "id": 256014826,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633331138
    },
    {
        "content": "<p>No, I asked my package manager to get Lean 3 for me.</p>",
        "id": 256015090,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633331288
    }
]