[
    {
        "content": "<p>The lean prover manual says \"In the type theory literature, there are further generalizations of inductive definitions, for example, the principles of induction-recursion and induction-induction. These are not supported by Lean.\" I read a bit about <a href=\"https://en.wikipedia.org/wiki/Induction-recursion\">induction-recursion (wikipedia)</a>. <strong>This is just a curiosity</strong>: Is this something that would ever be useful in formalizing math?</p>",
        "id": 207934208,
        "sender_full_name": "Chris M",
        "timestamp": 1598342466
    },
    {
        "content": "<p>You see it used mostly by the type theory fanatics that already see inductive types as a hammer and everything as a nail</p>",
        "id": 207934785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598342897
    },
    {
        "content": "<p>An example is that you can use an inductive-recursive type to very naturally capture the type of well typed terms mutual with the type of contexts, and so prove the consistency of DTT</p>",
        "id": 207934845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598342962
    },
    {
        "content": "<p>I forget all the details, but it's something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">mutual</span> <span class=\"kn\">inductive</span> <span class=\"kn\">context</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n<span class=\"k\">with</span> <span class=\"kn\">context</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"kn\">context</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kn\">context</span>\n<span class=\"k\">with</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kn\">context</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">univ</span> <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"err\">Γ</span>\n<span class=\"bp\">|</span> <span class=\"n\">pi</span> <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"err\">Γ</span>\n<span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"err\">Γ</span>\n<span class=\"k\">with</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kn\">context</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">lift</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207936277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598344200
    },
    {
        "content": "<p>I recall a talk by Peter LeFanu Lumsdaine (I think) about how to represent buildings (some homotopy theory thing like CW complexes) using inductive-recursive types</p>",
        "id": 207936548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598344401
    },
    {
        "content": "<p>Misremembered the author, but the slides <a href=\"https://personal.cis.strath.ac.uk/fredrik.nordvall-forsberg/talks/BCTCS_2010/indind_BCTCS.pdf\">here</a> look familiar</p>",
        "id": 207936959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598344716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> and I had an interesting discussion about this on the discord a few weeks back. The question came up about higher inductive types and whether they were useful for mathematics, and I said \"well I formalised perfectoid spaces and schemes and I didn't need anything apart from structures so clearly they're not important\" and then Bhavik linked to a parody article about someone who knows a programming language which is not too high-level and not too low-level and then looks at what the lower-level programming languages do and says \"golly I'm glad my language has got these features so you don't have to struggle like they do\" and then he looks at what higher-level programming languages are doing and says \"they're using all these crazy features and I don't understand their code but it's clearly not necessary because I can do everything I want to do in my language\"</p>",
        "id": 207937914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345436
    },
    {
        "content": "<p>the point being that perhaps higher inductive types are useful even though I don't need them</p>",
        "id": 207937957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345480
    },
    {
        "content": "<p>Bhavik will I'm sure remember the link to the parody</p>",
        "id": 207937971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345502
    },
    {
        "content": "<p>That's known as the blub paradox.  Maybe it was Paul Graham's essay that introduced them?</p>",
        "id": 207938062,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598345576
    },
    {
        "content": "<p>I guess you said a parody, so probably not.  But here's his essay: <a href=\"http://paulgraham.com/avg.html\">http://paulgraham.com/avg.html</a></p>",
        "id": 207938110,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598345635
    },
    {
        "content": "<p>someone needs to write a language called blub</p>",
        "id": 207938307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598345786
    },
    {
        "content": "<p>Yeah this is it, perhaps it was someone else's take on Blub but I think it was called Blub</p>",
        "id": 207938504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345952
    },
    {
        "content": "<p>in fact I can now search for it on the discord</p>",
        "id": 207938508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345961
    },
    {
        "content": "<p>oh except I am live streaming at 10</p>",
        "id": 207938522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345980
    },
    {
        "content": "<p>regarding higher inductive types, Lean doesn't have \"higher types\" in the first place, but you probably used quotients, which you can see as a particular hard-coded baby higher inductive type.</p>",
        "id": 207945150,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598351088
    },
    {
        "content": "<p>About induction-recursion, I would say: yes, there are definitions in math that can naturally be viewed as examples of induction-recursion; but they aren't of this \"model of type theory\" sort, and (usually?) can be encoded in other ways. So for the purposes of math, not supporting induction-recursion is sort of like (hypothetically) not supporting mutual inductive types.</p>",
        "id": 207945619,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598351511
    },
    {
        "content": "<p>Whether it would be <em>useful</em> to have direct support for induction-recursion is hard to say, given that it's not so easy to try using them.</p>",
        "id": 207945711,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598351592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20induction-recursion.20and.20induction-induction.20limitation.3F/near/207938110\">said</a>:</p>\n<blockquote>\n<p>I guess you said a parody, so probably not.  But here's his essay: <a href=\"http://paulgraham.com/avg.html\">http://paulgraham.com/avg.html</a></p>\n</blockquote>\n<p>Yeah this was exactly what I'd linked</p>",
        "id": 207945724,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1598351606
    },
    {
        "content": "<p>I remember trying to formalise some definition of Jamie Vicary's about higher categories at some point, and realised I was trying to write something than needed induction-recursion. I can't find this now.</p>",
        "id": 207953590,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598356887
    },
    {
        "content": "<p>A student at some point claimed that they wanted to use induction-recursion to formalise CW complexes, but I never got to the bottom of their difficulty. I'm pretty confident in that case it was not necessary.</p>",
        "id": 207953695,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598356950
    },
    {
        "content": "<p>They may have been trying to do a HoTT style of cell complex, where the type associated to most cell complexes will be a higher inductive type? (e.g. the CW complex for a circle would translate to a type with two constructors: A base point, and a non-trivial path from the base point to itself, a torus would be a type with 4 constructors, etc.) Although this is more a way to look at particular complexes than a generic formalization of them.</p>",
        "id": 207955028,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1598357789
    },
    {
        "content": "<p>If you want to build the type \"CW complexes of dimension at most n\" as an inductive family indexed on n, then you need induction-recursion in order to say what it means to give attaching maps for the n-cells. But you can also define that type by recursion on n, and this would be supported by Lean.</p>",
        "id": 207955052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598357814
    },
    {
        "content": "<p>When I realized this (and that it would also solve another problem of mine) I stopped accumulating a list of examples of induction-recursion in math. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 207955316,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598358010
    },
    {
        "content": "<p>The CW complex example is a bit flawed in that it's not clear how you would describe infinite-dimensional ones.</p>",
        "id": 207955380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598358094
    }
]