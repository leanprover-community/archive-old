[
    {
        "content": "<p>Hi,</p>\n<p>I am working on a proof of Euler summation, which is now complete up to general facts on definite integrals (essentially, FTC2 as called in here, just for continuous functions).  There has been lots of frustration when doing apparently simple manipulations, and my feeling is that someone good at tactic writing should look at how to improve the situation. Here are three examples that have I have taken from <code>calc</code> proofs and that I thought would require one or two lines only. Each has taken me quite a bit of both lines and time. Of course I could golf the proof of each of them, but that wouldn't reduce the time. The first involves simple manipulations with the reals, but ring/field_simp combinations didn't do the trick at all. The other two are inequalities that should be very easy (especially the last one) but took a bit too much. Any comments are welcome.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">original_difficult_inequality</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span>\n         <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n            <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">-</span>\n      <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">difficult_equality</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span>\n         <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n            <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n    <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">-</span>\n      <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">annoying_inequality</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">quo_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">/</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">/</span> <span class=\"n\">A</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">≤</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">24</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">/</span> <span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">simple_inequality</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220251116,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608216198
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? ;-)</p>",
        "id": 220251327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608216286
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">difficult_equality</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span>\n         <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n            <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n    <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">-</span>\n      <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring_exp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220251464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608216342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220251327\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? ;-)</p>\n</blockquote>\n<p>I copy/pasted for a file I had made to prepare this question, and forgot the two first lines! I fixed it now...</p>",
        "id": 220251618,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608216414
    },
    {
        "content": "<p>Oh! <code>ring_exp</code>! Just learned a new tactic...</p>",
        "id": 220251671,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608216443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220251464\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">ring_exp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I've updated the original question with a <code>original_difficult_equality</code> challenge, which was what I encountered originally. Of course, once you have <code>difficult_equality</code> then you can solve the origional one with <code>exact_mod_cast @difficult_equality  x (cos x) n</code>. But is there an easier tactic way for this? You just need to use that cos x is real...</p>",
        "id": 220252504,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608216858
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">simple_inequality</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">h2</span>\n    <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ_ne_zero</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div_assoc'</span><span class=\"o\">,</span> <span class=\"n\">div_eq_div_iff</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mul_ne_zero</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption_mod_cast</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mul_ne_zero</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption_mod_cast</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220252653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608216949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Are you implying that I should consider this an admissible proof for an argument that is just \"divide both sides by 2\" ?</p>",
        "id": 220253175,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608217184
    },
    {
        "content": "<p>(I would be surprised if <code>analysis.special_functions.trigonometric</code> didn't import <code>data.real.basic</code> ;-) )</p>",
        "id": 220253176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608217185
    },
    {
        "content": "<p>yeah I'm sure we can do better with that one. What's the lemma? <del><code>a/(2*b)=2*a/b</code> right?</del> I totally agree.</p>",
        "id": 220253349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608217247
    },
    {
        "content": "<p>It's <code>a &lt;= b / (d * c) -&gt; d * a &lt;= b / c</code> or something. I bet that's not in there. But a &lt;= x/d -&gt; d * a &lt;= x will be. Division is hard, you have to prove you're not dividing by zero. You omitted that part in your argument. What I'm saying is that in your _statement_ there is already some mathematics, namely the implicit assertion that what you write makes sense. As a mathematician you forget that this is part of the argument.</p>",
        "id": 220253735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608217416
    },
    {
        "content": "<p>\"Just dividing both sides by 2\" is under half of the proof. The rest is making sure that what you write has mathematical meaning.</p>",
        "id": 220253847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608217470
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">simple_inequality</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_div_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_div_iff</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220253850,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608217474
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_div_iff</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220254050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608217573
    },
    {
        "content": "<p>I like these a bit better <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> and <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> ...</p>",
        "id": 220254094,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608217603
    },
    {
        "content": "<p><code>le_div_iff</code> gives <code>a &lt;= x/d -&gt; a * d &lt;= x</code> which is what I should have used in the first place.</p>",
        "id": 220254135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608217638
    },
    {
        "content": "<p>Yes, I was now trying to add <code>0 &lt; 2</code> to the list of assumptions and see if Lean could figure out the proof by itself.</p>",
        "id": 220254201,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608217682
    },
    {
        "content": "<p>One and a half more to go ;-).</p>",
        "id": 220254278,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608217711
    },
    {
        "content": "<p>it would be great if we could have some sort of <code>tidy_ineq_basher</code> that would \"try the obvious things\" and call <code>norm_num</code> and <code>linarith</code> when needed. And then spit out a proof-script that is reasonably fast.</p>",
        "id": 220254282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608217714
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">original_difficult_inequality</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span>\n         <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n            <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">-</span>\n      <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_exp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220254286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608217719
    },
    {
        "content": "<p><del>Is <code>annoying_inequality</code> true? What's the maths proof?</del> Oh, I missed the x on the denominator, I thought we had an x^3 not cancelling with an x^2</p>",
        "id": 220254394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608217785
    },
    {
        "content": "<p>Two new tactics today, I didn't know about <code>generalize</code> either, it looks like it's really handy to remove clutter...</p>",
        "id": 220254653,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608217902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220254282\">said</a>:</p>\n<blockquote>\n<p>it would be great if we could have some sort of <code>tidy_ineq_basher</code> that would \"try the obvious things\" and call <code>norm_num</code> and <code>linarith</code> when needed. And then spit out a proof-script that is reasonably fast.</p>\n</blockquote>\n<p>I was thinking about this... also for <code>field_simp</code> it would be useful that it gave you feedback on which things it tried to invert but failed because it didn't know they were nonzero. You could then try to add those manually.</p>",
        "id": 220254855,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608217992
    },
    {
        "content": "<p><code>field_simp</code> does give you that feedback -- just look at the denominators it leaves behind.</p>",
        "id": 220254908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608218019
    },
    {
        "content": "<p>Well, it doesn't try very hard at those. You'd expect that it'd know that (2:\\R) was nonzero. But fine, I know that \"this is not the job of field_simp\"...</p>",
        "id": 220255245,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608218149
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">annoying_inequality</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">quo_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">/</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">/</span> <span class=\"n\">A</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">≤</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">24</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">/</span> <span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h24</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">24</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">24</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span><span class=\"o\">,</span>\n    <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">h24</span><span class=\"o\">],</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220255349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608218182
    },
    {
        "content": "<p>Of course some part of Lean's system can prove easily that 2 isn't 0. But not all parts of Lean's system talk to all other parts at all times, because this would just cause chaos. You are falling into a trap which I used to fall into a lot -- \"it's obvious, so why doesn't Lean do it automatically?\". Making Lean do all obvious things automatically would just make it stop working, because there are 10000 things which are obvious to you as a professional number theorist.</p>",
        "id": 220255514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608218258
    },
    {
        "content": "<p>It's not the job of <code>field_simp</code>, but that doesn't mean that there can't be another tactic that does this for us.</p>",
        "id": 220255516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608218259
    },
    {
        "content": "<p>It just means that we need higher-level \"conductor\" tactics, that direct the lower-level ones</p>",
        "id": 220255666,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608218297
    },
    {
        "content": "<p>Those \"conductor\" tactics will probably be slow. So they should have a <code>?</code> option to print the proof-script they found in lower-level tactics.</p>",
        "id": 220255740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608218331
    },
    {
        "content": "<p>Like Mario says about metamath: you don't want <code>omega</code> in your proof. You should run it once, and store the output.</p>",
        "id": 220255813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608218367
    },
    {
        "content": "<p>Unfortunately, I have no idea how to write these conductor-tactics. But I think they will be a huge win for these kinds of computations.</p>",
        "id": 220255953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608218407
    },
    {
        "content": "<p>Kevin, I understand your point, I had read it from you somewhere else. But as Johan says, there should be higher-level tactics that do this. The examples I gave you showed up as simple calc steps, I already broke it up in simple bits. But these ones caused a lot of pain.</p>",
        "id": 220255974,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608218416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254058\">@Marc Masdeu</span> if you want to learn how to write a tactic, then you could write <code>field_simp2</code> which was <code>field_simp</code> but in addition looked through the local context to find any hypotheses of the form <code>x ≠ 0</code> and added them to some list, and also looked through all denominators which were nonzero numerals  and added them automatically to the list, and then applied <code>field_simp</code> with that list. And then the moment you did this you'd have someone complainining that they have a hypothesis <code>A != B</code> and your stupid tactic didn't know that <code>A - B</code> was non-zero. So then you fix this and you have someone else complaining that your stupid tactic doesn't know that <code>x^2+37 != 0</code> where x is a rational. Can't you see? It never ends! If you learn how to write tactics you can write your own tactics which are minor extensions of the basic ones, and these minor extensions are not hard to write.</p>",
        "id": 220256090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608218464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220255953\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, I have no idea how to write these conductor-tactics. But I think they will be a huge win for these kinds of computations.</p>\n</blockquote>\n<p>My feeling is that this would allow more people to jump in and proving things. I have 900-line proof of this very simple result (Euler summation). On a pdf it takes 3 pages, which could easily be condensed to one or two. I tell this to my colleagues and they laugh at it...</p>",
        "id": 220256192,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608218516
    },
    {
        "content": "<p>But this is the second time in the last few days that numerals being non-zero not being known by <code>field_simp</code> has come up and it would not be hard to fix.</p>",
        "id": 220256257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608218533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> \"it never ends\" but we should do it anyway</p>",
        "id": 220256300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608218555
    },
    {
        "content": "<p>Take the LaTeX file and compare it to the size of the Lean file. What's the ratio?</p>",
        "id": 220256309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608218559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is this something for <code>norm_num</code> plugins? Or should it rather be a new higher-level tactic?</p>",
        "id": 220256358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608218581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220256309\">said</a>:</p>\n<blockquote>\n<p>Take the LaTeX file and compare it to the size of the Lean file. What's the ratio?</p>\n</blockquote>\n<p>After <code>gzip</code>ing right?</p>",
        "id": 220256384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608218594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220256309\">said</a>:</p>\n<blockquote>\n<p>Take the LaTeX file and compare it to the size of the Lean file. What's the ratio?</p>\n</blockquote>\n<p>It's not the size, but how long it takes to type up what matters. And I better not tell you how long it has taken me to type the proof up...</p>",
        "id": 220256452,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608218626
    },
    {
        "content": "<p>Usually these things are around 4. But also remember that you are an expert in writing pdfs and a relative newcomer for writing Lean proofs.</p>",
        "id": 220256467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608218632
    },
    {
        "content": "<p>Writing Lean proofs like this is a really good way to learn though.</p>",
        "id": 220256565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608218666
    },
    {
        "content": "<p>(relative newcomer in the sense that you've been doing maths in LaTeX for a <em>lot</em> longer!)</p>",
        "id": 220256613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608218693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220256613\">said</a>:</p>\n<blockquote>\n<p>(relative newcomer in the sense that you've been doing maths in LaTeX for a <em>lot</em> longer!)</p>\n</blockquote>\n<p>Don't worry, I wouldn't take offense <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 220256725,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608218746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254058\">@Marc Masdeu</span> we should think more carefully about how to make <code>field_simp</code> better because I absolutely do agree that you have a point.</p>",
        "id": 220256741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608218751
    },
    {
        "content": "<p>I mostly agree this because it's the second time it has come up in the last week.</p>",
        "id": 220256830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608218773
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">h24</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">24</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">24</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span><span class=\"o\">,</span>\n    <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">h24</span><span class=\"o\">],</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>takes four tactics to solve</p>",
        "id": 220256895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608218812
    },
    {
        "content": "<p>And I'd like to learn how to write tactics. I hoped that by giving some challenges the tactic-writers would take the hint...</p>",
        "id": 220256945,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608218834
    },
    {
        "content": "<p>It's difficult for me to know how hard these are in practice because I am not a tactic-writer. In the first part of one of my whingey messages above I was saying that all you have to do in this case is to look for (a) things of the form \"x \\ne 0\" in the local context, and (b) nonzero numerals in the local context, but maybe it's even easier.</p>",
        "id": 220257170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608218926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220256830\">said</a>:</p>\n<blockquote>\n<p>I mostly agree this because it's the second time it has come up in the last week.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> make sure that it wasn't a close relative of mine who came up with the problem...</p>",
        "id": 220257219,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608218945
    },
    {
        "content": "<p>One could envisage a general \"prove that this is non-zero\" tactic, which given a hypothesis <code>hx : x != 0</code> manages to prove automatically that <code>24*x != 0</code> and, because this is a denominator in the goal, feeds this into <code>field_simp</code> which makes <code>field_simp</code> work better.</p>",
        "id": 220257475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608219044
    },
    {
        "content": "<p>I guess that one could try to write a tactic that decides formulas in the language of real closed fields... but this sounds like quite a big effort. And it will be slow if it isn't written by an expert. Also, it might not give short witnesses that can replace the tactic call.</p>",
        "id": 220257738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608219147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254058\">Marc Masdeu</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220256945\">said</a>:</p>\n<blockquote>\n<p>And I'd like to learn how to write tactics. I hoped that by giving some challenges the tactic-writers would take the hint...</p>\n</blockquote>\n<p>You should make an issue on mathlib's github page (tagged with meta, and easy / medium or something) then so the hint isan't lost to time!</p>",
        "id": 220257745,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608219150
    },
    {
        "content": "<p>I'll look at the tactics videos that are around and see if I can make sense of it...</p>",
        "id": 220257762,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608219156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> We should probably have a <code>IMOkid</code> tactic that just knows all the standard IMO tricks for solving inequalities.<br>\nThat tactic doesn't need to be able to tackle every IMO inequality ever. If it tackles 70% that will already be very helpful.</p>",
        "id": 220258041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608219249
    },
    {
        "content": "<p>Opportunistic automation.</p>",
        "id": 220258084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608219264
    },
    {
        "content": "<p>I see. I think I am proposing a <code>clear_denom</code> tactic, which acts on goals of the form <code>a / b = c / d</code> or <code>a / b = c</code> and tries to reduce them to the form <code>a * d = b * c</code> or <code>a * c = b</code>, closing the auxiliary goals which show up (denominators != 0) by applying a simple <code>show_nonzero</code> tactic which looks through the local context, applies things like <code>mul_nonzero</code> and that numerals other than zero are non-zero. And then there's a natural <code>field</code> tactic, which applies <code>field_simp</code> and then <code>clear_denom</code> and then <code>ring</code>. <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is this as simple as it looks or am I missing something? Of course it won't work in every case but it might be a step in the right direction for people like Marc.</p>",
        "id": 220258141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608219287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220256358\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> is this something for <code>norm_num</code> plugins? Or should it rather be a new higher-level tactic?</p>\n</blockquote>\n<p>Is what? I see a lot of things in this thread, but not much that is actionable as a tactic-writer. What's the tactic supposed to do?</p>",
        "id": 220258245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608219333
    },
    {
        "content": "<p>We already have <code>nlinarith</code> which is surprisingly good! Rob was just \"well I'll assume squares are non-negative and that's it\" and I'm thinking \"that won't buy us much\" but actually it bought us lots!</p>",
        "id": 220258273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608219348
    },
    {
        "content": "<p><code>show_nonzero</code> is an opportunistic attempt to show things are non-zero by checking they're a product of things known to be nonzero. <code>clear_denom</code> clears denominators using <code>show_nonzero</code>.</p>",
        "id": 220258428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608219401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> My understanding was that this is what field_simp is supposed to do</p>",
        "id": 220258510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608219433
    },
    {
        "content": "<p>but it doesn't seem to deal with denominators.</p>",
        "id": 220258553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608219454
    },
    {
        "content": "<p>it deals with them, if you pass proofs that things are nonzero.<br>\nKevin wants a tactic that is like <code>field_simp</code>, but proves by itself that denoms are nonzero.</p>",
        "id": 220258748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608219519
    },
    {
        "content": "<p>In the docstring it says \"If the goal is an equality, this simpset will also clear the denominators\" but it won't deal with <code>24*x</code> if <code>x != 0</code> is in the local context, because it doesn't know 24 != 0 and it's irritating to have to tell it this -- <code>ring</code> doesn't need to be told it.</p>",
        "id": 220258760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608219526
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">24</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 220258879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608219577
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">24</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span> <span class=\"c1\">-- simplify tactic failed to simplify</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220258915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608219601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220258245\">said</a>:</p>\n<blockquote>\n<p>Is what? I see a lot of things in this thread, but not much that is actionable as a tactic-writer. What's the tactic supposed to do?</p>\n</blockquote>\n<p>we just want a tactic that takes the goals that Marc posted above, and outputs the proof scripts that Kevin wrote himself (also posted above)</p>",
        "id": 220258965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608219606
    },
    {
        "content": "<p>Okay so show_nonzero is something like <code>apply_rules</code> with:</p>\n<ul>\n<li><code>a != 0 -&gt; b != 0 -&gt; a * b != 0</code></li>\n<li><code>n != 0</code> for n a numeral -&gt; call norm_num</li>\n<li><code> \\u a != 0</code> -&gt; call norm_cast</li>\n</ul>",
        "id": 220259007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608219628
    },
    {
        "content": "<p>and also look in the local context?</p>",
        "id": 220259032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608219644
    },
    {
        "content": "<p>and <code>assumption</code> at every stage</p>",
        "id": 220259077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608219662
    },
    {
        "content": "<p>got it</p>",
        "id": 220259094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608219670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220258965\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220258245\">said</a>:</p>\n<blockquote>\n<p>Is what? I see a lot of things in this thread, but not much that is actionable as a tactic-writer. What's the tactic supposed to do?</p>\n</blockquote>\n<p>we just want a tactic that takes the goals that Marc posted above, and outputs the proof scripts that Kevin wrote himself (also posted above)</p>\n</blockquote>\n<p>I suspected you would say that. That's not what I would call actionable, because I'm not clever enough to invent an algorithm that will solve arbitrarily complicated combinations of things</p>",
        "id": 220259461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608219828
    },
    {
        "content": "<p>Kevin's suggestion looks like a tactic though</p>",
        "id": 220259534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608219852
    },
    {
        "content": "<p>Can someone remind me how to write a tactic which just runs a tactic script? For example if I want to write a tactic which does <code>rw add_comm, simp, ring</code>, how do I make that into one tactic?</p>",
        "id": 220259734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608219957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220259734\">said</a>:</p>\n<blockquote>\n<p>Can someone remind me how to write a tactic which just runs a tactic script? For example if I want to write a tactic which does <code>rw add_comm, simp, ring</code>, how do I make that into one tactic?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 220259862,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1608220009
    },
    {
        "content": "<p>There is some ludicrously simple way to do this involving some number of backticks but I can never remember where it is and my</p>",
        "id": 220259870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608220014
    },
    {
        "content": "<p>thanks</p>",
        "id": 220259884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608220022
    },
    {
        "content": "<p>...my last attempt to get an example such as this into <code>extras/tactic_writing.html</code> failed for some reason I can't remember</p>",
        "id": 220260053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608220095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220257738\">said</a>:</p>\n<blockquote>\n<p>I guess that one could try to write a tactic that decides formulas in the language of real closed fields... but this sounds like quite a big effort. And it will be slow if it isn't written by an expert. Also, it might not give short witnesses that can replace the tactic call.</p>\n</blockquote>\n<p>This is certainly a big effort, will probably be slow even if written by an expert, and I'm not aware of a good certificate format. <a href=\"https://www.cl.cam.ac.uk/~jrh13/papers/cade05.pdf\">https://www.cl.cam.ac.uk/~jrh13/papers/cade05.pdf</a></p>",
        "id": 220260104,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608220120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220260053\">said</a>:</p>\n<blockquote>\n<p>...my last attempt to get an example such as this into <code>extras/tactic_writing.html</code> failed for some reason I can't remember</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/extras/tactic_writing.html#marios-backtick-cheat-sheet\">https://leanprover-community.github.io/extras/tactic_writing.html#marios-backtick-cheat-sheet</a> last bullet point?</p>",
        "id": 220260350,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608220224
    },
    {
        "content": "<p>How can I tell <code>apply_rules</code> to try <code>norm_num</code>?</p>",
        "id": 220260608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608220327
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://leanprover-community.github.io/extras/tactic_writing.html#marios-backtick-cheat-sheet\">https://leanprover-community.github.io/extras/tactic_writing.html#marios-backtick-cheat-sheet</a> last bullet point?</p>\n</blockquote>\n<p>I would have noticed it if there had been an example, I suspect. Maybe I should write one!</p>",
        "id": 220260776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608220408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220260608\">said</a>:</p>\n<blockquote>\n<p>How can I tell <code>apply_rules</code> to try <code>norm_num</code>?</p>\n</blockquote>\n<p>hmm, maybe I should just do it afterwards.</p>",
        "id": 220260899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608220445
    },
    {
        "content": "<p>i would be very happy if field_simp could solve things like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220261297,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608220603
    },
    {
        "content": "<p>and also <code>a - 1</code>? :-/</p>",
        "id": 220261388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608220647
    },
    {
        "content": "<p>?</p>",
        "id": 220261451,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608220674
    },
    {
        "content": "<p>If <code>h : A != B</code> then you want to know both that <code>A - B != 0</code> and that <code>B - A != 0</code></p>",
        "id": 220261545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608220704
    },
    {
        "content": "<p>Oh yeah sure :)</p>",
        "id": 220261566,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608220711
    },
    {
        "content": "<p>and tomorrow you'll want to know that if <code>A &lt; B</code> then also <code>A - B != 0</code> and <code>B - A != 0</code></p>",
        "id": 220261588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608220722
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">24</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">div_eq_div_iff</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">eq_div_iff</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">mul_ne_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">norm_num</span><span class=\"o\">}},</span>\n<span class=\"kd\">end</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">clear_denoms</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">div_eq_div_iff</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">eq_div_iff</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">mul_ne_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">norm_num</span><span class=\"o\">}},</span>\n<span class=\"o\">]</span> <span class=\"c1\">-- incomprehensible error</span>\n</code></pre></div>\n<p>:-(</p>",
        "id": 220261757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608220801
    },
    {
        "content": "<p>aah, it's the trailing <code>,</code></p>",
        "id": 220261913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608220857
    },
    {
        "content": "<p>nice!</p>",
        "id": 220262551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608221138
    },
    {
        "content": "<p>this should probably be plugged into the generic machinery that Scott wrote for tidy</p>",
        "id": 220262580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608221153
    },
    {
        "content": "<p>Like, <code>tidy</code> is implemented using <code>tactic.chain</code>, and maybe this should also use that.</p>",
        "id": 220262660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608221174
    },
    {
        "content": "<p>lol there's already a <code>field</code> tactic!</p>",
        "id": 220263283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608221452
    },
    {
        "content": "<p>Not sure it's the same fields though</p>",
        "id": 220263307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608221464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220263283\">said</a>:</p>\n<blockquote>\n<p>lol there's already a <code>field</code> tactic!</p>\n</blockquote>\n<p>It's completely undocumented <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 220264277,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608221763
    },
    {
        "content": "<p>From the tests:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_semigroup</span> <span class=\"o\">:=</span> <span class=\"n\">semigroup</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_semigroup</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">},</span>\n  <span class=\"n\">field</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">{</span>\n    <span class=\"n\">guard_target</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h.elim</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220264310,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608221770
    },
    {
        "content": "<p>But it has no doc of its own and it's not mentioned in the docs for <code>refine_struct</code></p>",
        "id": 220264349,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608221791
    },
    {
        "content": "<p>Do we have a tactic which turns <code>a/b*c*d/e*f</code> into X/Y?</p>",
        "id": 220264442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608221825
    },
    {
        "content": "<p>oh forget that, I think <code>field_simp</code> is fine</p>",
        "id": 220264725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608221929
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">show_nonzero</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span>\n  <span class=\"n\">apply_rules</span> <span class=\"o\">[</span>\n    <span class=\"n\">mul_ne_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">sub_ne_zero.2</span><span class=\"o\">,</span>\n    <span class=\"n\">ne.symm</span><span class=\"o\">,</span>\n    <span class=\"n\">ne_of_gt</span><span class=\"o\">,</span>\n    <span class=\"n\">ne_of_lt</span>\n    <span class=\"o\">],</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">norm_num</span><span class=\"o\">}}</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">clear_denoms</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">div_eq_div_iff</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">eq_div_iff</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">eq_div_iff</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">ring_exp</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">show_nonzero</span><span class=\"o\">}</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">discrete_field</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">field_simp</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">clear_denoms</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">ring_exp</span><span class=\"o\">}</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">24</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">discrete_field</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">inv_eq_one_div</span><span class=\"o\">,</span>\n  <span class=\"n\">discrete_field</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"254058\">@Marc Masdeu</span> <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span></p>",
        "id": 220265052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608222067
    },
    {
        "content": "<p>just ignore the \"maximal iterations reached\" stuff, I have no idea what that means but the goal gets closed</p>",
        "id": 220265232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608222130
    },
    {
        "content": "<p>Not really relevant here, but with only outermost universal quantifiers it should be possible to produce proof certificates based on the Positivstellensatz.</p>",
        "id": 220267583,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608223171
    },
    {
        "content": "<p>I say it's not relevant because these problems are not really any harder than checking the proof certificates</p>",
        "id": 220267643,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608223199
    },
    {
        "content": "<p>in theory it seems like this should be solvable using brute force, without any mathematical understanding of this specific problem. it takes 4 tactics to solve, lean doesn't have <em>that</em> many tactics....</p>",
        "id": 220272684,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1608225452
    },
    {
        "content": "<p>I have already said this several times, but I'll  say it again and again, hoping it percolates to someone who can implement that. In Isabelle, there is something called simprocs: baby tactics that are applied by simp under the right conditions. Checking that a numeral is nonzero would be a perfect simproc. With this, no need for a new tactic, <code>field_simp</code> would work fine as it is just <code>simp</code> with an additional simpset.</p>",
        "id": 220277916,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1608227511
    },
    {
        "content": "<p>I think this is one situation where Lean 4's default arguments will turn out to be very useful: we'll be able to put <code>by prove_its_nonzero</code> as the default argument in those division lemmas.</p>",
        "id": 220278411,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1608227736
    },
    {
        "content": "<p>In this case it could be achieved by using a different discharger in <code>field_simp</code>, right? Not a full simp proc. If <code>field_simp</code> were something like <code>simp only using field_simps {discharger := prove_its_nonzero &lt;|&gt; default_discharger}</code> wouldn't that achieve what you want?</p>",
        "id": 220278546,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608227800
    },
    {
        "content": "<p>simprocs are a rather fundamental change to the way simp works, and so I don't expect it to happen in lean 3. Perhaps we should put that on the todo list for lean 4 <code>simp</code></p>",
        "id": 220281645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608229291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113489-new-members/topic/Solving.20simple.20(in)equalities.20gets.20frustrating/near/220278546\">said</a>:</p>\n<blockquote>\n<p>In this case it could be achieved by using a different discharger in <code>field_simp</code>, right? Not a full simp proc. If <code>field_simp</code> were something like <code>simp only using field_simps {discharger := prove_its_nonzero &lt;|&gt; default_discharger}</code> wouldn't that achieve what you want?</p>\n</blockquote>\n<p>I didn't even know this existed!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">24</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_ne_zero</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">discharger</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">norm_num</span><span class=\"o\">]},</span>\n  <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works fine.</p>",
        "id": 220295801,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1608236032
    },
    {
        "content": "<p>I didn't know this existed either!  Is there any reason not to rewrite <code>field_simp</code> so that this \"discharger\" is there by default?  I would say that 50% of the time I use <code>field_simp</code> there's a numeric constant around which I need to use <code>norm_num</code> for.</p>",
        "id": 220297000,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608236623
    },
    {
        "content": "<p>I'm on it. I need to practice a little bit my tactic fu, but I'll get there :-)</p>",
        "id": 220297555,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1608236900
    },
    {
        "content": "<p>Will this make things easier, though?  Currently I would solve a goal like this as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">24</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and in particular there's no need to remember the names of the lemmas <code>mul_eq_zero</code> and <code>mul_ne_zero</code>; <code>field_simp</code> takes care of this for me.  In the new version of the tactic, does one need to mention such lemmas explicitly?</p>",
        "id": 220298679,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608237381
    },
    {
        "content": "<p>It will just be <code>by { field_simp, ring }</code>.</p>",
        "id": 220299170,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1608237608
    },
    {
        "content": "<p>And will it still be possible to pass extra nonzero-facts as hypotheses?  <code>field_simp [ne_of_gt (norm_pos_iff.mpr ha)]</code>, etc.</p>",
        "id": 220300694,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608238329
    },
    {
        "content": "<p>Sure.</p>",
        "id": 220300733,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1608238345
    },
    {
        "content": "<p>OK, great!</p>",
        "id": 220300776,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608238368
    },
    {
        "content": "<p>I'm late to the party, but I want to write that I agree with everything Marc wrote. All this is incredibly painful, and the fact that we can golf the proofs is not at all the right measure of performance of Lean+mathlib here. Formalization time is the right one. This is simply yet another proof that we are very very far from having a usable tool.</p>",
        "id": 220353363,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608285293
    },
    {
        "content": "<p>To add to this data point, I met with Ashvni this morning who is doing some combinatorial stuff related to Bernouilli numbers, and she wanted an identity of products of binomial coefficients which turned into an equality of ratios of factorials which was trivial modulo <code>factorial_ne_zero</code> applied four times. Maybe some <code>ne_zero</code> lemmas could be tagged in some way and fed into this?</p>",
        "id": 220360750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608290560
    },
    {
        "content": "<p>If you have a mwe, I can check if tagging <code>factorial_ne_zero</code> with <code>field_simp</code> is enough here. Or you can try it yourself, with <code>attribute [field_simps] factorial_ne_zero</code>.</p>",
        "id": 220371558,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1608298111
    },
    {
        "content": "<p>I don't think <code>norm_num</code> should literally be the discharger. That entry point includes a lot of unnecessary simp. I think the discharger should be custom built to identify <code>numeral != 0</code> goals and call the internal norm_num function for this directly</p>",
        "id": 220372763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608298837
    }
]