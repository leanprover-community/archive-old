[
    {
        "content": "<p>I'm playing with the big operators, and I'm having trouble finding the right tactics to operate on its elements. In the following dummy example, I'm guessing the first step will use some combination of <code>sum_range_succ'</code> (even though I haven't figured it out yet). But my main question is the second <code>sorry</code>. How can I apply some tactic like <code>ring</code> inside of the big operator?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonzero_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">^</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"bp\">^</span><span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">calc</span>\n    <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">^</span><span class=\"n\">i</span>  <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"bp\">^</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199332129,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1590979443
    },
    {
        "content": "<p>second step should be <code>by simp only [pow_succ, mul_assoc, h, one_mul]</code>, possibly with <code>pow_succ'</code> and/or <code>←</code> before <code>mul_assoc</code>.</p>",
        "id": 199332492,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590980018
    },
    {
        "content": "<p>In the first step the only difficulty with applying <code>sum_range_succ'</code> is that you have <code>n + 2</code> while you need <code>n + 1 + 1</code>. The latter simplifies to the former but I'm not sure that they are defeq.</p>",
        "id": 199332566,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590980097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269975\">@Walter Moreira</span> Another approach would be to start with <code>rw finset.sum_congr rfl</code></p>",
        "id": 199332670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590980247
    },
    {
        "content": "<p>After that it should be <code>intros, straight_forward</code></p>",
        "id": 199332679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590980281
    },
    {
        "content": "<p>Ah, I see. <code>finset.sum_congr</code> is exactly what I was looking for before embarking in the calc tactic. Thanks a lot!</p>\n<p>By the way, is <code>straight_forward</code> a tactic? Or you just mean that it's easy from then on?</p>\n<p>[Thanks <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> for the hint on <code>simp</code> as well]</p>",
        "id": 199333229,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1590981056
    },
    {
        "content": "<p>I mean it's easy. (It <em>should</em> be a tactic)</p>",
        "id": 199333236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590981090
    },
    {
        "content": "<p>(Just like we've been wishing for <code>schoolkid</code> and <code>undergrad</code>....)</p>",
        "id": 199333241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590981108
    },
    {
        "content": "<p>But using Yury's approach, you could probably get rid of the entire <code>calc</code> block, and prove it in a 1-line simp call.</p>",
        "id": 199333438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590981370
    }
]