[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>How do you prove this? I tried induction H and I seemed to lose my hypothesis.</p>",
        "id": 166989648,
        "sender_full_name": "Anca Ciobanu",
        "timestamp": 1559303095
    },
    {
        "content": "<p>ha ha! Induction H seems to leave you in an unprovable state! What's going on there?</p>",
        "id": 166989745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559303186
    },
    {
        "content": "<p>ha ha, <code>revert H, simp</code> works :D</p>",
        "id": 166989793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559303278
    },
    {
        "content": "<p>This should be trivial</p>",
        "id": 166989794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559303278
    },
    {
        "content": "<p>I am totally confused</p>",
        "id": 166989997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559303439
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  0. [simplify.rewrite] [imp_self]: x = y → x = y ==&gt; true</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 166990041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559303491
    },
    {
        "content": "<p><code>simp</code> won't tell me how it did it!</p>",
        "id": 166990047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559303500
    },
    {
        "content": "<p>It uses <code>subtype.mk.inj_eq</code></p>",
        "id": 166990132,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559303563
    },
    {
        "content": "<p>I think</p>",
        "id": 166990134,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559303566
    },
    {
        "content": "<p>? This says <code>&lt;x,hx&gt;=&lt;y,hy&gt; = (x = y)</code> so now I have to jump through some hoops to make this. Anca is in tehe middle of a tactic proof and has <code>H : &lt;x,hx&gt;=&lt;y,hy&gt;</code> and we just want x=y.</p>",
        "id": 166990329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559303727
    },
    {
        "content": "<p><code>cases</code></p>",
        "id": 166990575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559303926
    },
    {
        "content": "<p><code>cases H</code> doesn't work!</p>",
        "id": 166990603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559303952
    },
    {
        "content": "<p>This is why we asked.</p>",
        "id": 166990605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559303955
    },
    {
        "content": "<p>you sure?</p>",
        "id": 166990622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559303969
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  cases tactic failed, unexpected failure when introducing auxiliary equatilies</span>\n<span class=\"cm\">  -/</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 166990634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559303979
    },
    {
        "content": "<p>What is an equatily?</p>",
        "id": 166990648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559303995
    },
    {
        "content": "<p>woah that's a new one</p>",
        "id": 166990652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559303999
    },
    {
        "content": "<p>I think you found the bug</p>",
        "id": 166990720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559304026
    },
    {
        "content": "<p><code>injection</code> should work</p>",
        "id": 166990776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559304097
    },
    {
        "content": "<p>the term proof is <code>subtype.no_confusion H id</code> or <code>subtype.mk.inj H</code></p>",
        "id": 166990972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559304280
    },
    {
        "content": "<p>you can also <code>simp at H</code></p>",
        "id": 166991110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559304449
    },
    {
        "content": "<p>(I am new to Lean so please excuse my style)<br>\nI ran into a  similar problem before and what I roughly did was</p>\n<div class=\"codehilite\"><pre><span></span>def mysubtype (X : Type) (P : X → Prop) : Type := {x : X // P x}\n\ndef myfun (X : Type) (P : X → Prop): mysubtype X P → X\n|⟨x, hx⟩ := x\n\nlemma mylemma (X : Type) (P : X → Prop) (x : X) (hx : P x): myfun X P ⟨x, hx⟩ = x := rfl\n\nexample (X : Type) (P : X → Prop) (x y : X) (hx : P x) (hy : P y)\n  (H : (⟨x, hx⟩ : mysubtype X P) = ⟨y, hy⟩ ) : x = y :=\ncongr_arg (myfun X P) H\n</pre></div>\n\n\n<p>Seems to be a bit of a detour though.</p>",
        "id": 166999117,
        "sender_full_name": "Xindi Ai",
        "timestamp": 1559311170
    },
    {
        "content": "<blockquote>\n<p>Seems to be a bit of a detour though.</p>\n</blockquote>\n<p>Yes! That was the annoying thing. I was showing an undergraduate how to use Lean and then this came up, and all of a sudden the whole thing looked far more complicated than it should have been.</p>",
        "id": 166999365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559311333
    },
    {
        "content": "<p><code>injection H</code> is probably the best way to so this. Another possibility is <code>congr_arg subtype.val H</code></p>",
        "id": 167024894,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559329832
    },
    {
        "content": "<p>laziest solution:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">library_search</span>\n  <span class=\"c1\">-- exact subtype.mk.inj H</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 167025367,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1559330182
    }
]