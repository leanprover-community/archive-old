[
    {
        "content": "<p>Hi, I wrote some code for flat modules over commutative rings (definition and a couple of basic theorems). I wonder if the community is OK with me adding that to mathlib?</p>",
        "id": 215264255,
        "sender_full_name": "Roman Fedorov",
        "timestamp": 1604267827
    },
    {
        "content": "<p>I am sure the answer will be yes.  Have you seen this page<br>\n<a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a><br>\noutlining the process?  Do you need write access to mathlib branches, if so what is your Github username?</p>",
        "id": 215264740,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604268455
    },
    {
        "content": "<p>I believe <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> has some work in progress on flat modules,<br>\n<a href=\"https://github.com/leanprover-community/mathlib/tree/flat-module\">https://github.com/leanprover-community/mathlib/tree/flat-module</a><br>\nso some co-ordination might be required.</p>",
        "id": 215264948,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604268703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , I went to this branch but could not find where flat modules are defined. Probably my lack of experience with github.</p>",
        "id": 215265638,
        "sender_full_name": "Roman Fedorov",
        "timestamp": 1604269666
    },
    {
        "content": "<p>Ah, sorry, here's the trick: find the \"compare\" button.  This takes you to a page with Johan's additions clearly marked:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/compare/flat-module\">https://github.com/leanprover-community/mathlib/compare/flat-module</a></p>",
        "id": 215265695,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604269730
    },
    {
        "content": "<p>(click on \"files changed\")</p>",
        "id": 215265703,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604269768
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 215266527,
        "sender_full_name": "Roman Fedorov",
        "timestamp": 1604270955
    },
    {
        "content": "<p>One issue will be that there are several mathematically equivalent definitions of a flat module and someone who knows about the subtleties of these things will have to make a decision about what the best definition is from a formalisation point of view</p>",
        "id": 215267240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604272056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306866\">@Roman Fedorov</span> Cool! Do you have a link to your code somewhere?</p>",
        "id": 215281294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604296079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Here is the link: <a href=\"https://drive.google.com/file/d/1y0l7l9WgK05wJRoy1kpY21t6kzBvDuFD/view?usp=sharing\">https://drive.google.com/file/d/1y0l7l9WgK05wJRoy1kpY21t6kzBvDuFD/view?usp=sharing</a>. I have done much less than you (and I am using a different definition of flat module, though I guess you prove it is equivalent). I have proved that tensor product of flat modules is flat and that a non-zero divisor remains a non-zero divisor in a flat module (basically, I just wanted to play a bit with the definition to see that nothing breaks).  But I guess my proofs are too long as I don't know how to use all that automation.</p>",
        "id": 215402593,
        "sender_full_name": "Roman Fedorov",
        "timestamp": 1604367120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306866\">@Roman Fedorov</span> When I go to that link google asks me to login, but I don't have a google login. Any chance you could upload it somewhere else? (For example <a href=\"http://pastebin.com\">pastebin.com</a> or a github gist.)</p>",
        "id": 215415186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604382942
    },
    {
        "content": "<p>Is it better? <a href=\"https://drive.google.com/file/d/1y0l7l9WgK05wJRoy1kpY21t6kzBvDuFD/view?usp=sharing\">https://drive.google.com/file/d/1y0l7l9WgK05wJRoy1kpY21t6kzBvDuFD/view?usp=sharing</a></p>",
        "id": 215474530,
        "sender_full_name": "Roman Fedorov",
        "timestamp": 1604419839
    },
    {
        "content": "<p>It seems to be loading forever... can't you just paste the file in <a href=\"http://pastebin.com\">pastebin.com</a>?</p>",
        "id": 215475152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604420033
    },
    {
        "content": "<p><a href=\"https://pastebin.com/e9j44FLQ\">https://pastebin.com/e9j44FLQ</a></p>",
        "id": 215477516,
        "sender_full_name": "Roman Fedorov",
        "timestamp": 1604421064
    },
    {
        "content": "<p>if you upload it in gist you can enable Lean syntax highlighting</p>",
        "id": 215477712,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604421152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  <a href=\"https://gist.github.com/rmfedorov/6dae5d559bd0dafd9f87300bf1e537ad@\">https://gist.github.com/rmfedorov/6dae5d559bd0dafd9f87300bf1e537ad@</a></p>",
        "id": 215481250,
        "sender_full_name": "Roman Fedorov",
        "timestamp": 1604422680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306866\">@Roman Fedorov</span> thanks... I'm looking at the pastebin. The gist gives me a 404.</p>",
        "id": 215481554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604422803
    },
    {
        "content": "<p>Are they the same file?</p>",
        "id": 215481597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604422814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306866\">@Roman Fedorov</span> Seems like you've written quite a lot of code already! It would be good to try to merge our efforts. (But I have almost no time for this atm.)</p>",
        "id": 215482453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604423179
    },
    {
        "content": "<p>There is some overlap, but both approaches also do stuff that the other doesn't</p>",
        "id": 215482490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604423196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I figured out the issue with gist. I would be glad to put my code into your file (after re-working my code obviously). Should  I just do it and put the result on gist?</p>",
        "id": 215483997,
        "sender_full_name": "Roman Fedorov",
        "timestamp": 1604423915
    },
    {
        "content": "<p>The gist link works if you remove the <code>@</code> at the end of the URL: <a href=\"https://gist.github.com/rmfedorov/6dae5d559bd0dafd9f87300bf1e537ad\">https://gist.github.com/rmfedorov/6dae5d559bd0dafd9f87300bf1e537ad</a></p>",
        "id": 215484259,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604424045
    },
    {
        "content": "<p>The problem with my code is that it still contains gaps</p>",
        "id": 215484476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604424133
    },
    {
        "content": "<p>I was trying to prove <a href=\"https://stacks.math.columbia.edu/tag/00HD\">https://stacks.math.columbia.edu/tag/00HD</a></p>",
        "id": 215484565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604424178
    },
    {
        "content": "<p>And then I got sidetracked into <a href=\"https://github.com/leanprover-community/mathlib/issues/4771\">#4771</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/4773\">#4773</a> about tensoring linear maps</p>",
        "id": 215484634,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604424218
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"306866\">@Roman Fedorov</span> could work directly on <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> 's branch (or a new branch derived from it)? The advantage of working on a branch of mathlib is that our automation will run on each commit to see if it builds, and it will also make future collaboration easier.</p>",
        "id": 215486904,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604425217
    },
    {
        "content": "<p>yup, fine with me</p>",
        "id": 215486970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604425256
    },
    {
        "content": "<p>But like I said, my branch is a bit of a mess.</p>",
        "id": 215487011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604425289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306866\">@Roman Fedorov</span>, here is a little more detail on how to edit Johan's branch (as Bryan suggests).  Basically you follow the instructions in Step 6 at<br>\n<a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a><br>\nbut with one difference:  at the first step, instead of typing <code>leanproject get -b mathlib:shiny_lemma</code>, you type <code>leanproject get mathlib:flat-module</code> (i.e., leave out the <code>-b</code>), because instead of starting a fresh branch for your changes, you are going to be making changes on an existing branch.</p>\n<p>You'll need write access to non-master branches (Step 3), so let us know if you're planning to do this, and someone will set it up for you.</p>",
        "id": 215491724,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604427445
    },
    {
        "content": "<p>It might be nice to PR <code>injective_of_comp_bijective</code> from that gist (or Johan's branch which has something very similar) independently, since that might be generally useful to people working on other things</p>",
        "id": 215821571,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604654677
    },
    {
        "content": "<p>Feel free to PR whatever you find useful from my branch!</p>",
        "id": 215822523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604655355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  Thanks! I am now trying to understand the details of the code; it will take me a few days.</p>",
        "id": 215920125,
        "sender_full_name": "Roman Fedorov",
        "timestamp": 1604708306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> ,  the \"leanproject get...\" command gives me \"invalid git branch\" after a while. Will write access help?</p>",
        "id": 216643233,
        "sender_full_name": "Roman Fedorov",
        "timestamp": 1605288029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306866\">@Roman Fedorov</span> I've just sent you an invite for mathlib: <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>\n<p>I'm not sure what could be causing \"invalid git branch\" though. Could you describe the steps you took in more detail?</p>",
        "id": 216644146,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605288428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> , thanks, it helped!</p>",
        "id": 216651149,
        "sender_full_name": "Roman Fedorov",
        "timestamp": 1605291621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> So I committed two theorems :-) My code is probably very suboptimal as I am not good at using tactics</p>",
        "id": 216670369,
        "sender_full_name": "Roman Fedorov",
        "timestamp": 1605300256
    }
]