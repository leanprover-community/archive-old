[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431177\">Giacomo Maletto</span> has marked this topic as resolved.</p>",
        "id": 250850969,
        "sender_full_name": "Notification Bot",
        "timestamp": 1630017063
    },
    {
        "content": "<p>One day we'll have a point-and-click interface to <code>conv</code> in the widgets view, perhaps. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 250862911,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630025633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> That would be cool. Maybe a way to select an expression could be like in Mathematica, where each time you click, it extends the selection to the next larger complete expression containing it. For example, triple clicking on a parenthesis selects the whole grouping.</p>",
        "id": 250865642,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630028097
    },
    {
        "content": "<p>In the widgets view it's already pretty easy to select an arbitrary subexpression (just hover on parentheses). All we'd need to add is a <code>conv</code> button on the pop-up, which should then insert into the current tactic block an appropriate conv invocation to zoom to that subexpression.</p>",
        "id": 250866508,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630028957
    },
    {
        "content": "<p>Some thought required about how to generate such an invocation: do you repeatedly use <code>congr</code> and <code>skip</code>? Or do you generate a pattern?</p>",
        "id": 250866522,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630028988
    },
    {
        "content": "<p>We could have a first mockup that uses <code>congr</code> and <code>skip</code>. That shouldn't be too hard, I guess.</p>",
        "id": 250884217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630040977
    },
    {
        "content": "<p>Sometimes I wonder if there could be a version of Lean where all you do is manipulate interactively the goal and hypotheses through a GUI.<br>\nRight now it feels kinda like using a car but instead of driving it yourself, there is another person driving and you just yell him tactics hoping he does what you want.</p>",
        "id": 250890892,
        "sender_full_name": "Giacomo Maletto",
        "timestamp": 1630047212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20have.2Brw/near/250866508\">said</a>:</p>\n<blockquote>\n<p>In the widgets view it's already pretty easy to select an arbitrary subexpression</p>\n</blockquote>\n<p>I should use VS Code more often, selection seems to work perfectly well enough already!</p>\n<p>For <code>congr</code>/<code>skip</code> vs patterns, what are the design constraints? Is the generated tactic code supposed to look pretty? Is it supposed to be somewhat robust to changes in the proof? It seems hard to design for the latter, especially without experience using such a tool, so generating some kind of coordinates into an expression seems like a solid first strategy to me.</p>",
        "id": 250895599,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630050367
    },
    {
        "content": "<p>If the generated code can look somewhat pretty, that would be a big pre.</p>",
        "id": 250895694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630050458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20have.2Brw/near/250862911\">said</a>:</p>\n<blockquote>\n<p>One day we'll have a point-and-click interface to <code>conv</code> in the widgets view, perhaps. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>You can remove that perhaps. This has been one of Ed's explicit goals from the very beginning, and it's indeed very much needed. The only question is when this will happen and who will do it. Note that widgets are coming to Lean 4 too.</p>",
        "id": 250906216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1630056842
    },
    {
        "content": "<p>My experience with <code>conv</code> is that the lack of a GUI to select the expression is quite low on the list of things that make it frustrating to use.</p>",
        "id": 250988281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630094873
    },
    {
        "content": "<p>Missing tactics (those which work in regular tactic mode but not conv mode) and being unable to close side-goals created by <code>rw</code> are much more common problems for me.</p>",
        "id": 250988457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630094946
    },
    {
        "content": "<p>Would the following tactic idea work or help? Consider <code>look_at n1 n2 n3 ...</code> where <code>n1</code> and so on are natural numbers.  What these do is provide coordinates into an expression to select a subexpression.  The result of the tactic is a new goal <code>subexpr = ?m</code> with a metavariable <code>?m</code>, and the old goal has that subexpression replaced with <code>?m</code>.  When you're done modifying the left-hand side of the new goal, you can <code>refl</code>.</p>",
        "id": 250989291,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630095333
    },
    {
        "content": "<p>(I'm not sure how <code>conv</code> works internally, but I imagined it's sort of like this. This just exposes it in a way that might let you stay in the usual tactic mode.)</p>",
        "id": 250989527,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630095472
    },
    {
        "content": "<p>If this were workable, then there can be other ways to select subexpressions, too, like patterns.  It might also be nice if it could be told to select all defeq instances of an expression for simultaneous rewriting -- maybe it could help with certain tricky dependent rewrites?</p>",
        "id": 250990744,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630096052
    },
    {
        "content": "<p>Maybe also <code>look_at n1 n2 ... with a b c ....</code> could be a way to rewrite under binders, where <code>a</code>, <code>b</code>, and so on are the names it gives each hypothesis as it auto-<code>intro</code>s its way to the target expression.</p>",
        "id": 250991473,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630096382
    },
    {
        "content": "<p>A problem with this is that <code>rw</code> is very eager to close a <code>subexpr = ?m</code> goal.  One hack is to tag the right-hand side with something that inhibits this.  Using pre-existing tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">RHS</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">unwrap_RHS</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">RHS</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">eq.trans</span> <span class=\"n\">_</span> <span class=\"n\">unwrap_RHS</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- goal is c + b = RHS ?m_1</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 250993871,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630097555
    },
    {
        "content": "<p>Is there any way to make lean wait to recalculate the infoview until you have entered a comma?</p>",
        "id": 251119325,
        "sender_full_name": "Lucas",
        "timestamp": 1630228618
    },
    {
        "content": "<p>or something to this effect, often when I write things I want to look at the infoview but it is very eager to give an error message and delete what is there</p>",
        "id": 251119345,
        "sender_full_name": "Lucas",
        "timestamp": 1630228653
    },
    {
        "content": "<p>There is a \"pause updating\" button in the top-right of the infoview. I don't know of a more convenient way.</p>",
        "id": 251120813,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1630230313
    }
]