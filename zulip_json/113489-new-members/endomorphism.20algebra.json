[
    {
        "content": "<p>Be gentle, this is my first ever question!</p>\n<p>For a module M over a commutative ring R, we have the endomorphism algebra. Looking in Mathlib, I can see the ring structure defined here: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/linear_algebra/basic.lean#L176\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/linear_algebra/basic.lean#L176\">https://github.com/leanprover-community/mathlib/blob/master/src/linear_algebra/basic.lean#L176</a> and I can see a scalar action defined here: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/linear_algebra/basic.lean#L257\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/linear_algebra/basic.lean#L257\">https://github.com/leanprover-community/mathlib/blob/master/src/linear_algebra/basic.lean#L257</a> but I cannot find anywhere putting it all together and actually asserting the algebra structure. After hacking around a bit, the following seems to give me what I want:</p>\n<div class=\"codehilite\"><pre><span></span>  variables (M : Type v) [add_comm_group M]\n  variables (R : Type u) [comm_ring R] [module R M]\n\n  instance endomorphism_algebra : algebra R (M →ₗ[R] M) :=\n  begin\n    refine algebra.mk _ _ _,\n    { exact λ r, r • linear_map.id, },\n    { refine is_ring_hom.mk _ _ _; intros; ext; simp [mul_smul, add_smul], },\n    repeat { intros, ext, simp, },\n  end\n</pre></div>\n\n\n<p>Am I missing something or is this truly a small gap that deserves filling?</p>",
        "id": 178999460,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1571952341
    },
    {
        "content": "<p>Probably it is a small gap that needs filling. There are many more.</p>",
        "id": 179002379,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1571954647
    },
    {
        "content": "<p>Yes, please, let's have it! Would probably be clearer to directly write a structure rather than <code>begin refine ... end</code>. Then a reader can see which proof goes with which proof obligation.</p>",
        "id": 179006125,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571957731
    },
    {
        "content": "<p>It might also make sense to define a wrapper type <code>abbreviation module.End (R) (M) := (M →ₗ[R] M)</code>. I guess we will want that at some point. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  Can you estimate whether this should be <code>abbreviation</code> or <code>def</code>?</p>",
        "id": 179020341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571976577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> Welcome by the way! It's always nice to see new contributors in the algebra direction (-;</p>",
        "id": 179020391,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571976615
    },
    {
        "content": "<p>Thank you all very much for the helpful replies and for the warm welcome <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ! I'll see if I can put together a PR this afternoon.</p>",
        "id": 179123824,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1572092700
    },
    {
        "content": "<p>FWIW, I find the Mathlib project hugely exciting, and the energy of the community here amazing.</p>",
        "id": 179123845,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1572092745
    },
    {
        "content": "<p>Finally found time for this. I just created <a href=\"https://github.com/leanprover-community/mathlib/pull/1618\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1618\">https://github.com/leanprover-community/mathlib/pull/1618</a> I am grateful to <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> for the tips on style (which I hope I have followed). I also tried to introduce the <code>module.End</code> abbreviation (which I like) suggested by <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> but I ran into trouble so I left it out. For reasons I don't yet understand, the instance definition seemed not to be able to find the <code>[comm_ring R]</code> data when I used the abbreviation. (Most likely PEBKAC.)</p>",
        "id": 179130685,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1572104588
    }
]