[
    {
        "content": "<p>Hello I am wondering if anyone has tried this out yet.</p>\n<p>We make a dependency graph of mathlib, so an individual node would represent some sort of <em>knowledge</em> = lemma, theorem, def, etc... and then it has some attributes about it, like the main statement, the other <em>knowledge</em> it uses in it's proof or definitions that it uses.</p>\n<p>There could also be  <em>structure</em> nodes where the directory that it lives (in mathlib) would have a node representing it, so you could have something like Mathlib -&gt; linear_algebra (<em>structure</em>) -&gt; set.finrank (<em>knowledge</em>)</p>\n<p>If we had that graph, then I think it would be a cool way to visualize everything because we look at some <em>knowledge</em> and trace it back through the tree until we get to the axioms, so you could see the path that we took to prove it.</p>\n<p>I know that lean is a programming language, not just a theorem prover so maybe we could make this graph in lean?</p>",
        "id": 267368355,
        "sender_full_name": "ccn",
        "timestamp": 1641749647
    },
    {
        "content": "<p>People have definitely tried this, its quite hard to get something reasonable on the scale of mathlib, because it is so huge. But the authors of the Lean perfectoid project made a nice visualization using this sort of idea, check out <a href=\"https://leanprover-community.github.io/lean-perfectoid-spaces/\">https://leanprover-community.github.io/lean-perfectoid-spaces/</a></p>",
        "id": 267368483,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641749829
    },
    {
        "content": "<p>There does also exisit a mathlib import graph over here <a href=\"https://eric-wieser.github.io/mathlib-import-graph/\">https://eric-wieser.github.io/mathlib-import-graph/</a> which isn't quite what you are talking about but gets rather close to it.</p>",
        "id": 267368497,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1641749862
    },
    {
        "content": "<p>Thanks for the links, I'll try to look at the source code and see how it's done!</p>",
        "id": 267368591,
        "sender_full_name": "ccn",
        "timestamp": 1641749966
    },
    {
        "content": "<p>I think the tool used was <a href=\"https://github.com/leanprover-community/leancrawler\">https://github.com/leanprover-community/leancrawler</a></p>",
        "id": 267369114,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641750710
    }
]