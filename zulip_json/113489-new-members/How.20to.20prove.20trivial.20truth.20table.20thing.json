[
    {
        "content": "<p>Hello, can someone please help me to prove this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">triv_prop</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">R</span><span class=\"o\">))))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 287755872,
        "sender_full_name": "Emma Hasson",
        "timestamp": 1656440429
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">triv_prop</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">R</span><span class=\"o\">))))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tauto</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It's difficult to answer your question helpfully because I don't have enough information. Is this homework? Do you want to know how to do it from first principles? Did you play the relevant levels in the natural number game? (Proposition world)</p>\n<p>This proof just says \"this is some tautology in logic and we have a tactic for that, so you don't need to think\". But perhaps the thinking is the part of the process you're interested in. I can't tell yet :-)</p>",
        "id": 287758214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656441549
    },
    {
        "content": "<p>It's part of a larger proof I'm working on and I was getting stuck on a simple bit exemplified by this lemma. I had tried <code>tauto,</code> but wasn't aware of the ! variant. Thank you!</p>",
        "id": 287759247,
        "sender_full_name": "Emma Hasson",
        "timestamp": 1656442066
    },
    {
        "content": "<p>Oh yeah, <code>tauto</code> doesn't do it because it's not true constructively. Here's a first principles proof which does an explicit case split on <code>R</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">triv_prop</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">R</span><span class=\"o\">))))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">hQ</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">hQ</span><span class=\"o\">,</span> <span class=\"n\">hR</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">hQ</span><span class=\"o\">,</span> <span class=\"n\">hR</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">hQ</span><span class=\"o\">,</span> <span class=\"n\">hR</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">hQ</span><span class=\"o\">,</span> <span class=\"n\">hR</span><span class=\"o\">⟩),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">hQ</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">hQ</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287759638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656442264
    },
    {
        "content": "<p>If you try proving it using <code>tauto</code> and then hover your mouse over <code>tauto</code> you can see the documentation for it, which mentions <code>tauto!</code>.</p>",
        "id": 287759944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656442394
    }
]