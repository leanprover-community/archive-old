[
    {
        "content": "<p>How can I simplify/unfold a cast expression? Below should illustrate an example of what I mean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">parity</span>\n<span class=\"bp\">|</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">parity</span>\n<span class=\"bp\">|</span> <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"n\">parity</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">suitable</span> <span class=\"o\">:</span> <span class=\"n\">parity</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">parity.even</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">%</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">parity.odd</span>  <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">%</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pa_nat</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">parity</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">suitable</span> <span class=\"n\">σ</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pa_nat_to_nat</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">parity</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">pa_nat</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">pa_nat_to_nat_coe</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">parity</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">pa_nat</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"n\">pa_nat_to_nat</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">opaque_function</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">apply_opaque_function</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">σ'</span> <span class=\"o\">:</span> <span class=\"n\">parity</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">pa_nat</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">pa_nat</span> <span class=\"n\">σ'</span><span class=\"o\">),</span> <span class=\"n\">σ</span> <span class=\"bp\">≠</span> <span class=\"n\">σ'</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">opaque_function</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">%</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">⟩</span> <span class=\"n\">neq</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">--how to unfold the casts?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I know that I can use the <code>change</code> tactic to say what I want the goal to be but that is quite cumbersome in my use case and it feels like there should be a way that 'uses' the casts.</p>",
        "id": 222942473,
        "sender_full_name": "Oskar Berndal",
        "timestamp": 1610754734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360337\">@Oskar Berndal</span>  <code>unfold_coes</code> is a tactic made exactly for this job <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 222957850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610769808
    },
    {
        "content": "<p>Indeed it did! Many thanks ^___^</p>",
        "id": 222974721,
        "sender_full_name": "Oskar Berndal",
        "timestamp": 1610794339
    }
]