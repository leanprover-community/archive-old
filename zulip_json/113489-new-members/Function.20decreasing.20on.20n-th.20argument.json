[
    {
        "content": "<p>How do I tell Lean that a given function is decreasing on the n-th argument? <code>shift.main</code> is \"obviously\" decreasing on the third argument (<code>term (D + G)</code>).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">G</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"n\">def</span> <span class=\"n\">shift</span><span class=\"bp\">.</span><span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">+</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">+</span> <span class=\"n\">D</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"n\">D</span> <span class=\"n\">x</span>          <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">D</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>     <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">D</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">shift</span><span class=\"bp\">.</span><span class=\"n\">elem</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_of_succ_lt</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">shift</span><span class=\"bp\">.</span><span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">+</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">+</span> <span class=\"n\">G</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">G</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">shift</span><span class=\"bp\">.</span><span class=\"n\">main</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shift</span><span class=\"bp\">.</span><span class=\"n\">main</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">G</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">M</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">lam</span> <span class=\"o\">(</span><span class=\"n\">shift</span><span class=\"bp\">.</span><span class=\"n\">main</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"c1\">-- Lean complains here.</span>\n<span class=\"bp\">|</span> <span class=\"n\">G</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">shift</span><span class=\"bp\">.</span><span class=\"n\">elem</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I suspect telling Lean that might not be enough, though, so for a second question: where can I read on well founded relations on Lean (and in general)?</p>",
        "id": 202846962,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1593820454
    },
    {
        "content": "<p>If this was a recursion on the third argument, it would not have <code>D + G</code> in the index</p>",
        "id": 202847023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593820577
    },
    {
        "content": "<p>tpil: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#well-founded-recursion-and-induction\">https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#well-founded-recursion-and-induction</a><br>\nmathlib docs: <a href=\"https://leanprover-community.github.io/extras/well_founded_recursion.html\">https://leanprover-community.github.io/extras/well_founded_recursion.html</a></p>",
        "id": 202847051,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1593820664
    },
    {
        "content": "<p>Don't let well founded recursion errors fool you; that's just the fallback because the structural recursion compilation failed</p>",
        "id": 202847102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593820710
    },
    {
        "content": "<p>this should be a structural recursion</p>",
        "id": 202847110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593820732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Function.20decreasing.20on.20n-th.20argument/near/202847102\">said</a>:</p>\n<blockquote>\n<p>Don't let well founded recursion errors fool you; that's just the fallback because the structural recursion compilation failed</p>\n</blockquote>\n<p>I see. That makes sense.</p>",
        "id": 202847401,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1593821196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Function.20decreasing.20on.20n-th.20argument/near/202847023\">said</a>:</p>\n<blockquote>\n<p>If this was a recursion on the third argument, it would not have <code>D + G</code> in the index</p>\n</blockquote>\n<p>Yes! Indeed. Changing that fixed the issue.</p>",
        "id": 202847565,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1593821451
    },
    {
        "content": "<p>Why can't Lean see that <code>M</code> is structurally smaller than <code>lam M</code>. It may have something to do with the fact that <code>lam M</code> has type <code>term Γ</code> while <code>M : term (Γ + 1)</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"n\">def</span> <span class=\"n\">shift</span><span class=\"bp\">.</span><span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"err\">Γ</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">shift</span><span class=\"bp\">.</span><span class=\"n\">main</span> <span class=\"n\">σ</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shift</span><span class=\"bp\">.</span><span class=\"n\">main</span> <span class=\"n\">σ</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"err\">Γ</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">M</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">lam</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">shift</span><span class=\"bp\">.</span><span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"err\">Γ</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">var</span> <span class=\"err\">$</span> <span class=\"k\">if</span> <span class=\"n\">σ</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">abbreviation</span> <span class=\"n\">shift</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">shift</span><span class=\"bp\">.</span><span class=\"n\">main</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">def</span> <span class=\"n\">subst</span><span class=\"bp\">.</span><span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span>\n<span class=\"bp\">|</span> <span class=\"err\">Γ</span> <span class=\"n\">σ</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"bp\">.</span><span class=\"n\">main</span> <span class=\"n\">σ</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"bp\">.</span><span class=\"n\">main</span> <span class=\"n\">σ</span> <span class=\"n\">L</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"err\">Γ</span> <span class=\"n\">σ</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">M</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">lam</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subst</span><span class=\"bp\">.</span><span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shift</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"c1\">-- This line.</span>\n<span class=\"bp\">|</span> <span class=\"err\">Γ</span> <span class=\"n\">σ</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 202850031,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1593825910
    }
]