[
    {
        "content": "<p>What am I doing wrong here?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_tactic</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">do</span>\n  <span class=\"n\">define</span> <span class=\"bp\">`</span><span class=\"n\">qq</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">my_tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"err\">⊢</span> <span class=\"n\">reflected</span> <span class=\"n\">q</span>\n</pre></div>",
        "id": 132269318,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534458922
    },
    {
        "content": "<p>Alternatively:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">def</span> <span class=\"n\">my_lemma</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">define_core</span> <span class=\"bp\">`</span><span class=\"n\">qq</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">),</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"err\">&#39;</span><span class=\"n\">q&#39;</span>\n</pre></div>",
        "id": 132269450,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534459093
    },
    {
        "content": "<p><code> `(q) </code> is used to build <code>expr</code> values but its type is actually <code>reflected q</code>. This is a long way of saying that Lean is trying to convert a known value into an expression. Because <code>q</code> is a local variable, its value is not know and cannot be reflected. You need to go through <code> to_expr ``(q) </code></p>",
        "id": 132269475,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534459187
    },
    {
        "content": "<p>I want to pass the <code>local_const</code> with the pretty name <code>\"q\"</code> as the type arg to <code>define_core</code></p>",
        "id": 132269478,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534459195
    },
    {
        "content": "<p>Your code could be adapted into the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">def</span> <span class=\"n\">my_lemma</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">my_q</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">define_core</span> <span class=\"bp\">`</span><span class=\"n\">qq</span> <span class=\"n\">my_q</span><span class=\"o\">),</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>or, more concisely:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">def</span> <span class=\"n\">my_lemma</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"o\">(</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">define_core</span> <span class=\"bp\">`</span><span class=\"n\">qq</span><span class=\"o\">),</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 132269547,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534459299
    },
    {
        "content": "<p>This code still errors for me</p>",
        "id": 132269677,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534459490
    },
    {
        "content": "<p><code>unknown identifier 'q'</code></p>",
        "id": 132269696,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534459516
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">define</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">expression</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">type</span>\n  <span class=\"err\">⁇</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"err\">⊢</span> <span class=\"n\">q</span>\n\n<span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"err\">⊢</span> <span class=\"n\">Sort</span> <span class=\"err\">?</span>\n</pre></div>",
        "id": 132269755,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534459601
    },
    {
        "content": "<p>Oh! I see why. Use <code>(to_expr ```(q) &gt;&gt;= define_core `qq)</code>: <code>q</code> is not available in the scope of your tactic code. With three ticks, you're disabling scope checking when compiling that tactic. Equivalently, you can do <code>(get_local `q &gt;&gt;= define_core `qq)</code>.</p>",
        "id": 132269770,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534459674
    }
]