[
    {
        "content": "<p>How can I get t = ↑g ^ w.val, c = ↑(hash [g, h, ↑t]), and s = w + c * x from H₁ (see proof_of_completeness proof)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">pq</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span>\n<span class=\"n\">hash</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span>\n<span class=\"n\">wx</span><span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span>\n<span class=\"n\">H₀</span><span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">x.val</span>\n<span class=\"n\">tcs</span><span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span>\n<span class=\"n\">H₂</span><span class=\"o\">:</span> <span class=\"n\">zkp_transcript</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">g</span> <span class=\"n\">hash</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">H₀</span> <span class=\"o\">(</span><span class=\"n\">response</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">H₁</span><span class=\"o\">:</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"o\">⟩⟩⟩</span> <span class=\"bp\">=</span> <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">w.val</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">hash</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">]),</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">response_step</span> <span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">challenge_step</span> <span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">commitment_step</span> <span class=\"n\">t</span> <span class=\"n\">_</span><span class=\"o\">))⟩⟩⟩</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">s.val</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">^</span> <span class=\"n\">c.val</span>\n</code></pre></div>\n<p>Complete source code: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span> <span class=\"n\">data.nat.prime</span>\n <span class=\"n\">number_theory.quadratic_reciprocity</span>\n <span class=\"n\">tactic.find</span> <span class=\"n\">tactic.omega</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">nzkp</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hk</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Hq</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">Hdiv</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">h</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H₃</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">variables</span>\n  <span class=\"n\">hash</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">communication</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"n\">commitment</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span>  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">communication</span>\n<span class=\"bp\">|</span> <span class=\"n\">challenge</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">communication</span>\n<span class=\"bp\">|</span> <span class=\"n\">response</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">communication</span>\n<span class=\"kn\">open</span> <span class=\"n\">communication</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"> Add more data to hash function https://tools.ietf.org/html/rfc8235 -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">zkp_transcript</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">x.val</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">communication</span> <span class=\"n\">p</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"n\">commitment_step</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">w.val</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">zkp_transcript</span> <span class=\"o\">(</span><span class=\"n\">commitment</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">challenge_step</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">hash</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">zkp_transcript</span> <span class=\"o\">(</span><span class=\"n\">commitment</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span>  <span class=\"n\">zkp_transcript</span> <span class=\"o\">(</span><span class=\"n\">challenge</span> <span class=\"n\">t</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">response_step</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">zkp_transcript</span> <span class=\"o\">(</span><span class=\"n\">challenge</span> <span class=\"n\">t</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">zkp_transcript</span> <span class=\"o\">(</span><span class=\"n\">response</span> <span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">zkp_transcript</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">We can construct a sigma protocol (discrete logarithm).</span>\n<span class=\"cm\">we can always construct a valid certificate. Moreover, we will prove this</span>\n<span class=\"cm\">formally that this function always constructs a valid certificate which checks out</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">construct_nzkp_certificate</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">x.val</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">zkp_transcript</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">g</span> <span class=\"n\">hash</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">response</span> <span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">s</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n      <span class=\"k\">let</span>\n          <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">w.val</span><span class=\"o\">,</span>\n          <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">hash</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">],</span>\n          <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n      <span class=\"k\">in</span>  <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">response_step</span> <span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">challenge_step</span> <span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">commitment_step</span> <span class=\"n\">t</span> <span class=\"n\">rfl</span><span class=\"o\">))</span> <span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> a given certificate is a valid one -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">accept_nzkp_certificate</span>  <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">x.val</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hnzkp</span> <span class=\"o\">:</span> <span class=\"n\">zkp_transcript</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">g</span> <span class=\"n\">hash</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">response</span> <span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">s.val</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"bp\">^</span><span class=\"n\">c.val</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> invalid transcript -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">reject_nzkp_certificate</span>  <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">x.val</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hnzkp</span> <span class=\"o\">:</span> <span class=\"n\">zkp_transcript</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">g</span> <span class=\"n\">hash</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">response</span> <span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">s.val</span> <span class=\"bp\">≠</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"bp\">^</span><span class=\"n\">c.val</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Proof that the construct_nzkp_certificate function always constructs</span>\n<span class=\"cm\">a valid certificate. Each valid certificate always checks out.</span>\n<span class=\"cm\">Completeness</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">proof_of_completeness</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₀</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">x.val</span><span class=\"o\">)</span> <span class=\"n\">cert</span>\n  <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">cert</span> <span class=\"bp\">=</span> <span class=\"n\">construct_nzkp_certificate</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">g</span> <span class=\"n\">hash</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">H₀</span><span class=\"o\">),</span>\n  <span class=\"n\">accept_nzkp_certificate</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">g</span> <span class=\"n\">hash</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">H₀</span> <span class=\"n\">cert.1</span> <span class=\"n\">cert.2.1</span> <span class=\"n\">cert.2.2.1</span> <span class=\"n\">cert.2.2.2</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n <span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">H₀</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"o\">⟩</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n <span class=\"kd\">begin</span>\n   <span class=\"n\">unfold</span> <span class=\"n\">accept_nzkp_certificate</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n   <span class=\"n\">clear</span> <span class=\"n\">_fun_match</span> <span class=\"n\">_x</span><span class=\"o\">,</span>\n   <span class=\"n\">unfold</span> <span class=\"n\">construct_nzkp_certificate</span> <span class=\"n\">at</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> I am struck here -/</span>\n\n\n <span class=\"kd\">end</span>\n\n\n\n\n\n<span class=\"kd\">end</span> <span class=\"n\">nzkp</span>\n</code></pre></div>",
        "id": 218972187,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1607236083
    },
    {
        "content": "<p><code>cases H1</code> should mostly work</p>",
        "id": 218972543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607236707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thanks, and now I have a straight forward goal, but library_search is not suggesting anything.  How to get rid of this one? (In general, how should a newcomer  search for a lemma in mathlib library?)   </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">comm_ring.add</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">hash</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">x.val</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">w.val</span><span class=\"o\">)])</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">w.val</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">x.val</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">hash</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">x.val</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">w.val</span><span class=\"o\">)])</span><span class=\"bp\">.</span><span class=\"n\">cast.val</span>\n</code></pre></div>",
        "id": 218972981,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1607237577
    },
    {
        "content": "<p>alternatively, you can use <code>injection H1</code> a few times to avoid substituting everything in and making a mess of the goal</p>",
        "id": 218973038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607237709
    },
    {
        "content": "<p>I wouldn't expect library search to find anything for that - would you expect that exact theorem to be in the library?</p>",
        "id": 218973045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607237755
    },
    {
        "content": "<p>instead, try to think of the reason you think this goal is straightforward, and write down the general theorem statement that you think will be in the library. Then <code>library_search</code> will be able to prove it</p>",
        "id": 218973090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607237823
    },
    {
        "content": "<p>Here's a slightly more refined unfolding of the assumption:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">accept_nzkp_certificate</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">_fun_match</span> <span class=\"n\">_x</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">construct_nzkp_certificate</span> <span class=\"n\">at</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">w.val</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"n\">clear</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">H₀</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ g ^ (w + c * x).val = ↑(↑g ^ w.val) * g ^ (x.val * c.val)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>However the next steps aren't so easy. There are two things in the way of the obvious proof: the <code>zmod.val</code> function is not a homomorphism, which is blocking simplifying things like <code>(w + c * x).val =  w.val + c.val * x.val</code>, and there is a coercion around the power <code>↑(↑g ^ w.val)</code> which is the <code>zmod q -&gt; zmod p</code> coercion, which has really bad properties unless <code>p</code> divides <code>q</code> (and I haven't read the rest of the file carefully but I would assume these are primes so that wouldn't be the case)</p>",
        "id": 218973454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607238505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Yep, p and q are prime (p = k * q + 1 where k &gt;= 2). I feel if I turn zmod p and zmod q into finite field, it would much simpler to prove this, and later, I can instantiate with these concrete instances.</p>",
        "id": 218974460,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1607240320
    },
    {
        "content": "<p>that sounds likely</p>",
        "id": 218974472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607240385
    },
    {
        "content": "<p>all this casting zmod to nat does real damage to the number theoretic properties; it would be easier if you use only \"approved\" operations from field theory</p>",
        "id": 218974525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607240453
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 218974743,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1607240809
    }
]