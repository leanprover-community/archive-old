[
    {
        "content": "<p>Is there any function which transforms a <code>vector (set A) n</code> into <code>set(vector A n)</code> in mathlib?</p>",
        "id": 167395354,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559745688
    },
    {
        "content": "<p>Transforms how? The cartesian product?</p>",
        "id": 167395462,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559745745
    },
    {
        "content": "<p>Is <code>set</code> a monad?</p>",
        "id": 167395494,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559745759
    },
    {
        "content": "<p>If so it looks like <code>traverse</code></p>",
        "id": 167395516,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559745774
    },
    {
        "content": "<p>Yes I want the cartesian product.</p>",
        "id": 167395688,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559745882
    },
    {
        "content": "<p><code>set</code> is a functor..</p>",
        "id": 167395698,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559745891
    },
    {
        "content": "<p><code>set</code> is a monad, but I don't think it's been proved yet.</p>",
        "id": 167395872,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559745969
    },
    {
        "content": "<p>Yeah, I should have said a <code>monad</code></p>",
        "id": 167395935,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559746016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  could you explain how <code>traverse</code> gives the cartesian product?</p>",
        "id": 167396211,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559746158
    },
    {
        "content": "<p>Basically <code>set</code> models a nondeterministic computation. <code>do a &lt;- s, b &lt;- t, ...</code> corresponds to taking any combination of <code>a</code> in <code>s</code> and <code>b</code> in <code>t</code>.</p>",
        "id": 167396804,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559746433
    },
    {
        "content": "<p>The monad instance has <code>return : t -&gt; set t</code> given by singleton and <code>join : set (set t) -&gt; set t</code> given by union</p>",
        "id": 167396886,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559746463
    },
    {
        "content": "<p><code>list</code> is another instance of the same idea that you can actually compute with, and <code>sequence : list (list a) -&gt; list (list a)</code> being the cartesian product is a classic example in Haskell</p>",
        "id": 167397022,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559746551
    },
    {
        "content": "<p>I'm finding it hard to convince lean that <code>vector A n</code> is the same thing as the <code>n</code>-fold cartesian product of elements of A.</p>",
        "id": 167397326,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559746708
    },
    {
        "content": "<p>Is there a <code>traversable</code> instance for <code>\\lam A, vector A n</code>? (Does that even work, with a lambda?)</p>",
        "id": 167397733,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559746922
    },
    {
        "content": "<p><code>vector</code> is defined as a subtype of <code>list</code>. I assume <code>list</code> is <code>traversable</code>, so does <code>vector</code> inherit that?</p>",
        "id": 167397921,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559747025
    },
    {
        "content": "<p>no, that doesn't work in general</p>",
        "id": 167398059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559747099
    },
    {
        "content": "<p>Not automatically, and in fact there is something to prove--that the length of the list doesn't change</p>",
        "id": 167398078,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559747108
    },
    {
        "content": "<p>It should be free by parametricity, but Lean doesn't know that</p>",
        "id": 167398097,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559747117
    },
    {
        "content": "<p>actually parametricity doesn't tell you the length doesn't change; it could drop the first element without violating parametricity</p>",
        "id": 167398159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559747160
    },
    {
        "content": "<p>If <code>vector</code> does have a <code>traversable</code> instance, how would that help me define cartesian products?</p>",
        "id": 167398237,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559747184
    },
    {
        "content": "<p>I guess you need the traversable laws as well then</p>",
        "id": 167398243,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559747192
    },
    {
        "content": "<p><code>traverse</code> would exactly be the cartesian product</p>",
        "id": 167398258,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559747205
    },
    {
        "content": "<p>Of course if the traversable instance doesn't already exist then in some sense it doesn't help you.</p>",
        "id": 167398393,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559747296
    },
    {
        "content": "<p>Isn't there a simpler way to do this?</p>",
        "id": 167398419,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559747322
    },
    {
        "content": "<p>do it directly</p>",
        "id": 167398436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559747332
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">do</span> <span class=\"n\">y</span> <span class=\"err\">←</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 167398439,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559747338
    },
    {
        "content": "<p>that's the wrong way around, I think</p>",
        "id": 167398480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559747373
    },
    {
        "content": "<p>So it is.</p>",
        "id": 167398495,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559747388
    },
    {
        "content": "<p>The other way is harder.</p>",
        "id": 167398590,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559747429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span> is this an XY problem?</p>",
        "id": 167398726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559747522
    },
    {
        "content": "<p>I suspect you don't want this</p>",
        "id": 167398780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559747539
    },
    {
        "content": "<p>An XY problem?</p>",
        "id": 167398787,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559747542
    },
    {
        "content": "<p>It would be easy on the inductive family version of vector (like <a href=\"https://github.com/idris-lang/Idris-dev/blob/master/libs/base/Data/Vect.idr#L11\" target=\"_blank\" title=\"https://github.com/idris-lang/Idris-dev/blob/master/libs/base/Data/Vect.idr#L11\">https://github.com/idris-lang/Idris-dev/blob/master/libs/base/Data/Vect.idr#L11</a> )--I forget whether this is also in mathlib. The \"subtype of list\" definition seems a bit more inconvenient here</p>",
        "id": 167398793,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559747545
    },
    {
        "content": "<p>the subtype of list definition is very rarely the convenient one</p>",
        "id": 167398838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559747580
    },
    {
        "content": "<p>I just want to define the product measure and pass a vector of sets and not have it complain that it's not the right type.</p>",
        "id": 167398877,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559747601
    },
    {
        "content": "<p>what do you want to actually say?</p>",
        "id": 167398914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559747629
    },
    {
        "content": "<p>I want to prove that the <code>n</code>-fold product measure has it's defining property.</p>",
        "id": 167398976,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559747653
    },
    {
        "content": "<p>if you are giving something of the wrong type then \"making it not complain\" is the wrong way to approach the problem</p>",
        "id": 167398978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559747654
    },
    {
        "content": "<p>Given <code>s : ∀ i, set (A i)</code>, the set of elements of <code>∀ i:I, A i</code> in the s's is <code>Prod s : set (∀ i, A i) := { f | ∀ i, f i ∈ s i }</code></p>",
        "id": 167399662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559748063
    },
    {
        "content": "<p>Here is what I am working with: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">collapse_in</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Es</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)):</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sUnion</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">Es</span><span class=\"o\">)</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">collapse</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"err\">∅</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">collapse_in</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">collapse</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">tail</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 167400262,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559748470
    },
    {
        "content": "<p>Do you already have the product of two measure spaces?</p>",
        "id": 167400445,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559748584
    },
    {
        "content": "<p>Yes, most of the definitions for the product construction were available in mathlib</p>",
        "id": 167400683,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559748713
    },
    {
        "content": "<p>I'm pretty sure I wrote traversable instance for vector and array</p>",
        "id": 167413375,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559757689
    },
    {
        "content": "<p><code>traversable (flip vector n)</code> to be exact</p>",
        "id": 167413438,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559757728
    },
    {
        "content": "<p>Just import <code>data.vector2</code></p>",
        "id": 167413496,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559757751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  thank you! Can you please tell me how I can use this? I have a bunch of lemmas proven for binary cartesian products. Can I use this to extend to <code>n</code> tuples (vectors)?</p>",
        "id": 167417149,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559759756
    },
    {
        "content": "<p>Probably. It depends on the lemmas. What do you have in mind?</p>",
        "id": 167417304,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559759839
    },
    {
        "content": "<p>At the most basic level, given a set <code>(A : set α)</code> and <code>(B : set (vector α n))</code> I want to construct <code>A.prod B</code> which lives in <code>set(vector α (succ n))</code>.</p>",
        "id": 167418027,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559760219
    },
    {
        "content": "<p>yes, that works. You can work by induction on <code>n</code></p>",
        "id": 167418363,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559760417
    },
    {
        "content": "<p>Proving this lemma might make things more straightforward:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">traverse_cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"n\">flip</span> <span class=\"n\">vector</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">traverse</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">v</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">vector</span> <span class=\"bp\">_</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">traverse</span> <span class=\"n\">f</span> <span class=\"n\">vs</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 167419021,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559760787
    }
]