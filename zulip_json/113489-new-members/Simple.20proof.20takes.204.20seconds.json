[
    {
        "content": "<p>I have a simple proof that consists of <code>ext</code>, about 30 rewrites, and a <code>refl</code>, which takes 4 seconds to elaborate. This seems excessive. Any advice on making it faster? I am also getting a (deterministic) timeout on defining an <code>instance</code> that uses this proof. The timeout goes away if I do not use <code>coassoc</code>. This leads me to believe that something is wrong with <code>coassoc</code>. From the experimentation I've done, it seems that lean has a hard time dealing with tensor product of algebras, especially triple tensor product.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">algebra.tensor_product</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"c1\">-- TODO variables {K : Type*} [comm_ring K]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"c1\">-- time everything</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">comul</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">aeval</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">comul_1</span> <span class=\"o\">:</span> <span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">alg_hom.map_one</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ 1 = 1 ⊗ₜ[K] 1</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">comul_X</span> <span class=\"o\">:</span> <span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">comul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">aeval_X</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- TODO convert to dot notation</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coassoc</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">algebra.tensor_product.assoc</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">to_alg_hom.comp</span> <span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">alg_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_comp</span><span class=\"o\">,</span>\n      <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span>\n      <span class=\"n\">comul_X</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n      <span class=\"n\">alg_hom.map_add</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.map_add</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.map_add</span><span class=\"o\">,</span>\n      <span class=\"n\">map_tmul</span><span class=\"o\">,</span> <span class=\"n\">map_tmul</span><span class=\"o\">,</span> <span class=\"n\">map_tmul</span><span class=\"o\">,</span> <span class=\"n\">map_tmul</span><span class=\"o\">,</span>\n      <span class=\"n\">comul_X</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">comul_1</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n      <span class=\"n\">alg_hom.coe_id</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">,</span>\n      <span class=\"n\">tensor_product.tmul_add</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.add_tmul</span><span class=\"o\">,</span>\n      <span class=\"n\">alg_hom.map_add</span><span class=\"o\">,</span>\n      <span class=\"n\">alg_equiv.to_alg_hom_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">alg_equiv.coe_alg_hom</span><span class=\"o\">,</span>\n      <span class=\"n\">algebra.tensor_product.assoc_tmul</span><span class=\"o\">,</span> <span class=\"n\">algebra.tensor_product.assoc_tmul</span><span class=\"o\">,</span> <span class=\"n\">algebra.tensor_product.assoc_tmul</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280535558,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1651170141
    },
    {
        "content": "<p>Posting the full file here. If you have any advice on style, a better way to structure anything, I would be grateful.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Hopf</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">algebra.tensor_product</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"c1\">-- TODO variables {K : Type*} [comm_ring K]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"c1\">-- time everything</span>\n\n<span class=\"c1\">-- noncomputable def comm_ring.comul : K[X] →ₐ[K] K[X] ⊗[K] K[X] := aeval ((X ⊗ₜ 1) + (1 ⊗ₜ X))</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">comul</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">aeval</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">comul_1</span> <span class=\"o\">:</span> <span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">alg_hom.map_one</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ 1 = 1 ⊗ₜ[K] 1</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">comul_X</span> <span class=\"o\">:</span> <span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">comul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">aeval_X</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- TODO convert to dot notation</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coassoc</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">algebra.tensor_product.assoc</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">to_alg_hom.comp</span> <span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">alg_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_comp</span><span class=\"o\">,</span>\n      <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span>\n      <span class=\"n\">comul_X</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n      <span class=\"n\">alg_hom.map_add</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.map_add</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.map_add</span><span class=\"o\">,</span>\n      <span class=\"n\">map_tmul</span><span class=\"o\">,</span> <span class=\"n\">map_tmul</span><span class=\"o\">,</span> <span class=\"n\">map_tmul</span><span class=\"o\">,</span> <span class=\"n\">map_tmul</span><span class=\"o\">,</span>\n      <span class=\"n\">comul_X</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">comul_1</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n      <span class=\"n\">alg_hom.coe_id</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">,</span>\n      <span class=\"n\">tensor_product.tmul_add</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.add_tmul</span><span class=\"o\">,</span>\n      <span class=\"n\">alg_hom.map_add</span><span class=\"o\">,</span>\n      <span class=\"n\">alg_equiv.to_alg_hom_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">alg_equiv.coe_alg_hom</span><span class=\"o\">,</span>\n      <span class=\"n\">algebra.tensor_product.assoc_tmul</span><span class=\"o\">,</span> <span class=\"n\">algebra.tensor_product.assoc_tmul</span><span class=\"o\">,</span> <span class=\"n\">algebra.tensor_product.assoc_tmul</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">counit</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">aeval</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">counit_X</span> <span class=\"o\">:</span> <span class=\"n\">counit</span> <span class=\"n\">K</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">counit</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_aeval_eq_eval</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"bp\">.</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">counit_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">algebra.tensor_product.lid</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">to_alg_hom.comp</span> <span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">counit</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">counit</span><span class=\"o\">,</span> <span class=\"n\">alg_equiv.to_alg_hom_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">alg_equiv.coe_alg_hom</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">comul_X</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.map_add</span><span class=\"o\">,</span> <span class=\"n\">map_tmul</span><span class=\"o\">,</span> <span class=\"n\">coe_aeval_eq_eval</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.zero_tmul</span><span class=\"o\">,</span> <span class=\"n\">eval_one</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">lid_tmul</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">counit_right</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">algebra.tensor_product.rid</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">to_alg_hom.comp</span> <span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">counit</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">counit</span><span class=\"o\">,</span> <span class=\"n\">alg_equiv.to_alg_hom_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">alg_equiv.coe_alg_hom</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">comul_X</span><span class=\"o\">,</span> <span class=\"n\">_root_.map_add</span><span class=\"o\">,</span> <span class=\"n\">map_tmul</span><span class=\"o\">,</span> <span class=\"n\">coe_aeval_eq_eval</span><span class=\"o\">,</span> <span class=\"n\">eval_one</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.tmul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">rid_tmul</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">coinv</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coinv_X</span> <span class=\"o\">:</span> <span class=\"n\">coinv</span> <span class=\"n\">K</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">coinv</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">aeval_X</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coinv_right</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lmul'</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">coinv</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebra.of_id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">counit</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">alg_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">comul_X</span><span class=\"o\">,</span> <span class=\"n\">_root_.map_add</span><span class=\"o\">,</span> <span class=\"n\">map_tmul</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_id</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">,</span> <span class=\"n\">_root_.map_one</span><span class=\"o\">,</span> <span class=\"n\">coinv_X</span><span class=\"o\">,</span> <span class=\"n\">lmul'_apply_tmul</span><span class=\"o\">,</span> <span class=\"n\">_root_.mul_one</span><span class=\"o\">,</span> <span class=\"n\">_root_.one_mul</span><span class=\"o\">,</span> <span class=\"n\">add_right_neg</span><span class=\"o\">,</span> <span class=\"n\">counit_X</span><span class=\"o\">,</span> <span class=\"n\">_root_.map_zero</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coinv_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lmul'</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">coinv</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebra.of_id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">counit</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">alg_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">comul_X</span><span class=\"o\">,</span> <span class=\"n\">_root_.map_add</span><span class=\"o\">,</span> <span class=\"n\">map_tmul</span><span class=\"o\">,</span> <span class=\"n\">coinv_X</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_id</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">,</span> <span class=\"n\">_root_.map_one</span><span class=\"o\">,</span> <span class=\"n\">lmul'_apply_tmul</span><span class=\"o\">,</span> <span class=\"n\">_root_.mul_one</span><span class=\"o\">,</span> <span class=\"n\">_root_.one_mul</span><span class=\"o\">,</span> <span class=\"n\">add_left_neg</span><span class=\"o\">,</span> <span class=\"n\">counit_X</span><span class=\"o\">,</span> <span class=\"n\">_root_.map_zero</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">.</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"c1\">-- time everything</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">polynomial_hopf</span> <span class=\"o\">:</span> <span class=\"n\">hopf_algebra</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"c1\">-- TIMEOUT!</span>\n  <span class=\"n\">comul</span> <span class=\"o\">:=</span> <span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">counit</span> <span class=\"o\">:=</span> <span class=\"n\">counit</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">coinv</span> <span class=\"o\">:=</span> <span class=\"n\">coinv</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">coassoc</span> <span class=\"o\">:=</span> <span class=\"n\">coassoc</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">counit_left</span> <span class=\"o\">:=</span> <span class=\"n\">counit_left</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">counit_right</span> <span class=\"o\">:=</span> <span class=\"n\">counit_right</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">coinv_right</span> <span class=\"o\">:=</span> <span class=\"n\">coinv_right</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">coinv_left</span> <span class=\"o\">:=</span> <span class=\"n\">coinv_left</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">polynomial_hopf</span> <span class=\"o\">:</span> <span class=\"n\">hopf_algebra</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"c1\">-- No timeout!</span>\n  <span class=\"n\">comul</span> <span class=\"o\">:=</span> <span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">counit</span> <span class=\"o\">:=</span> <span class=\"n\">counit</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">coinv</span> <span class=\"o\">:=</span> <span class=\"n\">coinv</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">coassoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">counit_left</span> <span class=\"o\">:=</span> <span class=\"n\">counit_left</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">counit_right</span> <span class=\"o\">:=</span> <span class=\"n\">counit_right</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">coinv_right</span> <span class=\"o\">:=</span> <span class=\"n\">coinv_right</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">coinv_left</span> <span class=\"o\">:=</span> <span class=\"n\">coinv_left</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 280535763,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1651170232
    },
    {
        "content": "<p>I agree that it's strange that <code>rw</code> is taking such a long time.</p>",
        "id": 280582751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651203415
    },
    {
        "content": "<p>The only unhelpful comment that I have for now, is that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">polynomial.alg_hom_ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">alg_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">map_tmul</span><span class=\"o\">,</span>\n      <span class=\"n\">comul_X</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">comul_1</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_id</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">,</span>\n      <span class=\"n\">tensor_product.tmul_add</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.add_tmul</span><span class=\"o\">,</span>\n      <span class=\"n\">alg_equiv.to_alg_hom_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">alg_equiv.coe_alg_hom</span><span class=\"o\">,</span>\n      <span class=\"n\">algebra.tensor_product.assoc_tmul</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>is a shorter proof that takes twice as long...</p>",
        "id": 280582785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651203454
    },
    {
        "content": "<p>Using <code>show</code> to blast through some defeqs even bumps the time to 10s on my box</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">polynomial.alg_hom_ext</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">algebra.tensor_product.assoc</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"o\">((</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">alg_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">map_tmul</span><span class=\"o\">,</span>\n      <span class=\"n\">comul_X</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">comul_1</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_id</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">,</span>\n      <span class=\"n\">tensor_product.tmul_add</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.add_tmul</span><span class=\"o\">,</span>\n      <span class=\"n\">alg_equiv.to_alg_hom_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">alg_equiv.coe_alg_hom</span><span class=\"o\">,</span>\n      <span class=\"n\">algebra.tensor_product.assoc_tmul</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 280583171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651203822
    },
    {
        "content": "<p>Looking at the types, this might just be because Lean can become very slow in typechecking when a type has a lot of dependencies: basically, since <code>alg_hom</code>, <code>tensor_product</code> and <code>polynomial</code> depend on the ring/module/etc structure of the arguments, and we have a type like <code>alg_hom (tensor_product (tensor_product (polynomial _) _) _) _ _</code> the types grow at least with the fourth power (where quadratic is already big). And since <code>algebra</code> and <code>module</code> also depend on the ring structure it might even be more like to the seventh power.</p>",
        "id": 280606185,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651223625
    },
    {
        "content": "<p>I'll see if I can investigate in some more detail later today.</p>",
        "id": 280606304,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651223680
    },
    {
        "content": "<p>That's interesting. Is that something that could be made faster by some kind of additional tooling? Like adding extra functions / tactics to the algebra library to assist / direct this typechecking?</p>\n<p>I have also found the mathlib algebra library to be quite heavy on my computer (though I haven't tried to use it too much yet).</p>",
        "id": 280748649,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1651342065
    },
    {
        "content": "<p>It took a few days, but I finally have some time!</p>",
        "id": 280882489,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651502682
    },
    {
        "content": "<p>One interesting result is that replacing <code>rw</code> with <code>simp only</code> cuts the time in half, so perhaps a lot of time is spent in recomputing the motive (which parts of the expression stay fixed and which ones get rewritten) each time? In contrast, <code>simp</code> works by simplifying each subexpression fully before going to a larger expression so I assume it can reuse more if most subexpressions don't change.</p>",
        "id": 280882917,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651502881
    },
    {
        "content": "<p>Also, adding <code>map_add</code> to the <code>simp only</code> parameters makes elaboration time go from about 500ms to 3s on my machine. Very strange...</p>",
        "id": 280884061,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651503365
    },
    {
        "content": "<p>Both with <code>rw</code> and <code>simp only</code> with <code>set_option trace.type_context.is_def_eq_detail true</code> I see that unification goes up to 46 levels deep when trying to unify <code>⇑(?m_12.comp ?m_13) =?= ⇑((algebra.tensor_product.assoc K K[X] K[X] K[X]).to_alg_hom.comp ((map (comul K) (alg_hom.id K K[X])).comp (comul K)))</code> which is pretty suggestive of the types being too complicated.</p>",
        "id": 280885699,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651503940
    },
    {
        "content": "<p>I can't find anywhere that a strategic <code>local attribute [irreducible]</code> will help, so basically the only useful suggestion I have at the moment to use <code>simp only</code> instead of <code>rw</code>.</p>",
        "id": 280888362,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651504946
    }
]