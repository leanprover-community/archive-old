[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">monof</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">aleb</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">monof</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm trying to prove this statement, but the last line causes confusion; I'd expect to have <code>this</code> be <code>1≤0</code>, but instead I get <code>?m_1 ≤ ?m_0</code> (and the two other goals associated with it). why is this the case? why is it not taking the implied values from <code>h' : f 1 ≤ f 0</code>?</p>",
        "id": 228448672,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1614705626
    },
    {
        "content": "<p><code>have : 0 ≤ 1 := h monof h'</code> solves your issue, but doesn't explain what's going wrong</p>",
        "id": 228452409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614706831
    },
    {
        "content": "<p>I thinkthe problem is that lean doesn't know that <code>f</code> isn't <code>function.update 0 1</code>, for instance?</p>",
        "id": 228452886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614706998
    },
    {
        "content": "<p>While syntactically <code>f 1 ≤ f 0</code> has an obvious match with <code>f a ≤ f b</code>, it could also match any <code>g</code> where <code>f 1 = g a</code> and <code>f 1 = g b</code></p>",
        "id": 228453080,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614707059
    },
    {
        "content": "<p>writing <code>have : 0 ≤ 1 := h monof h'</code> actually still shouts at me about types, actually :( I understand that sometimes it'll need nudging but not to the level that I had to do, I ended up having to go for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">f</span> <span class=\"n\">monof</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">this</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"n\">h'</span>\n</code></pre></div>\n<p>any less and it seems to not want to cooperate</p>",
        "id": 228456692,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1614708269
    },
    {
        "content": "<p><code>(0 : \\R) \\le (1 : \\R)</code> would probably fix it</p>",
        "id": 228456853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614708324
    },
    {
        "content": "<p>yep, that does it!</p>",
        "id": 228457046,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1614708390
    },
    {
        "content": "<p>I was too lazy to wait for <code>real</code> to import so I just tried out your code with nat</p>",
        "id": 228457528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614708562
    },
    {
        "content": "<p>I believe that in Lean 4 it will still be the case that a numeral defaults to nat quickly rather than leaving its options open, which seems a shame because we see a lot of type annotations in mathlib specifically to get around this</p>",
        "id": 228459736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614709432
    },
    {
        "content": "<p>Probably you only need to persuade 0 into R and 1 will do the right thing</p>",
        "id": 228459875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614709467
    }
]