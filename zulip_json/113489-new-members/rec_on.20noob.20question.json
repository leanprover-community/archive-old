[
    {
        "content": "<p><code>bool.rec_on tt 1 2</code> - Shouldn't this be equal to 1? But It doesn't work, I get the error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"err\">&#39;</span><span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">rec_on&#39;</span> <span class=\"n\">application</span><span class=\"o\">,</span> <span class=\"n\">elaborator</span> <span class=\"n\">has</span> <span class=\"n\">special</span> <span class=\"n\">support</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">application</span> <span class=\"o\">(</span><span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">handled</span> <span class=\"n\">as</span> <span class=\"n\">an</span> <span class=\"s2\">&quot;eliminator&quot;</span><span class=\"o\">),</span> <span class=\"n\">but</span> <span class=\"n\">the</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">known</span>\n</code></pre></div>\n\n\n<p>The <code>expected type</code> - it means <code>nat</code>?  Where to put it?</p>",
        "id": 202927067,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593965037
    },
    {
        "content": "<p><code>(bool.rec_on tt 1 2 : nat)</code></p>",
        "id": 202927738,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593965991
    },
    {
        "content": "<p>I would've never put it there lol</p>",
        "id": 202928926,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593967916
    },
    {
        "content": "<p>Could you explain <em>how</em> this helps?</p>",
        "id": 202928984,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593967990
    },
    {
        "content": "<p>I find it bizzare that the compiler (interpreter?) doesn't know how to compute it, but if I tell what's is the type of the output then it suddenly knows</p>",
        "id": 202929276,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593968432
    },
    {
        "content": "<p>The error message tells the reason. If you just wrote something like <code>#eval bool.rec_on tt 1 2</code> then there is no expected type.</p>",
        "id": 202929320,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593968493
    },
    {
        "content": "<p>Consider the type of <code>bool.rec_on</code>: <code>Π {C : bool → Sort l} (n : bool), C ff → C tt → C n</code>. The type checker has to infer <code>C</code> from limited evidence.</p>",
        "id": 202929371,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593968527
    },
    {
        "content": "<p>Note that <code>C</code> is a function that takes a <code>bool</code> and produces a type and we do not give <code>C</code> explicitly. Thus, Lean has to solve a higher-order unification problem.</p>",
        "id": 202929402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593968595
    },
    {
        "content": "<p>The reason the compiler can't compute it is because it's not a complete term. It's actually <code>@bool.rec_on &lt;guess me&gt; tt 1 2</code> and lean was unable to do the guessing part. The interpreter will not even consider evaluating terms with unresolved metavariables</p>",
        "id": 202929472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593968688
    },
    {
        "content": "<p>In general there is no unique answer to such unification problems. Lean has a heuristic to solve them but it depends on knowing the expected type.</p>",
        "id": 202929477,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593968695
    },
    {
        "content": "<p>Notice that <code>(bool.rec_on tt 1 2 : int)</code> also works and gives a different answer</p>",
        "id": 202929499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593968741
    },
    {
        "content": "<p>If you had a nondependent recursor like <code>bool.foo : \\Pi (T : Type), bool -&gt; T -&gt; T -&gt; T</code> then Lean would be able to fall back to inferring <code>T</code> from the arguments instead.</p>",
        "id": 202929540,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593968763
    },
    {
        "content": "<p>By the way <code>cond tt 2 1</code> works fine, because it is nondependent like Reid says</p>",
        "id": 202929575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593968862
    },
    {
        "content": "<p>Okay, I see that we do not give <code>C</code> explicitly. If I want to give it explicitly, what would I need to write?</p>",
        "id": 202929864,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593969294
    },
    {
        "content": "<p><code> λ b : bool, nat</code> ?</p>",
        "id": 202929882,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593969331
    },
    {
        "content": "<p>It works, but I'm not sure whether I understand the role of <code>C</code>.</p>",
        "id": 202929941,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593969387
    },
    {
        "content": "<p>C tells you the type of the object you're making, and the output of the recursor is the term of that type</p>",
        "id": 202930336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593970041
    },
    {
        "content": "<p>But <code>cond</code> seems to handle just fine without it</p>",
        "id": 202931576,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593972309
    },
    {
        "content": "<p>Here's the type of <code>cond</code>: <code>cond : Π {a : Type u_1}, bool → a → a → a</code>. This is a non-dependent function. See Reid's most recent message in this thread.</p>",
        "id": 202931698,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593972517
    },
    {
        "content": "<p>Note that <code>bool.rec_on</code> can be used where the types of the two sides are not the same (i.e. <code>1 : nat</code> and <code>2 : int</code>)</p>",
        "id": 202932493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593973800
    },
    {
        "content": "<p>in which case the result will have a funny dependent type</p>",
        "id": 202932534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593973827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Wow, that's a great answer, thank you!</p>",
        "id": 202936177,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593979800
    },
    {
        "content": "<p>But know I'm stuck in a circle, because in order to define this dependent type, I would need to use <code>bool.rec_on</code> itself</p>",
        "id": 202936222,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593979842
    },
    {
        "content": "<p>Like <code>(λ b : bool, bool.rec_on b nat int)</code></p>",
        "id": 202936255,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593979909
    },
    {
        "content": "<p>When you declare <code>bool</code> as an inductive type you get <code>bool.rec_on</code> for free. There's a nice explanation by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> here: <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/</a></p>",
        "id": 202936394,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593980084
    },
    {
        "content": "<p>Yeah, I know this at least.</p>",
        "id": 202936487,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593980269
    },
    {
        "content": "<p>But I think this is not the easiest way to use it:<br>\n<code>@bool.rec_on (λ b : bool,  @bool.rec_on (λ b1 : bool, Type) b nat bool ) tt 2 ff </code></p>",
        "id": 202936526,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593980287
    },
    {
        "content": "<p>you can use <code>cond</code> for that, because <code>nat</code> and <code>int</code> have the same type, namely <code>Type</code> :)</p>",
        "id": 202936561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593980374
    },
    {
        "content": "<p>oh right</p>",
        "id": 202936611,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593980405
    },
    {
        "content": "<p>But in the general case, like for the type <code>weekday</code> from the tutorial (inductive type with 7 elements) it wouldn't work</p>",
        "id": 202936626,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593980458
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">cond</span> <span class=\"n\">tt</span> <span class=\"n\">bool</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">cond</span> <span class=\"n\">ff</span> <span class=\"n\">bool</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 202936640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593980495
    },
    {
        "content": "<p>the display isn't great because lean doesn't know how to infer a to_string function for this type</p>",
        "id": 202936690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593980536
    },
    {
        "content": "<p>I will note that it is pretty weird to be writing types or programs like this</p>",
        "id": 202936709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593980582
    },
    {
        "content": "<p>At least I now understand fully what's going on</p>",
        "id": 202936776,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593980659
    },
    {
        "content": "<p>Thank you really much!</p>",
        "id": 202936779,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593980666
    },
    {
        "content": "<p><code>#reduce</code> works better than <code>#eval</code> there</p>",
        "id": 202936883,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593980847
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">weekday</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">mon</span> <span class=\"bp\">|</span> <span class=\"n\">tue</span> <span class=\"bp\">|</span> <span class=\"n\">wed</span> <span class=\"bp\">|</span> <span class=\"n\">thu</span> <span class=\"bp\">|</span> <span class=\"n\">fri</span> <span class=\"bp\">|</span> <span class=\"n\">sat</span> <span class=\"bp\">|</span> <span class=\"n\">sun</span>\n\n<span class=\"n\">def</span> <span class=\"n\">tgif_type</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">fri</span> <span class=\"o\">:=</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n\n<span class=\"n\">def</span> <span class=\"n\">tgif</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tgif_type</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">fri</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"s2\">&quot;thank god it&#39;s friday&quot;</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">()</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"o\">(</span><span class=\"n\">tgif_type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">fri</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">has_repr</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"s2\">&quot;()&quot;</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">tgif</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">fri</span> <span class=\"c1\">-- &quot;thank god it&#39;s friday&quot;</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">tgif</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">sun</span> <span class=\"c1\">-- ()</span>\n</code></pre></div>",
        "id": 202936886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593980850
    },
    {
        "content": "<p>When I did <code>#reduce</code> at the last line my server crashed lol</p>",
        "id": 202937197,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1593981343
    },
    {
        "content": "<p>From the perspective of the kernel (that <code>#reduce</code> uses) strings are a list characters, which are natural numbers in a certain range. From the perspective of the kernel, natural numbers are written unary, as <code>S (S ( ... 0 ... ))</code>, so it chokes on even medium-sized natural numbers.<br>\nIn short: don't use <code>#reduce</code> on natural numbers <code>&gt;1000</code> or <code>char</code> or <code>string</code> (or things that are build on a tower of definitions, like any real number)</p>",
        "id": 202943498,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593993060
    }
]