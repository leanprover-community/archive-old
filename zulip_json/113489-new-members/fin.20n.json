[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test_1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Why cannot I apply <code>\\sigma\\</code> to <code> fin n </code>?<br>\nThe above gives me the error message <br>\n<a href=\"/user_uploads/3121/vnGzYYcrfdDcOxZJ-QGTK7JJ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vnGzYYcrfdDcOxZJ-QGTK7JJ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/vnGzYYcrfdDcOxZJ-QGTK7JJ/image.png\"></a></div>",
        "id": 240467094,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622122194
    },
    {
        "content": "<p>I am confused...</p>",
        "id": 240467819,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622122494
    },
    {
        "content": "<p><code>∑ i : fin n, 1</code></p>",
        "id": 240467927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622122541
    },
    {
        "content": "<p>which is short for <code>∑ i in (finset.univ : finset (fin n)), 1</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.univ\">docs#finset.univ</a>)</p>",
        "id": 240467968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622122559
    },
    {
        "content": "<p>Thank you, Eric!</p>",
        "id": 240469348,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622123109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span> the difference is whether you sum over a <code>set</code> (i.e. a subset) or over the full type.<br>\nIn the first case you use <code>i in s</code>, in the second <code>i : X</code>.</p>",
        "id": 240470698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622123671
    },
    {
        "content": "<p>Thanks for all your kind help above!<br>\nThis formalization using <code>fin n</code> gives me the error message:<br>\n<a href=\"/user_uploads/3121/tky4TVpvr82tfV_BfwiAuhTF/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tky4TVpvr82tfV_BfwiAuhTF/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/tky4TVpvr82tfV_BfwiAuhTF/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test_1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)):</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Why does this happen and how can I fix this issue?</p>",
        "id": 240476363,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622125856
    },
    {
        "content": "<p>This happens when checking <code>i &lt; j + 1</code> because Lean does the following to check the types:</p>\n<ul>\n<li>the two sides of <code>&lt;</code> should have the same type</li>\n<li>let's check <code>i</code>: this is a <code>fin n</code>, so the other side should also be a <code>fin n</code></li>\n<li>let's check <code>j + 1</code>: the two sides of <code>+</code> should have the same type, namely <code>fin n</code></li>\n<li><code>j</code> is not a <code>fin n</code> but a <code>ℕ</code>, and there's no coercion from <code>ℕ</code> to <code>fin n</code>, error!</li>\n</ul>",
        "id": 240476865,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1622126063
    },
    {
        "content": "<p>The solution is to hint that you actually want to compare the two values as natural numbers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test_1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 240476989,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1622126115
    },
    {
        "content": "<ul>\n<li>the two sides of <code>&lt;</code> should have the same type</li>\n<li>let's check <code>(i : ℕ)</code>: this is obviously a <code>ℕ</code>, so the other side should also be a <code>ℕ</code></li>\n<li>let's check that <code>i</code> is a <code>ℕ</code>: it's actually a <code>fin n</code>, but I know how to convert from <code>fin n</code> to <code>ℕ</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.fin_to_nat\">docs#fin.fin_to_nat</a>), so apply the coercion</li>\n<li>let's check <code>j + 1</code>: the two sides of <code>+</code> should have the same type, namely <code>ℕ</code></li>\n<li>...</li>\n</ul>",
        "id": 240477285,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1622126242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span> remember that <code>i : fin n</code> does <em>not</em> mean \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> is a natural number, and somewhere in the system there is a proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">i&lt;n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69862em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>\". It means \"<code>i</code> is a <em>pair</em>, consisting of a natural number <code>i.1</code> and a proof <code>i.2</code> that <code>i.1 &lt; n</code>\". You are confusing <code>i</code> and <code>i.1</code>.</p>",
        "id": 240477321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622126258
    },
    {
        "content": "<p>PS I cannot see your screenshots very well at all on my device. Can you just cut and paste errors in between triple quotes like you quote your code? People usually reserve screenshots only for issues which are VS Code specific.</p>",
        "id": 240477692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622126400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/fin.20n/near/240476989\">said</a>:</p>\n<blockquote>\n<p>The solution is to hint that you actually want to compare the two values as natural numbers:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test_1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Cool! I can only fix it by changing the direction of &lt; before..which looks like a silly way.</p>",
        "id": 240477799,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622126430
    },
    {
        "content": "<p>Yes, because <code>&gt;</code> is illegal :-)</p>",
        "id": 240477864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622126466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/fin.20n/near/240477692\">said</a>:</p>\n<blockquote>\n<p>PS I cannot see your screenshots very well at all on my device. Can you just cut and paste errors in between triple quotes like you quote your code? People usually reserve screenshots only for issues which are VS Code specific.</p>\n</blockquote>\n<p>Got it and no problem!</p>",
        "id": 240477961,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622126513
    },
    {
        "content": "<p>Either that or I'll have to go and find my glasses :-)</p>",
        "id": 240478067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622126537
    }
]