[
    {
        "content": "<p>Hi, I'm new to Lean and trying to learn more by implementing point processes. I'm already stuck on the first definition. I want to create a new structure for measures that only take values in <code>\\nat</code> and I am unsure why my approach doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">finite_point_measure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">in_nats</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">measurable_set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">measure_of</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>any help would be appreciated. If this is the wrong place to ask please just point me in the right direction. thanks~</p>",
        "id": 304033553,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1665754673
    },
    {
        "content": "<p><code>ℕ</code> is a <strong>type</strong>, not a <strong>set</strong>, so <code>n ∈ ℕ</code> does not make sense. You want <code>n : ℕ</code> instead.</p>",
        "id": 304033856,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665754741
    },
    {
        "content": "<p>Thanks, that is already helpful, sadly that did not fix the error yet. I'll play around a bit more and come back if I still can't fix it</p>",
        "id": 304034821,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1665754983
    },
    {
        "content": "<p>In any case try to post <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (including the imports and so on, the idea is that we can copy/paste your code and see what happens). Note that <code>measure</code> refers to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure\">docs#measure</a>, that is probably not what you want.</p>\n<p>Finally, it's probably a good idea to open a new conversation in the \"new members\" stream. I can move your message if you want.</p>",
        "id": 304035314,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665755132
    },
    {
        "content": "<p>Yes, thanks, will keep in mind in the future. I got it working now. Yes, you can move this to the new members stream, didn't see it earlier</p>",
        "id": 304035916,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1665755296
    },
    {
        "content": "<p>Also, you might want your measure to take values in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/enat\">docs#enat</a> instead, since many (most?) point processes used in practice are only locally finite</p>",
        "id": 304036820,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1665755547
    },
    {
        "content": "<p>And probably you want to take in a function <code>set α → enat</code> rather than merely assuming it exists.</p>",
        "id": 304037627,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665755772
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span> for similar considerations in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/hamming_dist\">docs#hamming_dist</a></p>",
        "id": 304037699,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665755790
    },
    {
        "content": "<p>Hmm is this the mythical second example! I guess it's a measure not a metric.</p>",
        "id": 304038007,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1665755871
    },
    {
        "content": "<p>Is enat a complete linear order btw?</p>",
        "id": 304038317,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1665755951
    },
    {
        "content": "<p>10 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/measure.20theory\">#general &gt; measure theory</a> by <span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span>.</p>",
        "id": 304038359,
        "sender_full_name": "Notification Bot",
        "timestamp": 1665755966
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/enat.complete_linear_order\">docs#enat.complete_linear_order</a></p>",
        "id": 304038608,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665756026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Measure.20taking.20values.20in.20nat/near/304037627\">said</a>:</p>\n<blockquote>\n<p>And probably you want to take in a function <code>set α → enat</code> rather than merely assuming it exists.</p>\n</blockquote>\n<p>I tried to do that, but I wasn't just able to overwrite the <code>measure_of</code> function. If there is a way to do it i'd be happy to implement it that way</p>",
        "id": 304066824,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1665763576
    },
    {
        "content": "<p>No, don't overwrite it. Simply state that they are compatible.</p>",
        "id": 304067241,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665763696
    },
    {
        "content": "<p>You mean <code>{ \\mu : measure \\alpha // \\exists f : set \\alpha \\to enat, \\forall s, measurable s -&gt; \\mu s = f s }</code> ?</p>",
        "id": 304068923,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1665764131
    },
    {
        "content": "<p>No, rather</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">measure_enat_of</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">enat</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coe_measure_enat_of</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">measurable</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">measure_enat_of</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">measure_of</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 304069421,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665764262
    },
    {
        "content": "<p>Or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">measure_enat_of</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">enat</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coe_measure_enat_of</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span>  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">measure_enat_of</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">measure_of</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>because I think the junk value for <code>measure_of</code> will make it work out.</p>",
        "id": 304069532,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665764294
    },
    {
        "content": "<p>What would be the difference in practice between <code>\\exists f : set \\alpha \\to enat, \\forall s : set \\alpha, ...</code> and <code>\\forall s : set \\alpha, \\exists n : enat, ...</code>? Those feel pretty isomorphic to each other. And if you have either, then <code>measure_enat_of</code> can be derived from <code>measure_of</code>.</p>",
        "id": 304071400,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1665764847
    },
    {
        "content": "<p>Well, you have to use choice every time you want to use one, while you can readily use the other.</p>",
        "id": 304071837,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665764973
    },
    {
        "content": "<p>While I'm asking: would another option be to define a typeclass <code>[is_int_valued_measure \\mu]</code> instead of a new type for int-valued measures?</p>",
        "id": 304113226,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1665780021
    },
    {
        "content": "<p>The question is whether you want to have an int-valued measure or merely know that there exists one.</p>",
        "id": 304116956,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665781547
    },
    {
        "content": "<p>I highly doubt you want the latter.</p>",
        "id": 304116985,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665781558
    },
    {
        "content": "<p>I would say that you want a plain old measure but know that it actually takes values in the integers. Something like this (but less clumsy):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_values_of_type</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">γ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">coe_enat_ennreal</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">enat</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">refine</span> <span class=\"n\">n.cases_on</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"n\">some</span> <span class=\"n\">n'</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">is_integer_valued</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure_theory.measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">toto</span> <span class=\"o\">:</span> <span class=\"n\">has_values_of_type</span> <span class=\"n\">μ</span> <span class=\"n\">enat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure_theory.measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_integer_valued</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">set.univ</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_integer_valued.toto.eq</span><span class=\"o\">,</span> <span class=\"n\">exists_apply_eq_apply'</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 304117629,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1665781863
    },
    {
        "content": "<p>Still, why not just state the commutative diagram rather than its mere existence in an inconvenient form? Like, do you <em>really</em> not want to access the <code>enat</code>-valued function?</p>",
        "id": 304119216,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665782610
    },
    {
        "content": "<p>In fact I don't know, it is not at all clear to me... but I think I would like to treat an int-valued measure as much like a usual measure for as long as possible, and only use the information that it is int-valued inside a few key lemmas, so a typeclass feels more natural. In my head, <code>[is_integer_valued \\mu]</code> and <code>[is_probability_measure \\mu]</code> have the same status; that one of them can be implemented as a <code>set \\alpha \\to enat</code> feels incidental.</p>\n<p>Besides, I still kind of followed your suggestion, the function is right there as <code>has_values_of_type.to_fun</code> if you need it <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 304121201,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1665783641
    },
    {
        "content": "<p>Okay, so I have now tried to define a point measure as a sum of finite point measures and I am still running into problems. Lean seems to be complaining about my <code>sum_of_measures</code> condition, but I'm not sure why. Any help is appreciated, thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measurable_space_def</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measurable_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure.measure_space_def</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.cast.defs</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">finite_point_measure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">measure_enat_of</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coe_measure_enat_of</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span>  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">measure_enat_of</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">measure_of</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">point_measure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fin_point_measures</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finite_point_measure</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sum_of_measures</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">measure_of</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fin_point_measures</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">measure_enat_of</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 304676874,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1666099352
    },
    {
        "content": "<p>I get no issue when I replace <code>measure α</code> with <code>measure_theory.measure α</code></p>",
        "id": 304679273,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1666100106
    },
    {
        "content": "<p>(Well, I do have a mathematical issue which is that you are not storing the sum but really an indexed family of finite point measures, but two such decompositions giving the same sum should probably be identical.)</p>",
        "id": 304679625,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1666100232
    },
    {
        "content": "<p>thanks, my issue was that I was using a <code>namespace</code> but forgot the <code>end</code> at the end</p>",
        "id": 304680241,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1666100406
    },
    {
        "content": "<p>How would you store the sum directly? I guess for my definition to be correct I would have to make some sort of equivalence class?</p>",
        "id": 304680544,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1666100504
    },
    {
        "content": "<p>I would avoid going down this road of defining equivalence relations for this. Rather, I would do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.enat</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measurable_space</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">with_top.has_coe_t'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_t</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">with_top.map</span> <span class=\"n\">has_coe_t.coe</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span> <span class=\"n\">with_top.has_coe_t'</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">point_measure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">measure_theory.measure</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">measure_enat_of</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">enat</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coe_measure_enat_of</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">measure_of</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">measure_enat_of</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(where the first two <code>coe</code> instances are probably somewhere in mathlib already but I couldn't find them)</p>",
        "id": 304682775,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1666101130
    },
    {
        "content": "<p>Don't call it <code>measure_enat_of</code> if it does not give you an <code>enat</code> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 304682926,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1666101181
    },
    {
        "content": "<p>Thanks! If I now want to build the measurable space of point measures (where the sigma-algebra is generated by sets<br>\n<code> ∀B∀k {η(B)=k}</code> where would I even begin? Should I implement that as an instance or a def. Also I'm not sure how to write sets of sets I guess.</p>",
        "id": 304763715,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1666108835
    },
    {
        "content": "<p>You can have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measurable_space.generate_measurable\">docs#measurable_space.generate_measurable</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measurable_space.generate_from\">docs#measurable_space.generate_from</a></p>",
        "id": 304830027,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1666122957
    },
    {
        "content": "<p>Maybe something like this,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">elementary</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">point_measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"bp\">|</span> <span class=\"n\">μ.measure_enat_of</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elementaries</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">point_measure</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">measurable_set</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">elementary</span> <span class=\"n\">B</span> <span class=\"n\">k</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">point_measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">measurable_space.generate_from</span> <span class=\"o\">(</span><span class=\"n\">elementaries</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but there has to be a better way of defining <code>elementaries</code>.</p>",
        "id": 304831150,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1666123360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/113489-new-members/topic/Measure.20taking.20values.20in.20nat/near/304830027\">said</a>:</p>\n<blockquote>\n<p>You can have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measurable_space.generate_measurable\">docs#measurable_space.generate_measurable</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measurable_space.generate_from\">docs#measurable_space.generate_from</a></p>\n</blockquote>\n<p>I tried this, but I wasn't quite able to get it to work</p>",
        "id": 304833621,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1666124356
    },
    {
        "content": "<p>Thanks for all the help!</p>",
        "id": 304833676,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1666124380
    },
    {
        "content": "<p>Hi, I'm trying to define a Poission random variable and am starting by defining the pmf, but I'm having problems with casting between <code>nat</code> and <code>real</code> and <code>nnreal</code>.  Also is this the right approach? thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">poission_pmf</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">l</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">nat.factorial</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>EDIT:<br>\nnevermind: figured it out</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">poission_pmf</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">real.to_nnreal</span> <span class=\"o\">(</span><span class=\"n\">real.exp</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">l</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">nat.factorial</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 305156355,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1666274518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283896\">Niclas Kupper</span> has marked this topic as unresolved.</p>",
        "id": 305224041,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666294654
    },
    {
        "content": "<p>That might be a good idea, I'll try that tomorrow – still not that comfortable with writing proofs in lean, so I might try proving basic facts about Poission RVs first</p>",
        "id": 305224319,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1666294751
    }
]