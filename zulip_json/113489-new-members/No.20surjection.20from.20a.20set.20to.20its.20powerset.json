[
    {
        "content": "<p>I know mathlib has the theorem <code>cantor_surjective</code>,  that given <code>{α} (f : α → set α)</code>, we have <code>¬ function.surjective f</code>. Can one prove a similar statement given <code>(S : set α) (f : S → 𝒫 S)</code>?</p>\n<p>I've attempted this, but I come a cropper because I'm trying apply surjectivity to a term of the wrong type. Here's the start of my attempt. The problem is that I'm applying <code>h</code> with a term of type <code>set ↥S</code> rather than one of type <code>↥𝒫 S</code>. Can this be fixed?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">𝒫</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">classical.prop_decidable</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"c1\">-- This fails.</span>\n<span class=\"c\">/-</span><span class=\"cm\">  by_cases k : x ∈ f x,</span>\n<span class=\"cm\">  { have : x ∉ f x,</span>\n<span class=\"cm\">    { rwa [hx, nmem_set_of_eq, not_not_mem], },</span>\n<span class=\"cm\">    exact this k, },</span>\n<span class=\"cm\">  { have : x ∈ f x,</span>\n<span class=\"cm\">    { rwa [hx, mem_set_of_eq], },</span>\n<span class=\"cm\">    exact k this, }, -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214579126,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1603721996
    },
    {
        "content": "<p>why not just turn it into an instance of <code>cantor_surjective</code>?</p>",
        "id": 214579247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603722040
    },
    {
        "content": "<p>also <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 214579306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603722070
    },
    {
        "content": "<p>Ah sorry, I've added the import.</p>",
        "id": 214579624,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1603722212
    },
    {
        "content": "<p>OK, so how would I apply <code>cantor_surjective</code> in this case to get the desired result?</p>",
        "id": 214579840,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1603722317
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">equiv.set.powerset</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">𝒫</span> <span class=\"n\">S</span> <span class=\"bp\">≃</span> <span class=\"n\">set</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 214580095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603722438
    },
    {
        "content": "<p>Thanks. I haven't come across <code>equiv</code> before. I'll think about this and come back if I get stuck.</p>",
        "id": 214581597,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1603723092
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">equiv.set.powerset</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">𝒫</span> <span class=\"n\">S</span> <span class=\"bp\">≃</span> <span class=\"n\">set</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)},</span>\n <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">a.2</span><span class=\"o\">⟩,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">x.2</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">𝒫</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">equiv.surjective</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">function.cantor_surjective</span> <span class=\"o\">(</span><span class=\"n\">equiv.set.powerset</span> <span class=\"n\">S</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n</code></pre></div>\n\n</div></div>",
        "id": 214581937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603723242
    },
    {
        "content": "<p>When I do this with Imperial 1st years I just use types: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hx</span> <span class=\"n\">at</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">k</span> <span class=\"o\">},</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214589236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603726413
    },
    {
        "content": "<p>I just tell them that a type is a collection of stuff in type theory, like a set is a collection of stuff in set theory.</p>",
        "id": 214589433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603726498
    },
    {
        "content": "<p>Although I think it is interesting how shockingly short the mathlib proof of <code>cantor_surjective</code> is</p>",
        "id": 214590238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603726821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> . Thanks. I feel less bad about trying a classical proof (given that <code>function.cantor_surjective</code> is constructive).</p>",
        "id": 214590273,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1603726836
    },
    {
        "content": "<p>it actually uses that ever popular lemma from TPIL that is not obviously constructive: <code>not (p &lt;-&gt; not p)</code></p>",
        "id": 214590399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603726887
    },
    {
        "content": "<p>Oh, good to know! I take it then the result is not true using constructive reasoning?</p>\n<p>Edit: I can't read. Ignore this comment.</p>",
        "id": 214590591,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1603726942
    },
    {
        "content": "<p>not (p &lt;-&gt; not p) can be proved constructively, rather surprisingly</p>",
        "id": 214590722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603726967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> when teaching do you avoid discussing power sets entirely (treating <code>set S</code> as a 'power type') or do you discuss power sets then ask students to think of <code>set S</code> (in this situation) as being a power set? Or something else?</p>",
        "id": 214593839,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1603728081
    },
    {
        "content": "<p>I don't think <code>set.powerset</code> has been used at all in mathlib</p>",
        "id": 214593969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603728131
    },
    {
        "content": "<p>Once you have a separate notion of the type of subsets of a type, there are very few instances where the subcollection of subsets of a given subset of a type comes up</p>",
        "id": 214594162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603728211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>. Trying to prove this non-surjectivity result for power sets, I can see why!</p>",
        "id": 214594425,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1603728320
    },
    {
        "content": "<p>Well in this case you aren't really using <code>set.powerset</code> as a set, so the translation to <code>set S</code> is natural</p>",
        "id": 214594563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603728374
    },
    {
        "content": "<p>I say that <code>set S</code> is the type of subsets of S, and the reason it's not called <code>subset S</code> is because a term of type <code>set S</code> is a set of elements of S.</p>",
        "id": 214594591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603728386
    },
    {
        "content": "<p>There are uses of <code>set.prod</code> in mathlib (the cartesian product of sets), so conceivably a similar thing might come up for <code>set.powerset</code></p>",
        "id": 214594634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603728417
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.eventually_lift'_powerset\">docs#filter.eventually_lift'_powerset</a></p>",
        "id": 214594818,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603728502
    },
    {
        "content": "<p>oh that's right, filters will need this sometimes</p>",
        "id": 214594918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603728558
    },
    {
        "content": "<p>I went looking for uses of the notation</p>",
        "id": 214594944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603728569
    },
    {
        "content": "<p>Hm, should we use <code>Iic</code> instead of <code>set.powerset</code>?</p>",
        "id": 214595439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603728783
    },
    {
        "content": "<p>that would allow us to unify it with the collection of supersets <code>{x | S \\sub x}</code>, which also comes up in filters</p>",
        "id": 214595534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603728823
    },
    {
        "content": "<p>I'm not going to do this refactor!</p>",
        "id": 214596606,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603729256
    },
    {
        "content": "<p>I can lump it in with that refactor I never finished to generalize filters to subsets of a poset</p>",
        "id": 214602572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603731638
    },
    {
        "content": "<p>I fear that refactor might be really painful. Don't you think?<br>\nThe fact that filters are filters on <code>set X</code> is really used all over the place now.<br>\nNot saying that it can't be done, but I think it might be one of the biggest refactors we've seen so far.</p>",
        "id": 214603077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603731827
    },
    {
        "content": "<p>You are not wrong</p>",
        "id": 214608089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603733969
    },
    {
        "content": "<p>It was one of those refactors where the size of the refactor grows exponentially with the number of touched theorems</p>",
        "id": 214608162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603734002
    }
]