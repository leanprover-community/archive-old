[
    {
        "content": "<p>Hello !<br>\nI'm a classical mathematician, mostly  working on questions of number theory.<br>\nI had the \"fun\" idea to formalize results from a recent preprint of mine on noncommutative ring theory, because these results seemed simple enough to be formalized. I'm having a lot of trouble, especially to not write spaghetti code. I don't want to flood this channel, so would anyone be interested in reviewing my code and helping me figure out what I should do better?<br>\nWith love for this wonderful community,<br>\nBéranger</p>",
        "id": 305692817,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666550490
    },
    {
        "content": "<p>You can certainly post your code here, don't worry!</p>",
        "id": 305693153,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666550699
    },
    {
        "content": "<p>You can for example start posting the definitions (make sure to post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>), these are the hardest for a beginner, and a mistake there means a lot of pain later</p>",
        "id": 305693334,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666550784
    },
    {
        "content": "<p>What is the mathematical result you are trying to formalize?</p>",
        "id": 305693365,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666550804
    },
    {
        "content": "<p>Here is a definition : a (unital, associative, not assumed commutative) ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is <em>weakly fadelian</em> if for every nonzero <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>, there exist <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>=</mo><mi>a</mi><mi>b</mi><mo>+</mo><mi>c</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">1 = ab+ca</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">ab</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span></span></span></span>. I formalized it as :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">definition</span> <span class=\"n\">is_wfad</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Maybe I should rather have this as structure rather than property? Like a ring equipped with a map that takes an element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> and a proof of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a \\neq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> and returns elements <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">b,c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> as well as a proof of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>=</mo><mi>a</mi><mi>b</mi><mo>+</mo><mi>c</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">1=ab+ca</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">ab</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span></span></span></span>?</p>",
        "id": 305694241,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666551382
    },
    {
        "content": "<p>One of the first results I prove in my preprint is that such a ring is necessarily integral. The proof probably requires LEM (the definition of integral rings feels weird constructively). The proof uses two lemmas, the first one is :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lem_int_1</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_wfad</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- there goes a proof</span>\n</code></pre></div>\n<p>i.e. if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>y</mi><mo>=</mo><mi>y</mi><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">xy=yx=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x^2=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">y^2=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>.</p>\n<p>Then later I prove a second lemma, for which at some point I need to apply <code>lem_int_1</code> with specific <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>. And I don't know how to do that!</p>",
        "id": 305694588,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666551572
    },
    {
        "content": "<p>Note you need <code>@[class]</code> on your <code>definition</code> if you want <code>[is_wfad R]</code> to work properly</p>",
        "id": 305695870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666551979
    },
    {
        "content": "<p>If you are really interested in the details, here is what I came up with:<br>\n<a href=\"https://pastebin.com/E5jsWL3D\">link to a pastebin page</a><br>\nThe code is really spaghetti-ish, and I wonder how much easier this can be done.<br>\nMy main question at the moment is: how to remove the <code>sorry</code>'s that I have used: they seem to result formally from a simple beta-reduction (I am at ease with lambda-calculus and thought Lean would be closer, but the whole concept of proving things \"from the bottom up\" is weird to my mind which likes constructing lambda-terms)</p>",
        "id": 305695988,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666552021
    },
    {
        "content": "<p>A thing you can do if you're (and that's the most understandable thing ever) not interested in reading the crappiest code ever written, is recommend me some really basic stuff for mathematicians trying to learn Lean. I, of course, did the natural number game and stuff, looked at the flashy YouTube videos, but there seems to be a big gap between this and the doc, and I don't know what kind of resources fit in exactly the middle spot. Actually, since I know natural deduction proofs, lambda-calculus, etc., I think at the moment I'd like a clear explanation of Lean's syntax and what exactly tactics are, etc. Because I'm confused. For example, your <code>@{class]</code> remark makes sense, but that's the kind of things I'm unaware of.</p>",
        "id": 305696502,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666552188
    },
    {
        "content": "<p>On the subject of typeclasses, you should also write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">is_fad.to_iswfad</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_fad</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_wfad</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>instead of your <code>fad_to_wfad</code>,<br>\nwhich will make typeclass search apply the lemma automatically</p>",
        "id": 305697024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666552353
    },
    {
        "content": "<p>I suspect currently the best way is to get people to review your code</p>",
        "id": 305697194,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666552421
    },
    {
        "content": "<p>Instead of <code>[0 ≠ (1:R)]</code>, use <code>[nontrivial R]</code></p>",
        "id": 305697235,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666552438
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html</a> is probably the relevant tutorial information here</p>",
        "id": 305697241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666552440
    },
    {
        "content": "<p>Ok so that's like inheritance but that doesn't have to be \"definitionally true\", but can be proven a posteriori? Like constructing a forgetful functor?</p>",
        "id": 305697245,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666552441
    },
    {
        "content": "<p><code>lem_int_2</code> has a spurious <code>y</code> argument</p>",
        "id": 305697331,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666552457
    },
    {
        "content": "<p>And then <code>apply lem_int_2 (y*x) yxyx_zero</code> seems to work</p>",
        "id": 305697586,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666552555
    },
    {
        "content": "<p>Yes, it is indeed like inheritance; but only because <code>class foo extends bar</code> generates a <code>foo.to_bar</code> instance automatically in the obvious way. It's not inheritance that's special, it's <code>instance</code> (aka <code>@[instance] lemma</code>).</p>",
        "id": 305697781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666552613
    },
    {
        "content": "<p>Does it? I get \"failed to synthesize type class instance for [...]\" :( I'm using Lean 3 btw, should I not?</p>",
        "id": 305698034,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666552693
    },
    {
        "content": "<p>Another tip: it's best practice to provide a name for the hypothesis created by <code>by_contradiction</code>, like <code>by_contradiction h</code> (because the autogenerated name may change between lean versions)</p>",
        "id": 305698140,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666552729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557866\">Béranger Seguin</span> <a href=\"#narrow/stream/113488-general/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305698034\">said</a>:</p>\n<blockquote>\n<p>Does it? I get \"failed to synthesize type class instance for [...]\" :( I'm using Lean 3 btw, should I not?</p>\n</blockquote>\n<p>Did you apply the <code>@[class]</code> suggestion from Eric?</p>",
        "id": 305698233,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666552761
    },
    {
        "content": "<p>Ok! I was wondering what was up with these <code>_inst_n</code> thingies too.</p>",
        "id": 305698250,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666552765
    },
    {
        "content": "<p>Yup, I did !</p>",
        "id": 305698307,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666552787
    },
    {
        "content": "<p>Can you update the pastebin with the previous suggestions so we can see what you missed?</p>",
        "id": 305698321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666552795
    },
    {
        "content": "<p>I didn't manage to, but I created an account so next times I will be able to. Here is the new link <a href=\"https://pastebin.com/pZmauH53\">pastebin link</a></p>",
        "id": 305698590,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666552953
    },
    {
        "content": "<p>Note that here we tend to prefer <a href=\"https://gist.github.com\">https://gist.github.com</a> since that support lean syntax highlighting</p>",
        "id": 305698760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666553079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113488-general/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305697235\">said</a>:</p>\n<blockquote>\n<p>Instead of <code>[0 ≠ (1:R)]</code>, use <code>[nontrivial R]</code></p>\n</blockquote>\n<p>This means you'll also need to change <code>exact _inst_2 H66</code> to <code>exact zero_ne_one H66</code></p>",
        "id": 305698852,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666553127
    },
    {
        "content": "<p>I am moving this conversation to the new members stream</p>",
        "id": 305698867,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666553133
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Help.20a.20mathematician.20learn.20Lean.3F\">#general &gt; Help a mathematician learn Lean?</a> by <span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span>.</p>",
        "id": 305698992,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666553178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113488-general/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305698852\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113488-general/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305697235\">said</a>:</p>\n<blockquote>\n<p>Instead of <code>[0 ≠ (1:R)]</code>, use <code>[nontrivial R]</code></p>\n</blockquote>\n<p>This means you'll also need to change <code>exact _inst_2 H66</code> to <code>exact zero_ne_one H66</code></p>\n</blockquote>\n<p>I didn't make that change because I get \"unknown identifier 'nontrivial'\". Is something wrong with my Lean installation?</p>",
        "id": 305698996,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666553178
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Help.20a.20mathematician.20learn.20Lean.3F\">#general &gt; Help a mathematician learn Lean?</a> by <span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span>.</p>",
        "id": 305699024,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666553201
    },
    {
        "content": "<p>Realistically you probably want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_fad</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">is_wfad</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[class]</span> <span class=\"kd\">definition</span> <span class=\"n\">is_fad</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[class]</span> <span class=\"kd\">definition</span> <span class=\"n\">is_wfad</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That way you can write <code>apply is_wfad.prop</code> instead of <code>apply _inst_1</code></p>",
        "id": 305699027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666553202
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Help.20a.20mathematician.20learn.20Lean.3F\">#general &gt; Help a mathematician learn Lean?</a> by <span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span>.</p>",
        "id": 305699058,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666553224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557866\">Béranger Seguin</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305698034\">said</a>:</p>\n<blockquote>\n<p>Does it? I get \"failed to synthesize type class instance for [...]\" :( I'm using Lean 3 btw, should I not?</p>\n</blockquote>\n<p>You are right in using Lean 3.</p>",
        "id": 305699097,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666553247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557866\">Béranger Seguin</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305694588\">said</a>:</p>\n<blockquote>\n<p>One of the first results I prove in my preprint is that such a ring is necessarily integral. The proof probably requires LEM (the definition of integral rings feels weird constructively). The proof uses two lemmas, the first one is :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lem_int_1</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_wfad</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- there goes a proof</span>\n</code></pre></div>\n<p>i.e. if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>y</mi><mo>=</mo><mi>y</mi><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">xy=yx=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x^2=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">y^2=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>.</p>\n<p>Then later I prove a second lemma, for which at some point I need to apply <code>lem_int_1</code> with specific <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>. And I don't know how to do that!</p>\n</blockquote>\n<p>Instead of writing <code>(x*y=0) → (y*x=0) → (x*x=0) ∨ (y*y=0)</code> we usually name the hypothesis <code>x*y=0</code> and <code>y*x=0</code> and we only keep <code>(x*x=0) ∨ (y*y=0)</code> as conclusion.</p>",
        "id": 305699351,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666553368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557866\">Béranger Seguin</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305698034\">said</a>:</p>\n<blockquote>\n<p>Does it? I get \"failed to synthesize type class instance for [...]\" :( I'm using Lean 3 btw, should I not?</p>\n</blockquote>\n<p>You should tell us the whole error message! It was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">is_wfad</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">xy_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">yxyx_zero</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>which is failing because <code>0 ≠ 1</code> is not a typeclass!</p>\n<p>Using <code>nontrivial R</code> will fix this</p>",
        "id": 305699354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666553370
    },
    {
        "content": "<p>If <code>nontrivial R</code> really doesn't work for you, perhaps you're on a very old version of lean 3?</p>",
        "id": 305699546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666553426
    },
    {
        "content": "<p>I have Lean 3.4.2</p>",
        "id": 305699622,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666553488
    },
    {
        "content": "<p>That's very old</p>",
        "id": 305699635,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666553500
    },
    {
        "content": "<p>You should be on Lean 3.48.0</p>",
        "id": 305699656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666553514
    },
    {
        "content": "<p>Alright, I took what the AUR had.</p>",
        "id": 305699713,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666553536
    },
    {
        "content": "<p>Have you followed the installation <a href=\"https://leanprover-community.github.io/get_started.html\">instructions</a>?</p>",
        "id": 305699723,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666553540
    },
    {
        "content": "<p><del>AUR?</del></p>",
        "id": 305699774,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666553569
    },
    {
        "content": "<p>I'm doing that now. Thanks for all the precious help!!! You've gotten me out of many questions I had.</p>",
        "id": 305699777,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666553570
    },
    {
        "content": "<p>If you want to use the AUR, use <a href=\"https://aur.archlinux.org/packages/elan-lean\">https://aur.archlinux.org/packages/elan-lean</a> instead of installing Lean directly</p>",
        "id": 305699784,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1666553573
    },
    {
        "content": "<p>The tool you want is <a href=\"https://leanprover-community.github.io/leanproject.html\">leanproject</a>, doing something like <code>leanproject new wfad</code> will create a folder with the latest mathlib already compiled for you</p>",
        "id": 305699942,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666553669
    },
    {
        "content": "<p>(That's <a href=\"https://aur.archlinux.org/packages/python-mathlibtools\">https://aur.archlinux.org/packages/python-mathlibtools</a> in the AUR)</p>",
        "id": 305699994,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1666553702
    },
    {
        "content": "<p><a href=\"https://aur.archlinux.org/packages?O=0&amp;SeB=n&amp;K=lean&amp;outdated=&amp;SB=p&amp;SO=d&amp;PP=50&amp;submit=Go\">Looking at AUR</a>, I can't even find a download link to 3.4.2. What was the package name you used?</p>",
        "id": 305700007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666553709
    },
    {
        "content": "<p>I am using leanproject already, I think it's really my Lean version that sucks. It was lean3-bin.</p>",
        "id": 305700032,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666553732
    },
    {
        "content": "<p>I had a (very quick look at your code), it seems very reasonable! You can write <code>rw [h1, h2...]</code> on a single line to save lines. Also, using <a href=\"https://leanprover-community.github.io/extras/calc.html\">calc mode</a> is probably a good idea when doing computation (at the beginning it seems a pain to use, but it improves readability a lot).</p>",
        "id": 305702158,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666554987
    },
    {
        "content": "<p>Also, try to not introduce too many sublemmas <em>in a proof</em> (using <code>have</code>). Just prove these lemmas separately (even if they're very technical and they become useless once one has the final result). In this way proofs are much shorter and much easier to read.</p>",
        "id": 305702378,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666555102
    },
    {
        "content": "<p>Thanks to everyone, I updated the pastebin and now everything typechecks ! I'll check out calc mode. Thanks for the <code>rw</code> tip.<br>\nI use all these <code>have</code> because I don't know how to do otherwise! <code>rw</code> seems to only act on the ultimate goal and if I don't create intermediate goals I don't know how to do. Can you give an example of how it should be done ?</p>",
        "id": 305702889,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666555389
    },
    {
        "content": "<p>I mean that if I am proving that <code>n = 2</code> and I say <code>have : n &lt; 5 := ...</code> I'd rather write an explicit lemma <code>lemma lt_5 ... : n &lt; 5 := ...</code></p>",
        "id": 305703109,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666555526
    },
    {
        "content": "<p>Here's a much shorter spelling of one of your declarations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">is_fad.to_is_wfad</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_fad</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_wfad</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">prop</span> <span class=\"o\">:=</span> <span class=\"n\">is_fad.prop</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 305703162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666555563
    },
    {
        "content": "<p>And use this in the proof that <code>n = 2</code>. Of course nobody else will ever use it again, since I've proved that <code>n = 2</code>. but it doesn't matter.</p>",
        "id": 305703201,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666555565
    },
    {
        "content": "<p>Another trick:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">apply</span> <span class=\"n\">is_wfad.prop</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">x_nonzero</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">C</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">C'</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">C'</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>can be written</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">is_wfad.prop</span> <span class=\"n\">_</span> <span class=\"n\">x_nonzero</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 305703290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666555620
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#obtain\">tactic#obtain</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.obtain\">docs#tactic.interactive.obtain</a>)</p>",
        "id": 305703380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666555677
    },
    {
        "content": "<p>Awesome! That's exactly the kind of things that I didn't know how to do!</p>",
        "id": 305703392,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666555679
    },
    {
        "content": "<p>In any case <code>rw [h] at h1</code> rewrites... well, <code>h</code> at <code>h1</code>, not at the final goal.</p>",
        "id": 305703475,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666555701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305703475\">said</a>:</p>\n<blockquote>\n<p>In any case <code>rw [h] at h1</code> rewrites... well, <code>h</code> at <code>h1</code>, not at the final goal.</p>\n</blockquote>\n<p>This changes <em>everything</em> !</p>",
        "id": 305704699,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666556446
    },
    {
        "content": "<p>Well no, just the hypothesis :)</p>",
        "id": 305704773,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666556516
    },
    {
        "content": "<p>Also, if your proof is a combination of associativity/distributivity and similar triviality in a ring, you can try the <code>ring</code> tactic</p>",
        "id": 305704875,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666556572
    },
    {
        "content": "<p>It essentially means \"do the computation\"</p>",
        "id": 305704899,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666556588
    },
    {
        "content": "<p>Béranger, where did you learn how to use Lean? I find it hard to understand how you can write Lean code without knowing some of the stuff you don't know. You must have had a very weird learning path.</p>",
        "id": 305705452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666556943
    },
    {
        "content": "<p>I don't know how to phrase it in a way that I'm sure isn't unpleasant. I'm genuinely curious, and impressed you managed to write all that with a strange learning path.</p>",
        "id": 305705732,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666557078
    },
    {
        "content": "<p>As someone also self-taught, it doesn't seem so strange to me (I assume we're talking about the code in the pastebin link)... it looks like he understands very basic tactics (specifically <code>intro</code>, <code>rw</code>, <code>apply</code>, and <code>exact</code>), and those are all covered in the Natural Number Game. You can get pretty far with those alone (as demonstrated by the code in question). The code definitely seems like something you could write after playing NNG.</p>",
        "id": 305706773,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666557728
    },
    {
        "content": "<p>This was my first thought,  but NNG definitely covers <code>rw ... at ...</code> and  <code>ring</code>.</p>",
        "id": 305707169,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666557995
    },
    {
        "content": "<p>Well, I guess all I can say is that when one is a newbie it can be hard to remember everything one has learned. :)</p>",
        "id": 305707414,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666558145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305705452\">said</a>:</p>\n<blockquote>\n<p>Béranger, where did you learn how to use Lean? I find it hard to understand how you can write Lean code without knowing some of the stuff you don't know. You must have had a very weird learning path.</p>\n</blockquote>\n<p>I <em>might</em> have gotten overenthusiastic too soon. But the current version of the code is probably way better !</p>",
        "id": 305707573,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666558255
    },
    {
        "content": "<p>There is no problem at all with enthusiasm here!</p>",
        "id": 305707679,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666558324
    },
    {
        "content": "<p>One thing I don't know how to deal with: in the text, I handle the case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mi>b</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">(xb)^2=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> and then the case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>c</mi><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">(cx)^2=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> is similar because it is exactly symmetric. I don't find an easy way to avoid rewriting everything twice.</p>",
        "id": 305707724,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666558350
    },
    {
        "content": "<p>I really hope my curiosity won't lower your enthusiasm</p>",
        "id": 305707738,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666558363
    },
    {
        "content": "<p>Can you point out where exactly is your code this symmetry issue arise?</p>",
        "id": 305707773,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666558397
    },
    {
        "content": "<p>There is no silver bullet here, but there are some tricks</p>",
        "id": 305707785,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666558410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305707738\">said</a>:</p>\n<blockquote>\n<p>I really hope my curiosity won't lower your enthusiasm</p>\n</blockquote>\n<p>Have no worries. I received so much help here! Great community! My enthusiasm is safe</p>",
        "id": 305707790,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666558415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305707773\">said</a>:</p>\n<blockquote>\n<p>Can you point out where exactly is your code this symmetry issue arise?</p>\n</blockquote>\n<p>In current version, this starts at \"cases H44 with xbxb_zero cxcx_zero,\" line 100 and then the two cases are in the distinct paragraphs that follow.</p>",
        "id": 305707872,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666558451
    },
    {
        "content": "<p>But obviously this is clearer in maths:<br>\nWe have shown either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mi>b</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">(xb)^2=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>c</mi><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">(cx)^2=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. We know <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>x</mi><mo>+</mo><mi>x</mi><mi>b</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">cx+xb=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x^2=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. But then since one of the terms in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>x</mi><mo>+</mo><mi>x</mi><mi>b</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">cx+xb=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> is zero, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> has a (right or left, depending on the case) inverse which contradicts its square being <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. The argument is one sentence in natural language but 26 lines in my code.</p>",
        "id": 305708044,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666558577
    },
    {
        "content": "<p>You can state it as an auxiliary lemma <code>foo</code> and obtain the other statement by applying <code>foo</code> to the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite\">docs#mul_opposite</a> of your ring.</p>",
        "id": 305708110,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666558643
    },
    {
        "content": "<p>You can probably use the opposite ring</p>",
        "id": 305708151,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666558670
    },
    {
        "content": "<p>Ops, Yael was faster</p>",
        "id": 305708161,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666558678
    },
    {
        "content": "<p>On a side note (and apologies if someone already mentioned this) but I noticed you used <code>by exact X</code> a number of times. This is actually unnecessary... you can delete <code>by exact</code> and simply write <code>X</code>. (This is because <code>by</code> transitions from term mode to tactic mode while <code>exact</code> transitions back into term mode, so they essentially cancel each other out.)</p>",
        "id": 305708503,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666558857
    },
    {
        "content": "<p>You can surely save a lot of lines using <code>ring</code>.</p>",
        "id": 305708806,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666559039
    },
    {
        "content": "<p>But I am catching a plane, enjoy Lean!</p>",
        "id": 305708867,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666559054
    },
    {
        "content": "<p>I'm not sure <code>ring</code> will buy him much since this is all non-commutative ring theory.</p>",
        "id": 305709454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666559438
    },
    {
        "content": "<p>Oh you're right! That's sad</p>",
        "id": 305709751,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666559615
    },
    {
        "content": "<p>Non-commutative rings are really painful because nobody worked long enough with them to get us nice tactics. I just tried to do that little computation and the first try ends up at</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xx_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">d'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">xx_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">d'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero_ne_one.symm</span> <span class=\"n\">d'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 305710467,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666560055
    },
    {
        "content": "<p>All this handling of associativity is really a pain.</p>",
        "id": 305710506,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666560081
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#noncomm_ring\">tactic#noncomm_ring</a> but it's not very clever</p>",
        "id": 305710647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666560176
    },
    {
        "content": "<p>I forgot about that one. At least it can be used to write a proof that doesn't invoke any ring axiom explicitly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xx_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">replace</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">H</span><span class=\"o\">],</span> <span class=\"n\">noncomm_ring</span> <span class=\"o\">}]</span> <span class=\"n\">using</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">d'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">d'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">d'</span><span class=\"o\">,</span> <span class=\"n\">noncomm_ring</span> <span class=\"o\">},</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">xx_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">d'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 305711323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666560609
    },
    {
        "content": "<p>The associativity pain in Patrick's first proof can be alleviated slightly using <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#assoc_rewrite\">tactic#assoc_rewrite</a>, but of course the proof with noncomm_ring is much better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xx_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">assoc_rw</span> <span class=\"o\">[</span><span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">H</span><span class=\"o\">],</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">d'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">xx_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">d'</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- trying to combine the following line with the previous one results in an app_builder exception</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">d'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero_ne_one.symm</span> <span class=\"n\">d'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 305712303,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1666561210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305710467\">said</a>:</p>\n<blockquote>\n<p>Non-commutative rings are really painful because nobody worked long enough with them to get us nice tactics. I just tried to do that little computation and the first try ends up at</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xx_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">d'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">xx_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">d'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero_ne_one.symm</span> <span class=\"n\">d'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</blockquote>\n<p>--</p>\n<p>This is so much more beautiful than my spaghetticode though.</p>",
        "id": 305712320,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666561223
    },
    {
        "content": "<p>This is all so much fun! I even formalized the next theorem in the paper in a matter of minutes (a left Ore weakly fadelian ring is fadelian). I don't think the rest of the paper is as easy to formalize as it requires to define algebras of differential operators.</p>",
        "id": 305712940,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666561650
    },
    {
        "content": "<p>But it will be just as much fun!</p>",
        "id": 305715283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666563056
    },
    {
        "content": "<p>Can you share the preprint?</p>",
        "id": 305716785,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1666564024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305716785\">said</a>:</p>\n<blockquote>\n<p>Can you share the preprint?</p>\n</blockquote>\n<p>Submitted to the arXiv this week-end, so should only be there this week. This is really silly stuff though (absolutely no motivation or context, we were just playing around with rings and found weird results which we deemed shareable).</p>",
        "id": 305717666,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666564544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305715283\">said</a>:</p>\n<blockquote>\n<p>But it will be just as much fun!</p>\n</blockquote>\n<p>Honestly, the funniest thing for me would be formalizing results from my field (number theory stuff, Galois representations, inverse Galois theory, arithmetic geometry, etc., you know all of that better than me), but I think I'll have to get a liiiiittle better x)</p>",
        "id": 305720597,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666566569
    },
    {
        "content": "<p>This is one of my primary motivations for doing lean. As of quite recently we can now talk about things like a continuous representation $\\mathrm{Gal}(\\overline{\\mathbb{Q}}/\\mathbb{Q})\\to GL_n(\\mathbb{Z}_p)$ and modular forms are on the way.</p>",
        "id": 305753137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666592204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305753137\">said</a>:</p>\n<blockquote>\n<p>This is one of my primary motivations for doing lean. As of quite recently we can now talk about things like a continuous representation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">l</mi></mrow><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"true\">‾</mo></mover><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Gal}(\\overline{\\mathbb{Q}}/\\mathbb{Q})\\to GL_n(\\mathbb{Z}_p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1389em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Gal</span></span><span class=\"mopen\">(</span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span><span style=\"top:-3.8089em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1667em;\"><span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathbb\">Q</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and modular forms are on the way.</p>\n</blockquote>\n<p>Awesome! My master's thesis dealt with (uni)versal deformation rings so I love them! Have things like Schlessinger's criterion already been formalized? It sounds like a cool project!</p>",
        "id": 305785114,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666606158
    },
    {
        "content": "<p>No, but we probably have all the machinery for Schlessinger now.</p>",
        "id": 305786749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666606819
    },
    {
        "content": "<p>That (Schlessinger) would be a really nice project!</p>",
        "id": 305821765,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666618913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305821765\">said</a>:</p>\n<blockquote>\n<p>That (Schlessinger) would be a really nice project!</p>\n</blockquote>\n<p>If I didn't have a PhD thesis to finish I'd be doing all-nighters trying to learn Lean for this kind of stuff x)</p>",
        "id": 305849117,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666626170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20a.20mathematician.20learn.20Lean.3F/near/305716785\">said</a>:</p>\n<blockquote>\n<p>Can you share the preprint?</p>\n</blockquote>\n<p>It's on the arXiv now: <a href=\"https://arxiv.org/abs/2210.13078\">https://arxiv.org/abs/2210.13078</a></p>",
        "id": 305955909,
        "sender_full_name": "Béranger Seguin",
        "timestamp": 1666674734
    }
]