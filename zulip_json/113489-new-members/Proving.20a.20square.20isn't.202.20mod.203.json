[
    {
        "content": "<p>Is there an easy way to prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.modeq</span>\n\n<span class=\"sd\">/-- A square is not congruent to 2 module 3 -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">not_square_of_two_mod_three</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≡</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">3</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>My initial plan was to show that <code>(m : zmod 3) * ↑m = ↑2</code> and then use <code>fin_cases</code> on <code>↑m</code> to find a contradiction, but I can't seem to prove this first statement. I would want to use something like <code>a * b = c → ↑a * ↑b = ↑c</code> but I can't find this anywhere.</p>",
        "id": 215725372,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1604589413
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.modeq</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"sd\">/-- A square is not congruent to 2 module 3 -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">not_square_of_two_mod_three</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 215726145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604589732
    },
    {
        "content": "<p>Does that help?</p>",
        "id": 215726159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604589737
    },
    {
        "content": "<p>The benefit of using <code>zmod</code> is that it is a finite type, so lean can just prove everything without your help</p>",
        "id": 215726204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604589761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"345682\">@Adrián Doña Mateo</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 215726236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604589779
    },
    {
        "content": "<p>I think the question is how to reduce the original statement to this one</p>",
        "id": 215726377,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604589836
    },
    {
        "content": "<p>Yes, I would like to reduce it to that</p>",
        "id": 215727069,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1604590087
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.modeq</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.modeq</span>\n\n<span class=\"sd\">/-- A square is not congruent to 2 module 3 -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">not_square_of_two_mod_three</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n\n\n<span class=\"sd\">/-- A square is not congruent to 2 module 3 -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">not_square_of_two_mod_three'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≡</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">3</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">not_square_of_two_mod_three</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"bp\">←</span><span class=\"n\">zmod.eq_iff_modeq_nat</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215727731,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1604590348
    },
    {
        "content": "<p>I see, so norm_cast was the piece I was missing. Thank you! These are very nice solutions.</p>",
        "id": 215728394,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1604590606
    }
]