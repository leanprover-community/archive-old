[
    {
        "content": "<p>I have a proof that just unfolds some definitions in a hypothesis and the goal, and then concludes with <code>rw H, refl</code>. Is there some automation that lets me get rid of those unfolds? For some reason, <code>simp at H</code> reduces <code>H</code> to <code>true</code>, which isn't helpful, and <code>simp</code> at the goal fails.</p>",
        "id": 206945710,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597421071
    },
    {
        "content": "<p>Maybe <code>simp [H]</code> or <code>simp * at *</code> works but without seeing the details it's difficult to guess. If the rewrite is not too serious you might be able to do it in term mode. <code>simp [first_thing_you_unfold, second_thing_you_unfold, H] at *</code>?</p>",
        "id": 206945976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597421206
    },
    {
        "content": "<p>Passing a list to <code>simp</code> makes it a little easier to read, I only tried that with <code>unfold</code> before. What annoys me in particular is that I need <code>simp [has_mem.mem, set.mem]</code> to reduce <code>x ∈ λ y, t</code> to <code>t[y/x]</code> which I would have expected <code>simp</code> to do.</p>",
        "id": 206947301,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597421889
    },
    {
        "content": "<p>I'm pretty sure you shouldn't have to do <code>simp [has_mem.mem, set.mem]</code> ever but I am not an expert simper.</p>",
        "id": 206947664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597422093
    },
    {
        "content": "<p>But it's very hard to diagnose (for me, at least) unless you post fully working code.</p>",
        "id": 206947692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597422114
    },
    {
        "content": "<p>I'm trying to make a self contained example, but when I replace my isomorphism with a general isomorphism, <code>simp</code> suddenly recognizes it and solves the goal right away, probably because it knows about <code>add_equiv.map_zero</code></p>",
        "id": 206949255,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597422995
    },
    {
        "content": "<p>I remember Coq had a tactic to generalize a term to an arbitrary element of its type, is there such a thing for lean?</p>",
        "id": 206949474,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597423107
    },
    {
        "content": "<p><code>generalize</code> :)</p>",
        "id": 206949537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597423147
    },
    {
        "content": "<p>Hm, sadly that didn't help in this case...</p>",
        "id": 206950154,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597423487
    },
    {
        "content": "<p>There's probably some more subtle issue blocking <code>simp</code> from applying the lemma, like instance arguments not agreeing or something</p>",
        "id": 206950629,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597423737
    }
]