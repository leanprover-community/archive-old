[
    {
        "content": "<p>I'm trying to prove <code>¬ real.sqrt 5 = 0</code>. I know that for <code>nat</code>s we would just do <code>cc</code>, but tactics like <code>ring</code> don't seem to be working for me here. I'm also having trouble finding theorems in mathlib that relate to inequalities with reals, or theorems from other typeclasses that are inherited by the reals. I'm could transform this into expressions like <code>¬ 5 = 0</code> using <code>(0:ℝ) ≤ (5:ℝ)</code> and <code>real.sqrt_eq_zero</code>, but then I run into the same issue. Could someone point me in the right direction?</p>",
        "id": 195261667,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587778445
    },
    {
        "content": "<p>The <code>norm_num</code> tactic will prove <code>¬ 5 = 0</code>, at least.</p>",
        "id": 195261695,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587778507
    },
    {
        "content": "<p>In fact <code>norm_num</code> could prove your initial goal.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 195261816,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587778694
    },
    {
        "content": "<p>this is almost certainly one of those times when it's not <code>norm_num</code> doing the work</p>",
        "id": 195261939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587778933
    },
    {
        "content": "<p><code>@[simp] theorem sqrt_eq_zero (h : 0 ≤ x) : sqrt x = 0 ↔ x = 0</code></p>",
        "id": 195261975,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587779017
    },
    {
        "content": "<p>aha:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span>\n  <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 195262036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587779105
    },
    {
        "content": "<p>it's because <code>norm_num</code> calls <code>simp</code> with <code>norm_num</code> as discharger</p>",
        "id": 195262043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587779126
    },
    {
        "content": "<p>Somewhat related inequality question: I'm trying to do this pretty simple limit proof. I get this far, and I know conceptually I need to use <code>he</code> and the inverse of <code>hn</code> to finesse my goal state into something trivial, but I can't seem to get there with the theorems I know (especially with the type casting). Could someone point me in the right direction?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">archimedean</span>\n<span class=\"n\">def</span> <span class=\"n\">lim_to_inf</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">lim_to_inf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">lim_to_inf</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">he</span> <span class=\"o\">:=</span> <span class=\"n\">exists_nat_gt</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">he</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 195301867,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587847032
    },
    {
        "content": "<p>What if epsilon=0.1, N=1, and n=1? Then the goal is false.</p>",
        "id": 195302531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587848050
    },
    {
        "content": "<p>You want a <code>nat</code> greater than <code>1/epsilon</code> I think.</p>",
        "id": 195302784,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587848517
    },
    {
        "content": "<p>I would write down a careful paper proof first, and then think about how to get each line into Lean.</p>",
        "id": 195304227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587851030
    }
]