[
    {
        "content": "<p>Does Lean support literate programming? I couldn't find anything, so I assume it doesn't. How hard should it be to implement it?</p>\n<p>I assume some Markdown or TeX preprocesser able to extract code (which then could be checked by Lean) should exist, but I am not aware of any.</p>",
        "id": 212333236,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601920070
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/format_lean/\">https://leanprover-community.github.io/format_lean/</a></p>",
        "id": 212339336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601922986
    },
    {
        "content": "<p>It would be really cool to also have something like this:<br>\n<a href=\"https://agda.github.io/agda-stdlib/\">https://agda.github.io/agda-stdlib/</a></p>",
        "id": 212339621,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601923129
    },
    {
        "content": "<p>I guess the API docs are an approximation of this.</p>",
        "id": 212339712,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601923166
    },
    {
        "content": "<p>If you're an emacs person, there is surely some way to embed lean code in an org-mode file, which you can then (presumably) extract to whatever you want.</p>",
        "id": 212340079,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601923332
    },
    {
        "content": "<p>Of course this is not ideal.</p>",
        "id": 212340153,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601923373
    },
    {
        "content": "<p>I think the first step for a literate programming implementation for Lean would be to collect proposals for a \"literate Lean\" file format (<code>.llean</code>?). Once the design / bikeshedding is done I'd be happy to help out with the vscode-lean side of things.</p>",
        "id": 212340748,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601923643
    },
    {
        "content": "<p><code>foo.lean.tex</code>?</p>",
        "id": 212340864,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601923687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/Literate.20programming/near/212333236\">said</a>:</p>\n<blockquote>\n<p>Does Lean support literate programming?</p>\n</blockquote>\n<p>Do you mean Knuth-style literate programming (like the TeX source code and WEB), or do you mean Haskell-style where everything is a comment unless otherwise specified?  (I can't answer either way, but there's a spectrum of what \"literate programming\" even means.)</p>",
        "id": 212340990,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601923754
    },
    {
        "content": "<p>Just trying it out with org-mode</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">*</span> <span class=\"n\">Introduction</span>\n\n  <span class=\"n\">Here</span> <span class=\"n\">is</span> <span class=\"n\">some</span> <span class=\"n\">text</span>\n\n<span class=\"bp\">#+</span><span class=\"n\">BEGIN_SRC</span> <span class=\"n\">lean</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">mynat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">â†’</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">#+</span><span class=\"n\">END_SRC</span>\n</code></pre></div>\n\n<p>At least things are highlighted correctly and editing lets me put in unicode as expected from lean-mode.</p>",
        "id": 212341844,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601924129
    },
    {
        "content": "<p>I'll try converting to PDF to see what happens. Still not sure about code execution either.</p>",
        "id": 212341874,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601924148
    },
    {
        "content": "<p>This was the pdf output:<br>\n<a href=\"/user_uploads/3121/SoZfy5W6OKh6v6iIcWucfoVh/test.pdf\">test.pdf</a></p>",
        "id": 212342006,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601924205
    },
    {
        "content": "<p>Someone who knows elisp and/or pandoc better than I do can probably arrange for the latex extraction to use the correct style files for lean code.</p>",
        "id": 212342067,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601924251
    },
    {
        "content": "<p>Okay, code execution doesn't work out of the box, but it shouldn't be hard to modify this elisp file<br>\n<a href=\"https://code.orgmode.org/bzg/worg/raw/master/org-contrib/babel/ob-template.el\">https://code.orgmode.org/bzg/worg/raw/master/org-contrib/babel/ob-template.el</a><br>\nto work with lean.</p>",
        "id": 212343142,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601924757
    },
    {
        "content": "<p>The downside of this solution is that it's editor specific.</p>",
        "id": 212349841,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601928433
    },
    {
        "content": "<p>Though as an Emacs user I like it.</p>",
        "id": 212349862,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601928450
    },
    {
        "content": "<p>I'm not suggesting this is a realistic solution :) I was just experimenting with what I have on hand.</p>",
        "id": 212350584,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601928819
    },
    {
        "content": "<p>It's easy to write a plug-in for <a href=\"https://asciidoctor.org/\">https://asciidoctor.org/</a> that will write code to external files.</p>",
        "id": 212351006,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601929018
    },
    {
        "content": "<p>I feel like asciidoc is even more obscure than org-mode.</p>",
        "id": 212351152,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601929098
    },
    {
        "content": "<p>Why?</p>",
        "id": 212351219,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601929146
    },
    {
        "content": "<p>I could be wrong.</p>",
        "id": 212351268,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601929187
    },
    {
        "content": "<p>Personally I have only heard of it in passing.</p>",
        "id": 212351339,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601929207
    },
    {
        "content": "<p>I like callouts in quoted source <a href=\"/user_uploads/3121/UuD44B6tcQBkPi5jI84KHt6i/Screenshot_2020-10-05-AsciiDoc-Writers-Guide-Asciidoctor.png\">Screenshot</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/UuD44B6tcQBkPi5jI84KHt6i/Screenshot_2020-10-05-AsciiDoc-Writers-Guide-Asciidoctor.png\" title=\"Screenshot\"><img src=\"/user_uploads/3121/UuD44B6tcQBkPi5jI84KHt6i/Screenshot_2020-10-05-AsciiDoc-Writers-Guide-Asciidoctor.png\"></a></div>",
        "id": 212351849,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601929453
    },
    {
        "content": "<p>Well, as a mostly terminal-only programmer I have to say, I've heard of AsciiDoc, never used nor heard of Asciidoctor.</p>",
        "id": 212352996,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601930028
    },
    {
        "content": "<p>But it does look pretty cool.</p>",
        "id": 212353016,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601930038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Literate.20programming/near/212340990\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/Literate.20programming/near/212333236\">said</a>:</p>\n<blockquote>\n<p>Does Lean support literate programming?</p>\n</blockquote>\n<p>Do you mean Knuth-style literate programming (like the TeX source code and WEB), or do you mean Haskell-style where everything is a comment unless otherwise specified?  (I can't answer either way, but there's a spectrum of what \"literate programming\" even means.)</p>\n</blockquote>\n<p>Well, I've never used literate programming in C or Haskell, but I have used it in Agda, which I am willing to bet is more Haskell like.</p>",
        "id": 212353104,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601930067
    },
    {
        "content": "<p>I happened to see this today on Hacker News: <a href=\"https://plv.csail.mit.edu/blog/alectryon.html\">\"Alectryon (named after the Greek god of chicken) is a collection of tools for writing technical documents that mix Coq code and prose, in a style sometimes called literate programming.\"</a></p>",
        "id": 217521962,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605997202
    }
]