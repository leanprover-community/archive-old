[
    {
        "content": "<p>What am I missing here? How do I access the underlying function of a linear map. I would like to do something like <code>unfold g.to_fun</code>in the proof, but that doesn't work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">]</span><span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">,</span>  <span class=\"c1\">-- this would be something more elaborate, like ` λx, f(g(h(x)))`</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">neg_add</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">g.to_fun</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">):</span> <span class=\"n\">g.to_fun</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238807984,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621016118
    },
    {
        "content": "<p><code>rfl</code>?</p>",
        "id": 238808067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621016156
    },
    {
        "content": "<p>That's what I thought too, but it doesnt seem to work...</p>",
        "id": 238808360,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621016278
    },
    {
        "content": "<p>probably because you said it is <code>\\lam x, x</code> instead of <code>\\lam x, -x</code></p>",
        "id": 238808532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621016342
    },
    {
        "content": "<p>oh, you're right it does work here. Let me see if I can create a valid <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> where it doesn't work, sorry.</p>",
        "id": 238808847,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621016464
    },
    {
        "content": "<p>updated <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. Is it the <code>have g := ...</code> that is wrong here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.integral_closure</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.localization</span> <span class=\"c1\">-- for fraction_ring</span>\n\n\n <span class=\"kd\">lemma</span> <span class=\"n\">my_lemma</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">:=</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">neg_add</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">g.to_fun</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"c1\">-- error</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    invalid apply tactic, failed to unify</span>\n<span class=\"cm\">    g.to_fun = λ (x : A), -x</span>\n<span class=\"cm\">    with</span>\n<span class=\"cm\">    ?m_2 = ?m_</span>\n<span class=\"cm\">    -/</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238810177,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621017111
    },
    {
        "content": "<p>yes, if you use <code>have g</code> then lean will not be able to unfold g later, you need <code>let g</code></p>",
        "id": 238810607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621017283
    },
    {
        "content": "<p>oh, thank you! I've been going completely the wrong way with this</p>",
        "id": 238810741,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621017358
    }
]