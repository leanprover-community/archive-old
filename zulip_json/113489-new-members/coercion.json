[
    {
        "content": "<p>Is there anyway to make lean display what type of coercion it is in the parser? Right now I'm working on a problem where there are coercions from int to the ring, from nat to the ring and from nat to int to the ring. It gets quite confusing when everything is displayed with jus \\u.</p>",
        "id": 159364575,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1551122857
    },
    {
        "content": "<p><code>set_option pp.all true</code> certainly does the job, but there may be less radical options</p>",
        "id": 159364709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551122983
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">):</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- coe 2 : int</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">):</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- @coe nat int (@coe_to_lift nat int (@coe_base nat int int.has_coe)) 2 : int</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">):</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> @coe.{1 1} nat int (@coe_to_lift.{1 1} nat int (@coe_base.{1 1} nat int int.has_coe))</span>\n<span class=\"cm\">  (@bit0.{0} nat nat.has_add (@has_one.one.{0} nat nat.has_one)) :</span>\n<span class=\"cm\">  int -/</span>\n</pre></div>",
        "id": 159364718,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551122993
    },
    {
        "content": "<p>pp.imlicit true seems to expand most things except coercions for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⌊</span><span class=\"bp\">@</span><span class=\"n\">fract</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"err\">⌋</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"bp\">ℤ</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">semiring</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">digit</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n</pre></div>",
        "id": 159365387,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1551123502
    },
    {
        "content": "<p>the options are cumulative</p>",
        "id": 159365447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551123550
    },
    {
        "content": "<p>in particular, the second one is the result of both <code>pp.notation false</code> and <code>pp.implicit true</code></p>",
        "id": 159365466,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551123564
    },
    {
        "content": "<p>oh</p>",
        "id": 159365467,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1551123565
    },
    {
        "content": "<p>This is great, thanks :)</p>",
        "id": 159365569,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1551123618
    }
]