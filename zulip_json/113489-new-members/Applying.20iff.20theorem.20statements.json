[
    {
        "content": "<p>There is an example where an iff statement, <code>hqr: Q ↔ R</code> is used using <code>apply hqr.1</code>. I've been across several problems been trying to use iff theorem statements and failing so continuing without them. How do you actually apply one direction of an iff statement?</p>",
        "id": 244853742,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1625396168
    },
    {
        "content": "<p><code>.1</code> is the same as <code>.mp</code>, which means the left to right direction.<br>\n<code>.2</code> would be the same as <code>.mpr</code>, which means the right to left direction.<br>\nSee <a href=\"https://leanprover-community.github.io/mathlib_docs/init/logic.html#iff\">https://leanprover-community.github.io/mathlib_docs/init/logic.html#iff</a></p>",
        "id": 244855560,
        "sender_full_name": "David Renshaw",
        "timestamp": 1625398907
    },
    {
        "content": "<p>I think <code>mp</code> stands for \"modus ponens\" and <code>mpr</code> stands for ... \"modus ponens reversed\" (?)</p>",
        "id": 244855605,
        "sender_full_name": "David Renshaw",
        "timestamp": 1625398954
    },
    {
        "content": "<p>Or \"iMPlies\" / \"iMPlies Reverse\" if you forget what the modus ponens is :)</p>",
        "id": 244856946,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1625401070
    },
    {
        "content": "<p>In the context of mul_left_cancel <code>theorem mul_left_cancel (a b c : mynat) (ha : a ≠ 0) : a * b = a * c → b = c :=</code>, is there a reason this wouldn't work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">revert</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_zero_iff.mp</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 244859341,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1625404834
    },
    {
        "content": "<p>And additionally, easier to leave it here, but what is acceptable usage of exfalso or is there another good way to get rid of the or in a hypothesis?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">revert</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>I am left with an or hypothesis in <code>j</code> where a = 0 is clearly false thus the other must be true, so I considered using <code>cases j</code> and <code>exfalso</code> to show that it cannot be a = 0 of the two options.</p>\n<p>Basically, my idea would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">revert</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">ha</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 244859436,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1625405031
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 244859480,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625405078
    },
    {
        "content": "<p>Hmm... I don't know what you mean by \"acceptable usage\". Exfalso is certainly a perfectly fine way to get rid of that goal.</p>",
        "id": 244861229,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625407895
    },
    {
        "content": "<blockquote>\n<p>is there a reason this wouldn't work?</p>\n</blockquote>\n<p>Well, this works: <code>have j := (mul_eq_zero_iff a h).mp g,</code>.</p>",
        "id": 244861302,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625407989
    },
    {
        "content": "<p>You have to read the theorem statement carefully: <code>(a b : mynat): a * b = 0 ↔ a = 0 ∨ b = 0</code> means you have to supply <code>a</code> and <code>b</code> to get the <code>iff</code> hypothesis.</p>",
        "id": 244861317,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625408032
    },
    {
        "content": "<p>And an iff hypothesis is just a bundle of two functions: A -&gt; B and B -&gt; A. The first one is called <code>mp</code> and the second one is called <code>mpr</code>.</p>",
        "id": 244861365,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625408079
    },
    {
        "content": "<p>As a computer programmer, I am not fluent in Latin unfortunately. Just remember that the <code>r</code> in <code>mpr</code> means \"reverse\".</p>",
        "id": 244861381,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625408108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/113489-new-members/topic/Applying.20iff.20theorem.20statements/near/244861381\">said</a>:</p>\n<blockquote>\n<p>As a computer programmer, I am not fluent in Latin unfortunately. Just remember that the <code>r</code> in <code>mpr</code> means \"reverse\".</p>\n</blockquote>\n<p>That's why I call them <code>.1</code> and <code>.2</code></p>",
        "id": 244861542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625408340
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">revert</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_eq_zero_iff</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">ha</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a good way to isolate <code>d</code> to use <code>hd</code>?</p>",
        "id": 244863159,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1625410688
    },
    {
        "content": "<p>I don't understand what you mean.</p>",
        "id": 244864043,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625411746
    },
    {
        "content": "<p>Spoiler: you have to <code>cases</code> on a mynat variable.</p>",
        "id": 244864138,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625411851
    }
]