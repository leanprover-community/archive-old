[
    {
        "content": "<p>If in my goal view I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>is there a way to create </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>?</p>",
        "id": 268629565,
        "sender_full_name": "Andre Popovitch",
        "timestamp": 1642642897
    },
    {
        "content": "<p>Does <code>have foo : succ h ≥ a, by library_search</code> help?</p>",
        "id": 268629775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1642643058
    },
    {
        "content": "<p>I'm playing the game haha. I get <code>unknown identifier 'library_search'</code></p>",
        "id": 268629793,
        "sender_full_name": "Andre Popovitch",
        "timestamp": 1642643091
    },
    {
        "content": "<p>But if I can create <code>∃ (c, succ h + c = a)</code>, which I think I ought to be able to with <code>c = 0</code>, I think that would be sufficient</p>",
        "id": 268629838,
        "sender_full_name": "Andre Popovitch",
        "timestamp": 1642643153
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">replace</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">h</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">ge_of_eq</span> <span class=\"n\">eq</span>\n</code></pre></div>",
        "id": 268632467,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642645570
    },
    {
        "content": "<p>That works, thanks! Is there a way to create the existential directly?</p>",
        "id": 268632578,
        "sender_full_name": "Andre Popovitch",
        "timestamp": 1642645708
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">h</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 268632695,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642645819
    },
    {
        "content": "<p>woah, thank you</p>",
        "id": 268633205,
        "sender_full_name": "Andre Popovitch",
        "timestamp": 1642646349
    },
    {
        "content": "<p>oh, so an ∃ is just a tuple where the type of the second element can depend on the value of the first element?</p>",
        "id": 268633218,
        "sender_full_name": "Andre Popovitch",
        "timestamp": 1642646372
    }
]