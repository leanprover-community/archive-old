[
    {
        "content": "<p>I am trying to prove the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>  <span class=\"c1\">-- this enables the notation</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">variables</span>\n<span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"c1\">-- indexing type</span>\n<span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"c1\">-- tell Lean that the set of all elements ι is finite.</span>\n<span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"c1\">-- and that its elements can be compared for equality</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">rnd_var</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">probs_nonneg</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sum_probs_one</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">delta_if_det</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">rnd_var</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_ite</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"c1\">-- curry the X using h somehow</span>\n        <span class=\"n\">sorry</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_norm</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">rnd_var.sum_probs_one</span><span class=\"o\">,},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h_ite</span> <span class=\"n\">at</span> <span class=\"n\">h_norm</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_norm'</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"c1\">-- how do I apply the lambda term to its argument?</span>\n        <span class=\"n\">sorry</span>\n    <span class=\"o\">},</span>\n    <span class=\"c1\">-- split sum into two by value of X i</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.sum_ite</span> <span class=\"n\">at</span> <span class=\"n\">h_norm'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_aux</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">finset.univ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"c1\">-- one of the two sums is zero by sum_eq_zero</span>\n            <span class=\"n\">apply</span> <span class=\"n\">finset.sum_eq_zero</span><span class=\"o\">,</span>\n            <span class=\"n\">tauto</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h_aux</span> <span class=\"n\">at</span> <span class=\"n\">h_norm'</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h_norm'</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- now h_norm' is essentially the goal but needs some massaging</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In words: if the probability mass function of a random variable only takes the values 0 and 1, then it's a Kronecker delta. I'm getting stuck trying to</p>\n<ul>\n<li>\"Curry\" the statement <code>\\forall i, X i = 0 \\or X i = 1</code> into <code>X = \\lambda i, ite (X i = 1) 1 0</code></li>\n<li>Applying a lambda term i.e. showing <code>(\\lambda i, f i) i = f i</code></li>\n</ul>",
        "id": 218824408,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1607083712
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">h_ite</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">}</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 218824594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607083845
    },
    {
        "content": "<p><code>(\\lambda i, f i) i = f i</code> can be proved by <code>refl</code></p>",
        "id": 218824629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607083872
    },
    {
        "content": "<p>(PS we usually indent 2 spaces, not 4)</p>",
        "id": 218824778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607083961
    },
    {
        "content": "<p>I've asked before why some people indent 4 spaces, and I think my conclusion is that they are not using the local VSCode Editor</p>",
        "id": 218825156,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607084249
    },
    {
        "content": "<p>Thank you, that was really helpful! I was missing the <code>ext</code> tactic.</p>",
        "id": 218825272,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1607084336
    },
    {
        "content": "<p>I'm using VSCode, but I guess my global config says an indent is 4 spaces. Will change it locally if that's the preferred style in Lean.</p>",
        "id": 218825312,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1607084376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> whenever I start a new project I always have to change spaces from 4 to 2.</p>",
        "id": 218825595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607084557
    },
    {
        "content": "<p>oh?</p>",
        "id": 218825607,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607084570
    },
    {
        "content": "<p>I have the same behavior</p>",
        "id": 218825666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607084624
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>  <span class=\"c1\">-- this enables the notation</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">variables</span>\n<span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"c1\">-- indexing type</span>\n<span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"c1\">-- tell Lean that the set of all elements ι is finite.</span>\n<span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"c1\">-- and that its elements can be compared for equality</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">rnd_var</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">probs_nonneg</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sum_probs_one</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">delta_if_det</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">rnd_var</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_ite</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">hxi0</span> <span class=\"n\">hxi1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hxi0</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zero_ne_one</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">hxi1</span><span class=\"o\">,</span> <span class=\"n\">hxi1</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_norm</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rnd_var.sum_probs_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h_ite</span> <span class=\"n\">at</span> <span class=\"n\">h_norm</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h_norm</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- split sum into two by value of X i</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_ite</span> <span class=\"n\">at</span> <span class=\"n\">h_norm</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_aux</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sum_const_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h_aux</span> <span class=\"n\">at</span> <span class=\"n\">h_norm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">sum_const</span><span class=\"o\">,</span> <span class=\"n\">nsmul_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_inj</span><span class=\"o\">,</span>\n      <span class=\"n\">card_eq_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_norm</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now h_norm is essentially the goal but needs some massaging</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h_norm</span> <span class=\"k\">with</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">ext_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">if_congr_prop</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">iff.rfl</span> <span class=\"n\">iff.rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">hxi0</span> <span class=\"n\">hxi1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hxi0</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zero_ne_one</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">hxi1</span><span class=\"o\">,</span> <span class=\"n\">hxi1</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218826658,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607085283
    },
    {
        "content": "<p>That works, thanks! So many lemmas I'm still not familiar with...</p>",
        "id": 218830164,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1607087480
    }
]