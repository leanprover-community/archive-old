[
    {
        "content": "<p>I try to formal the Fundamental theorem of algebra. Here it's my work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">fundamental_theorem_of_algebra</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">degree</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"n\">is_root</span> <span class=\"n\">p</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>I would like to declare non-constant polynomial p by using <code>degree p &gt;= 1</code>. But lean demand the condition</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>that I don't understand. Could somebody help me explain it?</p>\n<p>However, I try another formal</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">fundamental_theorem_of_algebra_2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"n\">is_root</span> <span class=\"n\">p</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>and it work, but I wonder if there are a better method to formal a non-constant polynomial?</p>",
        "id": 162610712,
        "sender_full_name": "Mii Nguyen",
        "timestamp": 1554460284
    },
    {
        "content": "<p><code>(H : degree p ≥ 1)</code></p>",
        "id": 162611378,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1554461021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138627\">@Mii Nguyen</span> Are you aware of <a href=\"https://github.com/leanprover-community/mathlib/pull/851\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/851\">https://github.com/leanprover-community/mathlib/pull/851</a>?</p>",
        "id": 162612123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554461815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I didn't update that</p>",
        "id": 162612458,
        "sender_full_name": "Mii Nguyen",
        "timestamp": 1554462143
    },
    {
        "content": "<p>No, it's just that I wondered if you realised that someone else had formalised FTA as well.</p>",
        "id": 162612474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554462178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  No, I didn't realised it. I study this version of FTA now for understand. Thanks for your info.</p>",
        "id": 162612688,
        "sender_full_name": "Mii Nguyen",
        "timestamp": 1554462383
    }
]