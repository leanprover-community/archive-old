[
    {
        "content": "<p>Hi there, I am just making an introductory post. I am a student at University of Toronto doing a computer science and mathematics major, is anyone else from there?</p>\n<p>I maintain a wiki page where I store things that I have proven (usually typeset in latex), but I wanted to try out proving things with this. </p>\n<p>I am completely new to how this works, but I was looking in the library itself and found this: <a href=\"/user_uploads/3121/APIfSk0vej6Wp-Pgx6BnJ4iV/image.png\">image.png</a>  </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/APIfSk0vej6Wp-Pgx6BnJ4iV/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/APIfSk0vej6Wp-Pgx6BnJ4iV/image.png\"></a></div><p>I was wondering where I can read the proof for these theorems.</p>\n<p>Also If I prove something in real life, on pen and paper, could I put it into the library? I guess what is acceptable to go in or not. </p>\n<p>Thanks!</p>",
        "id": 218035959,
        "sender_full_name": "ccn",
        "timestamp": 1606422304
    },
    {
        "content": "<p>You can click on \"source\" on the right, and you'll see a bunch of code which Lean interprets as a proof.</p>",
        "id": 218036009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606422359
    },
    {
        "content": "<p>I've proved a ton of stuff in real life, on pen and paper, and then put it into the library :-) But it took me a while to learn the language.</p>",
        "id": 218036063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606422393
    },
    {
        "content": "<p>Oh that's exciting! </p>\n<p>I just looked at the source </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_lt_sum_fiber_of_maps_to_of_nsmul_lt_sum</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">t.card</span> <span class=\"bp\">•</span><span class=\"n\">ℕ</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">exists_lt_of_sum_lt</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum_fiberwise_of_maps_to</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">sum_const</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and to be honest I don't really know what's happening there yet haha.</p>",
        "id": 218036199,
        "sender_full_name": "ccn",
        "timestamp": 1606422595
    },
    {
        "content": "<p>Anyways, I'll do the tutorials, and see if I can eventually understand that</p>\n<p>Just one last quesiton, I proved this a couple days ago, is this somthing that I could put into it? It's more like a question, but just wanted your opinion:</p>\n<p><a href=\"http://keepaskingwhy.com/mediawiki/index.php/How_many_times\">http://keepaskingwhy.com/mediawiki/index.php/How_many_times</a></p>\n<p>What would this end up looking like in the language (just a description would be fine, would I be using other people's proofs inside of my proof? Or would it be from scratch?)</p>",
        "id": 218036272,
        "sender_full_name": "ccn",
        "timestamp": 1606422658
    },
    {
        "content": "<p>Welcome! I'm a CS grad student at UofT.  Yury Kudryashov is also a Postdoc in Math at UofT, he is a very active contributor to mathlib.</p>",
        "id": 218036275,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606422661
    },
    {
        "content": "<p>Good to know!</p>",
        "id": 218036304,
        "sender_full_name": "ccn",
        "timestamp": 1606422707
    },
    {
        "content": "<p>I don't have anything to say about your proof you linked, but you should definitely try to work through as much of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">TPIL</a> as you can (if you haven't done so). Some of the stuff in the lemma you posted is specific to mathlib (as opposed to core Lean), and beyond the scope of that book, but it will give you most of what you need to start exploring mathlib. It's definitely a learning process!</p>",
        "id": 218036484,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606422865
    },
    {
        "content": "<p>Mathlib tends not to have \"random\" recreational maths problems in. There are some International Maths Olympiad solutions in, but they're not in <code>src</code> where all the e.g. undergrad/MSc maths is. At the minute one of the main focuses is on theory-building, trying to get mathlib into a state where it can at least understand the statements of the main theorems in a generic pure math UG class.</p>",
        "id": 218036577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606422970
    },
    {
        "content": "<p>On the other hand, people make random repos with their solutions to problems, so I could totally imagine you formalising this in Lean and putting it up on github as a repository which has mathlib as a dependency.</p>",
        "id": 218036614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606423030
    },
    {
        "content": "<p>The kind of stuff I've done which has gone into mathlib has been stuff like the theorems I teach to undergraduates or MSc students.</p>",
        "id": 218036630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606423059
    },
    {
        "content": "<p>That makes sense. Is there any interest in creating a more singular source for these \"off-hand\" type math problems. That one is actually useful because it's the number of iterations of a while loop of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">while</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">:</span>\n  <span class=\"n\">x</span>  <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">//</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 218036748,
        "sender_full_name": "ccn",
        "timestamp": 1606423153
    },
    {
        "content": "<p>Oh yeah, another question, is it possible to generate a readable proof (like a proof you would see in a textbook, so it's readable who don't know lean) from a proof in lean?</p>",
        "id": 218036888,
        "sender_full_name": "ccn",
        "timestamp": 1606423308
    },
    {
        "content": "<p>I would imagine that every person who was interested in \"off-hand\" problems would be interested in different problems. There was quite a long debate about whether we should be putting IMO problems into mathlib, and currently they're there but in a directory of their own. These questions are complicated from a maintenance point of view. Mathlib is not backwards compatible and the maintainers can easily merge ten PR's in a day, some of which can break stuff. Feel free to make your own repo though, this is one way that people learn.</p>",
        "id": 218037018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606423433
    },
    {
        "content": "<p>The easiest way to generate a readable proof is of course to learn the language and then you can just read the proof :-) Right now, the easiest way to make a proof human-readable is simply to write what you're doing in comments in your code. There are tools which can then e.g. turn it into a web page like this <a href=\"http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html\">http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html</a> or a game like this <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a> .</p>",
        "id": 218037118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606423534
    },
    {
        "content": "<p>For the sandwich theorem, if you click on a line in the proof you'll see the gobble-de-gook code, but then if you click on a grey rectangle you will be able to see the state Lean's brain at that point, which is often much easier to understand if you have a mathematical background.</p>",
        "id": 218037190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606423608
    },
    {
        "content": "<p>By the way, I run a formalising club on Thursday evenings (i.e. right now, I'm in UK) on Discord where I teach undergraduates the language (and sometimes they teach me, indeed an UG and a PhD student are just showing me how to do a certain integral in Lean)</p>",
        "id": 218037392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606423809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/ccn.20(new.20member)/near/218037118\">said</a>:</p>\n<blockquote>\n<p>The easiest way to generate a readable proof is of course to learn the language and then you can just read the proof :-) Right now, the easiest way to make a proof human-readable is simply to write what you're doing in comments in your code. There are tools which can then e.g. turn it into a web page like this <a href=\"http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html\">http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html</a> or a game like this <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a> .</p>\n</blockquote>\n<p>That's super cool</p>",
        "id": 218037643,
        "sender_full_name": "ccn",
        "timestamp": 1606424100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/ccn.20(new.20member)/near/218037392\">said</a>:</p>\n<blockquote>\n<p>By the way, I run a formalising club on Thursday evenings (i.e. right now, I'm in UK) on Discord where I teach undergraduates the language (and sometimes they teach me, indeed an UG and a PhD student are just showing me how to do a certain integral in Lean)</p>\n</blockquote>\n<p>Can I join it?</p>",
        "id": 218037663,
        "sender_full_name": "ccn",
        "timestamp": 1606424130
    },
    {
        "content": "<p>(was all that text generated from the lean proof? )</p>",
        "id": 218037713,
        "sender_full_name": "ccn",
        "timestamp": 1606424167
    },
    {
        "content": "<p>I'm pretty sure those are basically just nicely formatted comments. No one has written a Lean-to-English machine (yet).</p>",
        "id": 218037991,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606424442
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 218038153,
        "sender_full_name": "ccn",
        "timestamp": 1606424587
    },
    {
        "content": "<p>If you really want to show a particular Lean proof to non-Lean users, you can do some a pretty wide range of things by extending Lean's parser, so that things which Lean can interpret can be made to look pretty similar to something a mathematician can read.</p>",
        "id": 218038265,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606424697
    }
]