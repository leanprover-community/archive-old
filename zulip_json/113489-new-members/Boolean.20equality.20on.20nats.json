[
    {
        "content": "<p>In the Coq standard library, there is a boolean test for equality on the natural numbers <code>n =? m</code> which returns true if <code>n</code> and <code>m</code> are equal and false otherwise. Is there a similar function in Lean?</p>\n<p>On the other hand, I found <code>nat.decidable_eq</code> in the Lean stdlib which I presume is analogous to Coq's <a href=\"https://coq.inria.fr/library/Coq.Bool.Sumbool.html\" target=\"_blank\" title=\"https://coq.inria.fr/library/Coq.Bool.Sumbool.html\">sumbool</a>. In Coq, we can convert it into a boolean by placing it in an if/then/else as follows (assuming <code>eq_dec</code> is our sumbool instance): <code>if eq_dec then true else false</code>. Is there a similar mechanism in Lean?</p>",
        "id": 188801791,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582351481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264734\">Donald Sebastian Leung</span> <a href=\"#narrow/stream/113489-new-members/topic/Boolean.20equality.20on.20nats/near/188801791\" title=\"#narrow/stream/113489-new-members/topic/Boolean.20equality.20on.20nats/near/188801791\">said</a>:</p>\n<blockquote>\n<p>In the Coq standard library, there is a boolean test for equality on the natural numbers <code>n =? m</code> which returns true if <code>n</code> and <code>m</code> are equal and false otherwise. Is there a similar function in Lean?</p>\n<p>On the other hand, I found <code>nat.decidable_eq</code> in the Lean stdlib which I presume is analogous to Coq's <a href=\"https://coq.inria.fr/library/Coq.Bool.Sumbool.html\" target=\"_blank\" title=\"https://coq.inria.fr/library/Coq.Bool.Sumbool.html\">sumbool</a>. In Coq, we can convert it into a boolean by placing it in an if/then/else as follows (assuming <code>eq_dec</code> is our sumbool instance): <code>if eq_dec then true else false</code>. Is there a similar mechanism in Lean?</p>\n</blockquote>\n<p>I skipped to Chapter 10 and found that you could pattern-match on <code>nat.decidable_eq n m</code> (for some <code>n m : ℕ</code>)</p>",
        "id": 188802092,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582351924
    },
    {
        "content": "<p>In Lean, you can use <code>if ... then ... else</code> on <code>decidable</code> <code>Prop</code>s like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">ff</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">foo</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span>\n</pre></div>\n\n\n<p>You can also coerce <code>decidable</code> <code>Prop</code>s to <code>bool</code>s:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo&#39;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo&#39;</span> <span class=\"c1\">-- `to_bool` is inserted</span>\n</pre></div>",
        "id": 188803332,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582353983
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 188803352,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582354075
    }
]