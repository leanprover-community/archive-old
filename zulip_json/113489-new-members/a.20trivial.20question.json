[
    {
        "content": "<p>If I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">...</span>\n<span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>in the context,<br>\nis there any tactic that can change <code>h</code> to <code>h : f x = ...</code>?</p>",
        "id": 243768915,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624532542
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 243769098,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624532697
    },
    {
        "content": "<p>i'd usually go with <code>rw function.funext_iff at hf, specialize hf x</code> but there may be better</p>",
        "id": 243769316,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624532836
    },
    {
        "content": "<p>Any more convenient way? How about change <code>h</code> to <code> \\all y, h y = ...</code>?</p>",
        "id": 243770679,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624533821
    },
    {
        "content": "<p>that's what the <code>rw</code> does</p>",
        "id": 243771069,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624534072
    },
    {
        "content": "<p>usually you dan just <code>rw h</code> into wherever you need it, though</p>",
        "id": 243771147,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624534100
    },
    {
        "content": "<p>The answer to the first question is replace h := congr_fun h x</p>",
        "id": 243778301,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624538273
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/congr_fun\">docs#congr_fun</a></p>",
        "id": 243787366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624542208
    },
    {
        "content": "<p>The answer to the second question is <code>replace h := congr_fun h</code> without the <code>x</code></p>",
        "id": 243787478,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624542244
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sub_one_lt</span> <span class=\"bp\">↑</span><span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Why does this fail ?<br>\nWhat is a convenient way to close this goal?</p>",
        "id": 244056837,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624782906
    },
    {
        "content": "<p>Firstly, it is quite often best to use an explicit type ascription rather than the up arrow, in this case lean doesn't even know what you want <code>↑m</code> to mean which makes the error hard to understand, when we do this instead</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sub_one_lt</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>then the error message is much more readable</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">linear_ordered_ring</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"n\">m</span>\n</code></pre></div>\n<p>Lean is complaining that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sub_one_lt\">docs#sub_one_lt</a> is a theorem about <code>linear_ordered_ring</code>s and that nat isn't such a ring.</p>",
        "id": 244057245,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1624783795
    },
    {
        "content": "<p>Here's one proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.sub_lt_self</span> <span class=\"n\">m_property</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244057362,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1624784016
    },
    {
        "content": "<p>I got a better one.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.sub_lt</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 244058664,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624786426
    }
]