[
    {
        "content": "<p>I am working on the Blog article on constructing the natural numbers <a href=\"https://xenaproject.wordpress.com/2017/10/31/building-the-non-negative-integers-from-scratch/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2017/10/31/building-the-non-negative-integers-from-scratch/\">https://xenaproject.wordpress.com/2017/10/31/building-the-non-negative-integers-from-scratch/</a></p>\n<p>Now I am stuck in one proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">one_add_eq_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">one</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">one</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">Ht</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">add</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I think this scan be solved via succ.inj, but I do not know how to apply this here.</p>",
        "id": 165233857,
        "sender_full_name": "Lukas",
        "timestamp": 1557390610
    },
    {
        "content": "<p><code>injection</code> is the tactic version of <code>apply succ.inj</code></p>",
        "id": 165233876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557390662
    },
    {
        "content": "<p>or <code>cases</code> in some cases</p>",
        "id": 165233894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557390679
    },
    {
        "content": "<p><code>apply succ.inj</code> turns <code>⊢ succ (succ zero + t) = succ (succ t)</code> goal into <code>⊢ succ (succ (succ zero + t)) = succ (succ (succ t))</code> so it does the inverse of what I want to do.</p>\n<p>How can I apply the injection tactic here?</p>",
        "id": 165234313,
        "sender_full_name": "Lukas",
        "timestamp": 1557391199
    },
    {
        "content": "<p>oh, you want <code>congr</code> then</p>",
        "id": 165234497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557391357
    },
    {
        "content": "<p>if you have <code>h : succ a = succ b</code> in the context, <code>injection h</code> will turn it into <code>a = b</code></p>",
        "id": 165234521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557391411
    },
    {
        "content": "<p>but if <code>succ a = succ b</code> is the goal, then you don't need injectivity, that's just functions respecting equality which is <code>congr</code></p>",
        "id": 165234531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557391439
    },
    {
        "content": "<p>After <code>rewrite add</code> you can use the inductive hypothesis <code>Ht</code> -- just <code>rewrite Ht</code>.</p>",
        "id": 165235045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557392000
    },
    {
        "content": "<p>PS any feedback welcome. Over the summer I fully intend to expand that stuff into a more coherent and far-reaching tutorial for mathematicians, covering the naturals, the complexes, and various other ideas I have lying around.</p>",
        "id": 165235369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557392296
    },
    {
        "content": "<p>That should have been obvious...</p>",
        "id": 165235445,
        "sender_full_name": "Lukas",
        "timestamp": 1557392375
    },
    {
        "content": "<p>The Tutorial for the natural numbers is great, but as there are no solutions to the exercise I have to ask many questions.</p>",
        "id": 165235573,
        "sender_full_name": "Lukas",
        "timestamp": 1557392495
    },
    {
        "content": "<p>That's how all of us have learnt Lean</p>",
        "id": 165235636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557392535
    },
    {
        "content": "<p>Except for some magic wizards, who read the source code</p>",
        "id": 165235644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557392545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"207747\">@Lukas</span> I wrote that tutorial and I had no solutions to the exercises either ;-) Some students at Imperial College sent me solutions and I did dump them somewhere on the internet...perhaps in the Xena project github repository (a.k.a. pile of random Lean files which I and some students wrote when we were all complete beginners 18 months ago).</p>",
        "id": 165235735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557392657
    },
    {
        "content": "<p>I just came across another problem. I defined the predicate for even like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">even</span><span class=\"o\">:</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>but I can not figure out a way to test this <code>#check even one</code> does only show the Type prop but not the value. <code>#reduce even zero</code> leads as expected to true, but <code>#reduce even one</code> leads <code>true → false</code> which is false, but this becomes quickly unreadable as <code>#reduce even two</code> is <code>(true → false) → false</code>.</p>",
        "id": 165327533,
        "sender_full_name": "Lukas",
        "timestamp": 1557487041
    },
    {
        "content": "<p>I think I would be tempted to define <code>beven</code> here, a function from <code>xnat</code> to <code>bool</code>, which is defined in Lean as <code>{ff,tt}</code>, and use <code>bnot</code> instead of <code>not</code>. Then you can define <code>even</code> to mean <code>beven n = tt</code></p>",
        "id": 165328327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557487837
    },
    {
        "content": "<p>PS you might have more luck with <code>#eval</code> than <code>#reduce</code>?</p>",
        "id": 165328352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557487872
    },
    {
        "content": "<p>The definition as function from <code>xnat</code> to <code>Prop</code> is taken from the blog article. With bool, bnot the definition works. Now my implementation look like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">beven</span><span class=\"o\">:</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">beven</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">beven</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n</pre></div>\n\n\n<p><code>#reduce zero</code> no gives me <code>tt = tt</code> and <code>#reduce one</code> gives <code>tt = ff</code>.</p>\n<p>I am not yet clear if this is what I should expect. And why is the version returning a Prop better than to bool version?</p>",
        "id": 165329196,
        "sender_full_name": "Lukas",
        "timestamp": 1557488714
    },
    {
        "content": "<p>I guess the author of the blog article was quite incompetent at that time.</p>",
        "id": 165329267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557488765
    },
    {
        "content": "<p>To a mathematician, <code>Prop</code> and <code>bool</code> are difficult to tell apart. In Lean the key difference between them is that they sit in different places in the hierarchy. <code>bool</code> is a type, and <code>Prop</code> is a universe.</p>",
        "id": 165329338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557488832
    },
    {
        "content": "<p>So in type theory, <code>Prop</code> is somehow a lot bigger than <code>bool</code>.</p>",
        "id": 165329350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557488851
    },
    {
        "content": "<p>In type theory, there are universes, and then types in those universe, and then terms in those types. I say \"in\" because that's how I think of it, I guess type theorist would say \"t has type T and T has type u\" or something</p>",
        "id": 165329423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557488896
    },
    {
        "content": "<p>Because they're quite different in the type theory world, they behave quite differently.</p>",
        "id": 165329442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557488925
    },
    {
        "content": "<p>Both both definitions \"work\" and \"give the right answer\". I guess the big question is what you want to do with the definitions.</p>",
        "id": 165329463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557488955
    },
    {
        "content": "<p>Let's stick with the <code>Prop</code> version for now, if the prestigious blog writer thinks that this is a good idea.</p>",
        "id": 165329485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557488987
    },
    {
        "content": "<p>&lt;/sarcasm&gt;</p>",
        "id": 165329490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557488993
    },
    {
        "content": "<p>You can still try and prove that 2 is even</p>",
        "id": 165329540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557489006
    },
    {
        "content": "<p>You've got to prove <code>not not true</code></p>",
        "id": 165329553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557489028
    },
    {
        "content": "<p>and that should be OK, because P implies not not P</p>",
        "id": 165329556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557489040
    },
    {
        "content": "<p>and I can prove <code>true</code>, because that just means constructing a term of type <code>true</code> and I can look at the definition of <code>true</code> to find out what that term is called. Just write <code>#check true</code> and then right click on <code>true</code> and peek at the definition.</p>",
        "id": 165329582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557489082
    },
    {
        "content": "<p>eew that is a rubbish name</p>",
        "id": 165329597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557489111
    },
    {
        "content": "<p>that is a really confusing name</p>",
        "id": 165329602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557489118
    },
    {
        "content": "<p>I think there's a tactic which proves true, called <code>trivial</code> or something</p>",
        "id": 165329666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557489136
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 165413499,
        "sender_full_name": "Maxim Gerspach",
        "timestamp": 1557584023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"207747\">@Lukas</span> your interest made me go back to <a href=\"https://xenaproject.wordpress.com/2017/10/31/building-the-non-negative-integers-from-scratch/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2017/10/31/building-the-non-negative-integers-from-scratch/\">that blog post</a> and think about how I would have done it nowadays. I didn't think about even/odd but I did think about inequalities. Those 4 inequalities at the bottom were <em>terrifically</em> difficult. I didn't really know what I was doing at the time. I just tried various versions of le and lt, and I think that actually this is the best:</p>\n<div class=\"codehilite\"><pre><span></span>def le (a b : xnat) : Prop := ∃ c, a + c = b\n</pre></div>\n\n\n<p>Using this definition of <code>le</code>, it is not too hard to prove <code>le</code> versions of all the inequalities. And conversely, this one was by far the hardest to use:</p>\n<div class=\"codehilite\"><pre><span></span>inductive le : xnat → xnat → Prop\n| refl (a : xnat) : le a a\n| succ (a b : xnat) : le a b → le a (succ b)\n</pre></div>\n\n\n<p>Even proving a &lt;= b implies succ a &lt;= succ b was horrible with this; in the end I proved that this inductive le was the same as the easier-to-use le.</p>",
        "id": 165419614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557593589
    },
    {
        "content": "<p>Another thing I noticed was that manipulating xnat is far more tedious than manipulating nat, because you constantly want stuff which is true but which I didn't prove -- stuff like succ a = succ b -&gt; a = b, or a + b = a -&gt; b = 0; the proofs are all easy, but they are not there.</p>",
        "id": 165420360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557594798
    },
    {
        "content": "<p>I distinctly remember in 2017 firmly believing that every question about le on nat should almost by definition be completely trivial, because how can there even be any content?</p>",
        "id": 165420416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557594849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  maybe you weren't so stupid <a href=\"https://github.com/leanprover/lean4/blob/master/library/init/data/nat/basic.lean#L47\" target=\"_blank\" title=\"https://github.com/leanprover/lean4/blob/master/library/init/data/nat/basic.lean#L47\">https://github.com/leanprover/lean4/blob/master/library/init/data/nat/basic.lean#L47</a></p>",
        "id": 165430160,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557609820
    },
    {
        "content": "<p>I think this version is good for computation</p>",
        "id": 165430209,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557609856
    },
    {
        "content": "<p>not for proofs</p>",
        "id": 165430211,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557609859
    },
    {
        "content": "<p>One thing I learnt today was that my cool inductive predicate idea seems to be the worst of them all</p>",
        "id": 165430216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557609883
    },
    {
        "content": "<p>My attempt at the proof using the inductive definition. Pretty short, but it took me a while to work it out. I also used <code>pred</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">xnat</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">le</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">≤</span><span class=\"err\">&#39;</span> <span class=\"bp\">`</span><span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">le</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">le_succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span><span class=\"err\">&#39;</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">le_of_succ_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span><span class=\"err\">&#39;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span><span class=\"err\">&#39;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">le_succ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">succ_le_succ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span><span class=\"err\">&#39;</span> <span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span><span class=\"err\">&#39;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span><span class=\"err\">&#39;</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"k\">from</span> <span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">le_of_succ_le</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">le_trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span><span class=\"err\">&#39;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span><span class=\"err\">&#39;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span><span class=\"err\">&#39;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">hbc</span> <span class=\"n\">hab</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 165431270,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557611528
    },
    {
        "content": "<p>Nice!</p>",
        "id": 165431371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557611693
    },
    {
        "content": "<p>This does illustrate a difficulty with inductive predicates. They're hard to use when not applied directly to local constants.</p>",
        "id": 165431391,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557611747
    },
    {
        "content": "<p>When you induct you want the fact that <code>succ b</code> has something to do with <code>b</code>, but the computed motives rarely give you that.</p>",
        "id": 165431459,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557611839
    },
    {
        "content": "<p>If I was recursing on equality, it would be completely obvious to do something like the method I chose. Interesting how my intuition for the equality recursor is so much better than other predicates, yet they're not that different.</p>",
        "id": 165431769,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557612273
    },
    {
        "content": "<p>This has changed the way I think about induction.</p>",
        "id": 165431796,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557612335
    },
    {
        "content": "<p>It was my job as your M1F teacher to teach you induction, I'm glad you now understand it better than me ;-)</p>",
        "id": 165431940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557612599
    },
    {
        "content": "<p>After my M1F induction lecture last year, someone came up to me at the end of the lecture and complained that they thought they understood induction when they came into the lecture but now they realised they were completely confused about it ;-)</p>",
        "id": 165431991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557612635
    },
    {
        "content": "<p>It's so obvious now I think about it. If i had <code>succ a = succ b</code>, it's obviously completely useless to try and recurse on that until I have a <code>succ b</code> in my goal. same applies here.</p>",
        "id": 165432004,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557612676
    },
    {
        "content": "<p>What confused them was that I told them that proofs were finite in length by definition but if you think about the proof of P(100) which you get by induction, it looks like \"P(0) is true, therefore P(1) is true, therefore P(2) is true...therefore P(100) is true\", so maybe \"forall n, P(n)\" has infinite length and can't be a proof?</p>",
        "id": 165432008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557612700
    },
    {
        "content": "<p>I guess it does without the axiom of infinity.</p>",
        "id": 165432076,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557612832
    },
    {
        "content": "<p>If you don't say induction is an axiom and instead give that as the explanation, then it is an infinite length proof.</p>",
        "id": 165432148,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557612904
    },
    {
        "content": "<p>This was in my introduction to proof lectures -- I guess you can feel like induction is obvious, and then you start thinking about it that way and then you realise that actually there's more to it than meets the eye.</p>",
        "id": 165432161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557612950
    },
    {
        "content": "<p>There's a lot to it. Have you ever tried to prove <code>eq_of_heq</code> in term mode from axioms? It's really hard.</p>",
        "id": 165432230,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557613056
    },
    {
        "content": "<p>I have never tried doing anything with <code>heq</code>, mostly because I remember you going through a period several months ago where you were continually moaning about it!</p>",
        "id": 165432275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557613112
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nThat definition you gave </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>Is the exact one used in Logic and Proof, chapter 17/18 i believe</p>",
        "id": 165453314,
        "sender_full_name": "matt rice",
        "timestamp": 1557646874
    },
    {
        "content": "<p>I think that the inductive predicate is used in Lean 3 and the definition by cases is used in Lean 4</p>",
        "id": 165453895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557648048
    },
    {
        "content": "<p>So it seems that Lean 4 defines the order and decidable equality on <code>Nat</code> via maps to <code>Bool</code>, but reverts to using the same kind of framework as Lean 3 for <code>Int</code>, <code>list Nat</code> and so on.  Does anyone know why that is?</p>",
        "id": 166084131,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558358512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span> My best guess is that derived Bool equality hasn't been built into inductive types yet. It's pretty ubiquitous, so I'm pretty sure it will be built in eventually.</p>",
        "id": 166213197,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1558473016
    }
]