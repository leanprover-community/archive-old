[
    {
        "content": "<p>Is there a document explaining the meanings of error messages spit out by the mathlib linter that runs once I push to a PR such as here <a href=\"https://github.com/leanprover-community/mathlib/pull/6852/checks?check_run_id=2229251959\">https://github.com/leanprover-community/mathlib/pull/6852/checks?check_run_id=2229251959</a> (and ideally a few baby examples including examples how to salvage them)? Concretely, in my case I run into <br>\n<code>/- UNUSED ARGUMENTS: -/</code> and <code>/- TYPES ARE MISSING INHABITED INSTANCES: -/</code>.</p>",
        "id": 232482790,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1617132277
    },
    {
        "content": "<p>Unused argument is pretty self-explanatory, one definition or lemma has an unused argument. The other is more controversial but a Zulip search will give you many answers.</p>",
        "id": 232484133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617132793
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> UNUSED ARGUMENTS: -/</span>\n<span class=\"c1\">-- category_theory/lifting_properties.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">category_theory.right_lifting_subcat</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 4: (F : D → category_theory.arrow C) -/</span>\n</code></pre></div>",
        "id": 232484198,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617132822
    },
    {
        "content": "<p>That's what it says: the 4th arguments of <code>category_theory.right_lifting_subcat</code>, namely <code>(F : D → category_theory.arrow C)</code> is unused.</p>",
        "id": 232484328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617132862
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">right_lifting_subcat</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>I agree with the linter.</p>",
        "id": 232484484,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617132941
    },
    {
        "content": "<p>Thanks, in retrospect this is indeed obvious to spot.</p>",
        "id": 232484910,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1617133125
    },
    {
        "content": "<p>The context doesn't help: those CI messages are <em>very</em> intimidating.</p>",
        "id": 232484945,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617133149
    },
    {
        "content": "<p>I've been curious about the inhabited linter too. Here's one recent explanation:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/comm_semiring.20structure.20on.20constructible.20subsets/near/222690725\">said</a>:</p>\n<blockquote>\n<p>the <code>inhabited</code>-linter is there to force us to do some basic checks that we are not making stupid definitions. So when you write an instance to make it happy, it's best to try to make the example as \"canonical\" as possible. In other words, even if you can give an example for just <code>X = nat</code>, we encourage you to make it for every <code>X</code>, just like you did.</p>\n</blockquote>",
        "id": 232485792,
        "sender_full_name": "Greg Price",
        "timestamp": 1617133542
    },
    {
        "content": "<p>I'd be glad to have found that in docs somewhere. Would a library note be a good home for that kind of explanation? And then the linter output could include a link to that.</p>",
        "id": 232485986,
        "sender_full_name": "Greg Price",
        "timestamp": 1617133624
    },
    {
        "content": "<p>Meanwhile here's a somewhat different but perhaps complementary explanation:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/lintsprint.206.20Oct/near/212391130\">said</a>:</p>\n<blockquote>\n<p>The idea with the inhabited instances linter was to make sure that we have the obvious instances for <code>inhabited (finset α)</code>, <code>inhabited (α →₀ β)</code>, etc.  (Quite a few were missing, actually.)  You're not expected to add inhabited instances for <code>α ≃ β</code>, etc.</p>\n</blockquote>",
        "id": 232486017,
        "sender_full_name": "Greg Price",
        "timestamp": 1617133640
    },
    {
        "content": "<p>Oh and the latter was followed by:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/lintsprint.206.20Oct/near/212391258\">said</a>:</p>\n<blockquote>\n<p>Some people like the linter because it reminds you to add an example value of your new type.</p>\n</blockquote>\n<p>which I think is a version of the explanation <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> gave that I quoted above.</p>",
        "id": 232486329,
        "sender_full_name": "Greg Price",
        "timestamp": 1617133757
    },
    {
        "content": "<p>I think most of the linting documentation we have at the moment is <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#linting%20commands\">here</a>. We could also expand that to add some motivation for the linters.</p>",
        "id": 232486951,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617134028
    },
    {
        "content": "<p>I also tried to find doc in the linter docstrings before answering and I found them pretty disappointing.</p>",
        "id": 232487242,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617134128
    },
    {
        "content": "<p>Yeah, the docstrings are pretty terse. I think that's fine as long as the good information is handy when you get the linter message printed at you, though -- that seems like the most important time for it to be shown. And if it's colocated in the code, it's almost as good as a docstring for the case when you're actually looking at the linter implementation, too.</p>\n<p>Here's what the instance_priority linter has:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- checks whether an instance that always applies has priority ≥ 1000. -/</span>\n<span class=\"kn\">private</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">instance_priority</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"c1\">-- …</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Certain instances always apply during type-class resolution. For example, the instance</span>\n<span class=\"sd\">`add_comm_group.to_add_group {α} [add_comm_group α] : add_group α` applies to all type-class</span>\n<span class=\"sd\">resolution problems of the form `add_group _`, and type-class inference will then do an</span>\n<span class=\"sd\">exhaustive search to find a commutative group. These instances take a long time to fail.</span>\n<span class=\"sd\">Other instances will only apply if the goal has a certain shape. For example</span>\n<span class=\"sd\">`int.add_group : add_group ℤ` or</span>\n<span class=\"sd\">`add_group.prod {α β} [add_group α] [add_group β] : add_group (α × β)`. Usually these instances</span>\n<span class=\"sd\">will fail quickly, and when they apply, they are almost the desired instance.</span>\n<span class=\"sd\">For this reason, we want the instances of the second type (that only apply in specific cases) to</span>\n<span class=\"sd\">always have higher priority than the instances of the first type (that always apply).</span>\n<span class=\"sd\">See also #1561.</span>\n\n<span class=\"sd\">Therefore, if we create an instance that always applies, we set the priority of these instances to</span>\n<span class=\"sd\">100 (or something similar, which is below the default value of 1000).</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">library_note</span> <span class=\"s2\">\"lower instance priority\"</span>\n\n<span class=\"sd\">/-- A linter object for checking instance priorities of instances that always apply.</span>\n<span class=\"sd\">This is in the default linter set. -/</span>\n<span class=\"kd\">@[linter]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">linter.instance_priority</span> <span class=\"o\">:</span> <span class=\"n\">linter</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"n\">instance_priority</span><span class=\"o\">,</span>\n  <span class=\"n\">no_errors_found</span> <span class=\"o\">:=</span> <span class=\"s2\">\"All instance priorities are good\"</span><span class=\"o\">,</span>\n  <span class=\"n\">errors_found</span> <span class=\"o\">:=</span> <span class=\"s2\">\"DANGEROUS INSTANCE PRIORITIES.</span>\n<span class=\"s2\">The following instances always apply, and therefore should have a priority &lt; 1000.</span>\n<span class=\"s2\">If you don't know what priority to choose, use priority 100.</span>\n<span class=\"s2\">See note [lower instance priority] for instructions to change the priority.\"</span><span class=\"o\">,</span>\n  <span class=\"n\">auto_decls</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 232488418,
        "sender_full_name": "Greg Price",
        "timestamp": 1617134582
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/7803\">#7803</a>, Lint gives the following error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `has_coe_to_fun` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> INVALID/MISSING `has_coe_to_fun` instances.</span>\n<span class=\"cm\">You should add a `has_coe_to_fun` instance for the following types.</span>\n<span class=\"cm\">See Note [function coercion]. -/</span>\n</code></pre></div>\n<p>However, the error is not seen when I write #lint at the end of any of the files involved. Is there a way to work around this? I have multiple ideas to fix the problem, but it will be hard to experiment if each time I need to wait more than 3 hours for Github to build and lint...</p>",
        "id": 245223843,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625683051
    },
    {
        "content": "<p>I can see the error locally if I import <code>import combinatorics.simple_graph.basic</code> in <code>bundle.lean</code> and run <code>#lint</code> at the bottom, I guess its an error that only occurs when both (or all) files are imported.</p>",
        "id": 245230023,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1625685926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Mathlib.20linter/near/245230023\">said</a>:</p>\n<blockquote>\n<p>I can see the error locally if I import <code>import combinatorics.simple_graph.basic</code> in <code>bundle.lean</code> and run <code>#lint</code> at the bottom, I guess its an error that only occurs when both (or all) files are imported.</p>\n</blockquote>\n<p>Ok thanks!!</p>",
        "id": 245230140,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625685969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  actually yesterday I said thanks but I did not try it... I can't see the error the way you say neither the other way around, i.e. importing <code>bundle.lean</code> in <code>combinatorics.simple_graph.basic</code>... what Lint error did you see? it might be another one...</p>",
        "id": 245441802,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625836715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> Sorry I think its the other way around <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> if I import <code>data.bundle</code> in <code>cominatorics/simple_graph/basic.lean</code> then do <code>#lint</code> at the end i see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `has_coe_to_fun` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> INVALID/MISSING `has_coe_to_fun` instances.</span>\n<span class=\"cm\">You should add a `has_coe_to_fun` instance for the following types.</span>\n<span class=\"cm\">See Note [function coercion]. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">simple_graph.locally_finite</span> <span class=\"c\">/-</span><span class=\"cm\"> `has_coe_to_fun` instance is definitionally equal to a transitive instance composed of:</span>\n<span class=\"cm\">  @right_inv.has_coe_to_fun.{u u}</span>\n<span class=\"cm\">    (@bundle.total_space.{u u} V</span>\n<span class=\"cm\">       (λ (v : V),</span>\n<span class=\"cm\">          fintype.{u}</span>\n<span class=\"cm\">            (@coe_sort.{(max (u+1) 1) (max 1 (u+1))+1} (set.{u} V) (@set.has_coe_to_sort.{u} V)</span>\n<span class=\"cm\">               (@simple_graph.neighbor_set.{u} V G v))))</span>\n<span class=\"cm\">    V</span>\n<span class=\"cm\">    (@bundle.proj.{u u} V</span>\n<span class=\"cm\">       (λ (v : V),</span>\n<span class=\"cm\">          fintype.{u}</span>\n<span class=\"cm\">            (@coe_sort.{(max (u+1) 1) (max 1 (u+1))+1} (set.{u} V) (@set.has_coe_to_sort.{u} V)</span>\n<span class=\"cm\">               (@simple_graph.neighbor_set.{u} V G v))))</span>\n<span class=\"cm\">and</span>\n<span class=\"cm\">  @coe_base_aux.{u+1 u+1} (@simple_graph.locally_finite.{u} V G)</span>\n<span class=\"cm\">    (@right_inv.{u u}</span>\n<span class=\"cm\">       (@bundle.total_space.{u u} V</span>\n<span class=\"cm\">          (λ (v : V),</span>\n<span class=\"cm\">             fintype.{u}</span>\n<span class=\"cm\">               (@coe_sort.{(max (u+1) 1) (max 1 (u+1))+1} (set.{u} V) (@set.has_coe_to_sort.{u} V)</span>\n<span class=\"cm\">                  (@simple_graph.neighbor_set.{u} V G v))))</span>\n<span class=\"cm\">       V</span>\n<span class=\"cm\">       (@bundle.proj.{u u} V</span>\n<span class=\"cm\">          (λ (v : V),</span>\n<span class=\"cm\">             fintype.{u}</span>\n<span class=\"cm\">               (@coe_sort.{(max (u+1) 1) (max 1 (u+1))+1} (set.{u} V) (@set.has_coe_to_sort.{u} V)</span>\n<span class=\"cm\">                  (@simple_graph.neighbor_set.{u} V G v)))))</span>\n<span class=\"cm\">    (@bundle_section_to_right_inv.{u u} V</span>\n<span class=\"cm\">       (λ (v : V),</span>\n<span class=\"cm\">          fintype.{u}</span>\n<span class=\"cm\">            (@coe_sort.{(max (u+1) 1) (max 1 (u+1))+1} (set.{u} V) (@set.has_coe_to_sort.{u} V)</span>\n<span class=\"cm\">               (@simple_graph.neighbor_set.{u} V G v)))) -/</span>\n</code></pre></div>",
        "id": 245444454,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1625838045
    }
]