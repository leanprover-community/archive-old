[
    {
        "content": "<p>I'm trying to define an inductive type, of which one of the parameters is a finmap. Like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">):</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_record</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">finmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">),</span><span class=\"n\">ttype</span><span class=\"o\">)):</span> <span class=\"n\">ttype</span>\n</code></pre></div>\n<p>Lean reports <code>inductive type being declared can only be nested inside the parameters of other inductive types</code>. How can I work around this limitation?</p>",
        "id": 231328359,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616426470
    },
    {
        "content": "<p>I tried working around it by defining my own map-like structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">recordmap</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">recordmap</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">recordmap</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">recordmap</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">):</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_record</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">recordmap</span> <span class=\"n\">ttype</span><span class=\"o\">)):</span> <span class=\"n\">ttype</span>\n</code></pre></div>\n<p>However, this errors out with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic.mk_instance</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n  <span class=\"n\">decidable_eq</span> <span class=\"n\">_nest_1_1.ttype</span>\n</code></pre></div>\n<p>I definitely need decidable_eq. How can I fix this problem?</p>",
        "id": 231443452,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616492542
    },
    {
        "content": "<p>Looks like you would need to construct dec eq yourself</p>",
        "id": 231444386,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1616493120
    },
    {
        "content": "<p>Is there a document that details how to do so?</p>",
        "id": 231444732,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616493325
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/init/core.html#decidable_eq\">docs#decidable_eq</a>, and more generally <a href=\"https://leanprover-community.github.io/mathlib_docs/init/core.html#decidable\">docs#decidable</a>. In general, to prove <code>p : Prop</code> is decidable you need to provide a proof either for it or for its negation (as attested by the <code>is_false</code> and <code>is_true</code> constructors of <code>decidable</code>)</p>",
        "id": 231446039,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1616494034
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">recordmap</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">recordmap</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">recordmap</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">recordmap</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">):</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_record</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">recordmap</span> <span class=\"n\">ttype</span><span class=\"o\">)):</span> <span class=\"n\">ttype</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ttype</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ty_func</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>That sort of thing.</p>",
        "id": 231446091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616494072
    },
    {
        "content": "<p>Alright, that's very helpful thanks. Another question: how can I prevent library_search from cheating by importing classical?</p>",
        "id": 231446802,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616494458
    },
    {
        "content": "<p>I'm afraid that mathlib has made a design decision to be resolutely classical and you're not the first person to ask for it to be switched off but it's difficult.</p>",
        "id": 231447088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616494617
    },
    {
        "content": "<p>But I noticed that following (I am not sure whether it's a problem or not) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">recordmap</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">recordmap</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">recordmap</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">recordmap</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">recordmap.decidable_eq</span>\n<span class=\"c1\">-- recordmap.decidable_eq : Π (T : Type u_1) [a : decidable_eq T], decidable_eq (recordmap T)</span>\n<span class=\"c1\">-- only records of type with decidable_eq have decidable_eq</span>\n\n\n<span class=\"c1\">-- @[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"c1\">-- | ty_func (l r:ttype): ttype</span>\n<span class=\"c1\">-- | ty_bool : ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_record</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">recordmap</span> <span class=\"n\">ttype</span><span class=\"o\">)):</span> <span class=\"n\">ttype</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- it seems you need decidable_eq for records of ttype,</span>\n  <span class=\"c1\">-- but for that you need to already know that ttype has decidable_eq, i.e. what we're trying to prove</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">recordmap.decidable_eq</span> <span class=\"n\">ttype</span><span class=\"o\">,</span> <span class=\"c1\">--doesn't work</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is this right?</p>",
        "id": 231447233,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1616494695
    },
    {
        "content": "<p>Why not do induction instead of cases?</p>",
        "id": 231447313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616494748
    },
    {
        "content": "<p>It seems to me that induction should work here</p>",
        "id": 231447569,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616494882
    },
    {
        "content": "<p>but I'm just cheating with classical for now</p>",
        "id": 231447620,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616494918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/finmap.20inside.20an.20inductive.20type/near/231447313\">said</a>:</p>\n<blockquote>\n<p>Why not do induction instead of cases?</p>\n</blockquote>\n<p>Well, it seems that for me it doesn't generate a hypothesis of induction in that case, so it's the same as cases:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">induction</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">ty_record</span> <span class=\"n\">ty_record</span>\n  <span class=\"o\">{</span>\n<span class=\"c1\">--     case ttype.ty_record ttype.ty_record</span>\n<span class=\"c1\">--     ab: recordmap ttype</span>\n<span class=\"c1\">--     ⊢ decidable (ttype.ty_record a = ttype.ty_record b)</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231448912,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1616495617
    },
    {
        "content": "<p>Am I missing the right induction?</p>",
        "id": 231449153,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1616495735
    },
    {
        "content": "<p>Perhaps the problem with your simplification is that your simplified type is empty? Or maybe I'm wrong?</p>",
        "id": 231449393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616495845
    },
    {
        "content": "<p>If you mean that previously I commented out the <code>ty_func</code> and <code>ty_bool</code> cases, I uncommented them before writing the snippet, and it's the same behavior.</p>",
        "id": 231449691,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1616495998
    },
    {
        "content": "<p>I am not an expert on these induction matters, I'm afraid.</p>",
        "id": 231449791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616496031
    },
    {
        "content": "<p>I also noticed that if I try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">):</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_record</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">recordmap</span> <span class=\"n\">ttype</span><span class=\"o\">)):</span> <span class=\"n\">ttype</span>\n</code></pre></div>\n<p>then it fails with \"'ttype' is not an inductive type\", so maybe it has something to do with that.</p>",
        "id": 231450279,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1616496334
    },
    {
        "content": "<p>I think that if you know what you're doing (and I don't) then it should be possible to prove this sort of thing by induction, perhaps with the equation compiler. It seems to me that you want to prove decidable equality of both <code>ttype</code> and <code>recordmap ttype</code> at once. The following failed attempt to prove decidable equality directly indicates this, at least: I'd be done if I also had a proof of decidable eq for the \"simpler\" recordmap terms. But as I say, I don't really know what the tricks are in this area, I'm a mathematician, I only do induction on nats.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_true</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_false</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"n\">generalizing</span> <span class=\"n\">a_v</span> <span class=\"n\">a_tl</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"n\">generalizing</span> <span class=\"n\">a_v</span> <span class=\"n\">a_tl</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_false</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- now we're done if we can decide a_tl = b_tl</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231451670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616497129
    },
    {
        "content": "<p>Ok, I think I understand your point. Thanks for explaining the idea</p>",
        "id": 231460490,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1616502181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329243\">@Horatiu Cheval</span> For these sorts of definitions, I always recommend not using nested inductives and instead rolling your own with a plain inductive type, which supports the correct induction principle</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.basic</span> <span class=\"n\">tactic.cache</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype_or_list</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ttype_or_list</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ttype_or_list</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype_or_list</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_record</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ttype_or_list</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ttype_or_list</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">tyl_nil</span> <span class=\"o\">:</span> <span class=\"n\">ttype_or_list</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">tyl_cons</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ttype_or_list</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">ttype_or_list</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ttype_or_list</span> <span class=\"n\">tt</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ttype</span> <span class=\"o\">:=</span> <span class=\"n\">ttype_or_list</span> <span class=\"n\">ff</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">ttype_or_list</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">al</span> <span class=\"n\">ar</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">ak</span> <span class=\"n\">av</span> <span class=\"n\">al</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">ty_func</span> <span class=\"n\">ty_func</span> <span class=\"o\">:</span> <span class=\"n\">bl</span> <span class=\"n\">br</span> <span class=\"o\">{</span> <span class=\"n\">exactI</span> <span class=\"n\">decidable_of_iff'</span> <span class=\"o\">(</span><span class=\"n\">al</span> <span class=\"bp\">=</span> <span class=\"n\">bl</span> <span class=\"bp\">∧</span> <span class=\"n\">ar</span> <span class=\"bp\">=</span> <span class=\"n\">br</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">ty_bool</span> <span class=\"n\">ty_bool</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">decidable.is_true</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">ty_record</span> <span class=\"n\">ty_record</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"o\">{</span> <span class=\"n\">exactI</span> <span class=\"n\">decidable_of_iff'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">tyl_nil</span> <span class=\"n\">tyl_nil</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">decidable.is_true</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">tyl_cons</span> <span class=\"n\">tyl_cons</span> <span class=\"o\">:</span> <span class=\"n\">bk</span> <span class=\"n\">bv</span> <span class=\"n\">bl</span> <span class=\"o\">{</span>\n    <span class=\"n\">exactI</span> <span class=\"n\">decidable_of_iff'</span> <span class=\"o\">(</span><span class=\"n\">ak</span> <span class=\"bp\">=</span> <span class=\"n\">bk</span> <span class=\"bp\">∧</span> <span class=\"n\">av</span> <span class=\"bp\">=</span> <span class=\"n\">bv</span> <span class=\"bp\">∧</span> <span class=\"n\">al</span> <span class=\"bp\">=</span> <span class=\"n\">bl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">decidable.is_false</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ttype</span> <span class=\"o\">:=</span> <span class=\"n\">ttype_or_list.decidable_eq</span>\n</code></pre></div>",
        "id": 231558653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616541430
    },
    {
        "content": "<p>Thanks for working out the example. Though the initial question was asked by <span class=\"user-mention\" data-user-id=\"379013\">@Guilherme Espada</span>, it will certainly be, for me too, a good future reference on how to rearrange nested inductives</p>",
        "id": 231683861,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1616610016
    }
]