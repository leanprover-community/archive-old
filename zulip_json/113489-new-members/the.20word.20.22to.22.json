[
    {
        "content": "<p>it is annoying that naming your variable \"to\" works fine, until one happens to import something that recursively depends on <code>tactic.lift</code>, in which the word \"to\" is declared to be reserved notation</p>",
        "id": 219368133,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607534389
    },
    {
        "content": "<p>maybe don't name your variable <code>to</code> then</p>",
        "id": 219368260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607534433
    },
    {
        "content": "<p>yeah now i know, this has been an enlightening experience chasing down why adding one more import causes a parse failure in unrelated code</p>",
        "id": 219368337,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607534477
    },
    {
        "content": "<p>declaring a word as a token is a pretty big step, because it means no one is allowed to ever use it as a variable. This is a user facing design choice</p>",
        "id": 219368367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607534492
    },
    {
        "content": "<p>probably we should coalesce all token declarations in mathlib in one file that gets imported universally, like <code>tactic.core</code> or something</p>",
        "id": 219368533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607534552
    },
    {
        "content": "<p>it's just weird that I could make file A import file B, and that breaks a totally unrelated file C, because C happens to have a long dependency chain on A, and it uses the word \"to\"</p>",
        "id": 219368608,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607534584
    },
    {
        "content": "<p>it's not that it uses the word to, it is that the file declares that <code>to</code> is now a keyword</p>",
        "id": 219368674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607534612
    },
    {
        "content": "<p>I mean that file C uses the word \"to\" as a variable name, an allegedly permitted maneuver</p>",
        "id": 219368729,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607534638
    },
    {
        "content": "<p>C has the same issue when they declare new keywords</p>",
        "id": 219368800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607534654
    },
    {
        "content": "<p>There is a reason all the new keywords are weird things like <code>co_await</code> and <code>reflexpr</code></p>",
        "id": 219368869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607534689
    },
    {
        "content": "<p>that usually happens when you push a new version of the language, though, not when someone adds <code>import data.list.basic</code> to some random library</p>",
        "id": 219368883,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607534697
    },
    {
        "content": "<p>That's due to the extensible syntax design of lean</p>",
        "id": 219368935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607534720
    },
    {
        "content": "<p>anyway i just wanted to vent. thank you for feeling my pain. i'll go rename this stupid variable now</p>",
        "id": 219368965,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607534736
    },
    {
        "content": "<p>it means libraries can literally extend the language in the same way as a new C version. This is huge for mathlib, we make extensive use of this capability</p>",
        "id": 219368994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607534753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> I understand your pain. Do you think Marios suggestion would help?</p>",
        "id": 219369007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607534758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/the.20word.20.22to.22/near/219368533\">said</a>:</p>\n<blockquote>\n<p>probably we should coalesce all token declarations in mathlib in one file that gets imported universally, like <code>tactic.core</code> or something</p>\n</blockquote>\n<p>I mean <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span></p>",
        "id": 219369069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607534768
    },
    {
        "content": "<p>I don't really understand why this breaks, honestly, so I hesitate to support any particular solution</p>",
        "id": 219369117,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607534788
    },
    {
        "content": "<p>I did not know about the <code>reserve notation</code> command until I discovered it was lurking in the weeds biting my ankle</p>",
        "id": 219369159,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607534807
    },
    {
        "content": "<p>That's because you probably never thought to name a variable <code>generalizing</code></p>",
        "id": 219369206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607534828
    },
    {
        "content": "<p>or <code>using</code></p>",
        "id": 219369217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607534833
    },
    {
        "content": "<p>or <code>at</code></p>",
        "id": 219369223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607534837
    },
    {
        "content": "<p>really any keywordy word that gets used in tactics</p>",
        "id": 219369274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607534864
    },
    {
        "content": "<p><code>ring</code> implements a trick to allow it to recognize <code>ring raw</code> / <code>ring SOP</code> / <code>ring horner</code> without making those keywords</p>",
        "id": 219369419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607534924
    },
    {
        "content": "<p>Alternatively, we could change the preposition that <code>lift</code> uses</p>",
        "id": 219369790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607535100
    },
    {
        "content": "<p>there is a reason we reuse the same 3-4 words all over the place in tactic parsers</p>",
        "id": 219369881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607535125
    },
    {
        "content": "<p>how about <code>lift x as int</code>?</p>",
        "id": 219370086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607535237
    },
    {
        "content": "<p>Isn't <code>as</code> much more commonly used, e.g. in lists <code>a :: as</code>?</p>",
        "id": 219370214,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607535281
    },
    {
        "content": "<p>Right now I guess it's not a keyword, but I believe it used to be and at least some syntax highlighters think it still is</p>",
        "id": 219370336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607535336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/the.20word.20.22to.22/near/219368533\">said</a>:</p>\n<blockquote>\n<p>probably we should coalesce all token declarations in mathlib in one file that gets imported universally, like <code>tactic.core</code> or something</p>\n</blockquote>\n<p>I think this is a good idea and we don't need to change <code>lift</code>. As long as the variable <code>to</code> gets rejected immediately and not by some transitive import, it's not a big problem.</p>",
        "id": 219370630,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1607535474
    },
    {
        "content": "<p>can we get a style linter for this?</p>",
        "id": 219370843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607535568
    },
    {
        "content": "<p>I think it is as simple as grepping for <code>reserve</code> or <code>precedence</code> at the start of a line</p>",
        "id": 219371037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607535653
    },
    {
        "content": "<p>I can work on a style linter for this when I get a chance.</p>",
        "id": 219372543,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607536388
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5330\">#5330</a></p>",
        "id": 219691669,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607751311
    }
]