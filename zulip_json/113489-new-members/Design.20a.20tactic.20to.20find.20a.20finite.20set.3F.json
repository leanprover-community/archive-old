[
    {
        "content": "<p>Sorry the title is very unclear -- I would very much like lean to be able to automatically solve a goal of the following form (a contrived M(N)WE).</p>\n<p>In words:  with <code>fin</code> sets, define the orbit of a point under a function. Then have Lean/mathlib automatically deduce that some other point belongs to the orbit. For a mathematician, this means starting from the singleton {point} and applying repeatedly the function till the orbit doesn't increase; then check whether the other point belongs to that set.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.log</span>\n<span class=\"c1\">-- to have ⋂₀. Certainly not the minimal import, but what's in my current code</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">orbit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">⋂₀</span><span class=\"o\">{</span><span class=\"n\">O</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">O</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">O</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">∈</span><span class=\"n\">O</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reaches</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"bp\">∈</span><span class=\"o\">(</span><span class=\"n\">orbit</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myf</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">wow</span> <span class=\"o\">:</span> <span class=\"n\">reaches</span> <span class=\"n\">myf</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"c1\">-- ideally, this would be \"by mysimp\" or \"by simp[mymethod]\"</span>\n    <span class=\"n\">intros</span> <span class=\"n\">O</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">O</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">O</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">O</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">wow2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">reaches</span> <span class=\"n\">myf</span> <span class=\"mi\">0</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 277670078,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1649032358
    },
    {
        "content": "<p>If all you care is the case in which <code>X</code> is <code>fin n</code> for some concrete <code>n</code>, like in your example where <code>n = 4</code>, then <code>dec_trivial</code> should be able to help.</p>\n<p>However, though I might be wrong, your definition of <code>orbit</code> is \"too abstract\".  Something like <code>∃ a : fin n, f^[a] x = y</code> might work better.</p>\n<p>Note that the existential is over a <code>fin</code>, (in this case, the same <code>fin n</code> where <code>x y</code> also live is enough).</p>",
        "id": 277680216,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649046046
    },
    {
        "content": "<p>When I said \"too abstract\" I meant \"too abstract for <code>dec_trivial</code> to help\".  Of course, yours is perfectly valid!</p>",
        "id": 277680247,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649046109
    },
    {
        "content": "<p>With the quantification that I propose, the problem is clearly \"finite\".</p>",
        "id": 277680306,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649046176
    },
    {
        "content": "<p>For instance, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fin_orbit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fin_reaches</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">fin_orbit</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myf</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">wow</span> <span class=\"o\">:</span> <span class=\"n\">fin_reaches</span> <span class=\"n\">myf</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fin_reaches</span> <span class=\"n\">myf</span> <span class=\"n\">fin_orbit</span><span class=\"o\">,</span>\n  <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">wow2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">fin_reaches</span> <span class=\"n\">myf</span> <span class=\"mi\">0</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fin_reaches</span> <span class=\"n\">myf</span> <span class=\"n\">fin_orbit</span><span class=\"o\">,</span>\n  <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277685613,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649052254
    },
    {
        "content": "<p>On the side, you would have to prove something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fin_orbit_eq_orbit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin_orbit</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">orbit</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>to convert your definition of <code>orbit</code> into the <code>fin_orbit</code> that works with <code>dec_trivial</code>.</p>",
        "id": 277685657,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649052343
    },
    {
        "content": "<p>fin_orbit is related to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.cycle_of\">docs#equiv.perm.cycle_of</a></p>",
        "id": 277725312,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1649076400
    },
    {
        "content": "<p>Thanks for all the feedback! However, I should have stated that this is really a MWE.</p>\n<p>In my \"real-life\" situation, I'm not interating a map such as <code>myf</code>, but really a map on sets (or at least a map <code>X\\times Y\\to X</code>, treated as a collection of <code>Y</code> maps whose global orbit I am interested in.</p>\n<p>In the cases I have in mind, I don't think I can avoid quantifying over a subset. However, as in <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>'s suggested answer, I can bound the number of iterations till the set stabilizes by <code>#X</code>.</p>",
        "id": 277750783,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1649087106
    },
    {
        "content": "<p>I think whatever you are asking for is certainly possible as a tactic, provided lean has a way to normalize applications of the function you want the orbit of. This could either be through carefully chosen simp lemmas, or the function itself could be computable.<br>\nThe first step of building most tactics though should be to produce a few proofs that do exactly what you want the tactic to do, in a rigid style so its clear exactly what the tactic will and will not do when it is called.<br>\nThen sometimes it becomes clear that the tactic is a combination of existing things such as <code>norm_num</code> and maybe some carefully chosen <code>repeat</code> and <code>try</code> statements, or it may be complicated enough that an actual procedure needs to be written in the tactic monad.</p>",
        "id": 277752037,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1649087595
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> ! I think what I really would like is the automatic computation of the orbits of semigroups acting on <code>fin n</code>. Here's a more detailed example (which however I haven't been able to complete cleanly, still lots of sorries): that of a 2-generated semigroup acting on <code>fin 4</code>, consisting of the two constant maps 0 and 2. (of course this is just for testing purposes). Prove that 0 is reachable from 3, by proving that the orbit of 3 is {0,2,3}.</p>\n<p>The way a human would do it is start by {3} and keep applying all generators to enlarge the set; when it doesn't enlarge anymore, we found the orbit.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.log</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">orbit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">⋂₀</span><span class=\"o\">{</span><span class=\"n\">O</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">O</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">O</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">O</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reaches</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"bp\">∈</span><span class=\"o\">(</span><span class=\"n\">orbit</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myf</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">start</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">orbit</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">hO</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.eq_of_mem_singleton</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hO.1</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">extend</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">O</span> <span class=\"bp\">⊆</span> <span class=\"n\">orbit</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"bp\">∪</span> <span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">O</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">orbit</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x'</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">set.mem_Union</span> <span class=\"n\">at</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">k_h</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foundorbit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">O</span> <span class=\"bp\">⊆</span> <span class=\"n\">orbit</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">O</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">''</span> <span class=\"n\">O</span> <span class=\"bp\">⊆</span> <span class=\"n\">O</span> <span class=\"bp\">→</span> <span class=\"n\">O</span> <span class=\"bp\">=</span> <span class=\"n\">orbit</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">myf_orbit3</span> <span class=\"o\">:</span> <span class=\"n\">orbit</span> <span class=\"n\">myf</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">iter1</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"bp\">⊆</span> <span class=\"n\">orbit</span> <span class=\"n\">myf</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">start</span> <span class=\"n\">myf</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">iter2</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"bp\">⊆</span> <span class=\"n\">orbit</span> <span class=\"n\">myf</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">temp</span> <span class=\"o\">:=</span> <span class=\"n\">extend</span> <span class=\"n\">myf</span> <span class=\"mi\">3</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"n\">iter1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">myf</span> <span class=\"n\">at</span> <span class=\"n\">temp</span><span class=\"o\">,</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">iter3</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"bp\">⊆</span> <span class=\"n\">orbit</span> <span class=\"n\">myf</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">extend</span> <span class=\"n\">myf</span> <span class=\"mi\">3</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"n\">iter2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">foundorbit</span> <span class=\"n\">myf</span> <span class=\"mi\">3</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"n\">iter3</span> <span class=\"n\">iter1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">wow</span> <span class=\"o\">:</span> <span class=\"n\">reaches</span> <span class=\"n\">myf</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">reaches</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">myf_orbit3</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 277920054,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1649181885
    }
]