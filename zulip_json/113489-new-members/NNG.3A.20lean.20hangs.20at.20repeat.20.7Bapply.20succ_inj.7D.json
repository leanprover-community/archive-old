[
    {
        "content": "<p><a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=8&amp;level=2\">world 8 level 2</a> can be solved by </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">succ_inj</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">succ_inj</span><span class=\"o\">,</span>\n<span class=\"n\">assumption</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>but when I try </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">succ_inj</span><span class=\"o\">},</span>\n</code></pre></div>\n<p>it shows \"Lean is busy....\" indefinitely.</p>",
        "id": 270933395,
        "sender_full_name": "Matt Yan",
        "timestamp": 1644210562
    },
    {
        "content": "<p>Whenever your goal is an equality of two natural numbers, you can <code>apply succ_inj</code> applies and it will produce another goal that is an equality of two numbers. Since <code>repeat</code> continues until the given tactic fails for the first time, <code>repeat { apply succ_inj }</code> will just keep applying <code>succ_inj</code> until the end of time.</p>",
        "id": 270935742,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1644212972
    },
    {
        "content": "<p>You could try something like <code>repeat { apply succ_inj, try { assumption } }</code></p>",
        "id": 270936024,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1644213346
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 270938187,
        "sender_full_name": "Matt Yan",
        "timestamp": 1644215832
    }
]