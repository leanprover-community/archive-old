[
    {
        "content": "<p>Hello everyone, I recently started working with Lean and I wanted to formalize some notions I've been working on<br>\nfor the past Month. But I'm stuck with a step, which should be solved with <code>exists.elim</code> I think,  but doesn't seem to work:<br>\na MWE I can come up with would be something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">xd</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">exists.elim</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>where the intention would be to prove it by constructing the a singleton set. <br>\nShouldn't that tactic give <code>x : C</code>, and <code>h: x = x</code> ? Or what am I missing? Instead, when<br>\nI hover, I ger \"don't know how yo synthesize placeholder\".</p>\n<p>Thanks and sorry for the noobie question.</p>",
        "id": 249941375,
        "sender_full_name": "Lucas Polymeris",
        "timestamp": 1629347848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433869\">@Lucas Polymeris</span> Welcome. One way to deal with existentials is using the <code>cases</code> tactic. So you can write <code>cases h with x hx,</code> and this will decompose <code>h</code> into a witness <code>x : C</code> with property <code>hx : x = x</code>.</p>",
        "id": 249941553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629348058
    },
    {
        "content": "<p>If you're using mathlib, you can also write <code>obtain ⟨x, hx⟩ := h</code> which is sometimes more readable than cases.</p>",
        "id": 249941574,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629348103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Oh, thanks. I think I didn't see that when reading about existential quantifier. Any hint on why doesn't<br>\n<code>exists.elim</code> work?</p>",
        "id": 249942684,
        "sender_full_name": "Lucas Polymeris",
        "timestamp": 1629349666
    },
    {
        "content": "<p>One thing is that <code>exists.elim</code> is not a tactic.  Each statement in a <code>begin ... end</code> block needs to be a tactic -- Lean will be looking for <code>tactic.interactive.exists.elim</code>, which isn't what you want.</p>",
        "id": 249943083,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629350204
    },
    {
        "content": "<p>If you want to use <code>exists.elim</code>, this is one way to proceed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">xd</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exists.elim</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249943096,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629350277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Oh I see, thanks. I wasn't aware of that.</p>",
        "id": 249943404,
        "sender_full_name": "Lucas Polymeris",
        "timestamp": 1629350691
    },
    {
        "content": "<p>You can also write terms directly if you don't use a <code>begin ... end</code> block, i.e.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">xd</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span>\n<span class=\"n\">exists.elim</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 249943602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629350888
    },
    {
        "content": "<p>which is what the tactics mentioned so far are doing under the hood</p>",
        "id": 249943610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629350912
    }
]