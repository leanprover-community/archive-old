[
    {
        "content": "<p>I just encountered a funny problem with (I think) decidability instances in an <code>ite</code> expression. Here's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">q</span><span class=\"o\">]:</span>\n  <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>     <span class=\"c1\">-- first stage of proof proves p</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">and_iff_right</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"c1\">-- new goal is : ⊢ ite q a b = a</span>\n  <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>     <span class=\"c1\">-- second stage of proof proves q</span>\n  <span class=\"c1\">--rw if_pos hq,</span>\n    <span class=\"c1\">-- rewrite tactic failed, did not find</span>\n    <span class=\"c1\">-- instance of the pattern in the target</span>\n    <span class=\"c1\">-- expression</span>\n    <span class=\"c1\">--   ite q ?m_2 ?m_3</span>\n    <span class=\"c1\">-- goal was:</span>\n    <span class=\"c1\">--   ⊢ ite q a b = a</span>\n  <span class=\"n\">rw</span> <span class=\"n\">if_pos</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"c1\">-- works!</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Clicking on <code>ite q a b</code> in the infoview shows that the decidability instance for the <code>q</code> is <code>eq.rec and.decidable _</code> (with <code>propext (and_iff_right hp)</code> deeper inside there). Whereas a plain <code>ite q a b</code> would just use the given decidability instance for <code>q</code>. In fact even <code>change ite q a b = a</code> fails (\"not definitionally equal\").</p>\n<p>So somehow the <code>simp_rw</code> line is simplifying <code>p ∧ q</code> to <code>q</code> but making the decidability instance more complicated.</p>\n<p>I don't know much about how <code>simp_rw</code> works. I guess I could just not do that line. But in my actual context, it is very convenient to simplify the <code>ite</code> expression in place after I get <code>hp : p</code>.</p>",
        "id": 273929576,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1646289433
    },
    {
        "content": "<p>You're missing some imports still</p>",
        "id": 273936812,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1646295232
    },
    {
        "content": "<p>Ah, sorry - fixed.</p>",
        "id": 273937321,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1646295550
    },
    {
        "content": "<p>Probably <code>convert if_pos hq</code> works in this case</p>",
        "id": 273938436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646296144
    },
    {
        "content": "<p>Hmmm. It works in the mwe but not in the original context. I tried a few other <code>convert</code>/<code>refine</code> commands and didn't succeed.</p>",
        "id": 273939608,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1646296684
    },
    {
        "content": "<p>Just found this thread which is helpful too: <a href=\"#narrow/stream/113489-new-members/topic/Rewrite.20condition.20in.20.60ite.60.3F\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Rewrite.20condition.20in.20.60ite.60.3F</a>.</p>\n<p>I'll try the <code>split_ifs</code> tactic tomorrow. Though, it would be nice to be able to rewrite in the conditional of an <code>ite</code> (just like rewriting anywhere else).</p>",
        "id": 273939875,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1646296805
    },
    {
        "content": "<p>(and I'll see if I can figure out why my larger example doesn't work)</p>",
        "id": 273939941,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1646296838
    },
    {
        "content": "<p>Yeah your error is a bit terrifying. I guess another possibility in your case is not to mess with p \\and q until you've got the proofs of both p and q and then use if_pos without ever simping</p>",
        "id": 273940199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646296955
    },
    {
        "content": "<p>Followup - having the goal be <code>ite (p ∧ q) a b ≤ c</code> (instead of <code>= c</code>) makes <code>convert if_pos q</code> no longer work.</p>\n<p>Also, replacing the <code>simp_rw</code> line by <code>simp [hp]</code> actually works! ... I should look at what the simp is doing.</p>",
        "id": 274029856,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1646337355
    },
    {
        "content": "<p>Aha! <code>if_congr</code> does this correctly. This seems like the intended way to rewrite in an <code>ite</code> conditional, actually. I wonder why <code>simp_rw</code> wasn't using it but <code>simp</code> was.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">q</span><span class=\"o\">]:</span>\n  <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>     <span class=\"c1\">-- first stage of proof proves p</span>\n  <span class=\"n\">rw</span> <span class=\"n\">if_congr</span> <span class=\"o\">(</span><span class=\"n\">and_iff_right</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>     <span class=\"c1\">-- second stage of proof proves q</span>\n  <span class=\"n\">rw</span> <span class=\"n\">if_pos</span> <span class=\"n\">hq</span><span class=\"o\">,</span>             <span class=\"c1\">-- works!</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 274030258,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1646337513
    },
    {
        "content": "<p>Though, <code>if_congr</code> still doesn't seem to correctly infer the decidability instance...</p>",
        "id": 274032751,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1646338449
    },
    {
        "content": "<p>I thought there was something like <code>if_pos'</code> that uses <code>{}</code> brackets for the decidability instance--did it not actually get added?</p>",
        "id": 274032935,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646338541
    },
    {
        "content": "<p>It also looks like you should be able to <code>simp_rw</code> the condition to <code>true</code> and then use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/if_true\">docs#if_true</a> which doesn't care about the instance</p>",
        "id": 274033049,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646338583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391579\">Jake Levinson</span> <a href=\"#narrow/stream/113489-new-members/topic/ite.20and.20decidability.20instances/near/274029856\">said</a>:</p>\n<blockquote>\n<p>Followup - having the goal be <code>ite (p ∧ q) a b ≤ c</code> (instead of <code>= c</code>) makes <code>convert if_pos q</code> no longer work.</p>\n<p>Also, replacing the <code>simp_rw</code> line by <code>simp [hp]</code> actually works! ... I should look at what the simp is doing.</p>\n</blockquote>\n<p>You should use <code>convert (if_pos q).le</code> (although I guess your hypothesis <code>q</code> is not called <code>q</code> again). The goal is an inequality and you tried to provide an equality.</p>",
        "id": 274033497,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646338787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> aha, <code>simp_rw [hq, if_true]</code> seems to work nicely.</p>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Hmm, when I try <code>convert (if_pos hq).le</code> the goal becomes <code>c = a</code> rather than <code>a ≤ c</code>. Something pattern-matching incorrectly?</p>",
        "id": 274044270,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1646343604
    },
    {
        "content": "<p>No, that's expected. I thought you wanted to reach that state.</p>",
        "id": 274044457,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646343714
    },
    {
        "content": "<p>If you want to reach <code>a ≤ c</code> instead,  try <code>convert (if_pos hq).trans_le _</code>.</p>",
        "id": 274044560,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646343761
    },
    {
        "content": "<p>Great, this all seems to work. Thanks!</p>",
        "id": 274055402,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1646349559
    }
]