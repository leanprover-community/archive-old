[
    {
        "content": "<p>I am trying to make a set of classes that inherit from each other with the final one being inductive so cannot be defined as a normal class. I have already asked about this in the \"dependent and\" thread but I have since updated this so that the base class <code>similar</code> contains data. This did not cause any issues to <code>shared</code> as lean was able to figure out that I was using the same equivalence for the occurrences of <code>similar</code> but it is causing problems from <code>impartial</code> as I need to add an instance definition to be able to talk about things which depend on the other two definitions but then when I want to prove things I also need to show that two instances are the same:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">similar</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">similar_moves</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">left_moves</span> <span class=\"err\">≃</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">right_moves</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- This one can figure out it is similar by itself</span>\n<span class=\"n\">class</span> <span class=\"n\">shared</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">similar</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">shared_moves</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">moves</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">i</span> <span class=\"bp\">≈</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- This is the class which is causing problems</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">impartial</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"err\">Σ</span> <span class=\"o\">[</span><span class=\"n\">shared</span> <span class=\"n\">G</span><span class=\"o\">],</span>\n            <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">moves</span><span class=\"o\">,</span> <span class=\"n\">impartial</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">pgame</span><span class=\"bp\">.</span><span class=\"n\">pgame_wf_tac</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- This definition is required so that the next lemma compiles</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">impartial_shared</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">impartial</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">shared</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">unfold1</span> <span class=\"n\">impartial</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- This gets an error at &quot;exact h₂ i&quot; saying &quot;(@move G h₁ i).impartial&quot; and &quot;(@move G (@impartial_shared G h) i)&quot; are not the same</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">impartial_move_impartial</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">impartial</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">moves</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">impartial</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">unfold1</span> <span class=\"n\">impartial</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">casesI</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"n\">i</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Ideally I would like to be able to write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">impartial</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">shared</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">impartial_moves</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">moves</span><span class=\"o\">,</span> <span class=\"n\">impartial</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>But I don't think there is any support for inductive class definitions.</p>",
        "id": 203954898,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1594819727
    },
    {
        "content": "<p>I would start by getting rid of all the <code>class</code>es</p>",
        "id": 203955897,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594820281
    },
    {
        "content": "<p>How come, they seemed to be making a lot of things easier.</p>",
        "id": 203956269,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1594820459
    },
    {
        "content": "<p>Well, clearly they aren't making this easier, right?</p>",
        "id": 203956447,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594820530
    },
    {
        "content": "<p>In my experience classes are a convenience when they work well, and a nightmare when they don't. I'd at least try to express what you want without classes first, and then maybe consider using classes after that.</p>",
        "id": 203956574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594820613
    },
    {
        "content": "<p>I will have a go, thank you!</p>",
        "id": 203957197,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1594820897
    },
    {
        "content": "<p>but really I think it's just better to aim for <code>(G : impartial_pgame)</code> than <code>(G : pgame) [impartial G]</code>, anyways</p>",
        "id": 203959258,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594821871
    },
    {
        "content": "<p>and then you might decide that an <code>impartial_pgame</code> doesn't really need to contain a <code>pgame</code> after all</p>",
        "id": 203959288,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594821889
    }
]