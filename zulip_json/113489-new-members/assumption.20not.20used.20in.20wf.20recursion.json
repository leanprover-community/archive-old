[
    {
        "content": "<p>I hit a problem I dont't understand and don't know how to solve ina  well founded recursion. The code is the following, the definition that doesn't work is the <code>recursor</code> case in the <code>substitute</code> function.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">recursor</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">term</span>\n  <span class=\"kd\">@[simp]</span>\n  <span class=\"kd\">def</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t.size</span> <span class=\"bp\">+</span> <span class=\"n\">u.size</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">recursor</span> <span class=\"n\">n</span> <span class=\"n\">t₀</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n.size</span> <span class=\"bp\">+</span> <span class=\"n\">t₀.size</span> <span class=\"bp\">+</span> <span class=\"n\">t.size</span>\n\n  <span class=\"kd\">@[simp]</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">size_pos_iff_true</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t.size</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">substitute</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">t.substitute</span> <span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u.substitute</span> <span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">recursor</span> <span class=\"n\">n</span> <span class=\"n\">t₀</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n.size</span> <span class=\"bp\">+</span> <span class=\"n\">t₀.size</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">n.size</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n.size</span> <span class=\"bp\">+</span> <span class=\"n\">t₀.size</span> <span class=\"bp\">+</span> <span class=\"n\">t.size</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">t₀.size</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n.size</span> <span class=\"bp\">+</span> <span class=\"n\">t₀.size</span> <span class=\"bp\">+</span> <span class=\"n\">t.size</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">recursor</span> <span class=\"o\">(</span><span class=\"n\">n.substitute</span> <span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₀.substitute</span> <span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t.substitute</span> <span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">term.size</span> <span class=\"n\">x.1</span><span class=\"o\">)⟩]}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>I basically just added all goals Lean required me to prove for showing the application is decreasing as hypothesis, and then I am stuck with proof states like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    failed to prove recursive application is decreasing, well founded relation</span>\n<span class=\"cm\">      @has_well_founded.r (Σ' (ᾰ : term) (ᾰ : string), term)</span>\n<span class=\"cm\">        (@has_well_founded.mk (Σ' (ᾰ : term) (ᾰ : string), term)</span>\n<span class=\"cm\">           (@measure (Σ' (ᾰ : term) (ᾰ : string), term) (λ (x : Σ' (ᾰ : term) (ᾰ : string), term), x.fst.size))</span>\n<span class=\"cm\">           _)</span>\n<span class=\"cm\">    The nested exception contains the failure state for the decreasing tactic.</span>\n<span class=\"cm\">    nested exception message:</span>\n<span class=\"cm\">    default_dec_tac failed</span>\n<span class=\"cm\">    state:</span>\n<span class=\"cm\">    substitute : (Σ' (ᾰ : term) (ᾰ : string), term) → term,</span>\n<span class=\"cm\">    n t₀ t : term,</span>\n<span class=\"cm\">    y : string,</span>\n<span class=\"cm\">    s : term,</span>\n<span class=\"cm\">    h₁ : 0 &lt; n.size + t₀.size,</span>\n<span class=\"cm\">    h₂ : n.size &lt; n.size + t₀.size + t.size,</span>\n<span class=\"cm\">    h₃ : t₀.size &lt; n.size + t₀.size + t.size</span>\n<span class=\"cm\">    ⊢ t₀.size &lt; n.size + t₀.size + t.size</span>\n<span class=\"cm\">    -/</span>\n</code></pre></div>\n<p>where the goal should be solvable by <code>assumption</code>. I think normally the termination checker (if that's the right word) would manage to solve the goal with a hypothesis by itself, but now I don't know how to proceed. </p>\n<p>Also, weirdly enough, everything works fine for the other case <code>app</code>, which is mostly identical to the problematic one.</p>\n<p>Could someone give me an indication on how to proceed?</p>",
        "id": 244013140,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624711163
    },
    {
        "content": "<p>I tried writing a custom <code>dec_tac</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">recursor</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">term</span>\n  <span class=\"kd\">@[simp]</span>\n  <span class=\"kd\">def</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t.size</span> <span class=\"bp\">+</span> <span class=\"n\">u.size</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">recursor</span> <span class=\"n\">n</span> <span class=\"n\">t₀</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n.size</span> <span class=\"bp\">+</span> <span class=\"n\">t₀.size</span> <span class=\"bp\">+</span> <span class=\"n\">t.size</span>\n\n  <span class=\"kd\">@[simp]</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">size_pos_iff_true</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t.size</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">substitute</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">t.substitute</span> <span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u.substitute</span> <span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">recursor</span> <span class=\"n\">n</span> <span class=\"n\">t₀</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n.size</span> <span class=\"bp\">+</span> <span class=\"n\">t₀.size</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">n.size</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n.size</span> <span class=\"bp\">+</span> <span class=\"n\">t₀.size</span> <span class=\"bp\">+</span> <span class=\"n\">t.size</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">t₀.size</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n.size</span> <span class=\"bp\">+</span> <span class=\"n\">t₀.size</span> <span class=\"bp\">+</span> <span class=\"n\">t.size</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">recursor</span> <span class=\"o\">(</span><span class=\"n\">n.substitute</span> <span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₀.substitute</span> <span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t.substitute</span> <span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">term.size</span> <span class=\"n\">x.1</span><span class=\"o\">)⟩],</span>\n                      <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">has_well_founded.r</span><span class=\"o\">,</span> <span class=\"n\">measure</span><span class=\"o\">,</span> <span class=\"n\">inv_image</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">]}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>However, now there's an error on <code>def substitute</code>: \"failed to create auxiliary definition\". I suspect it's to do with the <code>sorry</code>s.</p>",
        "id": 244035483,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624743204
    },
    {
        "content": "<p>btw it will work without <code>using_well_founded</code> at all, the recursion is structural. But I guess it is just a simplified example</p>",
        "id": 244037678,
        "sender_full_name": "kana",
        "timestamp": 1624747062
    },
    {
        "content": "<p>Indeed, the cases for which I actually need well founded recursion are not included in this mwe.</p>",
        "id": 244053165,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624776636
    },
    {
        "content": "<p>Anne, thanks for your suggestion, but it still gave <code>failed to create auxiliary definition</code> even after filling all the <code>sorry</code>s</p>",
        "id": 244053178,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624776712
    },
    {
        "content": "<p>I ended up solving this by proving all those goals as simp lemmas (i.e. simp lemmas with <code>&lt;-&gt; true</code>) before the definition. Not very elegant, but it worked</p>",
        "id": 244053303,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624776935
    }
]