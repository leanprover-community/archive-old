[
    {
        "content": "<p>In trying to learn from mathlib I've run into a couple of things I don't understand. For example, say you want to prove <code>(¬∀ x, p x) → ∃ x, ¬p x</code>, where <code>p</code> is a predicate. This is, (modulo decidability) proven in mathlib, so I tried to just copy that approach:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"c1\">-- Mirrors proof of not_forall in logic/basic.lean:446</span>\n<span class=\"kn\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">not</span><span class=\"bp\">.</span><span class=\"n\">imp_symm</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">nx</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nx</span><span class=\"bp\">.</span><span class=\"n\">imp_symm</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">hnpx</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">hnpx</span><span class=\"bp\">⟩</span> <span class=\"c1\">-- Error: need decidable (p x)</span>\n</pre></div>\n\n\n<p>On the one hand the failure is not surprising (since <code>not.imp_symm</code> needs  decidability). On the other hand I had hoped <code>open classical</code> would make everything decidable. However, what does work is to make my own version of <code>not.imp_symm</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Mirrors proof of not.imp_symm in logic/basic.lean:167</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">not</span><span class=\"bp\">.</span><span class=\"n\">my_imp_symm</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hnpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">hnq</span> <span class=\"err\">$</span> <span class=\"n\">hnpq</span> <span class=\"n\">hnp</span>\n\n<span class=\"kn\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">not</span><span class=\"bp\">.</span><span class=\"n\">my_imp_symm</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">nx</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nx</span><span class=\"bp\">.</span><span class=\"n\">my_imp_symm</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">hnpx</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">hnpx</span><span class=\"bp\">⟩</span> <span class=\"c1\">-- Success!</span>\n</pre></div>\n\n\n<p>So my questions are:</p>\n<ol>\n<li>If I'm working classically what do I do if I need a theorem that requires decidability (such as <code>not.imp_symm</code>)? (Obviously reproving it as I did is ugly.)</li>\n<li>Along the way I noticed that the above lemma is called using \"dot notation\" (namely <code>nx.my_imp_symm</code>). I assume this is similar to things like <code>and.left</code>, but I don't understand how the syntax  works. Is it described somewhere?</li>\n</ol>",
        "id": 184616152,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1577917626
    },
    {
        "content": "<p>You need <code>local attribute [instance] classical.prop_decidable</code></p>",
        "id": 184617481,
        "sender_full_name": "Joe",
        "timestamp": 1577920182
    },
    {
        "content": "<p>Thanks. I'm curious, do \"normal\" classical Lean scripts start with that line (<code>local attribute [instance] classical.prop_decidable</code>)? (Perhaps a more pointed version of my question is: if I'm a classical mathematician , should I start all my scripts with <code>local attribute [instance] classical.prop_decidable</code>?)</p>",
        "id": 184618294,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1577921724
    },
    {
        "content": "<p>Thanks to the above tip (and searching through mathlib) it seems I can also do <code>open_locale classical</code> (with a <code>import tactic</code> at the top). Is that the way to write classical math? (Note that I don't understand the implications of <code>open_locale</code>).</p>",
        "id": 184618405,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1577921923
    },
    {
        "content": "<p>Yes. <code>open_locale</code> is for both notations and attributes.</p>",
        "id": 184618618,
        "sender_full_name": "Joe",
        "timestamp": 1577922344
    },
    {
        "content": "<p>Here is its documentation</p>",
        "id": 184618620,
        "sender_full_name": "Joe",
        "timestamp": 1577922354
    },
    {
        "content": "<p>This consists of two user-commands which allow you to declare notation and commands localized to a namespace.</p>\n<ul>\n<li>Declare notation which is localized to a namespace using:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>localized &quot;infix ` ⊹ `:60 := my_add&quot; in my.add\n</pre></div>\n\n\n<ul>\n<li>After this command it will be available in the same section/namespace/file, just as if you wrote <code>local infix </code> ⊹ <code>:60 := my_add</code></li>\n<li>You can open it in other places. The following command will declare the notation again as local notation in that section/namespace/files:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>open_locale my.add\n</pre></div>\n\n\n<ul>\n<li>More generally, the following will declare all localized notation in the specified namespaces.</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>open_locale namespace1 namespace2 ...\n</pre></div>\n\n\n<ul>\n<li>You can also declare other localized commands, like local attributes</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>localized &quot;attribute [simp] le_refl&quot; in le\n</pre></div>\n\n\n<ul>\n<li>Warning 1: as a limitation on user commands, you cannot put <code>open_locale</code> directly after your imports. You have to write another command first (e.g. <code>open</code>, <code>namespace</code>, <code>universe variables</code>, <code>noncomputable theory</code>, <code>run_cmd tactic.skip</code>, ...).</li>\n<li>Warning 2: You have to fully specify the names used in localized notation, so that the localized notation also works when the appropriate namespaces are not opened.</li>\n</ul>",
        "id": 184618621,
        "sender_full_name": "Joe",
        "timestamp": 1577922358
    },
    {
        "content": "<p>So there is a line in the file <code>tactic/localized.lean</code> that makes <code>open_locale</code> work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- you can run `open_locale classical` to get the decidability of all propositions.</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;attribute [instance, priority 9] classical.prop_decidable&quot;</span> <span class=\"k\">in</span> <span class=\"n\">classical</span>\n</pre></div>",
        "id": 184618798,
        "sender_full_name": "Joe",
        "timestamp": 1577922608
    },
    {
        "content": "<p>That's how I found it -- I searched mathlib for <code>classical.prop_decidable</code> and one of the first hits is the comment above (namely \"you can run <code>open_locale classical</code> to get the decidability of all propositions.\").</p>",
        "id": 184618857,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1577922736
    },
    {
        "content": "<p>Beyond that I find the documentation for <code>open_locale</code> a bit obscure (being a beginner at Lean). Is it fair to summarize this thread as: If you want to do classical math just put <code>open_locale classical</code> at the top of your files? (Or perhaps more conservatively, wait until you  need it, then stick it at the top.)</p>",
        "id": 184618925,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1577922916
    },
    {
        "content": "<p>Yes, you can do that. <br>\nThe other use for <code>open_locale</code> is for notation. <br>\nYou can define the notation for <code>pi</code> like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `π` := real.pi&quot;</span> <span class=\"k\">in</span> <span class=\"n\">real</span>\n</pre></div>\n\n\n<p>And when you want to use the notation, say <code>open_locale real</code>.</p>",
        "id": 184618990,
        "sender_full_name": "Joe",
        "timestamp": 1577923069
    },
    {
        "content": "<p>That (<code>open_locale classical</code>) is pretty much what I do. I also add <code>noncomputable theory</code> at the top sometimes</p>",
        "id": 184619031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577923094
    },
    {
        "content": "<p>I wonder whether  I should start a new thread for my \"dot notation\" question? (It's orthogonal ...)</p>",
        "id": 184619127,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1577923277
    },
    {
        "content": "<p>If you have a list <code>l : list nat</code>, <code>l.length</code> is the same as <code>list.length l</code>.</p>",
        "id": 184619187,
        "sender_full_name": "Joe",
        "timestamp": 1577923393
    },
    {
        "content": "<p>I don't know what else can be said about the dot notation.</p>",
        "id": 184619194,
        "sender_full_name": "Joe",
        "timestamp": 1577923424
    },
    {
        "content": "<p>For me it is just a way of avoiding writing the namespace.</p>",
        "id": 184619247,
        "sender_full_name": "Joe",
        "timestamp": 1577923470
    },
    {
        "content": "<p>It's discussed briefly in TPiL <a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#conjunction\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#conjunction\">in section 3.3.1</a>:</p>\n<blockquote>\n<p>Lean provides another useful syntactic gadget. Given an expression e of an inductive type foo (possibly applied to some arguments), the notation e.bar is shorthand for foo.bar e. This provides a convenient way of accessing functions without opening a namespace. </p>\n</blockquote>\n<p>There's also a little bit more about it <a href=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html#declaring-structures\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html#declaring-structures\">in 9.1</a>.</p>",
        "id": 184619322,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1577923624
    },
    {
        "content": "<p>I'm going to read through §3.3.1 and §9.1. In the meantime (while I figure out what degree of denseness I'm suffering from) here is a more concrete explanation of what I fund puzzling about the dot syntax. While I understand <code>l.length</code>, what I don't understand is that this works (it's just a minimal version of the above):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">not</span><span class=\"bp\">.</span><span class=\"n\">my_imp_symm</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hnpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>  <span class=\"n\">sorry</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">nx</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">nx</span><span class=\"bp\">.</span><span class=\"n\">my_imp_symm</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"c1\">-- this is fine!</span>\n</pre></div>\n\n\n<p>and yet if I do the obvious replacement of <code>nx.my_imp_symm</code> to <code>not.my_imp_symm nx</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">nx</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">not</span><span class=\"bp\">.</span><span class=\"n\">my_imp_symm</span> <span class=\"n\">nx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"c1\">-- this does not work!</span>\n</pre></div>\n\n\n<p>then it (clearly) does not work.</p>",
        "id": 184622642,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1577930424
    },
    {
        "content": "<p>I'm going to read through §3.3.1 and §9.1. In the meantime (while I figure out what degree of denseness I'm suffering from) here is a more concrete explanation of what I fund puzzling about the dot syntax. While I understand <code>l.length</code>, what I don't understand is that this works (it's just a minimal version of the above):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">not</span><span class=\"bp\">.</span><span class=\"n\">my_imp_symm</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hnpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>  <span class=\"n\">sorry</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">nx</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">nx</span><span class=\"bp\">.</span><span class=\"n\">my_imp_symm</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"c1\">-- this is fine!</span>\n</pre></div>\n\n\n<p>and yet if I do the obvious replacement of <code>nx.my_imp_symm</code> to <code>not.my_imp_symm nx</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">nx</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">not</span><span class=\"bp\">.</span><span class=\"n\">my_imp_symm</span> <span class=\"n\">nx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"c1\">-- this does not work!</span>\n</pre></div>\n\n\n<p>then it (clearly) does not work.</p>",
        "id": 184622647,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1577930447
    },
    {
        "content": "<p>It doesn't work, but that's not because of a dot notation issue.</p>",
        "id": 184622701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577930565
    },
    {
        "content": "<p>It doesn't work because the inputs are the wrong way around.</p>",
        "id": 184622846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577930857
    },
    {
        "content": "<p><code>example (nx : ¬∃ x, ¬p x) (x : α) : p x := not.my_imp_symm (λ h, ⟨x,h⟩ : ¬ p x → ∃ x, ¬p x) nx</code></p>",
        "id": 184622847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577930862
    },
    {
        "content": "<p>The idea is that if L has type <code>list</code> then <code>L.blah</code> will look at <code>list.blah</code> and then go through the inputs and find the first one of type <code>list</code> and replace it with <code>L</code>. This might not be the first explicit input to the function.</p>",
        "id": 184622890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577930897
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">silly</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n\n<span class=\"n\">def</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">silly</span> <span class=\"mi\">5</span> <span class=\"c1\">-- 37</span>\n</pre></div>",
        "id": 184622909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577930964
    },
    {
        "content": "<p>Ah!</p>",
        "id": 184622962,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1577931011
    },
    {
        "content": "<p>In your example, <code>hnpq</code> is a pi type, and it's <code>hnq</code> which has type <code>not &lt;something&gt;</code>.</p>",
        "id": 184622964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577931018
    },
    {
        "content": "<p>If you can be bothered to search back a few months you'll find some thread where someone else explains pretty much the same thing to me ;-)</p>",
        "id": 184622979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577931064
    },
    {
        "content": "<p>Right -- I need <code>lemma not_my_imp_symm {P Q : Prop} (hnq : ¬Q) (hnpq : ¬P → Q)  : P :=  sorry</code> (flipped order of arguments)</p>",
        "id": 184622980,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1577931076
    },
    {
        "content": "<p>One wonders whether this sort of thing should be documented somehow.</p>",
        "id": 184622983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577931086
    },
    {
        "content": "<p>PS </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not</span><span class=\"bp\">.</span><span class=\"n\">my_imp_symm</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hnpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">finish</span>\n</pre></div>",
        "id": 184622988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577931121
    },
    {
        "content": "<p>Sadly, once you see what's going on it does seem very trivial.</p>",
        "id": 184623028,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1577931129
    },
    {
        "content": "<p>(Mind you I'm very grateful to have this explained to me!)</p>",
        "id": 184623040,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1577931157
    },
    {
        "content": "<p>dot notation is trivial, but only once you've spent a fair amount of time figuring out what's going on ;-) I think a lot of the computer scientists figured this out a long time ago, but it took me a while.</p>",
        "id": 184623041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577931164
    },
    {
        "content": "<p>For what it's worth, here is me wrestling with this stuff just under a year ago: <a href=\"#narrow/stream/113488-general/topic/dot.20notation.20confusion/near/157341136\" title=\"#narrow/stream/113488-general/topic/dot.20notation.20confusion/near/157341136\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/dot.20notation.20confusion/near/157341136</a></p>",
        "id": 184623166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577931426
    },
    {
        "content": "<p>I think I finally \"got\" dot notation from reading your thread as well.</p>",
        "id": 184623227,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1577931599
    },
    {
        "content": "<p>I was chuffed when I recently used <a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/logic.lean#L16\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/logic.lean#L16\">flip</a> in a proof. This trick (dot syntax) is another sneaky way of reordering arguments (without resorting to lambdas or small lemmas).</p>",
        "id": 184623271,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1577931617
    }
]