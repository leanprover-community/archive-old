[
    {
        "content": "<p>Without knowing the names of any lemmas (tactics are allowed), prove</p>\n<div class=\"codehilite\"><pre><span></span>lemma qux (n : ℕ) (h₁ : n &lt; 3) (h₂ : n ≥ 2) : n = 2 :=\n</pre></div>",
        "id": 159486245,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551248704
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">qux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"c1\">-- Rob missed a trick</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159487443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551250633
    },
    {
        "content": "<p>We should resume work on the nat case bashing tactic</p>",
        "id": 159487504,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551250728
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">qux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- the proof</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₃</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₃</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159487592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551250861
    },
    {
        "content": "<p>The current state was:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">get_nat_ineq</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">ebound</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">eval_expr</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ebound</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">ebound</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">eval_expr</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ebound</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">nat_cases</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">focus1</span> <span class=\"err\">$</span> <span class=\"n\">do</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ebound</span><span class=\"o\">,</span> <span class=\"n\">bound</span><span class=\"bp\">⟩⟩</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">get_nat_ineq</span><span class=\"o\">,</span>\n  <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">local_const</span> <span class=\"bp\">_</span> <span class=\"n\">nval</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"n\">val</span><span class=\"o\">,</span>\n  <span class=\"n\">iterate_at_most</span> <span class=\"n\">bound</span> <span class=\"err\">$</span> <span class=\"n\">do</span> <span class=\"o\">{</span>\n      <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nval</span><span class=\"o\">,</span>\n      <span class=\"n\">cases_core</span> <span class=\"n\">val</span><span class=\"o\">,</span>\n      <span class=\"n\">clear_lst</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n      <span class=\"n\">swap</span> <span class=\"o\">},</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nval</span><span class=\"o\">,</span>\n  <span class=\"k\">proof</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"err\">%%</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_ge</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span> <span class=\"err\">%%</span><span class=\"n\">val</span><span class=\"o\">)),</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"k\">proof</span><span class=\"o\">,</span>\n  <span class=\"n\">goals</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"n\">set_goals</span> <span class=\"n\">goals</span><span class=\"bp\">.</span><span class=\"n\">reverse</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">nat_cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">goals</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span> <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">goals</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">nat_cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">goals</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span> <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">goals</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>but it needed to be extended to handle also  lower bounds</p>",
        "id": 159487632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551250918
    },
    {
        "content": "<p>Remember this is based on code by Kenny</p>",
        "id": 159487700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551250991
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">qux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span> <span class=\"bp\">_</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span> <span class=\"bp\">_</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">revert</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span> <span class=\"bp\">_</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">revert</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Casing on the inequality is quicker than casing on <code>n</code>.</p>",
        "id": 159490467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551255118
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">qux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">revert</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact_dec_trivial</span>\n</pre></div>",
        "id": 159490603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551255360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Your challenge was Kenny'd.</p>",
        "id": 159490688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551255457
    },
    {
        "content": "<p>Why is the import necessary?</p>",
        "id": 159490742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551255491
    },
    {
        "content": "<p>I assume that's where the decidable instance is</p>",
        "id": 159490746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551255506
    },
    {
        "content": "<p>I think <code>tactic.exact_dec_trivial</code> can just be <code>exact dec_trivial</code></p>",
        "id": 159490758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551255540
    },
    {
        "content": "<p>unless that counts as \"the name of a theorem\"</p>",
        "id": 159490771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551255562
    },
    {
        "content": "<p>Well he'd better make some improvements because my first solution is shorter than his :P</p>",
        "id": 159490775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551255586
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">qux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">change</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">qux&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">revert</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact_dec_trivial</span>\n</pre></div>",
        "id": 159490780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551255599
    },
    {
        "content": "<p>but mine is faster</p>",
        "id": 159490837,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551255628
    },
    {
        "content": "<p>however my longer solution is faster than yours so I'm beating you all ends up ;-)</p>",
        "id": 159490850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551255648
    },
    {
        "content": "<p>Mario is right though, and now yours is the shortest</p>",
        "id": 159490873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551255701
    },
    {
        "content": "<p>these proofs make me weep though, compared to just using <code>le_antisymm</code></p>",
        "id": 159490973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551255812
    },
    {
        "content": "<p>you can make that a tactic!</p>",
        "id": 159490985,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551255841
    },
    {
        "content": "<p><code>by exact</code></p>",
        "id": 159491035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551255855
    },
    {
        "content": "<p>Again, we should have a complete <code>nat_cases</code> tactic (and <code>int_cases</code>)</p>",
        "id": 159491758,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551256725
    },
    {
        "content": "<p>Okay, I've added the \"missing trick\" to linarith, PR to follow once I've tested a bit more.</p>",
        "id": 159496126,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551261785
    },
    {
        "content": "<p>I'll see if I can do something with nat_cases, too.</p>",
        "id": 159496150,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551261811
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/769\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/769\">https://github.com/leanprover-community/mathlib/pull/769</a></p>",
        "id": 159496809,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551262371
    },
    {
        "content": "<p>Nice! If you're in a linarith mood, I would like to know if it is easy to add to the context used by linarith the inequalities <code>lfloor x rfloor &lt;= x</code> and <code>x &lt; lfloor x rfloor + 1</code> when <code>lfloor x rfloor</code> appears in the context (or maybe I should do the exercise myself!)</p>",
        "id": 159498502,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551264121
    },
    {
        "content": "<p>I'd guess this isn't too bad. (One could do max and min, too.)</p>",
        "id": 159499038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551264672
    },
    {
        "content": "<p>My preference would be to basically have a preprocessing step, that inspects hypotheses for these sorts of things appearing inside linear inequalities, and add all the extra lemmas. Then we could add a parsing flag to linarith to ask it to run the preprocessor (or do it by default anyway).</p>",
        "id": 159499104,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551264758
    },
    {
        "content": "<p>I'll add it to my list (I have a whole lot of students just getting started... maybe one of them will be trying it soon) :-) I'd like to think about a nice <code>nat_cases</code> first.</p>",
        "id": 159499132,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551264806
    },
    {
        "content": "<p>I don't want the core <code>linarith</code> tactic to do heuristic instantiation. There's no end to the lemmas that could be applicable. Same deal with unfolding constants, splitting conditionals, etc. A separate tactic that preprocesses for <code>linarith</code> would be fine. But throwing lots of random features into the core tactic makes it unpredictable, slower, and harder to maintain.</p>",
        "id": 159500052,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551265837
    },
    {
        "content": "<p>What about <code>linarith_ext</code> (or something like that) for the tactic extended by a preparser massaging suitably the assumptions (maybe the nat and int preprocessing just commited by Scott would fit in this preprocessing step, for instance), and <code>linarith</code> for the original unchanged robust tactic? And maybe later if one realizes that everyone uses the extended version and that the speed difference is not huge, rename them to <code>linarith</code> and <code>linarith_core</code> respectively?</p>",
        "id": 159524483,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551281655
    },
    {
        "content": "<p>hmm, wasn't this sort of thing what simp sets were for? I wonder what happened to that project</p>",
        "id": 159531594,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551286301
    },
    {
        "content": "<p>I want to keep the behavior of <code>linarith</code> predictable. There's a very well-defined problem that it solves: <code>linarith</code> will (or should) prove all provable statements in the theory of linear arithmetic over the rationals. The tactic is finished when it does this. It happens that some problems over <code>int</code> and <code>nat</code> can be solved by the same method with minimal preprocessing, and it doesn't hurt to try the very simple and obvious stuff, like what Scott added. But the step up from rational arithmetic to actual integer arithmetic is huge, it's a much harder problem. Adding more and more gadgets to the current one to make it do more on integers will lead to pain. The gadgets will have bugs, they'll interact in unexpected ways, people will keep wondering why a works but b doesn't. I've already fixed bad interactions in the nat/int preprocessing and there's not much there. And in the end, it will never be a replacement for an actual integer arithmetic tool.</p>\n<p>Making it aware of certain constants is the same deal. Yeah, there are natural inequalities about floor that we all know. And ceiling, and abs, and max and min, and log and exp, and sin.... This is all a special case of heuristic lemma instantiation. You have terms, you have a library of universally quantified facts, which facts do you instantiate with which terms to get something useful? You can hardcode a few things into a preprocessing loop and call it a day. But there's a systematic way to do this kind of thing (that's partially implemented in Lean's SMT mode, actually), and it really has nothing to do with linear arithmetic. Trying to approximate it will lead to infinite feature requests, so prepare yourself.</p>",
        "id": 159549019,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551298893
    },
    {
        "content": "<p>Andrew, Sebastien's question has nothing to do with simplifying, he wants to add extra inequalities to the context based on the constants that appear there already.</p>",
        "id": 159549115,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551298945
    },
    {
        "content": "<p>We need a mathlib FAQ where Rob can paste this answer once and for all (I'm sure he wrote it at least five times already, although I'm clearly among people who would like linarith to close all their goals).</p>",
        "id": 159550071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551299678
    },
    {
        "content": "<p>Maybe some portion of this can be added to the <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#linarith\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#linarith\">tactic docs</a>.</p>",
        "id": 159554208,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1551302911
    }
]