[
    {
        "content": "<p>I am having no luck proving the following example. I looked around mathlib and didn't seem to find anything that would directly help. How do I handle the universal qualified in the hypothesis (I mean, maybe transform the hypothesis into something more usable)? I feel like I am missing something here.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 206988862,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597443826
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_nat_one_div_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206989359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597444127
    },
    {
        "content": "<p><code>contrapose!</code> makes it so much easier! Thank you!</p>",
        "id": 206989440,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597444197
    },
    {
        "content": "<p>By the way, there is a tactic similar to how <code>generalize</code> behaves in Coq. I remember seeing it a Lean/Coq cheatsheet but never managed to use it properly.</p>",
        "id": 206989560,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597444266
    },
    {
        "content": "<p>alternatively:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_of_not_gt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x0</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_nat_one_div_lt</span> <span class=\"n\">x0</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_lt_of_lt</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206989573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597444279
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_of_not_gt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x0</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_nat_one_div_lt</span> <span class=\"n\">x0</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206989610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597444317
    },
    {
        "content": "<p>I think you are thinking of <code>specialize</code></p>",
        "id": 206989652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597444327
    },
    {
        "content": "<p>Oh, I was thinking of <code>revert</code>.</p>",
        "id": 206989677,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597444355
    },
    {
        "content": "<p><a href=\"https://github.com/jldodds/coq-lean-cheatsheet\">https://github.com/jldodds/coq-lean-cheatsheet</a></p>",
        "id": 206989686,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597444362
    },
    {
        "content": "<p>there is also a <code>generalize</code>, but it doesn't do the reverting part, only the find and replace</p>",
        "id": 206989711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597444389
    },
    {
        "content": "<p>I don't think you can <code>revert</code> an expression</p>",
        "id": 206989726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597444404
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_nat_one_div_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206989751,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597444430
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Limit.20inequality/near/206989726\">said</a>:</p>\n<blockquote>\n<p>I don't think you can <code>revert</code> an expression</p>\n</blockquote>\n<p>What exactly you mean by expression?</p>",
        "id": 206989806,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597444453
    },
    {
        "content": "<p>like you can't <code>revert 2 + 2</code>, you would have to <code>generalize : 2 + 2 = x, revert x</code></p>",
        "id": 206989817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597444474
    },
    {
        "content": "<p>this would turn <code>|- P (2+2)</code> into <code>|- \\all x, P x</code></p>",
        "id": 206989837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597444514
    },
    {
        "content": "<p>I try to avoid <code>intro</code> and <code>revert</code> as the first line of a proof, as a matter of style</p>",
        "id": 206989867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597444554
    },
    {
        "content": "<p>you can almost always set up the theorem statement so that the appropriate things are already intro'd</p>",
        "id": 206989934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597444586
    },
    {
        "content": "<p>I see! Good example! I finally understand how <code>generalize</code> works. I tried and failed to use it several times because I was using like <code>generalize</code> is Coq. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 206989985,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597444634
    }
]