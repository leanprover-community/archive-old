[
    {
        "content": "<p>I'm writing a commutative ring library (in lean 3) and have come up a against a problem with working with universal properties. This is the code I'm using to define final rings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">final_ring</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">R</span><span class=\"o\">,</span><span class=\"n\">lR</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R'</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">ring_hom</span> <span class=\"n\">pair.1</span>  <span class=\"n\">R</span>  <span class=\"n\">pair.2</span> <span class=\"n\">lR</span> <span class=\"o\">,</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>Using this definition it is fairly easy to show the zero ring is final.  But I run into problems when using it to prove that  a final ring is unique since a new universe variable is introduced  with each assumption of the form final_ring Z and there seem to be no way to force it to be a particular universe. Is there any way around this or should be just saying that a universal property holds for rings in a particular universe?</p>",
        "id": 271456340,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1644510592
    },
    {
        "content": "<p>Can you elaborate on the problem, perhaps with an example?</p>",
        "id": 271456718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644510744
    },
    {
        "content": "<p>Are you aware of the <code>[final_ring.{u v} Z]</code> notation that lets you provide the value of the universe variables explicitly?</p>",
        "id": 271456781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644510775
    },
    {
        "content": "<p>(also, <code>∃! ψ : @ring_hom pair.1  R  pair.2 lR , true</code> is possibly better spelt <code>nonempty (unique (@ring_hom pair.1  R  pair.2 lR))</code>)</p>",
        "id": 271457040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644510865
    },
    {
        "content": "<p>I wasn't aware of it but that fixed everything.</p>",
        "id": 271457403,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1644511027
    },
    {
        "content": "<p>Are you aware of <a href=\"https://tqft.net/mathlib/category_theory/limits/shapes/terminal\">file#category_theory/limits/shapes/terminal</a>?</p>",
        "id": 271457689,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644511144
    },
    {
        "content": "<p>We even already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/CommRing.punit_is_terminal\">docs#CommRing.punit_is_terminal</a></p>",
        "id": 271457970,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644511265
    },
    {
        "content": "<p>I was maybe a bit quick say it fixed everything, I now need assumptions like <code>final_ring.{u u} Z ∧  final_ring.{u v} Z</code>. I don't really see any way around this unless you could return things like forall universes , blah.</p>",
        "id": 271460133,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1644512143
    },
    {
        "content": "<p>You can. That's what <code>universes</code> is for.</p>",
        "id": 271460357,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644512228
    },
    {
        "content": "<p>Do you know you can use<code>(max u v)</code> to mean \"Any universe bigger than <code>u</code>\"?</p>",
        "id": 271460472,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644512274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/universal.20properties.20and.20universes/near/271457689\">said</a>:</p>\n<blockquote>\n<p>Are you aware of <a href=\"https://tqft.net/mathlib/category_theory/limits/shapes/terminal\">file#category_theory/limits/shapes/terminal</a>?</p>\n</blockquote>\n<p>It seems they are fixing a universe level for the objects which I'm definitely coming to believe is a sensible thing to do.</p>",
        "id": 271461804,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1644512803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/universal.20properties.20and.20universes/near/271460357\">said</a>:</p>\n<blockquote>\n<p>You can. That's what <code>universes</code> is for.</p>\n</blockquote>\n<p>Can you return functions that take universes as arguments? My vague impression was that this is impossible.</p>",
        "id": 271464397,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1644513900
    },
    {
        "content": "<p>No, but I don't really undersstand what your problem is, to be fair.</p>",
        "id": 271464551,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644513971
    },
    {
        "content": "<p>Yeah, there's no way to say that a variable ring <code>Z</code> is final in every universe at once, as a hypothesis.</p>",
        "id": 271475774,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644518722
    },
    {
        "content": "<p>Is better to fix a universe or to carry around morally redundant hypothesis? I would less worried if universes were cumulative, is there natural way of coercing types in one universe into types in a higher universe? .</p>",
        "id": 271478755,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1644519928
    },
    {
        "content": "<p>There is, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ulift\">docs#ulift</a></p>",
        "id": 271479622,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644520313
    },
    {
        "content": "<p>thanks</p>",
        "id": 271480025,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1644520471
    }
]