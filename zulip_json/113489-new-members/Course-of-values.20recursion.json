[
    {
        "content": "<p>Hi! I was trying to wrap my head around course-of-values recursion in lean by inspecting <code>nat.below</code> and <code>nat.brec_on</code>. I noticed that <code>nat.below</code> generates a lot of useless <code>pprod</code> and <code>punit</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">nat.below</span> <span class=\"n\">C</span> <span class=\"mi\">0</span> <span class=\"c1\">-- punit</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">nat.below</span> <span class=\"n\">C</span> <span class=\"mi\">1</span> <span class=\"c1\">-- pprod (pprod (C 0) punit) punit</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">nat.below</span> <span class=\"n\">C</span> <span class=\"mi\">2</span> <span class=\"c1\">-- pprod (pprod (C 1) (pprod (C 0) punit) punit)) punit</span>\n</code></pre></div>\n\n<p>In fact, I wrote my own version of these functions without using so many generating so many <code>pprod</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">below</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"n\">punit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">pprod</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">brec_on</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">below</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">pprod.fst</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat.rec</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pprod</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">below</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"o\">⟨</span><span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"n\">punit.star</span><span class=\"o\">,</span> <span class=\"n\">punit.star</span><span class=\"o\">⟩</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">F</span> <span class=\"n\">n.succ</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">⟩)</span>\n    <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">below</span> <span class=\"n\">C</span> <span class=\"mi\">0</span> <span class=\"c1\">-- punit</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">below</span> <span class=\"n\">C</span> <span class=\"mi\">1</span> <span class=\"c1\">-- pprod (C 0) punit</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">below</span> <span class=\"n\">C</span> <span class=\"mi\">2</span> <span class=\"c1\">-- pprod (C 1) (pprod (C 0) punit)</span>\n</code></pre></div>\n\n<p>My question is: why is the built-in implementation like this? Are these extra <code>pprod</code> and <code>punit</code> needed?</p>",
        "id": 212633259,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1602114282
    },
    {
        "content": "<p>It's because it was written by generic code that can handle many arguments to the constructors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">treee</span>\n<span class=\"bp\">|</span> <span class=\"n\">niil</span> <span class=\"o\">:</span> <span class=\"n\">treee</span>\n<span class=\"bp\">|</span> <span class=\"n\">coons</span> <span class=\"o\">:</span> <span class=\"n\">treee</span> <span class=\"bp\">→</span> <span class=\"n\">treee</span> <span class=\"bp\">→</span> <span class=\"n\">treee</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">T1</span> <span class=\"n\">T2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">treee.below</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">treee.coons</span> <span class=\"n\">T1</span> <span class=\"n\">T2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span>\n  <span class=\"n\">pprod</span> <span class=\"o\">(</span><span class=\"n\">pprod</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">T1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">treee.below</span> <span class=\"n\">C</span> <span class=\"n\">T1</span><span class=\"o\">))</span> <span class=\"bp\">$</span>\n  <span class=\"n\">pprod</span> <span class=\"o\">(</span><span class=\"n\">pprod</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">T2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">treee.below</span> <span class=\"n\">C</span> <span class=\"n\">T2</span><span class=\"o\">))</span> <span class=\"bp\">$</span>\n  <span class=\"n\">punit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212638971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602120354
    },
    {
        "content": "<p>Oh, I see. Thank you very much!</p>",
        "id": 212664000,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1602148280
    }
]