[
    {
        "content": "<p>Hi all,</p>\n<p>Apologies if this has been posted somewhere already. Is there a general timeline/roadmap that Lean is following?</p>",
        "id": 228323577,
        "sender_full_name": "Rany Tith",
        "timestamp": 1614640384
    },
    {
        "content": "<p>Do you mean the development of the new language Lean 4, or the mathematics library mathlib?</p>",
        "id": 228328040,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614642512
    },
    {
        "content": "<p>In either case the answer is no. :-)</p>",
        "id": 228328044,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614642517
    },
    {
        "content": "<p>(Presumably Leo and co have some internal roadmaps for Lean 4, but there is not a public one that I'm aware of.)</p>",
        "id": 228328089,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614642554
    },
    {
        "content": "<p>Ah okay thank you so much. A public roadmap would be nice as we can be aware what might be deprecated so we don't rely too much on them. For example, the difference between Lean 4 and Lean 3. But to my understanding, Lean does not have an LTS version yet so this might be asking too much. Thanks again!</p>",
        "id": 228336293,
        "sender_full_name": "Rany Tith",
        "timestamp": 1614647102
    },
    {
        "content": "<p>These deprecations are gradually coming to light, they are generally deprecated as soon as we discover them so we can't say anything about deprecations in advance</p>",
        "id": 228345711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614654261
    },
    {
        "content": "<p>A fair number of deprecated things and anti-patterns are encoded in our linter framework, so you should make sure that your code passes that</p>",
        "id": 228345773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614654328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"393767\">@Rany Tith</span></p>",
        "id": 228345783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614654342
    },
    {
        "content": "<p>How does one lint offline? I thought it might be a <code>leanproject</code> command, but it is not.</p>",
        "id": 228348094,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614656312
    },
    {
        "content": "<p>There are two linters; one of them is written in Lean and can be run by putting <code>#lint</code> at the bottom of the file (or after the declarations you wish to check, see <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#linting%20commands\">this link</a> for more info.)</p>\n<p>The \"style linter\" is just a python / shell script that you can run with <code>./scripts/lint-style.sh</code> from the root of mathlib.</p>",
        "id": 228348297,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614656510
    }
]