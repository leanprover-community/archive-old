[
    {
        "content": "<p>Hello,<br>\nI am having some trouble with making a substitution inside a dependent product.</p>\n<p><strong>Here is the context:</strong><br>\nI defined natural numbers as a type <code>mynat</code> by assuming their UP as axioms, and from that I want to show that inductive definitions are legal. So I have written down a theorem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">AA</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">AA</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span>\n\n <span class=\"kd\">theorem</span> <span class=\"n\">inductive_definitions_general</span>\n   <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n     <span class=\"k\">forall</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n       <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">minus</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">f</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>where <code>minus n</code> is the set of naturals ≤ n.</p>\n<p><strong>Here is the problem:</strong><br>\nIn the base case of my induction, I have the following state,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">minus</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">↥</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">↥</span><span class=\"n\">A</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"n\">h_m</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span>\n<span class=\"n\">minus_zero</span> <span class=\"o\">:</span> <span class=\"n\">minus</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">set.empty</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">⟨</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">minus</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>and I want to make the substitutions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">h_m</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">minus_zero</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>but I get the error <code>motive is not type correct</code>. I looked at some Zulip threads about other people who have had this problem, especially <a href=\"https://leanprover-community.github.io/archive/stream/113489-new-members/topic/motive.20is.20not.20type.20correct.html\">this one</a>, and it seems in general that people resolve the problem by changing <code>rw</code> to <code>simp_rw</code> or <code>subst</code> but I have tried that and it does not work. My questions are basically</p>\n<ol>\n<li>if it makes sense to expect to be able to make an arbitrary substitution inside a dependent type like this</li>\n<li>and if so, what am I doing wrong?</li>\n</ol>",
        "id": 292011397,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1659621588
    },
    {
        "content": "<p>I feel like things may have already gone wrong by the time the <code>?m_1</code> appears; can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that shows how you got there?</p>",
        "id": 292012999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659622289
    },
    {
        "content": "<p>Okay, I just have to get it to compile <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 292015015,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1659623293
    },
    {
        "content": "<p>Okay, sorry if not very minimal, but here it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.function</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">mynat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">mynat</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">succ_neq_0</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span><span class=\"o\">)</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">succ_sur</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">exists</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">succ_inj</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">succ</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">myinduction</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">mynat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">zero</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Inter</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">AA</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">|</span> <span class=\"k\">forall</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">AA</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">final</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">and</span>\n    <span class=\"o\">(</span><span class=\"n\">A.nonempty</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Inter</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">final</span> <span class=\"n\">F</span><span class=\"o\">)}</span>\n<span class=\"kd\">def</span> <span class=\"n\">minus</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">compl</span> <span class=\"bp\">$</span> <span class=\"n\">plus</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">leq</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">minus</span> <span class=\"n\">m</span> <span class=\"bp\">⊆</span> <span class=\"n\">minus</span> <span class=\"n\">n</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`≤`</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"n\">leq</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">leq_zero</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">minus_zero</span> <span class=\"o\">:</span> <span class=\"n\">minus</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"kd\">end</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">AA</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">AA</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inductive_definitions_general</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n    <span class=\"k\">forall</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n      <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">minus</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">f</span><span class=\"o\">⟩</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exists_unique.intro</span><span class=\"o\">,</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">|</span> <span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"k\">forall</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">minus</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">h</span><span class=\"o\">⟩},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_I</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">myinduction</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">h_m</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">leq_zero</span> <span class=\"n\">at</span> <span class=\"n\">h_m</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">h_m</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">minus_zero</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292016166,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1659623782
    },
    {
        "content": "<p>The block</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">|</span> <span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"k\">forall</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">minus</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">h</span><span class=\"o\">⟩},</span>\n<span class=\"k\">have</span> <span class=\"n\">h_I</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">myinduction</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>in the proof of the theorem is basically synonymous with the <code>induction</code> tactic.</p>",
        "id": 292016429,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1659623906
    },
    {
        "content": "<p>What was your intent with <code>apply exists_unique.intro</code>?</p>",
        "id": 292019125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659625025
    },
    {
        "content": "<p>That says \"I'm going to provide you a witness, but I'm not going to tell you what it is yet</p>",
        "id": 292019178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659625051
    },
    {
        "content": "<p>What's the witness you want to use?</p>",
        "id": 292019185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659625055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/substitution.20within.20Sigma/near/292019125\">said</a>:</p>\n<blockquote>\n<p>What was your intent with <code>apply exists_unique.intro</code>?</p>\n</blockquote>\n<p>Okay maybe that's the problem then, because I just wanted to split the ∃! into \"existence\" and \"uniqueness\".</p>",
        "id": 292019608,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1659625224
    },
    {
        "content": "<p>For that you need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_unique_of_exists_of_unique\">docs#exists_unique_of_exists_of_unique</a></p>",
        "id": 292019815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659625317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/substitution.20within.20Sigma/near/292019185\">said</a>:</p>\n<blockquote>\n<p>What's the witness you want to use?</p>\n</blockquote>\n<p>Since I am planning to use my induction axiom I guess I am not going to provide a witness.</p>",
        "id": 292019957,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1659625366
    },
    {
        "content": "<p>But that might be harder to prove, because then you have to prove \"there exists an <code>x</code> such that <code>p x</code>, and if <code>p y</code> and <code>p z</code> then <code>y = z</code>\", rather than the likely easier \"there exists an <code>x</code> such that <code>p x</code>, and if <code>p y</code>then <code>x = y</code>\"</p>",
        "id": 292019997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659625381
    },
    {
        "content": "<p>Either way, if splitting into \"existence\" and \"uniqueness\" is what your pen and paper proof does, then I recommend going ahead with <code>exists_unique_of_exists_of_unique</code></p>",
        "id": 292020279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659625489
    },
    {
        "content": "<p>I will test it out,<br>\nThanks for the input! :)</p>",
        "id": 292020399,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1659625531
    },
    {
        "content": "<p>Hmmm, I still get the same error even when I try <code>exists_unique_of_exists_of_unique</code>.<br>\nI also tried getting rid of the <code>split</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exists_unique_of_exists_of_unique</span><span class=\"o\">,</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">|</span> <span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"k\">forall</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">minus</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">h</span><span class=\"o\">⟩},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_I</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">myinduction</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n\n      <span class=\"k\">have</span> <span class=\"n\">h_</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">leq_zero</span><span class=\"o\">],</span>\n      <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">⟨</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">minus</span> <span class=\"n\">zero</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">h_</span><span class=\"o\">⟩),</span>\n      <span class=\"n\">rw</span> <span class=\"n\">minus_zero</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but still get the same error...</p>",
        "id": 292023530,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1659626789
    },
    {
        "content": "<p>I assumed that I have some arbitrary function into <code>A</code> (I guess strictly speaking I should assume that <code>A</code> is nonempty) because once I manage to substitute away <code>minus zero</code>, <code>h_</code> does not matter since its restriction is just the empty function.</p>",
        "id": 292023762,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1659626892
    },
    {
        "content": "<p>This makes progress:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">congr'</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">minus_zero</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"o\">,</span>  <span class=\"c1\">-- or `have x' := minus_zero.rec x,` and use `x'` below</span>\n      <span class=\"n\">exact</span> <span class=\"n\">x.prop.elim</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 292024183,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659627064
    },
    {
        "content": "<p>The problem is you can't rewrite the <code>minus_zero</code> you're seeing, because <code>g</code> expects an argument of type <code>(Σ n : mynat, minus n -&gt; A)</code>, but you're trying to rewrite the <code>minus</code> to not be there any more</p>",
        "id": 292024290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659627116
    },
    {
        "content": "<p>Yes, that solves the goal :).<br>\nOkay, I will have to look at what <code>congr'</code> and <code>ext</code> does.</p>",
        "id": 292024693,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1659627296
    }
]