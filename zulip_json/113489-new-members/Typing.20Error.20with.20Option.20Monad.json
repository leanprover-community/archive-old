[
    {
        "content": "<p>I have a function that looks like this, which is well-typed in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">on₁</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"n\">n₁</span> <span class=\"bp\">←</span> <span class=\"n\">on₁</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">n₁</span>\n</code></pre></div>\n<p>I have a similar one, that is ill-typed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">on₁</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"n\">n₁</span> <span class=\"bp\">←</span> <span class=\"n\">on₁</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">n₁</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>For test2, Lean complains with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">bind</span> <span class=\"n\">on₁</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">on₁</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">option</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>Why is <code>on₁</code> expected to have type <code>list ℕ</code>, instead of <code>option ℕ</code>? As far as I can understand, <code>on₁</code> is the input of type <code>option ℕ</code>, and I'm returning <code>[n₁]</code> which is the output of type <code>list ℕ</code>. Any help would be appreciated.</p>",
        "id": 229704647,
        "sender_full_name": "Arjun Viswanathan",
        "timestamp": 1615396359
    },
    {
        "content": "<p>In your <code>test2</code>, once you start the <code>do n₁ ← on₁</code>, that is expected to return an <code>list nat</code>, since the first bind is on an <code>list nat</code></p>",
        "id": 229705485,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615396641
    },
    {
        "content": "<p>Because you told lean that the function will return a <code>list</code></p>",
        "id": 229705558,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615396666
    },
    {
        "content": "<p>Let's say that lean inferred the type based on the argument on the left side of the arrow. Then where does your <code>option</code> go? Once you'd be in the <code>option</code> monad, your output value would be of type <code>option (list nat)</code> (if you did <code>pure [n1]</code>)</p>",
        "id": 229705931,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615396798
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.to_list\">docs#option.to_list</a> to see an example without using <code>do</code></p>",
        "id": 229706149,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615396856
    },
    {
        "content": "<p>Makes sense that I'd need an <code>option (list nat)</code> now, thanks!</p>",
        "id": 229791179,
        "sender_full_name": "Arjun Viswanathan",
        "timestamp": 1615436283
    }
]