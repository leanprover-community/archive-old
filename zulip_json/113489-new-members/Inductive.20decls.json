[
    {
        "content": "<p>Why is it illegal to declare</p>\n<div class=\"codehilite\"><pre><span></span>inductive foo\n| mk (f : foo → ℕ)\n</pre></div>",
        "id": 166976460,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559289651
    },
    {
        "content": "<p>whereas</p>\n<div class=\"codehilite\"><pre><span></span>inductive foo&#39;\n| mk (f : ℕ → foo&#39;)\n</pre></div>\n\n\n<p>is fine?</p>",
        "id": 166976486,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559289681
    },
    {
        "content": "<p>Is there an (easy?) proof of false?</p>",
        "id": 166976494,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559289699
    },
    {
        "content": "<p>I think the first problem is that it's not clear what the recursor should be.</p>",
        "id": 166977904,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1559291016
    },
    {
        "content": "<p>yeah I was thinking about that.</p>",
        "id": 166977973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1559291048
    },
    {
        "content": "<p>And then all of the sensible definitions of <code>rec</code>  let you make infinite descending terms. edit: or derive false or something.</p>",
        "id": 166978033,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1559291120
    },
    {
        "content": "<p>The thing to look up is called \"strict positivity\"</p>",
        "id": 166978206,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1559291273
    },
    {
        "content": "<p>It's easy enough to adapt examples like this one: <a href=\"https://cstheory.stackexchange.com/questions/14415/guarded-negative-occurrences-in-definition-of-inductive-types-always-bad\" target=\"_blank\" title=\"https://cstheory.stackexchange.com/questions/14415/guarded-negative-occurrences-in-definition-of-inductive-types-always-bad\">https://cstheory.stackexchange.com/questions/14415/guarded-negative-occurrences-in-definition-of-inductive-types-always-bad</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">constant</span> <span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"kn\">constant</span> <span class=\"n\">inj</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">self_app</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">inj</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">ta</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nf</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">self_app</span> <span class=\"err\">$</span> <span class=\"n\">mk</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nf</span> <span class=\"err\">$</span> <span class=\"n\">self_app</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">ta</span> <span class=\"n\">id</span>\n</pre></div>",
        "id": 166978486,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1559291571
    },
    {
        "content": "<p>Awesome! Thanks for the demo.<br>\nIf I make <code>mk</code> increase universe level by one the demo fails;</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kn\">constant</span> <span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"kn\">constant</span> <span class=\"n\">inj</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">self_app</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">inj</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">ta</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nf</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">self_app</span> <span class=\"err\">$</span> <span class=\"n\">mk</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nf</span> <span class=\"err\">$</span> <span class=\"n\">self_app</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">ta</span> <span class=\"n\">id</span>\n</pre></div>\n\n\n<p>Am I safe now? If so, is there any way to make lean build this?</p>",
        "id": 166979022,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559292170
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kn\">constant</span> <span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"kn\">constant</span> <span class=\"n\">inj</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">self_app</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">inj</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">ta</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nf</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">self_app</span> <span class=\"err\">$</span> <span class=\"n\">mk</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nf</span> <span class=\"err\">$</span> <span class=\"n\">self_app</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">ta</span> <span class=\"n\">id</span>\n</pre></div>",
        "id": 166980017,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1559293133
    },
    {
        "content": "<p>Actually, I'm not quite sure I understand---why is <code>\\alpha</code> free to vary in those axioms? If I force <code>\\alpha</code> to be <code>\\nat</code>, can it work?</p>",
        "id": 166981834,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559294879
    },
    {
        "content": "<p>the short answer is \"no, this type violates cantor's theorem\"</p>",
        "id": 166982028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559295050
    },
    {
        "content": "<p>I agree that something is funny in Rob's example. We don't need <code>ta</code>, it's already a contradiction in <code>self_app</code> if we instantiate <code>alpha</code> as <code>false</code></p>",
        "id": 166982314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559295343
    },
    {
        "content": "<p>and also <code>self_app</code> isn't diagonalizing in the second version</p>",
        "id": 166982378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559295375
    },
    {
        "content": "<p>Yeah, I just copied it from the StackOverflow answer, I'm sure there are shorter ways.</p>",
        "id": 166982445,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1559295471
    },
    {
        "content": "<p>I would guess that you are actually safe if <code>mk</code> bumps the universe, but this is not the sort of definition lean can handle. It's recursive in a weird way - <code>foo.{n+1}</code> is defined in terms of <code>foo.{n}</code></p>",
        "id": 166982495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559295484
    },
    {
        "content": "<p>Rob, I think that <code>inj</code> is not a reasonable axiom - if you just look at <code>inj</code> it says <code>foo -&gt; foo -&gt; A</code> for all <code>A</code></p>",
        "id": 166982685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559295685
    },
    {
        "content": "<p>Oh, wait, I see what you're saying.</p>",
        "id": 166982687,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1559295688
    },
    {
        "content": "<p>Heh, we just had our coffee break and it's kicking in now.</p>",
        "id": 166982696,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1559295705
    },
    {
        "content": "<p>You're right, that's too strong. But I'm not convinced that bumping the universe saves you, could you explain?</p>",
        "id": 166982818,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1559295823
    },
    {
        "content": "<p>you have to have a fixed alpha, like Keeley says</p>",
        "id": 166982875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559295846
    },
    {
        "content": "<p>right now you can use <code>mk</code> with one <code>alpha</code> and <code>inj</code> with another - and that's actually what you are doing in the proof, you use <code>mk</code> with <code>true</code> and <code>inj</code> with <code>false</code></p>",
        "id": 166982895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559295881
    },
    {
        "content": "<p>Imagine you could just define <code>foo.{u+1} := foo.{u} -&gt; nat</code>, that would satisfy all the axioms</p>",
        "id": 166982943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559295945
    },
    {
        "content": "<p>it's not really recursive, since for each fixed u it's a finite number of arrows</p>",
        "id": 166982996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559295969
    },
    {
        "content": "<p>in fact such a type probably even exists, since <code>Set.{u}</code> grows faster than <code>foo.{u}</code></p>",
        "id": 166983026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559296024
    },
    {
        "content": "<p>Thinking about it more carefully, I think this is not definable. If it was, then we could define <code>level.{u} : nat</code> which is equal to <code>u</code> as a nat</p>",
        "id": 166983397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559296477
    },
    {
        "content": "<p><code>Set.{u}</code> <em>almost</em> lets you define <code>level</code>, but you can only guarantee <code>u</code> <em>or more</em> inaccessible cardinals in it. There is a sort of cardinal collapsing property here - the theory can't tell if you just take one of the <code>Type u</code> universes out and shift the indexes of everything else down</p>",
        "id": 166983526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559296600
    },
    {
        "content": "<p>Looking at <code>Set</code> more than I have before, it seems like the way to get around having a <code>foo -&gt; Prop</code> is choosing an indexing type <code>\\alpha</code> and looking at maps <code>\\alpha -&gt; foo</code> instead. Since you can choose the indexing type as large as you want, isn't there some sort of bijection between these two pieces of data?</p>",
        "id": 166983556,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559296658
    },
    {
        "content": "<p>that's why <code>Set</code> lives in a higher universe</p>",
        "id": 166983569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559296682
    },
    {
        "content": "<p>(modulo a quotient of such maps by permutations of the indexing type and change of indexing type)</p>",
        "id": 166983616,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559296704
    },
    {
        "content": "<p>you can't instantiate <code>Set.{u}</code> with <code>Set.{u}</code> as the index type</p>",
        "id": 166983620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559296720
    },
    {
        "content": "<p>For sure</p>",
        "id": 166983729,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559296842
    },
    {
        "content": "<p>so you don't get a cantor contradiction, instead you just end up proving that <code>Set.{u}</code> is (a lot) smaller than <code>Set.{u+1}</code></p>",
        "id": 166983774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559296884
    },
    {
        "content": "<p>Regarding your comments on <code>level</code>, why would it be bad if <code>level.{u} : nat</code> existed?</p>",
        "id": 166991843,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559305260
    },
    {
        "content": "<p>(Sorry for using you to learn about type theory)</p>",
        "id": 166991860,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559305274
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 167024486,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559329534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> It wouldn't necessarily be bad if <code>level.{u}</code> existed, but I'm pretty sure it's independent</p>",
        "id": 167024791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559329761
    },
    {
        "content": "<p>(oops, I replied to the wrong thread)</p>",
        "id": 167024889,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559329828
    }
]