[
    {
        "content": "<p>Hi, is there a way to specialize types ? What I mean is I have two complex inner product spaces <code>A</code>, <code>B</code> and I'd want a type <code>C := A →L[ℂ] B</code> for the sake of readability. I have tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">lin_bounded_map</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span>  <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>  <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>but when asking for a <code>A →L[ℂ] B</code> the compiler isnt happy with me providing a <code>lin_bounded_map A B</code> instead. I imagine I can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">lin_bounded_map</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span>  <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_func</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but it seems suboptimal</p>",
        "id": 290238441,
        "sender_full_name": "Magalame",
        "timestamp": 1658325572
    },
    {
        "content": "<p>What you want is probably</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lin_bounded_map</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span>  <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 290240330,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658326353
    },
    {
        "content": "<p>Right; <span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span>'s answer is \"don't extend things if you're not actually adding any new fields\".</p>\n<p>If you were adding new fields, then the answer is sometimes <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map_class\">docs#continuous_linear_map_class</a>, which lets you register that <code>lin_bounded_map </code> \"is\" a continuous linear map</p>",
        "id": 290240619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658326496
    },
    {
        "content": "<p>excellent thanks a lot!</p>",
        "id": 290254519,
        "sender_full_name": "Magalame",
        "timestamp": 1658332239
    }
]