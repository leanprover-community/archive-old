[
    {
        "content": "<p>Question posted to stackoverflow:</p>\n<p><a href=\"https://stackoverflow.com/q/58577206/268581\" target=\"_blank\" title=\"https://stackoverflow.com/q/58577206/268581\">https://stackoverflow.com/q/58577206/268581</a></p>\n<p>Thanks for any suggestions!</p>",
        "id": 179158464,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572159655
    },
    {
        "content": "<p>I posted a suggested answer.</p>",
        "id": 179161652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572165612
    },
    {
        "content": "<p>Based on Kevin's suggestion, here's what I have so far:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpqf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n\n        <span class=\"n\">by_cases</span>\n\n            <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n\n                <span class=\"n\">by_cases</span>\n\n                    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq&#39;</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hpqf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp&#39;</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">)))</span>\n\n                    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hqf</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">hp</span> <span class=\"n\">hqf</span><span class=\"o\">))</span>\n\n            <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n\n                <span class=\"n\">by_cases</span>\n\n                    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">hpqf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">)))</span>\n\n                    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hqf</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"bp\">_</span>\n\n                        <span class=\"c1\">-- and.intro hp hqf                         But we don&#39;t have hp.</span>\n\n                        <span class=\"c1\">-- false.elim (hpqf (λ hp : p, hq))         But we don&#39;t have hq.</span>\n\n                    <span class=\"o\">)))</span>\n</pre></div>\n\n\n<p>The first three cases appear to be complete.</p>\n<p>In the last case, we have the following:</p>\n<div class=\"codehilite\"><pre><span></span>hpqf : (p → q) → false,\nhpf : p → false,\nhqf : q → false\n</pre></div>\n\n\n<p>As the inline comments above say, one option is:</p>\n<p><code>and.intro hp hqf                         -- But we don't have hp.</code></p>\n<p>Another option is:</p>\n<p><code>false.elim (hpqf (λ hp : p, hq))         -- But we don't have hq.</code></p>\n<p>Should I aim for the <code>and.intro ...</code> approach? Or the <code>false.elim ...</code> approach? Or something entirely different? :-)</p>\n<p>Thanks for your help so far!</p>\n<p>Hang on... I think I see it...</p>",
        "id": 179165085,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572171996
    },
    {
        "content": "<p>OK, this seems to work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpqf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n\n        <span class=\"n\">by_cases</span>\n\n            <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n\n                <span class=\"n\">by_cases</span>\n\n                    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq&#39;</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hpqf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp&#39;</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">)))</span>\n\n                    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hqf</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">hp</span> <span class=\"n\">hqf</span><span class=\"o\">))</span>\n\n            <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n\n                <span class=\"n\">by_cases</span>\n\n                    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">hpqf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">)))</span>\n\n                    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hqf</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n\n                        <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">hpqf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">hpf</span> <span class=\"n\">hp</span><span class=\"o\">))))))</span>\n</pre></div>",
        "id": 179165666,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572172998
    },
    {
        "content": "<p>Thanks for your help <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> !!!</p>",
        "id": 179165668,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572173016
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tauto</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"n\">def</span> <span class=\"n\">XYZ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">XYZ</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  def XYZ : ∀ (p q : Prop), ¬(p → q) → p ∧ ¬q :=</span>\n<span class=\"cm\">  λ (p q : Prop) (a : ¬(p → q)),</span>\n<span class=\"cm\">  and.dcases_on (not_imp.mp a) (λ (a_left : p) (a_right : ¬q), ⟨eq.mpr rfl a_left, eq.mpr rfl a_right⟩)</span>\n<span class=\"cm\">  -/</span>\n</pre></div>",
        "id": 179165856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572173399
    },
    {
        "content": "<p>There's a super-short term mode proof, using stuff in the mathlib library which is not covered by Theorem Proving In Lean.</p>",
        "id": 179165906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572173444
    },
    {
        "content": "<p>I do understand that you're learning this stuff so in some sense these answers are not useful, but I thought it was worth emphasizing how many ways there are to solve this problem, and what is available to you in Lean's maths library. In fact looking at the proof which <code>tauto!</code> finds I see that we can just do this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">not_imp</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n</pre></div>",
        "id": 179166028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572173663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> ,</p>\n<p>These more advanced answers are very useful! Indeed, I'm interested in the various approaches. Yes, it's true that I'm currently focused on the \"finger exercises\" approach, but it's nice to know that exotic islands await.</p>",
        "id": 179166098,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572173872
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n<span class=\"c1\">-- OK let&#39;s intro everything</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span> <span class=\"bp\">_</span>\n<span class=\"c1\">-- The goal is ∧ so let&#39;s use and.intro</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n<span class=\"c1\">-- I can&#39;t prove p directly, so let&#39;s try contradiction</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n<span class=\"c1\">-- The only non-trivial step is to apply hnpq</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">hnpq</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n<span class=\"c1\">-- The goal is → so let&#39;s intro everything</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">hnpq</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n<span class=\"c1\">-- Oh I see a contradiction already: ¬p and p. I remember that&#39;s either hnp.elim hp or (hnp hp).elim</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">hnpq</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hnp</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">hnpq</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hnp</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n<span class=\"c1\">-- I&#39;ll just use the first one. Now the goal is ¬, so let&#39;s intro.</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">hnpq</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hnp</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n<span class=\"c1\">-- The only non-trivial step is to apply hnpq</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">hnpq</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hnp</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hnpq</span> <span class=\"bp\">_⟩</span>\n<span class=\"c1\">-- The goal is → so I intro.</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">hnpq</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hnp</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hnpq</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n<span class=\"c1\">-- The goal is in the assumptions.</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">hnpq</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hnp</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hnpq</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 179167713,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572176898
    },
    {
        "content": "<p>I commentate my thoughts as I fill in the solution <span class=\"user-mention\" data-user-id=\"243015\">@Eduardo Cavazos</span></p>",
        "id": 179167715,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572176918
    },
    {
        "content": "<p>I'm sure <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> thinks the same way</p>",
        "id": 179167722,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572176938
    },
    {
        "content": "<p>I would probably do the same steps as Kenny, but in tactic mode. Perhaps at the end I'd then have an extra step golfing it back into term mode, if I care enough.</p>",
        "id": 179168341,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572178082
    },
    {
        "content": "<p>I find tactic mode much more pleasant. :-)</p>",
        "id": 179168384,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572178094
    },
    {
        "content": "<p>For basic logic stuff like this I can see the appeal of term mode.</p>",
        "id": 179168617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572178548
    },
    {
        "content": "<p>One thing I've only learned relatively recently is that for these goals which are not provable constructively, one powerful trick is just to apply <code>classical.by_contradiction</code> whenever you're stuck.</p>",
        "id": 179168674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572178672
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hnqnp</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"c1\">-- stuck</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hnqnp</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"bp\">_</span> <span class=\"c1\">-- I can do the rest in my head now</span>\n</pre></div>",
        "id": 179168748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572178783
    },
    {
        "content": "<p>I see that you've internalized constructivism :P</p>",
        "id": 179168790,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572178807
    },
    {
        "content": "<p>I've internalised precisely how to avoid the problems it gives you.</p>",
        "id": 179168797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572178864
    },
    {
        "content": "<p>Thanks for that illustration <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>! I hadn't used <code>logic.basic</code> yet. It caused me to see that I didn't even have <code>mathlib</code> installed  yet. I do now, and I've worked through your example. Thanks!</p>",
        "id": 179192924,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572221093
    }
]