[
    {
        "content": "<p>I've been making good progress learning how to prove a bunch of basic things about the less-than-or-equal-to relation on the natural numbers, but I realize I do not really understand how to prove something is false. Any hints on this one? It's obviously false because that's how I've defined my <code>nat.le</code> function but I don't know how to put that on the right side of my theorem. This is Lean4 code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">nat.ple</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nat.ple</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">nat.le</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">nat.ple</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_le_zero_false</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat.le</span> <span class=\"n\">a.succ</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 239458248,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1621442799
    },
    {
        "content": "<p>Can you show <code>nat.ple a.succ zero = false</code>?</p>",
        "id": 239459025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621443122
    },
    {
        "content": "<p>Lean 4 doesn't have equation lemmas (yet), right?</p>",
        "id": 239459803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621443419
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">succ_le_zero_false</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat.le</span> <span class=\"n\">a.succ</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 239465472,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1621445622
    },
    {
        "content": "<p>you can use dependent elimination.</p>",
        "id": 239465485,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1621445629
    },
    {
        "content": "<p>by a distinction by cases on something that's false, i.e. it has 0 constructors, the goal closes automatically.</p>",
        "id": 239465824,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1621445735
    }
]