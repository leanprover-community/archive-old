[
    {
        "content": "<p>Hello everyone, hope you're having a great day ! Today's problem is : I am struggling to find in mathlib some lemmas I'm used to rely on when working with limits of sequences of real numbers. More precisely, I can't find these lemmas : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">monotone_tendsto</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"bp\">‚à®</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lim_le_of_almost_le</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span> <span class=\"bp\">‚â•</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I would be able to prove them quite easily if I were using epsilon-delta-limits, but I want to use mathlib as much as possible for the little project I'm working on, and I am not yet familiar with working with filters. These lemmas seem so important to me that I'm sure there are almost identical (probably more generic) lemmas in the lib, but the search is very hard : as a first year undergraduate, I only know properties of sequences of real numbers, and I don't know what structure allows which property, which makes it very inconvenient to search in the lib : should I search in <code>filter</code> ? <code>topology</code> ? <code>topology.metric_space</code>, and so on... So I thought people here would be able to help. Thanks in advance !</p>",
        "id": 201634496,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592846134
    },
    {
        "content": "<p>You know that there will be some lemma which says that this whole tendsto filter business is equivalent to the usual epsilon-delta definition? So you could just rewrite and then prove it yourself. However it would not surprise me at all if there was some direct fancy filter proof which is two incomprehensible lines too :-)</p>",
        "id": 201634671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592846222
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">monotone_tendsto</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"bp\">‚à®</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">metric</span><span class=\"bp\">.</span><span class=\"n\">tendsto_nhds</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tendsto_at_top</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- etc</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201635367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592846565
    },
    {
        "content": "<p>The second one is <code>ge_of_tendsto at_top_ne_bot hu $ eventually_at_top.mpr hle</code></p>",
        "id": 201635625,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592846690
    },
    {
        "content": "<p>I don't think the first one is stated in this way, but it should be easy to deduce from existing lemmas.</p>",
        "id": 201635721,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592846738
    },
    {
        "content": "<p>Maybe from</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_at_top_supr_nat</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_linear_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"o\">(</span><span class=\"err\">‚®Ü</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 201635847,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592846783
    },
    {
        "content": "<p>Also, you don't need all those imports, importing is transitive.</p>",
        "id": 201635851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592846784
    },
    {
        "content": "<p>Reid, we need a <em>conditionaly</em> complete version</p>",
        "id": 201635896,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592846807
    },
    {
        "content": "<p>I was just planning to use <code>ereal</code></p>",
        "id": 201635914,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592846820
    },
    {
        "content": "<p>but I agree such a version would be more convenient</p>",
        "id": 201635982,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592846855
    },
    {
        "content": "<p>well, possibly more convenient depending on what happens at the use of <code>monotone_tendsto</code>.</p>",
        "id": 201636168,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592846960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/sequence.20limit.20lemmas/near/201635625\">said</a>:</p>\n<blockquote>\n<p>The second one is <code>ge_of_tendsto at_top_ne_bot hu $ eventually_at_top.mpr hle</code></p>\n</blockquote>\n<p>sorry, one incomprehensible line :-)</p>",
        "id": 201636611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592847178
    },
    {
        "content": "<p>Actually that one is pretty readable.</p>",
        "id": 201636670,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592847206
    },
    {
        "content": "<p>It's pretty easy to guess what each piece refers to, and to understand how this is relevant.</p>",
        "id": 201636720,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592847234
    },
    {
        "content": "<p>Maybe not to someone who's just done your tutorials and nothing else :-) (but actually I know Anatole has done a bunch of other stuff, I'm sure he can figure out what's going on by hovering to look at the types and thinking hard).</p>",
        "id": 201636839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592847283
    },
    {
        "content": "<p>In fact <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> you might want to try the widgets version of the VS Code extension here, search for messages by Edward Ayers containing a <code>.vsix</code> link and download the most recent; then follow instructions <a href=\"#narrow/stream/113488-general/topic/Lean.203.2E16.2E0/near/201159649\">here</a>. Then you'll be able to click on every term in Patrick's proof and see what is going on at each step even more easily than just doing all the unification yourself.</p>",
        "id": 201637263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592847545
    },
    {
        "content": "<p>You don't need that, since a couple of week you can move your cursor in a proof term to see what each subterm is proving.</p>",
        "id": 201637526,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592847700
    },
    {
        "content": "<p>Thanks to everyone ! Now I just have to update my installation of mathlib, because I don't have these lemmas <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Guess I'll do a fresh install distinct from the math114 installation, as I was planning to do anyway</p>",
        "id": 201640172,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592849013
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/install/debian.html\">https://leanprover-community.github.io/install/debian.html</a></p>",
        "id": 201641406,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592849710
    },
    {
        "content": "<p>Yes, that's where I am !</p>",
        "id": 201641570,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592849774
    },
    {
        "content": "<p>One can answer your intial question by:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_at_top_supr_of_bdd</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_mono</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbdd</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"err\">$</span> <span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"o\">(</span><span class=\"err\">‚®Ü</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tendsto_order</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eventually_at_top</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">exists_lt_of_lt_csupr</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">‚ü®</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hN</span> <span class=\"o\">(</span><span class=\"n\">h_mono</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">‚ü©</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">univ_mem_sets&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">le_csupr</span> <span class=\"n\">hbdd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_at_top_of_monotone</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span><span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">tendsto_at_top</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_at_top_sets</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">not_bdd_above_iff</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"bp\">‚ü®_</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">‚ü®</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hN</span> <span class=\"err\">$</span> <span class=\"n\">h</span> <span class=\"n\">hn</span><span class=\"o\">)</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">monotone_tendsto</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"bp\">‚à®</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">u</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">‚ü®</span><span class=\"n\">supr</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">tendsto_at_top_supr_of_bdd</span> <span class=\"n\">h</span> <span class=\"n\">H</span><span class=\"bp\">‚ü©</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">tendsto_at_top_of_monotone</span> <span class=\"n\">h</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lim_le_of_almost_le</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span> <span class=\"bp\">‚â•</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"n\">ge_of_tendsto</span> <span class=\"n\">at_top_ne_bot</span> <span class=\"n\">hu</span> <span class=\"err\">$</span> <span class=\"n\">eventually_at_top</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hle</span>\n</code></pre></div>\n\n\n<p>The first two lemmas should be in <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/ordered.html\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/ordered.html</a> (feel free to open a PR). The last lemma already is, and the remaining one is too weak, you should replace the existential with the \"explicit\" description of the limit.</p>",
        "id": 201644310,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592851105
    },
    {
        "content": "<p>And of course both <code>‚Ñï</code> and <code>‚Ñù</code> can be generalized as in the previous lemmas.</p>",
        "id": 201644398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592851166
    }
]