[
    {
        "content": "<p>I'm aware of <a href=\"https://leanprover.github.io/programming_in_lean/programming_in_lean.pdf\" target=\"_blank\" title=\"https://leanprover.github.io/programming_in_lean/programming_in_lean.pdf\">Programming in Lean</a>.  Googling just now I found a tech report <a href=\"http://matryoshka.gforge.inria.fr/pubs/lehenaff_report.pdf\" target=\"_blank\" title=\"http://matryoshka.gforge.inria.fr/pubs/lehenaff_report.pdf\">Meta-programming with the Lean proof assistant</a>.  Are there any other  guides along these lines for someone starting out writing tactics?</p>",
        "id": 158606539,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1550228666
    },
    {
        "content": "<p>Didn't Patrick write something in the mathlib docs directory?</p>",
        "id": 158606554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550228702
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md</a></p>",
        "id": 158606576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550228752
    },
    {
        "content": "<p>yes</p>",
        "id": 158606578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550228755
    },
    {
        "content": "<p>and that's all I know about.</p>",
        "id": 158606634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550228793
    },
    {
        "content": "<p>or at least all I can remember right now</p>",
        "id": 158606637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550228805
    },
    {
        "content": "<p>thanks for the link!</p>",
        "id": 158606928,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1550229199
    },
    {
        "content": "<p>I'm starting to play around writing my own tactics as well, but the links provided here are not of much help yet to me. I'm using Lean4, which seems to go about writing tactics a bit differently than Lean3 (at least, the examples provided don't work). I have seen one very very basic example in the Lean4 manual, basically writing a simple macro, but when I try to rework that into my own examples I fail miserably.</p>\n<p>Maybe someone can help me get started if I give a small example?</p>\n<p>This piece of code works fine in my own context, where I've defined what a Frame is properly.<br>\nAlso, I've managed to write the proof in a generic way, so that it also works on a number of other theorems if I copy paste it.<br>\nSo... next step would be to write a macro tactic for it. But how?<br>\nIdeally, F is a parameter to that macro.</p>\n<div class=\"codehilite\" data-code-language=\"theorem\"><pre><span></span><code>   try intros\n   apply F.antisymmetric\n   repeat all_goals try apply (F.meet_def _ _).right.right _ ; constructor\n   repeat all_goals\n      try apply F.reflexive _\n      try apply (F.meet_def _ _).left\n      try apply (F.meet_def _ _).right.left\n      try apply F.transitive _ _ _ (F.meet_def _ _).left (F.meet_def _ _).left\n      try apply F.transitive _ _ _ (F.meet_def _ _).right.left (F.meet_def _ _).left\n      try apply F.transitive _ _ _ (F.meet_def _ _).left (F.meet_def _ _).right.left\n      try apply F.transitive _ _ _ (F.meet_def _ _).right.left (F.meet_def _ _).right.left\n</code></pre></div>\n<p>Any suggestions?</p>",
        "id": 310423821,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1668609222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"563058\">@Pieter Cuijpers</span> Feel free to ask this kind of question in <a class=\"stream\" data-stream-id=\"239415\" href=\"/#narrow/stream/239415-metaprogramming-.2F-tactics\">#metaprogramming / tactics</a> for more visibility. A quick idea: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_rules\">tactic#apply_rules</a> might help encapsulate this logic.  It takes a list of lemmas, or an attribute with which several lemmas have been tagged, and it tries applying all these lemmas to the goal until none of them is applicable any longer.</p>",
        "id": 310492670,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668629435
    },
    {
        "content": "<p>In your case, it looks like <code>F</code> is an equivalence relation, and <code>F.meet_def a b</code> contains some pieces <code>.left</code>, <code>.right.left</code>, and <code>.right.right</code> which are identities featuring that equivalence relation.  Is that right?  If so, it seems to have similarities to things which are well-studied.  For example, maybe you could pass to the quotient by <code>F</code>, and then use the powerful tactic <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#cc\">tactic#cc</a>.</p>",
        "id": 310493950,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668629930
    },
    {
        "content": "<p>Thanks for the response, I'll ask again in the right stream. Your answer is interesting, but seems inapplicable to Lean4?</p>",
        "id": 310504819,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1668634173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"563058\">@Pieter Cuijpers</span>  You're right that I linked to Lean 3 documentation, but <code>apply_rules</code> has already been ported to Lean 4, and <code>cc</code> is expected to be ported.</p>",
        "id": 310505325,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668634336
    },
    {
        "content": "<p>Ah, I'll dig a bit deeper then.<br>\nStill wondering how to write my own though...</p>",
        "id": 310505648,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1668634457
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 310522990,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668642795
    }
]