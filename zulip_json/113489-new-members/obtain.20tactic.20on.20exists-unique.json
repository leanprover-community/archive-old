[
    {
        "content": "<p>Here's what I mean. What's the difference in the usage of <code>obtain</code> in the first example vs the second one?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">invertible_matrix</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"bp\">//</span> <span class=\"bp\">∃!</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">inv_mat_unique</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n                     <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">one_mul</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">hC</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">inv_mat_inv</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"o\">(</span><span class=\"n\">invertible_matrix</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"c1\">-- obtain ⟨Ainv,  hA⟩ := A.property, -- can&#39;t use obtain here for some reason</span>\n           <span class=\"c1\">-- induction tactic failed, recursor &#39;Exists.dcases_on&#39; can only eliminate into Prop</span>\n           <span class=\"n\">choose</span> <span class=\"n\">Ainv</span> <span class=\"n\">hA</span> <span class=\"kn\">using</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">,</span>\n           <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n           <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">Ainv</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n           <span class=\"n\">use</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n           <span class=\"n\">split</span><span class=\"o\">,</span>\n           <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">swap</span> <span class=\"n\">h</span><span class=\"o\">)},</span>\n           <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">B</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">inv_mat_unique</span> <span class=\"n\">hB</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"o\">}</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">inv_mat_mul</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">invertible_matrix</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n   <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">Ainv</span><span class=\"o\">,</span> <span class=\"n\">hA</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">,</span> <span class=\"c1\">-- but I can use it here!</span>\n   <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">Binv</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">,</span>\n   <span class=\"n\">use</span> <span class=\"n\">Binv</span> <span class=\"bp\">*</span> <span class=\"n\">Ainv</span><span class=\"o\">,</span>\n   <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n   <span class=\"n\">sorry</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 201220644,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592444703
    },
    {
        "content": "<p>the error message you put into the comments tells you what's wrong</p>",
        "id": 201220729,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592444831
    },
    {
        "content": "<p>you can use an existential to prove things but not to construct data</p>",
        "id": 201220738,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592444855
    },
    {
        "content": "<p>So because I have to provide <code>Ainv</code> to the instance, I can't use <code>obtain</code>. But since I can construct <code>A.val * B.val</code> without inspecting their respective properties, I can <code>obtain</code> from the properties.</p>",
        "id": 201220820,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592444976
    },
    {
        "content": "<p>This matches intuition that an inverse would be noncomputable, but showing that an the product of two invertible matrices is still invertible does not rely on the construction of the inverse itself.</p>",
        "id": 201220892,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592445039
    },
    {
        "content": "<p>the things you're saying sound good, but i'm far from an expert and can't add anything useful</p>",
        "id": 201220917,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592445088
    },
    {
        "content": "<p>Before I had just plain <code>\\ex</code> in the definition of the subtype, and that required a <code>noncomputable</code>. By setting it to exists-unique, the noncomputable requirement went away.</p>",
        "id": 201220920,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592445092
    },
    {
        "content": "<p>You shouldn't use tactics to construct data, you'll find the constructions generated by tactics very hard to prove things about in general. You can't get from Prop to Type with cases for constructivism reasons, you have to use classical.some to get there. Why not just ask for B such that AB=1 by the way? Making definitions simpler just makes life easier. You can prove the inverse is unique and two-sided later (you'll need that your matrices are finite in order to do this and it might be already done but it might not be)</p>",
        "id": 201233134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592463185
    }
]