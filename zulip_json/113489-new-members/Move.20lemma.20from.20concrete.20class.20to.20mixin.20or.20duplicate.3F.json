[
    {
        "content": "<p>Hello! I'm currently working with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/localized_module\">docs#localized_module</a> and its mixin class <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_localized_module\">docs#is_localized_module</a>. I've decided I need <code>localized_module.is_module'</code> and <code>localized_module.is_scalar_tower</code> to hold for <code>is_localized_module</code> instead of <code>localized_module</code>.<br>\nShould I move it to the mixin class and hope that class inference picks up on this for existing use-cases? Or should I duplicate the instances for the mixin class so that it holds for both?</p>",
        "id": 316669798,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1671427964
    },
    {
        "content": "<p>Unfortunately <code>is_localized_module S f</code> doesn't have the right structure to work for <code>is_module'</code> or <code>is_scalar_tower</code>:</p>",
        "id": 316790926,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1671469989
    },
    {
        "content": "<p>First of all, <code>is_module'</code> would take <code>is_localized_module S (f : M →[R] N)</code> and return <code>module R N</code>. But the type of <code>f</code> already assumes <code>N</code> is an <code>R</code>-module. So I don't see why you need it :/</p>",
        "id": 316791456,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1671470130
    },
    {
        "content": "<p>For <code>is_scalar_tower</code> the issue is as follows: suppose we want an instance of <code>is_scalar_tower R (localization (S : submonoid R)) N</code>. Lean searches through the candidate instances and tries to apply <code>is_localized_module.is_scalar_tower ?S (?f : ?M →[?R] ?N) : is_scalar_tower ?R (localization ?S) ?N</code> (the question marks represent metavariables to be filled by unification). It figures out <code>?R = R</code>, <code>?S = S</code> and <code>?N = N</code>, but there is no way for it to figure out which <code>?f</code> to use.</p>",
        "id": 316792288,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1671470379
    },
    {
        "content": "<p>In general the rule is that all parameters to an instance <code>inst</code> should be able to be automatically figured out either through unification (i.e. appear in the result type) or through instance synthesis. A good test is that <code>apply inst</code> should never produce any new goals.</p>",
        "id": 316793231,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1671470662
    },
    {
        "content": "<p>oh oops, I meant <a href=\"https://leanprover-community.github.io/mathlib_docs/find/localized_module.is_module\">docs#localized_module.is_module</a> which would provide <code>module (localization S) N</code> instead.<br>\nthe unification problem is exactly what I'm asking about! <br>\nWouldn't <code>[is_localized_module.is_scalar_tower</code> take an implicit argument of <code>[is_localized_module S f]</code> which could be filled in by <code>localized_module.is_localized_module</code>? or is this too difficult to infer</p>",
        "id": 316829209,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1671483102
    },
    {
        "content": "<p>So yes, <code>f</code> can be filled in in the end if we continue synthesizing instances. However, this has two big disadvantages: First is that I'm pretty sure Lean won't start looking for instances until all parameters have been filled. Second is that there is no guarantee that we'll find the instance for the right <code>f</code>: a priori there could be many <code>f : M →[R] N</code> with the right properties. I'm pretty sure we can prove those are all equal, but Lean doesn't know this by definition. So you're somewhat likely to have to use <code>congr</code> and <code>convert</code> and etc. to get your lemmas to apply when they pick up the wrong <code>f</code>.</p>",
        "id": 317147370,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1671625932
    },
    {
        "content": "<p>It seems like making these instances do all the work on <code>localized_module</code> would be a good idea, and I can think of two ways we can go about it:</p>",
        "id": 317148380,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1671626316
    },
    {
        "content": "<ul>\n<li>If for fixed values of <code>S M N</code> there is a canonical <code>f</code>, then we should redefine the <code>is_localized_module</code> to instead have type <code>is_localized_module (S : submonoid R) (M N : Type*) (f : out_param (M →[R] N))</code>. In exchange for promising never to have an instance with the same values for <code>S M N</code> and different values for <code>f</code>, Lean will allow (force!) <code>f</code> to be a free variable that is found alongside the proof that <code>f</code> is indeed a localized module.</li>\n</ul>",
        "id": 317148496,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1671626364
    },
    {
        "content": "<ul>\n<li>We copy the approach used by ring localizations (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_localization\">docs#is_localization</a>): we pass in <code>f</code> through another typeclass, providing a canonical map <code>f : M →[R] N</code> given values for <code>R M N</code>. I expect this will be more convenient in practice since <code>algebra</code> is very convenient. In fact, I was already trying to implement classes for doing this. However, due to many details changing between Lean 3 and Lean 4, we'll probably have to wait for the mathlib4 port to finish before we can implement something complicated along these lines.</li>\n</ul>",
        "id": 317149142,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1671626577
    }
]