[
    {
        "content": "<p>If in an involved example :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n</code></pre></div>\n<p>I want to construct objects which are of type <code>set I</code> or are subtypes of <code>I</code>, and then mainly work on the cardinals of those object.<br>\nWhich is a better defn for these objects? <code>{i : I | p i}</code> or <code>{i : I // p i}</code>?</p>",
        "id": 246219948,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626440810
    },
    {
        "content": "<p>Which one would be more convenient?</p>",
        "id": 246220096,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626440896
    },
    {
        "content": "<p>If you use <code>{i : I | p i}</code> as a type you're really using <code>↥{i : I | p i}</code> aka <code>{i : I // i ∈ {j : I | p j}}</code></p>",
        "id": 246220561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626441165
    },
    {
        "content": "<p>So it's usually better to state lemmas as <code>{i : I // p i}</code> or even just <code>subtype p</code> which means the same thing</p>",
        "id": 246220609,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626441190
    },
    {
        "content": "<p>Otherwise you risk ending up with <code>(∈ {j : I | p j})</code> as a really silly (but thankfully defeq) spelling of <code>p</code> in some places</p>",
        "id": 246220659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626441232
    },
    {
        "content": "<p>If you have fintype, then you can use finset.filter. That will be nicer to prove things about the cardinality than juggling set.finite.to_finset.card</p>",
        "id": 246220965,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626441378
    },
    {
        "content": "<p>Is there a defined notion of \"union\" of subtypes?</p>",
        "id": 246222606,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626442214
    },
    {
        "content": "<p>Is there a way of declaring things like <code>{i : I | p i}</code> as a <code>finset</code> directly as <code>I</code> is a <code>fintype</code> here? <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span></p>",
        "id": 246222885,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626442345
    },
    {
        "content": "<p>(finset.univ.filter p)</p>",
        "id": 246222980,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626442401
    },
    {
        "content": "<p>there's also ⊕ but that's probably not gonna be nice to use (and is a disjoint union, not a normal one)</p>",
        "id": 246223158,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626442484
    },
    {
        "content": "<p>It might help if you can give more context so we can un- <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> this</p>",
        "id": 246224227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626443011
    },
    {
        "content": "<p>I was looking for some general suggestions before going into details. I will post more specific problems when I get.</p>",
        "id": 246225144,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626443493
    },
    {
        "content": "<p>Your suggestions have been very helpful for a good start!</p>",
        "id": 246225889,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626443831
    },
    {
        "content": "<p>Is there any version of statements that the card of the union of two disjoint <code>finsets</code> or <code>subtype</code> of a <code>fintype</code> is the sum of their separate cardinals?</p>",
        "id": 246229245,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626445304
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_sum\">docs#fintype.card_sum</a>?</p>",
        "id": 246229722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626445503
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_union_eq\">docs#finset.card_union_eq</a>?</p>",
        "id": 246229767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626445524
    },
    {
        "content": "<p>Note how I just guessed the names based on what the statement would be, which is especially powerful combined with vscode autocomplete</p>",
        "id": 246229925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626445593
    },
    {
        "content": "<p>Could anyone please give some suggestions on proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span> <span class=\"n\">matrix</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">row_dot_product_split</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i₁</span> <span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n<span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">//</span> <span class=\"n\">H</span> <span class=\"n\">i₁</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"n\">i₂</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"n\">H</span> <span class=\"n\">i₁</span> <span class=\"n\">j.1</span> <span class=\"bp\">*</span> <span class=\"n\">H</span> <span class=\"n\">i₂</span> <span class=\"n\">j.1</span> <span class=\"bp\">+</span>\n<span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">//</span> <span class=\"n\">H</span> <span class=\"n\">i₁</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">H</span> <span class=\"n\">i₂</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"n\">H</span> <span class=\"n\">i₁</span> <span class=\"n\">j.1</span> <span class=\"bp\">*</span> <span class=\"n\">H</span> <span class=\"n\">i₂</span> <span class=\"n\">j.1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dot_product</span><span class=\"o\">],</span>\n  <span class=\"c1\">--rw [← finset.sum_to_finset_eq_subtype] fails,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246246351,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626452974
    },
    {
        "content": "<p>I don't know why the quoted out tactic fails.</p>",
        "id": 246246651,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626453120
    },
    {
        "content": "<p>You might have an easier time if you generalize your problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_subtype_split</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//¬</span> <span class=\"n\">p</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dot_product_split</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">//</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">//</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">w</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"n\">sum_subtype_split</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 246248237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626453861
    },
    {
        "content": "<p>This is just the thing we discussed yesterday:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span> <span class=\"n\">matrix</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">prod_dite</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_subtype_split</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//¬</span> <span class=\"n\">p</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">fintype.sum_dite</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dot_product_split</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">//</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">//</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">w</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dot_product</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">fintype.sum_dite</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"n\">j</span><span class=\"o\">)]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 246250049,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626454770
    },
    {
        "content": "<p>Are you trying to split the sum onto the support and not support?</p>",
        "id": 246250192,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626454819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/set.20vs.20subtype/near/246250192\">said</a>:</p>\n<blockquote>\n<p>Are you trying to split the sum onto the support and not support?</p>\n</blockquote>\n<p>No, temporarily not.</p>",
        "id": 246250468,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626454926
    },
    {
        "content": "<p>You can also split the <code>f</code> into an <code>ite</code></p>",
        "id": 246251449,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626455415
    },
    {
        "content": "<p>by using <code>simp only</code>?</p>",
        "id": 246251962,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626455671
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span> <span class=\"n\">matrix</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">prod_dite</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_filter_univ</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.filter</span> <span class=\"n\">p</span> <span class=\"n\">finset.univ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset.prod_bij</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">pa</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">pa</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dot_product_split</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">//</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">//</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">w</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dot_product</span><span class=\"o\">,</span> <span class=\"n\">if_t_t</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.sum_ite</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_filter_univ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_filter_univ</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246252964,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626456159
    },
    {
        "content": "<p>Very cool!</p>",
        "id": 246255890,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626457407
    },
    {
        "content": "<p>I think sum_filter_univ is PR-worthy</p>",
        "id": 246273063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626466578
    },
    {
        "content": "<p>Frankly that's the statement I expected <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_subtype\">docs#finset.sum_subtype</a> to have</p>",
        "id": 246273157,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626466631
    },
    {
        "content": "<p><code>finset.prod_subtype</code> is better for rewrites:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_filter_univ</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.filter</span> <span class=\"n\">p</span> <span class=\"n\">finset.univ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">finset.prod_subtype</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246273355,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626466751
    },
    {
        "content": "<p>Is there already a way to extend this to a union in mathlib?</p>",
        "id": 247690031,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627640240
    },
    {
        "content": "<p>Although I am experimenting with the notation <code>fintype.card (⋃(i : fin k), left_coset (γ i) H) = ∑ (i : fin k), fintype.card (left_coset (γ i) H)</code>.</p>",
        "id": 247690121,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627640304
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with imports and variables?</p>",
        "id": 247691094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627641066
    },
    {
        "content": "<p>Induction on k will be the way here. But you should express it in terms of finset.card instead.</p>",
        "id": 247691846,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627641645
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.coset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">Hnonempty</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hcover</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hdisjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lagrange_long_sum_attempt_3</span>\n<span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">P.C</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">left_coset</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)}</span>\n<span class=\"o\">{</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">}:</span>\n<span class=\"n\">fintype.card</span> <span class=\"n\">H</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"c1\">--the size of the subgroup H divides the size of the group G</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--partition G into left cosets of H `done`</span>\n\n  <span class=\"c1\">--G is finite, so exists g₁, g₂, ..., gₖ s.t. g₁H, ..., gₖH partition G `done?`</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">set.univ</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fintype.of_equiv_card</span> <span class=\"o\">(</span><span class=\"n\">equiv.set.univ</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">dvd_of_mul_left_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">coe_sort</span> <span class=\"n\">set.univ</span> <span class=\"bp\">=</span> <span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">coe_sort</span> <span class=\"n\">h₃.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247691974,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627641746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/set.20vs.20subtype/near/247691846\">said</a>:</p>\n<blockquote>\n<p>Induction on k will be the way here. But you should express it in terms of finset.card instead.</p>\n</blockquote>\n<p>Ah alright I'll work to make that adjustment.</p>",
        "id": 247691990,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627641767
    },
    {
        "content": "<p>Either that or rewriting by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_sigma\">docs#fintype.card_sigma</a>, and then showing an equivalence between <code>⋃ i, left_coset (γ i) H</code> and <code>\\Sigma i, left_coset (γ i) H</code></p>",
        "id": 247692013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627641782
    },
    {
        "content": "<p>When we say an mwe, we mean something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>i.e. code that doesn't contain any of the context needed to arrive at that goal</p>",
        "id": 247692054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627641818
    },
    {
        "content": "<p>Aaaah alright I'll redo it for practice sake</p>",
        "id": 247692149,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627641891
    },
    {
        "content": "<p>Lean can likely produce one for you if you put <code>extract_goal</code> after your <code>have</code></p>",
        "id": 247692176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627641914
    },
    {
        "content": "<p>Which is something that is mentioned at <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 247692189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627641926
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.coset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">H</span><span class=\"o\">)}</span>\n  <span class=\"o\">{</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"bp\">↥</span><span class=\"n\">set.univ</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P_C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">P_Hnonempty</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">P_C</span> <span class=\"bp\">→</span> <span class=\"n\">X.nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P_Hcover</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">P_C</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P_Hdisjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n                   <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">P_C</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">∈</span> <span class=\"n\">P_C</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n         <span class=\"n\">X</span> <span class=\"bp\">∈</span>\n           <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">P_C</span><span class=\"o\">,</span>\n            <span class=\"n\">Hnonempty</span> <span class=\"o\">:=</span> <span class=\"n\">P_Hnonempty</span><span class=\"o\">,</span>\n            <span class=\"n\">Hcover</span> <span class=\"o\">:=</span> <span class=\"n\">P_Hcover</span><span class=\"o\">,</span>\n            <span class=\"n\">Hdisjoint</span> <span class=\"o\">:=</span> <span class=\"n\">P_Hdisjoint</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"bp\">→</span>\n         <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">left_coset</span> <span class=\"n\">g</span> <span class=\"bp\">↑</span><span class=\"n\">H</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">set.univ</span> <span class=\"bp\">=</span> <span class=\"bp\">↥⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"bp\">↥⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">fintype.card</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247694084,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627643381
    },
    {
        "content": "<p>Which was through <code>extract_goal</code> vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.coset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 247694156,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627643414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/set.20vs.20subtype/near/247692013\">said</a>:</p>\n<blockquote>\n<p>Either that or rewriting by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_sigma\">docs#fintype.card_sigma</a>, and then showing an equivalence between <code>⋃ i, left_coset (γ i) H</code> and <code>\\Sigma i, left_coset (γ i) H</code></p>\n</blockquote>\n<p>I see what's happening here though. Either way cheers.</p>",
        "id": 247694250,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627643481
    },
    {
        "content": "<p>Note that that example is false, it's only true  with <code>injective (λ (i : fin k), left_coset (γ i) ↑H)</code></p>",
        "id": 247694583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627643734
    },
    {
        "content": "<p>That's hypothesis h2, isn't it? Or have I written something wrong?</p>",
        "id": 247694724,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627643851
    },
    {
        "content": "<p>Aaaah I see in the mwe</p>",
        "id": 247694751,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627643880
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.coset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Right this makes sense.</p>",
        "id": 247694849,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627643964
    },
    {
        "content": "<p>Here's the equiv I'm thinking of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The union of a family of disjoint sets is isomorphic to the disjoint union -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">equiv.set.sigma_of_disjoint</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">↥⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_Union.mp</span> <span class=\"n\">u.prop</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h.some</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">h.some_spec</span><span class=\"o\">⟩,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">s.2</span><span class=\"o\">,</span> <span class=\"n\">set.mem_Union.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">s.1</span><span class=\"o\">,</span> <span class=\"n\">s.2.prop</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">subtype.ext</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">sigma.subtype_ext</span> <span class=\"o\">(</span><span class=\"kd\">begin</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize_proofs</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">hfst</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">set.not_disjoint_iff.mpr</span> <span class=\"o\">⟨(</span><span class=\"n\">s.snd</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">h.some_spec</span><span class=\"o\">,</span> <span class=\"n\">s.snd.prop</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"n\">h.some</span> <span class=\"n\">s.fst</span> <span class=\"n\">hfst</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 247696898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627645405
    },
    {
        "content": "<p>I can't for the life of me figure out why my VSC has an issue with sigma.subtype_ext</p>",
        "id": 247710692,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627653189
    },
    {
        "content": "<p>Maybe you have a (very) old version of mathlib</p>",
        "id": 247711663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627653633
    },
    {
        "content": "<p>Oh, that exists already as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Union_eq_sigma_of_disjoint\">docs#set.Union_eq_sigma_of_disjoint</a></p>",
        "id": 247916901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627909131
    },
    {
        "content": "<p>And should probably be renamed to say <code>equiv</code> not <code>eq</code>.</p>",
        "id": 247916947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627909161
    }
]