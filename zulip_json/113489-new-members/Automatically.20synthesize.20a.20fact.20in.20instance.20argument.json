[
    {
        "content": "<p>Hi! I've recently been going through the Lean 4 tutorial, and trying to experiment a bit with it.<br>\nIn particular, I have (a slightly more complicated version of) the following code, where I'm trying to use refinement types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isPos</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">//</span> <span class=\"n\">isPos</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">isPos</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">pos</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span>  <span class=\"o\">⟨</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">isPos</span><span class=\"o\">]</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Ideally, I'd like to write <code>test</code> as simply <code>def test : pos := 1</code>, and let the ofNat pos n typeclass instance automatically introduce the coercion. However, in the current state, Lean does not seem to be able to synthesize the <code>isPos</code> argument automatically.<br>\nIs there a way to tell Lean 4 to always try to apply the simplifier during synthesis for this specific argument?</p>\n<p>Thanks!</p>",
        "id": 301628290,
        "sender_full_name": "Aymeric Fromherz",
        "timestamp": 1664539124
    },
    {
        "content": "<p>You can apply simplifier to synthesize an argument like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">isPos</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>  <span class=\"c1\">-- marked it as abbrev for simp to see through it</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">//</span> <span class=\"n\">isPos</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">posOfNat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">isPos</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">pos</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>but it this case it is not doing what you are after, not sure why.</p>",
        "id": 301638488,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664542144
    },
    {
        "content": "<p>When you call the instance explicitly, it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">posOfNat</span> <span class=\"mi\">1</span>\n<span class=\"k\">#check</span> <span class=\"n\">posOfNat</span> <span class=\"mi\">10</span>\n<span class=\"bp\">#</span><span class=\"n\">check_failure</span> <span class=\"n\">posOfNat</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 301638957,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664542302
    },
    {
        "content": "<p>Thanks for the answer! the <code>:= by simp</code> syntax was what I was looking for. However, this indeed does not seem to interact well with instance synthesis. Could it be that the <code>by simp</code> is executed prior to resolving n?</p>",
        "id": 301640876,
        "sender_full_name": "Aymeric Fromherz",
        "timestamp": 1664542856
    },
    {
        "content": "<p>In that case calling the instance directly would not work too, no?</p>",
        "id": 301641224,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664542946
    },
    {
        "content": "<p>Mmh, possibly, but I do not know enough about how Lean 4 solves metavariables. The difference i see is that, when calling the instance directly, there is no metavariable for <code>n</code>, while if Lean is trying to solve <code>isPos ?m_n</code> by simp before <code>?m_n</code> is resolved, this could lead to issues</p>",
        "id": 301644655,
        "sender_full_name": "Aymeric Fromherz",
        "timestamp": 1664543907
    },
    {
        "content": "<p>Could be, I do not understand these things too much either.</p>",
        "id": 301654434,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664546620
    },
    {
        "content": "<p>My guess is that instance search doesn't attempt running the tactic for <code>(p: isPos n := by simp)</code>.</p>\n<p>Another example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo_insts</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo_insts</span> <span class=\"mi\">1</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo.x</span> <span class=\"mi\">1</span> <span class=\"c1\">-- failed to synthesize instance</span>\n</code></pre></div>",
        "id": 301656413,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664547110
    },
    {
        "content": "<p>Maybe it's worth asking on <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> about this and whether <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span>'s version is expected to work.</p>",
        "id": 301656714,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664547182
    },
    {
        "content": "<p>Did Lean 3 use to handle this? Thanks for the advice, will do</p>",
        "id": 301661212,
        "sender_full_name": "Aymeric Fromherz",
        "timestamp": 1664548420
    }
]