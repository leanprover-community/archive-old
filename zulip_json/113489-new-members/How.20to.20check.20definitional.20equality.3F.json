[
    {
        "content": "<p>Is there an simple way in Lean to check if two expressions are definitionally equal? I'm trying to check my understanding of what is definitionally equal in Lean and am not sure how to do this (I'm probably overlooking something very simple).</p>",
        "id": 273403897,
        "sender_full_name": "Thomas Brooks",
        "timestamp": 1645968792
    },
    {
        "content": "<p>You can just check if <code>example foo = bar := rfl</code> works</p>",
        "id": 273403980,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645968917
    },
    {
        "content": "<p>What am I doing wrong when I try something trivial like <code>example (Prop = Prop) := rfl</code> I get several errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exercises.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">8</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span>\n<span class=\"n\">exercises.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">9</span>\n<span class=\"n\">invalid</span> <span class=\"n\">binder</span><span class=\"o\">,</span> <span class=\"n\">identifier</span> <span class=\"n\">expected</span>\n<span class=\"n\">exercises.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">9</span>\n<span class=\"n\">command</span> <span class=\"n\">expected</span>\n</code></pre></div>",
        "id": 273404668,
        "sender_full_name": "Thomas Brooks",
        "timestamp": 1645969805
    },
    {
        "content": "<p>use triple backtick for multiline code blocks</p>",
        "id": 273404694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645969857
    },
    {
        "content": "<p>First of all I forgot the <code>:</code> in my example, sorry.</p>",
        "id": 273404703,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645969873
    },
    {
        "content": "<p>you are missing a colon: <code>example: (Prop = Prop) := rfl</code></p>",
        "id": 273404707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645969879
    },
    {
        "content": "<p>Then <code>refl</code> is a tactic, you should use <code>rfl</code> (without the <code>e</code>).</p>",
        "id": 273404724,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645969896
    },
    {
        "content": "<p>Okay thank you, that has fixed it! Oddly, I am using triple-backticking in my message but it still displays incorrectly.</p>",
        "id": 273404778,
        "sender_full_name": "Thomas Brooks",
        "timestamp": 1645969946
    },
    {
        "content": "<p>the triple backtick has to be on its own line (both the beginning and the end one)</p>",
        "id": 273404803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645970009
    },
    {
        "content": "<p>And pay attention that you are proving equality of types, that is something a little odd (even if in this case it works). If you want to try something mathematically meaningful you can prove <code>1+1=2</code>.</p>",
        "id": 273404804,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645970010
    },
    {
        "content": "<p>Yes, I was trying the most trivial statement I could think of since I was getting errors on more meaningful propositions too (due to these mistakes). <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Even on separate lines for both, it doesn't seem to display properly. (By the way, I find your Type Theory of Lean paper very helpful.)</p>",
        "id": 273404964,
        "sender_full_name": "Thomas Brooks",
        "timestamp": 1645970227
    },
    {
        "content": "<p>there is a space before the first triple-backtick</p>",
        "id": 273404972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645970263
    },
    {
        "content": "<p>Oops. Not my day for noticing trivial errors. Thanks</p>",
        "id": 273405020,
        "sender_full_name": "Thomas Brooks",
        "timestamp": 1645970286
    }
]