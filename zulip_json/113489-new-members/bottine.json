[
    {
        "content": "<p>Hey! I'm thinking on trying to formalize geometric group theory, and it seams LEAN is the place to do this. I have pretty much zero knowledge of proof assistants, but I'm trying to learn now. Anyone has done some work in GGT already?</p>",
        "id": 263565596,
        "sender_full_name": "bottine",
        "timestamp": 1638530682
    },
    {
        "content": "<p>oh hello I'm not a mathematician so I'm afraid I can't answer your question, but I believe it might be helpful to check out our learning resources <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a>, especially the Logical Verification course</p>",
        "id": 263566203,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638531016
    },
    {
        "content": "<p>I'm not sure logical verification is the best start for someone interested in formalizing math, I suspect it aligns much better with <span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span>'s interests than the ones in your message.</p>",
        "id": 263568373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638532440
    },
    {
        "content": "<p>I don't think we have anything on geometric group theory. Even the definition of the Cayley graph with respect to some generating set, as a metric space for the word distance, is missing.</p>",
        "id": 263569337,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1638532957
    },
    {
        "content": "<p>There is some difficulty here: should you put in the edges (to get a geodesic space) or just the vertices (then the Cayley graph would be a copy of the group, with the additional data of a distance).</p>",
        "id": 263569498,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1638533046
    },
    {
        "content": "<p>Probably a good place to start is to define quasi-isometries between metric spaces (or extended metric spaces) and prove their basic properties, as it would require less know-how.</p>",
        "id": 263569551,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1638533086
    },
    {
        "content": "<p>Yes, I think starting with quasi-isometries of metric spaces in general is probably the best way to go. I would not make Cayley graphs into a geodesic spaces, but only keep the vertices and the metric itself (as a discrete distance). I think a good test would then be to verify that two different generating sets for your group induce quasi isometric graphs. And then probably try and see if we can show that Ends(G) \\in {0,1,2,\\infty}.</p>\n<p>Then, longer term goals would be the ability to talk about, say, hyperbolicity, growth, and eventually even to prove Stalling's result about ends, and even Gromov result. At first, I thought Gromov's would be \"impossible\" due to its resilience on stuff like Lie groups, real vector spaces, etc, which I thought were quite far off in terms of formalization. But I see LEAN has quite a large library already, so who knows…</p>",
        "id": 263569919,
        "sender_full_name": "bottine",
        "timestamp": 1638533320
    },
    {
        "content": "<p>Does that make sense? Is it a too lofty goal?</p>",
        "id": 263570810,
        "sender_full_name": "bottine",
        "timestamp": 1638533849
    },
    {
        "content": "<p>ah, I see Gromov-Hausdorff has been done already: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/metric_space/gromov_hausdorff.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/topology/metric_space/gromov_hausdorff.lean</a></p>",
        "id": 263572975,
        "sender_full_name": "bottine",
        "timestamp": 1638534949
    },
    {
        "content": "<p>Defining quasi-isometries, putting a distance on the group associated to a finite generating set, and checking that two such distances are quasi-isometric, looks completely reasonable.</p>\n<p>Classifying the number of ends is harder, I think (first, one should define the space of ends), but not completely crazy.</p>",
        "id": 263578882,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1638538037
    },
    {
        "content": "<p>As for Gromov theorem (the one on groups with polynomial growth, right?), Kleiner's proof has less prerequisites and would therefore be a better choice for formalization. But this is clearly a long-term goal.</p>",
        "id": 263581175,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1638539046
    },
    {
        "content": "<p>Great, thanks for your input <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>! This looks like something I will try and pursue then.<br>\nActually, re Gromov's theorem (yes, the polynomial growth one), I had a look at the blog post by Tao and it looks like the proof can be neatly cut into preliminary results which are then relatively easily combined; I think/hope this makes it at least superficially amenable to formalization.</p>",
        "id": 263598161,
        "sender_full_name": "bottine",
        "timestamp": 1638546648
    },
    {
        "content": "<p>Are you still interested in this <span class=\"user-mention\" data-user-id=\"461830\">@bottine</span> ?</p>",
        "id": 268948682,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1642844413
    },
    {
        "content": "<p>Hi, the graph theory part of mathlib is in the process of a big refactor so formalizing things like Cayley graphs right now is probably not the right time, better wait for a few weeks. I should know because I did it myself some time ago, see <a href=\"https://github.com/vbeffara/lean/blob/lean-3.4.2/src/graph_theory/cayley.lean\">https://github.com/vbeffara/lean/blob/lean-3.4.2/src/graph_theory/cayley.lean</a> (that is the definition of the Cayley graph and the proof of quasi-isometry under change of generator set, using the current simple_graph API, but it is still draftish). But nice to know that there is work happening in that direction :-)</p>",
        "id": 268957779,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1642858205
    },
    {
        "content": "<p>Indeed I am :) I'm currently writing out a research proposal to try and get a postdoc grant to pursue this.</p>",
        "id": 269014632,
        "sender_full_name": "bottine",
        "timestamp": 1642940136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> Thank you, that sounds nice. Although I don't really understand what you're doing: how are you talking about quasiisomorphisms?</p>",
        "id": 269017154,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1642943805
    },
    {
        "content": "<p>Not quasi-isomorphisms but quasi-isometries, in the sense that on a group equipped with two (finite) generator sets, identity on the group induces a bi-Lipschitz map between the corresponding Cayley graphs.</p>",
        "id": 269039940,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1642972932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/113489-new-members/topic/bottine/near/268957779\">said</a>:</p>\n<blockquote>\n<p>Hi, the graph theory part of mathlib is in the process of a big refactor so formalizing things like Cayley graphs right now is probably not the right time, better wait for a few weeks. I should know because I did it myself some time ago, see <a href=\"https://github.com/vbeffara/lean/blob/lean-3.4.2/src/graph_theory/cayley.lean\">https://github.com/vbeffara/lean/blob/lean-3.4.2/src/graph_theory/cayley.lean</a> (that is the definition of the Cayley graph and the proof of quasi-isometry under change of generator set, using the current simple_graph API, but it is still draftish). But nice to know that there is work happening in that direction :-)</p>\n</blockquote>\n<p>What changes are planned for the <code>simple_graph</code> API? Also, do you have an ETA on the refactoring landing?</p>",
        "id": 269066012,
        "sender_full_name": "bottine",
        "timestamp": 1643007597
    },
    {
        "content": "<p>We're working to make things generic so that there's shared API between many different kinds of graph-like structures. The ETA is Soon (on the order of weeks rather than months).</p>\n<p>I'm also hoping that things will look roughly the same for <code>simple_graph</code>, just that lemmas will find some new homes in other namespaces.  I'd say, if you want to get to work on graphs, you should feel free. Just be aware that things might change a bit.</p>",
        "id": 269067730,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643009384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> There's a question about whether Cayley graphs should be graphs, or whether they should be some kind of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver\">docs#quiver</a> on a group-with-presentation (like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/presented_group\">docs#presented_group</a>).  It seems like it would be an easier design for the <code>metric_space</code> structure. Is this something you've considered?</p>",
        "id": 269067960,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643009626
    },
    {
        "content": "<p>what's the advantage of using quivers here? (first time I'm learning about those)</p>",
        "id": 269068257,
        "sender_full_name": "bottine",
        "timestamp": 1643009930
    },
    {
        "content": "<p>Also, I don't have the experience for my opinion to count for much, but I would expect Cayley graphs should be definable for \"abstract\" groups, without necessarily having a presentation, no?</p>",
        "id": 269068619,
        "sender_full_name": "bottine",
        "timestamp": 1643010265
    },
    {
        "content": "<p>OK, I'm in the process of trying to set up a basic layout for quasi-isometries/coarse geometry. Is there a standard way to discuss design choices?</p>",
        "id": 269075395,
        "sender_full_name": "bottine",
        "timestamp": 1643014833
    },
    {
        "content": "<p>TBH I did not ask myself such design questions, I was merely looking for nice examples of graphs (and possibly for a nice way of putting a graph structure on Z^2 along the way of defining planarity, but probably that was overkill).</p>",
        "id": 269078262,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643016335
    },
    {
        "content": "<p>What is gained by defining a Cayley graph as a quiver? I am also completely ignorant about those ...</p>",
        "id": 269078521,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643016453
    },
    {
        "content": "<p>BTW it also likely makes sense to define the word metric on a group independently of the graph structure</p>",
        "id": 269078803,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643016583
    },
    {
        "content": "<p>One related design question: is there a reason for walks, paths and so on to grow from their heads like lists rather than from their tails like quiver paths and instances of refl_trans_gen?</p>",
        "id": 269079048,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643016718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/113489-new-members/topic/bottine/near/269078521\">said</a>:</p>\n<blockquote>\n<p>What is gained by defining a Cayley graph as a quiver? I am also completely ignorant about those ...</p>\n</blockquote>\n<p>Quivers are the typeclass version of directed graphs. (Quivers hold arrows.)</p>\n<p>Here's an idea for how you might set things up (but I have no promises that this ends up being a good idea!)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.presented_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.quiver.basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">arrow</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">gen</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">arrow</span>\n<span class=\"bp\">|</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">arrow</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">presented_group.of_arrow</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">rels</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">free_group</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">arrow</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">presented_group</span> <span class=\"n\">rels</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arrow.gen</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">presented_group.of</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arrow.inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">presented_group.of</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">rels</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">free_group</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span> <span class=\"o\">(</span><span class=\"n\">presented_group</span> <span class=\"n\">rels</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">arrow</span> <span class=\"n\">α</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">presentation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">rels</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">free_group</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">presented_group</span> <span class=\"n\">rels</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">presented_by</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">presentation</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">G</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">presentation</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span> <span class=\"o\">(</span><span class=\"n\">presented_by</span> <span class=\"n\">G</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">arrow</span> <span class=\"n\">p.α</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 269141053,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643045769
    },
    {
        "content": "<p>Then you can put a <code>metric_space</code> structure directly on the <code>presented_group rels</code> or the <code>presented_by G p</code></p>",
        "id": 269141085,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643045790
    },
    {
        "content": "<p>(Ping <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span>, who's been working on quivers recently.)</p>",
        "id": 269141165,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643045830
    },
    {
        "content": "<p>Cayley graphs should be defined for generated groups, not presented ones. Other than that that looks good, yes.</p>",
        "id": 269142421,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1643046403
    },
    {
        "content": "<p>I was figuring it's a way to show that the generating set actually does generate the group. Feel free to substitute other ways of formalizing that!</p>",
        "id": 269142802,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643046550
    },
    {
        "content": "<p>For example, the data of a surjective homomorphism from a free group.</p>",
        "id": 269142839,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643046566
    }
]