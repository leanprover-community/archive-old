[
    {
        "content": "<p>Two questions:</p>\n<p>I've defined the following helper because it turned out to be necessary. My first question will end up being \"why was this necessary?\".</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">add_comm&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Then I'm trying to prove:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"c1\">-- done the case a=0</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">injection</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_comm&#39;</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"n\">h_1</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<ol>\n<li>Why did I have to define <code>add_comm'</code> to get the <code>rw (add_comm' b a) at h_1</code> to stick? I couldn't simply rewrite by <code>add_comm b a</code>.</li>\n<li>How can I make the recursive call to <code>eq_zero_of_add_right_eq_self h1</code>? I'm getting \"unknown identifier\" at the moment.</li>\n</ol>",
        "id": 190592377,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584184177
    },
    {
        "content": "<p>I don't think playing the natural number game off-line is so well supported. Your first issue is probably a conflict between mathlib's add_comm and the one Kevin crafted for the game. The second issue is simply not what proofs by induction look like in Lean. This should be all explained if you play the game online;</p>",
        "id": 190592716,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584184845
    },
    {
        "content": "<p>Can you post code which compiles? i.e. let's assume I have got a local copy of the game. Can you give me something I can cut and paste, with the imports and opens you're using? You shouldn't need to define add_comm' and if I can't easily reproduce your errors it's hard to help (I've just spent a few minutes trying and I've failed)</p>",
        "id": 190593377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584185733
    },
    {
        "content": "<p>The code which demonstrates \"I have to use <code>add_comm'</code>\" is as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"kn\">definition</span> <span class=\"c1\">-- Imports the natural numbers.</span>\n<span class=\"kn\">import</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"c1\">-- definition of addition</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"mi\">0</span> <span class=\"n\">n_n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">succ_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"n\">a</span> <span class=\"n\">b_n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b_n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">b_ih</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">succ_add</span> <span class=\"n\">a_n</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">a_ih</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"n\">b</span> <span class=\"n\">a_n</span><span class=\"o\">),</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">add_comm&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- this is used for antisymmetry of ≤</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">injection</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_comm&#39;</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190593486,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584185989
    },
    {
        "content": "<p>The natural number game tries very hard to stop notation leaking through, this looks like your problem. The natural number game was written precisely because Lean's <code>induction</code> tactic was very poor with regards to leaking notation. You are seeing precisely the problems which I saw my users see when they were trying to write the game themselves.  <code>injection f</code> is not a natural-number-game-sanctioned tactic and it looks like you have managed to create a hypothesis h_1 which mentions <code>add a b</code>. You should <code>change &lt;write what h_1 should actually say, i.e. change add to +&gt; at h_1</code>. Notation leakage is a big problem if you try to do things yourself, and I don't explain this sort of thing at all in NNG.</p>",
        "id": 190593487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584185991
    },
    {
        "content": "<p>OK, thanks very much</p>",
        "id": 190593531,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584186012
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">injection</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"c1\">-- leakage</span>\n  <span class=\"n\">change</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span> <span class=\"c1\">-- fixed</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190593587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186051
    },
    {
        "content": "<p>See how much easier it is if you post fully working code?</p>",
        "id": 190593589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186061
    },
    {
        "content": "<p>I would have been able to solve it in 1 minute not 10 ;-)</p>",
        "id": 190593601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186073
    },
    {
        "content": "<p>The underlying issue going on here is that there is something called definitional equality, which means \"two things are equal because they have the same definition\", and there is something called syntactic equality, which means \"two things are equal if they are literally exactly the same string of symbols\".</p>",
        "id": 190593654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/190593601\" title=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/190593601\">said</a>:</p>\n<blockquote>\n<p>I would have been able to solve it in 1 minute not 10 ;-)</p>\n</blockquote>\n<p>Sorry, yes - this is true</p>",
        "id": 190593660,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584186198
    },
    {
        "content": "<p><code>rw</code> only works with syntactic equality. <code>add a b</code> is definitionally equal to <code>a + b</code> but not syntactically equal to it.</p>",
        "id": 190593661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186200
    },
    {
        "content": "<p>Ah, OK - I was misled by Agda's <code>rewrite</code>, which doesn't care</p>",
        "id": 190593665,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584186226
    },
    {
        "content": "<p>The <code>change</code> tactic can be used to change anything to something definitionally equal. It works on hypotheses and goals.</p>",
        "id": 190593668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186238
    },
    {
        "content": "<p>(both my problems in this thread appear to be that Agda has given me in-built assumptions about how Lean works)</p>",
        "id": 190593727,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584186337
    },
    {
        "content": "<p>Oh that's interesting about Agda. The whole <code>[nat_num_game]</code> stuff is my attempt to stop notation being leaked like this, but as you can see it's a pretty difficult task. Because basically I'm trying to teach mathematicians to rewrite, leakage is a killer. Lean's inbuilt <code>induction</code> tactic always returns the exact constructors used to define the type, and when <code>mynat</code> is defined, we don't have access to notation.</p>",
        "id": 190593730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186346
    },
    {
        "content": "<p>Hence <code>induction</code> by default will give <code>mynat.zero</code> and <code>mynat.succ</code>, and already <code>mynat.zero</code> is enough to stop <code>zero_add</code> working, because <code>0</code> is notation, but it's notation for <code>has_zero.zero</code>, which is defeq to <code>mynat.zero</code>. <code>rw</code> can see through notation, but it's the <code>mynat.zero</code> not being <code>has_zero.zero</code> which causes no end of confusion to maths undergrads.</p>",
        "id": 190593835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186423
    },
    {
        "content": "<p>The <code>[nat_num_game]</code> monad modifies certain core tactics by basically doing all of those <code>change</code>s to get things back to the canonical notation needed for the rws to work and look good, but it's not a \"whatever the user does, fix stuff up\" thing, it's literally just explicitly modifying the behaviour of certain core tactics like <code>induction</code> and <code>cases</code>.</p>",
        "id": 190593888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186522
    },
    {
        "content": "<p>Maybe I should write up some notes for experts (sorry for not realising earlier that you had a lot of background knowledge, there are so many people around nowadays asking questions about the game and I forget who knows what).</p>",
        "id": 190593900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186594
    },
    {
        "content": "<p>I broke several of the cardinal rules about how to ask for help, it's hardly your fault :P</p>",
        "id": 190593943,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584186634
    },
    {
        "content": "<p>Thanks very much</p>",
        "id": 190593950,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584186651
    },
    {
        "content": "<p>I think one thing that's interesting about the community here was that I am a mathematician and I had the idea about the game when trying to get undergrads to just write Lean files to prove stuff like this about a home-rolled nat, and then when I realised there was this notational leakage issue I asked for help and the community stepped in fixed it by showing me how to make my own tactic monad, and then when I realised that mathematicians weren't going to be downloading lean I asked for help and the community stepped in again with all this web framework stuff, there are all these people in the background without whom it would never have got off the ground. This is why this chatroom is such a cool place to be.</p>",
        "id": 190594111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186877
    },
    {
        "content": "<p>The online NNG is a great learning tool, but there are a number of things that work in a different way than in a local Lean installation. Even <code>rw</code> for example; it does not close a goal in NNG, but otherwise it does so. It might be a good idea to collect such changes in a \"disclaimer\" list for this and other such games that are bound to spring up, although with Lean 4 in the works this may not be the best time.</p>",
        "id": 190606866,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584208726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"259186\">@Daniel Keys</span></p>\n<p>There was this thread not too long ago when I was trying to do the same thing and found quite a few differences between NNG and my local Lean installation.</p>\n<p><a href=\"#narrow/stream/113489-new-members/topic/zero.20versus.200/near/188937541\" title=\"#narrow/stream/113489-new-members/topic/zero.20versus.200/near/188937541\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/zero.20versus.200/near/188937541</a></p>",
        "id": 190633206,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584254079
    },
    {
        "content": "<p>Also <a href=\"#narrow/stream/113489-new-members/topic/zero.20versus.200/near/189001740\" title=\"#narrow/stream/113489-new-members/topic/zero.20versus.200/near/189001740\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/zero.20versus.200/near/189001740</a> later in the thread.</p>\n<p>The list of changes is <a href=\"#narrow/stream/113489-new-members/topic/zero.20versus.200/near/189002663\" title=\"#narrow/stream/113489-new-members/topic/zero.20versus.200/near/189002663\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/zero.20versus.200/near/189002663</a></p>\n<p>Basically just Kevin's answers to my questions :)</p>",
        "id": 190633263,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584254174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span>  Sure, these are good in their own right. What I meant, though, was that the online game pages could themselves host an additional summary page, more or less formal, of changes made to the usual tactics. Given the work that the game designer logs in anyway, it is a little unfair to ask them for any extra bit. It would save us (the players) from some later surprises though, although figuring stuff out is eventually part of the bigger game.</p>",
        "id": 190647644,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584279770
    },
    {
        "content": "<p>The game designer is going to make it to the end of term (one week away) and then hopefully sit down and deal with the many issues which have arisen with the natural number game since Christmas, so any suggestions about how to improve it are welcome :-)</p>",
        "id": 190647699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584279848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Many will probably agree that a cool way this designer could use some of their time would be having the real number gem (sorry, I literally had a typing mistake...I meant game) up and running. Sure enough they know how to take the good decisions by themselves though!-:)</p>",
        "id": 190648144,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584280735
    },
    {
        "content": "<p>real number game, group theory game, integer game, rational number game, logic game. They're all on my todo list :-)</p>",
        "id": 190648155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584280771
    },
    {
        "content": "<p>I, for one, am hoping to write the representation theory game, and then do it :P</p>",
        "id": 190648425,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584281281
    },
    {
        "content": "<p>mul_left_cancel is the first proof I'm kinda getting stuck on. Gonna keep trying though.</p>",
        "id": 193539518,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586496743
    },
    {
        "content": "<p>It seems to be the one everyone gets stuck on.</p>",
        "id": 193539676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586497004
    },
    {
        "content": "<p>It's hard to know if I'm on the right track or not</p>",
        "id": 193540237,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586497938
    },
    {
        "content": "<p>I don't know if it helps, but most people say that once they are on the right track they are done immediately...</p>",
        "id": 193540246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586497979
    },
    {
        "content": "<p>Here's what goals I end up with:</p>\n<div class=\"codehilite\"><pre><span></span>case mynat.succ\na c b_n : mynat,\nb_ih : a ≠ 0 → a * b_n = a * c → b_n = c\n⊢ a ≠ 0 → a * succ b_n = a * c → succ b_n = c\n</pre></div>",
        "id": 193540428,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586498272
    },
    {
        "content": "<p>And I'm not sure if there's somehow a straightforward way to go from b_ih to the goal</p>",
        "id": 193540479,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586498326
    },
    {
        "content": "<p>Nope, there isn't, at least with your current proof state. Consider the hint given at that level to try <code>revert b</code> before induction <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 193540771,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586498759
    },
    {
        "content": "<p>Oh, to get the forall?</p>",
        "id": 193540830,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586498812
    },
    {
        "content": "<p>I should have taken that advice more literally</p>",
        "id": 193540863,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586498852
    },
    {
        "content": "<p>What's the general strategy if I'm given a goal that I know is false?</p>",
        "id": 193541162,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586499286
    },
    {
        "content": "<p>backtrack</p>",
        "id": 193541263,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586499438
    },
    {
        "content": "<p>Unless your hypothesis are contradictory</p>",
        "id": 193541868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586500422
    },
    {
        "content": "<p>then your goal isn't false, is it</p>",
        "id": 193541956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586500555
    },
    {
        "content": "<p>Depends how literally you interpret the statement</p>",
        "id": 193542031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586500629
    },
    {
        "content": "<p>Hi, I'm having trouble in the natural number game, to be precise advanced multiplication world.<br>\nFor example I proved the first level like this:</p>\n<p>theorem mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0 :=</p>\n<p>cases b with n,<br>\nintro h,<br>\ncc,<br>\nintros ha hn,<br>\ncases a with a,<br>\ncc,<br>\napply succ_ne_zero _,</p>\n<p>So I \"understand\" most of my proof (and by that I mean I expected cc to be able to close the goals when I used it, even though I can't inspect what exactly it did).<br>\nBut I'm puzzled about the last line - I didn't expect the proof to be complete after this (for lean).<br>\nCould someone explain why?</p>",
        "id": 193558086,
        "sender_full_name": "undef",
        "timestamp": 1586516155
    },
    {
        "content": "<p>To understand what happened here you need to know something about definitional equality, which is not something I emphasize in NNG</p>",
        "id": 193558255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586516313
    },
    {
        "content": "<p>Is there a way to inspect the state of lean with more granularity?</p>",
        "id": 193558362,
        "sender_full_name": "undef",
        "timestamp": 1586516403
    },
    {
        "content": "<p>I expected that I would have to tell lean to use <code>ha</code> and <code>hn</code> to finish the proof.</p>",
        "id": 193558512,
        "sender_full_name": "undef",
        "timestamp": 1586516517
    },
    {
        "content": "<p>Sorry, real life intervened</p>",
        "id": 193560144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586518297
    },
    {
        "content": "<p>When you tried to apply succ_ne_zero Lean tried to convince itself that your goal was of the form succ X ne 0 by definition</p>",
        "id": 193560227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586518365
    },
    {
        "content": "<p>And to see through this you have to know what is true by definition and what is true because of a theorem</p>",
        "id": 193560246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586518395
    },
    {
        "content": "<p>For example add_succ is true by definition and succ_add is not</p>",
        "id": 193560277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586518427
    },
    {
        "content": "<p>Thank you, I will investigate that!</p>",
        "id": 193560507,
        "sender_full_name": "undef",
        "timestamp": 1586518684
    },
    {
        "content": "<p><code>ha</code> and <code>hn</code> are equivalent to true, they are not very useful hypotheses - it holds vacuously that <code>succ n \\neq 0</code> - your conclusion in your current goals is similar (1 + k) * (1 + n) cannot possibly be 0 for <code>k n \\in mathbb{N}</code>, no matter what the context contains; what Kevin alluded to with definitional equality is something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cc</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">ha</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">cc</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>       <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>     <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">succ</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"n\">apply</span> <span class=\"n\">succ_ne_zero</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>Note that <code>change X with Y</code> only works when <code>X</code> is defeq with <code>Y</code> - so I just make some explicit rewrites, rather than leave Lean compute these from definitions.</p>",
        "id": 193560878,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1586519085
    },
    {
        "content": "<p>Maybe I should add that the last conclusion before <code>apply succ_ne_zero _</code> is now <code>succ ((a + 1) * n + a)</code>, which fits the lemma \"more obviously\".</p>",
        "id": 193560987,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1586519213
    },
    {
        "content": "<p>I didn't know the change command, but I like it as it is much more explicit!<br>\nThank you very much.</p>",
        "id": 193561805,
        "sender_full_name": "undef",
        "timestamp": 1586520028
    },
    {
        "content": "<p>I don't think that mathematicians are interested in the difference between definitional equality and \"normal equality\", whatever that means, but what is going on here is that <code>a + 1</code> is <em>by definition</em> <code>a + succ 0</code> which is <em>by definition</em> <code>succ (a + 0)</code> which is <em>by definition</em> <code>succ a</code>. It is not a coincidence that you have to prove <code>zero_add</code> in NNG and you don't have to prove <code>add_zero</code> -- in fact <code>add_zero</code> can be thought of as an axiom, defined when addition is defined. But <code>zero_add</code> needs to be proved by induction. This way of thinking about <code>+</code> is extremely asymmetric and very counter-intuitive to a mathematician's model of addition, so I don't stress this at all. The <code>change</code> tactic changes a goal to a <em>definitionally</em> equal goal so it is in some sense a very  unmathematical tactic -- it will change <code>a + 0</code> to <code>a</code> but it won't change <code>0 + a</code> to <code>a</code>.</p>",
        "id": 193562220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586520386
    },
    {
        "content": "<p>There is still some mathematical content in saying that a + 0 = a by definition while 0 + a = a is a theorem (if you define addition by induction on the second argument).</p>",
        "id": 193562276,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586520475
    },
    {
        "content": "<p>It's so basic that your mind blurs the distinction, but this game is about setting up the foundations of natural numbers, so you can't say this is unmathematical.</p>",
        "id": 193562332,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586520510
    },
    {
        "content": "<p>To Gauss, the naturals were a commutative semiring and this did not need to be questioned.</p>",
        "id": 193562375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586520560
    },
    {
        "content": "<p>This distinction becomes unmathematical once the foundations are done, because you don't want to care about the foundational details after they have been taken care of.</p>",
        "id": 193562382,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586520571
    },
    {
        "content": "<p>But NNG is all about foundations.</p>",
        "id": 193562407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586520597
    },
    {
        "content": "<p>That's why I initially thought people would not like it. But clearly I was wrong.</p>",
        "id": 193562471,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586520619
    },
    {
        "content": "<p>I was in some sense surprised too, but this is what bubbled to the top when I started showing undergraduates this stuff.</p>",
        "id": 193562507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586520675
    },
    {
        "content": "<p>I somehow got the web version of Lean stuck without using <code>repeat</code> now, on le_succ_of_le. I just copy-pasted the code from the end and changed the ??? to <code>(succ c)</code></p>",
        "id": 193582056,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586532776
    },
    {
        "content": "<p>why does <code>a ≤ b ∧ ¬b ≤ a</code> accept a hypothesis of <code>a &lt; b</code>?</p>",
        "id": 193696148,
        "sender_full_name": "Nam",
        "timestamp": 1586670390
    },
    {
        "content": "<p>those two are defeq</p>",
        "id": 193696174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586670435
    },
    {
        "content": "<p>the connective is “and”.</p>",
        "id": 193696175,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586670436
    },
    {
        "content": "<p>oh, they are defeq. i see.</p>",
        "id": 193696178,
        "sender_full_name": "Nam",
        "timestamp": 1586670458
    },
    {
        "content": "<p>well, they don't have to be defeq but I would guess that they are for nat</p>",
        "id": 193696179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586670462
    },
    {
        "content": "<p>I thought a &lt;= b is defeq with succ a &lt; b</p>",
        "id": 193696219,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586670491
    },
    {
        "content": "<p>actually they aren't for nat</p>",
        "id": 193696220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586670498
    },
    {
        "content": "<p>but maybe they are for mynat or whatever NNG uses?</p>",
        "id": 193696222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586670509
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/mynat/lt_not_used.lean#L5\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/mynat/lt_not_used.lean#L5\">https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/mynat/lt_not_used.lean#L5</a><br>\nthe file is called \"not used\" though.</p>",
        "id": 193696277,
        "sender_full_name": "Nam",
        "timestamp": 1586670659
    },
    {
        "content": "<p>They're defeq in nng</p>",
        "id": 193696674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586671340
    },
    {
        "content": "<p>Hello there,</p>\n<p>I was making my way through level 6 of inequality when I stumbled on something that has me a bit confused. I was able to finish the level, but the following code that I used to do so bothers me.</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">cases</span> <span class=\"n\">hab</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">uhab</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hba</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">uhba</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">uhab</span> <span class=\"n\">at</span> <span class=\"n\">uhba</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span> <span class=\"n\">at</span> <span class=\"n\">uhba</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span> <span class=\"n\">at</span> <span class=\"n\">uhba</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">uhba</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">add_right_eq_zero</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"c1\">--why does this work???</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h2</span> <span class=\"n\">at</span> <span class=\"n\">uhab</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">uhab</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>I apologize in advance for my uninformative variable names. Why is it that <code>have h := eq_zero_of_add_right_eq_self </code> expects an expression of the form (a b : mynat), but <code>have h2 := add_right_eq_zero</code> expects a proposition? More specifically, why can't I write <code>have h := eq_zero_of_add_right_eq_self uhba</code> without lean whining like I did with <code>have h2 := add_right_eq_zero h1</code>?</p>",
        "id": 195112491,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587672230
    },
    {
        "content": "<p>What is the statement of the theorem you're proving?</p>",
        "id": 195112662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672303
    },
    {
        "content": "<p><code>theorem le_antisymm (a b : mynat) (hab : a ≤ b) (hba : b ≤ a) : a = b :=</code></p>",
        "id": 195112734,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587672348
    },
    {
        "content": "<p>If my understanding of what I learned in proposition world is correct, lean treats implications like <code>eq_zero_of_add_right_eq_self</code> as functions from proofs to proofs, so why can't I write <code>have h := eq_zero_of_add_right_eq_self uhba</code> and obtain <code>h := c + d = 0</code> as a result?</p>",
        "id": 195113139,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587672558
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 195113290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672619
    },
    {
        "content": "<p>so</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 195113367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672665
    },
    {
        "content": "<p>Aah! But</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">add_right_eq_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 195113442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672718
    },
    {
        "content": "<p>exactly!</p>",
        "id": 195113492,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587672730
    },
    {
        "content": "<p>The brackets are different. Does this answer your question? I guess the difference between the () and {} brackets aren't explained in the game.</p>",
        "id": 195113515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672744
    },
    {
        "content": "<p>Ah I see! I don't recall the difference ever being explained in game, and I've completed everything except what's left of inequality world and power world</p>",
        "id": 195113603,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587672810
    },
    {
        "content": "<p>It's because the idiot who designed this stupid game decided to make the numeral inputs explicit in the definition of <code>eq_zero_of_add_right_eq_self</code></p>",
        "id": 195113615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672818
    },
    {
        "content": "<p>what is the difference between {} and () then?</p>",
        "id": 195113723,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587672876
    },
    {
        "content": "<p>With () brackets, Lean expects you to tell it the input. With {} brackets Lean decides it will guess from the context.</p>",
        "id": 195113780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672910
    },
    {
        "content": "<p>It seems to me that in my model solutions, I never use <code>eq_zero_of_add_right_eq_self</code> at all, so I could just change the brackets and it wouldn't break anything.</p>",
        "id": 195113949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587673003
    },
    {
        "content": "<p>Ah thanks, this clarifies a lot of confusion I've had throughout the game so far. I couldn't figure out why different theorems were so inconsistent in what they expected as input.</p>",
        "id": 195113968,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587673017
    },
    {
        "content": "<p>I tried to make it so that the inputs were always \"the things which the user would guess\" because I wanted to avoid having to explain the different kinds of brackets.</p>",
        "id": 195114026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587673054
    },
    {
        "content": "<p>I was going to take a look at the natural number game tomorrow, there are some other issues which people pointed out recently. Probably tomorrow evening there will be a new version where this issue works better.</p>",
        "id": 195114230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587673166
    },
    {
        "content": "<p>Thanks for the comment :-)</p>",
        "id": 195114328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587673207
    },
    {
        "content": "<p>Thanks! Also thanks in general for creating this game. I've learned more about lean in the two days I've been playing it than in the two weeks I spent trying to decipher the resources on the github. You've created something really neat</p>",
        "id": 195114482,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587673321
    },
    {
        "content": "<p>We're working on a sequel: <a href=\"https://github.com/ImperialCollegeLondon/real-number-game\" title=\"https://github.com/ImperialCollegeLondon/real-number-game\">https://github.com/ImperialCollegeLondon/real-number-game</a></p>",
        "id": 195114571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587673356
    },
    {
        "content": "<p>: O</p>",
        "id": 195114594,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587673371
    },
    {
        "content": "<p>I was going to take a good look at that tomorrow too -- my co-author has been doing everything</p>",
        "id": 195114599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587673374
    },
    {
        "content": "<p>Level 15 of inequality world says, \"By default, the definition of a &lt; b in Lean, once ≤ is defined, is this: <code>a &lt; b := a ≤ b ∧ ¬ (b ≤ a)</code>\". Why doesn't lean simply define a &lt; b as <code>a &lt; b := ¬ (b ≤ a)</code>? Is it for the convenience of easily obtaining  a ≤ b from a &lt; b?</p>",
        "id": 195124015,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587678752
    },
    {
        "content": "<p>I think it is because all relation <code>≤ </code> are not total !  For example,   the relation <code>  ⊆  </code> on subset of a set <code> X </code>.  If we take  <code> X = { 0,1}</code>  and the relation  <code>  ⊆  </code>on the subset of  <code>X</code> we  have   <code>¬  {1} ≤ {0} </code> and you don't want to tell that <code> {0} &lt; {1} </code> ! It's ok for the relation where all element are comparable.</p>",
        "id": 195126900,
        "sender_full_name": "orlando",
        "timestamp": 1587680606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/195114571\" title=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/195114571\">said</a>:</p>\n<blockquote>\n<p>We're working on a sequel: <a href=\"https://github.com/ImperialCollegeLondon/real-number-game\" title=\"https://github.com/ImperialCollegeLondon/real-number-game\">https://github.com/ImperialCollegeLondon/real-number-game</a></p>\n</blockquote>\n<p>Do you know when this will be ready? Using Lean to gamify undergrad math is a fantastic idea</p>",
        "id": 195133403,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1587686016
    },
    {
        "content": "<p>Level 7 of inequality world says \"Note that you can do things like have h2 := add_right_eq_zero _ _ h1 if h1 : a + c = 0.\"  What exactly do the underscores do here? The level doesn't give any more details beyond that note, and this is my first time seeing them in the game.</p>",
        "id": 195135060,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587687564
    },
    {
        "content": "<p>The underscores mean that Lean should try and infer those arguments, in this case add_right_eq_zero has type</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">add_right_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>but we can see that if we apply add_right_eq_zero with <code>a c h1</code> as arguments where <code>h1</code> has type <code>a+c = 0</code> then the first two arguments (<code>a</code> and <code>c</code>) aren't strictly needed, theres only one possible thing they can be given the type of <code>h1</code>  for everything to make sense, so the underscores tell lean to work out those arguments automatically.</p>",
        "id": 195135336,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587687839
    },
    {
        "content": "<p>In this case theres not a huge amount of savings (you only have to type one character anyway), generally it saves us from having to retype long complicated terms sometimes,  which can also improve readability, or from having to remember which way round arguments go. And it can make it easier to change variable names later or copy lines to different contexts.</p>",
        "id": 195135440,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587687946
    },
    {
        "content": "<p>But I think this is a bit confusing actually, as in the latest version of the natural number game the arguments for add_right_eq_zero are always implicit (this was changed only recently) so depending on which version is live for you it may be that you never needed to type <code>add_right_eq_zero a c h1</code>.</p>",
        "id": 195135819,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587688387
    },
    {
        "content": "<p>Looks like this is PR <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/pull/69/\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/pull/69/\">https://github.com/ImperialCollegeLondon/natural_number_game/pull/69/</a></p>",
        "id": 195135904,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587688460
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 195139111,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587692717
    },
    {
        "content": "<p>Alright, so I currently have <code>hd : ∀ (b : mynat), a * b = a * d → b = d,</code> and <code>h : a * b = a * d</code> as hypotheses; how do I use this to conclude that <code>b = d</code>?</p>",
        "id": 197339614,
        "sender_full_name": "edderiofer",
        "timestamp": 1589317678
    },
    {
        "content": "<p><code>have := hd _ h</code></p>",
        "id": 197340562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589318126
    },
    {
        "content": "<p>or <code>exact hd _ h</code> if it's your goal</p>",
        "id": 197340603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589318138
    },
    {
        "content": "<p>or <code>apply hd, apply h</code></p>",
        "id": 197340687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589318171
    },
    {
        "content": "<p>Hooray! Thanks!</p>",
        "id": 197340859,
        "sender_full_name": "edderiofer",
        "timestamp": 1589318276
    },
    {
        "content": "<p>Currently I have <code>hba : ¬a ≤ a, hab : a ≤ a</code> as hypotheses; how do I show that this can prove <code>false</code>?</p>",
        "id": 197358922,
        "sender_full_name": "edderiofer",
        "timestamp": 1589331860
    },
    {
        "content": "<p>(Inequality World, level 15. <a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=10&amp;level=15\">https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=10&amp;level=15</a> )</p>",
        "id": 197358933,
        "sender_full_name": "edderiofer",
        "timestamp": 1589331873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301323\">edderiofer</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/197358922\">said</a>:</p>\n<blockquote>\n<p>Currently I have <code>hba : ¬a ≤ a, hab : a ≤ a</code> as hypotheses; how do I show that this can prove <code>false</code>?</p>\n</blockquote>\n<p>Recall that <code>¬P</code> is by definition <code>P-&gt;false</code></p>",
        "id": 197359928,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1589332926
    },
    {
        "content": "<p>Ah, yes.</p>",
        "id": 197359988,
        "sender_full_name": "edderiofer",
        "timestamp": 1589333019
    },
    {
        "content": "<p>i don't know if the <code>contradiction</code> tactic works in NNG, but it closes the goal when you have a statement and its negation in your hypothesis list</p>",
        "id": 197360096,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589333149
    },
    {
        "content": "<p>Ah, that's handy. Lemme check.</p>",
        "id": 197360374,
        "sender_full_name": "edderiofer",
        "timestamp": 1589333478
    },
    {
        "content": "<p>Yep, it does! :D</p>",
        "id": 197360386,
        "sender_full_name": "edderiofer",
        "timestamp": 1589333520
    },
    {
        "content": "<p>Alright, that's this game done. I think I'll do the next-suggested stuff tomorrow. For now, bed.</p>",
        "id": 197360451,
        "sender_full_name": "edderiofer",
        "timestamp": 1589333570
    },
    {
        "content": "<p>Good night, see you around!</p>",
        "id": 197360454,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589333579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> How about adding <a href=\"https://github.com/leanprover-community/mathematics_in_lean\">https://github.com/leanprover-community/mathematics_in_lean</a> as a link on the \"What's next\" (after NNG) page? <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/WHATS_NEXT.md\">https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/WHATS_NEXT.md</a></p>",
        "id": 197410315,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1589375722
    },
    {
        "content": "<p>A link to <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a> would be better</p>",
        "id": 197412868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589376797
    },
    {
        "content": "<p>except we need to add mathematics in Lean to that webpage that is already outdated</p>",
        "id": 197412907,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589376817
    },
    {
        "content": "<p>In Level 5/9 of multiplication world, it looks like <code>repeat { rw mul_zero }</code> also evoke the <code>refl</code> to clear the goal, I didn't find anything about it in the TPinL. Am I right?</p>",
        "id": 198708214,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590448819
    },
    {
        "content": "<p>link please</p>",
        "id": 198708232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590448888
    },
    {
        "content": "<p>In regular lean, <code>rw</code> calls <code>refl</code> to try to close the goal. In NNG it doesn't</p>",
        "id": 198708282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590448925
    },
    {
        "content": "<p>So inside the repeat, rw works as regular Lean...</p>",
        "id": 198708308,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590448990
    },
    {
        "content": "<p>that seems unlikely</p>",
        "id": 198708323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590449027
    },
    {
        "content": "<p>link please</p>",
        "id": 198708330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590449036
    },
    {
        "content": "<p>I think I rewired <code>rw</code> so it always does the non-refl version. Cut and paste the link!</p>",
        "id": 198708373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590449058
    },
    {
        "content": "<p>Do we have a linkifier for this?</p>",
        "id": 198708379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590449079
    },
    {
        "content": "<p>we could ask the guy that made all the linkifiers...wait.</p>",
        "id": 198708388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590449105
    },
    {
        "content": "<p><a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=3&amp;level=5\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=3&amp;level=5</a></p>",
        "id": 198708391,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590449109
    },
    {
        "content": "<p>You can cut and paste your proof -- check out the exciting new clip board in the top right of the input box</p>",
        "id": 198708401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590449159
    },
    {
        "content": "<p>I just enable the linkifiers, they are written by you folks</p>",
        "id": 198708442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590449171
    },
    {
        "content": "<p>After the induction on c, we can close the first goal with <code>repeat {rw mul_zero}</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_zero</span> <span class=\"o\">},</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 198708447,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590449186
    },
    {
        "content": "<p>I recall a NNG linkifier being proposed but I guess I didn't enable that. Plus there are now like 4 NNG clones and I don't know all the appropriate links</p>",
        "id": 198708455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590449219
    },
    {
        "content": "<p>Yeah that is puzzling!</p>",
        "id": 198708457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590449220
    },
    {
        "content": "<p>Does <code>repeat</code> try <code>refl</code> when the thing it's repeating stops working?</p>",
        "id": 198708468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590449248
    },
    {
        "content": "<p>no</p>",
        "id": 198708474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590449258
    },
    {
        "content": "<p>assuming you didn't change it in NNG</p>",
        "id": 198708475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590449273
    },
    {
        "content": "<p>then this must be a glitch in the matrix</p>",
        "id": 198708524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590449290
    },
    {
        "content": "<p>where's the source for the NNG tactic setup</p>",
        "id": 198708531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590449292
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/tactic/nat_num_game.lean\">https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/tactic/nat_num_game.lean</a></p>",
        "id": 198708539,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590449303
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/tactic/modded.lean\">https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/tactic/modded.lean</a> is my modded <code>rw</code></p>",
        "id": 198708548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590449335
    },
    {
        "content": "<p>Hum, I didn't know that we have a layer of customizations on top of the Lean tactics...</p>",
        "id": 198708565,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590449383
    },
    {
        "content": "<p>Yup...</p>",
        "id": 198708570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590449398
    },
    {
        "content": "<p>I did it specifically to confuse everyone, it's working really well</p>",
        "id": 198708611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590449415
    },
    {
        "content": "<p>I'm pretty sure \"teaching non-transferrable skills\" is the whole point of games</p>",
        "id": 198708619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590449446
    },
    {
        "content": "<p>Actually, I did it because I didn't want <code>rw</code> randomly closing <code>refl</code> goals and confusing mathematicians who were just learning about equational reasoning</p>",
        "id": 198708620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590449449
    },
    {
        "content": "<p>I think what happened is that because <code>repeat</code> is not one of your overridden commands, it was copied verbatim from <code>tactic.interactive</code>; but the argument of <code>repeat</code> is an <code>itactic</code> which uses the <code>tactic</code> monad instead of <code>nat_num_game</code>. So <code>repeat {rw ..}</code>  is calling <code>tactic.interactive.rw</code> instead of <code>nat_num_game.interactive.rw</code></p>",
        "id": 198708817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590449643
    },
    {
        "content": "<p>Similar issues should exist for any commands that take a braced tactic list argument, like <code>case</code>, <code>all_goals</code>, <code>any_goals</code>, <code>repeat</code>, and possibly even <code>focus</code>, also known as the bare brackets <code>{ }</code>. So I guess you did right to not teach people to use braces around subgoals</p>",
        "id": 198708906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590449768
    },
    {
        "content": "<p>correction, bare <code>{ tac }</code> is not affected, but <code>focus { tac }</code> is</p>",
        "id": 198709110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590450094
    },
    {
        "content": "<p>in the game, I also noted that we can use { sorry } for moving to another goal... right?</p>",
        "id": 198711082,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590453101
    },
    {
        "content": "<p>Sort of. <code>{</code> and <code>}</code> focus the current goal, and then <code>sorry</code> finishes it. There are other goal management tactics like <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#swap\">tactic#swap</a> which allow you to switch between goals; try clicking \"filter by tag\" on the left of the mathlib tactic docs and then select \"goal management\" to see them all. (Not sure how many work inside the NNG.)</p>",
        "id": 198711235,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590453256
    },
    {
        "content": "<p>I tended to import what I needed when I needed it so what works will be random and will change over the course of the game</p>",
        "id": 198727748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590477913
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">iff_trans</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intros</span> <span class=\"n\">pq</span> <span class=\"n\">qr</span><span class=\"o\">,</span>\n <span class=\"n\">split</span><span class=\"o\">,</span>\n <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n <span class=\"n\">exact</span> <span class=\"n\">qr</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">pq</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n <span class=\"n\">intro</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n <span class=\"n\">apply</span> <span class=\"n\">pq</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n <span class=\"n\">apply</span> <span class=\"n\">qr</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n <span class=\"n\">exact</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The tactics <code>have</code> and <code>apply</code> were presented as the forward vs backward reasoning strategies. But <code>exact t</code> (when we think about the term <code>t</code>) vs <code>apply</code> is also a forward vs backward reasoning, does it make sense?</p>",
        "id": 199078508,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590696316
    },
    {
        "content": "<p>In <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=7&amp;level=8\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=7&amp;level=8</a>, I can't see any import but the text says <code>Did you spot the import? What do you think it does?</code>...</p>",
        "id": 199089575,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590701817
    },
    {
        "content": "<p>I think that's a holdover from when the game was meant to be played in VS Code: <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/b83e7ebd56a82351e2fd8a187de543803074818b/src/game/world7/level8.lean#L1\">https://github.com/ImperialCollegeLondon/natural_number_game/blob/b83e7ebd56a82351e2fd8a187de543803074818b/src/game/world7/level8.lean#L1</a></p>",
        "id": 199091457,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590703078
    },
    {
        "content": "<p>Ah yes, see: <a href=\"#narrow/stream/113489-new-members/topic/natural.20number.20game.20questions/near/189524028\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/natural.20number.20game.20questions/near/189524028</a></p>",
        "id": 199091573,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590703155
    },
    {
        "content": "<p>the tactic <code>tauto</code> is from mathlib, right?</p>",
        "id": 199092515,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590703763
    },
    {
        "content": "<p>I'm trying to rewrite some proofs in NGN to different styles and have 5 questions regarding the subtleties (marked as Q0 through Q4 in the comments of the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> which is a bit long but I did try to minimalize it, please start reading at <code>--------------------</code> ), thank you very much:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mynat_zero_eq_zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mul</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">----------------------------------------</span>\n\n<span class=\"c1\">-- The proof in tactic mode</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_mul</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n<span class=\"c1\">-- Q0: Why do I need this extra line compared to in http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=3&amp;level=1</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mynat_zero_eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_zero</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_succ</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m_n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">m_ih</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- The proof of a forall version of the lemma</span>\n<span class=\"c1\">-- ported from https://leanprover-community.github.io/mathlib_docs/core/init/data/nat/lemmas.html#nat.zero_mul</span>\n<span class=\"c1\">-- Q1: Why does it need an extra refl than the original proof?</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_mul_forall</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>        <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_succ</span><span class=\"o\">,</span> <span class=\"n\">zero_mul_forall</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_mul_forall_match</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span>  <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">zero</span> <span class=\"bp\">*</span> <span class=\"n\">zero</span>\n    <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mynat_zero_eq_zero</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_zero</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m_n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m_n</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m_n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_succ</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m_n</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m_n</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">zero_mul_forall_match</span> <span class=\"n\">m_n</span>\n\n<span class=\"c1\">-- Q2: how can I refer to the lemma itself in the match proof at &lt;marker&gt;</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_mul_match</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">zero</span> <span class=\"bp\">*</span> <span class=\"n\">zero</span>\n    <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mynat_zero_eq_zero</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_zero</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m_n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m_n</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m_n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_succ</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m_n</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m_n</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- &lt;marker&gt;</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_mul_induction_zero</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_mul_induction_m_n</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">m_n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m_n</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">mul_succ</span> <span class=\"mi\">0</span> <span class=\"n\">m_n</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span>\n\n<span class=\"c1\">-- Q3: Why `add_zero` is no longer needed?</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_mul_induction_m_n&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">m_n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_succ</span> <span class=\"mi\">0</span> <span class=\"n\">m_n</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span>\n\n<span class=\"c1\">-- Q4: Why lean doesn&#39;t accept this</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_mul_rec</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">zero_mul_induction_zero</span> <span class=\"n\">zero_mul_induction_m_n</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  m.rec_on zero_mul_induction_zero zero_mul_induction_m_n</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  zero_mul_induction_m_n</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ∀ (n : mynat), 0 * n = 0 → 0 * n.succ = 0</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ∀ (n : mynat), 0 * zero = n → 0 * zero = n.succ</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n</code></pre></div>",
        "id": 199964443,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591434039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> the <code>rw</code> in NNG is different from the<code>rw</code> in mathlib. The one in mathlib automatically tries <code>refl</code> at the end. I guess that answers Q1.</p>",
        "id": 199964663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591434381
    },
    {
        "content": "<p>Thanks! I've also just added a Q0.</p>",
        "id": 199964735,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591434497
    },
    {
        "content": "<p>Q2: I think you can not (elegantly) refer to the lemma itself...</p>",
        "id": 199964737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591434499
    },
    {
        "content": "<p>This is a known shortcoming of <code>match</code>.</p>",
        "id": 199964741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591434511
    },
    {
        "content": "<p>But in the <code>zero_mul_forall_match </code> version I can refer to it, and I can't find the explanation of this (whether doc or code).</p>",
        "id": 199964763,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591434554
    },
    {
        "content": "<p>Writing recursive proofs in this style is characteristic of those coming from Coq. In lean you use the equation compiler instead, which is just as powerful but is sometimes limited by the fact that it only works at the top level of a definition</p>",
        "id": 199964780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591434600
    },
    {
        "content": "<p>That is, Lean obligates you to write <code>zero_mul_match</code> like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">zero_mul_match</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">zero</span> <span class=\"bp\">*</span> <span class=\"n\">zero</span>\n    <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mynat_zero_eq_zero</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_zero</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m_n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m_n</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m_n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_succ</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m_n</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m_n</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">zero_mul_match</span> <span class=\"n\">m_n</span>\n</code></pre></div>",
        "id": 199964849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591434688
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , but how can I use the equation compiler in this case? And I could not find a good doc of equation compiler.</p>",
        "id": 199964856,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591434707
    },
    {
        "content": "<p>So the <code>\\forall</code> in the lemma is inevitable and the only viable practice in Lean?</p>",
        "id": 199964903,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591434746
    },
    {
        "content": "<p>The type of the lemma is the same in both cases</p>",
        "id": 199964911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591434767
    },
    {
        "content": "<p>there is no external difference between <code>T (foo : bar) : baz</code> and <code>T : \\forall (foo : bar), baz</code></p>",
        "id": 199964922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591434801
    },
    {
        "content": "<p>However within the definition it distinguishes between the variables that are allowed to change during the recursion and those that are fixed parameters</p>",
        "id": 199964930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591434836
    },
    {
        "content": "<p>So if you want to do a recursive call with a different value of <code>m_n</code>, you have to put it \"right of the colon\"</p>",
        "id": 199964978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591434865
    },
    {
        "content": "<p>I see(from \"distinguishes between the variables that are allowed to change during the recursion and those that are fixed parameters\", the former has to be \"right of the colon\").</p>",
        "id": 199965071,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591435033
    },
    {
        "content": "<p>When you write a lemma without the equation compiler, that is, in <code>theorem foo ... : ... := ...</code> form, then it is not allowed to be recursive at all, and references to <code>foo</code> will be resolved as if <code>foo</code> doesn't exist yet</p>",
        "id": 199965145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591435103
    },
    {
        "content": "<p>By \"could not find a good doc of equation compiler\", no doc I found explains the <code>.</code> in the following while I once noticed this in Zulip that's also part of the equation compiler:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 199965171,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591435167
    },
    {
        "content": "<p>That's an empty match</p>",
        "id": 199965205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591435202
    },
    {
        "content": "<p>Q0: The natural number game is not pure lean, I modified the induction tactic so it did the rewrite for you.</p>",
        "id": 199965235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591435235
    },
    {
        "content": "<p>because <code>nat.succ n</code> and <code>0</code> are distinct constructors, when you pattern match <code>rfl</code> against the equality, you find there are no cases to handle, and so an empty proof works</p>",
        "id": 199965242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591435267
    },
    {
        "content": "<p>Note that the equation compiler sees that goal as <code>\\forall (h : nat.succ n = 0), false</code> and effectively does <code>| rfl := &lt;wait a minute, this doesn't typecheck&gt;</code></p>",
        "id": 199965341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591435335
    },
    {
        "content": "<p>Q3 because add_zero is true by definition</p>",
        "id": 199965393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591435420
    },
    {
        "content": "<p>from a foundational POV, it's totally a circular proof, we are proving that succ is not zero by appeal to the fact that the equation compiler knows that succ is not zero because it proved it somewhere internally</p>",
        "id": 199965461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591435458
    },
    {
        "content": "<p>Q4 read the error message</p>",
        "id": 199965468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591435466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Isee, but the reference and doc I found seems to be not MECE enough to address this part of the behavior of the equation compiler.</p>",
        "id": 199965482,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591435486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/199965393\">said</a>:</p>\n<blockquote>\n<p>Q3 because add_zero is true by definition</p>\n</blockquote>\n<p>But in the game, it seems that I do need it.</p>",
        "id": 199965512,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591435542
    },
    {
        "content": "<p>MECE?</p>",
        "id": 199965516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591435547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  So your answer to Q0 is my assumption, and it kind of contradicts with Q3, Q0 is more automation and Q3 is less.</p>",
        "id": 199965576,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591435614
    },
    {
        "content": "<p>In the game you can prove add_zero by rfl if you like and I modified rw so it wouldn't close definitional equality goals directly afterwards because I don't emphasise the non-mathematical concept of definitional equality in a game targeting mathematicians</p>",
        "id": 199965586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591435644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/199965516\">said</a>:</p>\n<blockquote>\n<p>MECE?</p>\n</blockquote>\n<p>MECE stands for \"both mutually exclusive and collectively exhaustive\".</p>",
        "id": 199965601,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591435677
    },
    {
        "content": "<p>There are 0 cases, they are obviously mutually exclusive, and they are collectively exhaustive because there are no valid cases</p>",
        "id": 199965661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591435724
    },
    {
        "content": "<p>For <code>.</code>, yes. But I mean for all the syntax that equation compiler supports...</p>",
        "id": 199965692,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591435779
    },
    {
        "content": "<p>In general you provide it with more cases using <code>| bla := ...</code> syntax</p>",
        "id": 199965743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591435809
    },
    {
        "content": "<p>I have no idea what the docs say about the equation compiler. You are probably right that they are lacking</p>",
        "id": 199965788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591435896
    },
    {
        "content": "<p>For Q4, it works if you replace <code>m.rec_on</code> with <code>mynat.rec_on m</code>. I don't know why though...</p>",
        "id": 199965838,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1591435942
    },
    {
        "content": "<p>You can't use projection notation with <code>@[elab_as_eliminator]</code> functions</p>",
        "id": 199965854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591435964
    },
    {
        "content": "<p>I doubt this is for any very good reason, but if I had to take a guess it would be that the use of projection notation delays the determination and typechecking of the function and you end up typechecking the arguments with the wrong type</p>",
        "id": 199965921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591436058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/199965586\">said</a>:</p>\n<blockquote>\n<p>In the game you can prove add_zero by rfl if you like and I modified rw so it wouldn't close definitional equality goals directly afterwards because I don't emphasise the non-mathematical concept of definitional equality in a game targeting mathematicians</p>\n</blockquote>\n<p>I see, so the intention probably is not to distract the newcomers with the boring mynat_zero_eq_zero and not to allow them to rely on smarter <code>rw</code> . I'm easily puzzled by seemingly conflicting intentions of the invisible designer of the behaviours of the code hence the question.</p>",
        "id": 199965964,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591436130
    },
    {
        "content": "<p>If you think this way, then I would suggest working from the ground up, and understand dependent type theory, and then expand that to how elaboration makes things easier to write and how tactics automate the construction of terms</p>",
        "id": 199966050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591436276
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> is a good source for this order of learning</p>",
        "id": 199966121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591436361
    },
    {
        "content": "<p>NNG is more for people who prefer playing games and learning the rules as they go</p>",
        "id": 199966139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591436396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/199966050\">said</a>:</p>\n<blockquote>\n<p>If you think this way, then I would suggest working from the ground up, and understand dependent type theory, and then expand that to how elaboration makes things easier to write and how tactics automate the construction of terms</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  My path is sort of non-linear: \"The Hitchhiker's Guide to Lean\" -&gt; \"TPIL\" -&gt; \"Logic and Proof\" -&gt; \"Reading doc, mathlib code and Zulip\" -&gt; \"NGN\" (rewrite stuff in it to prepare for other games), so I know some basics of the ground and trying to have a coherent mental model when I encounter some seemingly weird behaviors.</p>",
        "id": 199966352,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591436657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/199965854\">said</a>:</p>\n<blockquote>\n<p>You can't use projection notation with <code>@[elab_as_eliminator]</code> functions</p>\n</blockquote>\n<p>No <code>@[elab_as_eliminator</code> has been specified for the <code>rec_on</code> of <code>mynat</code>, it seems?</p>",
        "id": 199966436,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591436795
    },
    {
        "content": "<p>Also I never found the code of <code>rec_on</code>, I kind of assumed that it's a built-in method for inductive types.</p>",
        "id": 199966448,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591436868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/199965468\">said</a>:</p>\n<blockquote>\n<p>Q4 read the error message</p>\n</blockquote>\n<p>The exact question is that the type requested by the first argument seems to be volatile.</p>\n<p>I came up with the type <code>0 * zero = 0</code> of <code>zero_mul_induction_zero</code> by doing <code>m.rec_on _ sorry</code> and hover on <code>_</code>, but after I did the same for the second argument so that I have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">zero_mul_rec&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">zero_mul_induction_zero</span> <span class=\"n\">zero_mul_induction_m_n</span>\n</code></pre></div>\n\n\n<p>Lean complains that the first argument should be <code>0 * zero = n</code> instead (against its own hint) but the proposition can't be true since there's no way <code>0 * 0 = n</code>.</p>\n<p>It smells like a bug.</p>",
        "id": 199967096,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591437726
    },
    {
        "content": "<p>Sorry, I misunderstood initially. I've had problems using projection notation with recursors before, I think also there are issues with <code>list</code>. As for the design of the game, I wanted mathematicians not to have to think at all about notation and I wanted them to learn about rewriting and equational reasoning, and after extensive testing amongst mathematics undergraduates at Imperial College so I changed the behaviour of the induction and rewrite tactics so they behaved in a way which mathematicians with no background in type theory found less confusing</p>",
        "id": 199967807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591438981
    },
    {
        "content": "<p>Thanks for the clarification, it all makes sense to me now. (The question is only raised after I did a few times of \"add <code>rw mynat_zero_eq_zero,</code> at the beginning\" and \"remove <code>refl</code>\" at the end during copying my solutions to a standalone lean file and making it type check).</p>",
        "id": 199967960,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591439279
    },
    {
        "content": "<p>Also, having to explicitly write down <code>refl</code> when having the expectation of <code>defeq</code> as \"press the same buttons on your computer in the same order\" equal is indeed less confusing.</p>",
        "id": 199968097,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591439456
    },
    {
        "content": "<p>Yes that was the problem, non-syntactically equal defeq equality goals were being randomly closed after a rw.</p>",
        "id": 199968395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591439944
    },
    {
        "content": "<p>Just for fun, here's another story related to a similar trust crisis with Lean.</p>\n<p>A while ago, I (who hadn't written a line of Lean code by the time) copy-pasted the following code from the default code in <a href=\"https://leanprover-community.github.io/lean-web-editor/\">https://leanprover-community.github.io/lean-web-editor/</a> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n\n\n<p>and Lean fails to unify. You can imagine how I feel at the moment.</p>\n<p>It took me quite some time to make Lean happy, but <code>by cc</code>. And sometime later, I simplified it to something I understand: <code>by simp [add_comm]</code>. Eventually, I reduced it to <code>by apply add_comm</code>.</p>\n<p>And by accident, I noticed the changelog <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/changes.md#v360c-26-feb-2020\">https://github.com/leanprover-community/lean/blob/master/doc/changes.md#v360c-26-feb-2020</a></p>\n<p>and that's when I know the breaking change of removing lemmas about commutativity from <code>simp</code> default set.</p>\n<p>I'm glad to see that this issue is now fixed on the online editor (I should have reported it back then but somehow I didn't, sorry)</p>",
        "id": 199968663,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591440475
    },
    {
        "content": "<p>We do the best we can, the lean prover community is run by volunteers. We believe in the potential of the software and are trying hard to juggle many projects such as running the website, the web editor, the installer including auto-downloading of mathlib oleans -- there is a lot of work being done, and of course on top of that is the constant stream of PR's. In some sense you're observing here that the project is expanding.</p>",
        "id": 199968828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591440807
    },
    {
        "content": "<p>Yes, I'm very grateful for the efforts of whole community. Sorry if the story sounds disrespect for that. The warm side of the story is that by reading many conversations happening in Zulip, the trust is fully recovered and strengthened.</p>",
        "id": 199969104,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591441219
    },
    {
        "content": "<p>Hi there, I'm new here (I followed the etiquette rule of --briefly!-- introducing myself in a topic; idk if I should wait for replies there before making noise here, but anyway). Today I started playing the <em>Natural Number Game</em> and I wondered if there was chance to save the all the code I've written there (not much, but to save me the trouble of navigating each screen).</p>",
        "id": 205965532,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1596577925
    },
    {
        "content": "<p>Whether or not it's possible (I'm not sure), did you realise that the game allows you to skip levels?  So you can go directly to where you left off even if you don't have the nice node colouring :)</p>",
        "id": 205971745,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596582346
    },
    {
        "content": "<p>It should just automatically save progress in your browser.</p>",
        "id": 205971839,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596582426
    },
    {
        "content": "<p>Welcome, btw!  I switched from Coq a few months ago, nice to hear there are some Lean-curious Isabelle folks.</p>",
        "id": 205971849,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596582440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> thank you both! I'm aware of this, I just wanted to download my progress.</p>",
        "id": 205974152,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1596584584
    },
    {
        "content": "<p>I think copy and paste into a editor is a solution. My son was playing for a while, before the browser caching arrived, and didn't like losing his progress so we copied and pasted. :-)</p>\n<p>Alternatively, you can download the natural numbers game as a bunch of Lean files, and \"work locally\", although we'd have to ping someone for instructions.</p>",
        "id": 205974271,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596584670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  Thanks again, c&amp;p was the solution I was trying to avoid :-) For a while, I'm not able to run Lean on my laptop because of compatibility issues (my distro is too old, and I'm not at a good moment for a dist-upgrade).</p>",
        "id": 205974479,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1596584836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I'm a quite non-typical Isabelle user... I've been working fully in Isabelle/ZF. But I'm deeply in love with declarative proof style.</p>",
        "id": 205974646,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1596585001
    },
    {
        "content": "<p>I'm stuck in the Natural Numbers game. Advanced Addition World Level 8. I have to show a+b=a implies b=0.<br>\nSo I use </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>This leaves me at</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>But  I cannot figure out how to use add_left_cancel to get rid of the a in the hypothesis.<br>\nAny hints would be appreciated.</p>",
        "id": 209244886,
        "sender_full_name": "Rene Recktenwald",
        "timestamp": 1599432174
    },
    {
        "content": "<p>The hypothesis says (a+0)+b=a+0 so you can't use add_left_cancel on it yet</p>",
        "id": 209245110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599432586
    },
    {
        "content": "<p>I would love to know how to switch the brackets on so people can see where they really are, but apparently there's no easy way of doing this</p>",
        "id": 209245162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599432638
    },
    {
        "content": "<p>I have tried using rw add_assoc at h, first, but still couldn't figure out how to proceed</p>",
        "id": 209245173,
        "sender_full_name": "Rene Recktenwald",
        "timestamp": 1599432678
    },
    {
        "content": "<p>if I have a hypothesis h : H and a function H-&gt;J how do I get a j in my stack of things I can use in general?</p>",
        "id": 209245231,
        "sender_full_name": "Rene Recktenwald",
        "timestamp": 1599432763
    },
    {
        "content": "<p>If <code>h : H</code> and <code>f : H \\to J</code> then you can do <code>let j := f h</code> if <code>J</code> is a type, or <code>have j := f h</code> if J is a true/false statement</p>",
        "id": 209245249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599432827
    },
    {
        "content": "<p>Hmm ok I'll see if I can proceed in my level via this.<br>\nby the way thanks for providing the natural number game =)</p>",
        "id": 209245290,
        "sender_full_name": "Rene Recktenwald",
        "timestamp": 1599432866
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">add_left_cancel</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>works</p>",
        "id": 209245303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599432903
    },
    {
        "content": "<p><code>add_left_cancel</code> is a function. It takes four inputs. The first three are numbers, and the last one is a proof.</p>",
        "id": 209245313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599432921
    },
    {
        "content": "<p>I wrote the game for my students but I'm glad you're enjoying it too.</p>",
        "id": 209245318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599432943
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">add_left_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n\n<p>It eats t, a, b, and then a proof that t+a=t+b, and it spits out a proof that a=b</p>",
        "id": 209245361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599432998
    },
    {
        "content": "<p>Well Johan recommended it, when I was still in Freiburg, and I'm finally taking the time to dig into lean</p>",
        "id": 209245370,
        "sender_full_name": "Rene Recktenwald",
        "timestamp": 1599433037
    },
    {
        "content": "<p>Thank you for the help!</p>",
        "id": 209245379,
        "sender_full_name": "Rene Recktenwald",
        "timestamp": 1599433075
    },
    {
        "content": "<p>It's what <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> is for</p>",
        "id": 209245438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599433139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303962\">@Rene Recktenwald</span> Good to see you again <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 209255820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599452310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Haha and I'm back once more =D Stuck on Inequality World Level 9 this time. Having to prove a \\leq b or b\\leq a.<br>\nI think I want to do induction on a, but then my induction hyp is a&lt;=b or b&lt;=a, and I would like to split this into two goals, one where I have just a&lt;=b and the other where I have just b&lt;=a, but I don't know how to do it.</p>",
        "id": 210607716,
        "sender_full_name": "Rene Recktenwald",
        "timestamp": 1600510013
    },
    {
        "content": "<p>You can split an <code>or</code> with <code>cases</code></p>",
        "id": 210608181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600510870
    },
    {
        "content": "<p>Ah yeah, I thought I had tried that but I must have made a mistake. Thanks once more :)</p>",
        "id": 210608493,
        "sender_full_name": "Rene Recktenwald",
        "timestamp": 1600511321
    },
    {
        "content": "<p>Hmm to be honest I'm still stuck. If I have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a\\leq b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> as a hypothesis, is there a way to do cases on the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>? My current goal is </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n<span class=\"err\">⊢</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">succ</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 210609955,
        "sender_full_name": "Rene Recktenwald",
        "timestamp": 1600513969
    },
    {
        "content": "<p>you don't have the c</p>",
        "id": 210609964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600513991
    },
    {
        "content": "<p>so you can't do cases on it yet.</p>",
        "id": 210609969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600514000
    },
    {
        "content": "<p>can I do something akin to <code>use c at hi</code> ?</p>",
        "id": 210610256,
        "sender_full_name": "Rene Recktenwald",
        "timestamp": 1600514529
    },
    {
        "content": "<p>In Lean, you have hypotheses, and goals. You want to use hypotheses, and solve goals.</p>",
        "id": 210610280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600514633
    },
    {
        "content": "<p>But the <em>logic</em> of a hypothesis and of a goal are completely different. For example if you have a hypothesis <code>hPQ : P -&gt; Q</code>, you can make progress if you have a hypothesis <code>hP : P</code>, but you can't use it if you have a hypothesis <code>hq : Q</code>. You could use if it you have a goal <code>⊢ Q</code> but you can't use it if you have a goal <code>⊢ P</code>.</p>",
        "id": 210610330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600514698
    },
    {
        "content": "<p>Abstractly, what's going on is that things like \"exists c, ...\" and \"P and Q\", and all the other things, have constructors and eliminators.</p>",
        "id": 210610339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600514754
    },
    {
        "content": "<p>If your _goal_ is \"P and Q\", then you are going to need a tactic which comes up with a constructor for \"P and Q\". The <code>split</code> tactic does this for you.</p>",
        "id": 210610386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600514798
    },
    {
        "content": "<p>If you have a _hypothesis_ \"P and Q\" then you're going to need a tactic which comes up with an eliminator for \"P and Q\", because you have it, and you want to use it, so you want to turn it into other things. The <code>cases</code> tactic does this for you.</p>",
        "id": 210610400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600514845
    },
    {
        "content": "<p>What I'm saying is that if you see an \"exists\" statement, and you want to work on that statement, then what you next <em>very much</em> depends on whether that statement is a hypothesis, or a goal, because the logic is completely different in the two situations.</p>",
        "id": 210610445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600514895
    },
    {
        "content": "<p>The <code>use</code> tactic is the tactic which makes a constructor for \"exists\", so it's useful if the _goal_ is \"exists\".</p>",
        "id": 210610455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600514921
    },
    {
        "content": "<p>But you need an eliminator for <code>exists</code> -- you have a proof that something exists, and you want to get to the something.</p>",
        "id": 210610460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600514947
    },
    {
        "content": "<p>So <code>use</code> can never work, because all <code>use</code> does it that it <em>makes proofs</em> of \"exists c, ...\". You have a proof already, and you want to use that proof elsewhere.</p>",
        "id": 210610470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600514984
    },
    {
        "content": "<p>So use a tactic which deconstructs existing data, like <code>cases</code>.</p>",
        "id": 210610477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600515001
    },
    {
        "content": "<p>ok so I do cases on the <code>hi</code> and then this gives me access to the c, which I can then do <code>cases</code> on once more?</p>",
        "id": 210610572,
        "sender_full_name": "Rene Recktenwald",
        "timestamp": 1600515123
    },
    {
        "content": "<p>right</p>",
        "id": 210610603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600515132
    },
    {
        "content": "<p>If <code>h : A \\and B</code> then <code>h</code> is a term which has internally been constructed from a pair of terms -- a proof of A and a proof of B. <code>cases</code> will get to those terms for you.</p>",
        "id": 210610612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600515162
    },
    {
        "content": "<p>If <code>h : exists c, P(c)</code> then <code>h</code> is a term which has been internally constructed from a pair of terms -- a natural c, and a proof of P(c). And <code>cases h</code> will again get to those terms for you.</p>",
        "id": 210610633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600515198
    },
    {
        "content": "<p>\"and\" and \"exists\" are structures -- inductive types with one constructor.</p>",
        "id": 210610647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600515230
    },
    {
        "content": "<p>in general, if you do cases on a term of an inductive type with n constructors, you will end up with n goals. This is why if you do cases on <code>A or B</code>, or on a natural number, you get two goals.</p>",
        "id": 210610701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600515292
    },
    {
        "content": "<p>Ok thank you so much, I got it now. But I will revisit it later, because I used what we have to prove in Level 10 for level 9 already =D I want to find the better way</p>",
        "id": 210610929,
        "sender_full_name": "Rene Recktenwald",
        "timestamp": 1600515661
    },
    {
        "content": "<p>I can't guarantee there's a better way -- parts of the game are not very well-organised.</p>",
        "id": 210611200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600516051
    },
    {
        "content": "<p>The real answer should be that we should write proper docstrings for <code>\\exists</code> and friends that tell you which tactics you can use to (de)construct them... but we're somewhat stuck on deciding whether we add those docstrings in core or in mathlib.</p>",
        "id": 210614040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600520553
    },
    {
        "content": "<p>FWIW having recently done NNG the one thing I found quite nice to have at my side (which wasn't already mentioned within NNG) was the 1-sheeter tactic cheat sheet</p>",
        "id": 210618644,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600526661
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io//img/lean-tactics.pdf\">https://leanprover-community.github.io//img/lean-tactics.pdf</a> this one -- <span class=\"user-mention\" data-user-id=\"303962\">@Rene Recktenwald</span> maybe that'd help</p>",
        "id": 210618691,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600526748
    },
    {
        "content": "<p>(it at least for me reinforced the \"you need different tactics when things appear in goals vs. hypotheses\" idea)</p>",
        "id": 210618750,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600526785
    },
    {
        "content": "<p>Oh that's so cool, thanks</p>",
        "id": 210622143,
        "sender_full_name": "Rene Recktenwald",
        "timestamp": 1600531549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/210614040\">said</a>:</p>\n<blockquote>\n<p>The real answer should be that we should write proper docstrings for <code>\\exists</code> and friends that tell you which tactics you can use to (de)construct them... but we're somewhat stuck on deciding whether we add those docstrings in core or in mathlib.</p>\n</blockquote>\n<p>I think we were fine with adding them to core in <a href=\"https://github.com/leanprover-community/lean/issues/296\">lean#296</a>, but I wanted to make sure the docstrings that referenced mathlib tactics made it clear that mathlib was required and how to import them.</p>",
        "id": 210622903,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600532540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> can we add stubs to core, and overwrite them in mathlib with more extensive versions?</p>",
        "id": 210624012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600534046
    },
    {
        "content": "<p>Good question. Is there a function that replaces docstrings rather than just adds them?</p>\n<p>I'm not opposed to the idea but it seems like it could be more work for marginal benefit.</p>",
        "id": 210624407,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600534627
    }
]