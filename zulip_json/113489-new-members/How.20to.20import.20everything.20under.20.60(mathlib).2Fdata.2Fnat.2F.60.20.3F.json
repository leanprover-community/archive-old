[
    {
        "content": "<p>Since I never know beforehand which precise files I need to import (who would have guessed that <code>nat.odd_of_mod_four_eq_three</code> lives in <code>data.nat.modeq</code>?), I would like to imprt everything related to <code>nat</code>s (say) in one go. But <code>import data.nat</code> gives the error <code>file 'data/nat' not found in the search path</code> (whereas <code>import tactic</code> does work, even though <code>tactic</code> is a folder and not a file). So how can I get around this?</p>",
        "id": 275910277,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647695918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> <em>If</em> there is a file <code>some/directory/default.lean</code>, then that will get imported if you write <code>import some.directory</code>.</p>",
        "id": 275910347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647696016
    },
    {
        "content": "<p>But not all directories have such a file. And <code>default.lean</code> doesn't always import all other files in the directory either.</p>",
        "id": 275910356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647696044
    },
    {
        "content": "<p>OK; this tells me why my attempt did not work. But is there a reasonable way to do it other than importing all the individual files? I guess I could write some sort of <code>all_nat.lean</code> file for this and import that. Is this the way to go?</p>",
        "id": 275910438,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647696190
    },
    {
        "content": "<p>YOu would end up importing most of the library I suspect. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> has <em>a lot</em> of properties.</p>",
        "id": 275910453,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647696224
    },
    {
        "content": "<p>I feel like out of all the folders, data/nat could definbitely have a <code>default</code>; I thought the same as Yael but I had a hunt and there's no really egregiously large file there</p>",
        "id": 275910500,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647696248
    },
    {
        "content": "<p>In a separate thread, Kevin said this:</p>\n<p>You can always run <code>./scripts/mk_all.sh</code> on the command line and then <code>import all</code> if you want to search all of mathlib.</p>",
        "id": 275910504,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647696261
    },
    {
        "content": "<p>BTW, generating <code>all.lean</code> and doing <code>import all</code> tends to produce <code>excessive memory errors</code> on things like <code>suggest</code>or <code>hint</code>...</p>",
        "id": 275910508,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647696276
    },
    {
        "content": "<p>(I was just typing this before Damiano replied...)</p>",
        "id": 275910514,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647696290
    },
    {
        "content": "<p>I feel like the most efficient way to search theorems in mathlib is using the regex search</p>",
        "id": 275910538,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647696354
    },
    {
        "content": "<p>The concrete motivation for my question is the following. I want to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>believing that this should certainly be (in a suitably more general form) in mathlib, but I was unable to find it...</p>",
        "id": 275910580,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647696408
    },
    {
        "content": "<p>indeed, just typing <code>% 4</code> finds this theorem pretty instantly</p>",
        "id": 275910581,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647696412
    },
    {
        "content": "<p>Where do I type <code>% 4</code>?</p>",
        "id": 275910596,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647696449
    },
    {
        "content": "<p>if you're using <code>vscode</code>, you can press the search thing on the left or press (ctrl/command)+shift+f</p>",
        "id": 275910652,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647696508
    },
    {
        "content": "<p>If I do that, I find lots of places where <code>% 4</code> occurs in my project files, but it doesn't appear to search the library.</p>",
        "id": 275910678,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647696577
    },
    {
        "content": "<p>oh! you'll need to turn off the cog of doom</p>",
        "id": 275910730,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647696603
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/oTBwmO4eeXOBdOX91P4qJMQD/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/oTBwmO4eeXOBdOX91P4qJMQD/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/oTBwmO4eeXOBdOX91P4qJMQD/image.png\"></a></div><p>unpress that weird cog at the bottom right</p>",
        "id": 275910741,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647696624
    },
    {
        "content": "<p>(in this case though, you may enjoy <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.div_add_mod\">docs#nat.div_add_mod</a>, too)</p>",
        "id": 275910764,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647696682
    },
    {
        "content": "<p>Yeah, the proof is <code>use p/4</code> then <code>rw &lt;- hp</code> followed by <code>library_search</code></p>",
        "id": 275910810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647696743
    },
    {
        "content": "<p>I knew that I had seen this at some point, but wasn't able to find it again...</p>",
        "id": 275911034,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647697096
    },
    {
        "content": "<p>Which is an experience I'm having more and more frequently.</p>",
        "id": 275911071,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647697193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20import.20everything.20under.20.60.28mathlib.29.2Fdata.2Fnat.2F.60.20.3F/near/275910500\">said</a>:</p>\n<blockquote>\n<p>I thought the same as Yael but I had a hunt and there's no really egregiously large file there</p>\n</blockquote>\n<p>My point is that not all the properties of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> are under <code>data.nat.</code>.</p>",
        "id": 275911133,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647697259
    },
    {
        "content": "<p>And how do I do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>Somehow I think that all these trivial elementary number theory lemmas should be much easier to obtain...</p>",
        "id": 275911527,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647697843
    },
    {
        "content": "<p>... than in the way I'm trying to do it.</p>",
        "id": 275912071,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647698607
    },
    {
        "content": "<p>Maybe giving <code>(p - 3)/4</code> as a witness of oddness is somewhat easy?</p>",
        "id": 275912147,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647698733
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">p</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.div_add_mod</span> <span class=\"n\">p</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm sure this can be simplified...</p>",
        "id": 275912442,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647699192
    },
    {
        "content": "<p>You are using subtraction and division of naturals so you can expect pain. Neither of these operations are mathematically well-behaved in Lean</p>",
        "id": 275915037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647703017
    },
    {
        "content": "<p>I'm going to use things as exponents, so I do want naturals... Also, prime numbers are naturals in mathlib.</p>",
        "id": 275915893,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647704399
    },
    {
        "content": "<p>Here is finally what I wanted to achieve. I had expected this to be part of the API in <code>number_theory.sum_two_squares</code>, but there is really no API there. (One has to add the necessary imports.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A lemma from elementary number theory that should be in the library -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prime_eq_three_mod_four_not_dvd_sum_of_two_squares</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- rewrite divisibility assumption as an equality in ℤ/pℤ</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">zmod.int_coe_zmod_eq_zero_iff_dvd</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">-↑</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">eq_neg_of_add_eq_zero</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- The idea is now to deduce from a² = -b² in ℤ/pℤ that 1 = -1</span>\n  <span class=\"c1\">-- using Fermat's little theorem</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:=</span> <span class=\"n\">nat.mul_div_cancel'</span> <span class=\"o\">(</span><span class=\"n\">div_sub_one_of_mod_two_eq_one</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat.odd_of_mod_four_eq_three</span> <span class=\"n\">hp</span><span class=\"o\">)),</span>\n  <span class=\"c1\">-- h₃ : 2*((p-1)/2) = p-1</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">p</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.div_add_mod</span> <span class=\"n\">p</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₄</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- we need to know that `(p-1)/2` is odd</span>\n  <span class=\"k\">have</span> <span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₄</span><span class=\"o\">],</span>\n       <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n       <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n       <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- raise our equality to the `(p-1)/2`th power</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-↑</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h₂'</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-↑</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">pow</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_mul</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">neg_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">pow_mul</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">nat.neg_one_pow_of_odd</span> <span class=\"n\">hodd</span><span class=\"o\">,</span> <span class=\"n\">neg_one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₂'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- another bit of trivial knowledge that is needed</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h₄</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- we can apply Fermat's little theorem when `a` and `b` are nonzero in ℤ/pℤ,</span>\n  <span class=\"c1\">-- so we have to distinguish cases here</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">zero_pow</span> <span class=\"n\">h₆</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- if `a = 0` mod `p`, then `b = 0` mod `p`, so `p` divides `a` and `b`,</span>\n    <span class=\"c1\">-- which contradicts the coprimality assumption</span>\n    <span class=\"k\">have</span> <span class=\"n\">hpa</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">zmod.int_coe_zmod_eq_zero_iff_dvd</span> <span class=\"n\">a</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hpb</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">zmod.int_coe_zmod_eq_zero_iff_dvd</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">pow_eq_zero</span> <span class=\"n\">h₅</span><span class=\"o\">),</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hab</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hab</span><span class=\"o\">],</span>\n         <span class=\"n\">apply</span> <span class=\"n\">dvd_add</span><span class=\"o\">,</span>\n         <span class=\"n\">apply</span> <span class=\"n\">dvd_mul_of_dvd_right</span> <span class=\"n\">hpa</span><span class=\"o\">,</span>\n         <span class=\"n\">apply</span> <span class=\"n\">dvd_mul_of_dvd_right</span> <span class=\"n\">hpb</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.prime.not_dvd_one</span> <span class=\"n\">_inst_1.1</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- now the case that `a ≠ 0` mod `p`</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zmod.pow_card_sub_one_eq_one</span> <span class=\"n\">ha</span> <span class=\"n\">at</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- we have to get rid of the possibility that `b = 0` mod `p`</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">zero_pow</span> <span class=\"n\">h₆</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h₅</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- now both are nonzero mod `p` and we get that `1 = -1` mod `p`</span>\n      <span class=\"n\">rw</span> <span class=\"n\">zmod.pow_card_sub_one_eq_one</span> <span class=\"n\">hb</span> <span class=\"n\">at</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- it is surprisingly hard to get from this to a contradiction...</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₇</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))]</span> <span class=\"n\">at</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n           <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zmod.int_coe_eq_int_coe_iff</span><span class=\"o\">,</span> <span class=\"n\">int.modeq_iff_dvd</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n           <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n           <span class=\"n\">exact</span> <span class=\"n\">h₅</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h₇</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h₄</span><span class=\"o\">],</span> <span class=\"n\">apply</span> <span class=\"n\">nat.succ_lt_succ</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat.succ_lt_succ</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₈</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_lt_succ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h₇</span><span class=\"o\">,</span>\n      <span class=\"n\">revert</span> <span class=\"n\">hp2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">not_lt_of_le</span> <span class=\"n\">h₈</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This has cost me a full day! <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span>  It shouldn't be that hard...</p>",
        "id": 275918357,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647708146
    },
    {
        "content": "<p>I know but wasn't it <em>satisfying</em>!</p>",
        "id": 275920576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647711337
    },
    {
        "content": "<p>It might have been cheaper to deduce that -1 is a square and then use the fact (in the library) that this is false if p=3 mod 4</p>",
        "id": 275920666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647711467
    },
    {
        "content": "<p>Not sure that it would be much cheaper to get to <code>-1</code> being a square mod <code>p</code>. But feel free to suggest a more efficient proof <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 275921327,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647712425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.sum_two_squares</span>\n\n<span class=\"sd\">/-- A lemma from elementary number theory that should be in the library -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prime_eq_three_mod_four_not_dvd_sum_of_two_squares</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zmod.exists_sq_eq_neg_one_iff_mod_four_ne_three</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zmod.int_coe_zmod_eq_zero_iff_dvd</span><span class=\"o\">,</span> <span class=\"n\">int.cast_add</span><span class=\"o\">,</span> <span class=\"n\">int.cast_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">hb</span><span class=\"bp\">|</span><span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">zero_pow'</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">bit0_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">nat.one_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">pow_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_pos'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zmod.int_coe_zmod_eq_zero_iff_dvd</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">int.dvd_nat_abs</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_dvd</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">int.coprime_iff_nat_coprime</span> <span class=\"n\">at</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1p</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">fact.out</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.not_coprime_of_dvd_of_dvd</span> <span class=\"n\">h1p</span> <span class=\"n\">hp</span> <span class=\"n\">hb</span> <span class=\"n\">hab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">eq_neg_iff_add_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275922156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647713553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Thanks! I did not realize that <code>nat.not_coprime_of_dvd_of_dvd</code> was there; this saves a few extra lines...</p>",
        "id": 275922495,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647714019
    },
    {
        "content": "<p>Also, it suffices to case on whether <code>(b : zmod p)</code> is <code>0</code>.</p>",
        "id": 275922589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647714178
    },
    {
        "content": "<p>Yes, I saw that in your code.</p>",
        "id": 275923152,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647714913
    },
    {
        "content": "<p>Is there an integers version of <code>nat.not_coprime_of_dvd_of_dvd</code>?</p>",
        "id": 275925679,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647718514
    },
    {
        "content": "<p>Nope, but there should be. My proof is a bit hacky at that point.</p>",
        "id": 275927450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647720843
    },
    {
        "content": "<p>Otoh, that would probably use <code>p : ℤ</code>. So we'd still need some glue at some point.</p>",
        "id": 275927459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647720871
    },
    {
        "content": "<p>Presumably a more general version for any commutative ring would make sense.</p>",
        "id": 275927466,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647720892
    },
    {
        "content": "<p>Agreed. I guess it makes sense in any UFD? Or <code>gcd_domain</code>? I don't know precisely what's needed.</p>",
        "id": 275927485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647720952
    },
    {
        "content": "<p>When dealing with primes, one has to convert between ℕ and ℤ anyway.</p>",
        "id": 275927525,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647720964
    },
    {
        "content": "<p>Commutative ring should be OK. The proof is the same: <code>a | b</code> and <code>a | c</code> implies <code>a | u*b + v*c = 1</code> if <code>b</code> and <code>c</code> are coprime, as witnessed by <code>u</code> and <code>v</code>. The condition for <code>a</code> is then that <code>a</code> is not a unit (which is clearly a bit less nice to work with than <code>a ≠ 1</code>).</p>",
        "id": 275927560,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647721076
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.abel_ruffini</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coprime_of_dvd_of_dvd</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_unit</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">is_coprime</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">is_unit_of_dvd_unit</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hab</span> <span class=\"bp\">▸</span> <span class=\"n\">hx.linear_comb</span> <span class=\"n\">hy</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">is_unit_one</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275927711,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647721302
    },
    {
        "content": "<p>I'll leave it to you to figure out the right imports :b</p>",
        "id": 275927746,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647721323
    },
    {
        "content": "<p>It should better be called <code>not_coprime_...</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 275927766,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647721359
    }
]