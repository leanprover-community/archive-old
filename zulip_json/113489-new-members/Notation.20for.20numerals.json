[
    {
        "content": "<p>Is there a notational typeclass that enables me to use numeral notation <code>0, 1, 2, ...</code> for a custom type? I only know about <code>has_zero</code> but that only deals with the symbol <code>0</code>.</p>",
        "id": 230087578,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1615578789
    },
    {
        "content": "<p>You also need <code>has_one</code> and <code>has_add</code>, and Lean will take it from there.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">⊢ has_one X</span>\n<span class=\"cm\">scratch2.lean:3:8</span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">⊢ has_add X</span>\n<span class=\"cm\">All Messages (3)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 230087618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615578808
    },
    {
        "content": "<p>And numerals to make true sense, I really hope addition in your type is associative.</p>",
        "id": 230087865,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615578939
    },
    {
        "content": "<p>I see, thanks!</p>",
        "id": 230088084,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1615579031
    },
    {
        "content": "<p>I actually didn't intend to have an addition for this, I only want some particular terms denoted by <code>0, 1, 2, ...</code>, (I only have a meaningful successor notion, for some subset of terms), so not every term is equal to a numeral in this sense.</p>",
        "id": 230088693,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1615579284
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">37</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">100000</span><span class=\"o\">]</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#reduce</span> <span class=\"mi\">2</span> <span class=\"c1\">-- 40</span>\n<span class=\"k\">#reduce</span> <span class=\"mi\">40</span> <span class=\"c1\">-- 5773</span>\n</code></pre></div>",
        "id": 230088728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615579299
    },
    {
        "content": "<p>well each term is encoded in binary, so you need to make sure that 2 = 1 + 1 for your definition of 1 and add, etc. You might be better off defining <code>zero</code>, <code>one</code>, <code>two</code> :-) Most types (like the reals) have the property that numerals work but not every terms is equal to a numeral.</p>",
        "id": 230088947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615579375
    },
    {
        "content": "<p>If you define <code>has_div</code> too you can support decimals too</p>",
        "id": 230089247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615579481
    },
    {
        "content": "<p>Hey, lean has binary!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_div</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">0b10100</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">0xFF</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230089409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615579553
    },
    {
        "content": "<p>Just remember not to <code>#check (0 : X)</code></p>",
        "id": 230089963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615579785
    },
    {
        "content": "<p>Ok, thank you all for the insights! Now after playing a little I realized the initial question wasn't really the best suited for my case. So, I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">arrow</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`↣`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">type.arrow</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pure</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">type.zero</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">type.zero</span> <span class=\"bp\">↣</span> <span class=\"n\">pure</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Can I, for an <code>n : ℕ</code>, simply write <code>n</code> to mean <code>pure n</code> in a place where a <code>type</code> is expected? (I realize it's kind of pointless here, but still, out of curiosity)</p>",
        "id": 230091597,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1615580538
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">arrow</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`↣`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">type.arrow</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pure</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">type.zero</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">type.zero</span> <span class=\"bp\">↣</span> <span class=\"n\">pure</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pure</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pure</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">type.arrow</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 230091951,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615580712
    },
    {
        "content": "<p>Are you sure that's <code>pure 5</code>??</p>",
        "id": 230092276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615580789
    },
    {
        "content": "<p>Ah, you're right, it's not.</p>",
        "id": 230092495,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615580849
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"mi\">𝟢</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">type.zero</span>\n\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"c1\">-- (((𝟢↣𝟢)↣𝟢↣𝟢)↣(𝟢↣𝟢)↣𝟢↣𝟢)↣𝟢↣𝟢</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">_root_.pure</span> <span class=\"mi\">5</span> <span class=\"c1\">-- 𝟢↣𝟢↣𝟢↣𝟢↣𝟢↣𝟢</span>\n</code></pre></div>",
        "id": 230092539,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615580869
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">type.append</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">type.zero</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"bp\">↣</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t1</span> <span class=\"bp\">↣</span> <span class=\"n\">t2.append</span> <span class=\"n\">t</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">type.append</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"n\">_root_.pure</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 230093905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615581451
    },
    {
        "content": "<p>Oh nice, I couldn't figure it out :-)</p>",
        "id": 230096603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615582771
    }
]