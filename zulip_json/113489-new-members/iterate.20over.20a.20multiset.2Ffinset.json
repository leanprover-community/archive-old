[
    {
        "content": "<p>If I want to take a <code>multiset</code> (or a <code>finset</code> or a <code>set</code> for that matter), and I wish to match on this in a similar way to a list, i.e.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">my_multiset</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>how would I go about doing this?</p>",
        "id": 196720163,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588817282
    },
    {
        "content": "<p>in short, you can't, at least not using <code>match</code></p>",
        "id": 196720349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588817503
    },
    {
        "content": "<p>You can write custom recursion principles, but they don't interact with <code>match</code> which is reserved for pattern matching on <code>inductive</code> types</p>",
        "id": 196720407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588817562
    },
    {
        "content": "<p>what are you trying to do?</p>",
        "id": 196720420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588817594
    },
    {
        "content": "<p>What I'm trying to do is implement an algorithm that performs a specified action for each element in a multiset (really it's underlying set)</p>",
        "id": 196720526,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588817741
    },
    {
        "content": "<p>In this case, adjoining all of the roots of a polynomial to a field</p>",
        "id": 196720534,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588817756
    },
    {
        "content": "<p>Given one element, I know what to do, but I don't know how to get elements out of the <code>multiset</code> I have</p>",
        "id": 196720604,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588817804
    },
    {
        "content": "<p>You can use <code>multiset.fold</code>, but keep in mind that the operation you fold must be commutative</p>",
        "id": 196720678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588817918
    },
    {
        "content": "<p>Ok, but there is no way to convert a <code>finset</code> to a list containing the elements in that <code>finset</code>? (say I don't care about the order)</p>",
        "id": 196722033,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588819694
    },
    {
        "content": "<p>Well you might not care about the order, but somebody else might care.</p>",
        "id": 196722400,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588820199
    },
    {
        "content": "<p>you can, but not computably (at least in general)</p>",
        "id": 196722533,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588820374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/iterate.20over.20a.20multiset.2Ffinset/near/196722533\" title=\"#narrow/stream/113489-new-members/topic/iterate.20over.20a.20multiset.2Ffinset/near/196722533\">said</a>:</p>\n<blockquote>\n<p>you can, but not computably (at least in general)</p>\n</blockquote>\n<p>So, if I were to decide I'm willing to give up on computation, how would I go about it?</p>",
        "id": 196722752,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588820652
    },
    {
        "content": "<p>in your case, \"adjoin all the roots of a polynomial to a field\" does not literally mean, extract the roots of said polynomial as a multiset of some unspecified type, and then do this operation of adjoining each one of them to a field</p>",
        "id": 196722808,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588820740
    },
    {
        "content": "<p>firstly the roots do not exist</p>",
        "id": 196722810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588820744
    },
    {
        "content": "<p>Yes, my multiset is really of the irreducible factors of my polynomial</p>",
        "id": 196722890,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588820868
    },
    {
        "content": "<p>My \"operation\" is adjoining a single root of one irreducible factor, and then recomputing the irreducibles over the new field</p>",
        "id": 196723011,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588820965
    },
    {
        "content": "<p>it would be very hard to make this a computable function</p>",
        "id": 196723072,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821006
    },
    {
        "content": "<p>instead you can prove the statement that splitting field exists for any polynomial over any field</p>",
        "id": 196723087,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821018
    },
    {
        "content": "<p>which you can prove using induction on the degree</p>",
        "id": 196723091,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821023
    },
    {
        "content": "<p>(I'm a bit surprised that <code>field_theory.splitting_field</code> does not contain this statement <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> )</p>",
        "id": 196723101,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821057
    },
    {
        "content": "<p>so let's say this is an <a href=\"https://en.wikipedia.org/wiki/XY_problem\" title=\"https://en.wikipedia.org/wiki/XY_problem\">XY-problem</a> (do we need a new link like <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> but for #xy? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> )</p>",
        "id": 196723205,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821155
    },
    {
        "content": "<p>the link for XY-problem contains neither of the letters <code>x</code> nor <code>y</code> so I can't use same trick as for <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 196723292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588821265
    },
    {
        "content": "<p>what trick?</p>",
        "id": 196723335,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821288
    },
    {
        "content": "<p><a href=\"#narrow/stream/236604-Zulip-meta/topic/.23mwe.20bot/near/195720265\" title=\"#narrow/stream/236604-Zulip-meta/topic/.23mwe.20bot/near/195720265\">https://leanprover.zulipchat.com/#narrow/stream/236604-Zulip-meta/topic/.23mwe.20bot/near/195720265</a></p>",
        "id": 196723375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588821337
    },
    {
        "content": "<p>what on earth</p>",
        "id": 196723443,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821374
    },
    {
        "content": "<p>how about #xyp</p>",
        "id": 196723449,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821386
    },
    {
        "content": "<p>why can't you capture the empty string?</p>",
        "id": 196723460,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821416
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem#x\" title=\"https://en.wikipedia.org/wiki/XY_problem#x\">https://en.wikipedia.org/wiki/XY_problem#x</a></p>",
        "id": 196723470,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588821425
    },
    {
        "content": "<p>like <code>^xy()$</code></p>",
        "id": 196723473,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821431
    },
    {
        "content": "<p>@reid that was my thought as well</p>",
        "id": 196723487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588821474
    },
    {
        "content": "<p>I don't follow your solution @kenny</p>",
        "id": 196723539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588821513
    },
    {
        "content": "<p>well you said you need to have one capture group</p>",
        "id": 196723551,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821541
    },
    {
        "content": "<p>so you can just have it capture the empty string</p>",
        "id": 196723559,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821549
    },
    {
        "content": "<p>I think I tried that, 1 sec</p>",
        "id": 196723566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588821558
    },
    {
        "content": "<p>can't be empty</p>",
        "id": 196723654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588821662
    },
    {
        "content": "<p>great</p>",
        "id": 196723663,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821674
    },
    {
        "content": "<p>how about something like <code>(.{0})</code></p>",
        "id": 196723672,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821693
    },
    {
        "content": "<p>there is only a small set of allowed characters</p>",
        "id": 196723679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588821705
    },
    {
        "content": "<p>but it is a regex</p>",
        "id": 196723709,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821722
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\" title=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 196723740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588821775
    },
    {
        "content": "<p>how does that work?</p>",
        "id": 196723747,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821799
    },
    {
        "content": "<p>oh</p>",
        "id": 196723751,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588821806
    },
    {
        "content": "<p>Kenny, you are officially a regex hacker (-;</p>",
        "id": 196724031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588822244
    }
]