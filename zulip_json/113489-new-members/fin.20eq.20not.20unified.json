[
    {
        "content": "<p>Why can't <code>↑a = ↑b</code> be unified with <code>↑a = ↑b</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">example</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nodup</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">↑</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">function.injective</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">nodup</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">fin.ext</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nodup</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 300092199,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663831905
    },
    {
        "content": "<p>In vs code, you can click on the <code>↑a</code> in the tactic state</p>",
        "id": 300092470,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663832031
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/RSTf5_W5cS1VBWunvQacrT_Z/Screenshot-from-2022-09-22-09-34-04.png\">Screenshot-from-2022-09-22-09-34-04.png</a> <a href=\"/user_uploads/3121/tpMICbZadpTq0CIAjJSev94g/Screenshot-from-2022-09-22-09-33-55.png\">Screenshot-from-2022-09-22-09-33-55.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RSTf5_W5cS1VBWunvQacrT_Z/Screenshot-from-2022-09-22-09-34-04.png\" title=\"Screenshot-from-2022-09-22-09-34-04.png\"><img src=\"/user_uploads/3121/RSTf5_W5cS1VBWunvQacrT_Z/Screenshot-from-2022-09-22-09-34-04.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tpMICbZadpTq0CIAjJSev94g/Screenshot-from-2022-09-22-09-33-55.png\" title=\"Screenshot-from-2022-09-22-09-33-55.png\"><img src=\"/user_uploads/3121/tpMICbZadpTq0CIAjJSev94g/Screenshot-from-2022-09-22-09-33-55.png\"></a></div>",
        "id": 300092578,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663832063
    },
    {
        "content": "<p>Hmm. One is a <code>nat</code> and the other is a <code>fin n.succ</code>?</p>",
        "id": 300092809,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663832195
    },
    {
        "content": "<p>Indeed</p>",
        "id": 300092825,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663832204
    },
    {
        "content": "<p>Ok. Thank you.</p>",
        "id": 300092880,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663832239
    },
    {
        "content": "<p>Do you know what the double curly braces mean in <code>function.injective f = ∀ ⦃a₁ a₂ : α⦄, f a₁ = f a₂ → a₁ = a₂</code>?</p>",
        "id": 300093384,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663832506
    },
    {
        "content": "<p>Is there a way to lookup that kind of notation?</p>",
        "id": 300093497,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663832568
    },
    {
        "content": "<p>It's some sort of implicit argument - I don't recall where they're documented</p>",
        "id": 300093986,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663832798
    },
    {
        "content": "<p>Hmm. Ok.<br>\nIs using fin.ext the wrong thing here? I'm not sure I understand what is happening to make them different types.</p>",
        "id": 300094788,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663833215
    },
    {
        "content": "<p>Oh. <a href=\"https://github.com/leanprover-community/mathlib/blob/88f41bb0bd5c895bca82a7900b0b6a205fd0e937/src/data/fin/basic.lean#L117\">https://github.com/leanprover-community/mathlib/blob/88f41bb0bd5c895bca82a7900b0b6a205fd0e937/src/data/fin/basic.lean#L117</a></p>",
        "id": 300095203,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663833385
    },
    {
        "content": "<p>I would guess that <code>refine nodup.comp _</code> almost closes this goal</p>",
        "id": 300095425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663833501
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/j8j-KGGqUTWlWz78336j0IW5/Screenshot-from-2022-09-22-01-00-35.png\">Screenshot-from-2022-09-22-01-00-35.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/j8j-KGGqUTWlWz78336j0IW5/Screenshot-from-2022-09-22-01-00-35.png\" title=\"Screenshot-from-2022-09-22-01-00-35.png\"><img src=\"/user_uploads/3121/j8j-KGGqUTWlWz78336j0IW5/Screenshot-from-2022-09-22-01-00-35.png\"></a></div>",
        "id": 300095843,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663833672
    },
    {
        "content": "<p>I mean right at the start</p>",
        "id": 300095873,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663833686
    },
    {
        "content": "<p>The coercion you have here is a nasty one; it's the transitive one found by <code>fin n -&gt; nat -&gt; fin m.succ</code>, and it's only injective if <code>n &lt;= m.succ</code></p>",
        "id": 300096653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663833976
    },
    {
        "content": "<p>Running <code>dsimp</code> (on the appropriate target) will expand the transitive coercion into two coercions, which makes it easier to make progress</p>",
        "id": 300096741,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663834020
    },
    {
        "content": "<p>I'm sorry, I'm not sure if I follow.</p>",
        "id": 300097321,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663834220
    },
    {
        "content": "<p>Which message?</p>",
        "id": 300097426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663834269
    },
    {
        "content": "<p>The last one I think. Is that with the <code>refine nodup.comp</code>? I'm not sure how the <code>refine nodup.comp</code> helps.</p>",
        "id": 300097691,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663834387
    },
    {
        "content": "<p>The thing you really want to prove is <code>function.injective (λ (i : fin n), (i : fin n.succ))</code>, and the <code>refine</code> changes your goal to that</p>",
        "id": 300097783,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663834430
    },
    {
        "content": "<p>Hmm. Why is that what I really want to prove?</p>",
        "id": 300097979,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663834511
    },
    {
        "content": "<p>Because it is the middle step of the transitivity relation?</p>",
        "id": 300098126,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663834564
    },
    {
        "content": "<p>Exactly, yes</p>",
        "id": 300098187,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663834605
    },
    {
        "content": "<p>I still found it quite painful to prove from there, because it seems like there's a better-supported way to write <code>λ (i : fin n), (i : fin n.succ)</code> in mathlib (and <code>simp</code> finds it)</p>",
        "id": 300098251,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663834634
    },
    {
        "content": "<p>You mean there is a better way to state the theorem?</p>",
        "id": 300098808,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663834860
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/GIjJgcf_UNb60BjD-d1f-10a/Screenshot-from-2022-09-22-01-24-14.png\">Screenshot-from-2022-09-22-01-24-14.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/GIjJgcf_UNb60BjD-d1f-10a/Screenshot-from-2022-09-22-01-24-14.png\" title=\"Screenshot-from-2022-09-22-01-24-14.png\"><img src=\"/user_uploads/3121/GIjJgcf_UNb60BjD-d1f-10a/Screenshot-from-2022-09-22-01-24-14.png\"></a></div>",
        "id": 300099356,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663835071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/113489-new-members/topic/fin.20eq.20not.20unified/near/300093384\">said</a>:</p>\n<blockquote>\n<p>Do you know what the double curly braces mean in <code>function.injective f = ∀ ⦃a₁ a₂ : α⦄, f a₁ = f a₂ → a₁ = a₂</code>?</p>\n</blockquote>\n<p><code>{}</code>s have this issue that if, for example, you have <code>def test {a : Type*} (b : Type*) := a -&gt; b</code>, then they'll be greedy: that is <code>have := test</code> will have type <code>@test ?m_1 : Type* -&gt; Type*</code>, while maybe instead you wanted <code>@test : Type* -&gt; Type* -&gt; Type*</code>. double curly braces do this, and don't resolve the implicitness until you write any explicit arguments that come after; that is, <code>have := test2</code> would be <code>@test2</code>, but <code>have := test2 nat</code> would be <code>@test2 ?m_1 nat</code></p>",
        "id": 300099446,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663835117
    },
    {
        "content": "<p>Perhaps yes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nodup</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i.cast_succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nodup.comp</span> <span class=\"o\">(</span><span class=\"n\">fin.cast_succ_injective</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 300099653,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663835202
    },
    {
        "content": "<p>You mean the <code>i.cast_succ</code> instead of <code>↑i</code>? I thought the second was notation for the first?</p>",
        "id": 300100734,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663835620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/fin.20eq.20not.20unified/near/300099446\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/113489-new-members/topic/fin.20eq.20not.20unified/near/300093384\">said</a>:</p>\n<blockquote>\n<p>Do you know what the double curly braces mean in <code>function.injective f = ∀ ⦃a₁ a₂ : α⦄, f a₁ = f a₂ → a₁ = a₂</code>?</p>\n</blockquote>\n<p><code>{}</code>s have this issue that if, for example, you have <code>def test {a : Type*} (b : Type*) := a -&gt; b</code>, then they'll be greedy: that is <code>have := test</code> will have type <code>@test ?m_1 : Type* -&gt; Type*</code>, while maybe instead you wanted <code>@test : Type* -&gt; Type* -&gt; Type*</code>. double curly braces do this, and don't resolve the implicitness until you write any explicit arguments that come after; that is, <code>have := test2</code> would be <code>@test2</code>, but <code>have := test2 nat</code> would be <code>@test2 ?m_1 nat</code></p>\n</blockquote>\n<p>Thank you. I might need to call it a night and revisit this.</p>",
        "id": 300101518,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663835889
    },
    {
        "content": "<blockquote>\n<p>I thought the second was notation for the first?</p>\n</blockquote>\n<p>Hah, you wish!</p>",
        "id": 300103800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663836758
    },
    {
        "content": "<p>Here, <code>↑i</code> is notation for <code>↑↑i</code> which is notation for <code>↑i.val</code> which is notation for <code>has_nat_cast.nat_cast i.val</code> which is _probably_ notation for <code>fin.mk (i.val % n) _</code></p>",
        "id": 300104164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663836904
    },
    {
        "content": "<p>I see.<br>\nIs there a way in Lean to unfold notation like this?</p>",
        "id": 300284315,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663904685
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold_coes\">tactic#unfold_coes</a> is one way to unfold coercions</p>",
        "id": 300285512,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663906079
    },
    {
        "content": "<p>Thank you. Is there any generic way to see how a notation is defined?</p>",
        "id": 300286143,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1663906750
    },
    {
        "content": "<p>Hover over it the goal view?</p>",
        "id": 300298777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663916600
    }
]