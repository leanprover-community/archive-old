[
    {
        "content": "<p>Hey, I just want to share a cool achievement. I just formalized a proof that the limit of the product of two sequences is the product of the limits! You can view the proof <a href=\"https://github.com/pedrominicz/learn/blob/9a78105ae90d5e86796965acdf1d5b2843fa1985/src/real_analysis/01_convergent_sequences.lean#L177\">on Github</a>.</p>",
        "id": 198828763,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590531629
    },
    {
        "content": "<p>Nice! This is much trickier than the sum statement</p>",
        "id": 198828805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590531663
    },
    {
        "content": "<p>Not sure whether or not this kind of topic fits this stream (or any stream, for that matter). Please tell me if that is the case.</p>",
        "id": 198828822,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590531669
    },
    {
        "content": "<p>Also, any and all suggestions about my code are welcome!</p>",
        "id": 198828869,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590531709
    },
    {
        "content": "<p>you have a non-terminal simp</p>",
        "id": 198828877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590531715
    },
    {
        "content": "<p>You mean the <code>@[simp]</code> annotation? Or a use of the tactic?</p>",
        "id": 198828981,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590531777
    },
    {
        "content": "<p>You're probably supposed to run the <code>simp</code>, look at the new goal, replace <code>simp</code> with <code>suffices : &lt;new goal&gt;</code>, and then prove it with <code>simpa using this</code></p>",
        "id": 198829018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590531803
    },
    {
        "content": "<p>I mean line 186</p>",
        "id": 198829029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590531813
    },
    {
        "content": "<p>Maybe just write <code>simp [limit_neg_iff, limit_mul_const const_limit],</code> and close the goal in one line</p>",
        "id": 198829137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590531898
    },
    {
        "content": "<p>Maybe <code>limit_neg_iff</code> could even be tagged with <code>@[simp]</code> and then you wouldn't have to explicitly include it</p>",
        "id": 198829179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590531939
    },
    {
        "content": "<p>Yes, <code>simp [limit_neg_iff, limit_mul_const const_limit]</code> does close the goal in one line, thank you!</p>",
        "id": 198829242,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590531963
    },
    {
        "content": "<p>I don't get how to use the <code>suffices</code> idiom in this case, though.</p>",
        "id": 198829279,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590532002
    },
    {
        "content": "<p>If you really wanted to run <code>simp</code> to change <code>⊢ limit (-c₁ * c₂) (-l₁ * l₂)</code> into <code>⊢ limit (-(c₁ * c₂)) (-(l₁ * l₂))</code> in the middle of a proof, the mathlib-approved way is</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"bp\">*</span> <span class=\"n\">c₂</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">*</span> <span class=\"n\">l₂</span><span class=\"o\">)),</span>\n      <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">limit_neg_iff</span> <span class=\"o\">(</span><span class=\"n\">etc</span> <span class=\"n\">etc</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198829424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590532107
    },
    {
        "content": "<p>The idea is that when in 1 year's time someone decides to tag <code>limit_neg_iff</code> as a simp lemma, then your proof won't break</p>",
        "id": 198829479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590532167
    },
    {
        "content": "<p>Oh, I see! Thank you!</p>",
        "id": 198829594,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590532227
    },
    {
        "content": "<p>similarly for line 171 you could write <code>    simpa [abs_sub] using hN,</code></p>",
        "id": 198829804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590532386
    },
    {
        "content": "<p>Non-terminal <code>simp</code>s are kind everywhere in my code. I'll keep that in mind going forward.</p>",
        "id": 198829837,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590532431
    },
    {
        "content": "<p>It's the way I started too, but be warned, they won't like it when you start PR'ing :-)</p>",
        "id": 198829893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590532460
    },
    {
        "content": "<p>You are allowed <code>simp, ring</code> but not too much else</p>",
        "id": 198829914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590532478
    },
    {
        "content": "<p>I see, good thing I'm allowed to do that. Typing <code>simp at w, ring at w</code> at the end of the proof while watching the goal state was the best experience I had with Lean thus far! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 198829978,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590532537
    },
    {
        "content": "<p>From what I have observed, the <code>assumption</code> tactic isn't used often, why is that?</p>",
        "id": 198830120,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590532672
    },
    {
        "content": "<p>It's usually longer than just <code>exact h</code></p>",
        "id": 198830388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590532882
    },
    {
        "content": "<p>because whenever you're using <code>assumption</code>, you probably actually know the name of the thing that assumption finds? so writing <code>exact h</code> gives a more readable proof<br>\n<code>assumption</code> also probably takes a tiny bit longer to run</p>",
        "id": 198830396,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590532888
    },
    {
        "content": "<p>and <code>exact h</code> is probably quicker too! We need a good abbreviation for <code>assumption</code>.</p>",
        "id": 198830462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590532930
    },
    {
        "content": "<p>it's also potentially much slower, this can happen sometimes when there is another assumption that looks really similar to <code>h</code> and comes first, and lean starts unfolding everything to find out if it is really the same</p>",
        "id": 198830466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590532932
    },
    {
        "content": "<p>There is a nice term mode abbreviation for assumption, <code>‹_›</code></p>",
        "id": 198830504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590532957
    },
    {
        "content": "<p>so you could write <code>exact ‹_›</code> instead of <code>assumption</code></p>",
        "id": 198830542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590533000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Achievement.3A.20multiply.20convergent.20sequences/near/198830388\">said</a>:</p>\n<blockquote>\n<p>It's usually longer than just <code>exact h</code></p>\n</blockquote>\n<p>Indeed.</p>",
        "id": 198830561,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590533016
    },
    {
        "content": "<p>An <code>assumption?</code> would also be cool (producing a <code>Try this: exact h</code>)</p>",
        "id": 198830593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590533041
    },
    {
        "content": "<p>same for <code>contradiction?</code></p>",
        "id": 198830659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590533067
    },
    {
        "content": "<p>which could produce <code>Try this: cases h</code> or <code>Try this: cases h1 h2</code></p>",
        "id": 198830709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590533107
    },
    {
        "content": "<p>It takes even longer to type <code>assumption?</code>!</p>",
        "id": 198831368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590533570
    },
    {
        "content": "<p>Making those tactics could be a good exercise for a tutorial on writing tactics</p>",
        "id": 198831478,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590533646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/Achievement.3A.20multiply.20convergent.20sequences/near/198829837\">said</a>:</p>\n<blockquote>\n<p>Non-terminal <code>simp</code>s are kind everywhere in my code. I'll keep that in mind going forward.</p>\n</blockquote>\n<p>The other alternative to using suffices is to change <code>simp</code> to <code>squeeze_simp</code> and lean will tell you exactly what simp lemmas are used so you can change the line to <code>simp only [lemma1,lemma2]</code>. This is also more resistant to breakage than a bare simp, but can be less readable than a good <code>suffices</code></p>",
        "id": 198832528,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590534263
    },
    {
        "content": "<p>Or if you want your code to broke once a new lemma is added to the <code>simp</code> set (so that you'll have to fix your proof but probably make it simpler/shorter), you can use <code>guard_target</code> <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#guard_target\">https://leanprover-community.github.io/mathlib_docs/tactics.html#guard_target</a> right after <code>simp</code>.</p>",
        "id": 198832986,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590534604
    }
]