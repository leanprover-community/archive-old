[
    {
        "content": "<p>Hi, I've been toying with an implementation in Lean 4 (commit ded7216a12cb) of primitive recursive functions, following this <a href=\"https://gist.github.com/andrejbauer/63a03c1c00a4c7e0b2580552b2e00953\">Agda version</a>. When implementing the evaluator (whose termination Agda seems to be able to prove), Lean says <code>structural recursion does not handle mutually recursive functions</code>, and that I should use <code>termination_by</code> to show  it terminates.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">PRF</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span>    <span class=\"o\">:</span> <span class=\"n\">PRF</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span>    <span class=\"o\">:</span> <span class=\"n\">PRF</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">proj</span>    <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">PRF</span> <span class=\"n\">n</span> <span class=\"c1\">-- projection</span>\n  <span class=\"bp\">|</span> <span class=\"n\">comp</span>    <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">PRF</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">PRF</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">PRF</span> <span class=\"n\">k</span> <span class=\"c1\">-- composition</span>\n  <span class=\"bp\">|</span> <span class=\"n\">primrec</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">PRF</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">PRF</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">PRF</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- primitive recursion</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PRF</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PRF.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PRF.succ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arg</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PRF.proj</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arg</span> <span class=\"n\">i</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PRF.comp</span> <span class=\"n\">g</span> <span class=\"n\">hs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evaluate</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PRF.primrec</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">primrec</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">evaluate</span>\n        <span class=\"n\">g</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">i_lt_n</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">arg</span> <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ_le_succ</span> <span class=\"n\">i_lt_n</span><span class=\"o\">})</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">evaluate</span>\n        <span class=\"n\">h</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">fini</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">match</span> <span class=\"n\">fini</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">primrec</span> <span class=\"n\">n</span>\n          <span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n          <span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">isLt</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arg</span> <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.pred_le_pred</span> <span class=\"n\">isLt</span><span class=\"o\">})</span>\n    <span class=\"n\">primrec</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<ol>\n<li>Are there any plans for Lean 4 to support the automatic termination check of mutually recursive function by structural recursion?</li>\n<li>How do I prove this terminates? I have tried looking for examples using <code>termination_by</code> or <code>decreasing_by</code> on Lean std library, but nothing seems very enlightening to me…</li>\n</ol>",
        "id": 301550835,
        "sender_full_name": "bruno cuconato",
        "timestamp": 1664495606
    },
    {
        "content": "<p>The easiest way is to make the inner function not mutually recursive with the outer one, by extracting <code>evaluate g</code> and <code>evaluate h</code> out of the inner function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PRF</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PRF.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PRF.succ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arg</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PRF.proj</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arg</span> <span class=\"n\">i</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PRF.comp</span> <span class=\"n\">g</span> <span class=\"n\">hs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evaluate</span> <span class=\"n\">g</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">arg</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PRF.primrec</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">IHg</span> <span class=\"o\">:=</span> <span class=\"n\">evaluate</span> <span class=\"n\">g</span>\n    <span class=\"k\">let</span> <span class=\"n\">IHh</span> <span class=\"o\">:=</span> <span class=\"n\">evaluate</span> <span class=\"n\">h</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">primrec</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IHg</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i_lt_n</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arg</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_le_succ</span> <span class=\"n\">i_lt_n</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IHh</span> <span class=\"k\">fun</span>\n      <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">primrec</span> <span class=\"n\">n</span>\n      <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n      <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">isLt</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arg</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Nat.pred_le_pred</span> <span class=\"n\">isLt</span><span class=\"o\">⟩</span>\n    <span class=\"n\">primrec</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 301555788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664499202
    },
    {
        "content": "<p>That was simpler than I thought I'd be, thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> !</p>",
        "id": 301557395,
        "sender_full_name": "bruno cuconato",
        "timestamp": 1664500590
    }
]