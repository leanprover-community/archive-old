[
    {
        "content": "<p>What does the name <code>clef</code> mean?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">l&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hl</span> <span class=\"n\">hl&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">l&#39;</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"c1\">-- Lean does not need this line</span>\n  <span class=\"k\">have</span> <span class=\"n\">ineg</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">l</span><span class=\"bp\">-</span><span class=\"n\">l&#39;</span><span class=\"bp\">|</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">abs_pos_of_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">sub_ne_zero_of_ne</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hl</span> <span class=\"o\">(</span> <span class=\"bp\">|</span><span class=\"n\">l</span><span class=\"bp\">-</span><span class=\"n\">l&#39;</span><span class=\"bp\">|/</span><span class=\"mi\">4</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hl&#39;</span> <span class=\"o\">(</span> <span class=\"bp\">|</span><span class=\"n\">l</span><span class=\"bp\">-</span><span class=\"n\">l&#39;</span><span class=\"bp\">|/</span><span class=\"mi\">4</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N&#39;</span> <span class=\"n\">hN&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">N₀</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"n\">N</span> <span class=\"n\">N&#39;</span><span class=\"o\">,</span> <span class=\"c1\">-- this is a new tactic, whose effect should be clear</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hN</span> <span class=\"n\">N₀</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hN&#39;</span> <span class=\"n\">N₀</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">clef</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">l</span><span class=\"bp\">-</span><span class=\"n\">l&#39;</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">l</span><span class=\"bp\">-</span><span class=\"n\">l&#39;</span><span class=\"bp\">|</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span>\n    <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">l&#39;</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">-</span><span class=\"n\">u</span> <span class=\"n\">N₀</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">N₀</span> <span class=\"bp\">-</span><span class=\"n\">l&#39;</span><span class=\"o\">)</span><span class=\"bp\">|</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">N₀</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">N₀</span> <span class=\"bp\">-</span> <span class=\"n\">l&#39;</span><span class=\"bp\">|</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">abs_add</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">N₀</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">N₀</span> <span class=\"bp\">-</span> <span class=\"n\">l&#39;</span><span class=\"bp\">|</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">abs_sub</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">l</span><span class=\"bp\">-</span><span class=\"n\">l&#39;</span><span class=\"bp\">|</span>                    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c1\">-- linarith can also find simple numerical contradictions</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204599255,
        "sender_full_name": "Iocta",
        "timestamp": 1595363341
    },
    {
        "content": "<p><span aria-label=\"key\" class=\"emoji emoji-1f511\" role=\"img\" title=\"key\">:key:</span></p>",
        "id": 204599307,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595363369
    },
    {
        "content": "<p>why is  <code>|l-l'| &lt; |l-l'|</code> called that?</p>",
        "id": 204599514,
        "sender_full_name": "Iocta",
        "timestamp": 1595363471
    },
    {
        "content": "<p>Because it is the <span aria-label=\"key\" class=\"emoji emoji-1f511\" role=\"img\" title=\"key\">:key:</span> fact.</p>",
        "id": 204599642,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595363534
    },
    {
        "content": "<p>I see haha</p>",
        "id": 204599655,
        "sender_full_name": "Iocta",
        "timestamp": 1595363542
    }
]