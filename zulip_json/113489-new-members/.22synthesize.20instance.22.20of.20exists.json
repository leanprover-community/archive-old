[
    {
        "content": "<p>If I have a lemma that there exists things obeying A, and a lemma that if I have a particular one of those things then I can have B, how can I prove B from these two lemmas? <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">exists_x</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">important</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">foobar</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">foobar</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"c1\">-- How can I apply an &quot;instance&quot; of</span>\n    <span class=\"c1\">-- exists_x to important?</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198282272,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590031073
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">exists_x</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">important</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">foobar</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">foobar</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"c1\">-- How can I apply an &quot;instance&quot; of</span>\n    <span class=\"c1\">-- exists_x to important?</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">exists_x</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">important</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>It can be done without <code>rcases</code> too, but it's more annoying.</p>",
        "id": 198282742,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590031708
    },
    {
        "content": "<p>Oh, I take that back. Apparently, I just can't remember the syntax for ordinary <code>cases</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">exists_x</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">important</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">foobar</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">foobar</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"c1\">-- How can I apply an &quot;instance&quot; of</span>\n    <span class=\"c1\">-- exists_x to important?</span>\n    <span class=\"n\">cases</span> <span class=\"n\">exists_x</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">important</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198282770,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590031769
    },
    {
        "content": "<p>Also useful: <code>Exists.imp</code> and <code>exists.elim</code>.</p>",
        "id": 198282920,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590031939
    },
    {
        "content": "<p>Thanks :) I wasn't aware <code>cases</code> would do things other than splitting prepositions into true/false cases</p>",
        "id": 198283053,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590032147
    },
    {
        "content": "<p>For <code>true</code>/<code>false</code> it's <code>by_cases</code>, not <code>cases</code>.</p>",
        "id": 198283105,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590032189
    },
    {
        "content": "<p><code>cases</code> looks at constructors.</p>",
        "id": 198283111,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590032210
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#tactics-for-inductive-types\">TPiL link</a></p>",
        "id": 198283142,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590032282
    },
    {
        "content": "<p>Thank you, I wasn't aware of what cases did really. I used it in the natural  numbers game, but there it was used for induction. It now makes more sense when I see it also generalizes the result of some expression in terms of its constructors.</p>",
        "id": 198283640,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590032895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/.22synthesize.20instance.22.20of.20exists/near/198282920\">said</a>:</p>\n<blockquote>\n<p>Also useful: <code>Exists.imp</code> and <code>exists.elim</code>.</p>\n</blockquote>\n<p>Why are there both <code>Exists</code> and <code>exists</code>?</p>",
        "id": 198284181,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590033700
    },
    {
        "content": "<p>Because nobody cared to fix this.</p>",
        "id": 198285923,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590035884
    },
    {
        "content": "<p>I think that <code>exists.elim</code> should be renamed to <code>Exists.elim</code> to allow dot notation.</p>",
        "id": 198285967,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590035989
    }
]