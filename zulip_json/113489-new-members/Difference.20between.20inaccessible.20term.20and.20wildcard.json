[
    {
        "content": "<p>I was reading the Lean Reference Manual to understand a little bit more about the equation compiler and in the chapter 4.7 it states that a pattern matching definition can be one of the following:</p>\n<hr>\n<ul>\n<li>a variable, denoting an arbitrary value of the relevant type</li>\n<li>an underscore, denoting a wildcard or anonymous variable,</li>\n<li>an inaccessible term</li>\n<li>a constructor for the inductive type of the corresponding argument, applied to a sequence of patterns</li>\n</ul>\n<hr>\n<p>The first, second and the fourth definitions above I can distinguish easily, but I am having a hard time understanding the value of an <em>inaccessible term</em>. In the reference manual it states that <em>inaccessible terms</em> are the following:</p>\n<hr>\n<p>\"An expression of the form .(t) in a pattern is known as an inaccessible term. It is not viewed as part of<br>\nthe pattern; rather, it is explicit information that is used by the elaborator and equation compiler when<br>\ninterpreting the definition. Inaccessible terms do not participate in pattern matching. They are sometimes<br>\nneeded for a pattern to make sense, for example, when a constructor depends on a parameter that is not<br>\na pattern-matching variable. In other cases, they can be used to inform the equation compiler that certain<br>\narguments do not require a case split, and they can be used to make a definition more readable.\"</p>\n<hr>\n<p>To me it seems strange that I simply don't put an <code>_</code> in all entries of the variable that is not useful for the pattern match, instead of <code>_.</code>. Also it seems strange to me that it states the it does not participate in pattern matching, but follows with the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">_</span> <span class=\"n\">nil</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add'</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">nil</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cons</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add'</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The number of elements of the vector in the second example in above code is not used for a pattern match? I feel that I don't understand very well when I should use this <em>inacessible term</em> in my pattern match.</p>",
        "id": 232425000,
        "sender_full_name": "Joao Bregunci",
        "timestamp": 1617110950
    },
    {
        "content": "<p>Note that a late addition to lean 3 automatically infers when a <code>_</code> should be a <code>._</code>, and as a result inaccessible terms are essentially never needed anymore</p>",
        "id": 232448991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617119459
    },
    {
        "content": "<p>the only reason you would use it is in an example like <code>add'</code> where for documentation reasons you want to say that the first case has a <code>0</code> for n and the second has <code>n+1</code>. Lean already knows this so you can just write <code>_</code>, but if you want to write <code>0</code> then it has to be <code>.(0)</code> so that it isn't interpreted as a pattern match on <code>n</code></p>",
        "id": 232449316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617119579
    }
]