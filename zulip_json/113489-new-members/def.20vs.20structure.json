[
    {
        "content": "<p>Is there a general rule of thumb to decide whether a property should be defined with <code>def : Prop</code> or as a structure/class <code>: Prop</code>?</p>",
        "id": 203272900,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594218015
    },
    {
        "content": "<p>Do you want the type class inference system to handle it or not?</p>",
        "id": 203273155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594218141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/def.20vs.20structure/near/203273155\">said</a>:</p>\n<blockquote>\n<p>Do you want the type class inference system to handle it or not?</p>\n</blockquote>\n<p>Actually I imagined it for class but what about a <code>structure : Prop</code>? It is not handled by class inference (or is it)?</p>",
        "id": 203273292,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594218226
    },
    {
        "content": "<p>No, structures aren't handled by the type class inference system.</p>",
        "id": 203273371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594218251
    },
    {
        "content": "<p>The difference between a structure and a def is just different syntax for the default constructor, basically</p>",
        "id": 203273444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594218280
    },
    {
        "content": "<p><code>equivalence r</code> is defined to be <code>reflexive r \\and symmetric r \\and transitive r</code> so you build an instance with <code>\\&lt;refl_proof, symm_proof, trans_proof\\&gt;</code>.</p>",
        "id": 203273572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594218338
    },
    {
        "content": "<p>If they'd made it a structure then this would work, but so would <code>{reflexive := refl_proof, symmetric := symm_proof, transitive := trans_proof}</code></p>",
        "id": 203273675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594218373
    },
    {
        "content": "<p>And is there a particular reason why they did not want the second syntax to be possible?</p>",
        "id": 203274296,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594218662
    },
    {
        "content": "<p>Coercions work in both cases right?</p>",
        "id": 203274339,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594218677
    },
    {
        "content": "<p>There is a function emulating the structure behavior here. I guess it's a historical accident.</p>",
        "id": 203274500,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594218736
    },
    {
        "content": "<p>Coercions don't care if the things you're going from and to are structures or just defs.</p>",
        "id": 203274555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594218774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/def.20vs.20structure/near/203274500\">said</a>:</p>\n<blockquote>\n<p>There is a function emulating the structure behavior here. I guess it's a historical accident.</p>\n</blockquote>\n<p>So if I like better the structure syntax because I like the clarity of the second constructor, I can choose to always use structure I guess</p>",
        "id": 203274776,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594218895
    },
    {
        "content": "<p>Of course you can define functions and pi types more generally with <code>def</code>; structures are limited to being inductive types with one constructor.</p>",
        "id": 203274926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594218975
    },
    {
        "content": "<p>One (minor) reason to prefer the definition using <code>and</code> is uniformity for automation. Things may know how to deal with conjunctions but not with your custom structure. Here's a contrived example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constants</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">three</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 203276546,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594219762
    },
    {
        "content": "<p>Ok cool these look to be good reasons, thanks to all!</p>",
        "id": 203279500,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594221111
    }
]