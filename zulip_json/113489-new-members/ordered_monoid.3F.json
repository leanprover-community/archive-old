[
    {
        "content": "<p>Dear All,</p>\n<p>is there a weaker instance than <code>ordered_semiring</code> that makes the lemma below true?  It only talks about multiplication and order, but I could not find a class with which it works without assuming also an addition on <code>R</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ordered_monoid.one_le_mul</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm.le.trans</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul</span> <span class=\"n\">a1</span> <span class=\"n\">b1</span> <span class=\"n\">zero_le_one</span> <span class=\"o\">(</span><span class=\"n\">zero_le_one.trans</span> <span class=\"n\">a1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 225956948,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613029518
    },
    {
        "content": "<p>I don't think we do.</p>",
        "id": 225958479,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613030770
    },
    {
        "content": "<p>(I should have said that I would like it to work when R is the real numbers)</p>",
        "id": 225958483,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613030777
    },
    {
        "content": "<p>Scott, thanks for looking into this!  I may then PR this as is, close to <code>mul_le_mul</code>, probably.</p>",
        "id": 225958829,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613031035
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6172\">#6172</a>!</p>",
        "id": 225960855,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613032612
    }
]