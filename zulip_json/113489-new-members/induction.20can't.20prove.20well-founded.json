[
    {
        "content": "<p>I was trying to prove something with induction using pattern-matching and I ran into a confusing problem. The following is the best mwe that I can come up with to demonstrate the thing I'm confused about.</p>\n<p>The following proof doesn't work.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">shrink</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"kn\">constant</span> <span class=\"n\">good</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">shrink_decreasing</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">shrink</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">zero_good</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"mi\">0</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">good_of_shrink_good</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">shrink</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">good</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">all_good</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">good</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">zero_good</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">shrink</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">shrink_decreasing</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">shrink</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">all_good</span> <span class=\"o\">(</span><span class=\"n\">shrink</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">good_of_shrink_good</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The error is <code>failed to prove recursive application is decreasing</code> which I find strange because I provided the proof that <code>shrink (n + 1) &lt; n + 1</code>. The most confusing thing to me about this is that the error message says that the following was the place where the <code>decreasing</code> tactic got stuck</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">all_good</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">good</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">shrink</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>which for some reason does not contain the have statement I provided in the proof. What's going on?</p>",
        "id": 205526123,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596139614
    },
    {
        "content": "<p>Someone more knowledgeable will have to explain what's going on, but moving the assumption outside the tactic block works for me.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">all_good</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">good</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">zero_good</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">shrink</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">shrink_decreasing</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">shrink</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">all_good</span> <span class=\"o\">(</span><span class=\"n\">shrink</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">good_of_shrink_good</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205527284,
        "sender_full_name": "Chris B",
        "timestamp": 1596140192
    },
    {
        "content": "<p>Weird, I just realized changing the first <code>have</code> to a <code>let</code> also makes it work</p>",
        "id": 205527512,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596140322
    },
    {
        "content": "<p>So when in tactic mode, the <code>decreasing</code> tactic can see local <code>let</code>s but not <code>have</code>s for some reason?</p>",
        "id": 205527557,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596140351
    },
    {
        "content": "<p>But outside of tactic mode, it can see <code>have</code>s?</p>",
        "id": 205527588,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596140371
    },
    {
        "content": "<p>The weirdest part is I think I've used this sort of pattern before with no problems. Though I can't find a good example now, so maybe I'm mistaken</p>",
        "id": 205527673,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596140406
    },
    {
        "content": "<p>I can confirm that you need to do this, I don't have a good explanation besides lean being lean</p>",
        "id": 205528595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596140973
    },
    {
        "content": "<p>you can also write something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">all_good</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">good</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">zero_good</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">shrink</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">all_good</span> <span class=\"o\">(</span><span class=\"n\">shrink</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n    <span class=\"n\">exact</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">shrink</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">shrink_decreasing</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n      <span class=\"n\">good_of_shrink_good</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205528733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596141024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/induction.20can't.20prove.20well-founded/near/205528595\">said</a>:</p>\n<blockquote>\n<p>I can confirm that you need to do this, I don't have a good explanation besides lean being lean</p>\n</blockquote>\n<p>It's a little annoying because the error message explicitly advises you to include the proof that it's decreasing as a <code>have</code> statement. If this only works in term proofs and not in tactic proofs, it's kind of misleading.</p>",
        "id": 205529420,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596141427
    },
    {
        "content": "<p>Is it worth making an issue on github about this?</p>",
        "id": 205529442,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596141442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/113489-new-members/topic/induction.20can't.20prove.20well-founded/near/205529420\">said</a>:</p>\n<blockquote>\n<p>It's a little annoying because the error message explicitly advises you to include the proof that it's decreasing as a <code>have</code> statement. If this only works in term proofs and not in tactic proofs, it's kind of misleading.</p>\n</blockquote>\n<p>I.e.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"n\">default</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic</span> <span class=\"n\">uses</span> <span class=\"n\">the</span> <span class=\"err\">&#39;</span><span class=\"n\">assumption&#39;</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">thus</span> <span class=\"n\">hints</span> <span class=\"o\">(</span><span class=\"n\">aka</span> <span class=\"n\">local</span> <span class=\"n\">proofs</span><span class=\"o\">)</span>\n   <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">provided</span> <span class=\"kn\">using</span> <span class=\"err\">&#39;</span><span class=\"k\">have</span><span class=\"err\">&#39;</span><span class=\"bp\">-</span><span class=\"n\">expressions</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 205529587,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596141518
    },
    {
        "content": "<p>This is documented to a certain extent at <a href=\"https://leanprover-community.github.io/extras/well_founded_recursion.html\">https://leanprover-community.github.io/extras/well_founded_recursion.html</a>, which as a document I found very helpful to read. The relevant quote:</p>\n<blockquote>\n<p>Note that the have must not be in tactics mode, i.e. inside any begin end. If you are in tactics mode, there is the option of putting the have statement inside the exact statement, as in the following example.</p>\n</blockquote>",
        "id": 205559672,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1596174443
    }
]