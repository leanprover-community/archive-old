[
    {
        "content": "<p>I saw there's some <a href=\"https://github.com/leanprover-community/mathlib/commit/3eea1091c50b77fa8ad720eec7387da511822cd0\">new material</a> in mathlib about measure. Can I use this to say like \"f(x)=1/(b-a) is integrable on [a,b] and integrates to 1 so it's a probability measure\"?</p>",
        "id": 206527343,
        "sender_full_name": "Iocta",
        "timestamp": 1597104056
    },
    {
        "content": "<p>Do we have a <code>measure.comap</code>?</p>",
        "id": 206527544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597104220
    },
    {
        "content": "<p>To define a measure from a function we need some kind of integral based measure</p>",
        "id": 206527618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597104272
    },
    {
        "content": "<p>that's before even getting to the question of turning that into a probability measure</p>",
        "id": 206527629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597104292
    },
    {
        "content": "<p>aha, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.with_density\">docs#measure_theory.measure.with_density</a></p>",
        "id": 206527877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597104506
    },
    {
        "content": "<p>so you just make that into a probability measure, using <code>with_density_apply</code> and prove that the integral of f over <code>[a,b]</code> is 1</p>",
        "id": 206527947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597104589
    },
    {
        "content": "<p>I don't think I understand</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">bochner_integration</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">indicator_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span> <span class=\"n\">measure_theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">topological_space</span> <span class=\"n\">interval</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">uniform</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">unit_interval</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">real</span> <span class=\"o\">:=</span> <span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">unit_interval_measurable</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">unit_interval</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_measurable_Icc</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">with_density_apply</span> <span class=\"err\">↑</span><span class=\"n\">uniform</span> <span class=\"n\">unit_interval_measurable</span>\n\n<span class=\"c1\">-- lemma with_density_apply (f : α → ennreal) {s : set α} (hs : is_measurable s) ...</span>\n\n\n<span class=\"c1\">-- maximum class-instance resolution depth has been reached (the limit can be increased by setting option &#39;class.instance_max_depth&#39;) (the class-instance resolution trace can be visualized by setting option &#39;trace.class_instances&#39;)</span>\n\n<span class=\"c1\">-- invalid Boolean option value, &#39;true&#39; or &#39;false&#39; expected</span>\n</code></pre></div>",
        "id": 206537577,
        "sender_full_name": "Iocta",
        "timestamp": 1597117487
    },
    {
        "content": "<p>Well, there are a lot of weird things in that trace. I was wondering what a <code>to_string (ℝ →. ℝ)</code> had to do with the original goal of <code>has_lift_t (ℝ → ℝ) (ℝ → ennreal)</code>, and found this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span>\n<span class=\"kn\">protected</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">widget</span><span class=\"bp\">.</span><span class=\"n\">html</span><span class=\"bp\">.</span><span class=\"n\">to_string_coe</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">β</span><span class=\"o\">],</span> <span class=\"n\">has_coe</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">widget</span><span class=\"bp\">.</span><span class=\"n\">html</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 206538298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597118715
    },
    {
        "content": "<p>Looking at an instance trace is like looking under the couch while cleaning</p>",
        "id": 206538350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597118778
    },
    {
        "content": "<p>Here's another bad instance:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span>\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">lift_fn_range</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">ua</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b₁</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">ub₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">ub₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_lift_t</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">],</span>\n  <span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>The fact that this goes from <code>lift_t</code> to <code>lift</code> means that it can be pumped by instances that expect that a <code>lift_t</code> allows the output to be more complicated than the input:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">germ</span><span class=\"bp\">.</span><span class=\"n\">has_lift_t</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">has_lift_t</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">germ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>Together this means that <code>has_lift (A -&gt; B) (A -&gt; l.germ B)</code> so a search for <code>has_lift_t (A -&gt; B) ?C</code> diverges: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">C</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"err\">?</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">germ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">C</span> <span class=\"bp\">&lt;-</span><span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"err\">?</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">germ</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">germ</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"err\">?</span><span class=\"n\">C</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 206538855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597119685
    },
    {
        "content": "<p>Anyway, the short answer to your question <span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> is that there is no coercion from <code>real</code> to <code>ennreal</code> so <code>↑uniform</code> doesn't work. Make it a function <code>real -&gt; ennreal</code> instead</p>",
        "id": 206538915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597119752
    },
    {
        "content": "<p>Oh wow, <code>lift_fn_range</code> is in core, and has been there since the dawn of time</p>",
        "id": 206539006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597119961
    },
    {
        "content": "<p>ok</p>",
        "id": 206540030,
        "sender_full_name": "Iocta",
        "timestamp": 1597121455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> <a href=\"#narrow/stream/113489-new-members/topic/integrable_on/near/206537577\">said</a>:</p>\n<blockquote>\n<p>I don't think I understand</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span>\n\n<span class=\"c1\">-- invalid Boolean option value, &#39;true&#39; or &#39;false&#39; expected</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>You're missing <code>true</code> at the end of that line.</p>",
        "id": 206558115,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597140016
    },
    {
        "content": "<p>Having various issues:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">probability_mass_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">indicator_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span> <span class=\"n\">measure_theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">topological_space</span> <span class=\"n\">interval</span>\n\n\n<span class=\"kn\">inductive</span> <span class=\"n\">letter</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">letter</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">letter</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">letter</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">letter</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">fintype</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">letter</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">-- ⊢ fintype letter</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f_letter</span> <span class=\"o\">:</span> <span class=\"n\">letter</span> <span class=\"bp\">→</span> <span class=\"n\">nnreal</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f_letter</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f_letter</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"c1\">-- equation compiler failed to generate bytecode for &#39;f_letter._main&#39;</span>\n<span class=\"c1\">-- nested exception message:</span>\n<span class=\"c1\">-- code generation failed, VM does not have code for &#39;classical.choice&#39;</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">letter_pmf</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">letter</span> <span class=\"o\">:=</span>\n<span class=\"n\">pmf</span><span class=\"bp\">.</span><span class=\"n\">of_fintype</span> <span class=\"n\">f_letter</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ finset.univ.sum f_letter = 1</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">letter</span>\n</code></pre></div>",
        "id": 206623058,
        "sender_full_name": "Iocta",
        "timestamp": 1597175704
    },
    {
        "content": "<p>The <code>f_letter</code> errors look like one or more bugs, but in any case it needs <code>noncomputable</code> (or just add <code>noncomputable theory</code> near the top somewhere)</p>",
        "id": 206623378,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597175842
    },
    {
        "content": "<p>I think the definition of <code>f_letter</code> was wrong for two different reasons, and Lean got confused as a result.</p>",
        "id": 206623555,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597175927
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">f_letter</span> <span class=\"o\">:</span> <span class=\"n\">letter</span> <span class=\"bp\">→</span> <span class=\"n\">nnreal</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 206623580,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597175938
    },
    {
        "content": "<p>That helps</p>",
        "id": 206624079,
        "sender_full_name": "Iocta",
        "timestamp": 1597176153
    },
    {
        "content": "<p>is there a trick to filling these? <code>instance fintype: fintype letter := sorry</code></p>",
        "id": 206625300,
        "sender_full_name": "Iocta",
        "timestamp": 1597176824
    },
    {
        "content": "<p>Does <code>@[derive fintype]</code> on the line before inductive letter work?</p>",
        "id": 206625597,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597176962
    },
    {
        "content": "<p><code>failed to find a derive handler for 'fintype'</code></p>",
        "id": 206625731,
        "sender_full_name": "Iocta",
        "timestamp": 1597177027
    },
    {
        "content": "<p>Oh yeah there was a thread about this. If you search for enumerated types are fintypes in zulip you should find a thread with that name with an example of this</p>",
        "id": 206626539,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597177514
    },
    {
        "content": "<p>Ah</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">fintype</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">letter</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">},</span> <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 206626876,
        "sender_full_name": "Iocta",
        "timestamp": 1597177702
    },
    {
        "content": "<p>Is it actually noncomputable?</p>",
        "id": 206627069,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597177808
    },
    {
        "content": "<p>I'm just believing what it tells me <code>definition 'fintype' is noncomputable, it depends on 'classical.prop_decidable'</code></p>",
        "id": 206627219,
        "sender_full_name": "Iocta",
        "timestamp": 1597177904
    },
    {
        "content": "<p>I see. I think you should add <code>@[derive decidable_eq]</code> before <code>inductive letter</code> (on the other hand, maybe you don't care).</p>",
        "id": 206627395,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597178005
    },
    {
        "content": "<p>Can I fill the <code>sorry</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">probability_mass_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">indicator_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span> <span class=\"n\">measure_theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">topological_space</span> <span class=\"n\">interval</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">letter</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">letter</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">letter</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">letter</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">letter</span>\n\n\n\n<span class=\"kn\">instance</span> <span class=\"n\">fintype</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">letter</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">},</span> <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">}</span>\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">letter_f</span> <span class=\"o\">:</span> <span class=\"n\">letter</span> <span class=\"bp\">→</span> <span class=\"n\">nnreal</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">add_to_one</span> <span class=\"o\">:</span> <span class=\"n\">letter_f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">letter_f</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">letter_f</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">letter_f</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">letter_pmf</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">letter</span> <span class=\"o\">:=</span>\n<span class=\"n\">pmf</span><span class=\"bp\">.</span><span class=\"n\">of_fintype</span> <span class=\"n\">letter_f</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">_</span> <span class=\"n\">add_to_one</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span>\n<span class=\"c1\">-- ⊢ (fintype.elems letter).sum letter_f = a.letter_f + b.letter_f + c.letter_f</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">letter</span>\n</code></pre></div>",
        "id": 206633378,
        "sender_full_name": "Iocta",
        "timestamp": 1597181200
    },
    {
        "content": "<p>prove an auxiliary lemma <code>(finset.univ : finset letter) = {a, b, c}</code></p>",
        "id": 206633666,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597181369
    },
    {
        "content": "<p>(this is <code>rfl</code>)</p>",
        "id": 206633700,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597181394
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">letter_univ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">letter</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">letter_pmf</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">letter</span> <span class=\"o\">:=</span>\n<span class=\"n\">pmf</span><span class=\"bp\">.</span><span class=\"n\">of_fintype</span> <span class=\"n\">letter_f</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">_</span> <span class=\"n\">add_to_one</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206633831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597181461
    },
    {
        "content": "<p>kenny beat me to the punchline</p>",
        "id": 206633864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597181487
    },
    {
        "content": "<p>How to interpret <code> (finset.univ : finset letter) </code> ?</p>",
        "id": 206634707,
        "sender_full_name": "Iocta",
        "timestamp": 1597182034
    },
    {
        "content": "<p>finset.univ implicitly takes a type <code>X</code> and an instance of <code>fintype X</code></p>",
        "id": 206634842,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597182126
    },
    {
        "content": "<p>it has type <code>finset X</code></p>",
        "id": 206634859,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597182143
    },
    {
        "content": "<p>it is formed by simply extracting the <code>finset.elems</code> in the instance of <code>fintype X</code></p>",
        "id": 206634878,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597182158
    },
    {
        "content": "<p>You can also write <code>@finset.univ letter _</code> if you prefer</p>",
        "id": 206634925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597182203
    },
    {
        "content": "<p>What is the significance of <code>noncomputable</code> here? is it related to why <code>#eval letter_f a</code> doesn't work?</p>",
        "id": 206643964,
        "sender_full_name": "Iocta",
        "timestamp": 1597188764
    },
    {
        "content": "<p>IOW, why do I need to make </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">letter_f</span> <span class=\"o\">:</span> <span class=\"n\">letter</span> <span class=\"bp\">→</span> <span class=\"n\">nnreal</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>\n\n\n<p>noncomputable?</p>",
        "id": 206644621,
        "sender_full_name": "Iocta",
        "timestamp": 1597189342
    },
    {
        "content": "<p>because real numbers are not computable</p>",
        "id": 206644688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597189436
    },
    {
        "content": "<p>if you use <code>rat</code> it should be computable</p>",
        "id": 206644734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597189451
    },
    {
        "content": "<p>I see</p>",
        "id": 206644775,
        "sender_full_name": "Iocta",
        "timestamp": 1597189495
    },
    {
        "content": "<p>anyway I don't think this is a big issue if you are just doing measure theory</p>",
        "id": 206644798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597189514
    },
    {
        "content": "<p>you can still prove e.g. <code>letter_f a = 0.5</code> by <code>rfl</code></p>",
        "id": 206644835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597189552
    },
    {
        "content": "<p>What's it talking about?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">binomial_mass</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">add_to_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∑&#39;</span><span class=\"n\">k</span> <span class=\"o\">,</span> <span class=\"n\">binomial_mass</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n<span class=\"c1\">-- failed to synthesize type class instance for</span>\n<span class=\"c1\">-- n : ℕ,</span>\n<span class=\"c1\">-- p : nnreal,</span>\n<span class=\"c1\">-- hp : p ≤ 1</span>\n<span class=\"c1\">-- ⊢ add_comm_monoid Prop</span>\n</code></pre></div>",
        "id": 206658617,
        "sender_full_name": "Iocta",
        "timestamp": 1597205937
    },
    {
        "content": "<p>oh</p>",
        "id": 206658798,
        "sender_full_name": "Iocta",
        "timestamp": 1597206161
    },
    {
        "content": "<p>parens</p>",
        "id": 206658800,
        "sender_full_name": "Iocta",
        "timestamp": 1597206165
    },
    {
        "content": "<p>I think that's stupid</p>",
        "id": 206663899,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597214103
    },
    {
        "content": "<p>we need to fix the precedence levels</p>",
        "id": 206663905,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597214111
    },
    {
        "content": "<p>I'd use <code>measure.restrict</code> instead of <code>measure.with_density</code>.</p>",
        "id": 206666131,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597216741
    },
    {
        "content": "<p>We already have <code>measure.restrict_apply</code>, and I'll add a shortcut <code>measure.restrict_apply</code> soon.</p>",
        "id": 206666153,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597216780
    }
]