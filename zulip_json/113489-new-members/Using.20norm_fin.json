[
    {
        "content": "<p>Hi, I'm playing with <a href=\"https://github.com/TwoFX/sudoku\">this sudoku implementation in Lean</a> and I occasionally run into the issue that expressions involving <code>fin</code>s won't reduce.  Cases like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.norm_fin</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">Hn</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_fin</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(<a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20data.fin%0Aimport%20tactic.norm_num%0Aimport%20tactic.norm_fin%0A%0Aconstant%20f%20%3A%20nat%20%E2%86%92%20Prop%0A%0Aexample%20%28n%20%3A%20fin%209%29%20%28Hn%20%3A%20n%20%3D%207%29%20%28H%20%3A%20f%20%28%E2%86%91%283%20*%20%28%E2%86%91n%20%2F%203%20%25%203%29%29%20%2B%202%29%29%20%3A%20f%200%20%3A%3D%0Abegin%0A%20%20rw%20Hn%20at%20H%2C%0A%20%20norm_num%20at%20H%2C%0A%20%20norm_fin%20at%20H%2C%0Aend%0A\">playground link</a>)<br>\nHere, I'd like to eventually get <code>H : f 8</code> as an assumption, but <code>norm_num</code> doesn't simplify that expression, and <code>norm_fin</code> gives me an \"invalid begin-end expression, ',' expected\" error that I don't understand.<br>\nDo I need to use <code>norm_fin</code> here, and if so, how?  (Interestingly, for goals, <code>norm_num</code> seems to be enough.)</p>",
        "id": 271007951,
        "sender_full_name": "Cactus (Anton) Golov",
        "timestamp": 1644252932
    },
    {
        "content": "<p>The issue is that <code>norm_num</code> doesn't know to apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.coe_bit0\">docs#fin.coe_bit0</a> and bit1.<br>\nYou can get it to do what you want with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_bit0</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_bit1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>instead.<br>\n<code>norm_fin</code> looks like it is useful when the whole expression lives in <code>fin n</code> rather than just some part.</p>",
        "id": 271010066,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644253820
    },
    {
        "content": "<p>Also, looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.norm_fin.normalize_fin\">docs#tactic.norm_fin.normalize_fin</a> it seems that it can only normalize expression at the goals. This should be the reason for you error \"invalid begin-end expression\" because when it reads <code>at H</code> it does not understand what is going on.</p>",
        "id": 271010212,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644253891
    },
    {
        "content": "<p>Hmm, for some reason adding <code>[fin.coe_bit0, fin.coe_bit1]</code> gives the error <code>norm_num failed to simplify</code>, even when just <code>norm_num at H</code> works.</p>",
        "id": 271010469,
        "sender_full_name": "Cactus (Anton) Golov",
        "timestamp": 1644254014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20norm_fin/near/271010212\">said</a>:</p>\n<blockquote>\n<p>Also, looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.norm_fin.normalize_fin\">docs#tactic.norm_fin.normalize_fin</a> it seems that it can only normalize expression at the goals. This should be the reason for you error \"invalid begin-end expression\" because when it reads <code>at H</code> it does not understand what is going on.</p>\n</blockquote>\n<p>Ah, thanks, I see.  That makes sense.</p>",
        "id": 271010612,
        "sender_full_name": "Cactus (Anton) Golov",
        "timestamp": 1644254085
    },
    {
        "content": "<p>Full code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.norm_fin</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">Hn</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_bit0</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_bit1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271010613,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644254087
    },
    {
        "content": "<p>Oh, maybe this is due to me not knowing how modules work; I have <code>data.fin</code> instead of <code>data.fin.basic</code>, and when I try to import <code>data.fin.basic</code> I get \"module not found in search path\".  Or is this just mathlib being out of date?</p>",
        "id": 271010927,
        "sender_full_name": "Cactus (Anton) Golov",
        "timestamp": 1644254232
    },
    {
        "content": "<p>Yeah looks like it changed in <a href=\"https://github.com/leanprover-community/mathlib/pull/9524\">#9524</a> which was a little while back</p>",
        "id": 271011861,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644254628
    },
    {
        "content": "<p>Ah, thanks, I see.  Let me try updating and seeing if that fixes it :)  Thanks for the help!</p>",
        "id": 271011942,
        "sender_full_name": "Cactus (Anton) Golov",
        "timestamp": 1644254659
    },
    {
        "content": "<p>Thanks, it seems to work (though unfortunately it looks like the sudoku widget code seems to be broken by the update...)<br>\nEdit: ah no, seems like it works, awesome!</p>",
        "id": 271017174,
        "sender_full_name": "Cactus (Anton) Golov",
        "timestamp": 1644256699
    }
]