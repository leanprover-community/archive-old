[
    {
        "content": "<p>Dear All,</p>\n<p>I do not know anything about computability, but I would have thought that the lemma below should be provable \"automatically\".  I do not mind if you change the <code>set</code> to something more \"decidable\", but I would like to get Lean to check for me that the sum of 4 numbers that are all either 0 or 1 can be divisible by 8 iff each of the numbers is 0.</p>\n<p>I would prefer a solution that \"teaches\" me how to work with decidable.  Something along the lines of \"oh, you have to write this, to get a decidable instance on all props of this form...\", ideally!</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zmod.sq_mod_eight_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">se</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span>  <span class=\"c1\">--fails, since it does not have a decidable instance:</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 238635751,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620919108
    },
    {
        "content": "<p><code>norm_fin</code> and <code>norm_num</code> should help here, or they should be taught to understand <code>zmod</code></p>",
        "id": 238638663,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620920389
    },
    {
        "content": "<p>Like you say, you just have to change set to something more decidable, in this case <code>finset</code> works. I'm not sure I can teach anything other than that finite sets are inherently more decidable than infinite!<br>\nYou can see the instance used via</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">((({</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}))</span>\n</code></pre></div>\n<p>the analogous thing for set isn't found, however I think it is checking membership that makes the difference, compare</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">))))</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>curiously the second version works for singletons though</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 238638751,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1620920423
    },
    {
        "content": "<p>Yakov, <code>by norm_num</code> says <code>failed to simplify</code>.  <code>norm_fin</code> might require an import that I do not have...</p>",
        "id": 238638904,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620920515
    },
    {
        "content": "<p>Alex, thanks!  This is already good!  I will try to produce a <code>finset</code> instead of a <code>set</code>, then (or possibly try to stick with singletons <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> ).</p>",
        "id": 238639039,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620920568
    },
    {
        "content": "<p>Here's what I mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.norm_fin</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zmod.sq_mod_eight_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">8</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">se</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">se</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">true_or</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">forall_true_left</span><span class=\"o\">,</span> <span class=\"n\">or_true</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_insert</span><span class=\"o\">,</span>\n    <span class=\"n\">finset.mem_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">;</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">;</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hc</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">;</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hd</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span> <span class=\"c1\">-- the first goal is all zeros</span>\n  <span class=\"n\">any_goals</span> <span class=\"o\">{</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span>  <span class=\"o\">}</span> <span class=\"c1\">-- norm_num can figure out</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238639327,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620920697
    },
    {
        "content": "<p>Yakov, thanks a lot!  I will take a close look at your solution, although it feels a little long, given what it is trying to prove!</p>\n<p>Alternatively, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zmod.sq_mod_eight_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">se</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>actually works, but is a little slow, I think!</p>",
        "id": 238639760,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620920888
    },
    {
        "content": "<p>Yakov, thanks a lot!  I looked at your code and I understand better what is going on.</p>\n<p>I have a follow up question: you used <code>fin 8</code> instead of <code>zmod 8</code> to be able to use <code>norm_fin</code>?  (I had never seen <code>norm_fin</code> before.)</p>",
        "id": 238640568,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620921264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> My guess is that <code>dec_trivial!</code> has to loop through <code>(zmod 8)^4</code>.</p>",
        "id": 238644814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620923141
    },
    {
        "content": "<p>If you phrase it as <code>a b c d : nat</code> and add assumptions <code>a &lt;= 1</code> etc..., then there are only <code>2 ^ 4</code> options. That should be reasonably fast.</p>",
        "id": 238644891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620923172
    },
    {
        "content": "<p>And from the <code>nat</code>-version to the <code>zmod 8</code> version shouldn't be too much work either.</p>",
        "id": 238644938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620923201
    },
    {
        "content": "<p>I see, thanks for the suggestion, Johan!  There is also a further issue is that this was (partially) minimized: I really care about <code>a, b, c, d</code> being squares modulo 8, so they can also be <code>4</code> [in which case, they all are either 0 or 4, of course].  Still, it might be more efficient to use <code>a &lt;= 4</code> (but not 2 or 3), than what I was trying.</p>\n<p>Thanks a lot!</p>",
        "id": 238645141,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620923298
    },
    {
        "content": "<p>If you use <code>\\forall a b c d \\in [0, 1, 4]</code> it will only go through 3^4 options</p>",
        "id": 238658482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620929498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> should norm_fin be extended to work on zmod automatically?</p>",
        "id": 238659143,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620929831
    },
    {
        "content": "<p>Mario, thanks for the comment!  I think that I got it to work in 12secs.  Honestly, I do not know if this is fast or slow!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 238659310,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620929903
    },
    {
        "content": "<p>That's pretty slow. You could help it along to instead phrase the proof as something about the cardinality of finset zmod bit0 k less than bit0 k, where the finset is a subset of 0, 1, k</p>",
        "id": 238659627,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620930041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/dec_trivial.20for.20zmod.208/near/238659143\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> should norm_fin be extended to work on zmod automatically?</p>\n</blockquote>\n<p>Sure, but like norm_num it's not intended for quantified statements like this example</p>",
        "id": 238660224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620930348
    },
    {
        "content": "<p>Also you can solve for d to make it only 3^3 options</p>",
        "id": 238660355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620930412
    },
    {
        "content": "<p>Ok, I can see how these suggestions will cut down the number of computations.  I am happy that such case bashes are rare in the kind of arguments that I usually think about!</p>",
        "id": 238661417,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620930891
    }
]