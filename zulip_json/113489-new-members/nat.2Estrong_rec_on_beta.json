[
    {
        "content": "<p>How do I prove this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_beta</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ih</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ih</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"n\">m</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 193703897,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586684729
    },
    {
        "content": "<p>Induction?</p>",
        "id": 193703947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586684787
    },
    {
        "content": "<p>nat.strong_rec_on is defined using this auxiliary lemma saying that if <code>(ih : ∀ n, (∀ m, m &lt; n → p m) → p n)</code> then <code>∀ n m, m &lt; n → p m</code>.</p>",
        "id": 193704457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586685646
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">strong_rec_on</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">lt_succ_self</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">not_lt_zero</span> <span class=\"bp\">_</span><span class=\"o\">)},</span>\n    <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">h₁</span><span class=\"o\">)),</span>\n        <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">},</span>\n        <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"n\">ih</span><span class=\"o\">}}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193708176,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586689253
    },
    {
        "content": "<p>this is the definition of <code>nat.strong_rec_on</code> in core</p>",
        "id": 193708178,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586689260
    },
    {
        "content": "<p>the tactics aren't the problem; the <code>subst</code> is</p>",
        "id": 193708183,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586689266
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">strong_rec_on_aux</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">not_lt_zero</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">h₁</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">subst</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"n\">ih</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">strong_rec_on_aux_succ</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span><span class=\"o\">):</span>\n<span class=\"n\">strong_rec_on_aux</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span> <span class=\"bp\">=</span>\n  <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">h₁</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">strong_rec_on_aux</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hmn</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">subst</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">strong_rec_on_aux</span> <span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_beta_aux</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">strong_rec_on_aux</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">lt_succ_self</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_beta</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"n\">m</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_beta_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">strong_rec_on_aux_succ</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span> <span class=\"n\">not_lt</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span><span class=\"o\">],</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">not_lt_zero</span> <span class=\"bp\">_</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">h₁</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">hmn</span> <span class=\"n\">hmn</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">ih</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">strong_rec_on_aux_succ</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span><span class=\"o\">,</span> <span class=\"n\">hmn</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">strong_rec_on_aux_succ</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193709204,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586691086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> your definition is finally complete :-)</p>",
        "id": 193709266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691127
    },
    {
        "content": "<p>That took far too long</p>",
        "id": 193709268,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586691133
    },
    {
        "content": "<p>Is there a reason not to use <code>well_founded.fix</code> here?</p>",
        "id": 193709275,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586691175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> hmm that's slightly different from my approach (which I haven't finished)</p>",
        "id": 193709332,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586691255
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">h₁</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_lt_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">lt_or_eq_of_le</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hmn</span><span class=\"o\">,</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">hmn</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">rec</span> <span class=\"n\">n</span> <span class=\"n\">ih</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_def</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ih</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">ih</span> <span class=\"bp\">_</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">lt_irrefl</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">lt_irrefl</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h_1</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux_eq</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux</span> <span class=\"n\">n</span> <span class=\"n\">rec</span> <span class=\"n\">m</span> <span class=\"n\">hmn</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">rec</span> <span class=\"n\">m</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hmn</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hmn</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hmn</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux_beta</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">rec</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"bp\">=</span>\n  <span class=\"n\">rec</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">rec</span> <span class=\"n\">m</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">lt_irrefl</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span><span class=\"o\">],</span>\n  <span class=\"n\">change</span> <span class=\"n\">rec</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux</span> <span class=\"n\">n</span> <span class=\"n\">rec</span> <span class=\"n\">m</span> <span class=\"n\">hmn</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">rec</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">rec</span> <span class=\"n\">m</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span><span class=\"o\">),</span>\n  <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">m</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux_eq</span> <span class=\"n\">n</span> <span class=\"n\">rec</span> <span class=\"n\">m</span> <span class=\"n\">hmn</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_beta</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rec</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"n\">n</span> <span class=\"n\">rec</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">rec</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"n\">m</span> <span class=\"n\">rec</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux_beta</span> <span class=\"n\">n</span> <span class=\"n\">rec</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_def</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">m</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_def</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193709417,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586691436
    },
    {
        "content": "<p>I first proved that the aux is independent of <code>n</code></p>",
        "id": 193709420,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586691457
    },
    {
        "content": "<p>the crucial lemma:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux_eq</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux</span> <span class=\"n\">n</span> <span class=\"n\">rec</span> <span class=\"n\">m</span> <span class=\"n\">hmn</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_aux</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">rec</span> <span class=\"n\">m</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 193709426,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586691477
    },
    {
        "content": "<p>That's so crazy that it is in some sense deep. If you were to ask a mathematician to prove it they would of course say that it was trivial by induction. Is this assertion in some sense false?</p>",
        "id": 193709484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691560
    },
    {
        "content": "<p>I'm not even sure they would mention induction, they would just say it was trivial.</p>",
        "id": 193709492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691601
    },
    {
        "content": "<p>I'm actually suspicious because this is usually trivial in lean</p>",
        "id": 193709537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586691645
    },
    {
        "content": "<p>Well go ahead and beat two of Imperial's finest ;-)</p>",
        "id": 193709549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691675
    },
    {
        "content": "<p>It's difficult because of how it's defined with the <code>suffices</code>.</p>",
        "id": 193709607,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586691723
    },
    {
        "content": "<p>what's the definition look like?</p>",
        "id": 193709612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586691750
    },
    {
        "content": "<p>Perhaps a better question is to think about Patrick's original question.</p>",
        "id": 193709613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691757
    },
    {
        "content": "<p>Kenny posted the core def at the top</p>",
        "id": 193709621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691780
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span>  <span class=\"n\">finite</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">c</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">Iio</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>This was Patrick's question which started it all off. Kenny proposed an approach via the lemma in this thread.</p>",
        "id": 193709678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691851
    },
    {
        "content": "<p>Oh I see, so the <code>aux</code> that you both defined is that bit after the <code>suffices</code></p>",
        "id": 193709679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586691858
    },
    {
        "content": "<p>yeah</p>",
        "id": 193709680,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586691864
    },
    {
        "content": "<p>I discovered this approach independently <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/38a7adcdfdb18c49c87b37831736c8f15300d821/src/game/world10/level18a.lean#L289\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/38a7adcdfdb18c49c87b37831736c8f15300d821/src/game/world10/level18a.lean#L289\">in NNG</a>.</p>",
        "id": 193709694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691919
    },
    {
        "content": "<p>but your thing is a Prop so proof is irrelevant</p>",
        "id": 193709737,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586691965
    },
    {
        "content": "<p>Right!</p>",
        "id": 193709740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691972
    },
    {
        "content": "<p>here the actual definitions matter</p>",
        "id": 193709741,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586691972
    },
    {
        "content": "<p>Yeah I'm well aware.</p>",
        "id": 193709744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691981
    },
    {
        "content": "<p>All the stuff proved by <code>nat.rec</code> is hidden from the user in NNG. I give them <code>zero_ne_succ</code> and <code>succ_inj</code> as axioms.</p>",
        "id": 193709748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586692017
    },
    {
        "content": "<p>Recursion is much harder than induction in Lean.</p>",
        "id": 193709755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586692045
    },
    {
        "content": "<p>NNG level 999: define a transfer tactic between mynat and nat, then use it to redo every level</p>",
        "id": 193709801,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586692084
    },
    {
        "content": "<p>If you can't do it in a begin/end block, I'm not interested ;-)</p>",
        "id": 193709805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586692108
    },
    {
        "content": "<p>begin transfer end</p>",
        "id": 193709809,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586692126
    },
    {
        "content": "<p>It is possible to make new definitions in the middle of a tactic, although I've never attempted to define a tactic and then use it all in one tactic block</p>",
        "id": 193709825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586692195
    },
    {
        "content": "<p>Looks like you can't:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">add_decl</span> <span class=\"o\">(</span><span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">defn</span>\n    <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">mytriv</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">trivial</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">reducibility_hints</span><span class=\"bp\">.</span><span class=\"n\">regular</span> <span class=\"mi\">1</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"n\">ff</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- mytriv  -- fails</span>\n  <span class=\"c1\">-- exact by mytriv  -- fails</span>\n  <span class=\"o\">(</span><span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">value</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">mytriv</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span><span class=\"o\">,</span> <span class=\"c1\">-- the declaration is there</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">mytriv</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">eval_expr&#39;</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">),</span> <span class=\"c1\">-- but I can&#39;t evaluate it</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193710185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586692787
    },
    {
        "content": "<p>I think when you use <code>add_decl</code> it doesn't produce VM code for the declaration, so you can't use it immediately</p>",
        "id": 193710241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586692841
    },
    {
        "content": "<p>and after the proof is done, any changes to the environment are rolled back anyway</p>",
        "id": 193710245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586692860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/nat.2Estrong_rec_on_beta/near/193709801\" title=\"#narrow/stream/113489-new-members/topic/nat.2Estrong_rec_on_beta/near/193709801\">said</a>:</p>\n<blockquote>\n<p>NNG level 999: define a transfer tactic between mynat and nat, then use it to redo every level</p>\n</blockquote>\n<p>You mean like <a href=\"https://github.com/leanprover-community/mathlib/blob/a89be63540dd3ccab1f095f9d858a3db4747a386/test/transport/basic.lean#L54\" title=\"https://github.com/leanprover-community/mathlib/blob/a89be63540dd3ccab1f095f9d858a3db4747a386/test/transport/basic.lean#L54\">this</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">semiring_mynat</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">transport</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"kn\">using</span> <span class=\"n\">mynat_equiv</span>\n</pre></div>",
        "id": 193711666,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586695508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 193711866,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586695869
    },
    {
        "content": "<p>I don't understand the context here. But is the moral that one shouldn't use nat.strong_rec_on from core? Presumably this should do the job as well:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">strong_rec&#39;</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">strong_rec&#39;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">strong_rec_on&#39;</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">strong_rec&#39;</span> <span class=\"n\">h</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">strong_rec_on_beta&#39;</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">strong_rec_on&#39;</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">strong_rec_on&#39;</span> <span class=\"n\">m</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">strong_rec_on&#39;</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"n\">strong_rec&#39;</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 193718836,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1586707555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111433\">@Alistair Tucker</span> You're version is much faster in the VM, but much slower in the kernel.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">strong_rec&#39;</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">succ_pos</span> <span class=\"bp\">_</span><span class=\"o\">)))</span>\n  <span class=\"mi\">1000</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span>\n  <span class=\"mi\">1000</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">succ_pos</span> <span class=\"bp\">_</span><span class=\"o\">)))</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">strong_rec&#39;</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">succ_pos</span> <span class=\"bp\">_</span><span class=\"o\">)))</span>\n  <span class=\"mi\">10000000</span> <span class=\"c1\">--1.6ms</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span>\n  <span class=\"mi\">10000000</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">succ_pos</span> <span class=\"bp\">_</span><span class=\"o\">)))</span> <span class=\"c1\">--timeout</span>\n</pre></div>",
        "id": 193720694,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586710636
    },
    {
        "content": "<p>I think the <code>#eval</code> times are an example of why Lean is so much better than Coq. Coq can't compile well-founded recursion nicely like Lean I heard.</p>",
        "id": 193720750,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586710707
    },
    {
        "content": "<p>Be careful. I once said that lean was better than Coq and I've never heard the end of it</p>",
        "id": 193720849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586710872
    },
    {
        "content": "<p>I don't need to wait for 2 seconds in Coq for <code>ring</code> to finish</p>",
        "id": 193721084,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586711241
    },
    {
        "content": "<p>I'm a bit lost in this thread (and haven't been here since morning). Is there a solution to my original issue somewhere?</p>",
        "id": 193721488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586711893
    },
    {
        "content": "<p>Also, about this VM vs kernel thing, which version is faster to prove stuff and never compute anything?</p>",
        "id": 193721492,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586711917
    },
    {
        "content": "<p>I posted a solution in your thread which had a sorry for <code>nat.strong_rec_on_beta</code></p>",
        "id": 193721495,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586711925
    },
    {
        "content": "<p>so Chris and I independently came up with proofs of it</p>",
        "id": 193721497,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586711936
    },
    {
        "content": "<p>so you can fill in the sorry</p>",
        "id": 193721501,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586711943
    },
    {
        "content": "<p>but it seems like redefining <code>strong_rec</code> makes it even shorter</p>",
        "id": 193721511,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586711977
    },
    {
        "content": "<p>Ok, thanks for helping me to patch the pieces. I wonder how this ended up in the new members stream...</p>",
        "id": 193721512,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586711978
    },
    {
        "content": "<p>because I asked here how to fill in the sorry</p>",
        "id": 193721516,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586711987
    }
]