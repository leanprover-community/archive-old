[
    {
        "content": "<p>Up to some moths ago, this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kd\">@[nolint has_inhabited_instance]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">right_inv</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">right_inv'</span> <span class=\"o\">:</span> <span class=\"n\">function.right_inverse</span> <span class=\"n\">to_fun</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">right_inv</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">right_inv.to_fun</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>worked, but now <code>has_coe_to_fun</code> wants term of type <code>out_param</code> something. I have never heard about <code>out_param</code> before, is this new? If not, how does it have to do with <code>has_coe_to_fun</code>? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/out_param\">docs#out_param</a> is not really terribly helpful to me...</p>",
        "id": 271147409,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644335376
    },
    {
        "content": "<p>There has been a change to <code>has_coe_to_fun</code>. It now expects the type of the function.</p>",
        "id": 271147741,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644335522
    },
    {
        "content": "<p><code>out_param</code> is a synonym for <code>id</code>, so you can mostly ignore it unless you're defining a new class.</p>",
        "id": 271147840,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644335553
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">right_inv.to_fun</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 271147854,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644335559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/out_param/near/271147854\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">right_inv.to_fun</span><span class=\"o\">⟩</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I see thanks, so now the type of the function needs to be given before <code>:=</code> instead of after. Does this mean that now one can define multiple instances of <code>has_coe_to_fun</code> for the same type?</p>",
        "id": 271148531,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644335835
    },
    {
        "content": "<p>no, this is actually what the <code>out_param</code> means; it tells Lean that given the other arguments, the rest are uniquely determined</p>",
        "id": 271148735,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644335912
    },
    {
        "content": "<p>I am not sure if I understand maybe it would help me to know why is this an improvement with respect to before</p>",
        "id": 271149220,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644336066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/out_param/near/271148735\">said</a>:</p>\n<blockquote>\n<p>no, this is actually what the <code>out_param</code> means; it tells Lean that given the other arguments, the rest are uniquely determined</p>\n</blockquote>\n<p>by the rest you mean the argument following <code>out_param</code>? Why is this different than using curly brackets?</p>",
        "id": 271149758,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644336251
    },
    {
        "content": "<p>I <em>think</em> it's a matter of performance. It tells Lean where to look for it.</p>",
        "id": 271149793,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644336269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/out_param/near/271149220\">said</a>:</p>\n<blockquote>\n<p>I am not sure if I understand maybe it would help me to know why is this an improvement with respect to before</p>\n</blockquote>\n<p>Reason 1 is for compatibility with Lean 4. Reason 2 is that this makes it possible to talk about the function's type in subclasses, for example to specify <code>M</code> and <code>N</code> are monoids in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom_class\">docs#monoid_hom_class</a></p>",
        "id": 271149914,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644336311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/out_param/near/271149914\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/out_param/near/271149220\">said</a>:</p>\n<blockquote>\n<p>I am not sure if I understand maybe it would help me to know why is this an improvement with respect to before</p>\n</blockquote>\n<p>Reason 1 is for compatibility with Lean 4. Reason 2 is that this makes it possible to talk about the function's type in subclasses, for example to specify <code>M</code> and <code>N</code> are monoids in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom_class\">docs#monoid_hom_class</a></p>\n</blockquote>\n<p>Ok thanks</p>",
        "id": 271150019,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644336357
    },
    {
        "content": "<p>Moreover now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coe_injective</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>goes wrong because</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">right_inv</span> <span class=\"n\">f</span><span class=\"o\">},</span> <span class=\"n\">right_inv</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I can fix it by writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coe_injective</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but is this normal? Will I not be able to use ⇑ anymore from now on?</p>",
        "id": 271150565,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644336586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/out_param/near/271149758\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/out_param/near/271148735\">said</a>:</p>\n<blockquote>\n<p>no, this is actually what the <code>out_param</code> means; it tells Lean that given the other arguments, the rest are uniquely determined</p>\n</blockquote>\n<p>by the rest you mean the argument following <code>out_param</code>? Why is this different than using curly brackets?</p>\n</blockquote>\n<p>It means the set of parameters that contain <code>out_param</code> are (assumed to be) uniquely determined by the ones without <code>out_param</code>. Let's take <code>has_coe_to_fun</code> as an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here, <code>F : out_param _</code> indicates that the parameter <code>F</code> is uniquely determined by the value passed for <code>a</code>. In particular, if Lean is looking for a <code>has_coe_to_fun</code> instance, once it finds one with the correct <code>a</code>, it won't look for an alternative with a different <code>F</code>.</p>\n<p>This is starting to get a bit technical, but the reason you'd want to make something an <code>out_param</code> instead of leaving it implicit is that Lean waits untill all non-<code>out_param</code>s are filled before searching for an instance.</p>",
        "id": 271151005,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644336747
    },
    {
        "content": "<p>(It's a bit more complicated for stuff like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom_class\">docs#monoid_hom_class</a> where you have instance parameters depending on <code>out_param</code>s, but that's the basic idea.)</p>",
        "id": 271151105,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644336789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/out_param/near/271150565\">said</a>:</p>\n<blockquote>\n<p>Moreover now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coe_injective</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>goes wrong because</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">right_inv</span> <span class=\"n\">f</span><span class=\"o\">},</span> <span class=\"n\">right_inv</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I can fix it by writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coe_injective</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but is this normal? Will I not be able to use ⇑ anymore from now on?</p>\n</blockquote>\n<p>That is not supposed to happen, but <code>out_param</code>s are less tested than the rest so it doesn't really surprise me that it's broken.</p>",
        "id": 271151414,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644336905
    },
    {
        "content": "<p>For what it's worth, you can now make a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fun_like\">docs#fun_like</a> instance for <code>right_inv</code>, and then you get rules like <code>coe_injective</code> and <code>congr_arg</code> for free!</p>",
        "id": 271151612,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644336986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/out_param/near/271151005\">said</a>:</p>\n<blockquote>\n<p>Here, <code>F : out_param _</code> indicates that the parameter <code>F</code> is uniquely determined by the value passed for <code>a</code>. In particular, if Lean is looking for a <code>has_coe_to_fun</code> instance, once it finds one with the correct <code>a</code>, it won't look for an alternative with a different <code>F</code>.</p>\n</blockquote>\n<p>Isn't this similar to putting curly brackets around <code>F</code> though?</p>",
        "id": 271151884,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644337095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/out_param/near/271151612\">said</a>:</p>\n<blockquote>\n<p>For what it's worth, you can now make a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fun_like\">docs#fun_like</a> instance for <code>right_inv</code>, and then you get rules like <code>coe_injective</code> and <code>congr_arg</code> for free!</p>\n</blockquote>\n<p>Wow this is cool I've been waiting for something like this for ages!</p>",
        "id": 271151949,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644337123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/out_param/near/271151884\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/out_param/near/271151005\">said</a>:</p>\n<blockquote>\n<p>Here, <code>F : out_param _</code> indicates that the parameter <code>F</code> is uniquely determined by the value passed for <code>a</code>. In particular, if Lean is looking for a <code>has_coe_to_fun</code> instance, once it finds one with the correct <code>a</code>, it won't look for an alternative with a different <code>F</code>.</p>\n</blockquote>\n<p>Isn't this similar to putting curly brackets around <code>F</code> though?</p>\n</blockquote>\n<p>Not exactly: curly brackets are used for function application, <code>out_param</code> is used for instance synthesis. (Although the unifier tries explicit parameters before implicit parameters, and the unifier is called to check instances...)</p>",
        "id": 271152488,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644337352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/out_param/near/271152488\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/out_param/near/271151884\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/out_param/near/271151005\">said</a>:</p>\n<blockquote>\n<p>Here, <code>F : out_param _</code> indicates that the parameter <code>F</code> is uniquely determined by the value passed for <code>a</code>. In particular, if Lean is looking for a <code>has_coe_to_fun</code> instance, once it finds one with the correct <code>a</code>, it won't look for an alternative with a different <code>F</code>.</p>\n</blockquote>\n<p>Isn't this similar to putting curly brackets around <code>F</code> though?</p>\n</blockquote>\n<p>Not exactly: curly brackets are used for function application, <code>out_param</code> is used for instance synthesis. (Although the unifier tries explicit parameters before implicit parameters, and the unifier is called to check instances...)</p>\n</blockquote>\n<p>I see I think I understand now</p>",
        "id": 271152954,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644337588
    }
]