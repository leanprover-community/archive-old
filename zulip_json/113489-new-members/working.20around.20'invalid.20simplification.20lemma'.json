[
    {
        "content": "<p>I am running into 'invalid simplification lemma' and when I set trace.simp_lemmas it says:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[simp_lemmas.invalid] LHS of rule derived from '[anonymous]' occurs in one of the hypotheses\n</code></pre></div>\n<p>I am just trying to subsitute a propositon into an 'if then else' statement (dite in practice).<br>\nAre there any work arounds? Maybe some way to just subsitute it the first time which should get around where the hypothesis occurs.<br>\n(I've tried playing around with various approaches to simp, but I couldn't get any to work).</p>\n<p>Unfortunately, making a minimal reproduction is non-trivial, so for now I'm just going to put my snippets of my code here and hope that the issue is obvious.</p>\n<p>I have a function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">compute_sat</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">choice_func</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f.join</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">then</span> <span class=\"n\">ff</span> <span class=\"k\">else</span>\n  <span class=\"k\">let</span> <span class=\"n\">non_empty_f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">subtype.mk</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">g.val</span> <span class=\"n\">non_empty_f</span> <span class=\"k\">in</span>\n  <span class=\"k\">have</span> <span class=\"n\">in_joined</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">f.join</span> <span class=\"bp\">∨</span> <span class=\"n\">l_not</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">f.join</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">g.property</span> <span class=\"n\">non_empty_f</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">in_joined_flip</span> <span class=\"o\">:</span> <span class=\"n\">l_not</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">f.join</span> <span class=\"bp\">∨</span> <span class=\"n\">l_not</span> <span class=\"o\">(</span><span class=\"n\">l_not</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">f.join</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">or.symm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">l_inv</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">in_joined</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">first</span> <span class=\"o\">:</span> <span class=\"n\">num_literals</span> <span class=\"o\">(</span><span class=\"n\">simplify</span> <span class=\"o\">(</span><span class=\"n\">assign_lit</span> <span class=\"n\">l</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n      <span class=\"bp\">&lt;</span> <span class=\"n\">num_literals</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">reduces</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">in_joined</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">second</span> <span class=\"o\">:</span> <span class=\"n\">num_literals</span> <span class=\"o\">(</span><span class=\"n\">simplify</span> <span class=\"o\">(</span><span class=\"n\">assign_lit</span> <span class=\"o\">(</span><span class=\"n\">l_not</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n      <span class=\"bp\">&lt;</span> <span class=\"n\">num_literals</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">reduces</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">in_joined_flip</span><span class=\"o\">,</span>\n\n  <span class=\"n\">compute_sat</span> <span class=\"o\">(</span><span class=\"n\">simplify</span> <span class=\"o\">(</span><span class=\"n\">assign_lit</span> <span class=\"n\">l</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">||</span>\n    <span class=\"n\">compute_sat</span> <span class=\"o\">(</span><span class=\"n\">simplify</span> <span class=\"o\">(</span><span class=\"n\">assign_lit</span> <span class=\"o\">(</span><span class=\"n\">l_not</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n                    <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">num_literals</span><span class=\"o\">⟩]}</span>\n</code></pre></div>\n<p>and a lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.simp_lemmas</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">compute_sat_ff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">clause</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">choice_func</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">=</span> <span class=\"n\">list.nil</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">compute_sat</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">compute_sat</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h_right</span><span class=\"o\">],</span> <span class=\"c1\">-- fails with 'invalid simplification lemma :(</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Presumably the issue is because I branch on <code> f.join = []</code> and also use that the prop is false in the else case.<br>\nIf anyone wants to look at the full code I guess I can post it: <a href=\"https://github.com/rgreenblatt/verified_sat/blob/f75356e8e6b23f298cbaf8f0366315bbc7c3ff76/src/sat.lean#L217-L223\">https://github.com/rgreenblatt/verified_sat/blob/f75356e8e6b23f298cbaf8f0366315bbc7c3ff76/src/sat.lean#L217-L223</a></p>",
        "id": 262026627,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1637297056
    },
    {
        "content": "<p>Can you give the full error message including the goal state?</p>",
        "id": 262036033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637308011
    },
    {
        "content": "<p>The lemma you want is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dif_pos\">docs#dif_pos</a>, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">compute_sat_ff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">clause</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">choice_func</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">=</span> <span class=\"n\">list.nil</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">compute_sat</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">compute_sat</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262077298,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637334149
    }
]