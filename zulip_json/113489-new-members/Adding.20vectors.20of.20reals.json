[
    {
        "content": "<p>I tried to define addition on <code>vector ℝ n</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">⟨[],</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>        <span class=\"o\">⟨[],</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>        <span class=\"o\">:=</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">hd₁</span><span class=\"o\">::</span><span class=\"n\">tl₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">hd₂</span><span class=\"o\">::</span><span class=\"n\">tl₂</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">v₁</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℝ</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">tl₁</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list.length_cons</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₁</span><span class=\"o\">)⟩</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">v₂</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℝ</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">tl₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list.length_cons</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span><span class=\"o\">)⟩</span> <span class=\"k\">in</span>\n    <span class=\"o\">(</span><span class=\"n\">hd₁</span> <span class=\"bp\">+</span> <span class=\"n\">hd₂</span><span class=\"o\">)</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Proving things about this definition isn't very nice though. I always have to obtain the underlying list and then do a case distinction on <code>n</code> and the list:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v₁</span> <span class=\"bp\">+</span> <span class=\"n\">v₂</span> <span class=\"bp\">=</span> <span class=\"n\">v₂</span> <span class=\"bp\">+</span> <span class=\"n\">v₁</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">hl₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">v₁</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">l₁</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">vector.add</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">l₁</span><span class=\"o\">,</span>\n    <span class=\"bp\">...</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a way to define <code>add</code> directly over vectors, instead of the lists somehow?</p>",
        "id": 281650614,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1652083250
    },
    {
        "content": "<p><code>vector</code> is a pretty gnarly dependent type. Why not just use the non-dependent type <code>fin n -&gt; \\R</code> instead, like in mathlib? Proving things about the latter definition is really easy. I agree that proving things about your definition isn't very nice, but I am suggesting that you don't bother trying to solve this problem.</p>",
        "id": 281651454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652083862
    },
    {
        "content": "<p>See for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector3\">docs#vector3</a></p>",
        "id": 281651610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652083973
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector.zip_with\">docs#vector.zip_with</a> exist?</p>",
        "id": 281651968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652084258
    },
    {
        "content": "<p>Your <code>add</code> is just <code>zip_with (+)</code></p>",
        "id": 281652112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652084346
    },
    {
        "content": "<p>And your <code>add_comm</code> follows from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.zip_with_comm\">docs#list.zip_with_comm</a></p>",
        "id": 281652260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652084431
    }
]