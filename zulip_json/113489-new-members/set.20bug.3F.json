[
    {
        "content": "<p>In the following mwe, <code>let</code> works but <code>set</code> gives an \"invalid definev tactic, value has type {x_1 // x_1 ∈ algebra.adjoin R {x}} but is expected to have type algebra.adjoin R {x}\" error. Is this the expected behaviour, and if so, could you explain why?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.adjoin.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">):</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">R</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">algebra.self_mem_adjoin_singleton</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">set</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">R</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">algebra.self_mem_adjoin_singleton</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- error</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284471523,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1654002139
    },
    {
        "content": "<p>Looks like a bug to me, I made a branch that might fix it, but we'll have to watch CI and make sure no other uses of set break <a href=\"https://github.com/leanprover-community/mathlib/runs/6671547585?check_suite_focus=true\">https://github.com/leanprover-community/mathlib/runs/6671547585?check_suite_focus=true</a></p>",
        "id": 284475300,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654003875
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 284475605,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1654003993
    },
    {
        "content": "<p>I feel like we've run into this bug before in another tactic, but I can't remember which one. How does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.let\">docs#tactic.interactive.let</a> avoid the problem?</p>",
        "id": 284480831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654005842
    },
    {
        "content": "<p>Ah, it was <a href=\"https://github.com/leanprover-community/lean/pull/555\">leanprover-community/lean#555</a> (and <a href=\"#narrow/stream/113488-general/topic/let.20fails.20with.20coe_sort/near/230488843\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/let.20fails.20with.20coe_sort/near/230488843</a>)</p>",
        "id": 284481044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654005923
    },
    {
        "content": "<p>Ah, so the issue is that let was fixed but set wasn't analogously, that makes more sense how they ended up being different, essentially all my fix does is make the behaviour uniform between the two</p>",
        "id": 284481368,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654006070
    },
    {
        "content": "<p>Ah this is great, this also gives me a minimal test case that I couldn't come up with <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 284481934,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654006274
    }
]