[
    {
        "content": "<p>I've got a problem that doesn't lend itself well to a mwe, but I'm hoping I can explain it well enough that it doesn't need one.</p>\n<p>I have two proofs, one of <code>¬p</code> (call it <code>h1</code>) and one of <code>p</code> (call it <code>h2</code>), and a goal of <code>false</code>. However, if i try to close the goal with <code>exact h1 h2</code>, I get an error that the type of <code>h2</code> doesn't match the expected type. It turns out that the <code>p</code> of <code>h1</code> and the <code>p</code> of <code>h2</code> have <code>decidable_pred</code> instances that don't match, even though they're describing the same proposition.</p>\n<p>Now, I can get around this by doing <code>have h3 : [the complete description of h2] = [the complete description of h1] := by congr</code> followed by <code>rw h3 at h2</code>. Then <code>exact h1 h2</code> works. However, these are complex propositions and h3 looks very ugly... it also just seems like I shouldn't have to do this.</p>\n<p>Is there an easier way to smooth out instance differences between otherwise identical propositions?</p>",
        "id": 293323154,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1660426382
    },
    {
        "content": "<p>This sounds very strange. I don't think <code>decidable_pred</code> can have anything to do with it. Are you 100% sure that you don't have two variables called <code>p</code>?</p>",
        "id": 293323189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660426436
    },
    {
        "content": "<p>I'll double check</p>",
        "id": 293323242,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1660426456
    },
    {
        "content": "<p>You could try <code>apply h1</code> (which should turn the goal to <code>p</code> and then <code>exact h2</code> and if this doesn't work then you could post the tactic state.</p>",
        "id": 293323288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660426506
    },
    {
        "content": "<p>Oh -- is <code>p</code> a variable or are you calling something <code>p</code> but it's actually some very long thing? My initial comment was assuming that you literally meant <code>p : Prop</code> and <code>h1 : \\not p</code>.</p>",
        "id": 293323342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660426561
    },
    {
        "content": "<p>By \"the complete description of h2\" do you just mean \"the type of h2\"? Sorry, if your <code>p</code> is not just an abstract variable <code>p : Prop</code> then yes you're right, this can be because of a <code>decidable_pred</code> issue. Does <code>apply h1, convert h2</code> work?</p>",
        "id": 293323462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660426674
    },
    {
        "content": "<p>yeah sorry, <code>p</code> is actually a long proposition, and by the complete description I did mean the type</p>",
        "id": 293323542,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1660426726
    },
    {
        "content": "<p>let me try convert</p>",
        "id": 293323547,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1660426731
    },
    {
        "content": "<p>got it. Then yeah, you can sometimes get things which display as equal but which are not definitionally equal because they have hidden unequal subterms.</p>",
        "id": 293323574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660426776
    },
    {
        "content": "<p><code>convert</code> is \"<code>exact</code>, but if things don't match up perfectly then try and extract the bits where they don't match up and try and show they're equal using subsingleton elimination, and if that fails then return the parts of the terms which don't match up perfectly as new goals\"</p>",
        "id": 293323642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660426847
    },
    {
        "content": "<p>gotcha... yeah that sounds like what I was looking for</p>",
        "id": 293323664,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1660426903
    },
    {
        "content": "<p>and it worked... thanks!</p>",
        "id": 293323674,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1660426919
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">decidable_pred</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 293323678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660426922
    },
    {
        "content": "<p>ah I see</p>",
        "id": 293323742,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1660426958
    },
    {
        "content": "<p>So you can have two terms of type <code>decidable_pred f</code> which are not definitionally equal, but because this type is a subsingleton they're still provably equal. <code>exact</code> doesn't know this, but <code>convert</code> does.</p>",
        "id": 293323748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660426965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> has marked this topic as resolved.</p>",
        "id": 293323755,
        "sender_full_name": "Notification Bot",
        "timestamp": 1660426971
    }
]