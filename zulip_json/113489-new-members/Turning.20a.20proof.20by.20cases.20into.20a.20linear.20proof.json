[
    {
        "content": "<p>Consider the following proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h&#39;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"k\">with</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">h_1</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">h</span> <span class=\"n\">h_1</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The proof for each case is basically the same (with the only difference being the calls to le_antisymm, which are also the same modulo the symmetry of equality). Is there any way I can make the proof completely linear?</p>",
        "id": 201997337,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1593105148
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h&#39;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h_1</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202002064,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593107509
    },
    {
        "content": "<p>Still splits into cases, but both are just dealing with linear arithmetic, as you pointed out, and the terms can be inferred from the goal for the <code>h</code> hypothesis</p>",
        "id": 202002245,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593107573
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 202002907,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1593107862
    },
    {
        "content": "<p>This wasn't <em>quite</em> what I was hoping for, but I'm still very satisfied with the solution you provided</p>",
        "id": 202003161,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1593107978
    },
    {
        "content": "<p>What were you hoping for?</p>",
        "id": 202003569,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593108165
    },
    {
        "content": "<p>I'm not sure honestly</p>",
        "id": 202004230,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1593108509
    },
    {
        "content": "<p>you might have been looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#wlog\">tactic#wlog</a></p>",
        "id": 202023056,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593118176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Turning.20a.20proof.20by.20cases.20into.20a.20linear.20proof/near/202023056\">said</a>:</p>\n<blockquote>\n<p>you might have been looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#wlog\">tactic#wlog</a></p>\n</blockquote>\n<p>Can you explain?</p>",
        "id": 202041479,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1593131289
    },
    {
        "content": "<p>it is supposed to be similar to the mathematician's \"without loss of generality\", which means \"if you give me a proof of one case, I'll show you how to turn it into a proof of the others\"</p>",
        "id": 202041542,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593131401
    },
    {
        "content": "<p>i, uh, don't really know how to use it</p>",
        "id": 202041594,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593131420
    },
    {
        "content": "<p>I'll have to remind myself of what I was originally trying to do, but I'll take a look at this in a few minutes. <code>wlog</code> sounds like it could be very useful</p>",
        "id": 202041622,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1593131464
    },
    {
        "content": "<p>It's not as powerful as mathematician's WLOG. I'm not sure it's up to this task.</p>",
        "id": 202058411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593155193
    }
]