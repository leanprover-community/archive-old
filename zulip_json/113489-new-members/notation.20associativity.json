[
    {
        "content": "<p>Is there a way to mark <code>notation</code> as right-associative?</p>\n<p>something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">right</span> <span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`+++`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">a</span> <span class=\"bp\">+++</span> <span class=\"n\">b</span> <span class=\"bp\">+++</span> <span class=\"n\">c</span> <span class=\"c1\">-- a + (b + c)</span>\n</code></pre></div>\n<p>I want to write this without parens:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`≡</span><span class=\"o\">⟨</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">⟩</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">eq.trans</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`∎`</span> <span class=\"o\">:=</span> <span class=\"n\">refl</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n<span class=\"kd\">variable</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">≡</span><span class=\"o\">⟨</span> <span class=\"n\">p</span> <span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"mi\">2</span>\n    <span class=\"bp\">≡</span><span class=\"o\">⟨</span> <span class=\"n\">q</span> <span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">∎</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 227032379,
        "sender_full_name": "kana",
        "timestamp": 1613770734
    },
    {
        "content": "<p>btw I know about calc-mode</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>It is just for fun</p>",
        "id": 227033389,
        "sender_full_name": "kana",
        "timestamp": 1613771283
    },
    {
        "content": "<p>There is infixr:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infixr</span>  <span class=\"bp\">`+++</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">a</span> <span class=\"bp\">+++</span> <span class=\"n\">b</span> <span class=\"bp\">+++</span> <span class=\"n\">c</span> <span class=\"c1\">-- a + (b + c)</span>\n</code></pre></div>",
        "id": 227033452,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1613771306
    },
    {
        "content": "<p>But <code>infixr</code> is very limited and can be used only for operators, as I know.</p>",
        "id": 227033714,
        "sender_full_name": "kana",
        "timestamp": 1613771445
    },
    {
        "content": "<p>Ah yes I didn't see that your actual example  takes 3 inputs</p>",
        "id": 227033970,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1613771593
    },
    {
        "content": "<p>Well you can set priorities on individual parts of the notation, I have no sense of what the correct ones are but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`≡</span><span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"o\">⟩</span> <span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">eq.trans</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`∎`</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"o\">:=</span> <span class=\"n\">refl</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n<span class=\"kd\">variable</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">≡</span><span class=\"o\">⟨</span> <span class=\"n\">p</span> <span class=\"o\">⟩</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">≡</span><span class=\"o\">⟨</span> <span class=\"n\">q</span> <span class=\"o\">⟩</span> <span class=\"mi\">3</span> <span class=\"bp\">∎</span>\n</code></pre></div>",
        "id": 227034636,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1613771961
    },
    {
        "content": "<p>Thanks! It really works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`≡</span><span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"o\">⟩</span> <span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">eq.trans</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`∎`</span><span class=\"o\">:</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">refl</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">agda_like</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≡</span><span class=\"o\">⟨</span> <span class=\"n\">nat.add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>          <span class=\"o\">⟩</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n              <span class=\"bp\">≡</span><span class=\"o\">⟨</span> <span class=\"n\">congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">nat.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">⟩</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n              <span class=\"bp\">≡</span><span class=\"o\">⟨</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>             <span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n              <span class=\"bp\">≡</span><span class=\"o\">⟨</span> <span class=\"n\">nat.add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>          <span class=\"o\">⟩</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n              <span class=\"bp\">∎</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tactic_mode</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span> <span class=\"n\">nat.add_assoc</span>\n        <span class=\"o\">,</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">b</span>\n        <span class=\"o\">,</span> <span class=\"n\">nat.add_comm</span>\n        <span class=\"o\">,</span> <span class=\"n\">nat.add_assoc</span> <span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">calc_mode</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat.add_assoc</span>\n  <span class=\"bp\">...</span>              <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">c</span> <span class=\"n\">b</span>\n  <span class=\"bp\">...</span>              <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat.add_comm</span>\n  <span class=\"bp\">...</span>              <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat.add_assoc</span>\n</code></pre></div>",
        "id": 227038443,
        "sender_full_name": "kana",
        "timestamp": 1613773051
    },
    {
        "content": "<p>It's equivalent, but for the <code>∎</code>, you can use <code>postfix</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">postfix</span> <span class=\"bp\">`∎`</span><span class=\"o\">:</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">eq.refl</span>\n</code></pre></div>\n<p>(I'm not sure which you'd want, but you can also make this have higher precedence than the bracket notation.)</p>",
        "id": 227038824,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613773227
    },
    {
        "content": "<p>Here's an interesting alternative to the Agda-like notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infixl</span> <span class=\"bp\">`</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">trans</span>\n<span class=\"kd\">prefix</span> <span class=\"bp\">`=`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">with_trans_comp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">nat.add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&gt;&gt;&gt;</span>\n  <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">nat.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;&gt;</span>\n  <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&gt;&gt;&gt;</span>\n  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">nat.add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&gt;&gt;&gt;</span>\n  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Having prefix <code>=</code> is certainly weird, but the main idea is to have a left-associative operator for composing transitive relations (I don't think one already exists?) and another operator to apply <code>refl</code> so these hints can be easily inserted into the chain.  It could just as easily be something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infixl</span> <span class=\"bp\">`</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">trans</span>\n<span class=\"kd\">postfix</span> <span class=\"bp\">`∎`</span><span class=\"o\">:</span><span class=\"mi\">51</span> <span class=\"o\">:=</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">with_trans_comp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">∎&gt;&gt;&gt;</span> <span class=\"n\">nat.add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&gt;&gt;&gt;</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∎&gt;&gt;&gt;</span> <span class=\"n\">congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">nat.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;&gt;</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∎&gt;&gt;&gt;</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&gt;&gt;&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">∎&gt;&gt;&gt;</span> <span class=\"n\">nat.add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&gt;&gt;&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">∎</span>\n</code></pre></div>",
        "id": 227042557,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613775334
    },
    {
        "content": "<p>What I think is interesting about it is that each individual part of the notation is useful by itself.</p>",
        "id": 227042716,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613775428
    },
    {
        "content": "<blockquote>\n<p>the main idea is to have a left-associative operator for composing transitive relations (I don't think one already exists?)</p>\n</blockquote>\n<p>Why does it have to be left associative? We do have a right associative operator for composing transitive relations: <code>(...).trans $ ...</code></p>",
        "id": 227053025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613782732
    },
    {
        "content": "<p>I thought maybe left associativity might help make nicer type errors while a proof is being written, but it's probably not actually the case.</p>\n<p>That's true that <code>trans</code> can be used like that, but I thought that there might be some generalized transitivity between different relations.  Maybe something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_rel_chain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">chain'</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyz</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_rel_chain.chain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_rel_chain</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyz</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">has_rel_chain.chain'</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">hxy</span> <span class=\"n\">hyz</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">has_rel_chain.chain</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_rel_chain.eq₁</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_rel_chain</span> <span class=\"n\">eq</span> <span class=\"n\">r</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">chain'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hxy</span> <span class=\"n\">hyz</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hyz</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_rel_chain.eq₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_rel_chain</span> <span class=\"n\">r</span> <span class=\"n\">eq</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">chain'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hxy</span> <span class=\"n\">hyz</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">hyz</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hxy</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_rel_chain.trans</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_trans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_rel_chain</span> <span class=\"n\">r</span> <span class=\"n\">r</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">chain'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hxy</span> <span class=\"n\">hyz</span><span class=\"o\">,</span> <span class=\"n\">trans</span> <span class=\"n\">hxy</span> <span class=\"n\">hyz</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">lt_of_lt_of_le.has_rel_chain</span> <span class=\"o\">:</span> <span class=\"n\">has_rel_chain</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">chain'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">lt_of_le_of_lt.has_rel_chain</span> <span class=\"o\">:</span> <span class=\"n\">has_rel_chain</span> <span class=\"o\">((</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">chain'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">postfix</span> <span class=\"bp\">`</span> <span class=\"bp\">∎`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">eq.refl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">assert_rel</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">p</span> <span class=\"bp\">`&gt;&gt;&gt;</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">r</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">has_rel_chain.chain</span> <span class=\"o\">(</span><span class=\"n\">assert_rel</span> <span class=\"n\">r</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">∎&gt;&gt;&gt;</span> <span class=\"n\">nat.add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"bp\">&gt;&gt;&gt;</span><span class=\"o\">[(</span><span class=\"bp\">=</span><span class=\"o\">)]</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∎&gt;&gt;&gt;</span> <span class=\"n\">congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">nat.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">&gt;&gt;&gt;</span><span class=\"o\">[(</span><span class=\"bp\">=</span><span class=\"o\">)]</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∎&gt;&gt;&gt;</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"bp\">&gt;&gt;&gt;</span><span class=\"o\">[(</span><span class=\"bp\">=</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">∎&gt;&gt;&gt;</span> <span class=\"n\">nat.add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"bp\">&gt;&gt;&gt;</span><span class=\"o\">[(</span><span class=\"bp\">=</span><span class=\"o\">)]</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∎</span>\n\n<span class=\"c1\">-- The previous example but without the relation hints</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">∎&gt;&gt;&gt;</span> <span class=\"n\">nat.add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&gt;&gt;&gt;</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∎&gt;&gt;&gt;</span> <span class=\"n\">congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">nat.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;&gt;</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∎&gt;&gt;&gt;</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&gt;&gt;&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">∎&gt;&gt;&gt;</span> <span class=\"n\">nat.add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&gt;&gt;&gt;</span>\n  <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∎</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">a</span> <span class=\"bp\">∎&gt;&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">nat.mul_one</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"bp\">&gt;&gt;&gt;</span><span class=\"o\">[(</span><span class=\"bp\">=</span><span class=\"o\">)]</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">∎&gt;&gt;&gt;</span> <span class=\"n\">nat.mul_le_mul_left</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n  <span class=\"bp\">&gt;&gt;&gt;</span><span class=\"o\">[(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">∎</span>\n\n<span class=\"c1\">-- The previous example but without any hints</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat.mul_one</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">nat.mul_le_mul_left</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"n\">h₁</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">h₂</span>\n</code></pre></div>\n<p>(The value/relation hints are just for fun, to see if it was possible using some composable operators.  Something like <code>&gt;&gt;&gt;</code> seems potentially nice to have though.)</p>",
        "id": 227061505,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613791583
    },
    {
        "content": "<p>Sebastian recently wrote something like this in the <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> stream for implementing <code>calc</code></p>",
        "id": 227061841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613791969
    },
    {
        "content": "<p>You can actually get by pretty well using just dot notation to resolve different transitivity lemmas (possibly using <code>lt.trans_le</code> for mixed transitivity lemmas), but probably if you need something this fancy you should just use <code>calc</code></p>",
        "id": 227061991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613792106
    },
    {
        "content": "<p>It's useful hearing about <code>lt.trans_le</code> -- I didn't realize the mixed transitivity lemmas were aliased.</p>",
        "id": 227062794,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613792889
    }
]