[
    {
        "content": "<p>I would like to have Lean print out the statements and names of all the lemmas and theorems I have proved.<br>\nHow can I do that?</p>",
        "id": 213516635,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1602820828
    },
    {
        "content": "<p>I am also curious whether this is possible</p>",
        "id": 213516920,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602821146
    },
    {
        "content": "<p>How exactly do you define \"I have proved\"?</p>",
        "id": 213516989,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602821207
    },
    {
        "content": "<p>All lemmas in the current environment? All lemmas in the current file? Something else?</p>",
        "id": 213517008,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602821248
    },
    {
        "content": "<p>or do you just want to know what they are, rather than having Lean itself do it, in which case you can do <code>grep lemma your_code.lean</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 213517026,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602821281
    },
    {
        "content": "<p>grep doesn't do it because some of the lemmas are on two or more lines.  That only gives me the first line.<br>\nI mean all the lemmas in the current environment.</p>",
        "id": 213517853,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1602822655
    },
    {
        "content": "<p>Today I proved duplicates of two lemmas I proved weeks ago,  having forgotten that I already proved them.   Yikes!</p>",
        "id": 213517864,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1602822689
    },
    {
        "content": "<p>I have about 80 lemmas.   Each one has a name in the Latex file, and a number that latex assigns it,  and a name in the Lean file of the form  \"lemma43\"   that corresponds with the number in the pdf file that Latex makes.     This is a clerical nightmare.</p>",
        "id": 213517935,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1602822805
    },
    {
        "content": "<p>Since I refer to the pdf  while formalizing the proof, that's why I made the Lean names correspond to the numbers in the pdf file.</p>",
        "id": 213517989,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1602822850
    },
    {
        "content": "<p>Note that the lemmas in the current environment include lots of lemmas from stdlib (and mathlib if you import it).</p>",
        "id": 213518111,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602823021
    },
    {
        "content": "<p>Do you want to have the list of lemmas from the current repository?</p>",
        "id": 213518120,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602823036
    },
    {
        "content": "<p>Heres a simple user command that prints name + statement of all decls in the file (not very well tested), this is in the file not the environment, you can remove the filter part if you want them all.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kd\">reserve</span> <span class=\"kd\">notation</span> <span class=\"bp\">`#</span><span class=\"n\">file_decls</span><span class=\"bp\">`</span>\n\n<span class=\"c1\">-- examples</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">file_decls</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">e.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e.in_current_file</span> <span class=\"n\">d.to_name</span><span class=\"o\">),</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">d.to_name</span><span class=\"o\">,</span> <span class=\"n\">d.type</span><span class=\"o\">⟩))</span>\n<span class=\"kd\">@[user_command]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">file_cmd</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">\"#file_decls\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lean.parser</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">trace</span> <span class=\"n\">file_decls.</span>\n\n<span class=\"bp\">#</span><span class=\"n\">file_decls</span>\n</code></pre></div>",
        "id": 213518206,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1602823197
    },
    {
        "content": "<p>you can also use awk to do something like grep but across multiple lines: <code>awk '/lemma/,/:=/' yourfile.lean</code></p>",
        "id": 213518478,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602823574
    },
    {
        "content": "<p>Kevin, that awk command prints out a zillion lines within the proofs where I have given an exact proof using := <br>\nso it doesn't serve the desired purpose.   Probably I can make it fancier and get only lines that begin with 'lemma' and subsequent lines up to := .Nice idea.</p>",
        "id": 213521592,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1602827910
    },
    {
        "content": "<p>Has anyone thought about how one might fold up the tiniest inferences, leaving only the \"important\" lines,<br>\nand then scrape them off in a form that could be pasted into LaTeX?</p>",
        "id": 213521630,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1602827988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284844\">@Michael Beeson</span> if you speak Python, you might want to look at lean-formatter</p>",
        "id": 213523200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602830248
    }
]