[
    {
        "content": "<p>hi there! i am <em>very</em> new to this, and i was having some difficulty with the installation / the overall setup of lean. right now i'm trying to use it in vscode with the extension, but I'm unsure as to exactly how lean operates - do I simply make a new file with some specified extension or is it more involved?</p>",
        "id": 196825139,
        "sender_full_name": "Brandon Wu",
        "timestamp": 1588882759
    },
    {
        "content": "<p>You make a new project, as we desperately try to flag several times in the installation instructions</p>",
        "id": 196825561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588883008
    },
    {
        "content": "<p>or you clone the tutorial project</p>",
        "id": 196825583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588883024
    },
    {
        "content": "<p>my setup currently lives on my school's unix servers, so i sometimes run into trouble installing things - most recently ive been running into an error \"/tmp/tmp.p0mYwop9QR/elan-init: /lib64/libc.so.6: version `GLIBC_2.18' not found (required by /tmp/tmp.p0mYwop9QR/elan-init)\" when trying to install elan</p>",
        "id": 196826367,
        "sender_full_name": "Brandon Wu",
        "timestamp": 1588883464
    },
    {
        "content": "<p>That's a very bad omen.</p>",
        "id": 196827219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588883950
    },
    {
        "content": "<p>What kind of Unix is that?</p>",
        "id": 196827236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588883958
    },
    {
        "content": "<p>sounds like one which is no longer as young as it once was</p>",
        "id": 196827732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588884239
    },
    {
        "content": "<p>\"school's unix servers\" is likely to be RHEL [some appallingly low number]</p>",
        "id": 196828079,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588884416
    },
    {
        "content": "<p>If it's relevant, I go to Carnegie Mellon and this is my school's Andrew server that I typically do all my work from. Is there no hope other than managing things locally, then?</p>",
        "id": 196828695,
        "sender_full_name": "Brandon Wu",
        "timestamp": 1588884807
    },
    {
        "content": "<p>Well, if you already have the required build tools (cmake for Lean, the rust toolchain for elan) then it should be pretty easy to build your own binaries.</p>",
        "id": 196829169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588885086
    },
    {
        "content": "<p>Though I've never tried building elan</p>",
        "id": 196829196,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588885106
    },
    {
        "content": "<p>Hi all, I am a number theorist and I have recently discovered some of Kevin Buzzard's talks. I have downloaded Lean, played with the natural number game and done some of Patrick Massot's exercises... I wonder where to go now to learn/play/do stuff. For instance, how could I check if basic results about group theory are there (e.g. : finite group of order p^2 is abelian, or \"quotient by the centre is cyclic==&gt; group is abelian), or how/where can I try to prove them? Many thanks!</p>",
        "id": 196902553,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588948437
    },
    {
        "content": "<p>doing exercises on <a href=\"https://www.codewars.com/kata/search/lean?q=&amp;\" title=\"https://www.codewars.com/kata/search/lean?q=&amp;\">codewars</a> is a nice way to learn things</p>",
        "id": 196902766,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588948552
    },
    {
        "content": "<p>you can answer some of your questions by navigating in mathlib to the <code>group_theory</code> folder</p>",
        "id": 196902839,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588948573
    },
    {
        "content": "<p>either by using the <a href=\"https://leanprover-community.github.io/mathlib_docs/group_theory/sylow.html\" title=\"https://leanprover-community.github.io/mathlib_docs/group_theory/sylow.html\">html docs</a> or in your own VSCode project by going to the \"target\" folder</p>",
        "id": 196902952,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588948646
    },
    {
        "content": "<p>i guess you can also read the code on <a href=\"https://github.com/leanprover-community/mathlib/tree/master/src/group_theory\" title=\"https://github.com/leanprover-community/mathlib/tree/master/src/group_theory\">github directly</a></p>",
        "id": 196903059,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588948683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Welcome! Do you have a working Lean setup on your own computer?</p>",
        "id": 196903351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588948837
    },
    {
        "content": "<p>Yes, I do. And thanks for the welcome.</p>",
        "id": 196903377,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588948853
    },
    {
        "content": "<p>Once you want to do something serious, the online web editors no longer are good enough</p>",
        "id": 196903378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588948854
    },
    {
        "content": "<p>Ok, great</p>",
        "id": 196903390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588948859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196903059\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196903059\">said</a>:</p>\n<blockquote>\n<p>i guess you can also read the code on <a href=\"https://github.com/leanprover-community/mathlib/tree/master/src/group_theory\" title=\"https://github.com/leanprover-community/mathlib/tree/master/src/group_theory\">github directly</a></p>\n</blockquote>\n<p>Thanks! I will try doing so, then. I have also tried to read a bit about \"compatibility\" with future/past version. Is it true that whatever we're doing in Lean 3 now will need to be redone from scratch in Lean 4?</p>",
        "id": 196903404,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588948870
    },
    {
        "content": "<p>In that case, I would follow the instructions for setting up a new project, add mathlib as dependency, and try to state some of your group theory lemmas</p>",
        "id": 196903427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588948891
    },
    {
        "content": "<p>I don't think we'll have to redo things from scratch. But there will be some weeks where we have to solve a lot of technical porting issues.</p>",
        "id": 196903505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588948925
    },
    {
        "content": "<p>Luckily we have some very good regex hackers in our community.</p>",
        "id": 196903525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588948942
    },
    {
        "content": "<p>Also I think the day is fast approaching that we get enough parser data from lean core to be able to do better than regex</p>",
        "id": 196903604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588948984
    },
    {
        "content": "<p>Ah ok, good news. I' ll try to set up a new project, although I have not found a documentation about \"basics\"  of group theory (e.g. what's the name for its order?) I suspect it should be at the address suggested by Jalex Stark</p>",
        "id": 196903767,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588949045
    },
    {
        "content": "<p>Thanks to both of you for your answers, I'll try my luck!</p>",
        "id": 196903807,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588949066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> We just reuse <code>card</code> for the order. Note that you need to add <code>[fintype G]</code> to assume that your group is finite. And then <code>fintype.card G</code> gives you the order of the group.</p>",
        "id": 196904151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588949245
    },
    {
        "content": "<p>If you have any arbitrary group... you need to deal with cardinals <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 196904185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588949264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Thanks! This is precisely the kind of info I'd love to see written somewhere: where should I look exactly, rather than asking everything here? I feel a huge leap between solving Patrick's exercices and opening my project from scartch</p>",
        "id": 196904373,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588949340
    },
    {
        "content": "<p>(it reminds me of the first time I tried to type a LaTeX document before discovering the Short Guide To LaTeX...)</p>",
        "id": 196904549,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588949412
    },
    {
        "content": "<p>asking here is not super expensive, and learning from answers here will give you intuitions on where to look</p>",
        "id": 196904830,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588949545
    },
    {
        "content": "<p>if you feel bad about using people's time, just commit to start <em>answering</em> questions once you know things :)</p>",
        "id": 196904923,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588949584
    },
    {
        "content": "<p>Indeed, that was my problem. I feel a bit bad in asking stupid things like: where do I start from? As far as I know I should:<br>\n1) Create a new project, and import mathlib (this is OK)<br>\n2) Import \"all\" things which I suspect I might need to speak about finite groups: here I am already puzzled<br>\n3) Learn something about types/classes/structures...: no idea at all.</p>",
        "id": 196905208,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588949716
    },
    {
        "content": "<p>For your 3), I find myself skimming chapter 10 of TPiL every couple of weeks and understanding more of it in proportion to how much engineering I've done between readings</p>",
        "id": 196905436,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588949831
    },
    {
        "content": "<p>There isn't a great solution right now for 2), but see the very recent in-progress \"mathematics in Lean\" book: <a href=\"#narrow/stream/113488-general/topic/new.20Lean.20.2F.20mathlib.20tutorial\" title=\"#narrow/stream/113488-general/topic/new.20Lean.20.2F.20mathlib.20tutorial\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/new.20Lean.20.2F.20mathlib.20tutorial</a></p>\n<p>For 3), the standard source / reference for Lean is still \"Theorem proving in Lean\": <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">https://leanprover.github.io/theorem_proving_in_lean/</a></p>",
        "id": 196905446,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588949836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Thanks!</p>",
        "id": 196905717,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588949935
    },
    {
        "content": "<p>(TPiL is short for \"Theorem Proving in Lean\" around here, so my suggestion was essentially the same as Jalex's.)</p>",
        "id": 196905967,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588950036
    },
    {
        "content": "<p>Another stupid question: is it normal that each time I create a new project, some 120 MB get downloaded? I played a bit creating projects and I realise I have used almost a GB for nothing. Not a big deal, per se, just seems a bit odd.</p>",
        "id": 196906067,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588950087
    },
    {
        "content": "<p>Yes, unfortunately. Most of that space is taken up by mathlib's <code>.olean</code> files, which are like the compiled version of the <code>.lean</code> files.</p>",
        "id": 196906501,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588950248
    },
    {
        "content": "<p>i'll add that Hitchhiker's Guide explains stuffs pretty well.</p>",
        "id": 196906716,
        "sender_full_name": "Nam",
        "timestamp": 1588950358
    },
    {
        "content": "<p>Yes, I like that book too. You can find it with the other course materials here: <a href=\"https://lean-forward.github.io/logical-verification/2020/index.html#material\" title=\"https://lean-forward.github.io/logical-verification/2020/index.html#material\">https://lean-forward.github.io/logical-verification/2020/index.html#material</a></p>",
        "id": 196906855,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588950410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> here is some basic group theory being done in Lean: <a href=\"https://github.com/ImperialCollegeLondon/group-theory-game/blob/master/src/group/level01_extended.lean\" title=\"https://github.com/ImperialCollegeLondon/group-theory-game/blob/master/src/group/level01_extended.lean\">https://github.com/ImperialCollegeLondon/group-theory-game/blob/master/src/group/level01_extended.lean</a></p>",
        "id": 196906926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588950454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284601\">@Nam</span> <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Ok, thanks. I'll have a look there.</p>",
        "id": 196906931,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588950457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nThanks. So, if I undestand the philosophy right, I should download the project group-theory-game and play there? I also suppose I should rather create an internal folder (say, with my name/initials) to avoid that if everything gets updated on GIT my work disappears?</p>",
        "id": 196907386,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588950640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196904373\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196904373\">said</a>:</p>\n<blockquote>\n<p>Thanks! This is precisely the kind of info I'd love to see written somewhere: where should I look exactly, rather than asking everything here? I feel a huge leap between solving Patrick's exercices and opening my project from scartch</p>\n</blockquote>\n<p>Maybe I should give more context in the tutorials README (I gave it here, but it's not on GitHub). Currently there is a steady stream of people who want to learn Lean for math. This is great but the self-teaching material that exists is not yet up to this task. As a kind of urgency plaster, I translated the exercises from my first year undergraduate course where I used Lean, simply adding a couple of tactics that allow more efficiency. The course was not about learning Lean, it was about learning how to write rigorous proofs. So it stops very far from the point where you can develop new maths in Lean, and it very carefully avoid painful points, like handling inclusion maps. I simply hoped it would keep people busy for some time, and teach useful stuff while we work on <a href=\"https://github.com/leanprover-community/mathematics_in_lean\" title=\"https://github.com/leanprover-community/mathematics_in_lean\">https://github.com/leanprover-community/mathematics_in_lean</a> that should ultimately contain much more.</p>",
        "id": 196917876,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588955382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196907386\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196907386\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <br>\nThanks. So, if I undestand the philosophy right, I should download the project group-theory-game and play there? I also suppose I should rather create an internal folder (say, with my name/initials) to avoid that if everything gets updated on GIT my work disappears?</p>\n</blockquote>\n<p>The file I linked to imports other files from that project, so yes you'd be better off downloading the entire project. But nowadays I usually work within a local copy of mathlib.</p>",
        "id": 196919242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588956094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196906067\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196906067\">said</a>:</p>\n<blockquote>\n<p>Another stupid question: is it normal that each time I create a new project, some 120 MB get downloaded? I played a bit creating projects and I realise I have used almost a GB for nothing. Not a big deal, per se, just seems a bit odd.</p>\n</blockquote>\n<p>This is not a stupid question at all. Each time you create a new project, you download mathlib, with its full git history. That's about 37Mo. Then, if you don't already have them, you download <em>compiled</em> mathlib files. After unpacking, this adds about 80 Mo. If you already have those compiled files they are not downloaded but they are copied to your new project folder, which now weights about 120 Mo. This makes sense when you have a couple of projects that depend on different versions of mathlib, that you want to update independently (mathlib moves really fast, and a mathlib update can break your project non-trivially). But it doesn't make sense if you simply want to play with creating Lean projects. There are ways to improve on this, but limited time resources to modify leanproject. The current workflow works nicely for serious users who have a handful of projects that need to be really independent, and for people who want to play with one toy project. So improving this is very low priority. But feel free to contribute if fixing this is important to you. This is much much easier than proving things.</p>",
        "id": 196920372,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588956652
    },
    {
        "content": "<p>I'll try and address the git cloning thing in <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/47\" title=\"https://github.com/leanprover-community/mathlib-tools/pull/47\">https://github.com/leanprover-community/mathlib-tools/pull/47</a> - it's a first draft but I am going to eat now</p>",
        "id": 196930840,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1588961507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196919242\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196919242\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196907386\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196907386\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <br>\nThanks. So, if I undestand the philosophy right, I should download the project group-theory-game and play there? I also suppose I should rather create an internal folder (say, with my name/initials) to avoid that if everything gets updated on GIT my work disappears?</p>\n</blockquote>\n<p>The file I linked to imports other files from that project, so yes you'd be better off downloading the entire project. But nowadays I usually work within a local copy of mathlib.</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 196990676,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589029273
    },
    {
        "content": "<p>people on this thread may like reading <a href=\"https://github.com/leanprover-community/mathlib/wiki/Where-to-start-learning-Lean\" title=\"https://github.com/leanprover-community/mathlib/wiki/Where-to-start-learning-Lean\">this community wiki page</a></p>",
        "id": 196990766,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589029404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196920372\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196920372\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196906067\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196906067\">said</a>:</p>\n<blockquote>\n<p>Another stupid question: is it normal that each time I create a new project, some 120 MB get downloaded? I played a bit creating projects and I realise I have used almost a GB for nothing. Not a big deal, per se, just seems a bit odd.</p>\n</blockquote>\n<p>This is not a stupid question at all. Each time you create a new project, you download mathlib, with its full git history. That's about 37Mo. Then, if you don't already have them, you download <em>compiled</em> mathlib files. After unpacking, this adds about 80 Mo. If you already have those compiled files they are not downloaded but they are copied to your new project folder, which now weights about 120 Mo. This makes sense when you have a couple of projects that depend on different versions of mathlib, that you want to update independently (mathlib moves really fast, and a mathlib update can break your project non-trivially). But it doesn't make sense if you simply want to play with creating Lean projects. There are ways to improve on this, but limited time resources to modify leanproject. The current workflow works nicely for serious users who have a handful of projects that need to be really independent, and for people who want to play with one toy project. So improving this is very low priority. But feel free to contribute if fixing this is important to you. This is much much easier than proving things.</p>\n</blockquote>\n<p>Thanks, this makes everything much clearer. I now really need to start making my hands dirty with some proof, but I'll be back to the forum as soon as I have more questions or comments. I think that this issue of dowloading 120 MB really not crucial for the time being.</p>",
        "id": 196990823,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589029462
    },
    {
        "content": "<blockquote>\n<p>I'll try and address the git cloning thing in <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/47\" title=\"https://github.com/leanprover-community/mathlib-tools/pull/47\">https://github.com/leanprover-community/mathlib-tools/pull/47</a> - it's a first draft but I am going to eat now</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> what is the current status of that effort? I'm about to release version 0.0.6</p>",
        "id": 196992658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589032332
    },
    {
        "content": "<p>Note that there is no problem releasing 0.0.7 in a couple of days if you are not ready.</p>",
        "id": 196992673,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589032372
    },
    {
        "content": "<p>Sorry, I kind of forgot about it and it has some test failures I haven't explained - let me just have a quick look again</p>",
        "id": 196993554,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589033703
    },
    {
        "content": "<p>Part of the problem is that it's been literally years since I coded in Python, so everything is hard again :P</p>",
        "id": 196993573,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589033738
    },
    {
        "content": "<p>I should have asked a more specific question. I didn't look at that PR yet because it was flagged as a draft, do you want me to look at it now?</p>",
        "id": 196993853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034057
    },
    {
        "content": "<p>Also you should probably rebase on master before doing anything else on your branch</p>",
        "id": 196993875,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034104
    },
    {
        "content": "<p>The current status is \"tests are failing when I enable the new mode and I have no idea why\". I just turned my new flag to default to \"off\" and now the only test that is failing is the one that asserts the new behaviour - so it's definitely my change that is broken - but I was hoping to finish this without having to work out how to run it locally</p>",
        "id": 196994220,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589034544
    },
    {
        "content": "<p>In hindsight, quite an optimistic hope</p>",
        "id": 196994236,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589034599
    },
    {
        "content": "<p>The error message on Travis suggests you invented some feature of git python</p>",
        "id": 196994302,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034692
    },
    {
        "content": "<p>(fear not, I'll squash away all these ridiculous commits)</p>",
        "id": 196994355,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589034739
    },
    {
        "content": "<p>And also that you didn't rebase on master</p>",
        "id": 196994374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034792
    },
    {
        "content": "<p>But this is not a problem at all</p>",
        "id": 196994376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034797
    },
    {
        "content": "<p>This can wait</p>",
        "id": 196994378,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034800
    },
    {
        "content": "<p>I'll release 0.0.6 now</p>",
        "id": 196994385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034816
    },
    {
        "content": "<p>Not rebasing isn't a problem if I'm going to squash-merge anyway, right?</p>",
        "id": 196994388,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589034820
    },
    {
        "content": "<p>Sure, go for it</p>",
        "id": 196994391,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589034823
    },
    {
        "content": "<p>Oh sorry, I didn't see your new commits.</p>",
        "id": 196994448,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034873
    },
    {
        "content": "<p>Yes, we can clean up history before merging</p>",
        "id": 196994476,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034886
    },
    {
        "content": "<p>My actual question is: why do you think you can pass the depth argument to <code>Repo.clone_from</code> like this?</p>",
        "id": 196994498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034925
    },
    {
        "content": "<p>Its docstring contains the text \"        :param multi_options: See <code>clone</code> method\", and the clone method's docstring contains the text </p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>   :param multi_options: A list of Clone options that can be provided multiple times.  One\n        option per list item which is passed exactly as specified to clone.\n        For example [&#39;--config core.filemode=false&#39;, &#39;--config core.ignorecase&#39;,\n                     &#39;--recurse-submodule=repo1_path&#39;, &#39;--recurse-submodule=repo2_path&#39;\n</code></pre></div>\n\n\n</blockquote>",
        "id": 196994599,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589035070
    },
    {
        "content": "<p>Do you mind if I add \"/venv\" to the .gitignore? I'm finally seeing if I can run the thing myself</p>",
        "id": 196994944,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589035518
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Python</span> <span class=\"mf\">3.8</span><span class=\"o\">.</span><span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"n\">Dec</span>  <span class=\"mi\">7</span> <span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">02</span><span class=\"p\">)</span>\n<span class=\"n\">Type</span> <span class=\"s1\">&#39;copyright&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;credits&#39;</span> <span class=\"ow\">or</span> <span class=\"s1\">&#39;license&#39;</span> <span class=\"k\">for</span> <span class=\"n\">more</span> <span class=\"n\">information</span>\n<span class=\"n\">IPython</span> <span class=\"mf\">7.12</span><span class=\"o\">.</span><span class=\"mi\">0</span> <span class=\"o\">--</span> <span class=\"n\">An</span> <span class=\"n\">enhanced</span> <span class=\"n\">Interactive</span> <span class=\"n\">Python</span><span class=\"o\">.</span> <span class=\"n\">Type</span> <span class=\"s1\">&#39;?&#39;</span> <span class=\"k\">for</span> <span class=\"n\">help</span><span class=\"o\">.</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">git</span> <span class=\"kn\">import</span> <span class=\"n\">Repo</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span>  <span class=\"n\">Repo</span><span class=\"o\">.</span><span class=\"n\">clone_from</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://github.com/leanprover-community/tutorials.git&#39;</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span> <span class=\"p\">,</span> <span class=\"s1\">&#39;test_target&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;--depth=1&#39;</span><span class=\"p\">])</span>\n<span class=\"o\">---------------------------------------------------------------------------</span>\n<span class=\"ne\">AttributeError</span>                            <span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">e474310ae324</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">1</span> <span class=\"n\">Repo</span><span class=\"o\">.</span><span class=\"n\">clone_from</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://github.com/leanprover-community/tutorials.git&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;test_target&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;--depth=1&#39;</span><span class=\"p\">])</span>\n\n<span class=\"o\">~/.</span><span class=\"n\">pyenv</span><span class=\"o\">/</span><span class=\"n\">versions</span><span class=\"o\">/</span><span class=\"mf\">3.8</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">.</span><span class=\"mi\">8</span><span class=\"o\">/</span><span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">repo</span><span class=\"o\">/</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"ow\">in</span> <span class=\"n\">clone_from</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">to_path</span><span class=\"p\">,</span> <span class=\"n\">progress</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">multi_options</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n   <span class=\"mi\">1015</span>         <span class=\"k\">if</span> <span class=\"n\">env</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n   <span class=\"mi\">1016</span>             <span class=\"n\">git</span><span class=\"o\">.</span><span class=\"n\">update_environment</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">env</span><span class=\"p\">)</span>\n<span class=\"o\">-&gt;</span> <span class=\"mi\">1017</span>         <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_clone</span><span class=\"p\">(</span><span class=\"n\">git</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">to_path</span><span class=\"p\">,</span> <span class=\"n\">GitCmdObjectDB</span><span class=\"p\">,</span> <span class=\"n\">progress</span><span class=\"p\">,</span> <span class=\"n\">multi_options</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n   <span class=\"mi\">1018</span>\n   <span class=\"mi\">1019</span>     <span class=\"k\">def</span> <span class=\"nf\">archive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ostream</span><span class=\"p\">,</span> <span class=\"n\">treeish</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\n<span class=\"o\">~/.</span><span class=\"n\">pyenv</span><span class=\"o\">/</span><span class=\"n\">versions</span><span class=\"o\">/</span><span class=\"mf\">3.8</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">.</span><span class=\"mi\">8</span><span class=\"o\">/</span><span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">repo</span><span class=\"o\">/</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"ow\">in</span> <span class=\"n\">_clone</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">git</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">odb_default_type</span><span class=\"p\">,</span> <span class=\"n\">progress</span><span class=\"p\">,</span> <span class=\"n\">multi_options</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"mi\">952</span>                          <span class=\"n\">v</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">universal_newlines</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">add_progress</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"n\">git</span><span class=\"p\">,</span> <span class=\"n\">progress</span><span class=\"p\">))</span>\n    <span class=\"mi\">953</span>         <span class=\"k\">if</span> <span class=\"n\">progress</span><span class=\"p\">:</span>\n<span class=\"o\">--&gt;</span> <span class=\"mi\">954</span>             <span class=\"n\">handle_process_output</span><span class=\"p\">(</span><span class=\"n\">proc</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">progress</span><span class=\"o\">.</span><span class=\"n\">new_message_handler</span><span class=\"p\">(),</span> <span class=\"n\">finalize_process</span><span class=\"p\">,</span> <span class=\"n\">decode_streams</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"mi\">955</span>         <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"mi\">956</span>             <span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">communicate</span><span class=\"p\">()</span>\n\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"s1\">&#39;list&#39;</span> <span class=\"nb\">object</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">attribute</span> <span class=\"s1\">&#39;new_message_handler&#39;</span>\n</code></pre></div>",
        "id": 196995922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589036769
    },
    {
        "content": "<p>This has nothing to do with <code>leanproject</code>, this is simply not how <code>Repo.clone_from</code> works (at least the version I have here).</p>",
        "id": 196995940,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589036803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196995940\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196995940\">said</a>:</p>\n<blockquote>\n<p>This has nothing to do with <code>leanproject</code>, this is simply not how <code>Repo.clone_from</code> works (at least the version I have here).</p>\n</blockquote>\n<p>Sure, I understand the message; I simply followed what I thought were clear and simple instructions from the docstring :P but nothing is clear and simple when you haven't touched a language for years</p>",
        "id": 196995952,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589036837
    },
    {
        "content": "<p>No problem. I'm very happy when people want to contribute to <code>leanproject</code>, and there is no hurry at all. I released anyway since there was a critical bug since the appearance of an unfortunately named branch in the mathlib repository</p>",
        "id": 196996106,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589037056
    },
    {
        "content": "<p>And now I need to leave</p>",
        "id": 196996108,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589037062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196990676\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196919242\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196907386\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <br>\nThanks. So, if I undestand the philosophy right, I should download the project group-theory-game and play there? I also suppose I should rather create an internal folder (say, with my name/initials) to avoid that if everything gets updated on GIT my work disappears?</p>\n</blockquote>\n<p>The file I linked to imports other files from that project, so yes you'd be better off downloading the entire project. But nowadays I usually work within a local copy of mathlib.</p>\n</blockquote>\n<p>Thanks!</p>\n</blockquote>\n<p>I am trying to play with the group_game, and I can prove something (for central elements, right and left cosets coincide) but I don't understand the definition of \"central_subgroup\". I am wondering what's the policy: is there a stream to discuss that project in particular, should I throw my question at everyone in the chat? And whom should I show my partial solution to see if it is correct, should I paste it here? Thanks</p>",
        "id": 197263399,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589284110
    },
    {
        "content": "<p>Oh I didn't even write the central subgroup stuff, that was written by <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> who is probably very busy with exams right now.</p>",
        "id": 197263901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589284442
    },
    {
        "content": "<p>and I am very busy with marking them :-/</p>",
        "id": 197263959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589284464
    },
    {
        "content": "<p>But one thing I would definitely recommend is that if you have any questions about this then please don't ask them in this generic thread, start a new topic with title the group theory game or something. You are more likely to get answers that way. Put it in #maths if you like.</p>",
        "id": 197264154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589284608
    },
    {
        "content": "<p>Also, feel free to write your own questions and PR them (or just post working Lean code as <a href=\"https://github.com/ImperialCollegeLondon/group-theory-game/issues\">\"issues\"</a> if you don't have a clue about github). Both Jason and I are busy with other things right now but we should get back to this in June.</p>",
        "id": 197264400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589284750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197263901\">said</a>:</p>\n<blockquote>\n<p>Oh I didn't even write the central subgroup stuff, that was written by <span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> who is probably very busy with exams right now.</p>\n</blockquote>\n<p>Oh, thanks. Very clear, then. I'll do so and I will try to understand how to \"PR\" them.</p>",
        "id": 197264660,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589284909
    },
    {
        "content": "<p>Hi, Filippo<br>\nI defined the <code>center</code> of a group G as the set of elements of G that commutes and then I defined it to be a subgroup by proving all the subgroup axioms.<br>\nTo be honest, I'm not sure if this is a good way to define this myself, I still learning myself!</p>",
        "id": 197266468,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589285974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197266468\">said</a>:</p>\n<blockquote>\n<p>Hi, Filippo<br>\nI defined the <code>center</code> of a group G as the set of elements of G that commutes and then I defined it to be a subgroup by proving all the subgroup axioms.<br>\nTo be honest, I'm not sure if this is a good way to define this myself, I still learning myself!</p>\n</blockquote>\n<p>I see; I have moved the discussion to maths/group theory game-&gt; should we continue there?</p>",
        "id": 197266578,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589286023
    },
    {
        "content": "<p>I'm struggling with the Advanced Worlds; specifically, I'm trying to apply some theorem statements to existing hypotheses to get new hypotheses to work with, but I can't figure out the syntax.</p>",
        "id": 197326090,
        "sender_full_name": "edderiofer",
        "timestamp": 1589311639
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a>?</p>",
        "id": 197326353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589311734
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"301323\">@edderiofer</span> ! I guess you're playing the natural number game? if you search this chat you may find a lot of discussions relevant to your problems :)</p>",
        "id": 197326403,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311759
    },
    {
        "content": "<p>If you have a more specific question, you can hit the \"new topic\" button, give it an appropriate title, and show us the code you're struggling with</p>",
        "id": 197326446,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311782
    },
    {
        "content": "<p>For instance, in Advanced Multiplication World 4, I do the following:<br>\n<code>induction c with d hd generalizing b,\nsimp,\nintro h,</code><br>\nwhich is fine. Now I want to use eq_zero_or_eq_zero_of_mul_eq_zero to deduce from h that a = 0 ∨ b = 0, but I can't figure out the syntax for it; <code>have g := mul_eq_zero_iff(h),</code> throws an error.</p>",
        "id": 197326458,
        "sender_full_name": "edderiofer",
        "timestamp": 1589311785
    },
    {
        "content": "<p>We need code that compiles, so that we can run it locally and see the same things you're seeing</p>",
        "id": 197326570,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311827
    },
    {
        "content": "<p>otherwise this is a big game of telephone where everybody loses</p>",
        "id": 197326583,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311836
    },
    {
        "content": "<p>Did you read the error?</p>",
        "id": 197326714,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311913
    },
    {
        "content": "<p>Yes, but I don't understand it.</p>",
        "id": 197326732,
        "sender_full_name": "edderiofer",
        "timestamp": 1589311920
    },
    {
        "content": "<p>The errors have lots of useful information in them</p>",
        "id": 197326733,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311920
    },
    {
        "content": "<p>If you want help here, you'll have to produce a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 197326829,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311952
    },
    {
        "content": "<p>On Advanced Multiplication World Level 4 of the Natural Number Game,<br>\n<code>induction c with d hd generalizing b,\nsimp,\nintro h,\nhave g := mul_eq_zero_iff(h),</code><br>\nthrows an error on the last line.</p>",
        "id": 197326843,
        "sender_full_name": "edderiofer",
        "timestamp": 1589311960
    },
    {
        "content": "<p>yes, I think you said all of that already</p>",
        "id": 197326884,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311977
    },
    {
        "content": "<p>Then I'm not sure what you want from me.</p>",
        "id": 197326990,
        "sender_full_name": "edderiofer",
        "timestamp": 1589312033
    },
    {
        "content": "<p>you could either give us a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> or tell us what youre error message is, I think both of those would enable progress</p>",
        "id": 197327065,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312050
    },
    {
        "content": "<p>(did you notice that <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> is a link to a page with a description of what we want?)</p>",
        "id": 197327089,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312062
    },
    {
        "content": "<p>I get the error:</p>\n<p><code>type mismatch at application\n  mul_eq_zero_iff h\nterm\n  h\nhas type\n  a * b = 0 : Prop\nbut is expected to have type\n  mynat : Type\nstate:\n2 goals\na : mynat,\nha : a ≠ 0,\nb : mynat,\nh : a * b = 0\n⊢ b = 0</code></p>\n<p><code>case mynat.succ\na : mynat,\nha : a ≠ 0,\nd : mynat,\nhd : ∀ (b : mynat), a * b = a * d → b = d,\nb : mynat\n⊢ a * b = a * succ d → b = succ d</code></p>",
        "id": 197327107,
        "sender_full_name": "edderiofer",
        "timestamp": 1589312070
    },
    {
        "content": "<p><code>mul_eq_zero_iff</code> is a function of several arguments, the first of which is a nat</p>",
        "id": 197327171,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312106
    },
    {
        "content": "<p>try <code>mul_eq_zero_iff _ _ h</code></p>",
        "id": 197327193,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312120
    },
    {
        "content": "<p>That gets me this error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">mul_eq_zero_iff</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">*</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">case</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 197327296,
        "sender_full_name": "edderiofer",
        "timestamp": 1589312166
    },
    {
        "content": "<p>from this part of the error <code>function expected at  mul_eq_zero_iff ?m_1 ?m_2</code> you can see that it wants exactly two arguments</p>",
        "id": 197327446,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312265
    },
    {
        "content": "<p>so try one fewer underscore</p>",
        "id": 197327475,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312278
    },
    {
        "content": "<p><code>have g := mul_eq_zero_iff _ h,</code> gets me this error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">mul_eq_zero_iff</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">mynat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">case</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 197327609,
        "sender_full_name": "edderiofer",
        "timestamp": 1589312338
    },
    {
        "content": "<p>What do you think this part of the error means?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">mynat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 197327661,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312374
    },
    {
        "content": "<p>That I need a second mynat as the second input.</p>",
        "id": 197327783,
        "sender_full_name": "edderiofer",
        "timestamp": 1589312428
    },
    {
        "content": "<p><code>have g := mul_eq_zero_iff _ _,</code> compiles, but gives me this set of goals:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">4</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">*</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">mynat</span>\n\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">mynat</span>\n\n<span class=\"n\">case</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n</code></pre></div>\n\n\n<p>which isn't what I wanted.</p>",
        "id": 197327850,
        "sender_full_name": "edderiofer",
        "timestamp": 1589312461
    },
    {
        "content": "<p>right, I think you should figure out which specific <code>mynat</code>s to fill in the underscores with</p>",
        "id": 197327940,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312510
    },
    {
        "content": "<p>(it's probably <code>a</code> and <code>b</code> in some order)</p>",
        "id": 197328088,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312578
    },
    {
        "content": "<p>Jalex, you're not helping by keeping answering without a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 197328271,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589312657
    },
    {
        "content": "<p>You know that, in the long run, you're not helping him or her.</p>",
        "id": 197328354,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589312708
    },
    {
        "content": "<p>I could stop replying, yeah; I guess my fear is that they'll give up on the natural number game</p>",
        "id": 197328392,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312727
    },
    {
        "content": "<p>really my goal is to try to understand why people don't respond gracefully to requests for a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 197328450,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312756
    },
    {
        "content": "<p>i don't have a very good model of what's going on in their head</p>",
        "id": 197328523,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312771
    },
    {
        "content": "<p>but also like, I think it <em>is</em> interesting to have discussions with new people about how to read error messages</p>",
        "id": 197328584,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312812
    },
    {
        "content": "<p>maybe we need a natural number game stream to insulate the rest of the server from specificall this sort of interaction</p>",
        "id": 197328667,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312863
    },
    {
        "content": "<p>In my case, I'm not sure how the description I gave:</p>\n<blockquote>\n<p>On Advanced Multiplication World Level 4 of the Natural Number Game,<br>\n<code>induction c with d hd generalizing b,\nsimp,\nintro h,\nhave g := mul_eq_zero_iff(h),</code><br>\nthrows an error on the last line.</p>\n</blockquote>\n<p>doesn't constitute a MWE (or in this case, a MN-WE).</p>",
        "id": 197328826,
        "sender_full_name": "edderiofer",
        "timestamp": 1589312925
    },
    {
        "content": "<p>did you read the definition at the link?</p>",
        "id": 197328920,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312982
    },
    {
        "content": "<p>for us, a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> is something that we can copy-paste into a local Lean instance</p>",
        "id": 197328950,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312999
    },
    {
        "content": "<p>OK, but how do I get the list of imports if I'm playing the Natural Number Game?</p>",
        "id": 197329068,
        "sender_full_name": "edderiofer",
        "timestamp": 1589313053
    },
    {
        "content": "<p>(and yeah, \"working\" is a strange word, for us it means \"throws the error that i'm interested in getting help with\")</p>",
        "id": 197329076,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313063
    },
    {
        "content": "<p>you could start by including the theorem statement</p>",
        "id": 197329144,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313103
    },
    {
        "content": "<p>I can add some guidance to that link about the natural number game</p>",
        "id": 197329233,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313127
    },
    {
        "content": "<p>That would definitely be helpful.</p>",
        "id": 197329248,
        "sender_full_name": "edderiofer",
        "timestamp": 1589313138
    },
    {
        "content": "<p>okay so what happens if you try to post the theorem statement and your proof script?</p>",
        "id": 197329279,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313159
    },
    {
        "content": "<p>I think it's ~40% likely that if I copy it into my local instance, it will just work, since a lot of the natural number definitions are in core</p>",
        "id": 197329333,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301323\">@edderiofer</span>  When we say an MWE (Minimum Working Example), we mean something we can copy and paste directly into a local Lean compiler and get the same result. It may not be obvious how to do this if Natural Number Game has been your only exposure to lean. For example, the following does not work because it's just a series of tactics. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_zero_iff</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>This does count, because I've included the theorem statement and imports (notice that I'm using nat instead of mynat, which is specific to NNG). </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_zero_iff</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197329354,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589313211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"261068\">@ROCKY KAMEN-RUBIO</span> you're missing <code>import tactic</code></p>",
        "id": 197329523,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313298
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 197329553,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589313313
    },
    {
        "content": "<p>The case of the NNG is the easiest actually: you can copy-paste the url, eg <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=7&amp;level=1\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=7&amp;level=1</a></p>",
        "id": 197329554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589313313
    },
    {
        "content": "<p>The following works (on <a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=9&amp;level=4\">https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=9&amp;level=4</a>):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">mul_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_zero_iff</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">rwa</span> <span class=\"n\">g</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>but is there a quicker way to perform the last two lines to go from <code>h : a * b = 0</code> to <code>h : a = 0 ∨ b = 0</code>?</p>",
        "id": 197329560,
        "sender_full_name": "edderiofer",
        "timestamp": 1589313315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197329523\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> you're missing <code>import tactic</code></p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_zero_iff</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197329594,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589313339
    },
    {
        "content": "<p>Jalex, I think it would be good idea to mention this url \"trick\" in the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> webpage</p>",
        "id": 197329607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589313346
    },
    {
        "content": "<p>you could do <code>rwa mul_eq_zero_iff a b at h,</code></p>",
        "id": 197329615,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313354
    },
    {
        "content": "<p>and then in fact if you replace the a and b with underscores it should figure it out for you</p>",
        "id": 197329703,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313384
    },
    {
        "content": "<p>Ah, OK.</p>",
        "id": 197329720,
        "sender_full_name": "edderiofer",
        "timestamp": 1589313392
    },
    {
        "content": "<p>thanks for the patience here, we really want to help new people and avoid burnout, so we want to make processes to make helping new people more efficient</p>",
        "id": 197329841,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313455
    },
    {
        "content": "<p>What if the theorem I wanted to use was a single-direction implication? You can't use <code>rw</code> then, can you?</p>",
        "id": 197329937,
        "sender_full_name": "edderiofer",
        "timestamp": 1589313489
    },
    {
        "content": "<p>then you want <code>apply</code></p>",
        "id": 197330081,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313548
    },
    {
        "content": "<p>well, <code>apply f</code> works if <code>f : A \\to B</code> and <code>B</code> is the goal</p>",
        "id": 197330190,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301323\">@edderiofer</span>  This might seem like a silly distinction, but getting in the habit of doing this really does speed up the process of assessing errors when your questions get more complex. It's totally understandable if you're confused this early on. Keep at it, and keep asking questions if you get stuck!</p>",
        "id": 197330272,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589313618
    },
    {
        "content": "<p>sometimes I do find myself using a lemma to generate an equality and then <code>rw</code>ing that equality</p>",
        "id": 197330305,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313630
    },
    {
        "content": "<p>I don't know what is explained in the game at this point, but the normal way to write this beginning of proof would be:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">mul_eq_zero_iff</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">ha&#39;</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>or, even better,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"o\">((</span><span class=\"n\">mul_eq_zero_iff</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 197330455,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589313712
    },
    {
        "content": "<p>where \"normal\" means \"mathlib-approved\"?</p>",
        "id": 197330553,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313748
    },
    {
        "content": "<p>efficiency approved</p>",
        "id": 197330590,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589313771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197330305\">said</a>:</p>\n<blockquote>\n<p>sometimes I do find myself using a lemma to generate an equality and then <code>rw</code>ing that equality</p>\n</blockquote>\n<p>Technically I think NNG doesn't let you define external lemmas outside of the current tactic proof, so you would have to use a <code>have</code> statement or something.</p>",
        "id": 197330601,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589313776
    },
    {
        "content": "<p>I don't think <code>.mp</code> is explained in the game at this point?</p>",
        "id": 197330634,
        "sender_full_name": "edderiofer",
        "timestamp": 1589313792
    },
    {
        "content": "<p>yes when i said \"lemma\" I did mean \"add somethign new to the local context with <code>have</code>\" not \"define something with the <code>lemma</code> keyword\"</p>",
        "id": 197330668,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313820
    },
    {
        "content": "<p>I have no idea what is explained here. I'm too old. I started Lean long before this game was written</p>",
        "id": 197330690,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589313834
    },
    {
        "content": "<p>I agree that NNG does not want you to use <code>.mp</code></p>",
        "id": 197330745,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313848
    },
    {
        "content": "<p>I learned about <code>.mp</code> by using Lean in VSCode and having it pop out of <code>suggest</code> or <code>library_search</code> sometimes</p>",
        "id": 197330778,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197330668\">said</a>:</p>\n<blockquote>\n<p>yes when i said \"lemma\" I did mean \"add somethign new to the local context with <code>have</code>\" not \"define something with the <code>lemma</code> keyword\"</p>\n</blockquote>\n<p>Cool, just wanted to make that distinction because of the keyword <code>lemma</code>.</p>",
        "id": 197330783,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589313874
    },
    {
        "content": "<p>Patrick, is adding a local hypothesis and using <code>rw</code> really much less efficient than the term mode proof?</p>",
        "id": 197330830,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313902
    },
    {
        "content": "<p>I guess in my mind the only time to care about that much efficiency is if you're putting code into mathlib</p>",
        "id": 197330857,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313918
    },
    {
        "content": "<p>but maybe I am wrong</p>",
        "id": 197330863,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313921
    },
    {
        "content": "<p>I mostly meant efficiency in writing speed.</p>",
        "id": 197330927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589313961
    },
    {
        "content": "<p>well that's definitely not true if I'm the one writing :P</p>",
        "id": 197331094,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314045
    },
    {
        "content": "<p>I also have another constraint from my teaching use of Lean. The ultimate goal of my course is to teach traditional math writing. Lean is only an intermediate tool. Hence I prefer having only one line of Lean for one sentence on paper. Here you would say: ab = 0 and a neq 0 hence b=0, matching the number of lines of my efficient proof.</p>",
        "id": 197331127,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589314060
    },
    {
        "content": "<p>interesting</p>",
        "id": 197331146,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314074
    },
    {
        "content": "<p>Kevin writes a lot of \"literate lean\" where he uses multiple lines of Lean for one line of math</p>",
        "id": 197331221,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314098
    },
    {
        "content": "<p>But on that example, I would not expect my students to write this line, this is too advanced term mode.</p>",
        "id": 197331252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589314119
    },
    {
        "content": "<p>ah okay</p>",
        "id": 197331283,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314140
    },
    {
        "content": "<p>making the math proof move slower seems better than making the lean move faster, for the purpose of teaching first-years</p>",
        "id": 197331337,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314168
    },
    {
        "content": "<p>I guess most people here (including <span class=\"user-mention\" data-user-id=\"301323\">@edderiofer</span>) are coming form the perspective of already being fluent in \"terse\" mathematical sentences</p>",
        "id": 197331490,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314225
    },
    {
        "content": "<p>I made a small edit to the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> page. <span class=\"user-mention\" data-user-id=\"301323\">@edderiofer</span> do you think the current state of the page would have caused you to post a link?</p>",
        "id": 197331650,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314306
    },
    {
        "content": "<p>If \"Natural Number Game\" were capitalized, definitely.</p>",
        "id": 197331753,
        "sender_full_name": "edderiofer",
        "timestamp": 1589314343
    },
    {
        "content": "<p>haha thanks, fixing that now</p>",
        "id": 197332423,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314597
    },
    {
        "content": "<p>okay, I added a fairly explicit example to <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 197332950,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314782
    },
    {
        "content": "<p>Yep, that works.</p>",
        "id": 197333065,
        "sender_full_name": "edderiofer",
        "timestamp": 1589314807
    },
    {
        "content": "<p>edderiofer, I think i recognize your name from /r/math and /r/mathriddles ? Have you seen this pair of <a href=\"https://www.reddit.com/r/mathriddles/comments/ghx09u/a_commutative_ring_cannot_have_exactly_5/\">riddle</a> and <a href=\"https://www.codewars.com/kata/5e8c4b4a968b34002d4b6534\">Codewars question</a>?<br>\nand <a href=\"https://www.reddit.com/r/mathriddles/comments/7f9l7a/let_pq_be_consecutive_primes_greater_than_2_show/?utm_source=share&amp;utm_medium=web2x\">this</a> other <a href=\"https://www.codewars.com/kata/5eb0c7163c435d002f65666e\">pair</a>, where the translation was in the other direction?</p>",
        "id": 197333191,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314874
    },
    {
        "content": "<p>Regarding <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> generation, it would be nice if NNG had a \"MWE button\" that takes the user's text together with the surrounding theorem and the imports and puts it in your clipboard. Since this has to be what is being sent to lean this should not be too difficult</p>",
        "id": 197333395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589314976
    },
    {
        "content": "<p>it's still not perfect because of the mynat issue, but it should be enough for the cognoscenti</p>",
        "id": 197333473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589315025
    },
    {
        "content": "<p>No, I haven't seen either of those pairs, but yes, you probably do recognize me from there.</p>",
        "id": 197333673,
        "sender_full_name": "edderiofer",
        "timestamp": 1589315071
    },
    {
        "content": "<p>cool, I am khanh93 on reddit, though I post a lot less so you may not recognize me</p>",
        "id": 197334183,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589315270
    },
    {
        "content": "<p>Yep, definitely don't recognize that username.</p>",
        "id": 197334596,
        "sender_full_name": "edderiofer",
        "timestamp": 1589315442
    },
    {
        "content": "<p>So who's going to post the MWE button feature request to GitHub?</p>",
        "id": 197334652,
        "sender_full_name": "edderiofer",
        "timestamp": 1589315465
    },
    {
        "content": "<p>well I think the biggest problem is that we don't have anyone doing active development on the NNG engine :(</p>",
        "id": 197334726,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589315498
    },
    {
        "content": "<p>though I guess the github project is a great place to store these desiderata</p>",
        "id": 197334857,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589315532
    },
    {
        "content": "<p>I think this project is the relevant one<br>\n<a href=\"https://github.com/mpedramfar/Lean-game-maker\">https://github.com/mpedramfar/Lean-game-maker</a></p>",
        "id": 197334893,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589315551
    },
    {
        "content": "<p>The person to ping is <span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span>, I think. Unless he's said he's taking a step back from development.</p>",
        "id": 197334942,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589315571
    },
    {
        "content": "<p>I thought it was this one? <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game\">https://github.com/ImperialCollegeLondon/natural_number_game</a></p>",
        "id": 197334954,
        "sender_full_name": "edderiofer",
        "timestamp": 1589315575
    },
    {
        "content": "<p>I <em>think</em>, though obviously mohammad is the best person to comment, that the latter project is for the content of the game levels and the former is for the engine</p>",
        "id": 197335103,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589315637
    },
    {
        "content": "<p>Ah, OK. Well, I'm still stuck on this level, so I think I'll just go off and make food now.</p>",
        "id": 197335210,
        "sender_full_name": "edderiofer",
        "timestamp": 1589315675
    },
    {
        "content": "<p>(I'm hoping \"stuck\" means \"still trying to think of a new idea\" and not \"there was a question I asked that didn't receive any attention, because everyone was talking about the meta problem of how to phrase the question\")</p>",
        "id": 197335237,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589315686
    },
    {
        "content": "<p>Still trying to think of a new idea.</p>",
        "id": 197336205,
        "sender_full_name": "edderiofer",
        "timestamp": 1589316125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197334726\">said</a>:</p>\n<blockquote>\n<p>well I think the biggest problem is that we don't have anyone doing active development on the NNG engine :(</p>\n</blockquote>\n<p>The latest commit was 5 days ago! :(<br>\nIs there any issue with the game? Or do you want some extra features?</p>",
        "id": 197337533,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1589316699
    },
    {
        "content": "<p>Hmm. If I could prove that a is the successor of <em>some</em> number, since it's nonzero, this would be a lot easier, I think?</p>",
        "id": 197337664,
        "sender_full_name": "edderiofer",
        "timestamp": 1589316749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132175\">Mohammad Pedramfar</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197337533\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197334726\">said</a>:</p>\n<blockquote>\n<p>well I think the biggest problem is that we don't have anyone doing active development on the NNG engine :(</p>\n</blockquote>\n<p>The latest commit was 5 days ago! :(<br>\nIs there any issue with the game? Or do you want some extra features?</p>\n</blockquote>\n<p>hah, sorry! I was not following closely enough. Now I remember that you recently made it so that progress is saved! I think the work you're doing is very valuable :)</p>",
        "id": 197337759,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589316789
    },
    {
        "content": "<p>The feature request that came up in this thread was \"click a button to generate a MWE that could be copied and pasted into zulip\"</p>",
        "id": 197337826,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589316821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301323\">edderiofer</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197337664\">said</a>:</p>\n<blockquote>\n<p>Hmm. If I could prove that a is the successor of <em>some</em> number, since it's nonzero, this would be a lot easier, I think?</p>\n</blockquote>\n<p>try <code>cases a</code></p>",
        "id": 197337860,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589316838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197337826\">said</a>:</p>\n<blockquote>\n<p>The feature request that came up in this thread was \"click a button to generate a MWE that could be copied and pasted into zulip\"</p>\n</blockquote>\n<p>so it would have the URL of the current level plus the current proof script, and I guess also the statement of the theorem so that people who don't click the link can follow the discussion</p>",
        "id": 197338076,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589316927
    },
    {
        "content": "<p>Oh, right, I misread what <code>cases a</code> does in this case.</p>",
        "id": 197338190,
        "sender_full_name": "edderiofer",
        "timestamp": 1589316982
    },
    {
        "content": "<p>Is there a quick way to comment out a line?</p>",
        "id": 197338204,
        "sender_full_name": "edderiofer",
        "timestamp": 1589316991
    },
    {
        "content": "<p><code>-- comment</code></p>",
        "id": 197338228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589317011
    },
    {
        "content": "<p>ctrl+/ (or cmd+/ if you're on macOS) should be the keybind for line comment.</p>",
        "id": 197338293,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589317052
    },
    {
        "content": "<p>that's in VSCode, I think in the NNG you just have to type the comment character</p>",
        "id": 197338325,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589317072
    },
    {
        "content": "<p>there's also block comments</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">like this</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 197338384,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589317086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197338325\">said</a>:</p>\n<blockquote>\n<p>that's in VSCode, I think in the NNG you just have to type the comment character</p>\n</blockquote>\n<p>Oh, you're right. For some reason I thought the web editors supported it too.</p>",
        "id": 197338719,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589317221
    },
    {
        "content": "<p>a lot of web editors have the same keybinding</p>",
        "id": 197338972,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589317327
    },
    {
        "content": "<p>I use cmd-/ in jupyter and overleaf</p>",
        "id": 197338990,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589317339
    },
    {
        "content": "<p>How do I flip an equality? If I have <code>a * b = 0</code> as a hypothesis, how do I turn it into <code>0 = a * b</code>?</p>",
        "id": 197339007,
        "sender_full_name": "edderiofer",
        "timestamp": 1589317347
    },
    {
        "content": "<p><code>symmetry at h</code></p>",
        "id": 197339109,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589317402
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 197339182,
        "sender_full_name": "edderiofer",
        "timestamp": 1589317442
    },
    {
        "content": "<p>btw it's better for the server if we have new questions in new topics.</p>",
        "id": 197339246,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589317461
    },
    {
        "content": "<p>mostly so that people later can read old conversations</p>",
        "id": 197339281,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589317483
    },
    {
        "content": "<p>Ah, alright.</p>",
        "id": 197339470,
        "sender_full_name": "edderiofer",
        "timestamp": 1589317572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197333395\">said</a>:</p>\n<blockquote>\n<p>Regarding <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> generation, it would be nice if NNG had a \"MWE button\" that takes the user's text together with the surrounding theorem and the imports and puts it in your clipboard. Since this has to be what is being sent to lean this should not be too difficult</p>\n</blockquote>\n<p>The things that are sent to the Lean server are not limited to what can be seen on the screen. There could be hidden lines. And several of the tactics used in the NNG are redefined to work slightly differently. So it won't really be a <em>minimal working example</em>. It generally won't work. It would need the imports and everything.</p>",
        "id": 197341445,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1589318533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197338076\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197337826\">said</a>:</p>\n<blockquote>\n<p>The feature request that came up in this thread was \"click a button to generate a MWE that could be copied and pasted into zulip\"</p>\n</blockquote>\n<p>so it would have the URL of the current level plus the current proof script, and I guess also the statement of the theorem so that people who don't click the link can follow the discussion</p>\n</blockquote>\n<p>That's doable, but it will only be useful for Zulip. The user won't be able to actually run the text that's copied into the clipboard. Wouldn't it be confusing for the users who don't use Zulip?</p>",
        "id": 197342140,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1589318910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301323\">@edderiofer</span> did you get the answer to your question? I've only just arrived.</p>",
        "id": 197342568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589319120
    },
    {
        "content": "<p>Which of my many questions? :P</p>\n<p>(Yes.)</p>",
        "id": 197343711,
        "sender_full_name": "edderiofer",
        "timestamp": 1589319736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132175\">Mohammad Pedramfar</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197341445\">said</a>:</p>\n<blockquote>\n<p>The things that are sent to the Lean server are not limited to what can be seen on the screen. There could be hidden lines. And several of the tactics used in the NNG are redefined to work slightly differently. So it won't really be a <em>minimal working example</em>. It generally won't work. It would need the imports and everything.</p>\n</blockquote>\n<p>I know. Unless there is a good reason to hide them (e.g. if the solution is in there), I'm thinking everything in the level file, including any hidden lines, but not the entirety of NNG.</p>",
        "id": 197344145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589319982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132175\">Mohammad Pedramfar</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197342140\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197338076\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197337826\">said</a>:</p>\n<blockquote>\n<p>The feature request that came up in this thread was \"click a button to generate a MWE that could be copied and pasted into zulip\"</p>\n</blockquote>\n<p>so it would have the URL of the current level plus the current proof script, and I guess also the statement of the theorem so that people who don't click the link can follow the discussion</p>\n</blockquote>\n<p>That's doable, but it will only be useful for Zulip. The user won't be able to actually run the text that's copied into the clipboard. Wouldn't it be confusing for the users who don't use Zulip?</p>\n</blockquote>\n<p>hah, I guess around here we have some kind of bias towards zulip users :) <br>\nThe text that comes out is <em>pretty close</em> to working, which is plenty good if you're using it to talk to people, but maybe is disheartening if you're working on your own. I agree that it's not clear whether there's a version of this that's useful on average over all users.</p>",
        "id": 197344192,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320017
    },
    {
        "content": "<p>So there is the possibility that it's not a perfect MWE but it should get close enough for people to get the gist</p>",
        "id": 197344199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197344199\">said</a>:</p>\n<blockquote>\n<p>So there is the possibility that it's not a perfect MWE but it should get close enough for people to get the gist</p>\n</blockquote>\n<p>unless the people are not yet good at reading error messages</p>",
        "id": 197344248,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320066
    },
    {
        "content": "<p>I think if you want a faithful version of NNG offline you can download the repo and use vscode</p>",
        "id": 197344352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320126
    },
    {
        "content": "<p>oh yeah I forgot that is a thing</p>",
        "id": 197344386,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320152
    },
    {
        "content": "<p>why can't we just use the NNG website?</p>",
        "id": 197344409,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320181
    },
    {
        "content": "<p>but my goal here is to improve the state of affairs over</p>\n<blockquote>\n<p><code>\ninduction b,\napply h1 h2\n</code><br>\nit doesn't work</p>\n</blockquote>",
        "id": 197344422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320190
    },
    {
        "content": "<p>well I think the goal is to make it so that first time posters are more likely to post a complete thing</p>",
        "id": 197344529,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320229
    },
    {
        "content": "<p>having them link us to the NNG website is good</p>",
        "id": 197344553,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320244
    },
    {
        "content": "<p>it also requires me to load a link, which may be more or less complicated if I'm on a phone or something</p>",
        "id": 197344635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320301
    },
    {
        "content": "<p>having inline code is good</p>",
        "id": 197344649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320310
    },
    {
        "content": "<p>but when people type text into NNG all the context is gone. I want some bare minimum of context to understand the question. I have no idea what world 4 level 7 is</p>",
        "id": 197344761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320368
    },
    {
        "content": "<p>I think it'd be more useful to have the NNG website give the user a link to the level they're solving with their code filled in</p>",
        "id": 197345161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589320593
    },
    {
        "content": "<p>Then you get more of the true context (including whatever the level is supposed to be teaching, etc)</p>",
        "id": 197345192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589320630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> while you're here, I pushed a new version of NNG recently, and now I have a FAQ and thanks to Mohammad, save game functionality. You seemed to have some very clear visions for what this game should look like and we recently had a conversation about it; I am hoping I dealt with some of your comments in v1.3.2 but I'd be very happy to hear if you still had more.</p>",
        "id": 197345211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589320643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> as of recently we can actually link directly to that level (this is new as of about last week), so it will be much easier in the future. I don't have any idea either, and when I look in the source code the worlds are called different things to what the users call them which makes life even worse :-)</p>",
        "id": 197345331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589320701
    },
    {
        "content": "<p>Not only that, remember that I am using a modified rw, induction, cases etc, so these things are actually perhaps not appropriate for mwes in the traditional sense.</p>",
        "id": 197345379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589320731
    },
    {
        "content": "<p>My main complaint is about \"raw\" tactic scripts. Even if it doesn't run, seeing <code>theorem foo : ...</code> at the start makes things a lot easier</p>",
        "id": 197345459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197345331\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> as of recently we can actually link directly to that level (this is new as of about last week), so it will be much easier in the future. I don't have any idea either, and when I look in the source code the worlds are called different things to what the users call them which makes life even worse :-)</p>\n</blockquote>\n<p>We added some text to the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> page telling people to use level links when they post in zulip chat :)<br>\n(I'll think a bit on your other question.)</p>",
        "id": 197345472,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320788
    },
    {
        "content": "<p>I think there are weird features or hacks you can use to cause some surrounding text to be included if the user copies their text, but not sure if advisable</p>",
        "id": 197345811,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589320967
    },
    {
        "content": "<p>An idea I had was to put the theorem statements into the editor together with the proof, but make the first and the last line read-only. So the user can't edit the statement, but  when they want to copy, they can select all of it. Unfortunately, monaco-editor, which is used in the NNG and other places with Lean on the web, doesn't have this option. One way to go around it would be to use another text editor, like Ace editor, which has this function. But that seems to be very difficult. I would need to redefine the Lean syntax and autocompletion and highlighting and everything for a new editor. Besides, this seems to be the only way Ace editor is better. Monaco editor is the web-based version of VS code, which is why things work so well.</p>",
        "id": 197348506,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1589322636
    },
    {
        "content": "<p>Maybe just have a button which has the effect of copying the user's text together with the surrounding statement/tactic?</p>",
        "id": 197348680,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589322726
    },
    {
        "content": "<p>I wrote some Lean integration for <a href=\"https://codemirror.net/\">CodeMirror</a> for my Observable notebooks which I could try to extract if there's interest.</p>",
        "id": 197348686,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589322733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197348680\">said</a>:</p>\n<blockquote>\n<p>Maybe just have a button which has the effect of copying the user's text together with the surrounding statement/tactic?</p>\n</blockquote>\n<p>Yeah, I'm starting to think adding a button that would copy the content and the statement would be the most efficient way. The main page of NNG has a link to a FAQ page describing why Lean is different than the NNG, so I guess it wouldn't be that confusing for a user when they see it doesn't work.</p>",
        "id": 197349106,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1589323054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197348686\">said</a>:</p>\n<blockquote>\n<p>I wrote some Lean integration for <a href=\"https://codemirror.net/\">CodeMirror</a> for my Observable notebooks which I could try to extract if there's interest.</p>\n</blockquote>\n<p>That might be useful, but I'll go with the simpler approach this time. :)<br>\nIt's on github, right? Why didn't you use monaco-editor?</p>",
        "id": 197349296,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1589323199
    },
    {
        "content": "<blockquote>\n<p>It's on github, right? Why didn't you use monaco-editor?</p>\n</blockquote>\n<p>Yes, CodeMirror is on github. I remember thinking that monaco would be too heavy-weight (in terms of file-size) to include, and it also looked to be a lot of work to bundle it properly for my use-case. In the end it wasn't too hard to write a Lean integration for CodeMirror following what was already done for monaco in the lean-web-editor, since the CodeMirror API is fairly simple.</p>",
        "id": 197350520,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589323953
    },
    {
        "content": "<p>That's good to know. My impression was that it would be difficult to use another editor.</p>",
        "id": 197358501,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1589331564
    },
    {
        "content": "<p>I forgot to mention it here. The button is added in the <code>Lean-game-maker</code> repo. It will be there in the next update of the game. It took a while since I was fixing a few bugs.</p>",
        "id": 198495876,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1590182096
    }
]