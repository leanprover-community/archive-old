[
    {
        "content": "<p>Hi all! I'm Pim. I'm a software developer, but dipping my toe back in to math just for fun and learning lean along with that. (Graduated with an MSc in applied math).</p>\n<p>I've proven some smaller results I want to use elsewhere, but I'm guessing there's a lot to be improved. A couple of questions about the sample below:</p>\n<ol>\n<li>the simp call in simple_identity takes about 2.5~3 seconds for me, is that normal? Can I do something to speed that up/should I be using something else?</li>\n<li>The coeficient_equal lemma seems very verbose. (I've tried refactoring it a little bit for the a=d part, but not with much result) Is there an easier way to prove the finsupp.single s to be not equal?</li>\n<li>Could I get either result directly from mathlib? </li>\n</ol>\n<p>Thanks in advance:)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"c1\">-- set_option profiler true</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">simple_polynomial</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">simple_identity</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">mv_polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">simple_polynomial</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">α</span><span class=\"bp\">*</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">simple_polynomial</span><span class=\"o\">,</span>\n    <span class=\"n\">ring_nf</span> <span class=\"n\">SOP</span> <span class=\"o\">{</span><span class=\"n\">recursive</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial.monomial_eq_C_mul_X</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.monomial_single_add</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.C_pow</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coefficient_equal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_polynomial</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">simple_polynomial</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">simple_polynomial</span><span class=\"o\">,</span>\n        <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">mv_polynomial.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">help₁</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">fun_like.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"k\">have</span> <span class=\"n\">help₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">fun_like.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"k\">have</span> <span class=\"n\">fact₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n            <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial.coeff_X_pow</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.coeff_mul_X'</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.coeff_C_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n            <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n        <span class=\"o\">},</span>\n        <span class=\"k\">have</span> <span class=\"n\">fact₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n            <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial.coeff_X_pow</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.coeff_mul_X'</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.coeff_C_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n            <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">fun_like.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n                <span class=\"n\">specialize</span> <span class=\"n\">h_1</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">fun_like.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n                <span class=\"n\">specialize</span> <span class=\"n\">h_1</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">fun_like.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h_2</span><span class=\"o\">,</span>\n                <span class=\"n\">specialize</span> <span class=\"n\">h_2</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h_2</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">h_2</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n        <span class=\"o\">},</span>\n        <span class=\"k\">have</span> <span class=\"n\">fact₃</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n            <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial.coeff_X_pow</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.coeff_mul_X'</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.coeff_C_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n            <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">fun_like.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n                <span class=\"n\">specialize</span> <span class=\"n\">h_1</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">fun_like.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n                <span class=\"n\">specialize</span> <span class=\"n\">h_1</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">fun_like.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h_2</span><span class=\"o\">,</span>\n                <span class=\"n\">specialize</span> <span class=\"n\">h_2</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h_2</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">h_2</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n        <span class=\"o\">},</span>\n        <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">fact₁</span><span class=\"o\">,</span> <span class=\"n\">fact₂</span><span class=\"o\">,</span> <span class=\"n\">fact₃</span><span class=\"o\">⟩</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">ha</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h'</span> <span class=\"k\">with</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291707128,
        "sender_full_name": "Pim Otte",
        "timestamp": 1659446204
    },
    {
        "content": "<ol>\n<li>You can speed up simps by squeezing them (i.e., replacing it with <code>squeeze_simp</code>). When this runs, it will give you, in VS code's widget panel: \"Try this: simp only [...]\", which you can then click and it will replace the <code>squeeze_simp</code> with the <code>simp only [...]</code>. This makes it so that it is only doing <code>simp</code> with the collection of lemmas in brackets, as opposed to all the simp lemmas currently imported. (In addition, I think <code>simp</code> should be significantly faster in Lean 4, once we manage to make that switch).</li>\n<li>Do you mean the statement is verbose, or the proof?</li>\n<li>I'm not sure yet, I think I would need to somehow normalize them into something more familiar (to me).</li>\n</ol>",
        "id": 291713931,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659449082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> The squeeze_simp worked wonderfully, thanks!</p>\n<ol start=\"2\">\n<li>The proof, mostly.</li>\n<li>So to be a little bit more specific, I'm trying to prove  a statement about multivariate polynomials of the form aX^2+bXY+cY^2, simple_identity is the expansion of (alpha<em>X+beta</em>Y)^2 to this form, and coefficient_equal simply says that the polynomials are equal if their coefficients are equal.</li>\n</ol>",
        "id": 291714675,
        "sender_full_name": "Pim Otte",
        "timestamp": 1659449497
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finsupp.single_left_injective</span> <span class=\"o\">(</span><span class=\"n\">two_ne_zero</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ne</span> <span class=\"n\">one_ne_zero</span>\n</code></pre></div>",
        "id": 291715295,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659449766
    },
    {
        "content": "<p><code>coefficient_equal</code> should be an <code>@[ext]</code> lemma, so maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.ext\">docs#mv_polynomial.ext</a> or maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.ext_iff\">docs#mv_polynomial.ext_iff</a>. As for simplifying the proof, the answer is certainly yes, but it should be unnecessary given the above lemma.</p>",
        "id": 291715449,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659449837
    },
    {
        "content": "<p>I'm not sure if we have stuff about homogeneous polynomials in mathlib, but I would be a bit surprised if not. Someone familiar with this part of the library will be able to answer better.</p>",
        "id": 291715638,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659449924
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.is_homogeneous\">docs#mv_polynomial.is_homogeneous</a></p>",
        "id": 291716294,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659450222
    },
    {
        "content": "<p>That is the <em>unbundled</em> predicate which just says that a poynomial is homogeneous, but we also have it <em>bundled</em> as a submodule with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.homogeneous_submodule\">docs#mv_polynomial.homogeneous_submodule</a>. So I think you could get a \"simple polynomial\" as <code>p : mv_polynomial.homogeneous_submodule (fin 2) ℂ 2</code>.</p>",
        "id": 291717141,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659450585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Introduction.20and.20review.20request/near/291715295\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finsupp.single_left_injective</span> <span class=\"o\">(</span><span class=\"n\">two_ne_zero</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ne</span> <span class=\"n\">one_ne_zero</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Though this broke my brain a little bit, I think I understand now. This is very helpful to learn how I should be thinking about this stuff:)</p>\n<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span>  Great references! I think I came across the ext lemma's at some point but failed to get them to work at that time, I'll give that another shot now that I have more of a clue. Perhaps with your references on the homogeneous stuff, I might not even need it. Thanks a lot :)</p>",
        "id": 291718333,
        "sender_full_name": "Pim Otte",
        "timestamp": 1659451079
    },
    {
        "content": "<p>Even with the homogeneous submodule, you will still need the ext lemmas in order to move between equality of polynomials and equality of coefficients.</p>",
        "id": 291718790,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659451283
    }
]