[
    {
        "content": "<p>Regarding <a href=\"https://github.com/leanprover-community/lean/blob/ed6accfb611bbd28ef5b7e34361d2b58a366e2c9/library/init/data/quot.lean#L63\">this</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">quot</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>It appears that a <code>namespace</code> defines a class.  Is that correct?</p>",
        "id": 219629946,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607705391
    },
    {
        "content": "<p>No, it just shares a name with a type</p>",
        "id": 219630109,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607705446
    },
    {
        "content": "<p>You can read about namespaces in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a>, a book which you are probably now in a position to get to the end of. Your code doesn't run for me. <code>quot</code> is already a thing in core Lean -- is this what is confusing you?</p>",
        "id": 219630247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607705505
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot\">docs#quot</a> should be the definition</p>",
        "id": 219630272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607705515
    },
    {
        "content": "<p>Huh, I was expecting a <code>meta constant</code> or something</p>",
        "id": 219630379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607705552
    },
    {
        "content": "<p>go to definition also fails in VS Code</p>",
        "id": 219630768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607705718
    },
    {
        "content": "<p><code>quot</code> and its associated constants are magically declared to exist by the kernel</p>",
        "id": 219631044,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607705831
    },
    {
        "content": "<p>there's some command which triggers their construction which I forget</p>",
        "id": 219631070,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607705843
    },
    {
        "content": "<p><code>init_quotient</code> in core.lean</p>",
        "id": 219631140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607705871
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Initialize the quotient module, which effectively adds the following definitions:</span>\n\n<span class=\"cm\">constant quot {α : Sort u} (r : α → α → Prop) : Sort u</span>\n\n<span class=\"cm\">constant quot.mk {α : Sort u} (r : α → α → Prop) (a : α) : quot r</span>\n\n<span class=\"cm\">constant quot.lift {α : Sort u} {r : α → α → Prop} {β : Sort v} (f : α → β) :</span>\n<span class=\"cm\">  (∀ a b : α, r a b → eq (f a) (f b)) → quot r → β</span>\n\n<span class=\"cm\">constant quot.ind {α : Sort u} {r : α → α → Prop} {β : quot r → Prop} :</span>\n<span class=\"cm\">  (∀ a : α, β (quot.mk r a)) → ∀ q : quot r, β q</span>\n\n<span class=\"cm\">Also the reduction rule:</span>\n\n<span class=\"cm\">quot.lift f _ (quot.mk a) ~~&gt; f a</span>\n\n<span class=\"cm\">-/</span>\n<span class=\"n\">init_quotient</span>\n</code></pre></div>",
        "id": 219631221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607705892
    },
    {
        "content": "<p>Will <code>quot</code> still be magic in lean4?</p>",
        "id": 219631413,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607705995
    },
    {
        "content": "<p>Yes. <a href=\"https://github.com/leanprover/lean4/blob/3682e3b9938a3dd0b3c64ce72f7fd9f3fe5118fb/src/kernel/quot.cpp#L47\">https://github.com/leanprover/lean4/blob/3682e3b9938a3dd0b3c64ce72f7fd9f3fe5118fb/src/kernel/quot.cpp#L47</a></p>",
        "id": 219631819,
        "sender_full_name": "Chris B",
        "timestamp": 1607706158
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prelude</span>\n\n<span class=\"n\">init_quotient</span>\n</code></pre></div>\n<p>gives the rather tasty error message </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to initialize quot module, environment does not have 'eq' type\n</code></pre></div>\n<p>One could maybe redefine <code>eq</code> and prove false somehow?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prelude</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">false</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">equation compiler failed to create auxiliary declaration 'eq.equations._eqn_1'</span>\n<span class=\"cm\">nested exception message:</span>\n<span class=\"cm\">unknown declaration 'eq.refl'</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>kind of annoying. I'm not sure what the rules are in <code>prelude</code></p>",
        "id": 219632821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607706655
    },
    {
        "content": "<p>I wonder why it wanted to use the equation compiler</p>",
        "id": 219633123,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607706800
    },
    {
        "content": "<p>What if you  just make an inductive type like <code>eq</code> but empty</p>",
        "id": 219633161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607706826
    },
    {
        "content": "<p>Found this nice error message while trying that:</p>\n<p><a href=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/src/kernel/quotient/quotient.cpp#L63\">https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/src/kernel/quotient/quotient.cpp#L63</a></p>",
        "id": 219634490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607707459
    },
    {
        "content": "<p>Looks like it was meant to say \"unexpected\" not \"expected\"?</p>",
        "id": 219634521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607707469
    },
    {
        "content": "<p>nope, Lean is just onto you and your tricky ways</p>",
        "id": 219634689,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607707555
    },
    {
        "content": "<p>Actually <code>def Prop</code> breaks it</p>",
        "id": 219634810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607707609
    },
    {
        "content": "<p>It requires it to be <code>notation</code></p>",
        "id": 219634827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607707617
    },
    {
        "content": "<p>But yes, <code>check_eq_type</code> looks fairly robust</p>",
        "id": 219634878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607707646
    },
    {
        "content": "<p>Thanks for the clarification.   <a href=\"https://github.com/leanprover-community/lean/blob/ed6accfb611bbd28ef5b7e34361d2b58a366e2c9/src/frontends/lean/builtin_cmds.cpp\">So</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">static</span> <span class=\"n\">environment</span> <span class=\"n\">init_quotient_cmd</span><span class=\"o\">(</span><span class=\"n\">parser</span> <span class=\"bp\">&amp;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">return</span> <span class=\"n\">module</span><span class=\"o\">::</span><span class=\"n\">declare_quotient</span><span class=\"o\">(</span><span class=\"n\">p.env</span><span class=\"o\">())</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>or <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#quotients\">in other words</a> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">constant</span> <span class=\"n\">quot</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n<span class=\"kd\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 219639496,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607709578
    },
    {
        "content": "<p>The application was that I was trying to trace out the types involved in a couple of representations of the set <code>{0,1,2}</code>, and <code>quot</code> came up as a blank spot, but that's OK.  Here is the picture I came up with:<br>\n<a href=\"/user_uploads/3121/63uY_DylmIXQQz_AnoPPREdk/Screenshot-from-2020-12-11-15-32-05.png\">Screenshot-from-2020-12-11-15-32-05.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/63uY_DylmIXQQz_AnoPPREdk/Screenshot-from-2020-12-11-15-32-05.png\" title=\"Screenshot-from-2020-12-11-15-32-05.png\"><img src=\"/user_uploads/3121/63uY_DylmIXQQz_AnoPPREdk/Screenshot-from-2020-12-11-15-32-05.png\"></a></div>",
        "id": 219658413,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607718819
    },
    {
        "content": "<p>Lars, if you like dependency graphs about lean, you might find <a href=\"https://observablehq.com/@eric-wieser/lean-ga-imports\">https://observablehq.com/@eric-wieser/lean-ga-imports</a> interesting</p>",
        "id": 219659088,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607719149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> </p>\n<p>It also adds <code>quot.mk</code>, <code>quot.lift</code>, and <code>quot.ind</code>. They get assembled 'by hand' and then added to the environment without any checks as soon as the <code>eq</code> inductive has been admitted. If you print an export file from Lean 3, it will be a couple of name declarations, an <code>#IND</code> for eq, and then just <code>#QUOT</code> which tells the verifier to add the quotient stuff to the environment.</p>\n<p>This file has comments with lean annotations showing what's actually being put together.<br>\n<a href=\"https://github.com/ammkrn/nanoda_lib/blob/master/src/quot.rs\">https://github.com/ammkrn/nanoda_lib/blob/master/src/quot.rs</a></p>",
        "id": 219674656,
        "sender_full_name": "Chris B",
        "timestamp": 1607729395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> that's really great visualization, thanks.</p>",
        "id": 219675805,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607730381
    }
]