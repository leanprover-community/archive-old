[
    {
        "content": "<p>Hi,<br>\nI am trying to formalize a few things in graph theory, and for that I am introducing a helper inductive type of non-empty lists, like this :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">llist</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">llist</span> <span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">llist</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">llist</span>\n</pre></div>\n\n\n<p>Such lists have a first and last elements,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">first</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">V</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n<span class=\"n\">def</span> <span class=\"n\">last</span>  <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">V</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">last</span> <span class=\"n\">l</span>\n</pre></div>\n\n\n<p>and I define a <code>path</code> to be a <code>llist</code> with prescribed endpoints: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">path</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">first</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">last</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>So far so good, now I want to concatenate paths with compatible endpoints,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">concat</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n</pre></div>\n\n\n<p>just concatenating the lists of elements but without repeating the <code>y</code>. For the moment, the only way I manage to do it is to first define it on unconstrained llists, like this,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">concat&#39;</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"n\">l1</span> <span class=\"bp\">=</span> <span class=\"n\">first</span> <span class=\"n\">l2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"n\">l1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">last</span> <span class=\"n\">l2</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>inductively, and then use that to define <code>concat</code>. When I try to define <code>concat</code> directly by induction on p1.val, it fails because in the inductive step, x is still there while the tail of p1.val obviously doesn't start with x, so the induction hypothesis is not useful.</p>\n<p>Am I missing something? What is the right way to use induction for such dependent types?</p>",
        "id": 178468919,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1571402216
    },
    {
        "content": "<p>Hi! I'm guessing that you're doing induction by pattern-matching on the arguments (as in the tutorial here: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#pattern-matching\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#pattern-matching\">https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#pattern-matching</a>). When definining <code>concat</code>, <code>x</code> is fixed (because it's on the left of the colon), but it varies in the recursive call. So you can put it on the right with a Π-type.</p>",
        "id": 178469658,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1571402725
    },
    {
        "content": "<blockquote>\n<p>Hi! I'm guessing that you're doing induction by pattern-matching on the arguments</p>\n</blockquote>\n<p>I am doing it like this, which might be completely misguided:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">concat</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">p1</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">l1</span><span class=\"o\">,</span><span class=\"n\">hx</span><span class=\"o\">,</span><span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">l1</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">v</span> <span class=\"n\">l</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">p2</span> <span class=\"o\">},</span>\n    <span class=\"c1\">-- Now the state contains these, which are useless:</span>\n    <span class=\"c1\">-- hr : first l = x -&gt; last l = y -&gt; path x z</span>\n    <span class=\"c1\">-- hx : first (L v l) = x</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 178471555,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1571404043
    },
    {
        "content": "<p>don't use tactics for <code>def</code>s unless you know what you're doing</p>",
        "id": 178471867,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571404296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> Kenny's warning is for the following reason: tactics usually leave artifacts that are very annoying to handle later on.</p>",
        "id": 178472063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571404432
    },
    {
        "content": "<p>For proofs this doesn't matter, because of proof irrelevance</p>",
        "id": 178472115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571404445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> It might be helpful to show beginners how to actually do it right, instead of only telling them what not to do.</p>",
        "id": 178472142,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571404469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I am</p>",
        "id": 178472382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571404631
    },
    {
        "content": "<p>Yes an example would be very helpful, I tried to do it with pattern matching but wasn't able to get anywhere. Using tactics like this does feel wrong but it's the only way I managed to get a working definition :-(</p>",
        "id": 178472729,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1571404810
    },
    {
        "content": "<p>(I do get huge lambda terms when using <code>simp</code> later, is that what you mean by \"very annoying\"? because it is ...)</p>",
        "id": 178472821,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1571404880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> I think Tim suggests that you try something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">concat</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 178472863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571404901
    },
    {
        "content": "<p>But then... I'm not an expert pattern matcher</p>",
        "id": 178472886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571404921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> Slightly unrelated. Graph theory seems to be a tricky subject as a first project in Lean. You might get stuck and disappointed rather quickly. Nevertheless I would love to see more graph theory. Hence I suggest you write a bit more about what your goals are. People might be able to suggest a mathematically equivalent approach that makes lots of troubles vanish right away.</p>",
        "id": 178473243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571405150
    },
    {
        "content": "<p>It's something that took me a bit of time to adjust to. Two definitions can be mathematically equal/the same/indistinguishable. But they can behave quite differently in Lean...</p>",
        "id": 178473348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571405193
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">last_append&#39;</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"n\">L₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">h₁</span> <span class=\"bp\">=</span> <span class=\"n\">L₂</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">h₂</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"n\">L₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">L₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">last_cons</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append_ne_nil_of_ne_nil_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span>\n    <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">last_append&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">def</span> <span class=\"n\">llist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">llist</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">first</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">last</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">llist</span>\n\n<span class=\"n\">def</span> <span class=\"n\">path</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">first</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">concat</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">p1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">++</span> <span class=\"n\">p2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">::</span> <span class=\"n\">p2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">p1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">llist</span><span class=\"bp\">.</span><span class=\"n\">last</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">last_cons</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">last_append&#39;</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">p2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append_ne_nil_of_ne_nil_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons_ne_nil</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 178473793,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571405514
    },
    {
        "content": "<p>Here is a pattern-matching based implementation, but unfortunately Lean doesn't recognize that it terminates:</p>\n<div class=\"codehilite\"><pre><span></span>def concat {V y z} : Π {x} (p1 : path V x y) (p2 : path V y z), path V x z\n| x ⟨P x&#39;, ⟨rfl, rfl⟩⟩ p2 := p2\n| x ⟨L x&#39; y&#39;, ⟨hx, hy⟩⟩ p2 :=\n  let ⟨p1&#39; , ⟨_, hy&#39;⟩⟩ := concat ⟨y&#39;, ⟨rfl, hy⟩⟩ p2\n  in ⟨L x&#39; p1&#39; , ⟨hx, hy&#39;⟩⟩\n</pre></div>\n\n\n<p>(I come from an Agda background, so to me this \"should just work\" and I can't quickly figure out why not :P)</p>",
        "id": 178473948,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1571405638
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 178474111,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571405738
    },
    {
        "content": "<blockquote>\n<p>what are <code>P</code> and <code>L</code>?</p>\n</blockquote>\n<p><code>P</code> and <code>L</code> are the constructors of my non-empty-list type (<code>P</code> for point and <code>L</code> for link in my head)</p>",
        "id": 178474266,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1571405836
    },
    {
        "content": "<p>I tried a few approaches for the non-empty-list type:</p>\n<ul>\n<li>the explicit inductive type</li>\n<li><code>{ l list V // l \\neq [] }</code></li>\n<li><code>V \\times list V</code><br>\nand also for the concatenation, I thought a bit about just concatenating without looking for compatibility, just dropping a vertex and trusting that it will never be used outside the compatible case, kind of like setting <code>1/0=0</code>, but then all the lemmas that I want to have, like <code>last (concat l1 l2) = last l2</code>, become conditional ...</li>\n</ul>",
        "id": 178474636,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1571406129
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">llist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">llist</span> <span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">llist</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">llist</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">llist</span>\n\n<span class=\"n\">def</span> <span class=\"n\">first</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n<span class=\"n\">def</span> <span class=\"n\">last</span>  <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">last</span> <span class=\"n\">l</span>\n\n<span class=\"n\">def</span> <span class=\"n\">path</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">first</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">last</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">concat_aux</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p11</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">first</span> <span class=\"n\">p11</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">last</span> <span class=\"n\">p11</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span> <span class=\"n\">p2</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y&#39;</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">p1&#39;</span> <span class=\"o\">,</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">hy&#39;</span><span class=\"bp\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">concat_aux</span> <span class=\"n\">y&#39;</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"n\">p2</span>\n  <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">L</span> <span class=\"n\">x&#39;</span> <span class=\"n\">p1&#39;</span> <span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy&#39;</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">concat</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"n\">concat_aux</span> <span class=\"n\">p1</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p1</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p2</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">llist</span>\n</pre></div>",
        "id": 178474655,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571406158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Tim Baanen</span> you need an auxiliary def</p>",
        "id": 178474663,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571406171
    },
    {
        "content": "<p>for recursing in a subtype</p>",
        "id": 178474673,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571406177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> my approach above is <code>\\a \\times list \\a</code></p>",
        "id": 178474701,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571406210
    },
    {
        "content": "<blockquote>\n<p>you need an auxiliary def</p>\n</blockquote>\n<p>So what would be recommended, having an auxiliary def or using something else than a subtype?</p>",
        "id": 178476599,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1571407379
    },
    {
        "content": "<p>using library functions like I did :P</p>",
        "id": 178476755,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571407465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>By auxiliary def do you mean one on the underlying type or something else? EDIT: ah, like <code>concat_aux</code>.</p>",
        "id": 178481910,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1571410750
    },
    {
        "content": "<p>Hi again, and thanks for all your replies. I'm afraid I am still confused about a few things ... So I have <code>llist</code> which is a non-empty list, <code>path</code> which is a <code>llist</code> with prescribed endpoints, I knew how to concatenate <code>llist</code>s, I learned how to concatenate <code>path</code>s and now I want to verify that the <code>llist</code> part coincides. Here is where I am:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">llist</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">llist</span> <span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">llist</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">llist</span>\n<span class=\"kn\">open</span> <span class=\"n\">llist</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">first</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">V</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">last</span>  <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">V</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">last</span> <span class=\"n\">l</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">concat_llist</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">first</span> <span class=\"n\">l₂</span><span class=\"o\">),</span> <span class=\"n\">llist</span> <span class=\"n\">V</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">v</span><span class=\"o\">)</span>   <span class=\"n\">l₂</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">l₂</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">l₂</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">L</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">concat_llist</span> <span class=\"n\">l</span> <span class=\"n\">l₂</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">path</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">first</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">last</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">concat_aux</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">first</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">last</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p&#39;</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">v</span><span class=\"o\">)</span>   <span class=\"n\">h</span> <span class=\"n\">p&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩⟩</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">p&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">concat_aux</span> <span class=\"n\">l</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"n\">p&#39;</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">L</span> <span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">concat_aux</span> <span class=\"n\">p1</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p1</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p2</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">toto&#39;</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">first</span> <span class=\"n\">l₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">concat_aux</span> <span class=\"n\">l</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"n\">h1</span><span class=\"bp\">⟩</span> <span class=\"n\">l₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">concat_llist</span> <span class=\"n\">l</span> <span class=\"n\">l₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h2</span>\n    <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">v</span> <span class=\"n\">l</span> <span class=\"n\">hr</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hr</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">toto</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"n\">l₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">first</span> <span class=\"n\">l₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">concat_llist</span> <span class=\"n\">l₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">l₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span>\n    <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">tmp</span> <span class=\"o\">:=</span> <span class=\"n\">toto&#39;</span> <span class=\"n\">l₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>In the last line, <code>tmp</code> and the goal look identical to me, and yet the tactic fails. What am I doing wrong?</p>",
        "id": 178567040,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1571525928
    },
    {
        "content": "<p>My guess would be that the <code>h</code> parameters (which are hidden) do not match, but I thought that for <code>Prop</code> this did not matter?</p>",
        "id": 178567106,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1571526021
    },
    {
        "content": "<p>if you change <code>assumption</code> to <code>convert tmp</code> then you can see what's wrong</p>",
        "id": 178568346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571528751
    },
    {
        "content": "<p>also since you never used <code>h</code> in <code>concat_llist</code> you shouldn't include it as an input</p>",
        "id": 178568393,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571528800
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">llist</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">llist</span> <span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">llist</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">llist</span>\n<span class=\"kn\">open</span> <span class=\"n\">llist</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">first</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">V</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">last</span>  <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">V</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">last</span> <span class=\"n\">l</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">concat_llist</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">llist</span> <span class=\"n\">V</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">v</span><span class=\"o\">)</span>   <span class=\"n\">l₂</span> <span class=\"o\">:=</span> <span class=\"n\">l₂</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span> <span class=\"n\">L</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">concat_llist</span> <span class=\"n\">l</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">path</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">first</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">last</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">concat_aux</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">first</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">last</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p&#39;</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">v</span><span class=\"o\">)</span>   <span class=\"n\">h</span> <span class=\"n\">p&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩⟩</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">p&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">concat_aux</span> <span class=\"n\">l</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"n\">p&#39;</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">L</span> <span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">concat_aux</span> <span class=\"n\">p1</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p1</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p2</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">toto&#39;</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">first</span> <span class=\"n\">l₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">concat_aux</span> <span class=\"n\">l</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"n\">h1</span><span class=\"bp\">⟩</span> <span class=\"n\">l₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">concat_llist</span> <span class=\"n\">l</span> <span class=\"n\">l₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n    <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">v</span> <span class=\"n\">l</span> <span class=\"n\">hr</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hr</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">toto</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"n\">l₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">first</span> <span class=\"n\">l₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">concat_llist</span> <span class=\"n\">l₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">l₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n    <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">tmp</span> <span class=\"o\">:=</span> <span class=\"n\">toto&#39;</span> <span class=\"n\">l₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">tmp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">l₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 178568448,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571528915
    },
    {
        "content": "<p>Thanks for the hint, I will look at it when I have access to Lean</p>",
        "id": 178580705,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1571554009
    },
    {
        "content": "<p>The reason I have h in concat is that I want the simplification lemma that <code>first (concat l1 l2) = first l1</code> which is wrong without it and I fear having to sprinkle a similar assumption around later. Is your advise to do the opposite then?</p>",
        "id": 178580834,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1571554235
    },
    {
        "content": "<p>you can still have that simplification lemma, you just put the side condition in the lemma</p>",
        "id": 178580886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571554325
    },
    {
        "content": "<p>I don't think <code>concat</code> should be marked <code>@[simp]</code></p>",
        "id": 178580902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571554407
    },
    {
        "content": "<p>I realize that I can put the condition in the lemma, but will simp know to look for it hidden in the current state as often as it would just use the lemma without the additional assumption in it?</p>",
        "id": 178583797,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1571559972
    }
]