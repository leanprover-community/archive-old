[
    {
        "content": "<p>On branch finsupp_lattice PR <a href=\"https://github.com/leanprover-community/mathlib/issues/3335\">#3335</a>, I keep getting catastrophic failure where everything seems to be importing twice, such as this:</p>\n<div class=\"codehilite\"><pre><span></span><code>excessive memory consumption detected at &#39;replace&#39; (potential solution: increase memory consumption threshold)```\n</code></pre></div>",
        "id": 204615073,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595374242
    },
    {
        "content": "<p>I think it's a problem with the oleans, but it persists every time I redownload, and none of the leanproject commands I've tried has helped me.</p>",
        "id": 204615190,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595374357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 204617173,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595376041
    },
    {
        "content": "<p>Can you try <code>leanproject -f up</code>?</p>",
        "id": 204617226,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595376109
    },
    {
        "content": "<p>That should successfully retrieve something from <a href=\"https://oleanstorage.azureedge.net/mathlib/41dfff7c8c553ef9ab92b1f4b3c674030ee440f5.tar.xz\">https://oleanstorage.azureedge.net/mathlib/41dfff7c8c553ef9ab92b1f4b3c674030ee440f5.tar.xz</a></p>",
        "id": 204617278,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595376128
    },
    {
        "content": "<p>After which</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">$</span> <span class=\"n\">leanproject</span> <span class=\"n\">build</span>\n<span class=\"n\">Building</span> <span class=\"n\">project</span> <span class=\"n\">mathlib</span>\n<span class=\"n\">configuring</span> <span class=\"n\">mathlib</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">&gt;</span> <span class=\"n\">lean</span> <span class=\"c1\">--make src</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">scott</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finsupp</span><span class=\"bp\">/</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">78</span><span class=\"o\">:</span><span class=\"mi\">28</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">support_inf_of_non_disjoint</span> <span class=\"n\">zero_le</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">zero_le</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">canonically_linear_ordered_add_monoid</span> <span class=\"n\">γ</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">γ</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">semilattice_inf</span><span class=\"bp\">.</span><span class=\"n\">inf</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"err\">∩</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">support</span>\n<span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"n\">exited</span> <span class=\"k\">with</span> <span class=\"n\">status</span> <span class=\"mi\">1</span>\n<span class=\"n\">Command</span> <span class=\"err\">&#39;</span><span class=\"o\">[</span><span class=\"err\">&#39;</span><span class=\"n\">leanpkg&#39;</span><span class=\"o\">,</span> <span class=\"err\">&#39;</span><span class=\"n\">build&#39;</span><span class=\"o\">]</span><span class=\"err\">&#39;</span> <span class=\"n\">returned</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">zero</span> <span class=\"kn\">exit</span> <span class=\"n\">status</span> <span class=\"mi\">1</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 204617319,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595376173
    },
    {
        "content": "<p>should just take a few seconds.</p>",
        "id": 204617323,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595376180
    },
    {
        "content": "<p>Looks all good, thanks!</p>",
        "id": 204617409,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595376245
    }
]