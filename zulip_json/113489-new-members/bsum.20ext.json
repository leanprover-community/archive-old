[
    {
        "content": "<p>Dear All,</p>\n<p>in the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> below, I would like to get Lean to tell me that the sums are equal if their terms are equal.  However, if I use <code>congr</code>,  Lean seems to forget that the indexing set is restricted to <code>c.support</code>, which in my actual situation is important, since only the <code>i : ι</code> satisfying <code>i ∈ c.support</code> are equal.</p>\n<p>Is there an <code>ext</code> for the sum that will remember this and produce a goal such as <code>∀ i : ι, i ∈ c.support → l i = 1</code>.</p>\n<p>Thank you!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_eq_sum</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">c.support</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">c.support</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228054964,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614428347
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_congr\">docs#finset.sum_congr</a>  ?</p>",
        "id": 228055079,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1614428462
    },
    {
        "content": "<p>I did not test it, but it looks like it's what you need</p>",
        "id": 228055111,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1614428491
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_eq_sum</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">c.support</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">c.support</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset.sum_congr</span> <span class=\"n\">rfl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ ∀ (x : ι), x ∈ c.support → l x = 1</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228055209,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1614428613
    },
    {
        "content": "<p>Precisely, thanks!  It also created a side goal asking me to prove that the two supports are equal!</p>\n<p>Great!</p>",
        "id": 228055210,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614428621
    },
    {
        "content": "<p>I like the underscores!</p>",
        "id": 228055269,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614428669
    },
    {
        "content": "<p>There's in fact a tactic for this!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_eq_sum</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">c.support</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">c.support</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">c.support</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">apply_congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228059848,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614434076
    },
    {
        "content": "<p>Ah, thanks!  I can rarely get <code>conv</code> to work, since it either skips too much or gets stuck and does not move forward.  In particular, I did not know the <code>apply_congr</code> command: inside <code>conv</code> I think that I only know <code>congr</code>, <code>skip</code> and <code>rw</code></p>",
        "id": 228060068,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614434329
    },
    {
        "content": "<p>(sorry, my zulip didn't refresh for some reason)</p>",
        "id": 228060095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614434373
    }
]