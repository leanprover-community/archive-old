[
    {
        "content": "<p>Hello,<br>\nHas anyone here worked through the exercises in the Software Foundations Book, in Lean 3 or 4? If not, would anyone like to collaborate on finding solutions? I am using Lean 4.</p>",
        "id": 230856597,
        "sender_full_name": "Phiroc",
        "timestamp": 1616071797
    },
    {
        "content": "<p>When I was learning Lean I went through most of the first SF book and ported solutions to Lean 3 (and didn't keep them); I can certainly say that it taught me a lot (I didn't know anything about theorem provers at the time and SF seemed to be a good teaching resource). I am not going to go through this stuff again myself but I would definitely say that if there are beginners out there who want to read a good teaching textbook written in a language close to Lean then this might be a great opportunity.</p>",
        "id": 230859329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616072892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282193\">@Phiroc</span> my attention span is always scattered, but if you're going through that in some public place (e.g. GitHub) I'd be interested in following the progress and perhaps contributing in ad hoc ways, I've had software foundations somewhere on my list to read. The majority of my interest in Lean is to get closer to some math moreso than formal validation more generally, so I don't know that I'll be super helpful on an ongoing basis but yeah definitely keen to learn.</p>",
        "id": 230895212,
        "sender_full_name": "Julian Berman",
        "timestamp": 1616084671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/Software.20Foundations/near/230895212\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"282193\">Phiroc</span> my attention span is always scattered, but if you're going through that in some public place (e.g. GitHub) I'd be interested in following the progress and perhaps contributing in ad hoc ways, I've had software foundations somewhere on my list to read. The majority of my interest in Lean is to get closer to some math moreso than formal validation more generally, so I don't know that I'll be super helpful on an ongoing basis but yeah definitely keen to learn.</p>\n</blockquote>\n<p>Hi Julian,  I've  just created a private Software-Foundations-In-Lean project on GitHub. Once I have made sufficient progress, I'll make it public so that anyone who wants to can contribute.</p>",
        "id": 230924627,
        "sender_full_name": "Phiroc",
        "timestamp": 1616095935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282193\">Phiroc</span> <a href=\"#narrow/stream/113489-new-members/topic/Software.20Foundations/near/230924627\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/Software.20Foundations/near/230895212\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"282193\">Phiroc</span> my attention span is always scattered, but if you're going through that in some public place (e.g. GitHub) I'd be interested in following the progress and perhaps contributing in ad hoc ways, I've had software foundations somewhere on my list to read. The majority of my interest in Lean is to get closer to some math moreso than formal validation more generally, so I don't know that I'll be super helpful on an ongoing basis but yeah definitely keen to learn.</p>\n</blockquote>\n<p>Hi Julian,  I've  just created a private Software-Foundations-In-Lean project on GitHub. Once I have made sufficient progress, I'll make it public so that anyone who wants to can contribute.</p>\n</blockquote>\n<p>By the way, the authors of SF ask that the solutions to exercises are not made public, and although SF is written in Coq, Lean is similar enough that it might be transferrable. I don't think they would mind if the repo contains only the exercises.</p>",
        "id": 230926069,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1616096561
    },
    {
        "content": "<p>Why do they ask for the solutions not to be made public? Seems a bit weird for self-learning</p>",
        "id": 230940942,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616103093
    },
    {
        "content": "<p>Presumably because it makes it hard to use the problems as homework assignments for students.</p>",
        "id": 230945124,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616105262
    },
    {
        "content": "<p>I’ll therefore translate the code examples and implementations to Lean 4, and leave out the answers, or answer attempts, to the exercises .  It’s a pity though, because I am having a hard time finding answers to some exercises, in idiomatic Lean.</p>",
        "id": 230984330,
        "sender_full_name": "Phiroc",
        "timestamp": 1616138164
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 230991197,
        "sender_full_name": "Iocta",
        "timestamp": 1616143605
    },
    {
        "content": "<p>I guess there's nothing wrong with asking for idiomatic lean ways of doing specific questions here, just not writing an easy to find least of solutions to every exercise would be bad for instructors of classes</p>",
        "id": 231095373,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1616191117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282193\">@Phiroc</span> I've got a private repo going for this on Lean 3. I'm in the middle of the Inductive Propositions chapter from book 1 at the moment. Would be very happy to share ideas / join your project. This would be a good opportunity for me to learn Lean 4.</p>",
        "id": 241537148,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1622814536
    },
    {
        "content": "<p>I found the inductive props chapter really enlightening.</p>",
        "id": 241539860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622815584
    },
    {
        "content": "<p>On this point, is <code>set!</code> the Lean 3 equivalent of Coq's <code>remember</code> tactic? I had difficulty translating <code>star_app</code> (see the <a href=\"https://softwarefoundations.cis.upenn.edu/lf-current/IndProp.html#lab234\">relevant section of Software Foundations</a>) and tried different tactics (including <code>generalize</code>, <code>generalize'</code> and <code>induction'</code>) until this worked.</p>\n<p>Here's what I wrote. Do let me know if there's a more idiomatic way to write the proof!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">reg_exp</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">EmptySet</span>  <span class=\"o\">:</span> <span class=\"n\">reg_exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">EmptyStr</span>  <span class=\"o\">:</span> <span class=\"n\">reg_exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Char</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">reg_exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">reg_exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reg_exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Union</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">reg_exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reg_exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Star</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">reg_exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reg_exp</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">reg_exp</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">exp_match</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">reg_exp</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">MEmpty</span> <span class=\"o\">:</span> <span class=\"n\">exp_match</span> <span class=\"o\">[]</span> <span class=\"n\">EmptyStr</span>\n<span class=\"bp\">|</span> <span class=\"n\">MChar</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp_match</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Char</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">MApp</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">re₁</span> <span class=\"n\">s₂</span> <span class=\"n\">re₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">exp_match</span> <span class=\"n\">s₁</span> <span class=\"n\">re₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">exp_match</span> <span class=\"n\">s₂</span> <span class=\"n\">re₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exp_match</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"bp\">++</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">re₁</span> <span class=\"n\">re₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">MUnionL</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">re₁</span> <span class=\"n\">re₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">exp_match</span> <span class=\"n\">s₁</span> <span class=\"n\">re₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp_match</span> <span class=\"n\">s₁</span> <span class=\"o\">(</span><span class=\"n\">Union</span> <span class=\"n\">re₁</span> <span class=\"n\">re₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">MUnionR</span> <span class=\"o\">(</span><span class=\"n\">re₁</span> <span class=\"n\">s₂</span> <span class=\"n\">re₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">exp_match</span> <span class=\"n\">s₂</span> <span class=\"n\">re₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp_match</span> <span class=\"n\">s₂</span> <span class=\"o\">(</span><span class=\"n\">Union</span> <span class=\"n\">re₁</span> <span class=\"n\">re₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">MStar0</span> <span class=\"o\">(</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp_match</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">Star</span> <span class=\"n\">re</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">MStarApp</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">exp_match</span> <span class=\"n\">s₁</span> <span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">exp_match</span> <span class=\"n\">s₂</span> <span class=\"o\">(</span><span class=\"n\">Star</span> <span class=\"n\">re</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">exp_match</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"bp\">++</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Star</span> <span class=\"n\">re</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">=~</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"n\">exp_match</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">exp_match</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">star_app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">reg_exp</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">s1</span> <span class=\"bp\">=~</span> <span class=\"n\">Star</span> <span class=\"n\">re</span> <span class=\"bp\">→</span> <span class=\"n\">s2</span> <span class=\"bp\">=~</span> <span class=\"n\">Star</span> <span class=\"n\">re</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">++</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"bp\">=~</span> <span class=\"n\">Star</span> <span class=\"n\">re</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">T</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"n\">re</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span><span class=\"bp\">!</span> <span class=\"n\">re'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Star</span> <span class=\"n\">re</span><span class=\"o\">)</span>  <span class=\"k\">with</span> <span class=\"n\">hres</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h1</span> <span class=\"n\">generalizing</span> <span class=\"n\">s2</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">MEmpty</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">MChar</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hres</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">MApp</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hres</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">MUnionL</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hres</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">MUnionR</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hres</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">MStar0</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">MStarApp</span> <span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"n\">s2'</span> <span class=\"n\">re</span> <span class=\"n\">h1</span> <span class=\"n\">h12</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.append_assoc</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">MStarApp</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ih2</span> <span class=\"n\">hres</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 241545747,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1622817860
    }
]