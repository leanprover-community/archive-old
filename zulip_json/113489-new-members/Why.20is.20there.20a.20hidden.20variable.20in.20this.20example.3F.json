[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">InfosetedGame</span> <span class=\"o\">(</span><span class=\"n\">players</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">infoset_count</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">infoset_sizes</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">infoset_count</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Terminal</span> <span class=\"o\">(</span><span class=\"n\">player</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">players</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">reward</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">InfosetedGame</span>\n\n<span class=\"n\">def</span> <span class=\"n\">utility</span> <span class=\"o\">(</span><span class=\"n\">infoset_count</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">infoset_sizes</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">infoset_count</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">InfosetedGame</span> <span class=\"o\">[</span><span class=\"s2\">&quot;One&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;Two&quot;</span><span class=\"o\">]</span> <span class=\"n\">infoset_sizes</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">InfosetedGame</span><span class=\"bp\">.</span><span class=\"n\">Terminal</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>equation type mismatch, term\n  infoset_sizes\nhas type\n  fin infoset_count → ℕ\nbut is expected to have type\n  ℚ\n</pre></div>\n\n\n<p>And furthermore if I replace <code>a</code> with <code>by {}</code>...</p>\n<div class=\"codehilite\"><pre><span></span>Tactic State\n1 goal\ninfoset_count : ℕ,\ninfoset_sizes : fin infoset_count → ℕ,\nutility : InfosetedGame [&quot;One&quot;, &quot;Two&quot;] infoset_sizes → ℚ,\nb : {i // i ∈ [&quot;One&quot;, &quot;Two&quot;]},\nc : ℚ\n⊢ ℚ\n</pre></div>\n\n\n<p>For some reason <code>a</code> is not even there. This definitely seems like some kind of compiler bug to me.</p>",
        "id": 179209828,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572250606
    },
    {
        "content": "<p>I didn't look carefully at this question but yes, there is an <code>a</code> bug in 3.4.2. Try changing the name of your variable?</p>",
        "id": 179218908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572258918
    },
    {
        "content": "<p>It makes no difference, either in the error message for the first example or the goal state for the second.</p>",
        "id": 179224810,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572264674
    },
    {
        "content": "<p>In this code <code>a</code> has to be equal to <code>infoset_sizes</code> in order for <code>Terminal a b c</code> to have the right type. The equation compiler seems to have replaced <code>a</code> with <code>infoset_sizes</code> for this reason.</p>",
        "id": 179225683,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572265569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <br>\nYeah, but that is besides the point as that binding should not even be there in the first place. <code>Terminal</code> should only have two fields as far as I can see.</p>",
        "id": 179227082,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572266914
    },
    {
        "content": "<p>It has three explicit args; the first is <code>infoset_sizes</code></p>",
        "id": 179227439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572267271
    },
    {
        "content": "<p>parameters are arguments to the constructors too</p>",
        "id": 179227465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572267296
    },
    {
        "content": "<p>you should just leave the first argument as <code>_</code> since it is forced</p>",
        "id": 179227591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572267412
    },
    {
        "content": "<p>I think the rule is that parameters which otherwise wouldn't be determined are explicit in the constructor, though in practice I never find it easy to predict what Lean will do</p>",
        "id": 179228311,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572267984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <br>\nWhy is it forced?</p>",
        "id": 179228474,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572268097
    },
    {
        "content": "<p>Because you are doing a recursive definition over <code>InfosetedGame</code>, so that argument is forced to the value it is given in the parameter in the def itself (the <code>infoset_sizes</code> argument to the function). Nevertheless, the constructor appears in the pattern with all its arguments, including the parameters; you are not allowed to put anything else in that field</p>",
        "id": 179228627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572268228
    },
    {
        "content": "<p>If you moved <code>infoset_sizes</code> right of the colon, you would have a little more flexibility, although you can't pattern match on it in any interesting way because it's a function type, not an inductive</p>",
        "id": 179228699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572268295
    },
    {
        "content": "<blockquote>\n<p>Because you are doing a recursive definition over InfosetedGame</p>\n</blockquote>\n<p>I do not really understand this. The particular example I am showing here as <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20insert.20a.20proposition.20as.20a.20field.20of.20an.20inductive.20type.3F\" title=\"#narrow/stream/113489-new-members/topic/How.20to.20insert.20a.20proposition.20as.20a.20field.20of.20an.20inductive.20type.3F\">(opposed to)</a> is not recursive as far as I can see.</p>\n<blockquote>\n<p>so that argument is forced to the value it is given in the parameter in the def itself (the infoset_sizes argument to the function).</p>\n</blockquote>\n<p>Sorry, I can't follow this. What is what here exactly?</p>",
        "id": 179229268,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572268690
    },
    {
        "content": "<p>I mean \"recursive\" only in the sense that you are using the recursor, i.e. cases on an inductive type</p>",
        "id": 179230290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572269399
    },
    {
        "content": "<p>The definition has to look like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">utility</span> <span class=\"o\">(</span><span class=\"n\">infoset_count</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">infoset_sizes</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">infoset_count</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">InfosetedGame</span> <span class=\"o\">[</span><span class=\"s2\">&quot;One&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;Two&quot;</span><span class=\"o\">]</span> <span class=\"n\">infoset_sizes</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">InfosetedGame</span><span class=\"bp\">.</span><span class=\"n\">Terminal</span> <span class=\"n\">infoset_sizes</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 179230420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572269466
    },
    {
        "content": "<p>You can leave it implicit if you like (I usually always do this for forced arguments):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">utility</span> <span class=\"o\">(</span><span class=\"n\">infoset_count</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">infoset_sizes</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">infoset_count</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">InfosetedGame</span> <span class=\"o\">[</span><span class=\"s2\">&quot;One&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;Two&quot;</span><span class=\"o\">]</span> <span class=\"n\">infoset_sizes</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">InfosetedGame</span><span class=\"bp\">.</span><span class=\"n\">Terminal</span> <span class=\"bp\">_</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 179230490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572269514
    },
    {
        "content": "<p>but anything like this is not valid:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">utility</span> <span class=\"o\">(</span><span class=\"n\">infoset_count</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">infoset_sizes</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">infoset_count</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">InfosetedGame</span> <span class=\"o\">[</span><span class=\"s2\">&quot;One&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;Two&quot;</span><span class=\"o\">]</span> <span class=\"n\">infoset_sizes</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">InfosetedGame</span><span class=\"bp\">.</span><span class=\"n\">Terminal</span> <span class=\"o\">(</span><span class=\"err\">\\</span><span class=\"n\">lam</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 179230559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572269545
    },
    {
        "content": "<p>Technically this is an \"inaccessible pattern\". Back in the day you had to write these as <code>._</code> (or <code>.(infoset_sizes)</code>) to indicate that they aren't being matched by the equation compiler, but it later learned how to infer these annotations so they are basically never needed anymore</p>",
        "id": 179230649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572269620
    },
    {
        "content": "<p>Ok, thanks.</p>",
        "id": 179236438,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572273417
    }
]