[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">free_magma</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">free_magma</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">free_magma</span> <span class=\"bp\">→</span> <span class=\"n\">free_magma</span> <span class=\"bp\">→</span> <span class=\"n\">free_magma</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">free_magma</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">free_magma</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pattern</span><span class=\"o\">]</span> <span class=\"n\">free_magma</span><span class=\"bp\">.</span><span class=\"n\">mul</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">free_magma</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">free_magma</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">()</span> <span class=\"c1\">-- invalid pattern, must be an application, constant, variable, type ascription, aliasing pattern or inaccessible term</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 198069890,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589896958
    },
    {
        "content": "<p>how do I make lean recognize <code>x * y</code> as a pattern?</p>",
        "id": 198069930,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589896969
    },
    {
        "content": "<p>I never really understood why <code>(n + 1)</code> works with nat.</p>",
        "id": 198070053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589897026
    },
    {
        "content": "<p>I thought the way you are doing it was supposed to work.</p>",
        "id": 198070264,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589897097
    },
    {
        "content": "<p>I think <code>add</code> is marked as the pattern for <code>nat</code>, but it's <code>succ</code> which is being picked up. Have I misremembered? I could never see the logic.</p>",
        "id": 198070526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589897199
    },
    {
        "content": "<p>Oh hmm, now I'm not sure.</p>",
        "id": 198070788,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589897291
    },
    {
        "content": "<p>The algorithm must be something like: if Lean wants a pattern but it sees an application of something that is not a constructor, unfold the definition of that thing. Then <code>pattern</code> must control this unfolding somehow but I don't know exactly how that works.</p>",
        "id": 198070948,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589897376
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pattern</span><span class=\"o\">]</span> <span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span>\n</code></pre></div>\n\n\n<p>works</p>",
        "id": 198071010,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589897400
    },
    {
        "content": "<p>but wouldn't this make every other multiplication a pattern?</p>",
        "id": 198071181,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589897456
    },
    {
        "content": "<p>is this a good attribute?</p>",
        "id": 198071193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589897461
    },
    {
        "content": "<p>I'm not at lean right now. Is <code>has_add.add</code> a pattern? You can check with #print</p>",
        "id": 198071374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589897530
    },
    {
        "content": "<p>yes it is</p>",
        "id": 198071481,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589897569
    },
    {
        "content": "<p>Well this attribute is clearly not causing too much harm</p>",
        "id": 198071554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589897603
    },
    {
        "content": "<p>Why not make a new branch of mathlib, add the attribute to <code>*</code> in logic.basic, push and see if CI compiles mathlib</p>",
        "id": 198071771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589897698
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/core.lean#L400\">https://github.com/leanprover-community/lean/blob/master/library/init/core.lean#L400</a></p>",
        "id": 198071810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589897715
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pattern</span><span class=\"o\">]</span> <span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">bit0</span> <span class=\"n\">bit1</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">has_neg</span><span class=\"bp\">.</span><span class=\"n\">neg</span>\n</code></pre></div>",
        "id": 198071839,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589897726
    },
    {
        "content": "<p>I would guess nothing should change, since it should be impossible to use <code>*</code> in a pattern currently and therefore there must not be any such usages.</p>",
        "id": 198072082,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589897833
    }
]