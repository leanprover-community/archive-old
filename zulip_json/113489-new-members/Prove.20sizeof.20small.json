[
    {
        "content": "<p>I feel like the theorem below is \"obvious\" since a subinterval should have smaller <code>sizeof</code>, but how to prove?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">excess_left_parens</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"c1\">-- excess_left_parens ['(','(',')'] = 1</span>\n <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"sc\">'('</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">excess_left_parens</span> <span class=\"n\">x</span> <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"sc\">')'</span> <span class=\"k\">then</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">excess_left_parens</span> <span class=\"n\">x</span> <span class=\"k\">else</span>\n    <span class=\"n\">excess_left_parens</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">last_balanced_suffix</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">char</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">last_balanced_suffix</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">excess_left_parens</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"k\">then</span>\n        <span class=\"k\">if</span> <span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"sc\">'('</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">[]</span>\n    <span class=\"k\">else</span> <span class=\"o\">[]</span>\n<span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">maybe</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"bp\">≤</span> <span class=\"n\">x.sizeof</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 215216116,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1604185617
    },
    {
        "content": "<p>You probably shouldn't be proving any theorems directly about <code>sizeof</code>, it's mostly an implementation detail</p>",
        "id": 215217113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604187494
    },
    {
        "content": "<p>why do you want this theorem?</p>",
        "id": 215217117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604187521
    },
    {
        "content": "<p><code>(append [c] x)</code> could be written just <code>c::x</code></p>",
        "id": 215217180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604187612
    },
    {
        "content": "<p>and it appears that you can prove that it is a suffix of the original list, <code>list_balanced_suffix x &lt;:+ x</code></p>",
        "id": 215217193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604187676
    },
    {
        "content": "<p>from which it follows that <code>(list_balanced_suffix x).length &lt;= x.length</code>, which should be used in preference to a theorem about <code>sizeof</code></p>",
        "id": 215217239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604187739
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  it seemed that the unproved goal in another definition required proving something about <code>sizeof</code> but I'll see what I can do with your hints</p>",
        "id": 215217428,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1604188098
    },
    {
        "content": "<p>Usually <code>sizeof</code> comes up when you want to write a recursive function and the automatic well founded recursion proof technique fails. In that case you should just replace the well founded metric with the right one for the definition, in this case something involving <code>list.length</code></p>",
        "id": 215217452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604188174
    },
    {
        "content": "<p>Now how do we tell Lean to use <code>length</code> instead of <code>sizeof</code>?</p>",
        "id": 215219634,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1604192356
    },
    {
        "content": "<p>Can you share the other goal in the form of a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? <a href=\"https://leanprover-community.github.io/extras/well_founded_recursion.html\">This page on well-founded recursion</a> on the community website might be useful.</p>",
        "id": 215219798,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604192621
    },
    {
        "content": "<p>Is this an equivalent defn?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">excess_left_parens</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"c1\">-- excess_left_parens ['(','(',')'] = 1</span>\n <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"sc\">'('</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">excess_left_parens</span> <span class=\"n\">x</span> <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"sc\">')'</span> <span class=\"k\">then</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">excess_left_parens</span> <span class=\"n\">x</span> <span class=\"k\">else</span>\n    <span class=\"n\">excess_left_parens</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">last_balanced_suffix</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">char</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"sc\">'('</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"bp\">∧</span> <span class=\"n\">excess_left_parens</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"sc\">'('</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"n\">_</span> <span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">last_balanced_suffix</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 215220040,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604193022
    },
    {
        "content": "<p>Oh that's too bad, that doesn't work because the eq compiler seems to freak out at the decidable equality of char</p>",
        "id": 215220121,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604193216
    },
    {
        "content": "<p>OK, this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">excess_left_parens</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"c1\">-- excess_left_parens ['(','(',')'] = 1</span>\n <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">excess_left_parens</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"sc\">'('</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"sc\">')'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">last_balanced_suffix</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">char</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[])</span>\n  <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"sc\">'('</span> <span class=\"bp\">∧</span> <span class=\"n\">excess_left_parens</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"sc\">'('</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">[])</span>\n  <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 215220236,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604193429
    },
    {
        "content": "<p>Here's a minimal example that doesn't work (although it is so minimal that it no longer tries to do anything useful).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">last_balanced_suffix</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">char</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">truth_value</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span>   <span class=\"o\">[]</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span>   <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">truth_value</span> <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 215220244,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1604193452
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">excess_left_parens</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"c1\">-- excess_left_parens ['(','(',')'] = 1</span>\n <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">excess_left_parens</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"sc\">'('</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"sc\">')'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">last_balanced_suffix</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">char</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[])</span>\n  <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"sc\">'('</span> <span class=\"bp\">∧</span> <span class=\"n\">excess_left_parens</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"sc\">'('</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">[])</span>\n  <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">1</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">excess_left_parens</span> <span class=\"o\">[</span><span class=\"sc\">'('</span><span class=\"o\">,</span><span class=\"sc\">'('</span><span class=\"o\">,</span><span class=\"sc\">')'</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">['(', ')']</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">last_balanced_suffix</span> <span class=\"o\">[</span><span class=\"sc\">'('</span><span class=\"o\">,</span><span class=\"sc\">'('</span><span class=\"o\">,</span><span class=\"sc\">')'</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 215220286,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604193489
    },
    {
        "content": "<p>Let's try slim_check</p>",
        "id": 215220368,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604193643
    },
    {
        "content": "<p>Yes <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> that has the desired behavior. The problem is when I then add say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">truth_value</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span>   <span class=\"o\">[]</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span>   <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">truth_value</span> <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 215220428,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1604193743
    },
    {
        "content": "<p>I'm not particularly good at solving those sorts of well-foundedness problems. Seems like your minimal example is a bit removed from what you're trying to do -- so maybe we can fix the actual issue? Otherwise, I'm not sure what to do about this failing example.</p>",
        "id": 215220614,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604194099
    },
    {
        "content": "<p>OK I'll make a minimal but still purposeful example...</p>",
        "id": 215220840,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1604194579
    },
    {
        "content": "<p>I managed to solve it, following the last bit of the well-foundedness tutorial I linked above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">excess_left_parens</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"c1\">-- excess_left_parens ['(','(',')'] = 1</span>\n <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">excess_left_parens</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"sc\">'('</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"sc\">')'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">last_balanced_suffix</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">char</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[])</span>\n  <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"sc\">'('</span> <span class=\"bp\">∧</span> <span class=\"n\">excess_left_parens</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"sc\">'('</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">[])</span>\n  <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">truth_value</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span>   <span class=\"o\">[]</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span>   <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">c'</span> <span class=\"n\">x'</span> <span class=\"n\">hx'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">last_balanced_suffix</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_lt_one</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">last_balanced_suffix</span><span class=\"o\">],</span> <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">hx'</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">lt_add_one</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">truth_value</span> <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- I copied this from the last part of the well-foundedness doc</span>\n  <span class=\"c1\">-- except that I replaced `card` with a type using `length`</span>\n  <span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">list.length</span> <span class=\"n\">x.1</span><span class=\"o\">)⟩]}</span>\n</code></pre></div>",
        "id": 215220855,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604194635
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">excess_left_parens</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"c1\">-- excess_left_parens ['(','(',')'] = 1</span>\n <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"sc\">'('</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">excess_left_parens</span> <span class=\"n\">x</span> <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"sc\">')'</span> <span class=\"k\">then</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">excess_left_parens</span> <span class=\"n\">x</span> <span class=\"k\">else</span>\n    <span class=\"n\">excess_left_parens</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">last_balanced_suffix</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">char</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">last_balanced_suffix</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">excess_left_parens</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"sc\">'('</span> <span class=\"k\">then</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"o\">[]</span>\n  <span class=\"k\">else</span> <span class=\"n\">last_balanced_suffix</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">last_balanced_suffix_is_suffix</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">last_balanced_suffix</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">list.nil_suffix</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">last_balanced_suffix</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">list.nil_suffix</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix_is_suffix</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">list.suffix_cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">truth_value</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"n\">nat.lt_succ_of_le</span> <span class=\"bp\">$</span> <span class=\"n\">list.length_le_of_infix</span> <span class=\"bp\">$</span>\n    <span class=\"n\">list.infix_of_suffix</span> <span class=\"bp\">$</span> <span class=\"n\">last_balanced_suffix_is_suffix</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">truth_value</span> <span class=\"o\">(</span><span class=\"n\">last_balanced_suffix</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">list.length</span><span class=\"o\">⟩]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 215220988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604194921
    },
    {
        "content": "<p>ah, brian beat me</p>",
        "id": 215221027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604194933
    },
    {
        "content": "<p>Ah, but your proof is much nicer.</p>",
        "id": 215221035,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604194957
    },
    {
        "content": "<p>Hey, it just occurred to me that we could improve the ergonomics of that <code>using_well_founded</code> bit using something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">using_well_founded</span> <span class=\"kd\">by</span> <span class=\"n\">wf</span> <span class=\"n\">on</span> <span class=\"n\">list.length</span>\n</code></pre></div>",
        "id": 215221232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604195366
    },
    {
        "content": "<p>There are a bunch of messy arguments in <code>using_well_founded</code> that we could paper over with a custom tactic parser</p>",
        "id": 215221279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604195417
    },
    {
        "content": "<p>For example <code>rel_tac</code> takes two arguments that I have never ever used because I only ever want to use <code>exact</code></p>",
        "id": 215221287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604195453
    },
    {
        "content": "<p>Ooh, that'd be great. Then we could change the error message in core Lean to mention <code>wf</code>.</p>",
        "id": 215221411,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604195669
    },
    {
        "content": "<p>Thanks a lot, I almost have my version working except for this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">measure_wf</span> <span class=\"n\">list.length</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">list.length</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">list</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 215221641,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1604196109
    },
    {
        "content": "<p>Try replacing <code>measure_wf list.length</code> with <code>measure_wf (λ x, list.length x.1)</code>.</p>",
        "id": 215221699,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604196186
    },
    {
        "content": "<p>Or do induction only on the first argument by using lambda for the second</p>",
        "id": 215222321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604197241
    },
    {
        "content": "<p>Case closed. <span aria-label=\"briefcase\" class=\"emoji emoji-1f4bc\" role=\"img\" title=\"briefcase\">:briefcase:</span></p>",
        "id": 215232197,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1604216368
    }
]