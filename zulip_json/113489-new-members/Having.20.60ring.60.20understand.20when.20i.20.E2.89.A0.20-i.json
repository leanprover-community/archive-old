[
    {
        "content": "<p>I am trying to show that the elements <code>sr (-i + 1)</code> and <code>sr (i + 1)</code> of a given (non-degenerate) dihedral group <code>dihedral_group n</code> are distinct elements whenever <code>i</code> is such that <code>2i</code> does not divide <code>n</code>. I happen to know that this is precisely the condition that implies <code>-i</code> and <code>i</code> are distinct elements modulo <code>n</code>, which should then imply that <code>sr (-i + 1)</code> and <code>sr (i + 1)</code> are distinct elements. There are a couple of problem with this: first, <code>ring</code> cannot seem to figure out that <code>-i ≠ i</code>, which makes some amount of sense considering that there are elements of <code>zmod n</code> that are their own inverses, but how do I get Lean to figure out that this is the case? Second, even if Lean knew this to be the case, it would not know that <code>sr (-i + 1)</code> and <code>sr (i + 1)</code> are necessarily distinct. What is the best way to show that this must be true?</p>\n<p>The MWE for this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.dihedral</span>\n<span class=\"kn\">open</span> <span class=\"n\">dihedral_group</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">dihedral_example</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">sr</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">sr</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238705133,
        "sender_full_name": "Alex Griffin",
        "timestamp": 1620955728
    },
    {
        "content": "<p><code>ring</code> doesn't know anything about proving disequalities</p>",
        "id": 238705173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620955787
    },
    {
        "content": "<p>it can only prove equalities, and only equalities that are true in all rings</p>",
        "id": 238705255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620955823
    },
    {
        "content": "<p>what is <code>sr</code> (at least, what about it is relevant to the proof)?</p>",
        "id": 238705304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620955857
    },
    {
        "content": "<p><code>sr</code> is a constructor, so you can simplify the goal to <code>-i + 1 ≠ i + 1</code> and then to <code>-i ≠ i</code> or <code>2*i ≠ 0</code></p>",
        "id": 238705395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620955944
    },
    {
        "content": "<p>which in zmod n is equivalent to <code>2*i</code> does not divide <code>n</code></p>",
        "id": 238705431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620955981
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">dihedral_example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">sr</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">sr</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">two_mul</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238705670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620956153
    },
    {
        "content": "<p>Thank you very much.</p>",
        "id": 238705790,
        "sender_full_name": "Alex Griffin",
        "timestamp": 1620956246
    },
    {
        "content": "<p>I actually have another question, which I'll tack on to the end of this topic because it originated from the prior discussion. I have a similar scenario to before, illustrated below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zmod_example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">hyp</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>Now, from the previous example, it is very clear how to solve this. The current goal once <code>sorry</code> is removed is <code>⊢ j - i = j + i</code>, which should be as simple as simplifying the current goal to <code>⊢ -i = i</code> and then using the hypothesis to show that this must be true. Except, if you try to use tactics like <code>ring</code> or <code>simp</code> to get rid of the <code>j</code>s from the goal, it claims to not be able to simplify any further. What am I missing that Lean cannot figure out to remove the <code>j</code>s from the goal?</p>",
        "id": 238762041,
        "sender_full_name": "Alex Griffin",
        "timestamp": 1620997097
    },
    {
        "content": "<p><code>rw sub_eq_add_neg, congr</code> will do</p>",
        "id": 238762419,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620997260
    },
    {
        "content": "<p>there's probably better ways</p>",
        "id": 238762435,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620997265
    },
    {
        "content": "<p><code>library_search</code> suggests <code>refine norm_num.sub_pos _ _ _ _ rfl (congr_arg ((+) j) _)</code>, but I feel like this is nowhere near as legible</p>",
        "id": 238762867,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620997432
    },
    {
        "content": "<p>Thank you for the answer, thought I am also curious why Lean had trouble realizing that removing the <code>j</code>s was a possibility with my initial setup. Was I not providing enough information, or was it something else?</p>",
        "id": 238763024,
        "sender_full_name": "Alex Griffin",
        "timestamp": 1620997509
    },
    {
        "content": "<p>Removing the js isn't always obviously the right step. Imagine you had something like j * i = j * - i, with i j in the integers. Obviously this is only true if j = 0 or i = 0. But perhaps you don't know that currently, and you have complex side hypothesese that if you did follow through their conclusions, you'd get j = 0. But before that, if you congr'd the j's away, you'd be left with an unsolvable goal.</p>",
        "id": 238765496,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620998613
    }
]