[
    {
        "content": "<p>Hi,<br>\nI'd like to check my understanding of what 'Sort' does when giving it some pre-defined universe. In the output box, is it giving a reply of the universe level predecessor? </p>\n<p>Eg:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">Sort</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>gives Sort u : Type u, and Type u : Type (u + 1)  as output.</p>\n<p>Does the first line tell us that \"Sort u\" is the predecessor of \"Type u\" (when thinking of universe levels), and \"Type u\" would come before \"Type u + 1\"? (backwards inductive in nature?)</p>\n<p>Also, what does the colon mean in the output? (How should the output be read?)</p>\n<p>Thanks,</p>",
        "id": 198217652,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1589989560
    },
    {
        "content": "<p><code>T1 : T2</code> means <code>T1</code> is a term of type <code>T2</code></p>",
        "id": 198217737,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589989587
    },
    {
        "content": "<p><code>Type u</code> is notation for <code>Sort (u+1)</code></p>",
        "id": 198217755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589989595
    },
    {
        "content": "<p><code>Sort 0</code> is <code>Prop</code> and is not data</p>",
        "id": 198217780,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589989611
    },
    {
        "content": "<p>and for each u, <code>Sort u : Sort (u+1)</code>, and lean prefers to use <code>Type</code> to write the latter</p>",
        "id": 198217818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589989631
    },
    {
        "content": "<p>Great, so Sort and Type are sort of opposites(?); if we do an example to confirm what it is:<br>\nSay we have these three things: mammals, animals, living things;<br>\nsort (living things) should give us mammals (mammals : living things)<br>\ntype (mammals) should give us living things (mammals: living things)</p>\n<p>Would this be a correct way of looking at this?</p>",
        "id": 198222990,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1589991923
    },
    {
        "content": "<p><code>Type u</code> is <code>Sort (u+1)</code></p>",
        "id": 198223270,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589992056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/Sort.20universes/near/198223270\">said</a>:</p>\n<blockquote>\n<p><code>Type u</code> is <code>Sort (u+1)</code></p>\n</blockquote>\n<p>So one is just defined as the other +- 1 level? No need to get a deeper meaning for it  seems</p>",
        "id": 198223715,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1589992277
    },
    {
        "content": "<p>It's simply providing a convenient way to say \"any universe but Prop\".</p>",
        "id": 198223873,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589992347
    },
    {
        "content": "<p>Ok, thanks - I'll keep this in mind given what I know now..  I don't know Type theory yet, it seems this has something something to do with Russel's Paradox - for now I will accept it on basis and hope it doesn't bug me too much</p>",
        "id": 198224994,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1589992913
    },
    {
        "content": "<p>The difference between Prop and Type is important. Everything else in this direction can be ignored for a very long time without doing any harm</p>",
        "id": 198225974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589993364
    }
]