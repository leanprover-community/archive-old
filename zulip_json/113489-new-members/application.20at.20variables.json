[
    {
        "content": "<p>How can I apply terms to variables in defs (or create variables defined respectively to other variables, so to say), in the following sense?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- I have a general definition like this</span>\n<span class=\"kd\">def</span> <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- then I declare variables for some of its arguments</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a₀</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"c1\">-- now I want to consider seq partially applied at a₀,</span>\n<span class=\"c1\">-- so that I get something of type `ℕ → α`</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">seq</span> <span class=\"n\">a₀</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span>\n<span class=\"c1\">-- but it still has type ?M_1 → ℕ → ?M_1</span>\n</code></pre></div>",
        "id": 227930758,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1614347884
    },
    {
        "content": "<p>That's because a variable is not actually a variable in the sense that it's defined once and for all, for the rest of the file -- a variable is just a trick whereby in your definition of <code>x</code> Lean thinks \"crumbs -- what is a_0? Oh -- I see the user declared it as a variable, so I'll just stick \"for all a_0 : X\" in that def -- oh crumbs -- what is X? Oh that's a variable too, so I'll just stick \"for all {X : Type}\" in as well\"</p>",
        "id": 227932375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614348540
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- I have a general definition like this</span>\n<span class=\"kd\">def</span> <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- then I declare constants for some of its arguments</span>\n<span class=\"kd\">constants</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a₀</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"c1\">-- now I want to consider seq partially applied at a₀,</span>\n<span class=\"c1\">-- so that I get something of type `ℕ → α`</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">seq</span> <span class=\"n\">a₀</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"c1\">-- x : ℕ → X</span>\n</code></pre></div>\n<p>Note that there are no <code>constant</code>s in mathlib -- you can easily prove false statements if you start throwing constants around. If you actually know what you want a_0 to be, then let it be that, and if you don't, then actually you might want it as a variable in Lean's sense.</p>",
        "id": 227932755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614348693
    },
    {
        "content": "<p>If you really don't want variables then this is safer than using constants:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- I have a general definition like this</span>\n<span class=\"kd\">def</span> <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- then I declare sorried definitions for some of its arguments</span>\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">a₀</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- now I want to consider seq partially applied at a₀,</span>\n<span class=\"c1\">-- so that I get something of type `ℕ → α`</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">seq</span> <span class=\"n\">a₀</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"c1\">-- x : ℕ → X</span>\n</code></pre></div>\n<p>This time Lean emits a warning saying that you cheated, so proofs of false are known not to be trusted.</p>",
        "id": 227933036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614348817
    },
    {
        "content": "<p>Thanks for the insight on how variables work! I knew defining constants is not recommended, plus it doesn't seem to represent the intention. Essentially, I defined some sorts of recursive sequences, having the initial value as argument, and then I wanted to have an initial point and a sequences starting at that point as variables, to reduce verbosity.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a₀</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">seq</span> <span class=\"n\">a₀</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I guess this works best, but reserving the token <code>x</code> didn't seem the best idea.</p>",
        "id": 227934035,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1614349225
    },
    {
        "content": "<p><code>parameters {X : Type} {a₀ : X}</code> may work for you too</p>",
        "id": 227956923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614358710
    }
]