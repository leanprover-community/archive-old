[
    {
        "content": "<p>When using lean ive run into this issue a lot where there are certain terms that become completely opaque.  For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.power_series.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">coer</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">power_series</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">power_series.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_hom</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">power_series</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">opaque</span> <span class=\"o\">:</span> <span class=\"n\">coe_hom.to_fun</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I cannot interact with the <code>coe_hom.to_fun</code> in any way, besides when i <code>simp</code> it becomes <code>⇑coe_hom</code>.  <code>refl</code> fails, <code>simp</code> doesn't do anything useful, <code>unfold coe_hom.to_fun</code> fails, what's happening and how do I get around it?</p>",
        "id": 268497745,
        "sender_full_name": "Sigma",
        "timestamp": 1642574589
    },
    {
        "content": "<p>disclaimer: I'm not a mathematician. <code>lemma coe_hom</code> should be <code>def coe_hom</code> though because ring_hom isn't a Prop</p>\n<p>once you fix this things should work as usual but don't quote me on this</p>",
        "id": 268499185,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1642575978
    },
    {
        "content": "<p><code>ext</code> works</p>",
        "id": 268503159,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642579535
    },
    {
        "content": "<p>But mostly <code>coe_hom</code> is a lemma when it should be a <code>def</code>. This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">coe_hom</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">power_series</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">opaque</span> <span class=\"o\">:</span> <span class=\"n\">coe_hom.to_fun</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>but if you replace it with <code>lemma coe_hom ...</code> it fails, because that makes Lean throw away the definition.</p>",
        "id": 268503314,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642579634
    }
]