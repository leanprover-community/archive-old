[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">constant_list</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span><span class=\"n\">z</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span><span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">z</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">constant_list</span> <span class=\"n\">z</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ridiculous</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">):</span>\n  <span class=\"n\">constant_list</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">constant_list</span> <span class=\"n\">z</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This shouldn't really require a proof but here we are...</p>",
        "id": 288880794,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1657237663
    },
    {
        "content": "<p>does \"rfl\" work?</p>",
        "id": 288881339,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657238180
    },
    {
        "content": "<p>BTW this is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.repeat\">docs#list.repeat</a></p>",
        "id": 288881371,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657238229
    },
    {
        "content": "<p>\"rfl\" does not work... but thanks for mentioning <code>list.repeat</code></p>",
        "id": 288882505,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1657239204
    },
    {
        "content": "<p>Hmm, \"rfl\" works if I use <code>n.succ</code> instead of <code>n+1</code>, and <code>list.repeat</code>... thanks <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> !</p>",
        "id": 288882758,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1657239452
    },
    {
        "content": "<p>n+1 doesn't work because you haven't imported anything, and n.succ is the other inductive constructor. n+1 works usually because it's marked as a pattern somewhere. Don't remember where.</p>",
        "id": 288882898,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657239585
    },
    {
        "content": "<p><code>rfl</code> doesn't work because you unnecessarily marked <code>constant_list</code> as <code>noncomputable</code></p>",
        "id": 288882947,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1657239611
    },
    {
        "content": "<p>Remove <code>noncomputable</code> and it will work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">constant_list</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span><span class=\"n\">z</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span><span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">z</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">constant_list</span> <span class=\"n\">z</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ridiculous</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">):</span>\n  <span class=\"n\">constant_list</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">constant_list</span> <span class=\"n\">z</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 288883012,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1657239715
    }
]