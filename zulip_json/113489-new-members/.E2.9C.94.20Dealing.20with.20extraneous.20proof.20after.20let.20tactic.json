[
    {
        "content": "<p>HI there, I was writing the following proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">baby_rudin_c1_p20_a</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Where I get a tactic state of: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">xy</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=</span> <span class=\"bp\">↥</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">xy</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n<span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=</span> <span class=\"bp\">↥</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I am having a little bit of trouble with this because I'm not quite sure why I have two goals here, and I feel like the first goal is very trivial, would there be a cleaner way to define this set with <code>let</code> ?</p>",
        "id": 282667257,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1652804722
    },
    {
        "content": "<p>I was missing the <code>:</code> in <code>  let S : set ℝ = { v : ℝ | ∃ n : ℕ, 0 &lt; n ∧ v = n * x},</code>, it should have been: <code>  let S : set ℝ := { v : ℝ | ∃ n : ℕ, 0 &lt; n ∧ v = n * x},</code></p>",
        "id": 282667516,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1652804817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">Callum Cassidy-Nolan</span> has marked this topic as resolved.</p>",
        "id": 282667539,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652804825
    },
    {
        "content": "<p>Hey Callum, <code>set</code> is an even better tactic than <code>let</code> because you can write <code>set S : set ℝ := { v : ℝ | ∃ n : ℕ, 0 &lt; n ∧ v = n * x} with hS</code> and now you have <code>hS</code> lying around in the tactic state, which is sometimes handy for rewrites.</p>",
        "id": 282670482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652805986
    },
    {
        "content": "<p>If it turns out you don't need <code>hS</code> then you can just switch back to <code>let</code>.</p>",
        "id": 282670546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652806018
    }
]