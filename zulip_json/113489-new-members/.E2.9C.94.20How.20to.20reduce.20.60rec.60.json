[
    {
        "content": "<p>I'm still stuck on this, if anyone could take a peek at <a href=\"https://gist.github.com/Timeroot/8fd43e5b58a4f910ad05b098383c788f\">https://gist.github.com/Timeroot/8fd43e5b58a4f910ad05b098383c788f</a> and tell me how to move forward</p>",
        "id": 257962302,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634518326
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">iso</span> <span class=\"o\">[</span><span class=\"n\">sl</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]:</span> <span class=\"n\">with0</span> <span class=\"o\">(</span><span class=\"n\">drop0</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">option.rec_on</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"n\">nonzero.val</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">option.some</span> <span class=\"o\">(</span><span class=\"n\">nonzero.mk</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 257963284,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634519254
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Define a \"nonzero\" type -/</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">nonzero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- The meat starts here -/</span>\n\n<span class=\"kd\">@[reducible, simp]</span> <span class=\"c1\">--a new structure where we forcibly add \"0\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">with0</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">@[reducible, simp]</span> <span class=\"c1\">--a new has_mul where we forcibly remove \"0\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">drop0</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">nonzero</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">with0</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">none</span> <span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">iso</span> <span class=\"o\">[</span><span class=\"n\">sl</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]:</span> <span class=\"n\">with0</span> <span class=\"o\">(</span><span class=\"n\">drop0</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">option.cases_on'</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"n\">subtype.val</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">none</span> <span class=\"k\">else</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩),</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 257963361,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634519321
    },
    {
        "content": "<p>Where I skip the complex new structure of <code>nonzero</code> and just use a subtype. And I use <code>cases_on'</code>, which has more lemmas about it that a naked <code>rec_on</code>. </p>\n<p>For the proofs, I do the deconstruction of the <code>option (nonzero _)</code> in a single line .I also name my <code>by_cases</code> hypothesis so that I don't rely on the autogenerated <code>h</code>.</p>",
        "id": 257963461,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634519410
    },
    {
        "content": "<p><code>option.elim</code> also works nicely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">iso</span> <span class=\"o\">[</span><span class=\"n\">sl</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]:</span> <span class=\"n\">with0</span> <span class=\"o\">(</span><span class=\"n\">drop0</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">option.elim</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"n\">nonzero.val</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">none</span> <span class=\"k\">else</span> <span class=\"n\">option.some</span> <span class=\"o\">(</span><span class=\"n\">nonzero.mk</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨⟩</span><span class=\"bp\">|</span><span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩⟩)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">],</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 257963758,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634519723
    },
    {
        "content": "<p>Also, to avoid noncomputable, and defer the choice of computability or not to the user:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iso</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">with0</span> <span class=\"o\">(</span><span class=\"n\">drop0</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 257963828,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634519780
    },
    {
        "content": "<p>The reason I provide that is you might often have it, if you're working twith <code>with0 M</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decidable_has_zero_zero</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">with0</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">option.decidable_eq_none</span>\n</code></pre></div>",
        "id": 257964172,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634520135
    },
    {
        "content": "<p>Awesome, thanks for the help guys! :)</p>",
        "id": 257965292,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634521379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as resolved.</p>",
        "id": 257965294,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634521382
    }
]