[
    {
        "content": "<p>Hi, I'm interested in contributing to mathlib, so I'd like to start with some extremely simple PRs just to check I understand how the process works (as explained in the \"Making a pull request\" video).  My github user name is stuart-presnell.  Could someone grant me the required access?</p>",
        "id": 259916113,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1635798350
    },
    {
        "content": "<p>Invite sent! <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 259916851,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1635798696
    },
    {
        "content": "<p>Great, thank you!</p>",
        "id": 259917382,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1635798933
    },
    {
        "content": "<p>Welcome, <span class=\"user-mention\" data-user-id=\"422543\">@Stuart Presnell</span>! Do you have ideas of things you'd like to work on?</p>",
        "id": 259919967,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635800073
    },
    {
        "content": "<p>I'd like to be able to work on some analytic number theory, but that will take a while.  In the near term, I was thinking of adding some very simple utility lemmas on integers and lists.</p>",
        "id": 259921623,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1635800773
    },
    {
        "content": "<p>I'm working from the principle that anything that's 'obvious' should be solvable automatically, so I'm writing lemmas that handle obvious steps that I can't figure out how to get Lean to fill in.  Does that seem like a reasonable approach?</p>",
        "id": 259922332,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1635801170
    },
    {
        "content": "<p>Sure! If you PR those lemmas you might find that some members of the community will try to golf them -- the general principle for <code>mathlib</code> seems to be that if it's mathemtically trivial then the proof in the library should be as concise as possible, and hang readability.</p>",
        "id": 259923164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635801630
    },
    {
        "content": "<p>Warning: I would also like to work on some analytic number theory, but this is blocked by the current state of complex analysis; right now we don't have much API for integrals over complex contours, so we don't have the result that a uniform limit of holomorphic functions is holomorphic, so we can't prove that the Riemann zeta function is holomorphic yet (unless we go around the houses and give a bespoke proof, which is not the mathlib way; not being the mathlib way is also the reason why we don't have much API for single variable complex integration)</p>",
        "id": 259923434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635801790
    },
    {
        "content": "<p>Is there a list of the 'this is obvious, solve it for me' tactics?  I know about some of the more obvious ones like <code>library_search</code>, <code>tauto</code>, and <code>omega</code>, but it would be good to have a more comprehensive list so I'm not trying to prove something that Lean can already solve.</p>",
        "id": 259924848,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1635802607
    },
    {
        "content": "<p>Oh, and my knowledge and ambitions in analytic number theory are much more modest at the moment, so I'm not expecting to run into those limitations any time soon!</p>",
        "id": 259925016,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1635802688
    },
    {
        "content": "<p>You could look at the things tagged <code>decision procedure</code> or <code>finishing</code> in the mathlib tactics list <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a>. I'd add <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#finish\">tactic#finish</a> and ofc <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#refl\">tactic#refl</a> to the list of things I try before giving up, and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#suggest\">tactic#suggest</a> when library search isn't finding a proof will often get you close, there are a few other good ones on the page like <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_cast\">tactic#norm_cast</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#linarith\">tactic#linarith</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_num\">tactic#norm_num</a> for more specialized situations but are very powerful when they apply</p>",
        "id": 259925565,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635803033
    },
    {
        "content": "<p>Note that omega is currently being phased out of mathlib itself, despite its usefulness it seems that having omega proofs will make porting to lean 4 harder as it is a large and complicated tactic, so we try and replace uses of omega by other things where possible</p>",
        "id": 259925838,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635803193
    },
    {
        "content": "<p>The complete list of tactics is a bit overwhelming at first, but for results within one area you usually figure out the important ones. <code>simp</code> is great once you've figured out what its domain is -- this took me a while</p>",
        "id": 259927621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635804245
    },
    {
        "content": "<p>Thanks very much</p>",
        "id": 259930642,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1635806219
    },
    {
        "content": "<p>There's a lot of modern analytic number theory that doesn't really involve zeta functions,  L-functions, or any other holomorphic functions in an essential way. For example work in the circle method or on sieves.</p>",
        "id": 259950624,
        "sender_full_name": "Will Sawin",
        "timestamp": 1635825026
    },
    {
        "content": "<p>I really don't know much about this stuff at all. Helfgott's work on weak Goldbach springs to mind. It's a highly refined circle method which shows all odd numbers &gt;= 10^30 or so are the sum of three primes and then a brute force calculation using I think C or C++ to deal with the rather large finite number of exceptions. This would be ridiculously hard to do in a theorem prover right now but on the other hand Ben Green did raise it with me once as something which involved a lot of fiddly estimates and would be worth checking in a theorem prover</p>",
        "id": 259958739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635835997
    },
    {
        "content": "<p>The 10^30 definitely sounds like a job for Lean 4 instead of Lean 3 (-;</p>",
        "id": 259961671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635838816
    },
    {
        "content": "<p>Or Coq</p>",
        "id": 259966537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635842763
    },
    {
        "content": "<p>For something as simple as this one could imagine a two-prover effort</p>",
        "id": 259966574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635842786
    },
    {
        "content": "<p>Or maybe it would be interesting to try the brute force computation part in both</p>",
        "id": 259966633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635842837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/259925838\">said</a>:</p>\n<blockquote>\n<p>Note that omega is currently being phased out of mathlib itself, despite its usefulness it seems that having omega proofs will make porting to lean 4 harder as it is a large and complicated tactic, so we try and replace uses of omega by other things where possible</p>\n</blockquote>\n<p>Is there a standard recommenced replacement for <code>omega</code>?  Also, is there a way to add a note or warning about this to the relevant section of the mathlib tactics page so that newcomers know to avoid it?</p>",
        "id": 259977592,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1635849518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"422543\">@Stuart Presnell</span> The replacement we are all hoping and longing for is \"<code>omega</code> in Lean 4 as soon as mathlib is ported\"</p>",
        "id": 259978239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635849919
    },
    {
        "content": "<p>I don't think <code>omega</code> is a problem for newcomers to lean; only a problem for when those newcomers want to contribute to mathlib</p>",
        "id": 259978862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635850313
    },
    {
        "content": "<p>Yeah I use omega all the time still when I'm working on stuff. Depending on what the goal is you might be able to use using <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#zify\">tactic#zify</a> to transfer the goal to a result about ints and then some other tactics can help.</p>",
        "id": 259979336,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635850593
    },
    {
        "content": "<p>There are lots of tactics which are great for rushing through a proof (ie non-terminal simp and tidy), and then should be removed after cleaning up for mathlib</p>",
        "id": 259979871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635850925
    },
    {
        "content": "<p>Note that in an ideal world <code>omega</code> wouldn't be a forbidden tactic. The issue here is that the author lost interest in maintaining this tactic. It has bugs and very little documentation. And there is very little motivation to fix this in Lean 3. But we very much hope mathlib will have an analogue tactic (without bugs and with documentation) in Lean 4.</p>",
        "id": 259989889,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635857151
    },
    {
        "content": "<p>If we eventually get a replacement for <code>omega</code> in lean 4 (and FYI I'm looking into this, nothing concrete to announce yet), then it will not be necessary to deprecate it in lean 3, since we can map the tactic to its replacement, even if it isn't a perfect match; the other lean 4 tactics are already not exact carbon copies anyway so it's fine if it's close enough and we fix the outliers</p>",
        "id": 259990728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635857641
    },
    {
        "content": "<p>I genuinely hope it's not a perfect match in this case!</p>",
        "id": 259996073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635860412
    },
    {
        "content": "<p>Unfortunately Helfgott's weak Goldbach proof uses the Riemann zeta function. (In fact, it uses the claim that the first 10^13 zeroes of the Riemann zeta function lie on the critical line). I was thinking about applications of the circle method to Diophantine equations, not involving primes, as in the work of Birch or Waring's problem. I think zeta and L-functions are not used here, or at least not used in every result. I certainly don't know a replacement for weak Goldbach as something people are not 100% sure of the correctness of and would like checked down this line, but if someone just wants to contribute there should be lots available.</p>",
        "id": 260004895,
        "sender_full_name": "Will Sawin",
        "timestamp": 1635864295
    },
    {
        "content": "<p>Although maybe someone could work on things needed for Helfgott's proof while the zeta function is in development...</p>",
        "id": 260007354,
        "sender_full_name": "Will Sawin",
        "timestamp": 1635865237
    },
    {
        "content": "<p>Note also that Coq checked some of the numerical integrals  entering this work: <a href=\"https://hal.inria.fr/hal-01630143v2\">https://hal.inria.fr/hal-01630143v2</a> They found errors but no critical ones.</p>",
        "id": 260007624,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635865339
    },
    {
        "content": "<p>Hi all,<br>\nI am learning lean 4 and looking for ways to contribute to mathlib or lean 4 itself. Where should I start?</p>",
        "id": 263137970,
        "sender_full_name": "Loreno Heer",
        "timestamp": 1638276009
    },
    {
        "content": "<p>oh? contributing to lean 4 probably isn't a good idea because you need lots of background knowledge and an understanding of the existing codebase... anyway you should contribute to mathlib instead, the barrier to entry is much lower</p>",
        "id": 263138398,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638276250
    },
    {
        "content": "<p>from what I gathered, one way to contribute to mathlib is to spawn a new project and formalize exciting theorems and stuff, and then make a topic on here to request your code to be included in mathlib</p>",
        "id": 263138499,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638276313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"460312\">@Loreno Heer</span> Currently, mathlib is using Lean 3. But several people are in the middle of a complicated semi-automated port to Lean 4. We hope that this \"mathport\" will be finished a couple of months from now.</p>",
        "id": 263138724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638276433
    },
    {
        "content": "<p>Hi, I formalized a few things in graph theory (Cayley graphs, contractions, minors, things like that) and would like to contribute them to mathlib. Could someone please grant me the rights to to PRs? </p>\n<p>My handle on github is <code>vbeffara</code> (and my code is at <a href=\"https://github.com/vbeffara/lean\">https://github.com/vbeffara/lean</a> but it needs a lot of refactoring before I submit most of if ...)</p>",
        "id": 268582637,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1642616689
    },
    {
        "content": "<p>Done (with great pleasure!).</p>",
        "id": 268582905,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642616790
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 268583305,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1642616993
    },
    {
        "content": "<p>Hi, I'm an undergrad interested in theoretical physics and computer science. I'm currently experimenting with formalizing theorems and making a pull request to mathlib. (<a href=\"https://github.com/null-lambda/mathlib/blob/master/archive/100-theorems-list/37_solution_of_cubic.lean\">https://github.com/null-lambda/mathlib/blob/master/archive/100-theorems-list/37_solution_of_cubic.lean</a>)<br>\nCould someone give me the required access?</p>",
        "id": 269062493,
        "sender_full_name": "Jeoff Lee",
        "timestamp": 1643003252
    },
    {
        "content": "<p>Looks like you have access now, right?</p>",
        "id": 269063268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643004178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"355353\">@Jeoff Lee</span> Aah, I see that you opened a PR from your fork. Well, here's an invitation for write access to non-master branches of mathlib: <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 269063366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643004281
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 269066460,
        "sender_full_name": "Jeoff Lee",
        "timestamp": 1643008044
    },
    {
        "content": "<p>Hi, I am Ella Yu with github user name: KeYu-Ella. I have collaborated with Yaël Dillies to work on defining additive energy, and I wish to have access so that I can add myself as a co-author. Could someone grant me access please? Thanks a lot!</p>",
        "id": 313187229,
        "sender_full_name": "Ella Yu",
        "timestamp": 1669856875
    },
    {
        "content": "<p>Invite sent! <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 313187706,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1669857215
    },
    {
        "content": "<p>Hello! I am a new user and I would like to contribute to the library by implementing a proof for the Max-Flow Min-Cut theorem for flow networks. How should I do that? Is there someone else, who is working on that and if yes, how should I approach the implementation of the proof in that case? <br>\nI am also new to lean and all materials that can be helpful (or relevant to the topic) will be much appreciated.</p>",
        "id": 315426394,
        "sender_full_name": "Aleksandar Milchev",
        "timestamp": 1670867933
    },
    {
        "content": "<p>I think we don't even have a definition of networks now, but we have several definitions of graphs.</p>",
        "id": 315442937,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1670873168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"572391\">Aleksandar Milchev</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/315426394\">said</a>:</p>\n<blockquote>\n<p>Hello! I am a new user and I would like to contribute to the library by implementing a proof for the Max-Flow Min-Cut theorem for flow networks. How should I do that? Is there someone else, who is working on that and if yes, how should I approach the implementation of the proof in that case? <br>\nI am also new to lean and all materials that can be helpful (or relevant to the topic) will be much appreciated.</p>\n</blockquote>\n<p>In order to follow any of the classical proofs (you first have to prove that the Max-Flow exists), you will need to implement a Max-Flow algorithm in Lean first. This will require a non-trivial amount of functional programming. Do you have any experience with that?</p>",
        "id": 315443671,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1670873414
    },
    {
        "content": "<p>Are you going to prove it for rational capacities?</p>",
        "id": 315445127,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1670873904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/315443671\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"572391\">Aleksandar Milchev</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/315426394\">said</a>:</p>\n<blockquote>\n<p>Hello! I am a new user and I would like to contribute to the library by implementing a proof for the Max-Flow Min-Cut theorem for flow networks. How should I do that? Is there someone else, who is working on that and if yes, how should I approach the implementation of the proof in that case? <br>\nI am also new to lean and all materials that can be helpful (or relevant to the topic) will be much appreciated.</p>\n</blockquote>\n<p>In order to follow any of the classical proofs (you first have to prove that the Max-Flow exists), you will need to implement a Max-Flow algorithm in Lean first. This will require a non-trivial amount of functional programming. Do you have any experience with that?</p>\n</blockquote>\n<p>Yes, my idea is to prove it for rational capacities. As for functional programming, I have done a lot of practicals in Haskell and can say that I am confident in my skills with it, but that is my only functional programming experience.</p>",
        "id": 315448999,
        "sender_full_name": "Aleksandar Milchev",
        "timestamp": 1670875143
    },
    {
        "content": "<p>Great!! Programming in Lean is similar to programming in Haskell. I think you will like it.</p>",
        "id": 315452103,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1670875945
    },
    {
        "content": "<p>Let's first wait, however, for someone to give you advice about what you should base the definition of network flow on.</p>",
        "id": 315453088,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1670876216
    },
    {
        "content": "<p>There are <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver\">docs#quiver</a> and indexed multigraphs in <a href=\"https://github.com/leanprover-community/mathlib/pull/16100\">#16100</a>. I think indexed multigraphs would be helpful (you may want reverse edges), but <a href=\"https://github.com/leanprover-community/mathlib/pull/16100\">#16100</a> is still WIP. See also <a href=\"#narrow/stream/252551-graph-theory/topic/multigraph.20definition\">this topic</a></p>\n<p>(edit: oops, another suggested definition in <a href=\"https://github.com/leanprover-community/mathlib/pull/16100\">#16100</a> will not give you two arcs for each edge. I'm not sure which one we'll use eventually.)</p>",
        "id": 315457041,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1670877283
    },
    {
        "content": "<p>I'm getting back to <a href=\"https://github.com/leanprover-community/mathlib/pull/16100\">#16100</a> sometimes this week <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 315458447,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670877698
    },
    {
        "content": "<p>Currently butchering the rest of my todo list.</p>",
        "id": 315458480,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670877710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455791\">Yuyang Zhao</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/315457041\">said</a>:</p>\n<blockquote>\n<p>There are <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver\">docs#quiver</a> and indexed multigraphs in <a href=\"https://github.com/leanprover-community/mathlib/pull/16100\">#16100</a>. I think indexed multigraphs would be helpful (you may want reverse edges), but <a href=\"https://github.com/leanprover-community/mathlib/pull/16100\">#16100</a> is still WIP. See also <a href=\"#narrow/stream/252551-graph-theory/topic/multigraph.20definition\">this topic</a></p>\n<p>(edit: oops, another suggested definition in <a href=\"https://github.com/leanprover-community/mathlib/pull/16100\">#16100</a> will not give you two arcs for each edge. I'm not sure which one we'll use eventually.)</p>\n</blockquote>\n<p>I will definitely have a look (reversed edges will be useful), thank you!</p>",
        "id": 315465616,
        "sender_full_name": "Aleksandar Milchev",
        "timestamp": 1670880125
    },
    {
        "content": "<p>For undirected multigraphs, you can always use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver.has_involutive_reverse\">docs#quiver.has_involutive_reverse</a>, which is relatively close to the definition proposed in <a href=\"https://github.com/leanprover-community/mathlib/pull/16100\">#16100</a> but is already there in mathlib.</p>",
        "id": 315467161,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1670880771
    },
    {
        "content": "<p>I am adding some more API for quivers with graph theory in mind together with <span class=\"user-mention\" data-user-id=\"461830\">@Rémi Bottinelli</span> (more precisely we want to get to covering maps of graphs and Cayley/Schreier graphs). The only thing about quivers is that dependant type subtleties quickly arise, so you have to be careful about that, but it's manageable using things in <code>combinatorics.quiver.cast</code>and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/heq\">docs#heq</a>.</p>",
        "id": 315468028,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1670881119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329754\">Antoine Labelle</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/315467161\">said</a>:</p>\n<blockquote>\n<p>For undirected multigraphs, you can always use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver.has_involutive_reverse\">docs#quiver.has_involutive_reverse</a>, which is relatively close to the definition proposed in <a href=\"https://github.com/leanprover-community/mathlib/pull/16100\">#16100</a> but is already there in mathlib.</p>\n</blockquote>\n<p>Unfortunately, for flow networks, I will need a directed graph.</p>",
        "id": 315716956,
        "sender_full_name": "Aleksandar Milchev",
        "timestamp": 1670979160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"572391\">Aleksandar Milchev</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/315716956\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, for flow networks, I will need a directed graph.</p>\n</blockquote>\n<p>Well then it's just quivers without the involutive reverse. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 315730790,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1670989548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/315443671\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"572391\">Aleksandar Milchev</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/315426394\">said</a>:</p>\n<blockquote>\n<p>Hello! I am a new user and I would like to contribute to the library by implementing a proof for the Max-Flow Min-Cut theorem for flow networks. How should I do that? Is there someone else, who is working on that and if yes, how should I approach the implementation of the proof in that case? <br>\nI am also new to lean and all materials that can be helpful (or relevant to the topic) will be much appreciated.</p>\n</blockquote>\n<p>In order to follow any of the classical proofs (you first have to prove that the Max-Flow exists), you will need to implement a Max-Flow algorithm in Lean first. This will require a non-trivial amount of functional programming. Do you have any experience with that?</p>\n</blockquote>\n<p>Do we need an implementation, if we can implement a library for linear programming and prove the strong duality theorem? Speaking of which, from a theoretical CS perspective it seems proofs around linear optimisation might be useful. Is there (mathlib or otherwise) support for this?</p>",
        "id": 316029586,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671107865
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 316034915,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671109383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/316029586\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/315443671\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"572391\">Aleksandar Milchev</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/315426394\">said</a>:</p>\n<blockquote>\n<p>Hello! I am a new user and I would like to contribute to the library by implementing a proof for the Max-Flow Min-Cut theorem for flow networks. How should I do that? Is there someone else, who is working on that and if yes, how should I approach the implementation of the proof in that case? <br>\nI am also new to lean and all materials that can be helpful (or relevant to the topic) will be much appreciated.</p>\n</blockquote>\n<p>In order to follow any of the classical proofs (you first have to prove that the Max-Flow exists), you will need to implement a Max-Flow algorithm in Lean first. This will require a non-trivial amount of functional programming. Do you have any experience with that?</p>\n</blockquote>\n<p>Do we need an implementation, if we can implement a library for linear programming and prove the strong duality theorem? Speaking of which, from a theoretical CS perspective it seems proofs around linear optimisation might be useful. Is there (mathlib or otherwise) support for this?</p>\n</blockquote>\n<p>Even the typical residual graph based proof does not require an implementation as far as I can tell.</p>",
        "id": 316035020,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671109413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/316029586\">said</a>:</p>\n<blockquote>\n<p>Do we need an implementation, if we can implement a library for linear programming and prove the strong duality theorem? Speaking of which, from a theoretical CS perspective it seems proofs around linear optimisation might be useful. Is there (mathlib or otherwise) support for this?</p>\n</blockquote>\n<p>As far as I understand the Strong Duality Theorem, we need to show that Max-Flow exists, and then it provides equality to Min-Cut. Alternatively, we can first show that Min-Cut exists, and then it provides equality to Max-Flow.</p>",
        "id": 316212107,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671180322
    },
    {
        "content": "<p>The latter will be easier, I think. The existence of Min-Cut should be easy to prove without implementation of the search.</p>",
        "id": 316212547,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671180490
    },
    {
        "content": "<p>Is it easy to prove Farkas lemma from this theorem?<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/bd59f822dd31da0b6eb683edd04ec01311210066/src/analysis/convex/cone/basic.lean#L847\">https://github.com/leanprover-community/mathlib/blob/bd59f822dd31da0b6eb683edd04ec01311210066/src/analysis/convex/cone/basic.lean#L847</a></p>",
        "id": 316212926,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671180662
    },
    {
        "content": "<p>I think someone has the Farkas lemma somewhere?</p>",
        "id": 316213347,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671180834
    },
    {
        "content": "<p>Second question: Do we have API for gluing two matrices together?</p>",
        "id": 316213432,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671180848
    },
    {
        "content": "<p>It's already done in, for example, <a href=\"https://tqft.net/mathlib/linear_algebra/matrix/block\">file#linear_algebra/matrix/block</a></p>",
        "id": 316213976,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671181017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/316213347\">said</a>:</p>\n<blockquote>\n<p>I think someone has the Farkas lemma somewhere?</p>\n</blockquote>\n<p>In case someone has a link, please, send it; I am really interested!</p>",
        "id": 316224204,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671184412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245078\">@Apurva Nakade</span>, do you know about this?</p>",
        "id": 316225542,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671184898
    },
    {
        "content": "<p>Hi there, here's Farkas lemma in mathlib: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_cone.hyperplane_separation_of_nonempty_of_is_closed_of_nmem\">docs#convex_cone.hyperplane_separation_of_nonempty_of_is_closed_of_nmem</a></p>",
        "id": 316226366,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1671185172
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Farkas\">docs#Farkas</a> finds it too</p>",
        "id": 316226523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671185240
    },
    {
        "content": "<p>I haven't been able to work on LP versions of this for lack of time :(, so that one is still missing</p>",
        "id": 316226587,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1671185268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/316226366\">said</a>:</p>\n<blockquote>\n<p>Hi there, here's Farkas lemma in mathlib: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_cone.hyperplane_separation_of_nonempty_of_is_closed_of_nmem\">docs#convex_cone.hyperplane_separation_of_nonempty_of_is_closed_of_nmem</a></p>\n</blockquote>\n<p>That's literally what I was referencing in my question above.</p>",
        "id": 316228432,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671185892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/316212926\">said</a>:</p>\n<blockquote>\n<p>Is it easy to prove Farkas lemma from this theorem?<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/bd59f822dd31da0b6eb683edd04ec01311210066/src/analysis/convex/cone/basic.lean#L847\">https://github.com/leanprover-community/mathlib/blob/bd59f822dd31da0b6eb683edd04ec01311210066/src/analysis/convex/cone/basic.lean#L847</a></p>\n</blockquote>\n<p>..</p>",
        "id": 316228470,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671185903
    },
    {
        "content": "<p>Well then the question seems to have become \"what do you think Farkas' lemma says?\".</p>",
        "id": 316229070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671186113
    },
    {
        "content": "<p>It looks like <code>convex_cone.hyperplane_separation_of_nonempty_of_is_closed_of_nmem</code> only states half of what wikipedia says is the geometric interpretation</p>",
        "id": 316229206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671186152
    },
    {
        "content": "<p>Oh, actually I guess the other half is trivial, it's just <code>b \\in K</code>, and follows from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/or_iff_not_imp_left\">docs#or_iff_not_imp_left</a>; maybe \"exactly one\" isn't capured accurately</p>",
        "id": 316229524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671186262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/316229070\">said</a>:</p>\n<blockquote>\n<p>Well then the question seems to have become \"what do you think Farkas' lemma says?\".</p>\n</blockquote>\n<p>I use these three versions:<br>\n<a href=\"/user_uploads/3121/AhhPL-YuY45WScLiOGw8kVbu/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AhhPL-YuY45WScLiOGw8kVbu/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/AhhPL-YuY45WScLiOGw8kVbu/image.png\"></a></div>",
        "id": 316229746,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671186346
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 316229840,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671186370
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 316229898,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671186394
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 316229920,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671186405
    },
    {
        "content": "<p>Let me think which of them will yield the most useful version of the Strong Duality Theorem for the sake of proving MaxFlow = MinCut.</p>",
        "id": 316230008,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671186441
    },
    {
        "content": "<p>I think the last one will be best.</p>",
        "id": 316233212,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671187218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/316229746\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/316229070\">said</a>:</p>\n<blockquote>\n<p>Well then the question seems to have become \"what do you think Farkas' lemma says?\".</p>\n</blockquote>\n<p>I use these three versions:<br>\n<a href=\"/user_uploads/3121/AhhPL-YuY45WScLiOGw8kVbu/image.png\">image.png</a></p>\n</blockquote>\n<p>I suspect that from a CS perspective, we might want a proof from scratch anyway, considering how Farkas Lemma is taught in the typical optimization course.</p>",
        "id": 316236071,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671188181
    },
    {
        "content": "<p>At least the very least, if I claim in some presentation in my department, that I am proving Farkas lemma via the Hahn-Banach separation theorem, then it is a fair guess that the immediate reaction would be \"can you provide a simpler proof using elementary ideas?\"</p>",
        "id": 316236932,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671188465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/316236071\">said</a>:</p>\n<blockquote>\n<p>I suspect that from a CS perspective, we might want a proof from scratch anyway, considering how Farkas Lemma is taught in the typical optimization course.</p>\n</blockquote>\n<p>I guess you want to prove one of the three matrix-formulation Farkas Lemmas from scratch (without using geometry). The other two will be reduced to the first Farkas Lemma.</p>",
        "id": 316237357,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671188585
    },
    {
        "content": "<p>That said, I don't think that the Lean/mathlib community is keen on creating proofs using the most elementary tools only.</p>",
        "id": 316238219,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671188851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/316237357\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/316236071\">said</a>:</p>\n<blockquote>\n<p>I suspect that from a CS perspective, we might want a proof from scratch anyway, considering how Farkas Lemma is taught in the typical optimization course.</p>\n</blockquote>\n<p>I guess you want to prove one of the three matrix-formulation Farkas Lemmas from scratch (without using geometry). The other two will be reduced to the first Farkas Lemma.</p>\n</blockquote>\n<p>Yes. something like that. I have not found the relevant set up for linear programming and integer programming yet in mathlib. Even if there is some higher level abstraction in there, we need something at the right level of abstraction</p>",
        "id": 316238284,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671188873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/316237357\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/316236071\">said</a>:</p>\n<blockquote>\n<p>I suspect that from a CS perspective, we might want a proof from scratch anyway, considering how Farkas Lemma is taught in the typical optimization course.</p>\n</blockquote>\n<p>I guess you want to prove one of the three matrix-formulation Farkas Lemmas from scratch (without using geometry). The other two will be reduced to the first Farkas Lemma.</p>\n</blockquote>\n<p>Perhaps we need a tcslib</p>",
        "id": 316238441,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671188922
    },
    {
        "content": "<p>Might be partially relevant: <a href=\"#narrow/stream/236449-Program-verification/topic/Linear.20programming\">https://leanprover.zulipchat.com/#narrow/stream/236449-Program-verification/topic/Linear.20programming</a></p>",
        "id": 316238524,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671188954
    },
    {
        "content": "<p>There's an interesting implementation of linear programming in Coq iirc.</p>",
        "id": 316247100,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671191756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"572391\">Aleksandar Milchev</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/315426394\">said</a>:</p>\n<blockquote>\n<p>Hello! I am a new user and I would like to contribute to the library by implementing a proof for the Max-Flow Min-Cut theorem for flow networks. How should I do that? Is there someone else, who is working on that and if yes, how should I approach the implementation of the proof in that case? <br>\nI am also new to lean and all materials that can be helpful (or relevant to the topic) will be much appreciated.</p>\n</blockquote>\n<p>Hello! </p>\n<p>Me and a friend were working on a proof of the Max-Flow Min-Cut theorem this summer!  We didn't manage to finish it though, so there's a fair bit left.  Here's the repo: <a href=\"https://github.com/Zetagon/maxflow-mincut\">https://github.com/Zetagon/maxflow-mincut</a></p>\n<p>One thing to keep in mind is that we weren't planning to contribute to mathlib as our first priority, so there's some stuff that you'd have to change.  I think copied and modified Mathlib's quiver for example.</p>\n<p>We have a Latex document on overleaf too, I'll commit it to the repository shortly.</p>",
        "id": 316248608,
        "sender_full_name": "Leo Ericson",
        "timestamp": 1671192267
    },
    {
        "content": "<p>I apparently forgot to push the report <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> It's up now. The style file has some lines commented out because I couldn't get document to compile, uncomment them at your own peril. <span class=\"user-mention\" data-user-id=\"572391\">@Aleksandar Milchev</span></p>",
        "id": 316434289,
        "sender_full_name": "Leo Ericson",
        "timestamp": 1671274768
    },
    {
        "content": "<p>Can you upload the pdf as well?</p>",
        "id": 316441145,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671277115
    },
    {
        "content": "<p>Done.  I commited the pdf directly which feels  a bit weird since it's an artifact, but I guess it works.</p>",
        "id": 316446426,
        "sender_full_name": "Leo Ericson",
        "timestamp": 1671279214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396289\">Leo Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/316434289\">said</a>:</p>\n<blockquote>\n<p>I apparently forgot to push the report <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> It's up now. The style file has some lines commented out because I couldn't get document to compile, uncomment them at your own peril. <span class=\"user-mention silent\" data-user-id=\"572391\">Aleksandar Milchev</span></p>\n</blockquote>\n<p>Thank you very much! I will have a look in the following week and may contact you directly after the Christmas break if I have any questions!</p>",
        "id": 316453292,
        "sender_full_name": "Aleksandar Milchev",
        "timestamp": 1671282035
    },
    {
        "content": "<p>Yeah go ahead!  We'll see how much I remember though...</p>",
        "id": 316459127,
        "sender_full_name": "Leo Ericson",
        "timestamp": 1671284338
    },
    {
        "content": "<p>Hello, I'd like to use mathlib for discrete maths, and thus want to contribute what is required before and after finset. In order to do so I need some permissions to the github repo.</p>",
        "id": 318128813,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1672160115
    },
    {
        "content": "<p>Are you talking about lean 3 or lean 4, and what's your GitHub username?</p>",
        "id": 318129762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672160526
    },
    {
        "content": "<p>I'm talking about lean 4, and my github username is <code>qawbecrdtey</code>.</p>",
        "id": 318130083,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1672160666
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> do you also do mathlib4 requests?</p>",
        "id": 318137389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672163973
    },
    {
        "content": "<p>yes</p>",
        "id": 318137431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672163995
    },
    {
        "content": "<p>Hello! As a new member, I want to contribute to mathlib by implementing Bezout's identity and Euler's totient theorem. For the second I will be happy to get some advice on defining Euler's function (specifically the way to count the coprime numbers before n) and defining the reduced residue system modulo n. Thank you!</p>",
        "id": 320189859,
        "sender_full_name": "Aleksandar Milchev",
        "timestamp": 1673259749
    },
    {
        "content": "<p>Hey! We already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod\">docs#zmod</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.totient\">docs#nat.totient</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.pow_totient\">docs#zmod.pow_totient</a> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 320190346,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673259870
    },
    {
        "content": "<p>Bézout's identity is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_gcd_eq_mul_add_mul\">docs#exists_gcd_eq_mul_add_mul</a></p>",
        "id": 320190482,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673259905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/320190346\">said</a>:</p>\n<blockquote>\n<p>Hey! We already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod\">docs#zmod</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.totient\">docs#nat.totient</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.pow_totient\">docs#zmod.pow_totient</a> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n</blockquote>\n<p>Hey! Thank you for the references! Do you have the general formula of Euler's totient function (the one using the prime factors of n)?</p>",
        "id": 320260186,
        "sender_full_name": "Aleksandar Milchev",
        "timestamp": 1673279628
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.totient_eq_div_factors_mul\">docs#nat.totient_eq_div_factors_mul</a> and the theorems around it</p>",
        "id": 320260720,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1673279764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/320260720\">said</a>:</p>\n<blockquote>\n<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.totient_eq_div_factors_mul\">docs#nat.totient_eq_div_factors_mul</a> and the theorems around it</p>\n</blockquote>\n<p>Thank you for that! I found the formula. </p>\n<p>Sorry for the many questions, but I looked carefully at all results about the int.floor function, but couldn't find floor (floor(x)/n) = floor(x/n) and floor (x+1/2) = floor (2x) - floor(x). There is an interesting fact about floor(m/n), which follows from the first result as well. Did I miss something or these are not in mathlib? If they aren't, I will be happy to implement them. Thank you!</p>",
        "id": 320272259,
        "sender_full_name": "Aleksandar Milchev",
        "timestamp": 1673282400
    },
    {
        "content": "<p>Let's see... <a href=\"https://leanprover-community.github.io/mathlib_docs/find/floor_div\">docs#floor_div</a></p>",
        "id": 320279130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673284223
    },
    {
        "content": "<p>The first hit seems to be the first formula you mentioned.</p>",
        "id": 320279296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673284283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/320279130\">said</a>:</p>\n<blockquote>\n<p>Let's see... <a href=\"https://leanprover-community.github.io/mathlib_docs/find/floor_div\">docs#floor_div</a></p>\n</blockquote>\n<p>I tried to follow the link, but it said that the page is no longer available, so I just looked at <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/order/floor.html#nat.floor_div_nat\">https://leanprover-community.github.io/mathlib_docs/algebra/order/floor.html#nat.floor_div_nat</a>, but it is not the same as the result I mentioned as it says that floor (a/n) = a/n if we use natural division.</p>",
        "id": 320281710,
        "sender_full_name": "Aleksandar Milchev",
        "timestamp": 1673284907
    },
    {
        "content": "<p>You get a 404 error, but below that you get a list of matches</p>",
        "id": 320284162,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673285604
    },
    {
        "content": "<p>Did you need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.floor_div_eq_div\">https://leanprover-community.github.io/mathlib_docs/find/nat.floor_div_eq_div</a> ?</p>",
        "id": 320284233,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673285630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/320284162\">said</a>:</p>\n<blockquote>\n<p>You get a 404 error, but below that you get a list of matches</p>\n</blockquote>\n<p>Yeah, I looked at the matches, but there doesn't seem to be the same.<br>\nThe one you have sent says that floor(m/n) = m/n using integer division, so it's not the same. The result I want to prove is that for all real numbers x and n, we have floor(floor(x)/n) = floor(x/n), using normal division.</p>",
        "id": 320316556,
        "sender_full_name": "Aleksandar Milchev",
        "timestamp": 1673293622
    },
    {
        "content": "<p>This is what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.floor_div_nat\">docs#nat.floor_div_nat</a> says.</p>",
        "id": 320335306,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673300024
    },
    {
        "content": "<p>For any natural number <code>n</code>, <code>floor n = n</code>, so your <code>floor (floor x / n) = floor (x / n)</code> simply becomes <code>floor x / n = x / n</code>, <strong>unless</strong> you include a coercion to <code>ℚ</code> in the middle, in which case it becomes <code>floor (floor x / n : ℚ) = floor (x / n : ℚ)</code>. Then <code>nat.floor_div_nat</code> + <code>nat.floor_div_eq_div</code> gives you the result.</p>",
        "id": 320335609,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673300157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"572391\">Aleksandar Milchev</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib/near/320316556\">said</a>:</p>\n<blockquote>\n<p>The result I want to prove is that for all <strong>real numbers</strong> x and n, we have floor(floor(x)/n) = floor(x/n), using normal division.</p>\n</blockquote>\n<p>That's false. Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>n</mi><mo>=</mo><mn>0.5</mn></mrow><annotation encoding=\"application/x-tex\">x=n=0.5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0.5</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">⌊</mo><mfrac><mrow><mo fence=\"true\">⌊</mo><mn>0.5</mn><mo fence=\"true\">⌋</mo></mrow><mn>0.5</mn></mfrac><mo fence=\"true\">⌋</mo></mrow><mo>=</mo><mrow><mo fence=\"true\">⌊</mo><mfrac><mn>0</mn><mn>0.5</mn></mfrac><mo fence=\"true\">⌋</mo></mrow><mo>=</mo><mrow><mo fence=\"true\">⌊</mo><mn>0</mn><mo fence=\"true\">⌋</mo></mrow><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\left\\lfloor\\frac{\\left\\lfloor{0.5}\\right\\rfloor}{0.5}\\right\\rfloor=\\left\\lfloor\\frac0{0.5}\\right\\rfloor=\\left\\lfloor0\\right\\rfloor=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.8em;vertical-align:-0.65em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">⌊</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0.5</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"minner mtight\"><span class=\"mopen mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">⌊</span></span><span class=\"mord mtight\"><span class=\"mord mtight\">0.5</span></span><span class=\"mclose mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">⌋</span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">⌋</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.35em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">⌊</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0.5</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">⌋</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">⌊</span><span class=\"mord\">0</span><span class=\"mclose delimcenter\" style=\"top:0em;\">⌋</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">⌊</mo><mfrac><mn>0.5</mn><mn>0.5</mn></mfrac><mo fence=\"true\">⌋</mo></mrow><mo>=</mo><mrow><mo fence=\"true\">⌊</mo><mn>1</mn><mo fence=\"true\">⌋</mo></mrow><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\left\\lfloor\\frac{0.5}{0.5}\\right\\rfloor=\\left\\lfloor1\\right\\rfloor=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.35em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">⌊</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0.5</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0.5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">⌋</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">⌊</span><span class=\"mord\">1</span><span class=\"mclose delimcenter\" style=\"top:0em;\">⌋</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>",
        "id": 320370899,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1673320486
    },
    {
        "content": "<p>It's true if <code>n</code> is a positive natural number:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"bp\">↑⌊</span><span class=\"n\">x</span><span class=\"bp\">⌋</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"bp\">⌋</span> <span class=\"bp\">=</span> <span class=\"bp\">⌊</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"bp\">⌋</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int.floor_congr</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">nat.cast_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span> <span class=\"n\">hn'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))],</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">int.le_floor</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320372712,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1673322245
    },
    {
        "content": "<p>It's also true for <code>n = 0</code>, but only in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"bp\">↑⌊</span><span class=\"n\">x</span><span class=\"bp\">⌋</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"bp\">⌋</span> <span class=\"bp\">=</span> <span class=\"bp\">⌊</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"bp\">⌋</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span> <span class=\"n\">apply</span> <span class=\"n\">int.floor_congr</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat.cast_pos</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ne_zero.pos</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span> <span class=\"n\">hn'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">n.succ</span><span class=\"o\">))],</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">int.le_floor</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320375002,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1673324548
    },
    {
        "content": "<p>The lemmas mentioned earlier make it so that you don't need to go down this far in the proof. I am not at a computer right now but you should be able to prove it the way I described in my last message</p>",
        "id": 320385220,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673333274
    }
]