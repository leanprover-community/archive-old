[
    {
        "content": "<p>Got it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.map_fst_zip_is_prefix</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.map</span> <span class=\"n\">prod.fst</span> <span class=\"o\">(</span><span class=\"n\">l1.zip</span> <span class=\"n\">l2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">l1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l1</span> <span class=\"n\">generalizing</span> <span class=\"n\">l2</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">list.nil</span> <span class=\"o\">:</span> <span class=\"n\">l2</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.zip_nil_left</span><span class=\"o\">,</span> <span class=\"n\">list.map_nil</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">list.cons</span> <span class=\"o\">:</span> <span class=\"n\">l1_hd</span> <span class=\"n\">l1_tl</span> <span class=\"n\">l1_ih</span> <span class=\"n\">l2</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">induction</span> <span class=\"n\">l2</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">list.nil</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">list.is_prefix</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">exists.intro</span> <span class=\"o\">(</span><span class=\"n\">l1_hd</span> <span class=\"o\">::</span> <span class=\"n\">l1_tl</span><span class=\"o\">),</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.zip_nil_right</span><span class=\"o\">,</span> <span class=\"n\">list.map_nil</span><span class=\"o\">,</span> <span class=\"n\">list.nil_append</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">],</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">list.cons</span> <span class=\"o\">:</span> <span class=\"n\">l2_hd</span> <span class=\"n\">l2_tl</span> <span class=\"n\">l2_ih</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.map</span><span class=\"o\">,</span> <span class=\"n\">list.zip_cons_cons</span><span class=\"o\">],</span>\n      <span class=\"n\">rewrite</span> <span class=\"n\">list.prefix_cons_inj</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">l1_ih</span> <span class=\"n\">l2_tl</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.map_fst_zip_nodup</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">l1.nodup</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">prod.fst</span> <span class=\"o\">(</span><span class=\"n\">l1.zip</span> <span class=\"n\">l2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">nodup</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">list.map</span> <span class=\"n\">prod.fst</span> <span class=\"o\">(</span><span class=\"n\">l1.zip</span> <span class=\"n\">l2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">l1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list.is_prefix.sublist</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list.map_fst_zip_is_prefix</span><span class=\"o\">,</span>\n\n  <span class=\"n\">exact</span> <span class=\"n\">list.nodup.sublist</span> <span class=\"n\">s1</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 311099287,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668922127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Kayla Thomas</span> has marked this topic as resolved.</p>",
        "id": 311099301,
        "sender_full_name": "Notification Bot",
        "timestamp": 1668922146
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 311099310,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668922169
    },
    {
        "content": "<p>Here's a golfed proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">map_fst_zip_is_prefix</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">l1.zip</span> <span class=\"n\">l2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">prod.fst</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">l1</span>\n<span class=\"bp\">|</span> <span class=\"n\">as</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zip_nil_right</span><span class=\"o\">,</span> <span class=\"n\">map_nil</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">nil_prefix</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">bs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zip_nil_left</span><span class=\"o\">,</span> <span class=\"n\">map_nil</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zip_cons_cons</span><span class=\"o\">,</span> <span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">prefix_cons_inj</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">map_fst_zip_is_prefix</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">map_fst_zip_nodup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">l1.nodup</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">prod.fst</span> <span class=\"o\">(</span><span class=\"n\">l1.zip</span> <span class=\"n\">l2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">nodup</span> <span class=\"o\">:=</span>\n<span class=\"n\">h1.sublist</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">list.map_fst_zip_is_prefix</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sublist</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">list</span>\n</code></pre></div>",
        "id": 311126186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668943744
    },
    {
        "content": "<p>I think that first lemma should accompany <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map_fst_zip\">docs#list.map_fst_zip</a></p>",
        "id": 311131321,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668946490
    }
]