[
    {
        "content": "<p>Using mathlib, I would like to prove a statement for <code>finset</code>s which I am able to establish for (finite) <code>set</code>s.<br>\nAn illustration is shown here (the interval endpoints are simplified for illustration, but I intend to use expressions for the endpoints in an actual proof):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">finset.Ico</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">finset.Icc</span> <span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--Prove the statement for sets:</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set.Ico</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.Ico_union_Icc_eq_Icc</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">one_le_two</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"c1\">--QED</span>\n\n  <span class=\"c1\">--How to establish for finsets?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><strong>I'm not sure how to get from the statement involving <code>set</code> to the statement involving <code>finset</code>.</strong></p>\n<p>The motivation for wanting the result on <code>finset</code>s is so that I can go on to prove equalities between \"big operator\" sums (defined on <code>finset</code>s).</p>\n<p>Thank you for any suggestions.</p>",
        "id": 306291009,
        "sender_full_name": "Dave Jones",
        "timestamp": 1666804896
    },
    {
        "content": "<p>Are you looking for a general solution or a proof for the interval union statement you mention?</p>",
        "id": 306294166,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666805844
    },
    {
        "content": "<p>Because for the latter I'd try looking for similarly named finest lemmas, while the former is slightly harder</p>",
        "id": 306294357,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666805906
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.coe_inj\">docs#finset.coe_inj</a>, but then you still need to \"push through\" the coercion across your various operations.</p>",
        "id": 306295968,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666806379
    },
    {
        "content": "<p>E.g., this concludes your proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine</span> <span class=\"n\">finset.coe_inj.mp</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.coe_union</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_Icc</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_Ico</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 306296178,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666806455
    },
    {
        "content": "<p>Oh nice, I was thinking of <code>set.finite.to_finset</code>, but this is better</p>",
        "id": 306299295,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666807369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Thank you so much for the suggestion! <br>\nI was trying to solve this through coercions somehow, but was having no luck.<br>\nA \"push through\" coercion solution was just the sort of thing I was expecting to have to do here (but all of my flailing wasn't working).</p>\n<p>I'll review this and give this a go once I can get back in front of VS Code.<br>\nThanks again!</p>",
        "id": 306303523,
        "sender_full_name": "Dave Jones",
        "timestamp": 1666808735
    }
]