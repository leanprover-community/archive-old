[
    {
        "content": "<p>do we have any support for list comprehension in Lean? Something similar to Haskell with support to guards?</p>",
        "id": 202522438,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1593567825
    },
    {
        "content": "<p>I don't think so, but you can use <code>do</code> notation:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;-</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span>\n              <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">))</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">foo</span> <span class=\"mi\">10</span>\n</code></pre></div>",
        "id": 202522897,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593568419
    },
    {
        "content": "<p>Cool! I didn't know about the do notation. Thank you.</p>",
        "id": 202523814,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1593569454
    },
    {
        "content": "<p>The <code>TPinL</code> does not mention it.</p>",
        "id": 202523926,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1593569576
    },
    {
        "content": "<p>There's some discussion about it in chapter 6 of the Hitchhiker's guide to logical verification: <a href=\"https://leanprover-community.github.io/learn.html#textbooks\">https://leanprover-community.github.io/learn.html#textbooks</a></p>",
        "id": 202523980,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593569649
    }
]