[
    {
        "content": "<p>At some point through a proof Lean started being very slow (each time I write something, even simple tactics, it takes more than 1 minute to update the goal) and the rest of my laptop seems to work fine! Does anyone have any tip on what I could try to do or any way I can troubleshoot Lean?</p>",
        "id": 201372266,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592561593
    },
    {
        "content": "<p>What is probably happening is that you have written a proof which takes a lot of time to compile, and every time you press a key Lean is recompiling the proof.</p>",
        "id": 201373050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592562270
    },
    {
        "content": "<p>The reason that mathlib is written in heiroglyphics is precisely because they want all proofs to compile as fast as possible. There are several ways you can proceed. Firstly, there's some trick with putting <code>end.</code> instead of <code>end</code> after the problematic proof; this is supposed to tell Lean not to keep compiling it. This won't work if the problem is the proof you're currently working on though. Assuming the problem is a long proof you're finished with, another quick fix is to comment out the long proof, replace it with <code>sorry</code>, and then put it back in the end, and another is to take out that proof and put it in another file, which you can import. Note that the problematic line can just be one line such as <code>finish</code> or another expensive tactic.</p>",
        "id": 201373243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592562422
    },
    {
        "content": "<p>If the problem is with a proof you're working on (i.e. you've still not finished the proof but Lean takes an age to compile the proof) then you might want to think about refactoring the proof. Best Lean style is lots of short proofs, not one big one -- this is how Grothendieck wrote mathematics as well. Deligne once said that it was amazing, he seemed to be doing a bunch of things which all looked trivial, and then something highly non-trivial would come out at the end. Lean likes to see mathematicians isolating the trivial steps and proving them as independent lemmas, rather than proving everything you need in one big proof. If you find yourself writing <code>have sublemma : &lt;independent thing&gt;, {proof of sublemma}</code> in the middle of your proof then that's a great example of something which can go outside instead.</p>",
        "id": 201373436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592562575
    },
    {
        "content": "<p>Ok thanks that is very useful. I am a bit surprised because it looks to be a fairly simple and basic proof, so I am wondering if I am doing something specific that slows it down. Do you have any specific tip for improving it?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">function</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_of_images_eq_image_of_prod</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">t</span>\n  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">z</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">h2</span> <span class=\"n\">h4</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201373549,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592562648
    },
    {
        "content": "<p>Can you please make it a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? The code above doesn't compile as it stands.</p>",
        "id": 201373750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592562823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Slow.20Lean/near/201373750\">said</a>:</p>\n<blockquote>\n<p>Can you please make it a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? The code above doesn't compile as it stands.</p>\n</blockquote>\n<p>Done, sorry, I did not include the set import!</p>",
        "id": 201373915,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592562942
    },
    {
        "content": "<p>Thanks. This code takes under a second to compile for me. Did you say something was taking a minute?</p>",
        "id": 201373976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592562967
    },
    {
        "content": "<p>Yes but it does compile fast for me as well on a separate file, is it possible that it conflicts with something on my original file?</p>",
        "id": 201374017,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592563007
    },
    {
        "content": "<p>With <code>set_option profiler true</code> I get</p>\n<div class=\"codehilite\"><pre><span></span><code>parsing took 33.7ms\ntype checking of prod_of_images_eq_image_of_prod took 0.102ms\ndecl post-processing of prod_of_images_eq_image_of_prod took 0.00224ms\nelaboration of prod_of_images_eq_image_of_prod took 798ms\n</code></pre></div>\n\n\n<p>It's hard to help if I cannot easily reproduce the problem at my end.</p>",
        "id": 201374051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592563032
    },
    {
        "content": "<p>You ideally need to post some code which enables me to reproduce the problem at my end without any effort on my part -- this is the best way to get help.</p>",
        "id": 201374088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592563070
    },
    {
        "content": "<p>If this entails posting 1000 lines of code then you can post it on a gist or other pastey sites</p>",
        "id": 201374188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592563124
    },
    {
        "content": "<p>Ok thanks! I will try to understand first on my own as I did not realize it compiled fast on a separate file before sending the code to you and my code uses files downloaded from still-non-approved push-requests so it takes a bit of effort to produce a mwe right now, but I will definitely come back if I do not manage to solve this on my own! Thanks a lot for the help up to now!</p>",
        "id": 201374487,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592563351
    },
    {
        "content": "<p>Don't underestimate <code>leanproject</code>. If you have 1000 lines of code which compiles only with a non-master branch of mathlib then you can just post the code, say which branch to use, and I can use leanproject to check out the non-master branch oleans.</p>",
        "id": 201374622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592563450
    },
    {
        "content": "<p>Even a non-PR'ed branch of mathlib, as long as it's on the leanprover-community version, gets compiled by the system and the oleans get dumped on the azure server.</p>",
        "id": 201374704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592563525
    },
    {
        "content": "<p>And if you're pushing to a fork of mathlib on github because you don't have push access to non-master branches of mathlib, then you can just ask for access (the advantage of access is precisely that the system makes oleans for everyone; this makes PR reviews much easier for people).</p>",
        "id": 201374793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592563580
    },
    {
        "content": "<p>Ok I think I managed to create a mwe that compiles extremely slow for me. Here it is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">real_instances</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">local_homeomorph</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">δ</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e&#39;</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">e&#39;</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_comp</span> <span class=\"o\">{</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">η</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">ε</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e&#39;</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">δ</span> <span class=\"n\">η</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">η</span> <span class=\"n\">ε</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">f&#39;</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">e&#39;</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">f&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">local_equiv</span><span class=\"bp\">.</span><span class=\"n\">trans_source</span><span class=\"o\">],</span>\n    <span class=\"n\">tauto</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">times_cont_diff_on</span><span class=\"bp\">.</span><span class=\"n\">general_prod</span> <span class=\"o\">{</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"err\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"err\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">times_cont_diff_on</span> <span class=\"err\">𝕜</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">×</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">comp_of_prod_eq_prod_of_comp</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_of_images_eq_image_of_prod</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">t</span>\n  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">z</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">h2</span> <span class=\"n\">h4</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">local_homeomorph</span>\n</code></pre></div>\n\n\n<p>Let me know if you get the same problem!</p>",
        "id": 201375131,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592563860
    },
    {
        "content": "<p>(the lemma is at the end)</p>",
        "id": 201375158,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592563891
    },
    {
        "content": "<p>OK great, <code>prod_of_images_eq_image_of_prod</code> is taking 8 seconds to compile for me according to the profiler, so we have something to work on.</p>",
        "id": 201375737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592564348
    },
    {
        "content": "<p>It is being caused by the import. The below is slow, but if you change the import to a more primitive one, it is quick.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">real_instances</span>\n<span class=\"c1\">--import data.set.basic</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_of_images_eq_image_of_prod</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">t</span>\n  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">z</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">h2</span> <span class=\"n\">h4</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201375969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592564536
    },
    {
        "content": "<p>The issue will probably be the simplifier.</p>",
        "id": 201375984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592564554
    },
    {
        "content": "<p>Using the simplifier in the middle of a proof is not recommended, because its behaviour can change over time, which makes your proofs brittle (you update mathlib and they break).</p>",
        "id": 201376074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592564636
    },
    {
        "content": "<p>Yes, it's the simplifier. The much heavier import gave it far more options. You're not closing a goal with it, so maybe it spends a lot of time trying a gazillion simp lemmas before it decides to quit. If you use <code>squeeze_simp</code> instead of <code>simp</code> it will tell you a smaller simp set to use. Here is a fix for your problem, found with <code>squeeze_simp</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">real_instances</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_of_images_eq_image_of_prod</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">t</span>\n  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_prod</span><span class=\"o\">,</span> <span class=\"n\">exists_imp_distrib</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">exists</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">z</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">h2</span> <span class=\"n\">h4</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_prod</span><span class=\"o\">,</span> <span class=\"n\">exists_imp_distrib</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">exists</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201376316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592564825
    },
    {
        "content": "<p>However even this would not be regarded as good practice -- <code>simp</code> is supposed to close goals only.</p>",
        "id": 201376363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592564861
    },
    {
        "content": "<p>So you would suggest replacing the <code>simp only</code>s with the lemmas in square brackets and find the good combination that works?</p>",
        "id": 201376478,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592564956
    },
    {
        "content": "<p>Is this required to PR things on Mathlib?</p>",
        "id": 201376501,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592564979
    },
    {
        "content": "<p>In any case it is weird that it took 8 seconds for you and more than 20 for me (yet I thought I had a good processor: an Intel i9)</p>",
        "id": 201376591,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592565040
    },
    {
        "content": "<p>Mathlib would not accept code with non-terminal simps in. If you <em>really</em> want to use a non-terminal simp, then there's an idiom which you can do instead: you run <code>simp</code>, see the new goal, and then write <code>suffices : &lt;new goal&gt;, by simpa using this</code></p>",
        "id": 201376596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592565044
    },
    {
        "content": "<p>But my instinct is that a lemma of this size should have a very short proof; I'll see if I can find one for you.</p>",
        "id": 201376660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592565106
    },
    {
        "content": "<p>You can tell it's the end of term :D</p>",
        "id": 201376670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592565114
    },
    {
        "content": "<p>Haha thanks a lot! In if you suggest not using simps in the middle of proof I will just look for a combination of rws that works instead with the lemmas indicated by squeeze simp (it's not that I really want to use simp, but I did not really know what the standard practice was!)</p>",
        "id": 201376801,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592565230
    },
    {
        "content": "<p>Using simp only is ok (no need to express it in terms of rewrites) just not simp on its own.</p>",
        "id": 201377459,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592565823
    },
    {
        "content": "<p>You don't need any simps for this lemma</p>",
        "id": 201377514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592565848
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">real_instances</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_of_images_eq_image_of_prod</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">t</span>\n  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hfa</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hgc</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"bp\">⟩</span><span class=\"o\">],</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hfa</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hgc</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201377569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592565905
    },
    {
        "content": "<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_of_images_eq_image_of_prod</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">t</span>\n  <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hfa</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hgc</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">hfa</span> <span class=\"n\">hgc</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩⟩⟩</span>\n</code></pre></div>\n\n\n<p>as they'd say in mathlib</p>",
        "id": 201378610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592566746
    },
    {
        "content": "<p>but here's the coolest proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_of_images_eq_image_of_prod</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">t</span>\n  <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tidy</span>\n</code></pre></div>",
        "id": 201378652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592566788
    },
    {
        "content": "<p>but does it take 8 seconds again?</p>",
        "id": 201378713,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592566809
    },
    {
        "content": "<p>Yeah, that mathlib proof was just the output of <code>squeeze_tidy</code> [note to beginners: squeeze_tidy doesn't exist]</p>",
        "id": 201378743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592566830
    },
    {
        "content": "<p><code>tidy</code> likes <code>simp * at *</code> as a pretty early move</p>",
        "id": 201378774,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592566857
    },
    {
        "content": "<p>Yes, with <code>tidy</code> the proof time goes up again (to 3.5 seconds) if you import the manifold file.</p>",
        "id": 201378954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592566974
    },
    {
        "content": "<p><code>tidy?</code> finds</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_right</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_left</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_left_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_right_h</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">a_right_h_right</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">a_left_h_right</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_h_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_h_h_right</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_h_h_left</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">a_h_h_right_right</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">a_h_h_right_left</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">refl</span> <span class=\"o\">}}</span>\n</code></pre></div>\n\n\n<p>which takes about half a second.</p>",
        "id": 201379036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592567039
    },
    {
        "content": "<p>The mathlib proof is lightning fast even with the import, of course</p>",
        "id": 201379141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592567119
    },
    {
        "content": "<p>So in fact proving the result with <code>tidy?</code>, posting in the proof, removing the irrelevant <code>dsimp</code> and changing both <code>simp</code>s to <code>squeeze_simp</code> and then <code>simp only</code> cuts the time down to about 150ms, which is pretty respectable.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">real_instances</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_of_images_eq_image_of_prod</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">t</span>\n  <span class=\"o\">:=</span> <span class=\"k\">by</span>\n<span class=\"o\">{</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj_iff</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">exists</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_right</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_left</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_left_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_right_h</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">a_right_h_right</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">a_left_h_right</span><span class=\"o\">,</span>\n    <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span>\n      <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span>\n        <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span>\n          <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n        <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_h_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_h_h_right</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_h_h_left</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a_h_h_right_right</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">a_h_h_right_left</span><span class=\"o\">,</span>\n  <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span>\n    <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span>\n      <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"n\">refl</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">refl</span> <span class=\"o\">}}</span>\n</code></pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> this is a pretty long proof found by <code>tidy</code> -- pretty neat! Can you do post-processing to make <code>tidy?</code> use <code>simp only</code> instead of <code>simp</code>?</p>",
        "id": 201380848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592568390
    },
    {
        "content": "<p>How does rintro work?</p>",
        "id": 201382237,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592569548
    },
    {
        "content": "<p><code>rintro</code> is <code>intro</code> and then <code>rcases</code>, and <code>rcases</code> is just iterated <code>cases</code></p>",
        "id": 201382645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592569830
    },
    {
        "content": "<p>I think it's pretty easy to see what it's doing -- just look at the tactic state before and after the <code>rintro</code>. I am just doing <code>intro</code> and then completely taking everything apart.</p>",
        "id": 201382697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592569874
    },
    {
        "content": "<p>I'm introing a term of type <code>(b, d) ∈ (f '' s).prod (g '' t)</code> but I don't really want that term, I want witnesses to what's going on, i.e. I want the <code>a \\in s</code> such that <code>f a = b</code> etc.</p>",
        "id": 201382868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592569999
    },
    {
        "content": "<p>Ok thanks! And just for the records: would <code>tidy</code> be an acceptable proof for Mathlib?</p>",
        "id": 201383004,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592570108
    },
    {
        "content": "<p><code>rintro ⟨⟨a, ha, hfa⟩, ⟨c, hc, hgc⟩⟩,</code> is the same as</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">intro</span> <span class=\"n\">ac</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ac</span> <span class=\"k\">with</span> <span class=\"n\">hb</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ha&#39;</span> <span class=\"k\">with</span> <span class=\"n\">ha</span> <span class=\"n\">hfa</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hd</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">hc&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hc&#39;</span> <span class=\"k\">with</span> <span class=\"n\">hc</span> <span class=\"n\">hgc</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 201383018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592570125
    },
    {
        "content": "<p>The question of whether <code>tidy</code> is acceptable for mathlib is a contentious one. The argument for is that it's very clear what's happening -- the proof is \"just shuffle everything around and don't really think\". The argument against is that it makes mathlib take longer to compile.</p>",
        "id": 201383109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592570185
    },
    {
        "content": "<p>The ext1...proof was generated by <code>tidy</code> so in some sense that's the happy medium, especially after I replaced the simp with simp only -- the tidy-generated proof was pretty quick. But because tidy is just doing a bunch of very simple things (it's only using ext and cases and stuff like that) one can often construct a lightning-fast term proof and then argue that it doesn't matter that it's incomprehensible because the proof was trivial anyway so nobody actually wants to read it.</p>",
        "id": 201383348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592570319
    },
    {
        "content": "<p>Of course you can just search mathlib for tidy -- there are 288 results, but some of them are in comments.</p>",
        "id": 201383454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592570390
    },
    {
        "content": "<p>If you removed some of the things <code>tidy</code> does (mostly <code>simp</code>) it would probably quickly produce a fast proof in this example</p>",
        "id": 201383529,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592570415
    },
    {
        "content": "<p>In any case, I don't think it is that hard to write a tactic that produces basically your \"mathlib mode\" proof</p>",
        "id": 201383543,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592570431
    },
    {
        "content": "<p>That's an interesting point. Note that the majority of times <code>tidy</code> appears is in the category theory part of the repo, where it plays a very important role.</p>",
        "id": 201383605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592570477
    },
    {
        "content": "<p>another thing <code>tidy</code> does that is probably useless most of the time is <code>simp ... at *</code></p>",
        "id": 201383653,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592570508
    },
    {
        "content": "<p>but maybe this isn't that much more expensive than <code>simp ...</code>--I don't know</p>",
        "id": 201383729,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592570538
    },
    {
        "content": "<p>I mean, in human proofs the <code>at *</code> part is probably used &lt; 10% of the time.</p>",
        "id": 201383769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592570563
    },
    {
        "content": "<p>Can we tell tidy not to use simp?</p>",
        "id": 201383795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592570585
    },
    {
        "content": "<p>It never occurred to me to use simp when I was constructing the tactic-free proof.</p>",
        "id": 201383814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592570608
    },
    {
        "content": "<p>I don't think you can easily remove tactics from the list but you can copy <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/tidy.lean#L41-L57\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/tidy.lean#L41-L57</a> and pare it down</p>",
        "id": 201383922,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592570685
    },
    {
        "content": "<p>dammit stupid tidy doesn't solve it if I remove simp! It can't solve this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">6</span> <span class=\"n\">goals</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">,</span>\n<span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">a_w_fst</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">a_w_snd</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">a_h_left_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a_w_fst</span><span class=\"o\">,</span> <span class=\"n\">a_w_snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a_h_left_right</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a_w_fst</span><span class=\"o\">,</span> <span class=\"n\">a_w_snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"n\">x_snd</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span>\n<span class=\"n\">x_fst</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n<span class=\"err\">⊢</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 201384158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592570831
    },
    {
        "content": "<p>hey, <code>simp</code> can't solve it either :-/</p>",
        "id": 201384214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592570870
    },
    {
        "content": "<p>try changing <code>fsplit</code> to <code>split</code></p>",
        "id": 201384286,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592570905
    },
    {
        "content": "<p>I'm curious whether this helps</p>",
        "id": 201384295,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592570910
    },
    {
        "content": "<p><code>  fsplit                                      &gt;&gt; pure \"fsplit\",</code></p>",
        "id": 201384308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592570924
    },
    {
        "content": "<p>Just the one on the left?</p>",
        "id": 201384330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592570932
    },
    {
        "content": "<p>well, both if you want the proof output to be accurate</p>",
        "id": 201384346,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592570943
    },
    {
        "content": "<p>but at least the one on the left yes</p>",
        "id": 201384368,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592570960
    },
    {
        "content": "<p>Works!</p>",
        "id": 201384385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592570967
    },
    {
        "content": "<p>Modded <code>tidy</code> finds</p>\n<div class=\"codehilite\"><pre><span></span><code>   <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_right</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_left</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_left_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_right_h</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">2</span> <span class=\"o\">{</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ext1</span> <span class=\"o\">[]</span> <span class=\"o\">{</span><span class=\"n\">new_goals</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">new_goals</span><span class=\"bp\">.</span><span class=\"n\">all</span><span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">unfold_coes</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">unfold_coes</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">4</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_w</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_h_left</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">injections_and_clear</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">injections_and_clear</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 201384482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592571009
    },
    {
        "content": "<p>which is compiling in just over 100ms</p>",
        "id": 201384546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592571060
    },
    {
        "content": "<p>I'm assuming that adding the manifold import won't change the timing, but of course I'm now orangebaring.</p>",
        "id": 201384639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592571115
    },
    {
        "content": "<p>oh rofl the import doesn't compile now :-)</p>",
        "id": 201384871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592571229
    },
    {
        "content": "<p>oh wait I can roll back the tidy edit :D</p>",
        "id": 201384976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592571258
    },
    {
        "content": "<p>yeah bingo, so this is really an instance where the weakened tidy finds a better proof, because it's not allowed to use simp so the import doesn't screw it up. Recall that normal <code>tidy?</code> produces a proof which with the manifold import takes 500ms to compile.</p>",
        "id": 201385243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592571394
    },
    {
        "content": "<p>Weakened <code>tidy?</code> produces a proof which takes 100ms to compile with the manifold import.</p>",
        "id": 201385320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592571419
    },
    {
        "content": "<p>Sorry again for another low level question: how does <code>rcases</code> work? I can't find its syntax</p>",
        "id": 201385499,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592571494
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\">tactic#rcases</a> ?</p>",
        "id": 201385524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592571506
    },
    {
        "content": "<p>I had a story for why <code>split</code> should help over <code>fsplit</code> but now I realize it's not really compatible with the original tidy succeeding with <code>split</code></p>",
        "id": 201385554,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592571530
    },
    {
        "content": "<p>Ok thanks!</p>",
        "id": 201385623,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592571548
    },
    {
        "content": "<p>do you mean original tidy succeeding with <code>fsplit</code>?</p>",
        "id": 201385664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592571572
    },
    {
        "content": "<p>Oh yes, sorry</p>",
        "id": 201385760,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592571605
    },
    {
        "content": "<p>Do you know also a place where I can find an example of <code>rcases</code>? I don't understand the documentation</p>",
        "id": 201386895,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592572175
    },
    {
        "content": "<p>Well never mind maybe I got it</p>",
        "id": 201387171,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592572316
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">prod_of_images_eq_image_of_prod</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">t</span>\n  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">temp</span> <span class=\"k\">with</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hfa</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hgc</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"bp\">⟩</span><span class=\"o\">],</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hfa</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hgc</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201387308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592572373
    },
    {
        "content": "<p>Ok thanks!!</p>",
        "id": 201387339,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592572390
    },
    {
        "content": "<p>When a term is just made up directly of smaller terms, we're just pulling the smaller terms out. For example a term of type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x\\in f(Y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span></span></span></span> can be taken apart into a term <code>y : Y</code> and a proof that <code>f y = x</code> (which is another term, in type theory)</p>",
        "id": 201387485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592572449
    },
    {
        "content": "<p>The commas in the pointy brackets are right associative, so <code>⟨a, ha, hfa⟩</code> means <code>⟨a, ⟨ha, hfa⟩⟩</code></p>",
        "id": 201387692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592572546
    },
    {
        "content": "<p>Look at how I took <code>temp</code> apart with <code>cases</code>, each time turning one term into 2.</p>",
        "id": 201387791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592572580
    },
    {
        "content": "<p>It's just some kind of tree, and <code>rcases</code> enables me to take it all apart in one go.</p>",
        "id": 201387846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592572602
    },
    {
        "content": "<p>(<code>ac</code> = <code>temp</code>)</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">intro</span> <span class=\"n\">ac</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ac</span> <span class=\"k\">with</span> <span class=\"n\">hb</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ha&#39;</span> <span class=\"k\">with</span> <span class=\"n\">ha</span> <span class=\"n\">hfa</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hd</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">hc&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hc&#39;</span> <span class=\"k\">with</span> <span class=\"n\">hc</span> <span class=\"n\">hgc</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 201387907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592572626
    },
    {
        "content": "<p>Everything has only one constructor so there are no <code>|</code>s involved.</p>",
        "id": 201388012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592572681
    },
    {
        "content": "<p>Ok thank you very much!</p>",
        "id": 201394694,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592575679
    },
    {
        "content": "<p>Moreover I was wondering: as a general strategy, if when doing a proof I need to use simps to make it human, supposing that at the end of the proof I realize the simps can be removed, should I remove them or replace them with the output of squeeze_simp, to leave the proof readable?</p>",
        "id": 201395011,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592575812
    },
    {
        "content": "<p>I mean what is the standard practice in mathlib?</p>",
        "id": 201395096,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592575851
    },
    {
        "content": "<p>Standard practice is to replace a non-terminal simp with the output of squeeze simp.</p>",
        "id": 201395296,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592575932
    },
    {
        "content": "<p>For really basic statements like this, it's better to avoid simp completely if possible</p>",
        "id": 201395315,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592575945
    },
    {
        "content": "<p>If you can write it as a chain of rewrites thats nice, but you'll find a lot of <code>simp only</code> in mathlib.</p>",
        "id": 201395380,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592575977
    },
    {
        "content": "<p>in other words, if the human proof is something like \"they're the same\", then human readability of the proof is not a factor</p>",
        "id": 201395392,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592575983
    },
    {
        "content": "<p>Ok but I mean what if the simp can be completely removed without replacing them with the output of <code>squeeze_simp</code>? The point is that if I remove them completely, if someone clicks in the middle of my proofs the goal is like 20 lines of incomprehensible symbols</p>",
        "id": 201396174,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592576349
    },
    {
        "content": "<p>But the proof still works</p>",
        "id": 201396190,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592576357
    },
    {
        "content": "<p>Not in the proof of this post I mean, in other proofs</p>",
        "id": 201396259,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592576389
    },
    {
        "content": "<p>What do you mean by completely removed? Presumably simp was doing something that should then be done by another tactic or term?<br>\nIt depends, for one example: a lot of simp lemmas are proved by <code>rfl</code> and so a combination of lemmas proved in this way might also be provable by <code>rfl</code> instead of <code>simp, refl</code>. Then <code>simp</code> could be removed but <code>refl</code> would have to work harder to reprove all the simp lemmas along the way. For example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>on my machine the first takes 1.3 s and the second 0.3s, so \"removing simp\" and replacing it with a more low level tactic in this case is not helpful.</p>",
        "id": 201398536,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592577502
    },
    {
        "content": "<p>And squeeze simp output  takes 0.07s!</p>",
        "id": 201398730,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592577608
    },
    {
        "content": "<p>And finally the explicit rw proof <code>rw [nat.cast_bit0, nat.cast_bit1, nat.cast_bit0, nat.cast_one],</code> takes only 9ms, but nobody wants to write that out every time ;) they have a goal like this. <code>norm_num</code> takes about 0.1s and <code>norm_cast</code> roughly the same as simp only.<br>\nOf these I'd say the \"best\" is the tactic specialised to goals like this \"norm_cast\", it's efficient, short and you are saying what you mean which makes it far more readable than the rw or simps really.<br>\nIn conclusion use the profiler and experiment and have fun ;)!</p>",
        "id": 201399930,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592578160
    }
]