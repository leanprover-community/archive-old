[
    {
        "content": "<p>lemma inf_lt {A : set ℝ} {x : ℝ} (hx : x is_an_inf_of A) :<br>\n  ∀ y, x &lt; y → ∃ a ∈ A, a &lt; y :=<br>\nbegin<br>\n  -- Let <code>y</code> be any real number.<br>\n  intro y,<br>\n  -- Let's prove the contrapositive<br>\n  --  ( ... )<br>\nend</p>\n<p>How does Lean know that <code>intro y</code> means that <code>y</code> is asserted to be a real number?  Is that hidden in the prototype somehow?</p>",
        "id": 174100285,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566767714
    },
    {
        "content": "<p>It guesses that it should be a real, because of the inequality <code>x &lt; y</code> and <code>x</code> is real.</p>",
        "id": 174100480,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566768099
    },
    {
        "content": "<p>It is very important to understand that the first and most essential automation that Lean (or any self-respecting proof assistant) will provide is elaboration: filling in missing information. In the statement I could have written <code>∀ y :ℝ , x &lt; y → ∃ a ∈ A, a &lt; y</code>. But Lean figured out the type of <code>y</code> from the following bit <code>x &lt; y</code>.</p>",
        "id": 174100663,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566768444
    },
    {
        "content": "<p>Learning Lean is a greater experience than I once thought that it would be.  What I mean is that I'm enjoying it and am also impressed with its features.</p>",
        "id": 174100773,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566768615
    },
    {
        "content": "<p>The two main types of elaboration that Lean performs are unification and type class inference. Here you see unification. When Lean meets \"∀ y,\", where the type of <code>y</code> is not provided, it creates a so-called meta-variable for this missing information, typically denoted by something like <code>?M_1</code>. Then reading <code>x &lt; y</code> and knowing that <code>x</code> has type real creates a constraint <code>?M_1 =  ℝ</code> that is straightforward to \"unify\" by setting <code>?M_1</code>, but there are many cases where Lean has to work much harder (e.g. cleverly unfolding definitions).</p>",
        "id": 174100809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566768702
    },
    {
        "content": "<p>But then we immediately get a new problem while reading <code>x &lt; y</code>. It also triggers a type class resolution elaboration : we need to find a meaning for <code>&lt;</code> on <code>ℝ</code>, ie an \"instance\" of <code>has_lt ℝ</code>.</p>",
        "id": 174100916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566768872
    },
    {
        "content": "<p>You can type</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>and look at the bottom of the Lean messages view to see the effort Lean did to find this instance. Where I am it succeeds right away. But looking at something slightly more complicated, like <code>comm_ring ℝ</code>, I see:</p>\n<div class=\"codehilite\"><pre><span></span>[class_instances]  class-instance resolution trace\n[class_instances] (0) ?x_0 : comm_ring ℝ := @Huber_ring.to_comm_ring ?x_1 ?x_2\n[class_instances] (0) ?x_0 : comm_ring ℝ := @uniform_space.comm_ring ?x_1 ?x_2 ?x_3 ?x_4 ?x_5\nfailed is_def_eq\n[class_instances] (0) ?x_0 : comm_ring ℝ := @uniform_space.completion.comm_ring ?x_6 ?x_7 ?x_8 ?x_9 ?x_10\nfailed is_def_eq\n[class_instances] (0) ?x_0 : comm_ring ℝ := @localization.comm_ring ?x_11 ?x_12 ?x_13 ?x_14\nfailed is_def_eq\n[class_instances] (0) ?x_0 : comm_ring ℝ := @subalgebra.comm_ring ?x_15 ?x_16 ?x_17 ?x_18 ?x_19 ?x_20\nfailed is_def_eq\n[class_instances] (0) ?x_0 : comm_ring ℝ := @algebra.comap.comm_ring ?x_21 ?x_22 ?x_23 ?x_24 ?x_25 ?x_26 ?x_27 ?x_28\nfailed is_def_eq\n[class_instances] (0) ?x_0 : comm_ring ℝ := complex.comm_ring\nfailed is_def_eq\n[class_instances] (0) ?x_0 : comm_ring ℝ := real.comm_ring\n</pre></div>\n\n\n<p>Because I'm typing this randomly in the middle of a file about Huber rings (a crucial piece of the definition of perfectoid spaces), Lean first try to find a Huber ring structure on <code>ℝ</code> then see if it's the separated quotient of some uniform space, or the completion of a topological ring (which is not how it's currently defined in mathlib) or a localization etc. until it tries the correct instance.</p>",
        "id": 174101117,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566769265
    },
    {
        "content": "<p>Actually this process is what most experienced Lean users complain about the most frequently in this forum. For instance, I wish Lean would first try to search an instance by name, following the naming convention it uses itself when you don't name an instance. In that case it would find <code>real.comm_ring</code> right away.</p>",
        "id": 174101171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566769357
    },
    {
        "content": "<p>The above trace is very short because there is no failed attempt that goes on recursively trying to solve other instance resolutions. But sometimes it gets really hairy, and fails after hitting some maximal depth search</p>",
        "id": 174101231,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566769469
    },
    {
        "content": "<p>And now I'll go sleeping. Actual computer science experts will correct what I explained wrong (I'm a mathematician).</p>",
        "id": 174101238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566769508
    },
    {
        "content": "<p>Thank you for the details. I will try out that trace command :)</p>",
        "id": 174101414,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566769836
    }
]