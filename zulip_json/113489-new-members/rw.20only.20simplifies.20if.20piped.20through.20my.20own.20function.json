[
    {
        "content": "<p>My first beginners question. I tampered with this since a while, but maybe somebody has a quick explanation for this:</p>\n<p><a href=\"https://gist.github.com/tobig/92b17c8cac76fd07e1537c9131a25260\" target=\"_blank\" title=\"https://gist.github.com/tobig/92b17c8cac76fd07e1537c9131a25260\">https://gist.github.com/tobig/92b17c8cac76fd07e1537c9131a25260</a></p>",
        "id": 133491472,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536299577
    },
    {
        "content": "<p>Rewriting with my own theorem works well, but if I directly use imp_iff_not_or things break</p>",
        "id": 133491484,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536299608
    },
    {
        "content": "<p>with \"function expected at\"</p>",
        "id": 133491491,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536299634
    },
    {
        "content": "<p>Probably a beginners mistake. It seems my declaration introduces some additional information which help the proof go through.</p>",
        "id": 133491541,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536299674
    },
    {
        "content": "<p>If you check the definition of <code>imp_iff_not_or</code>, (type <code>#check imp_iff_not_or</code> in your Lean buffer), you see that it does not take <em>explicit</em> arguments, only implicit ones</p>",
        "id": 133491641,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536299816
    },
    {
        "content": "<p>That means that they are meant to be inferred. But if you want to specify then, you can write <code>@imp_iff_not_or</code> and then you have to provide an argument for the implicit and explicit arguments.</p>",
        "id": 133491663,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536299868
    },
    {
        "content": "<p>For reference:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">imp_iff_not_or</span>\n<span class=\"c1\">-- imp_iff_not_or : ?M_1 → ?M_2 ↔ ¬?M_1 ∨ ?M_2</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">imp_iff_not_or</span>\n<span class=\"c1\">-- imp_iff_not_or : ∀ {a b : Prop} [_inst_1 : decidable a], a → b ↔ ¬a ∨ b</span>\n</pre></div>\n\n\n<p>The curly brackets around <code>a</code> and <code>b</code> means that they are implicit arguments. The square brackets around <code>decidable a</code> means that it's a type class instance.</p>",
        "id": 133491725,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536299982
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments\">https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments</a></p>",
        "id": 133491802,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536300119
    },
    {
        "content": "<p>Works flawless. Need to read a little bit more on this.</p>",
        "id": 133491841,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536300129
    },
    {
        "content": "<p>Thanks for the quick help.</p>",
        "id": 133491845,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536300155
    },
    {
        "content": "<p>No worries :)</p>",
        "id": 133491851,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536300163
    },
    {
        "content": "<p>One last question:</p>",
        "id": 133491931,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536300324
    },
    {
        "content": "<p>My proof looks now like this:</p>",
        "id": 133491932,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536300332
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        ((B → C) → (¬(A → C)     ∧ ¬(A ∨ B)))\n      = ((B → C) → (¬(¬A ∨ C)    ∧ ¬(A ∨ B)))         : by rw @imp_iff_not_or A C\n  ... = ((B → C) → ((¬(¬A) ∧ ¬C) ∧ ¬(A ∨ B)))         : by rw not_or_distrib\n  ... = ((B → C) → ((¬(¬A) ∧ ¬C) ∧ (¬A ∧ ¬B)))        : by rw not_or_distrib\n  ... = ((B → C) → ((A ∧ ¬C) ∧ (¬A ∧ ¬B)))            : by rw not_not\n  ... = ((B → C) → ((A ∧ ¬C) ∧ ¬A ∧ ¬B))              : by rw and_assoc\n  ... = ((B → C) → ((¬C ∧ A) ∧ ¬A ∧ ¬B))              : by rw and_comm (A) (¬C)\n  ... = ((B → C) → (¬C ∧ A ∧ ¬A ∧ ¬B))                : by rw and_assoc\n  ... = ((B → C) → (¬C ∧ (A ∧ ¬A) ∧ ¬B))              : by rw and_assoc\n  ... = ((B → C) → (¬C ∧ ¬ B ∧ (A ∧ ¬A)))             : by rw and_comm (¬ B) (A ∧ ¬A)\n  ... = ((B → C) → (¬C ∧ ¬ B ∧ false ))               : by rw and_not_self_iff A\n  ... = ((B → C) → ((¬C) ∧ false ))                   : by rw and_false\n  ... = ((B → C) → (false))                           : by rw and_false\n  ... = (¬(B → C) ∨ false)                            : by rw imp_iff_not_or\n  ... = ¬(B → C)                                      : by rw or_false\n  ... = ¬(¬B ∨ C)                                     : by rw imp_iff_not_or \n  ... = ((¬¬B) ∧ (¬C))                                : by rw not_or_distrib\n  ... = (B ∧ ¬C)                                      : by rw not_not\n</pre></div>",
        "id": 133491934,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536300333
    },
    {
        "content": "<p>It seems only imp_iff_not_or needs the '@'. All other functions are OK with explicit arguments (if given).</p>",
        "id": 133491975,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536300367
    },
    {
        "content": "<p>Is there some schema when theorems take explicit arguments in mathlib?</p>",
        "id": 133491980,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536300390
    },
    {
        "content": "<p>most iff theorems have implicit args</p>",
        "id": 133491999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536300426
    },
    {
        "content": "<p><code>rw ← imp_iff_not_or</code></p>",
        "id": 133492001,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536300431
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n        <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>     <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)))</span>\n      <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span><span class=\"o\">)</span>    <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)))</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">imp_iff_not_or</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)))</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">not_or_distrib</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)))</span>        <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">not_or_distrib</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)))</span>            <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">not_not</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">))</span>              <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_assoc</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">¬</span><span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">))</span>              <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_comm</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">))</span>                <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_assoc</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">))</span>              <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_assoc</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">)))</span>             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_comm</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">false</span> <span class=\"o\">))</span>               <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_not_self_iff</span> <span class=\"n\">A</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">false</span> <span class=\"o\">))</span>                   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_false</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">))</span>                           <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_false</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span><span class=\"o\">)</span>                            <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">imp_iff_not_or</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>                                      <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">or_false</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span><span class=\"o\">)</span>                                     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">imp_iff_not_or</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"bp\">¬¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">))</span>                                <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">not_or_distrib</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span>                                      <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">not_not</span>\n</pre></div>",
        "id": 133492009,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536300441
    },
    {
        "content": "<p>Is there a specific reason why 'iff' terms have implict  arguments and others not?</p>",
        "id": 133492210,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536300749
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n        <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)))</span>\n      <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)))</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">not_imp</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">))</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">not_or_distrib</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">¬</span><span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">))</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_comm</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">))</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_assoc</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">))</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_assoc</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">)))</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_comm</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">false</span> <span class=\"o\">))</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_not_self_iff</span> <span class=\"n\">A</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">false</span> <span class=\"o\">))</span>        <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_false</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">))</span>                <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_false</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>                           <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span>                           <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">not_imp</span>\n</pre></div>",
        "id": 133492230,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536300841
    },
    {
        "content": "<p>Nice</p>",
        "id": 133492326,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536300983
    },
    {
        "content": "<p>Really helpful.</p>",
        "id": 133492329,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536300988
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 133492344,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536301057
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n        <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)))</span>\n      <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)))</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">not_imp</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">))</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">not_or_distrib</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">))</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right_comm</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(((</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">and_assoc</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">false</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">))</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">and_not_self_iff</span> <span class=\"n\">A</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">false</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">))</span>           <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">false_and</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">))</span>                <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">false_and</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>                           <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span>                           <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">not_imp</span>\n</pre></div>",
        "id": 133492346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536301080
    },
    {
        "content": "<p>I'm a bit vague on the rule for <code>iff</code> and other rewrite rules but in general, if an argument can be inferred from other arguments, it should be implicit. For rewrite rules, I think all the arguments that can be inferred from the lhs of the equation should be implicit.</p>",
        "id": 133492460,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536301290
    },
    {
        "content": "<p>I see. Thanks <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span></p>",
        "id": 133492546,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536301427
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example {A B C : Prop} : ((B → C) → (¬(A → C) ∧ ¬(A ∨ B))) = (B ∧ ¬C) :=\nby apply classical.cases_on A;\n   apply classical.cases_on B;\n   apply classical.cases_on C; simp\n</pre></div>\n\n\n<p>The idea behind the rule for iff is that these are more often used as combined unidirectional rules, and in this case any argument present on both lhs and rhs are inferrable</p>",
        "id": 133492706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536301733
    },
    {
        "content": "<p>Have you tried <code>tauto</code>?</p>",
        "id": 133492713,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536301754
    },
    {
        "content": "<p>doesn't seem to do anything</p>",
        "id": 133492719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536301788
    },
    {
        "content": "<p><code>propext $ by tauto</code> works though</p>",
        "id": 133492758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536301803
    },
    {
        "content": "<p>Right! You need the propositions to be decidable</p>",
        "id": 133492768,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536301805
    },
    {
        "content": "<blockquote>\n<p>example {A B C : Prop} : ((B → C) → (¬(A → C) ∧ ¬(A ∨ B))) = (B ∧ ¬C) :=<br>\nby apply classical.cases_on A;<br>\n   apply classical.cases_on B;<br>\n   apply classical.cases_on C; simp</p>\n</blockquote>\n<p>that's the proof of completeness!</p>",
        "id": 133492774,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536301811
    },
    {
        "content": "<blockquote>\n<p><code>propext $ by tauto</code> works though</p>\n</blockquote>\n<p>Interesting! That should be worth adding to the tactic</p>",
        "id": 133492780,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536301845
    },
    {
        "content": "<p>mathlib tries to avoid equality of propositions though</p>",
        "id": 133492790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536301872
    },
    {
        "content": "<p>it's always stated as an iff</p>",
        "id": 133492794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536301883
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">by_cases</span> <span class=\"n\">A</span><span class=\"bp\">;</span> <span class=\"n\">by_cases</span> <span class=\"n\">B</span><span class=\"bp\">;</span> <span class=\"n\">by_cases</span> <span class=\"n\">C</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">*</span>\n</pre></div>",
        "id": 133492795,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536301886
    },
    {
        "content": "<p>oh, of course - <code>simp</code> will rewrite <code>A</code> to <code>true</code> or <code>false</code> given the <code>by_cases</code> assumption</p>",
        "id": 133492839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536301924
    },
    {
        "content": "<p>Nice. I am currently translating some student exercises, so I try to use the 'calc' mode to really show step-by-step how things evolve.</p>",
        "id": 133493165,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536302529
    },
    {
        "content": "<p>This worked quite well so far. Nice to see that the tactics work so well too.</p>",
        "id": 133493168,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536302546
    },
    {
        "content": "<p>you should be able to use <code>&lt;-&gt;</code> in those calc blocks</p>",
        "id": 133493180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536302614
    },
    {
        "content": "<p>Yes, I can replace = with &lt;-&gt;</p>",
        "id": 133493249,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536302727
    },
    {
        "content": "<p>Does this have any benefits?</p>",
        "id": 133493250,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536302734
    },
    {
        "content": "<p>only it's more idiomatic; <code>rw</code> and friends will work either way</p>",
        "id": 133493323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536302853
    },
    {
        "content": "<p>Why exactly is it more idiomatic?</p>",
        "id": 133493366,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536302884
    },
    {
        "content": "<p>because it's easier to work with iff since you can destruct it, and you don't need the propext axiom to prove things about it</p>",
        "id": 133493378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536302923
    },
    {
        "content": "<p><code>=</code> has stronger precedence than <code>&lt;-&gt;</code> and the other connectives so <code>&lt;-&gt;</code> yields formulas with fewer brackets</p>",
        "id": 133493381,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536302928
    },
    {
        "content": "<p>Great.</p>",
        "id": 133493395,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536303001
    },
    {
        "content": "<p>Need to get back to normal life. Thanks for your help.</p>",
        "id": 133493439,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536303023
    },
    {
        "content": "<p>But \"idiomatic\" really just means that it is used, like a convention - it doesn't need a reason per se, it's valuable because it is the convention</p>",
        "id": 133493443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536303030
    },
    {
        "content": "<p>i.e. it will make it easier to fit with and apply existing theorems</p>",
        "id": 133493454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536303065
    },
    {
        "content": "<p>I understand the meaning of idiomatic.</p>",
        "id": 133493465,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536303088
    },
    {
        "content": "<p>Wanted understand the underlying motivation.</p>",
        "id": 133493475,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536303108
    },
    {
        "content": "<p>so another answer is \"there are two options, we picked one\"</p>",
        "id": 133493477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536303118
    },
    {
        "content": "<p>If I want my proofs to be understood in the end, it helps to learn the choices you as a community have taken.</p>",
        "id": 133493517,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536303137
    },
    {
        "content": "<p>I think logic textbooks usually use &lt;-&gt;</p>",
        "id": 133493522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536303150
    },
    {
        "content": "<p>or sometimes ≡</p>",
        "id": 133493526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536303164
    },
    {
        "content": "<p>I can learn them easier if I can get an intuition where things come from.</p>",
        "id": 133493527,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536303165
    },
    {
        "content": "<p>Cool fact: <code>rewrite_search</code> solves this problem instantly:</p>\n<div class=\"codehilite\"><pre><span></span>local attribute [search] imp_iff_not_or not_or_distrib not_not and_assoc and_comm and_not_self_iff and_false not_not\n\nexample {A B C : Prop} : ((B → C) → (¬(A → C) ∧ ¬(A ∨ B))) = (B ∧ ¬C) :=\n  by rewrite_search_using [`search]\n</pre></div>",
        "id": 133708725,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536639923
    },
    {
        "content": "<p>We really need to think about automatic lemma selection for rewrite_search.</p>",
        "id": 133712079,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536646341
    },
    {
        "content": "<p>Possible just finer attribute tagging (e.g. [search logic], [search list], [search category_theory]).</p>",
        "id": 133712089,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536646374
    },
    {
        "content": "<p>Perhaps even teach rewrite_search to automatically select from different bundles of lemmas depending on what it sees in the goal.</p>",
        "id": 133712100,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536646402
    },
    {
        "content": "<p>At least for me, just printing out every definition in a modest real-ish maths environment takes 30 seconds, so I think some form of bundling will have to be the way to go. Maybe barring some emergency \"show me the way\" mode.</p>",
        "id": 133712505,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536647154
    },
    {
        "content": "<p>Though \"find me a lemma\" mode could be a useful tactic in its own right I suppose</p>",
        "id": 133712553,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536647208
    },
    {
        "content": "<p>I guess that's what I'll try next</p>",
        "id": 133712665,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536647409
    },
    {
        "content": "<blockquote>\n<p>We really need to think about automatic lemma selection for rewrite_search.</p>\n</blockquote>\n<p>This is all very nice, but don't forget that this is a whole research area. So don't expect this to be super easy, and maybe have a look at what already exists. I think the keyword is \"relevance filter\"</p>",
        "id": 133714529,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536650842
    }
]