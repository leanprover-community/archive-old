[
    {
        "content": "<p>Is something along the lines of the code below available?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">padd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">pmul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">pR</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pR</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">r</span><span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pR</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">comm_semiring</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">pR</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 228114322,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614499229
    },
    {
        "content": "<p>You know, what you've written is basically the constructor for a subring: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subring\">docs#subring</a>.  Then we know that a subring of a commutative ring is itself a commutative ring: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subring.to_comm_ring\">docs#subring.to_comm_ring</a>.</p>",
        "id": 228114605,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614499614
    },
    {
        "content": "<p>Can you adjust your situation to fit this framework?</p>",
        "id": 228114659,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614499683
    },
    {
        "content": "<p>Oh, I see, you want the semiring version, but that exists too: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subsemiring.to_comm_semiring\">docs#subsemiring.to_comm_semiring</a></p>",
        "id": 228114714,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614499787
    },
    {
        "content": "<p>Ah, Heather, thank you very much!  I did not know about any of these!</p>\n<p>I will take a look: the <code>semi</code> issue may not be too relevant for me, I was just creating a template, to fit it later to what I exactly needed!<br>\nAlready the <code>comm_ring</code> one is a great start!</p>\n<p>Thanks!</p>",
        "id": 228114793,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614499857
    },
    {
        "content": "<p>Continuing this conversation, what I would like is to talk about the subsemiring of non-negative elements of an ordered ring <code>R</code>.  The exact assumptions on the initial ordered rings are possibly flexible, but I would certainly like this to work when <code>R</code> is a <code>comm_ring</code> with a compatible order, possibly with no zero divisors.  The most basic setup would be <code>ℤ</code> and <code>ℕ</code>, but I would like something that works simultaneously also for <code>ℚ</code> and <code>ℚ≥0</code> and <code>ℝ</code> and <code>ℝ≥0</code>.</p>\n<p>Hence, is what's below already in mathlib?  Is there a simpler way to get Lean to realize all the repetitions in the statements/proofs?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.subring</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Rnnoneg</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--  The subtype of non-negative elements of `R`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">pR</span> <span class=\"o\">:</span> <span class=\"n\">subsemiring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">},</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">zero_le_one</span><span class=\"o\">],</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_nonneg</span> <span class=\"n\">x0</span> <span class=\"n\">y0</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl.le</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_nonneg</span> <span class=\"n\">x0</span> <span class=\"n\">y0</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/--  The non-negative elements come with a partial order. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">popR</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">pR</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">),</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">),</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">le_rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span><span class=\"o\">,</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/--  ... and they form an ordered semiring. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"o\">(</span><span class=\"n\">pR</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_left_cancel</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"n\">bc</span><span class=\"o\">,</span>\n    <span class=\"n\">injection</span> <span class=\"n\">bc</span> <span class=\"k\">with</span> <span class=\"n\">hbc</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hbc</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_right_cancel</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"n\">b</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"n\">ac</span><span class=\"o\">,</span>\n    <span class=\"n\">injection</span> <span class=\"n\">ac</span> <span class=\"k\">with</span> <span class=\"n\">hac</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hac</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_le_add_left</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">le_of_add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n    <span class=\"n\">change</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_of_add_le_add_left</span> <span class=\"n\">hbc</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_le_one</span> <span class=\"o\">:=</span> <span class=\"n\">zero_le_one</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_lt_mul_of_pos_left</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_lt_mul_of_pos_right</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_lt_mul_of_pos_right</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"n\">pR</span> <span class=\"n\">R</span><span class=\"o\">)),</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">pR</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Rnnoneg</span>\n</code></pre></div>",
        "id": 228145381,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614534583
    },
    {
        "content": "<p>I'd expect an instance like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.partial_order\">docs#subtype.partial_order</a> or something that you could use for at least some of these.</p>",
        "id": 228145708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614534928
    },
    {
        "content": "<p>Indeed: this seems to work!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">popR</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">pR</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 228145781,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614534990
    },
    {
        "content": "<p>Does your <code>ordered_semiring</code> instance actually use any properties of the subsemiring you chose?</p>",
        "id": 228147595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614536950
    },
    {
        "content": "<p>Or does it work on an arbitrary sub_semiring</p>",
        "id": 228147605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614536973
    },
    {
        "content": "<p>If the latter, then mathlib ought to have provided it for you, and you should PR it!</p>",
        "id": 228147616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614536995
    },
    {
        "content": "<p>I will take a look at this.  most of these properties are simply checked on a subset of the choices, so they should hold no matter what.  I will check later that there are no hidden issues.</p>\n<p>Thanks for the comments!  As usual, I always learn a lot!</p>",
        "id": 228147833,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614537223
    },
    {
        "content": "<p>Eric, glancing at the lemmas, you are right that the properties in the <code>ordered_semiring</code> instance above are true since they are true for any subtype of an <code>ordered_semiring</code>: you simply apply the property of the bigger type to the terms of the smaller one.</p>\n<p>How does one go about \"saying this in Lean\"?</p>",
        "id": 228149844,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614539260
    },
    {
        "content": "<p>You should be stating that result for all subsemirings</p>",
        "id": 228149908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614539295
    },
    {
        "content": "<p>Since it doesnt apply to all subtypes</p>",
        "id": 228149914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614539319
    },
    {
        "content": "<p>Note that sometimes properties of the bigger one can't always be transferred to the smaller one</p>",
        "id": 228149959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614539370
    },
    {
        "content": "<p>But when they can, a common approach is to define things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.semiring\">docs#function.injective.semiring</a></p>",
        "id": 228150019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614539406
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.ordered_semiring\">docs#function.injective.ordered_semiring</a>?</p>",
        "id": 228150047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614539431
    },
    {
        "content": "<p>Ok, this seems like it would take some time: I will take a look at this <code>function.injective.semiring</code>, but probably tomorrow!</p>\n<p>Thanks!</p>",
        "id": 228150050,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614539443
    },
    {
        "content": "<p>The link <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.ordered_semiring\">docs#function.injective.ordered_semiring</a> does not work, so probably not!</p>",
        "id": 228150073,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614539472
    },
    {
        "content": "<p>I assume we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.preorder\">docs#function.injective.preorder</a>?</p>",
        "id": 228150366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614539714
    },
    {
        "content": "<p>Hmm, also no</p>",
        "id": 228150370,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614539722
    },
    {
        "content": "<p>I am trying to understand how this works.  Is the code below what you had in mind, in the case of a partial order?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">function.injective.partial_order</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">partial_order</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl.le</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span><span class=\"o\">,</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ab</span> <span class=\"n\">ba</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">le_antisymm</span> <span class=\"n\">ab</span> <span class=\"n\">ba</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228180798,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614573050
    },
    {
        "content": "<p>I tried to extend this, but I am getting stuck: why does the proof below not work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">function.injective.ordered_semiring</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ordered_semiring</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_left_cancel</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">bc</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">hf</span> <span class=\"o\">((</span><span class=\"n\">add_right_inj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">abc</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"o\">((</span><span class=\"n\">congr_arg</span> <span class=\"n\">f</span> <span class=\"n\">bc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)),</span>\n    <span class=\"n\">convert</span> <span class=\"n\">abc</span><span class=\"o\">,</span>\n<span class=\"c1\">-- produces two goals.  My understanding is that Lean is not picking up what the various `+` symbols mean</span>\n<span class=\"c1\">-- but I am not sure whether this is really the case, nor how to fix it!</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_right_cancel</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">le_of_add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_le_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_lt_mul_of_pos_right</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">hf.partial_order</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">hf.semiring</span> <span class=\"n\">f</span> <span class=\"n\">zero</span> <span class=\"n\">one</span> <span class=\"n\">add</span> <span class=\"n\">mul</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228182321,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614574785
    },
    {
        "content": "<p>I don't know what's going on exactly but most of the hypotheses can be bundled into <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom\">docs#ring_hom</a>. Why aren't you using <code>semi_ring \\b</code>?</p>",
        "id": 228183326,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1614575927
    },
    {
        "content": "<p>It seems to me that <code>semiring_hom</code> requires <code>\\b</code> to already be a semiring, whereas I would like to prove that <code>\\b</code> is an ordered semiring using this result.  Am I misunderstanding your suggestion?</p>",
        "id": 228187286,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614580241
    },
    {
        "content": "<p>Actually, Lean seems to already know that <code>\\b</code> is a semiring, since the last row of the proof above works.  Maybe I should focus on trying to get lean to work out the <code>semiring</code> assumption on <code>\\b</code> explicitly?</p>",
        "id": 228187404,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614580382
    },
    {
        "content": "<p>If I try </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_left_cancel</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">hf.semiring</span> <span class=\"n\">f</span> <span class=\"n\">zero</span> <span class=\"n\">one</span> <span class=\"n\">add</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">fr</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">β</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">convert</span> <span class=\"n\">one</span><span class=\"o\">,</span>\n        <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>I run into the issue, I think, that Lean now has two <code>1</code>s on <code>β</code>, one from the assumption <code>has_one</code> and one from the instance <code>semiring β</code> and I do not know how to convince it that they are the same.</p>",
        "id": 228187778,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614580790
    },
    {
        "content": "<p>Try adding <code>add := (+)</code> etc to your original version</p>",
        "id": 228188031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614581044
    },
    {
        "content": "<p>That way lean will use the notation from the has_add argument</p>",
        "id": 228188071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614581105
    },
    {
        "content": "<p>Hmm, it gets me to the same stage:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">function.injective.ordered_semiring</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ordered_semiring</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"n\">add_left_cancel</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">bc</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">hf</span> <span class=\"o\">((</span><span class=\"n\">add_right_inj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">abc</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"o\">((</span><span class=\"n\">congr_arg</span> <span class=\"n\">f</span> <span class=\"n\">bc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)),</span>\n    <span class=\"n\">convert</span> <span class=\"n\">abc</span><span class=\"o\">,</span>\n<span class=\"c1\">-- two goals: add_semigroup.to_has_add α = distrib.to_has_add α</span>\n<span class=\"c1\">-- and: add_semigroup.to_has_add α = distrib.to_has_add α</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_right_cancel</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">le_of_add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_le_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_lt_mul_of_pos_right</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">hf.partial_order</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">hf.semiring</span> <span class=\"n\">f</span> <span class=\"n\">zero</span> <span class=\"n\">one</span> <span class=\"n\">add</span> <span class=\"n\">mul</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228189634,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614582725
    },
    {
        "content": "<p>Does refl solve those goals?</p>",
        "id": 228190952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614584037
    },
    {
        "content": "<p>Perhaps after using <code>convert ... using 1</code></p>",
        "id": 228191024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614584072
    },
    {
        "content": "<p>Or 2</p>",
        "id": 228191027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614584080
    },
    {
        "content": "<p><code>refl</code> does not work saying that it fails to unify</p>",
        "id": 228191242,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614584295
    },
    {
        "content": "<p><code>convert abc using 1</code> produces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>as subgoals, but again <code>refl</code> fails to unify them.</p>",
        "id": 228191287,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614584367
    },
    {
        "content": "<p><code>convert abc using 2</code> gives the same goals as <code>convert abc</code></p>",
        "id": 228191300,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614584387
    },
    {
        "content": "<p>I am really sorry about the confusion: I had a <code>variables {α β : Type*} [semiring α]</code> floating around, so the two <code>add</code> instances had been artificially introduced by me.<br>\n<span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 228191832,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614584830
    },
    {
        "content": "<p>Indeed, this now works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">function.injective.ordered_semiring</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ordered_semiring</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_left_cancel</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">bc</span><span class=\"o\">,</span>\n    <span class=\"n\">hf</span> <span class=\"o\">((</span><span class=\"n\">add_right_inj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">((</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"o\">((</span><span class=\"n\">congr_arg</span> <span class=\"n\">f</span> <span class=\"n\">bc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)))),</span>\n<span class=\"c1\">-- [still to finish]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228191962,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614584957
    },
    {
        "content": "<p>Finally, this works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">function.injective.ordered_semiring</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ordered_semiring</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ab</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">add</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_le_add_left</span> <span class=\"n\">ab</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">le_of_add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)),</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_of_add_le_add_left</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_le_one</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">one</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">zero_le_one</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">ab</span> <span class=\"n\">c0</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"n\">mul</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"n\">ab</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"bp\">←</span> <span class=\"n\">zero</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_lt_mul_of_pos_right</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">ab</span> <span class=\"n\">c0</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"n\">mul</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_lt_mul_of_pos_right</span> <span class=\"n\">ab</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"bp\">←</span> <span class=\"n\">zero</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">hf.partial_order</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">hf.add_left_cancel_semigroup</span> <span class=\"n\">f</span> <span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">hf.add_right_cancel_semigroup</span> <span class=\"n\">f</span> <span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">hf.semiring</span> <span class=\"n\">f</span> <span class=\"n\">zero</span> <span class=\"n\">one</span> <span class=\"n\">add</span> <span class=\"n\">mul</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228194245,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614586684
    },
    {
        "content": "<p>I now have a bunch of proofs for the results below.  Are people interested in having them in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">function.injective.preorder</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">preorder</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">function.injective.preorder.mono</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">monotone</span> <span class=\"n\">β</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">hf.preorder</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">ab</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">function.injective.partial_order</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">partial_order</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">function.injective.ordered_add_comm_monoid</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">function.injective.ordered_cancel_add_comm_monoid</span> <span class=\"o\">[</span><span class=\"n\">ordered_cancel_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ordered_cancel_add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">function.injective.ordered_semiring</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ordered_semiring</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228198811,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614589529
    },
    {
        "content": "<p>I can't see why not, we have a precedent for those definitions for other typeclasses</p>",
        "id": 228198994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614589636
    },
    {
        "content": "<p>Ok, and should they all go in the same file?  Probably <code>algebra.ring.basic</code>?</p>",
        "id": 228199102,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614589703
    },
    {
        "content": "<p>They can't go there, because the ordering classes don't exist yet</p>",
        "id": 228199137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614589726
    },
    {
        "content": "<p>Try to put each in the same file as the typeclass they implement is defined</p>",
        "id": 228199154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614589743
    },
    {
        "content": "<p>Ok, good suggestion!</p>",
        "id": 228199286,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614589811
    },
    {
        "content": "<p>You don't need injectivity to pull back a preorder and the pullback is already there</p>",
        "id": 228199855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614590186
    },
    {
        "content": "<p>Kevin, thanks!  I had split the <code>preorder</code> from the <code>partial_order</code> and did not think back about the assumptions!</p>",
        "id": 228200034,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614590311
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/preorder.lift\">docs#preorder.lift</a></p>",
        "id": 228200070,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1614590341
    },
    {
        "content": "<p>Thanks Rémy!  I see that also <code>partial_order.lift</code> exists: great!</p>",
        "id": 228200402,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614590528
    },
    {
        "content": "<p>I am down to what is below.  Anything else that is already in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">function.injective.ordered_add_comm_monoid</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">function.injective.ordered_cancel_add_comm_monoid</span> <span class=\"o\">[</span><span class=\"n\">ordered_cancel_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ordered_cancel_add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">function.injective.ordered_semiring</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ordered_semiring</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228200604,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614590655
    },
    {
        "content": "<p>It's annoying that the naming convention is different between partial_order.lift and function. Injective.semiring</p>",
        "id": 228200644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614590701
    },
    {
        "content": "<p>Use library_search to find out?</p>",
        "id": 228200697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614590734
    },
    {
        "content": "<p><code>library_search</code> is often my first attempt, but I could not find any of these...</p>",
        "id": 228200792,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614590787
    },
    {
        "content": "<p>Did it find partial_order.lift?</p>",
        "id": 228200927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614590875
    },
    {
        "content": "<p>You raise a good point:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">function.injective.partial_order</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">partial_order</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>says</p>\n<p><code>library_search</code> failed.</p>",
        "id": 228201078,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614590959
    },
    {
        "content": "<p>Of course it does</p>",
        "id": 228201124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614591000
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/partial_order.lift\">docs#partial_order.lift</a> requires injectivity</p>",
        "id": 228201175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614591007
    },
    {
        "content": "<p>For ordered add comm monoid you have an unneeded mul on beta</p>",
        "id": 228201218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614591027
    },
    {
        "content": "<p>This also fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">function.injective.partial_order</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">):</span>\n  <span class=\"n\">partial_order</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 228201236,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614591042
    },
    {
        "content": "<p>And a 1 and in the second one too</p>",
        "id": 228201297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614591091
    },
    {
        "content": "<p>Thanks for the linting!  I cleared unnecessary hypotheses: now only the doc-strings are missing!</p>",
        "id": 228201417,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614591156
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.subring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"sd\">/-- Pullback an `ordered_add_comm_monoid` under an injective map. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">function.injective.ordered_add_comm_monoid</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ab</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">add_le_add_left</span> <span class=\"n\">ab</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)],</span>\n  <span class=\"n\">lt_of_add_lt_add_left</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">bc</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">lt_of_add_lt_add_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add</span><span class=\"o\">]),</span>\n  <span class=\"bp\">..</span><span class=\"n\">partial_order.lift</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">hf.add_comm_monoid</span> <span class=\"n\">f</span> <span class=\"n\">zero</span> <span class=\"n\">add</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Pullback an `ordered_cancel_add_comm_monoid` under an injective map. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">function.injective.ordered_cancel_add_comm_monoid</span> <span class=\"o\">[</span><span class=\"n\">ordered_cancel_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ordered_cancel_add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_of_add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)),</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_add_le_add_left</span> <span class=\"n\">ab</span> <span class=\"o\">}),</span>\n  <span class=\"bp\">..</span><span class=\"n\">hf.add_left_cancel_semigroup</span> <span class=\"n\">f</span> <span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">hf.add_right_cancel_semigroup</span> <span class=\"n\">f</span> <span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">hf.ordered_add_comm_monoid</span> <span class=\"n\">f</span> <span class=\"n\">zero</span> <span class=\"n\">add</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Pullback an `ordered_semiring` under an injective map. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">function.injective.ordered_semiring</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ordered_semiring</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero_le_one</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span>  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">one</span><span class=\"o\">,</span> <span class=\"n\">zero_le_one</span><span class=\"o\">],</span>\n  <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span>  <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">ab</span> <span class=\"n\">c0</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"n\">mul</span><span class=\"o\">],</span>\n      <span class=\"n\">refine</span> <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"n\">ab</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"bp\">←</span> <span class=\"n\">zero</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_lt_mul_of_pos_right</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">ab</span> <span class=\"n\">c0</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"n\">mul</span><span class=\"o\">],</span>\n      <span class=\"n\">refine</span> <span class=\"n\">mul_lt_mul_of_pos_right</span> <span class=\"n\">ab</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"bp\">←</span> <span class=\"n\">zero</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">hf.ordered_cancel_add_comm_monoid</span> <span class=\"n\">f</span> <span class=\"n\">zero</span> <span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">hf.semiring</span> <span class=\"n\">f</span> <span class=\"n\">zero</span> <span class=\"n\">one</span> <span class=\"n\">add</span> <span class=\"n\">mul</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</code></pre></div>\n<p><code>lint</code> is happy!</p>",
        "id": 228201492,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614591190
    },
    {
        "content": "<p>Can you generate <code>function.injective.ordered_add_comm_monoid</code> from <code>to_additive</code> and <code>function.injective.ordered_comm_monoid</code>?</p>",
        "id": 228203787,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614592451
    },
    {
        "content": "<p>At any rate, this is probably ready for PR comments</p>",
        "id": 228203821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614592468
    },
    {
        "content": "<p>I think that I managed to get lean to produce the additive version with the proof of the multiplicative ones.  I have the issue now that <code>lint</code> complains about the doc-strings missing from the two automatically generated definitions.</p>\n<p>How do I provide doc-strings for the <code>[to_additive]</code> stuff?</p>",
        "id": 228211927,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614596582
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6489\">#6489</a></p>",
        "id": 228212375,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614596820
    },
    {
        "content": "<p>Like that: <code>[to_additive name_for_to_additive_version \"Docstring for to_additive version\"]</code></p>",
        "id": 228213285,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1614597306
    },
    {
        "content": "<p>and the name can most often be omitted. The linter will tell you to remove it if it is the same as the automatically generated one.</p>",
        "id": 228213347,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1614597352
    },
    {
        "content": "<p>Rémy, thank you very much!  I will update the PR.  I will wait to see if the linter complains about the autogenerated name, although I imagine that I would want the autogenerated name anyway!</p>",
        "id": 228213745,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614597584
    },
    {
        "content": "<p>I don't think that naming these after <code>function.injective</code> is a good idea if you want consistency, because it's not always a requirement</p>",
        "id": 228216882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614599425
    },
    {
        "content": "<p>I am happy to give them a different name.  I was simply minimizing the changes from </p>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/ring/basic.html#function.injective.semiring\">https://leanprover-community.github.io/mathlib_docs/algebra/ring/basic.html#function.injective.semiring</a></p>\n<p>since I was trying to learn at the same time what this all meant</p>",
        "id": 228217024,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614599506
    },
    {
        "content": "<p>perhaps <code>partial_order.comap</code>?</p>",
        "id": 228217135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614599550
    },
    {
        "content": "<p>What seems to work well with this name is that you can eat the <code>function.injective</code> part with the assumption that the function is injective.  This may not seem like a great deal to you, but I am still not entirely accustomed to dot-notation!</p>",
        "id": 228217154,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614599565
    },
    {
        "content": "<p>No I see that, but like I said you won't get consistent naming that way unless you want <code>function.injective.preorder</code> even though that one doesn't take a <code>function.injective</code> argument</p>",
        "id": 228217271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614599623
    },
    {
        "content": "<p>Ah, sorry, I think that the part of the thread that talked about <code>partial_orders</code> ended when I was told that <code>partial_order.lift</code> was already a thing!</p>",
        "id": 228217369,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614599661
    },
    {
        "content": "<p>since <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>'s original complaint was about lack of consistency in the naming</p>",
        "id": 228217371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614599663
    },
    {
        "content": "<p>The partial order one exists already and is <code>partial_order.lift</code>. There is also <code>preorder.lift</code>, <code>linear_order.lift</code>. I suggest keeping those names because they describe well what those lemmas do and using <code>class_name.lift</code></p>",
        "id": 228217374,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1614599666
    },
    {
        "content": "<p>The final PR only talks about <code>ordered_stuff_ring/monoid</code>.</p>",
        "id": 228217399,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614599684
    },
    {
        "content": "<p>Those came later, and apparently were written without knowing about the <code>*.lift</code> lemmas</p>",
        "id": 228217446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614599711
    },
    {
        "content": "<p>So, should the new ones that I PRed contain <code>lift</code> in them?</p>",
        "id": 228217507,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614599747
    },
    {
        "content": "<p>e.g. <code>ordered_comm_monoid.lift</code>, instead of <code>function.injective.ordered_comm_monoid</code>?</p>",
        "id": 228217569,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614599767
    },
    {
        "content": "<p>That looks good to me</p>",
        "id": 228217664,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1614599830
    },
    {
        "content": "<p>Looking at the new lemmas, they seem to differ from the <code>*.lift</code> family in that they already expect the domain to have a one and mul</p>",
        "id": 228217708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614599876
    },
    {
        "content": "<p>I can certainly change the three names (+2) to be of this form: <code>class_name.lift</code> where <code>class_name</code> is going to be <code>ordered_[...]</code>.</p>",
        "id": 228217755,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614599885
    },
    {
        "content": "<p>The point of <code>partial_order.lift</code> for example is to <em>define</em> a <code>&lt;=</code> induced by the <code>&lt;=</code> on the codomain, so we don't assume any structure on the domain a priori</p>",
        "id": 228217886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614599981
    },
    {
        "content": "<p>When there are more operations, I suppose it becomes a question of which operations you want to pull back and which you expect to already exist</p>",
        "id": 228218007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614600022
    },
    {
        "content": "<p>In this case there is the issue that I would not want to say that the <code>0</code> ring is a subring of any other ring, since for me a ring map needs to take <code>1</code> to <del><code>0</code></del> <code>1</code> (what a lapsus!)...  so I would not be happy to <em>define</em> 1 and 0 from the map.</p>",
        "id": 228218408,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614600207
    },
    {
        "content": "<p>As far as \"algebraic structures\" go, though assuming <code>add</code>, <code>mul</code>, <code>0</code> and <code>1</code> seems pretty basic.  In fact, you might even get away with not assuming <code>0</code>, maybe...</p>",
        "id": 228218639,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614600320
    },
    {
        "content": "<p>Ah, except that it is there because of autogeneration from the assumption of <code>1</code>, right?  So, to remove <code>0</code> you would need to not use <code>to_additive</code> (which is what I was going to do anyway, until Eric suggested that I could take advantage of <code>to_additive</code>).</p>",
        "id": 228218856,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614600413
    },
    {
        "content": "<p>Hmm, not so sure about not needing <code>0</code>: should <code>pnat</code> be an <code>ordered_subsemiring</code> of <code>nat</code>?</p>\n<p>I would say not...</p>",
        "id": 228219438,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614600679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/rings.20from.20subtype/near/228216882\">said</a>:</p>\n<blockquote>\n<p>I don't think that naming these after <code>function.injective</code> is a good idea if you want consistency, because it's not always a requirement</p>\n</blockquote>\n<p>I agree, but I think that <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> should continue to use <code>function.injective.ordered_cancel_comm_monoid</code> in their PR, and then someone can rename all of them at once later</p>",
        "id": 228223749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614602841
    },
    {
        "content": "<p>So the conclusion of this thread is that you can now do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">Rnnoneg</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--  The subtype of non-negative elements of `R`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">pR</span> <span class=\"o\">:</span> <span class=\"n\">subsemiring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">},</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">zero_le_one</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">mul_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl.le</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y0</span><span class=\"o\">,</span> <span class=\"n\">add_nonneg</span> <span class=\"n\">x0</span> <span class=\"n\">y0</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/--  ... and they form an ordered semiring. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"o\">(</span><span class=\"n\">pR</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Rnnoneg</span>\n</code></pre></div>\n<p>right?</p>",
        "id": 228927557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614938522
    },
    {
        "content": "<p>Yes, I think we tested this on the <code>toric</code> branch of LTE this morning, and it works</p>",
        "id": 228927778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614938606
    },
    {
        "content": "<p>Thanks for all your help!</p>",
        "id": 228927797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614938613
    },
    {
        "content": "<p>You better use all the other ordering classes too to make the scope creep of the PR worthwhile <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 228929288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614939340
    },
    {
        "content": "<p>I will try to use as many of these as possible!  If needed, I will artificially prove lemmas about ordered_semi_canonical_monoids, just to use the appropriate typeclass!</p>",
        "id": 228935873,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614942757
    },
    {
        "content": "<p>In any case, I confirm that one of the new instances is already in use in the <code>toric</code> branch!</p>",
        "id": 228936046,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614942840
    },
    {
        "content": "<p>Continuing with the <code>instance</code> galore, are the instances below in mathlib?</p>\n<p>The proofs are straightforward, but I was wondering if I have simply been unable to find them, or whether there are reasons why having them would cause issues.</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">ring_hom.to_algebra</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">nnreal.to_real_hom.to_algebra</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>(In case you are wondering, the <code>apply_instance</code> in the third line above is a consequence of the previous ones, otherwise I could not find it in mathlib.)</p>",
        "id": 228988870,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614964160
    },
    {
        "content": "<p><code>ring_hom.to_algebra</code> already exists (with that name)</p>",
        "id": 228992454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614965474
    },
    {
        "content": "<p>Good on the naming front, not so good on the search front!</p>",
        "id": 228993363,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614965813
    },
    {
        "content": "<p>Ok, so does it make sense to PR the <code>instance</code>s below?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">nnreal.to_real_hom.to_algebra</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_one</span><span class=\"o\">],</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">•</span><span class=\"o\">),</span> <span class=\"n\">mul_smul</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">],</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">•</span><span class=\"o\">),</span> <span class=\"n\">add_smul</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">],</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.map_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">]}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">pro</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 229009088,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614971934
    },
    {
        "content": "<p>Nr 1 looks good, nr 2 is <code>by apply_instance</code> so it is redundant, nr 3 should be a <code>def</code>, because the type class search can not determine <code>S</code> from the goal, so it will go crazy; nr 4 looks good (but the proof will have to change to use the def from nr 3).</p>",
        "id": 229010384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614972390
    },
    {
        "content": "<p>nr 2 is <code>by apply_instance</code> only after nr 1 is in: that does not matter, right?</p>",
        "id": 229010537,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614972462
    },
    {
        "content": "<p>Right, as soon as nr 1 is in mathlib, nr 2 is redundant</p>",
        "id": 229010617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614972485
    },
    {
        "content": "<p>Better?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">nnreal.to_real_hom.to_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">semimodule.of_algebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_one</span><span class=\"o\">],</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">•</span><span class=\"o\">),</span> <span class=\"n\">mul_smul</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">],</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">•</span><span class=\"o\">),</span> <span class=\"n\">add_smul</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">],</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.map_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">]}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">semimodule.of_algebra</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span>\n</code></pre></div>",
        "id": 229010995,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614972636
    },
    {
        "content": "<p>That last one looks dangerous to me</p>",
        "id": 229011947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614973009
    },
    {
        "content": "<p>Oh sorry, didn't scroll down</p>",
        "id": 229011976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614973022
    },
    {
        "content": "<p>I don't think <code>semimodule.of_algebra</code> is a great idea, that looks like something <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_scalar_tower\">docs#is_scalar_tower</a> is intended to solve</p>",
        "id": 229012229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614973124
    },
    {
        "content": "<p>I would also like to have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">ist</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">a.val</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">smul_assoc</span> <span class=\"n\">a.val</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">congr</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 229012313,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614973161
    },
    {
        "content": "<p>I thing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/restrict_scalars\">docs#restrict_scalars</a> might be related too</p>",
        "id": 229012657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614973302
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 229012711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614973320
    },
    {
        "content": "<p>Eric, I am looking at your suggestions: they do look very close to what I want.  (Although so far I have not been able to make them work \"as is\".)</p>",
        "id": 229013159,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614973493
    },
    {
        "content": "<p>Can you give two concrete examples for N for your last instance?</p>",
        "id": 229013480,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614973625
    },
    {
        "content": "<p>You mean two ℝ-modules <code>N</code>?  Like some actual real vector spaces?  Or am I misunderstanding what you are asking?</p>",
        "id": 229013678,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614973713
    },
    {
        "content": "<p>In <code>toric</code> I am trying to convert all the time between a vector space and a cone inside it, so I like to take \"non-negative\" multiples of vectors.  This is the reason why I would like to have this instance.</p>\n<p>(I just added a proof of the <code>is_scalar_tower</code> instance.)</p>",
        "id": 229013764,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614973764
    },
    {
        "content": "<p>My claim is that the semimodule instance should appear automatically if you define the scalar_tower one</p>",
        "id": 229014862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614974243
    },
    {
        "content": "<p>Eg, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.semimodule\">docs#pi.semimodule</a> for the module <code>fin 3-&gt; R</code></p>",
        "id": 229014863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614974243
    },
    {
        "content": "<p>Will inherit all module structures that R has</p>",
        "id": 229014927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614974281
    },
    {
        "content": "<p>If I understand you correctly, and I swap the last two like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">ist</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">a.val</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">smul_assoc</span> <span class=\"n\">a.val</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">congr</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">semimodule.of_algebra</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>then, <code>is_scalar_tower</code> wants a <code>has_scalar ℝ≥0 N</code> assumption that it can't find.</p>",
        "id": 229015137,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614974363
    },
    {
        "content": "<p>I think my claim is that all concrete N you care about should be providing that is_scalar_tower instance</p>",
        "id": 229015342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614974451
    },
    {
        "content": "<p>So in abstract situations you should just have it as a typeclass assumption</p>",
        "id": 229015444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614974484
    },
    {
        "content": "<p>so, in the <code>toric</code> branch, this is a lemma that does not work without that instance and does with it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">pointed_of_nnreal</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bv</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">ℝ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pointed</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">pointed_of_is_basis_is_inj</span> <span class=\"o\">(</span><span class=\"n\">is_inj_nonneg.pR_ocr</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">bv</span>\n</code></pre></div>",
        "id": 229015542,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614974512
    },
    {
        "content": "<p>I might take a look later. Can you give a github line permalink?</p>",
        "id": 229015665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614974550
    },
    {
        "content": "<p>It is probably a little cryptic, but you can see the <code>\\R</code>module assumption on <code>M</code> which does not automatically get a nnreal <code>is_scalar_tower</code>.</p>",
        "id": 229015697,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614974569
    },
    {
        "content": "<p>would telling you where to find it in <code>lean-liquid</code> be ok?</p>",
        "id": 229015808,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614974604
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/55f017b4c2238f7d5891d19b0adcc7c94bc8aa5c/src/toric_2021_02_19/toric.lean#L576\">https://github.com/leanprover-community/lean-liquid/blob/55f017b4c2238f7d5891d19b0adcc7c94bc8aa5c/src/toric_2021_02_19/toric.lean#L576</a></p>\n<p>The lemma begins on line 575, the instances are before it.</p>",
        "id": 229016294,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614974783
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 229016452,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614974873
    },
    {
        "content": "<p>Lines 559 to 573 should be removed, and replaced with hypotheses for the lemma on line 575</p>",
        "id": 229021059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614976875
    },
    {
        "content": "<p>That is, assume <code>[semimodule ℝ≥0 N]</code></p>",
        "id": 229021680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614977147
    },
    {
        "content": "<p>I can certainly assume those instances, instead of proving them in general, but the situation with ℕ and ℤ is that those instances are there automatically (e.g. the lemmas on 537 and 543).</p>",
        "id": 229021954,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614977261
    },
    {
        "content": "<p>I think that Lean also wants me to assume</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and then says that it cannot prove the result.  Although, it is getting late, so I may be doing something silly!</p>",
        "id": 229022584,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614977493
    },
    {
        "content": "<p>It seems that making these assumptions creates new instances for what should already be there and then Lean gets stuck on using them and does not find a compatibility among them.  Or maybe, this is what I think at the moment...</p>",
        "id": 229024262,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614978165
    },
    {
        "content": "<p>The first of those three assumptions should be a global instance</p>",
        "id": 229024430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614978240
    },
    {
        "content": "<p>You should indeed assume the other two</p>",
        "id": 229024514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614978258
    },
    {
        "content": "<p>Indeed, what is below works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">nnreal.to_real_hom.to_algebra</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pointed_of_nnreal</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bv</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">ℝ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pointed</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">pointed_of_is_basis_is_inj</span> <span class=\"o\">(</span><span class=\"n\">is_inj_nonneg.pR_ocr</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">bv</span>\n</code></pre></div>",
        "id": 229024798,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614978374
    },
    {
        "content": "<p>Why do you think that <code>algebra =&gt; semimodule</code> and then the nnreal instances are not good?  I am not objecting, I am just trying to understand what goes wrong.</p>",
        "id": 229024902,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614978431
    },
    {
        "content": "<p>I think the key observation is that instead of trying to construct the second module structure to be consistent with the first, you just assume that someone else constructed them in a suitable way</p>",
        "id": 229025281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614978593
    },
    {
        "content": "<p>Ok, to me, this seems a different convention than what happens with ℕ and ℤ.  However, I can see that maybe ℕ gets treated differently than ℝ.  Is this the case?</p>",
        "id": 229025685,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614978733
    },
    {
        "content": "<p>In any case, if you think that the instance below should go into mathlib, I can PR it (or feel free to do it yourself!), although I am going to bed now, so it will be at some other point!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">nnreal.to_real_hom.to_algebra</span>\n</code></pre></div>",
        "id": 229026123,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614978930
    },
    {
        "content": "<p>That instance definitely belongs in mathlib IMO</p>",
        "id": 229026356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614979034
    },
    {
        "content": "<p>I would put it in <code>data/real/nnreal</code>, but there is no <code>import algebra.algebra.basis</code>: it seems too much to import a file simply to use <code>algebra</code> for this instance, though...</p>",
        "id": 229027240,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614979489
    },
    {
        "content": "<p>N, Z, and Q are special because there are typeclasses for which every instance has an associated algebra - semiring, ring, and division_ring</p>",
        "id": 229028134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614979878
    },
    {
        "content": "<p>I can see that, although in the case of division ring, you should also assume char_zero.  Anyway, being the initial object of a \"natural\" category seems like a good place to draw the line!</p>",
        "id": 229028957,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614980272
    },
    {
        "content": "<p>But all three of those algebra (and semimodule) instances cause nasty non-defeq typeclass diamonds</p>",
        "id": 229042360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614987202
    },
    {
        "content": "<p>Eg, a <code>prod</code> of two add_comm_monoids is a nat-module in two ways; by distributing the smul to the components, and by repeated addition</p>",
        "id": 229042505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614987270
    },
    {
        "content": "<p>And it only gets worse, a product <code>(M x N) x (P x Q)</code> has 5 nat-module structures, all pairwise non-defeq</p>",
        "id": 229042795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614987482
    },
    {
        "content": "<p>Eric, thank you for taking the time to explain the arguments in favour and against these <code>instances</code>!</p>",
        "id": 229067285,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615007804
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6560\">#6560</a></p>",
        "id": 229067780,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615008251
    },
    {
        "content": "<p>Now, I guess you'll want \\C to inherit that structure too...</p>",
        "id": 229078278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615018223
    },
    {
        "content": "<p>Well, I have been working with <code>ordered</code> things, so I will let <code>\\C</code> be for the moment... even though Scott was adding orders on <code>\\C</code>!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 229078792,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615018741
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.algebra_over_reals\">docs#complex.algebra_over_reals</a> should be changed to copy across any algebra structure on R, not just R itself</p>",
        "id": 229079101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615019016
    },
    {
        "content": "<p>Attempted in <a href=\"https://github.com/leanprover-community/mathlib/issues/6562\">#6562</a></p>",
        "id": 229087853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615027674
    },
    {
        "content": "<p>Oooh, I see that this PR is also spraling... I hope that it will be easier than the other <code>instance</code> explosion.</p>",
        "id": 229091152,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615030889
    },
    {
        "content": "<p>But your observation that <code>ℕ</code> and <code>ℤ</code> are treated specially is salient, as that's where most of the pain in that PR is coming from</p>",
        "id": 229091227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615030955
    },
    {
        "content": "<p>Much to my surprise, CI passes already!</p>",
        "id": 229091379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615031143
    },
    {
        "content": "<p>I really find these conversations very useful!  Thank you for explaining the \"Lean translation\"  of \"initial objects in a category\".</p>\n<p>And I am happy that this is also helpful for the development of the API that you are carrying forward!</p>\n<p>Of course, in maths I am also used to making any ring R special/initial, by considering the category of all R-algebras.  I can accept that this may not have the status of a \"global\" instance in Lean.</p>",
        "id": 229092340,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615032059
    },
    {
        "content": "<p>And thank you for teaching me some category theory words to describe the lean!</p>",
        "id": 229093507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615033123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/rings.20from.20subtype/near/229078278\">said</a>:</p>\n<blockquote>\n<p>Now, I guess you'll want \\C to inherit that structure too...</p>\n</blockquote>\n<p>As of just now, you should find an <code>algebra ℝ≥0  ℂ</code> instance</p>",
        "id": 229775887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615424704
    }
]