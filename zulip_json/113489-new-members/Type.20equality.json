[
    {
        "content": "<p>Is it possible to decide whether two types are equal?</p>",
        "id": 147478097,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541943966
    },
    {
        "content": "<p>no</p>",
        "id": 147478161,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541944149
    },
    {
        "content": "<p>That makes me sad</p>",
        "id": 147478266,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541944431
    },
    {
        "content": "<p><code>local attribute [instance] classical.dec</code></p>",
        "id": 147478309,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541944481
    },
    {
        "content": "<p>Cheers, but I wanted to use it in a program</p>",
        "id": 147478315,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541944511
    },
    {
        "content": "<p>Instead I think I'm going to have to concoct some <code>user_notation</code> trickery to get the same syntax</p>",
        "id": 147478323,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541944548
    },
    {
        "content": "<p>I've heard it said here that even <code>nat = int</code> is undecidable</p>",
        "id": 147479490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541947042
    },
    {
        "content": "<p>independent, even</p>",
        "id": 147479581,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541947202
    },
    {
        "content": "<blockquote>\n<p>I've heard it said here that even <code>nat = int</code> is undecidable</p>\n</blockquote>\n<p>How exactly are we defining equality of types?</p>",
        "id": 147482478,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1541953301
    },
    {
        "content": "<p>As defined in Lean. If you separately define two inductive types of the same size, their equality will be independent.</p>",
        "id": 147482996,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541954378
    },
    {
        "content": "<p>I guess the lesson is to stay in <code>expr</code>-land if you're trying to do something programmatically like this (e.g. either its a <code>expr.const `bool []</code> or its not)</p>",
        "id": 147511856,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542010569
    },
    {
        "content": "<p>Well, it depends on what you mean. That will not get <code>id bool = bool</code></p>",
        "id": 147511939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542010744
    },
    {
        "content": "<p>sure yep</p>",
        "id": 147513299,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542012923
    }
]