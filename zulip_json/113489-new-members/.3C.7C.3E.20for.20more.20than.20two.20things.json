[
    {
        "content": "<p>I don't know how to implement the <code>highest</code> function here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- A set of partial functions fᵢ.</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"bp\">ᵢ</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- A priority for each fᵢ.</span>\n<span class=\"kd\">def</span> <span class=\"n\">priority</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">ᵢ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- Priorities are unique.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">unique_priority</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">priority</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- Returns the value `fᵢ(n)` for the fᵢ with the highest priority that doesn't map to `n` to `none`.</span>\n<span class=\"c1\">-- Or if all `fᵢ(n) = none`, then the value `none`.</span>\n<span class=\"kd\">def</span> <span class=\"n\">highest</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If it were just two functions, I'd use <code>&lt;|&gt;</code>. And I feel like <code>&lt;|&gt;</code> could work here, too - but I don't know how.</p>",
        "id": 238953704,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1621146024
    },
    {
        "content": "<p>I think what you're trying to do isn't well-defined when your set <code>fᵢs : set (ℕ → option ℕ)</code> is infinite. Maybe work with a list instead? Then some combination of <code>list.foldr</code> and <code>&lt;|&gt;</code> could do what you want.</p>",
        "id": 238955024,
        "sender_full_name": "Justus Springer",
        "timestamp": 1621147403
    },
    {
        "content": "<p>You might be able to do this (non-constructively) with well-foundedness</p>",
        "id": 238956467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621149143
    },
    {
        "content": "<p>Ah, right. What if I know that the set is finite though?</p>",
        "id": 238961876,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1621155608
    },
    {
        "content": "<p>There are several ways to say that (<code>set.finite</code>, <code>finset</code>) so it might be best if you formalise your question again because you'll have to make a design decision.</p>",
        "id": 238965451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621159495
    },
    {
        "content": "<p>By the way, <code>priority</code> and <code>unique_priority</code> together give you an injection from the power set of nat to nat so together can be used to get a contradiction, meaning that it's impossible to fill in all of the sorries.</p>",
        "id": 238965565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621159577
    },
    {
        "content": "<p>Right, presumably unique_priority should be quantifying only over elements of <code>fs</code></p>",
        "id": 238965684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621159717
    },
    {
        "content": "<p>mfirst is what you want, that's equivalent to the foldl of &lt;|&gt;</p>",
        "id": 238981145,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1621174005
    },
    {
        "content": "<p>Express yours functions as a list</p>",
        "id": 238981148,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1621174020
    },
    {
        "content": "<p>Try writing it in do notation</p>",
        "id": 238981184,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1621174077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/.3C.7C.3E.20for.20more.20than.20two.20things/near/238981184\">said</a>:</p>\n<blockquote>\n<p>Try writing it in do notation</p>\n</blockquote>\n<p>What's do notation?</p>",
        "id": 238992870,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1621185115
    },
    {
        "content": "<p><del>He probably means dot notation</del>.</p>",
        "id": 238993041,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621185279
    },
    {
        "content": "<p>For example if <code>S: finset a</code> and you have a lemma <code>finset.foo (S : finset a) : ...</code> you can write <code>S.foo</code> instead of <code>finset.foo S</code></p>",
        "id": 238993163,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621185408
    },
    {
        "content": "<p>No, <code>do</code> notation is described here: <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">https://leanprover-community.github.io/extras/tactic_writing.html</a></p>",
        "id": 238993188,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1621185458
    },
    {
        "content": "<p>Ops, sorry <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 238993265,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621185561
    }
]