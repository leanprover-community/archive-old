[
    {
        "content": "<p>How would I decast the x and pi in hn to match the goal, or opposingly, how can I cast the x and the pi to complex numbers in the goal to match hn?</p>",
        "id": 247101366,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627174861
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.circle</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.dihedral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">π</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247101376,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627174883
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>gets you home</p>",
        "id": 247112875,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1627196643
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">complex.of_real_inj</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 247112964,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1627196784
    },
    {
        "content": "<p>With the least magic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">complex.of_real_inj</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">complex.of_real_mul</span><span class=\"o\">,</span> <span class=\"n\">complex.of_real_mul</span><span class=\"o\">,</span> <span class=\"n\">complex.of_real_int_cast</span><span class=\"o\">,</span> <span class=\"n\">complex.of_real_bit0</span><span class=\"o\">,</span> <span class=\"n\">complex.of_real_one</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 247112985,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1627196862
    },
    {
        "content": "<p>Does <code>exact_mod_cast</code> close the goal?</p>",
        "id": 247115159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627200733
    },
    {
        "content": "<p>Thank you so much, Ruben, for showing exactly how Lean carries out each step of your suggestion! And, yup, exact_mod_cast hn closes the goal!</p>",
        "id": 247128082,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627221856
    },
    {
        "content": "<p>You can even do <code>assumption_mod_cast</code></p>",
        "id": 247128108,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627221952
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.circle</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.dihedral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247132167,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627228472
    },
    {
        "content": "<p>How about this one? How do I avoid the casting problem that <code>exact lt_of_lt_of_le h n1,</code> gives?</p>",
        "id": 247132179,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627228508
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.circle</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.dihedral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption_mod_cast</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247132232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627228604
    },
    {
        "content": "<p>(PS you should check your mwes compile! That one didn't)</p>",
        "id": 247132247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627228635
    },
    {
        "content": "<p>Ah yes the Type*, I realized the error after I sent it. You are too quick! Thank you</p>",
        "id": 247132447,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627228878
    }
]