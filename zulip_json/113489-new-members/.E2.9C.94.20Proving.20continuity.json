[
    {
        "content": "<p>Hello to all! I am working on proving something and within it, I have to prove the continuity of the coercion from reals to complex numbers. Is there any theorem that already proves that? I haven't found anything like it in the documentation. And if not, do you have a suggestion to go about it?</p>\n<p>Here is my extracted example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.fourier</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.interval_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.integrals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 293699897,
        "sender_full_name": "Julia Ramos Alves",
        "timestamp": 1660650564
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.fourier</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.interval_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.integrals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- you shouldn't really have f at all</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext1</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">t</span> <span class=\"o\">},</span> <span class=\"c1\">-- function extensionality</span>\n  <span class=\"n\">rw</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"c1\">-- now you have no f,</span>\n  <span class=\"n\">continuity</span><span class=\"o\">,</span> <span class=\"c1\">-- and now the system can do it</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 293700405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660650804
    },
    {
        "content": "<p>Defining something called <code>f</code> which already has a mathlib-name \"shadows\" the mathlib-name (in this case <code>coe</code>), so fewer tactics will work, because tactics are set up to work with Lean's conventions.</p>",
        "id": 293700525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660650859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"507730\">Julia Ramos Alves</span> has marked this topic as resolved.</p>",
        "id": 293701371,
        "sender_full_name": "Notification Bot",
        "timestamp": 1660651202
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 293701463,
        "sender_full_name": "Julia Ramos Alves",
        "timestamp": 1660651222
    },
    {
        "content": "<p>I've noticed a lot recently that students try tactics like <code>simp</code> or <code>norm_num</code> without thinking about questions such as \"does this tactic even have access to some facts which I know are crucial to the proof I want it to find\"? For example the <code>continuity</code> tactic has access to fact about <code>coe</code> but it will view <code>f</code> as opaque and not know what to do with it, I guess because it doesn't unfold (unfolding is probably usually wrong). Other examples: <code>simp</code> will not look at hypotheses and neither will <code>ring</code>.</p>",
        "id": 293702655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660651672
    }
]