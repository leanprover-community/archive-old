[
    {
        "content": "<p>Here is a MWE.   Why does it generate an error and how can I fix it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kd\">reserve</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:(</span><span class=\"bp\">¬</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">s</span><span class=\"o\">):=</span>\n\n   <span class=\"kd\">begin</span>\n     <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n     <span class=\"n\">intro</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n     <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n     <span class=\"k\">have</span> <span class=\"n\">h5</span><span class=\"o\">:</span><span class=\"bp\">¬</span> <span class=\"n\">s</span><span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n     <span class=\"n\">exact</span> <span class=\"n\">h4</span><span class=\"o\">,</span>   <span class=\"c1\">-- or exact h5, both work</span>\n   <span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">TEST</span>\n<span class=\"kd\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">𝔽</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">𝕊</span><span class=\"o\">:</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>  <span class=\"c1\">--successor</span>\n<span class=\"o\">(</span><span class=\"bp\">Λ</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kd\">infix</span>  <span class=\"bp\">∈</span> <span class=\"o\">:=</span>  <span class=\"n\">mem</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">SSC</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">emptyset_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">Λ</span> <span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">binary_union</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">minus</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">single</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n <span class=\"c\">/-</span><span class=\"cm\"> end of class definition because next line doesn't declare a member -/</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Model</span>\n<span class=\"kd\">infix</span>  <span class=\"bp\">∈</span> <span class=\"o\">:=</span>  <span class=\"n\">mem</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">∪</span> <span class=\"o\">:=</span> <span class=\"n\">binary_union</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">-</span> <span class=\"o\">:=</span> <span class=\"n\">minus</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">double_negate</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span> <span class=\"n\">P</span><span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">ifinish</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">push_double_negation</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">¬¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span> <span class=\"n\">Q</span><span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">ifinish</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span>  <span class=\"n\">foo</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">):(</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span><span class=\"bp\">→</span>  <span class=\"o\">(</span><span class=\"bp\">¬¬</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">𝔽</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬¬¬¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">)):=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h14</span><span class=\"o\">:=</span> <span class=\"n\">double_negate</span>  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h15</span><span class=\"o\">:=</span> <span class=\"n\">push_double_negation</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">𝔽</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">))(</span><span class=\"bp\">¬¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"n\">h14</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n\n <span class=\"kd\">end</span> <span class=\"n\">TEST</span>\n</code></pre></div>",
        "id": 220025972,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1608058977
    },
    {
        "content": "<p>Looks likely to be mismatched parentheses, is this what you wanted? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span>  <span class=\"n\">foo</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">):</span>\n <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n <span class=\"o\">(</span><span class=\"bp\">¬¬</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">𝔽</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬¬¬¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">):=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h14</span> <span class=\"o\">:=</span> <span class=\"n\">double_negate</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h15</span><span class=\"o\">:=</span> <span class=\"n\">push_double_negation</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">𝔽</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝕊</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">¬¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"n\">h14</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220030679,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1608060938
    },
    {
        "content": "<p>Does anyone have a working VSCode extension that matches brackets by colour?</p>",
        "id": 220062667,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608077794
    },
    {
        "content": "<p><a href=\"https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2\">Bracket pair colorizer 2</a> still works for me, but <code>begin</code> and <code>end</code> screw it up sometimes (might just be my own settings).</p>",
        "id": 220062805,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1608077893
    },
    {
        "content": "<p>Thank you Logan,  sorry you to bother you with mismatched parens, sheesh.</p>",
        "id": 220075873,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1608092404
    },
    {
        "content": "<p>Works for me too, although occasionally I have to ctrl-P reload</p>",
        "id": 220084736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608103779
    }
]