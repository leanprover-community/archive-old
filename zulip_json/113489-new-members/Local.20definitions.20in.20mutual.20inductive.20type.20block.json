[
    {
        "content": "<p>Hi. I am trying to define a mutually inductive type in Lean 4. For convenience I have a generic structure <code>MorphData</code> which is non-inductive. I need to convert my inductively defined <code>Morph</code> type to <code>MorphData</code> to pass into the mutually inductively defined globular Constraint constructor. It all type checks fine except that for an error under <code>mutual</code> saying, <code>invalid mutual block</code>. I'm guessing that you can't have freestanding function definitions inside the mutual block. I can't move <code>getMorphismData</code> outside the mutual block either since it both relies on and is used in the definitions. I guess what I need is a way to define <code>getMorphismData</code> as a local definition under <code>Morph</code>, but I've tried various ways of using the <code>let</code> syntax and can't get it to work.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">MorphData</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">Name</span>\n  <span class=\"n\">input</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">output</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">dimension</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Morph</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">unitMorph</span>  <span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">liftPair</span> <span class=\"o\">(</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Morph</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">:</span><span class=\"n\">Morph</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">globularityProof</span><span class=\"o\">:</span> <span class=\"n\">globular</span> <span class=\"o\">(</span><span class=\"n\">getMorphData</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">getMorphData</span> <span class=\"n\">o</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n <span class=\"kd\">def</span> <span class=\"n\">getMorphData</span> <span class=\"o\">(</span><span class=\"n\">mSym</span><span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MorphData</span> <span class=\"n\">Morph</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">mSym</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unitSym</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MorphData.mk</span> <span class=\"n\">UnitName</span> <span class=\"n\">unitSym</span> <span class=\"n\">unitSym</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">liftPair</span> <span class=\"n\">nm</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">o</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MorphData.mk</span> <span class=\"n\">nm</span> <span class=\"n\">i</span> <span class=\"n\">o</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Constraint</span> <span class=\"o\">:</span>  <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">globular</span> <span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">:</span> <span class=\"n\">MorphismData</span> <span class=\"o\">(</span><span class=\"n\">Morph</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span><span class=\"o\">:</span> <span class=\"n\">MorphismData</span> <span class=\"o\">(</span><span class=\"n\">Morph</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:(</span><span class=\"n\">input</span> <span class=\"bp\">=</span> <span class=\"n\">output</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">input.input</span> <span class=\"bp\">=</span> <span class=\"n\">output.input</span> <span class=\"bp\">∧</span> <span class=\"n\">input.output</span> <span class=\"bp\">=</span> <span class=\"n\">output.output</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Constraint</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 298345371,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1662975426
    },
    {
        "content": "<p>You might want to ask this question in the Lean 4 stream; most people who read this stream are Lean 3 users.</p>",
        "id": 298371429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662985972
    }
]