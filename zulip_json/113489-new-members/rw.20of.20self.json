[
    {
        "content": "<p>While playing around with the question of <a href=\"#narrow/stream/113489-new-members/topic/.F0.9D.94.BD.E2.82.82.5B.CE.B1.2C.20.CE.B2.2C.20.CE.B3.5D.20.2F.20(.CE.B1.C2.B2.2C.20.CE.B2.C2.B2.2C.20.CE.B3.C2.B2)\">this thread</a>, I came across the funny behaviour below.  I expected that <code>rw</code> could be used to rewrite a hypothesis with itself, but I was not able to make it work.  Below is also an awkward way of doing it, by \"duplicating a hypothesis\".  I can see that this is borderline self-referential, but is there a way to make the proof below work without duplicating a hypothesis?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">-- I would like to do this, but it does nothing...</span>\n<span class=\"c1\">--  rw [h] at h {occs := occurrences.pos [2]},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span> <span class=\"o\">{</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"n\">occurrences.pos</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">pow_mul</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222856884,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610717468
    },
    {
        "content": "<p>Unsurprisingly, <code>repeat { rw [h] at h {occs := occurrences.pos [2]} }</code> times out.</p>",
        "id": 222857421,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610717752
    },
    {
        "content": "<p>hmm, I don't know if that's possible</p>",
        "id": 222863985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610721002
    },
    {
        "content": "<p>Is <code>occurrences.pos</code> the same as <code>nth_rewrite</code>?</p>",
        "id": 222864117,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1610721049
    },
    {
        "content": "<p>not exactly, but almost</p>",
        "id": 222864158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610721062
    },
    {
        "content": "<p>Fair enough!  The solution is not so bad, just feels clunky.  I also suspect that these kind of rewrites would be more common when working with power series and finding better approximations, from earlier ones.  Maybe also results like the contraction theorem...  Btw, is the contraction theorem in mathlib?</p>",
        "id": 222864325,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610721125
    },
    {
        "content": "<p>you could do <code>rw</code> at <code>pos [1]</code> in the goal</p>",
        "id": 222864355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610721143
    },
    {
        "content": "<p>maybe yes:</p>\n<p>mathlib/src/topology/metric_space/contracting.lean:/-- Banach fixed-point theorem, contraction mapping theorem, <code>emetric_space</code> version.</p>",
        "id": 222864388,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610721163
    },
    {
        "content": "<p>Johan, I am not sure that I understand how to try what you suggested...</p>",
        "id": 222864539,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610721230
    },
    {
        "content": "<p>I got it!  Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"n\">occurrences.pos</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]},</span> <span class=\"c1\">-- Johan's suggestion to work on the goal, instead</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"n\">occurrences.pos</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]},</span>\n</code></pre></div>\n<p><del> rw [h] at h {occs := occurrences.pos [2]},</del></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I like this, although I view it as a different workaround.  In any case, this question mostly arose as a curiosity, than an actual issue.</p>",
        "id": 222865237,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610721548
    },
    {
        "content": "<p>what is the 3rd line doing?</p>",
        "id": 222865544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610721706
    },
    {
        "content": "<p>It was a left-over from before.  As I learned, it does absolutely nothing!  I could replicate it as much as I wanted and it would still be useless!  <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 222865734,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610721779
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"n\">occurrences.pos</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]},</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 222865819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610721836
    },
    {
        "content": "<p>Ah, I did not know that you could compress the <code>rw</code> with the optional parameters!</p>",
        "id": 222865922,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610721885
    }
]