[
    {
        "content": "<p>I am new to lean and I have a very basic question:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">plus_0_n</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">):</span> <span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">n_n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">n_n</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I get stuck in this proof, because the names of the variables do not match up, i.e. my induction hypothesis is 0 + n_n = n_n , and n_n : nat. But somehow lean does not want to apply this to the goal, rewriting n_n.succ to n_n - (which I find strange, since both are of type nat). When I try to use the generalize tactic lean changes the name to n_n1, again not allowing me to use rewrite.</p>\n<p>Can someone point me to the right tactic to use here?</p>",
        "id": 202924540,
        "sender_full_name": "Timo Schneider",
        "timestamp": 1593960487
    },
    {
        "content": "<p>You need to do something before you can apply the induction hypothesis</p>",
        "id": 202924564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593960565
    },
    {
        "content": "<p><code>n_ih</code> is only about <code>n_n</code>, not about <code>n_n + 1</code>.</p>",
        "id": 202924569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593960581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20rewrite.20when.20names.20do.20not.20match/near/202924564\">said</a>:</p>\n<blockquote>\n<p>You need to do something before you can apply the induction hypothesis</p>\n</blockquote>\n<p>Yes, I think I want to get this into a form like succ(0+n) = succ(n), in coq I can do so using simplification:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Theorem</span> <span class=\"n\">plus_O_n</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">.</span>\n<span class=\"n\">Proof</span><span class=\"bp\">.</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span><span class=\"bp\">.</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"bp\">.</span> <span class=\"n\">reflexivity</span><span class=\"bp\">.</span>\n  <span class=\"n\">simpl</span><span class=\"bp\">.</span> <span class=\"n\">rewrite</span> <span class=\"n\">IHn</span><span class=\"bp\">.</span> <span class=\"n\">reflexivity</span><span class=\"bp\">.</span> <span class=\"n\">Qed</span><span class=\"bp\">.</span>\n</code></pre></div>\n\n\n<p>I guess i need a small theorem to rewrite the goal first in lean.</p>",
        "id": 202924786,
        "sender_full_name": "Timo Schneider",
        "timestamp": 1593960937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"318802\">@Timo Schneider</span> Right. So just tell lean. (In this case it will work.)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n_n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n_n</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 202925217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593961667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> [said](<a href=\"#narrow/stream/113489-new-members/topic\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic</a></p>\n<p>Thanks, I got it to work now, but I need to read a bit more about the show tactic to understand what it does.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">plus_0_n</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">):</span> <span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n_n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n_n</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202926129,
        "sender_full_name": "Timo Schneider",
        "timestamp": 1593963145
    }
]