[
    {
        "content": "<p>Hi all, <br>\nMy name is Amaury Hayat, I am a mathematician just beginning with Lean, and I am very happy to join this community! I read the doc and played at the very nice Natural Number Game. I am trying to write some theorems, and I am still struggling with some maths notations in Lean: for instance I am trying to write that for n\\in\\mathbb{N}^{*}, f : x |-&gt; x^{n}  is a group homomorphism from (\\mathbb{R}^{*}, \\times) in itself and was wondering whether there is already some code to show that (\\mathbb{R}^{*}, \\times) is a multiplicative group. Thanks a lot in advance, I hope I'll be able to contribute to this project :)</p>",
        "id": 239064122,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1621246672
    },
    {
        "content": "<p>You can write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> as <code>units ℝ</code></p>",
        "id": 239064264,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621246742
    },
    {
        "content": "<p>also, you can write LaTeX in Zulip by surrounding it with <code>$$</code>, e.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∈</mo><msup><mi mathvariant=\"double-struck\">N</mi><mo lspace=\"0em\" rspace=\"0em\">∗</mo></msup><mo separator=\"true\">,</mo><mi>f</mi><mo>:</mo><mi>x</mi><mo>↦</mo><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">n\\in\\mathbb{N}^{*}, f : x \\mapsto x^{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∗</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 239064336,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1621246798
    },
    {
        "content": "<p>(Or is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mo lspace=\"0em\" rspace=\"0em\">∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^{*}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∗</span></span></span></span></span></span></span></span></span></span></span></span> something different from the invertible elements, i.e. <code>{1}</code>?)</p>",
        "id": 239064444,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621246832
    },
    {
        "content": "<p>Maybe it's notation for the positive natural numbers? I haven't seen it before either</p>",
        "id": 239064679,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1621246945
    },
    {
        "content": "<p>And the fact that it's a group is registered through the type-class system; for example see <a href=\"https://github.com/leanprover-community/mathlib/blob/2077c90cb30845321bfbbd77709e882f39d0b48f/src/algebra/group/units.lean#L64\">here</a> for the proof/<code>instance</code> that the units of a monoid (like ℝ) also form a group</p>",
        "id": 239064810,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1621247037
    },
    {
        "content": "<p>So you can just start doing group stuff with it and it'll be fine with it</p>",
        "id": 239064854,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1621247046
    },
    {
        "content": "<p>Ah, it's probably <code>ℕ</code> where <code>*</code> is actually addition, so <code>multiplicative ℕ</code> in mathlib</p>",
        "id": 239064875,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621247058
    },
    {
        "content": "<p>I always thought <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> was a standard notation for the naturals without 0. Maybe it's a regional thing.</p>",
        "id": 239065323,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1621247336
    },
    {
        "content": "<p>The syntax <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">R^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.688696em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> usually means \"without zero\", so in this case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> means the positive natural numbers <code>pnat</code>. It is also used on other rings like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>, in which case we are usually interested in the multiplicative structure; this is what <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"double-struck\">R</mi><mo lspace=\"0em\" rspace=\"0em\">∗</mo></msup><mo separator=\"true\">,</mo><mo>×</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\mathbb{R}^{*}, \\times)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∗</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">×</span><span class=\"mclose\">)</span></span></span></span> means (which we would write <code>units ℝ</code>)</p>",
        "id": 239065327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621247338
    },
    {
        "content": "<p>I had this exact discussion with some friends (they are french and working in analysis). They were shocked that for me <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">Z</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}^\\ast</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> does not mean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo>∖</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z} \\setminus \\{0\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∖</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 239065515,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621247431
    },
    {
        "content": "<p>Regarding the question, we already know that <code>units R</code> is an abelian group, so I would generalize this to the statement that <code>λ x, n • x</code> is a group hom on any abelian group</p>",
        "id": 239065870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621247635
    },
    {
        "content": "<p>Which as of recently is part of the axioms of (additive) abelian groups</p>",
        "id": 239066092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621247747
    },
    {
        "content": "<p>ah, here it is: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/gpow.is_group_hom\">docs#gpow.is_group_hom</a></p>",
        "id": 239066588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621248051
    },
    {
        "content": "<p>Thanks a lot for all these answers ! It's very helpful :) Yes I used $\\mathbb{N}^{*}$ for the positive natural numbers, sorry for the confusion I should have remembered  that this is just a regional thing.</p>",
        "id": 239074184,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1621252231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"411224\">@Amaury Hayat</span> Confusingly, you need to use <code>$$</code> for inline math on Zulip.</p>",
        "id": 239074457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621252411
    },
    {
        "content": "<p>Ok, thanks ! Seems like I'm a beginner on Zulip as well.</p>",
        "id": 239075921,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1621253123
    },
    {
        "content": "<p>We have all been there (-;</p>",
        "id": 239076088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621253202
    },
    {
        "content": "<p>Everyone is bikeshedding about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> but the statement is true for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> ;-)</p>\n<p><span class=\"user-mention\" data-user-id=\"411224\">@Amaury Hayat</span> here are the two <code>sorry</code>s which Lean would like you to fill in for your result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">real.nat_pow_hom</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→*</span> <span class=\"n\">units</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I suspect that there is a way to do it with just one sorry, there should be a constructor for group homs which only demands a proof of <code>map_mul</code>.</p>",
        "id": 239082315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621255877
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> for this answer ! Indeed, the statement was conservative. Do you think there would be a way to state it as a theorem (for the sole purpose of exercising in writing statements) like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">ℝ</span><span class=\"o\">):=</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">my_test_th</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_group_hom</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Would this formulation be too naïve (as it implicitly uses that units \\br is a group) ? Apologies in advance if this is a silly question: I literally just started writing in Lean this morning.</p>",
        "id": 239111414,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1621265836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"411224\">@Amaury Hayat</span> Yes, some think like that looks fine. Although mathlib no longer uses <code>is_group_hom</code>.</p>",
        "id": 239115890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621267368
    },
    {
        "content": "<p>Great, thanks! I'll use monoid_hom then.</p>",
        "id": 239116223,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1621267473
    },
    {
        "content": "<p>I think we have this in the library as <code>(powers_mul_hom (units ℝ)).to_monoid_hom.flip n</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/powers_mul_hom\">docs#powers_mul_hom</a>)</p>",
        "id": 239118963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621268517
    },
    {
        "content": "<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">real.nat_pow_hom</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→*</span> <span class=\"n\">units</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">monoid_hom.of</span> <span class=\"o\">(</span><span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 239120022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621268930
    },
    {
        "content": "<p>Lean knows that the units of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> (or indeed of any ring) are a group under multiplication -- this \"therorem\" (as a mathematician would call it), or, more precisely, construction (as Lean would call it), is part of Lean's type class inference system. Eric's proof is just saying \"it's in mathlib already\" which of course is not surprising.</p>",
        "id": 239122241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621269804
    },
    {
        "content": "<p>Lean knows that the units of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> (or indeed of any ring) are a group under multiplication -- this \"therorem\" (as a mathematician would call it), or, more precisely, construction (as Lean would call it), is part of Lean's type class inference system. Eric's proof is just saying \"it's in mathlib already\" which of course is not surprising.</p>",
        "id": 239122279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621269819
    },
    {
        "content": "<p>Great, thank you for the explanation</p>",
        "id": 239130214,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1621273090
    }
]