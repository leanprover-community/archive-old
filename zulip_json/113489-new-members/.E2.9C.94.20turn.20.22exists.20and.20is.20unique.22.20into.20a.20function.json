[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"516952\">Pierre Guillot</span> has marked this topic as resolved.</p>",
        "id": 290886537,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658840179
    },
    {
        "content": "<p>The axioms and the proof of LEM is explained here: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#the-law-of-the-excluded-middle\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#the-law-of-the-excluded-middle</a></p>",
        "id": 290905203,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658847284
    },
    {
        "content": "<p>Let me butt in here to advertise a new gadget we just merged a few days ago: <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#expand_exists\">expand_exists</a> will automatically define a function and its specification if you prove an existential lemma. This always uses choice, it makes no attempt to be constructive even when possible.</p>",
        "id": 290923638,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1658854699
    },
    {
        "content": "<p>That is great that we have this. Using <code>exists.some</code> and <code>exists.some_spec</code> felt annoying before I learned from Kevin how to use it properly (which was exactly what <code>expand_exists</code> does). Does it work with <code>exists_unique</code> in the same way or do have to add some boilerplate for that by hand? Also I think you should advertise this in some more visible location.</p>",
        "id": 290926952,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1658856182
    },
    {
        "content": "<p>I didn't know that <code>expand_exists</code> already exists. The gadget is very handy, maybe we should mention it in the community blog?</p>",
        "id": 290930708,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1658857625
    },
    {
        "content": "<p>I never tested it with <code>exists_unique</code>. I think it probably won't work out of the box, but unfolding the definition of <code>exists_unique</code> should make it do what you'd expect. This would be a very easy feature to add.</p>",
        "id": 290935237,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1658859564
    },
    {
        "content": "<p>Maybe it's time for a blog post about some recent new tactics/meta-features!</p>",
        "id": 290935300,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1658859592
    },
    {
        "content": "<p>I missed this <code>expand_exists</code> tactic until just now, but I thought I would mention that it bears a great resemblance to the <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20constructed.20objects/near/270984147\"><code>unpack</code></a> user command I wrote a while back. I haven't thought too deeply about the relative UX of these</p>",
        "id": 291255631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659044427
    },
    {
        "content": "<p>Is there a usage example of that command?</p>",
        "id": 291256056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659044689
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">N0</span>\n<span class=\"kn\">section</span>\n  <span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"n\">τrx₁elt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rx₁</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">τrx₁elt</span><span class=\"o\">)</span>\n  <span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">hrx₁</span> <span class=\"o\">:</span> <span class=\"n\">rx₁</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n  <span class=\"kn\">include</span> <span class=\"n\">τrx₁elt</span> <span class=\"n\">rx₁</span> <span class=\"n\">hrx₁</span>\n  <span class=\"kn\">namespace</span> <span class=\"n\">n0</span>\n    <span class=\"kd\">lemma</span> <span class=\"n\">aux30</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">τrx₁elt</span><span class=\"o\">,</span> <span class=\"n\">rx₁</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">rx₁</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">unpack</span> <span class=\"o\">⟨</span><span class=\"n\">fX</span><span class=\"o\">,</span> <span class=\"n\">frx₁</span><span class=\"o\">,</span> <span class=\"n\">frx₁_empty</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">aux30</span>\n    <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">τrx₁elt</span> <span class=\"o\">:=</span> <span class=\"n\">fX</span>\n    <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">rx₁</span> <span class=\"bp\">=</span> <span class=\"n\">fX</span> <span class=\"o\">:=</span> <span class=\"n\">frx₁</span>\n    <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">rx₁</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"n\">frx₁_empty</span>\n  <span class=\"kd\">end</span> <span class=\"n\">n0</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">N0</span>\n</code></pre></div>",
        "id": 291256407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659044889
    },
    {
        "content": "<p>(this was someone else's example rewritten to use <code>unpack</code>)</p>",
        "id": 291256459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659044921
    },
    {
        "content": "<p>I think that syntactically it makes the most sense to make it look like a command-level <code>obtain</code></p>",
        "id": 291256559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659044993
    },
    {
        "content": "<p>although it leaves a lot of open questions about where to put all the other doodads that <code>def</code> supports</p>",
        "id": 291256661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659045033
    }
]