[
    {
        "content": "<p>Hello!<br>\nI'm currently learning lean and when playing around with basic properties of sets and images, I encountered a behavior which I find strange:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"c1\">-- (1) works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span> <span class=\"bp\">↔</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹'</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hxS</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">hxS</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hxS</span><span class=\"o\">,</span> <span class=\"n\">hfx</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hfx</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">hxS</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- (2) works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span> <span class=\"bp\">↔</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹'</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hxS</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">hxS</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hxS</span><span class=\"o\">,</span> <span class=\"n\">hfx</span><span class=\"o\">⟩,</span> <span class=\"n\">hfx</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"n\">hxS</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- (3) doesn't work: \"function expected at h, term has type f '' S ⊆ T\"</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">example (S : set X) (T : set Y) : f '' S ⊆ T ↔ S ⊆ f⁻¹' T :=</span>\n<span class=\"cm\"> ⟨λ h x hxS, h (mem_image_of_mem f hxS), λ h y ⟨x, hxS, hfx⟩, hfx ▸ h hxS⟩</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- (4) works (??)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹'</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hxS</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">hxS</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I tried to incrementally translate the tactic-style proof of (1) into a term-proof. However, example (3), which I believed to be a quite canonical translation of (2) into a term proof, throws me the following error at the application of <code>h</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span>\n</code></pre></div>\n<p>I find this weird because I thought the term <code>X ⊆ Y</code> was _definitionally equal_ to <code>∀ ⦃a⦄, a ∈ X → a ∈ Y</code>, i.e. a function type. Even weirder, when I only prove one implication as in (4), it works fine. Can someone help me understand what's going on here? Thanks!</p>",
        "id": 230913676,
        "sender_full_name": "Justus Springer",
        "timestamp": 1616091319
    },
    {
        "content": "<p>The error goes away if you remind Lean of what you're trying to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span> <span class=\"bp\">↔</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹'</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n <span class=\"o\">⟨</span><span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹'</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hxS</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">hxS</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hxS</span><span class=\"o\">,</span> <span class=\"n\">hfx</span><span class=\"o\">⟩,</span> <span class=\"n\">hfx</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"n\">hxS</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 230990947,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616143454
    },
    {
        "content": "<p>With <code>set_option pp.all true</code>, we can find a metavariable in the type of <code>h</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_subset.subset.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">set.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.image.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">T</span>\n</code></pre></div>",
        "id": 230991037,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616143509
    },
    {
        "content": "<p>The metavariable is the <code>?m_1</code>, which means there are some implicit arguments that Lean hasn't figured out by the time it checks that <code>h</code> is a function.</p>",
        "id": 230991213,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616143620
    },
    {
        "content": "<p>If we look at the definition of <code>has_subset.subset</code>, we see that this is the <code>has_subset (set Y)</code> instance, i.e. the definition of \"<code>S \\subset T</code> for sets is just <code>∀ {x], x ∈ S -&gt; x ∈ T</code>\".</p>",
        "id": 230991457,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616143762
    },
    {
        "content": "<p>Why this happen in term mode and not in tactic mode is that the elaborator, which fills in these metavariables, tries to solve problems in a specific order, and apparently this order did not work well for this proof.</p>",
        "id": 230991876,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616144006
    },
    {
        "content": "<p>Thank you, that has helped me a lot!</p>",
        "id": 231008599,
        "sender_full_name": "Justus Springer",
        "timestamp": 1616153221
    },
    {
        "content": "<p>Here's another version that works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span> <span class=\"bp\">↔</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹'</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hxS</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">hxS</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hxS</span><span class=\"o\">,</span> <span class=\"n\">hfx</span><span class=\"o\">⟩,</span> <span class=\"n\">hfx</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"n\">hxS</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>The only difference is that the <code>example</code> is now a <code>theorem</code></p>",
        "id": 231090286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616188144
    },
    {
        "content": "<p>The issue is that it hasn't figured out what <code>has_subset</code> instance is being used by the time it sees <code>h</code> being used as a function. This is only a problem when the statement and proof are elaborated together, as happens in <code>example</code> and <code>def</code></p>",
        "id": 231090421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616188214
    }
]