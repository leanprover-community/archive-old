[
    {
        "content": "<p>I want to translate the following English sentence into Lean:<br>\n\"An extended bool is either a value called <strong>extra</strong> or a boolean value\".</p>\n<p>Normally I would do it by typing</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">extended_bool</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">extra</span>   <span class=\"o\">:</span> <span class=\"n\">extended_bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">boolean</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">extended_bool</span>\n</pre></div>\n\n\n<p>However, this means that when working with extended bool, I always need to destruct it and include the <strong>boolean</strong> constructor for the boolean case. Can I save myself some work by having an \"anonymous\" constructor? Is this considered bad coding practice?</p>",
        "id": 187587867,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1581022601
    },
    {
        "content": "<p>That looks like <code>option bool</code> to me</p>",
        "id": 187588227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581022837
    },
    {
        "content": "<p>Anonymous constructors unfortunately only work for types with one constructor</p>",
        "id": 187588311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581022895
    },
    {
        "content": "<p>But even with option, don't I have to use <code>some</code> and <code>none</code>?  I wanted some way to say \"if it is not extra, then it must be boolean, so I am not going to write it.\"</p>\n<p>Another example might be <code>bool ⊕ nat</code>. Is there a way for me to define functions on this type without constantly making references to <code>sum.inl</code> and <code>sum.inr</code>? As in, can Lean infer the definition of the function simply from the type of the arguments?</p>",
        "id": 187589579,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1581023685
    },
    {
        "content": "<p>You can define a coercion from bool to extended_bool</p>",
        "id": 187589643,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023755
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ebool</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"n\">bool</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">bool</span> <span class=\"n\">ebool</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ebool</span> <span class=\"bp\">→</span> <span class=\"n\">ebool</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">f</span> <span class=\"n\">tt</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">f</span> <span class=\"n\">none</span>\n</pre></div>",
        "id": 187589778,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023853
    },
    {
        "content": "<p>Is that what you want?</p>",
        "id": 187589790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023858
    },
    {
        "content": "<p>In case this is not clear, <code>option bool</code> without wrapping it already gives you that.</p>",
        "id": 187590052,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581024022
    },
    {
        "content": "<p><code>option</code> actually already has such a coercion</p>",
        "id": 187590609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581024428
    },
    {
        "content": "<p>(oops, patrick already said this)</p>",
        "id": 187590626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581024443
    },
    {
        "content": "<p>This will work in cases like <code>bool ⊕ nat</code>, with type based dispatch, but it won't work in patterns (i.e. pattern matching requires explicit <code>inl</code> and <code>inr</code>). But I don't think it is good style, and the option coe is rarely used in mathlib</p>",
        "id": 187590800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581024553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> yes, that is what I was looking for. That's a cool trick with <code>has_coe</code>.<br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yes, I can see how this can lead to smelly code. I'll try and avoid this kind of usage in practice.</p>\n<p>For the case of <code>bool ⊕ nat</code>, do I still need explicit coercion? I am not sure I understand what you mean by type-based-dispatch. So far I have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ebool</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span> <span class=\"err\">⊕</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ebool</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>   <span class=\"c1\">-- throws an error</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span>  <span class=\"o\">:=</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>How can I define that <code>f</code> properly?</p>",
        "id": 187592481,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1581025936
    },
    {
        "content": "<p>like I said, it won't work in patterns</p>",
        "id": 187592948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581026288
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ebool</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span> <span class=\"err\">⊕</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">coe_l</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">bool</span> <span class=\"n\">ebool</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">coe_r</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">nat</span> <span class=\"n\">ebool</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">ebool</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">ebool</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ebool</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 187593126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581026413
    },
    {
        "content": "<p>Oh, it looks like this works too:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ebool</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 187593231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581026520
    },
    {
        "content": "<p>Oh, that's just perfect! Thanks. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 187593564,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1581026724
    }
]