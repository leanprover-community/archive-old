[
    {
        "content": "<p>As a minimal working example, is it possible to prove the <code>sorry</code> here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">return</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 313877974,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1670207514
    },
    {
        "content": "<p>The actual case is that I am pattern matching on the result of <code>hash_map.find</code> and need to prove if it succeeds that the pattern matched result is an element of the hash map.</p>",
        "id": 313878311,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1670207854
    },
    {
        "content": "<p>I don’t think the monadic <code>bind</code> knows about the relationship between <code>d</code> and <code>(m, n)</code>.  You can tell this both in the goal at <code>sorry</code> and if you print out your current <code>blah</code>.  (Note, it is easier to see what is going on if you just use <code>d : option nat</code> In your MWE.)</p>",
        "id": 313880666,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670210064
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=def%20blah%20%28d%20%3A%20option%20nat%29%20%3A%20option%20nat%20%3A%3D%20do%0An%20%3C-%20d%2C%0Ahave%20s1%20%3A%20d%20%3D%20some%20n%2C%0Abegin%0A%20%20sorry%2C%0Aend%2C%0Areturn%20n%0A%0A%23print%20blah\">this example</a>.</p>",
        "id": 313880917,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670210357
    },
    {
        "content": "<p>In my example, all bind takes in is a function of type <code>nat-&gt; option Nat</code> which it then applies to <code>d</code>.  The second reference to <code>d</code> however is a direct reference used in this function.</p>",
        "id": 313881422,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670210777
    },
    {
        "content": "<p>Hmm. Is there a way around this by not using bind?</p>",
        "id": 313881781,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1670211089
    },
    {
        "content": "<p>Or more generally if something pattern matches against something, to get a proof that it is equal to what it pattern matched to?</p>",
        "id": 313882201,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1670211560
    },
    {
        "content": "<p>I think it would help to give another <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> which captures the sort of end goal you have in mind (the <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem).</p>",
        "id": 313883418,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670212817
    },
    {
        "content": "<p>One can define <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.pmap\">docs#option.pmap</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.pbind\">docs#option.pbind</a>, and likely a pguard. But do notation doesn't use those.</p>",
        "id": 313883537,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1670212902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113489-new-members/topic/extract.20proof.20from.20monad.20pattern.20match/near/313883418\">said</a>:</p>\n<blockquote>\n<p>I think it would help to give another <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> which captures the sort of end goal you have in mind (the <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem).</p>\n</blockquote>\n<p>Hmm, it is a complicated end goal, I'm not sure of one yet.</p>",
        "id": 313884282,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1670213544
    },
    {
        "content": "<p>Thank you though.</p>",
        "id": 313884306,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1670213572
    },
    {
        "content": "<p>Somehow I need to lookup an item in a hash map, pattern match it against a structure, and if it matches get a proof that the pattern matched structure is in the hash map.</p>",
        "id": 313884621,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1670213822
    },
    {
        "content": "<p>It's not at all a mwe, but this sorry is what I'm trying to fill in: <a href=\"https://github.com/pthomas505/lean3/blob/831538f34f737ab8f276dea41fcf7e14ab2e225d/src/metalogic/fol_mm0.lean#L947\">https://github.com/pthomas505/lean3/blob/831538f34f737ab8f276dea41fcf7e14ab2e225d/src/metalogic/fol_mm0.lean#L947</a></p>",
        "id": 313884718,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1670213894
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Kayla Thomas</span> <a href=\"#narrow/stream/113489-new-members/topic/extract.20proof.20from.20monad.20pattern.20match/near/313882201\">said</a>:</p>\n<blockquote>\n<p>Or more generally if something pattern matches against something, to get a proof that it is equal to what it pattern matched to?</p>\n</blockquote>\n<p>The syntax for this is <code>match h : x with</code>, and the hypothesis will be in the local context of each branch. This used to be in the docs, for some reason it's not in TPIL4.</p>",
        "id": 313886152,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1670215280
    },
    {
        "content": "<p>Oh you're using Lean 3.</p>",
        "id": 313886271,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1670215375
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 313886802,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1670215896
    },
    {
        "content": "<p>There's a hack for doing this in Lean 3 with match: <a href=\"#narrow/stream/113489-new-members/topic/cases.20on.20mutually.20recursive.20types/near/173391821\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/cases.20on.20mutually.20recursive.20types/near/173391821</a></p>\n<p>It might be awkward with option, but you can do a more straight-forward thing in lean 3 with <code>if h : x.is_some then _ else _</code> or whatever the equivalent was.</p>",
        "id": 313887214,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1670216306
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 313887738,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1670216738
    },
    {
        "content": "<p>Is the syntax of <code>match h : x with</code> different in Lean 3?</p>",
        "id": 313888734,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1670217403
    },
    {
        "content": "<p>Sorry, I'm not quite following the hack that you referenced.</p>",
        "id": 313888796,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1670217476
    },
    {
        "content": "<p>Oh, I see.</p>",
        "id": 313889065,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1670217640
    },
    {
        "content": "<p>the simpler way to do this in lean 3 is to go into tactic mode and use <code>cases h : x</code> instead</p>",
        "id": 313899671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670223756
    },
    {
        "content": "<p>but in this particular case <code>option.pbind</code> is probably the best approach</p>",
        "id": 313899830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670223852
    }
]