[
    {
        "content": "<p>Hey, I currently trying to learn Lean by reading the – very nice – “Theorem Proving in Lean” book.<br>\nWhile doing the exercises, I found something confusing;</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">real</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">real</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">exp</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span>  <span class=\"n\">log_exp_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"kn\">variable</span>  <span class=\"n\">exp_log_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"kn\">variable</span>  <span class=\"n\">exp_pos</span>    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"kn\">variable</span>  <span class=\"n\">exp_add</span>    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- this ensures the assumptions are available in tactic proofs</span>\n<span class=\"n\">include</span> <span class=\"n\">log_exp_eq</span> <span class=\"n\">exp_log_eq</span> <span class=\"n\">exp_pos</span> <span class=\"n\">exp_add</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">log_mul</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">log</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> the relevant line follows: -/</span>\n    <span class=\"c1\">-- log(x * y) = log(exp (log x) * exp (log y)) : by rw [eq.symm (exp_log_eq hx), eq.symm (exp_log_eq hy)]</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> this works: -/</span>\n    <span class=\"n\">log</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">log</span><span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">exp_log_eq</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">exp_log_eq</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">log</span><span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">log</span> <span class=\"n\">y</span><span class=\"o\">))</span>       <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">exp_add</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">y</span><span class=\"o\">))]</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">log</span> <span class=\"n\">y</span>                  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">log_exp_eq</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>For some reason the proof / tactic fails, if I include the <code>eq.symm</code>s in the first line of the calculational proof, although the argument seems “the other way around”.<br>\nIn the second line however, Lean does not seem to care about the order of equal terms, I can remove the <code>eq.symm</code> without problems.<br>\nWhy is that? Is there a rule-of-thumb for when I can omit <code>eq.symm</code> and when I do need it?</p>",
        "id": 173099117,
        "sender_full_name": "Daniel",
        "timestamp": 1565688902
    },
    {
        "content": "<p>You need to understand each line is a separate small lemma. The first line prove one equality. Then rw rewrites at the first place it finds, which is probably in the right hand side.</p>",
        "id": 173100071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565690034
    },
    {
        "content": "<p>Actually it probably rewrited both occurrences</p>",
        "id": 173100222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565690213
    },
    {
        "content": "<p>Indeed rewriting using <code>exp_log_eq hx</code> from right to left is a bad idea since it will complexify any formula involving x.</p>",
        "id": 173100336,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565690396
    },
    {
        "content": "<p>Also note from the section about rewrite: The notation ←t can be used to instruct the tactic to use the equality t in the reverse direction.</p>",
        "id": 173100491,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565690523
    },
    {
        "content": "<p>This will get rid of eq.symm everywhere</p>",
        "id": 173100504,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565690541
    },
    {
        "content": "<p>This is clear to me, but I don't see, why <code>rw</code> rewrites the statement as it did.<br>\nMaybe the following (failing example) makes my question clearer:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">log</span><span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">exp_log_eq</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">exp_log_eq</span> <span class=\"n\">hy</span><span class=\"o\">),</span>\n    <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>Why doesn't <code>rw</code> replace the <code>x</code> on the left side of the equality with <code>exp (log x)</code>? (and similarly <code>y</code> with <code>exp (log y)</code>) Even though there is only a single <code>x</code> to be encountered (and replaced) on the left side of the expression <code>log (x * y)</code>?</p>",
        "id": 173105550,
        "sender_full_name": "Daniel",
        "timestamp": 1565696439
    },
    {
        "content": "<p>My <em>expectation</em> would be that <code>log(x * y) = log(exp(log x) * exp (log y))</code> just by applying the equalities <code>x = exp (log x)</code> and <code>y = exp (log y)</code>, since applying <code>exp</code> to equal arguments must result in equal results.</p>",
        "id": 173105791,
        "sender_full_name": "Daniel",
        "timestamp": 1565696698
    },
    {
        "content": "<p>It does replace that <code>x</code>, it just also replaces the <code>x</code> on the right hand side of the equation as well, leaving you no closer to being finished</p>",
        "id": 173106278,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565697287
    },
    {
        "content": "<p>As was said before, the <code>rw</code> tactic rewrites both the left hand side and the right hand side of an equation.</p>\n<p>If you want to rewrite only the left-hand side, you can use the following tactic: (which is a proof of your first <code>calc</code>-step)</p>\n<div class=\"codehilite\"><pre><span></span>by conv_lhs { rw [← exp_log_eq hx, ← exp_log_eq hy] }\n</pre></div>",
        "id": 173115400,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565704861
    },
    {
        "content": "<p>Nice. So I can just use ← and it works as I expect it to :)<br>\nReplacing in both sides seemed a bit counterintuitive to me, since I want to show a particular equality in this step, namely that the left / previous term is equal to the current lines' term.<br>\nBut I guess it is more useful when combining multiple steps in one <code>rw</code> command.</p>",
        "id": 173117215,
        "sender_full_name": "Daniel",
        "timestamp": 1565705984
    },
    {
        "content": "<p>The way it works by default is that lean finds the first match, and then replaces every occurrence of the thing that matched exactly. There is a file called conv.md in mathlib which is a write-up of how to do more sophisticated rewrites.</p>",
        "id": 173117660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565706199
    }
]