[
    {
        "content": "<p>For future reference, if you do want that sort of match expression, you can create a separate definition first rather than putting the <code>match</code> inline.</p>",
        "id": 300464675,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663974981
    },
    {
        "content": "<p>The following appears to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.enat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">binstring</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">seq</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">len</span><span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">proof</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">len</span><span class=\"o\">},</span> <span class=\"n\">seq</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 300464975,
        "sender_full_name": "Josiah Eldon Bills",
        "timestamp": 1663975268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542896\">Josiah Eldon Bills</span> has marked this topic as resolved.</p>",
        "id": 300466640,
        "sender_full_name": "Notification Bot",
        "timestamp": 1663976631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542896\">@Josiah Eldon Bills</span> are you familiar with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/seq\">docs#seq</a>? seems similar to what you're doing</p>",
        "id": 300472767,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663982398
    },
    {
        "content": "<p>though on second thought, what you're doing seems more like a potentially infinite version of <code>bitvec</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/bitvec\">docs#bitvec</a>)</p>",
        "id": 300472920,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663982526
    }
]