[
    {
        "content": "<p>What would be the cleanest / canonical way to prove this in a tactic script? nat.no_confusion only works when the left side is zero.</p>",
        "id": 136752030,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1540869362
    },
    {
        "content": "<p>Also, when I'm proving a set membership proposition, such as x \\in S, what can I do to have the goal rewritten as the underlying proposition, e.g., x = 1 \\/ x = 2 \\/ false, for the claim that x \\in {1, 2}?</p>",
        "id": 136752204,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1540869633
    },
    {
        "content": "<p>1) have you tried <code>norm_num</code> from <code>tactic.norm_num</code>? <br>\n2) have you tried <code>simp</code>?</p>",
        "id": 136752548,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1540870360
    },
    {
        "content": "<p>If 50 and 40 are nats then because equality is decidable on nat you can do <code>example : 50 = 40 → false := dec_trivial</code><br>\n`</p>",
        "id": 136760725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540886019
    },
    {
        "content": "<p>but that isn't the fastest way</p>",
        "id": 136760770,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540886053
    },
    {
        "content": "<p>no but it is the canonical way</p>",
        "id": 136760773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540886068
    },
    {
        "content": "<p>and it scores highly for clean as well</p>",
        "id": 136760776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540886079
    },
    {
        "content": "<p>As for the other question, <code>x ∈ ({1, 2} : set ℕ)</code> is <em>definitionally equal</em> to <code>x = 2 ∨ x = 1 ∨ false</code> and you can just treat the goal like it said this, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 136760851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540886252
    },
    {
        "content": "<p>The pretty printer assumes you'd rather see <code>x ∈ {1, 2}</code> so leaves it like that. If you want to explicitly change it then you can use <code>change</code>, a tactic which will change the goal to a definitionally equal goal. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 136760896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540886337
    },
    {
        "content": "<p>Thank you. Up until now I've avoided using anything that my (mostly) young undergraduates won't understand from first principles. But now, it's time for black box tactics. I won't be able to explain dec_trivial to them, but it is clean and is supported in the standard libraries. As for \"change,\" thanks for that. I was trying unfold, but it didn't get me all the way to the disjunction that defines a set.</p>",
        "id": 136790359,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1540918855
    },
    {
        "content": "<p>I think <code>dec_trivial</code> has a clean explanation in the type theory. Roughly, there is a term of type <code>nat -&gt; nat -&gt; bool</code> that says whether two natural numbers are equal or not, and we assert that this is <code>tt</code> by refl, so in order for the <code>dec_trivial</code> term to typecheck it forces computation of this function. The function itself is easy to define by recursion on the natural numbers.</p>",
        "id": 136792029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540920181
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">--set_option pp.notation false</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_insert</span><span class=\"bp\">.</span><span class=\"n\">insert</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">singleton</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_insert</span><span class=\"bp\">.</span><span class=\"n\">insert</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_emptyc</span><span class=\"bp\">.</span><span class=\"n\">emptyc</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>We don't quite land at where you want though, the goal ultimately is</p>\n<div class=\"codehilite\"><pre><span></span>{b : ℕ | b = 2 ∨ {b : ℕ | b = 1 ∨ false} b} x\n</pre></div>\n\n\n<p>When I knew less about Lean, I used to write code which looked like this a lot, and then when I'd finished doing all the unfolding I'd just replace it all with a <code>change</code> (or <code>show</code> -- they're the same I think, although <code>change ... at h</code> works with hypotheses too).</p>",
        "id": 136802088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540929028
    },
    {
        "content": "<p>you should unfold <code>set_of</code> too</p>",
        "id": 136803237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540930139
    },
    {
        "content": "<p>I should have switched <code>pp.notation false</code> back on one last time!</p>",
        "id": 136803362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540930219
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">--set_option pp.notation false</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_insert</span><span class=\"bp\">.</span><span class=\"n\">insert</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">singleton</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_insert</span><span class=\"bp\">.</span><span class=\"n\">insert</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_emptyc</span><span class=\"bp\">.</span><span class=\"n\">emptyc</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set_of</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ x = 2 ∨ x = 1 ∨ false</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 136803371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540930236
    },
    {
        "content": "<p>also you can make that shorter by making one big <code>unfold</code></p>",
        "id": 136803540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540930413
    },
    {
        "content": "<p>since you won't have to cycle back through the same things</p>",
        "id": 136803551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540930426
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">has_insert</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">singleton</span> <span class=\"n\">set_of</span> <span class=\"n\">has_emptyc</span><span class=\"bp\">.</span><span class=\"n\">emptyc</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ x = 2 ∨ x = 1 ∨ false</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I never knew that. I knew I could put them all in one line but I hadn't appreciated that <code>unfold x y z</code> behaved differently to <code>unfold x, unfold y, unfold z</code></p>",
        "id": 136803745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540930612
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span>\n</pre></div>",
        "id": 136804640,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540931328
    }
]