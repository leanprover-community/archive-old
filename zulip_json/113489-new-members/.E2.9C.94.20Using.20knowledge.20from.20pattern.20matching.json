[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"436568\">Josh Clune</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20knowledge.20from.20pattern.20matching/near/252010068\">said</a>:</p>\n<blockquote>\n<p>it's unclear to me how it would be possible to use this tactic in place of the match construct</p>\n</blockquote>\n<p>Tactics are a language to generate programs (including proofs).  If you know what the tactics are doing, it can be a reasonable way to create a program -- and since you can embed terms inside tactics, you can go back and forth between writing tactics and terms.  <a href=\"https://github.com/leanprover-community/mathlib/blob/affa4bf4bdcd51ee2298d0aff9c7ca74a6a97802/src/combinatorics/simple_graph/connectivity.lean#L563\">Here's an example</a> of an algorithm where it was useful doing some rewrites in each case.</p>",
        "id": 252011751,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630773293
    },
    {
        "content": "<p>Here's an example using your recursion test:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">recursion_test</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nat.succ</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">lt_add_one</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">recursion_test</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 252011969,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630773566
    },
    {
        "content": "<p>Oh, I see now. I was used to using tactics just for things I conceptualized as proofs, so I didn't realize they could be used like that. Thanks!</p>",
        "id": 252012356,
        "sender_full_name": "Josh Clune",
        "timestamp": 1630774035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"436568\">Josh Clune</span> has marked this topic as resolved.</p>",
        "id": 252012359,
        "sender_full_name": "Notification Bot",
        "timestamp": 1630774039
    },
    {
        "content": "<p>The syntax says \"match the <code>x'</code> and a proof that <code>x' = x</code> given by <code>_</code> (elaborated as <code>x</code>) and <code>rfl</code>\". I'm not at lean so can't give a full example right now.</p>",
        "id": 252021126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630783951
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">recursion_test</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">y.lt_succ_self</span><span class=\"o\">,</span>\n    <span class=\"n\">recursion_test</span> <span class=\"n\">y</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 252021965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630784894
    },
    {
        "content": "<p>Ah right, I forgot the <code>→</code></p>",
        "id": 252022230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630785208
    }
]