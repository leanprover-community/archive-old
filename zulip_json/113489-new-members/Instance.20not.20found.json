[
    {
        "content": "<p>Lean isn't being able to find <code>has_pow cardinal cardinal</code>. I just updated Lean/mathlib. <code>has_pow cardinal cardinal</code> <em>is</em> defined as <code>cardinal.has_pow</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal</span>\n\n<span class=\"c1\">-- The following line gives an error: `cardinal.has_pow` already defined.</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">cardinal</span> <span class=\"n\">cardinal</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">power</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">this_instance_is_ignored</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">cardinal</span> <span class=\"n\">cardinal</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">power</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">cardinal</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207918183,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598320732
    },
    {
        "content": "<p>I find this behavior pretty weird. I think it is kept unnoticed in <code>set_theory/cardinal.lean</code> because of the local notation (defined <a href=\"https://github.com/leanprover-community/mathlib/blob/ffd8626/src/set_theory/cardinal.lean#L185\">here</a>):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">local</span> <span class=\"kn\">infixr</span> <span class=\"bp\">^</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_pow</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">cardinal</span> <span class=\"n\">cardinal</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">has_pow</span>\n</code></pre></div>",
        "id": 207918290,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598320854
    },
    {
        "content": "<p>it's a universe issue</p>",
        "id": 207918292,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598320860
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>   <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 207918317,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598320919
    },
    {
        "content": "<p>Indeed, thank you!</p>",
        "id": 207918359,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598320941
    },
    {
        "content": "<p>the instance only applies when the universes are the same, but Lean doesn't know that that's the case you're interested in</p>",
        "id": 207918365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598320946
    },
    {
        "content": "<p>I see. Where can I read more about universes? Specifically, I would like to become more familiar with <code>[...].{u}</code>-like notations.</p>",
        "id": 207918398,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598321028
    },
    {
        "content": "<p>They act like implicit arguments here</p>",
        "id": 207918444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598321054
    },
    {
        "content": "<p>the <code>.{u}</code> notation is how you specify them; usually it is <code>.{_}</code> and lean figures it out</p>",
        "id": 207918457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598321079
    },
    {
        "content": "<p>It's not completely obvious from <code>#print</code> what the order of universe arguments are, but you can just look for all free universe variables in the type of the definition</p>",
        "id": 207918495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598321143
    },
    {
        "content": "<p>if you <code>#print cardinal</code> you see <code>def cardinal : Type (u+1) :=</code> so you know that <code>cardinal</code> takes one universe argument, labeled <code>u</code> in the original definition</p>",
        "id": 207918554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598321206
    },
    {
        "content": "<p>A comment about the purpose of that <code>local notation</code> certainly wouldn't hurt</p>",
        "id": 207918560,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598321213
    },
    {
        "content": "<p>so <code>cardinal.{0} : Type 1</code> and <code>cardinal.{1} : Type 2</code> and so on</p>",
        "id": 207918579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598321246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Instance.20not.20found/near/207918560\">said</a>:</p>\n<blockquote>\n<p>A comment about the purpose of that <code>local notation</code> certainly wouldn't hurt</p>\n</blockquote>\n<p>Yes. The local notation is there to force the type of the digits (like <code>2</code> in <code>... ^ 2</code>) being interpreted as <code>cardinal</code> instead of <code>ℕ</code>, from what I've gathered.</p>",
        "id": 207918648,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598321332
    },
    {
        "content": "<p>if you <code>#check cardinal</code> you get <code>cardinal : Type (u_1+1)</code> because the universe is unspecified so once it unifies all metavariables and everything is still consistent, it just makes up variable names for everything else</p>",
        "id": 207918650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598321335
    },
    {
        "content": "<p>The local notation in <code>cardinal</code> is to solve exactly this universe issue</p>",
        "id": 207918672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598321398
    },
    {
        "content": "<p>although I think it was added after the fact, when <code>has_pow</code> first became a typeclass, so it has some flavor of a backward compatibility patch on the file</p>",
        "id": 207918730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598321454
    }
]