[
    {
        "content": "<p>Can I represent a real-valued indicator function?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variable</span> <span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">variable</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"kd\">variable</span> <span class=\"n\">Lμ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span>\n<span class=\"kd\">def</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">indicator_a</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 322967951,
        "sender_full_name": "Iocta",
        "timestamp": 1674464701
    },
    {
        "content": "<p>You can add a <code>[decidable_pred (∈ s)]</code> variable</p>",
        "id": 322972311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674466219
    },
    {
        "content": "<p>Or you could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.indicator\">docs#set.indicator</a></p>",
        "id": 322972346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674466234
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variable</span> <span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">variable</span> <span class=\"bp\">𝓕</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓕</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">ℝ</span>\n<span class=\"kd\">variable</span> <span class=\"n\">Lμ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span>\n<span class=\"kd\">def</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓕</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">indicator_a</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 322973837,
        "sender_full_name": "Iocta",
        "timestamp": 1674466655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> has marked this topic as resolved.</p>",
        "id": 322974265,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674466794
    }
]