[
    {
        "content": "<p>I'm trying to use this theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zmod.nat_cast_zmod_val</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a.val</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Dose anyone understand what <code>[fact (0&lt;n)]</code> means? What do the square brackets mean and how does it differ from a normal hypothesis?</p>\n<p>I'm trying to use it with rw, but lean seems concerned that maybe 0 &lt; n doesn't hold, but I can't seem to reassure it as usual by feeding it a proof of 0 &lt; n.</p>",
        "id": 245413734,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1625818356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"422315\">@Thomas Laraia</span> The <code>[...]</code> mean that Lean should use the <em>type class system</em> to figure out this assumption on its own.</p>",
        "id": 245414065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625818578
    },
    {
        "content": "<p>What does your context look like?</p>",
        "id": 245414109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625818626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exist_sol_to_cong_equ_using_zmod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">onelen</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ring_formulation</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"n\">onelen</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">fx</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x.val</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zmod.eq_iff_modeq_nat</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zmod.nat_cast_zmod_val</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245416860,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1625820468
    },
    {
        "content": "<p>Aha, you can add <code>haveI : fact (0 &lt; n) := \\&lt;zero_lt_one.trans onelen\\&gt;,</code> above the <code>rw</code>.</p>",
        "id": 245416958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625820533
    },
    {
        "content": "<p>Ah cheers, what exactly does .trans do?</p>",
        "id": 245418186,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1625821249
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 245418720,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1625821550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"422315\">@Thomas Laraia</span> it chains inequalities together using transitivity. (This is using so-called dot notation.)</p>",
        "id": 245419556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625822051
    }
]