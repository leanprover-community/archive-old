[
    {
        "content": "<p>I'm trying to figure out how <code>has_lift</code> and <code>coe_*</code> work. Right now I have the following definitions. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">matrix_lift</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_eq_one</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton_iff_unique_mem</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">b</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">matrix_lift_t</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_eq_one</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton_iff_unique_mem</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">b</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">coe_singleton</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n                      <span class=\"o\">[</span><span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">]:</span>\n                      <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I would think <code>rfl</code>  would work, but there is a type mismatch. It also seems weird to me to be supplying a proof in the instance definition. Another issue is that I think using <code>[has_lift_t ...]</code> is non idiomatic, from looking at mathlib source.</p>",
        "id": 201063517,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592336114
    },
    {
        "content": "<p>is the problem that your instances are noncomputable but your theorem is not?</p>",
        "id": 201064188,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592336497
    },
    {
        "content": "<p>(I usually write <code>noncomputable theory</code> at the top of my file to avoid thinking about this)</p>",
        "id": 201064237,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592336522
    },
    {
        "content": "<p>I think that in practice it may be more useful to assume <code>[unique n]</code> instead of <code>fintype.card n = 1</code>.</p>",
        "id": 201064274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592336532
    },
    {
        "content": "<p>Lots of problems here, but ultimately the result can never be true by <code>rfl</code> because it would mean that any two elements of <code>n</code> are definitionally equal.</p>",
        "id": 201064332,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592336576
    },
    {
        "content": "<p>You are taking a very mathematician-like attitude here: there's just one element anyways, so let's pick it.</p>",
        "id": 201064430,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592336633
    },
    {
        "content": "<p>This works, sort of, but you will have to justify yourself to Lean later.</p>",
        "id": 201064628,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592336716
    },
    {
        "content": "<p>Thanks for the insight. Here's what I have currently. Seeing an error I haven't seen before, with \"goals accomplished\" yet red squiggly.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">matrix_coe</span> <span class=\"o\">[</span><span class=\"n\">unique</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">default</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">coe_singleton</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">unique</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n                      <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">unique</span><span class=\"bp\">.</span><span class=\"n\">uniq</span> <span class=\"bp\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- having a theorem that distributes the coe like `↑(A * B) = ↑A * ↑B`</span>\n<span class=\"c1\">-- is probably useful for what I&#39;m trying to prove</span>\n<span class=\"c1\">-- which is the commutativity of 1-dim matrices</span>\n\n<span class=\"c1\">-- this statement does not work because I don&#39;t have ↑ in the statement</span>\n<span class=\"c1\">-- so I can&#39;t use `rw coe_singleton` later</span>\n<span class=\"c1\">-- example (A : matrix (fin 1) (fin 1) ℝ) (B : matrix (fin 1) (fin 1) ℝ) :</span>\n<span class=\"c1\">--         A * B = B * A := sorry</span>\n\n<span class=\"c1\">-- this errors at the end with</span>\n<span class=\"c1\">--   tactic failed, result contains meta-variables</span>\n<span class=\"c1\">--   state:</span>\n<span class=\"c1\">--   no goals</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">unique</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span><span class=\"o\">:</span> <span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">coe_singleton</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">coe_singleton</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"c1\">-- cursor on comma says &quot;goals accomplished&quot;</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201070799,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592339865
    },
    {
        "content": "<p>Congratulations, you just got the \"unproved invisible metavariable goal\" achievement</p>",
        "id": 201070961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592339958
    },
    {
        "content": "<p>There's some tactic which will make the invisible goal appear, I always forget what it is.</p>",
        "id": 201070989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592339979
    },
    {
        "content": "<p><code>recover</code></p>",
        "id": 201071727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592340404
    },
    {
        "content": "<p><code>  recover, repeat {apply_instance},</code> finishes things properly. I don't really understand why this happens.</p>",
        "id": 201071823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592340455
    },
    {
        "content": "<p>I don't understand what the two <code>haveI</code>s could accomplish.</p>",
        "id": 201071984,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592340524
    },
    {
        "content": "<p>Also, I'm not sure if you are proving what you want to prove.</p>",
        "id": 201072091,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592340581
    },
    {
        "content": "<p>You could just apply <code>mul_comm</code> and be done.</p>",
        "id": 201072178,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592340610
    },
    {
        "content": "<p>If <code>apply_instance</code> works then the thing you proved was already known to type class inference so you didn't need to add it with <code>haveI</code> (and probably you should have used <code>letI</code>?)</p>",
        "id": 201072183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592340613
    },
    {
        "content": "<p>The <code>haveI</code>'s were in fact the problem</p>",
        "id": 201072235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592340644
    },
    {
        "content": "<p><del><code>matrix X X R</code> might not be known to be a semigroup.</del>(it is)</p>",
        "id": 201072305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592340687
    },
    {
        "content": "<p>actually I guess I'm also not 100% sure what type <code>↑A</code> is--if you have the <code>has_coe</code> instance anyways, better to write <code>(A : ℝ)</code>.</p>",
        "id": 201072330,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592340700
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201072561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592340836
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 201072625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592340855
    },
    {
        "content": "<p>Lean doesn't have a clue where you're coercing to, I think</p>",
        "id": 201072647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592340865
    },
    {
        "content": "<p>If you tell it explicitly, as Reid suggests, it's much happier</p>",
        "id": 201072670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592340884
    },
    {
        "content": "<p>and <code>example</code> is like <code>def</code> in that it uses the body of the definition to elaborate the stated type of the example, so maybe that is where your metavariable(s) came from?</p>",
        "id": 201072768,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592340947
    },
    {
        "content": "<p>anyways, all of this is just dancing around the actual work, which is proving that multiplication of 1x1 matrices corresponds to multiplication in R</p>",
        "id": 201072872,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592340996
    },
    {
        "content": "<p>Totally clear now:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">matrix_coe</span> <span class=\"o\">[</span><span class=\"n\">unique</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">default</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">coe_singleton</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">unique</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n                      <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">unique</span><span class=\"bp\">.</span><span class=\"n\">uniq</span> <span class=\"bp\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n                   <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n<p>But thinking about how to formalize the proof that n x n matrices commute over the entirety of the space, is valid only for n &lt;= 1, one would need the theory of eigenvectors, which mathlib does not yet have. Correct?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"n\">n</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 201074116,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592341602
    },
    {
        "content": "<p>If you want to show there are non-commuting matrices for n &gt;= 2, why not just look at an explicit example? Say</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"mi\">01</span>\n<span class=\"mi\">00</span>   <span class=\"mi\">00</span>\n</code></pre></div>",
        "id": 201076788,
        "sender_full_name": "David Wärn",
        "timestamp": 1592343073
    },
    {
        "content": "<p>Sure, and show by induction ... . For a proof that did not rely on calculation, I was thinking about the one at <code>https://math.stackexchange.com/a/27832</code>, and then show that all matrices are equal to <code>c * I</code> for some scalar <code>c</code> only for <code>n = 0 \\or n = 1</code>.</p>",
        "id": 201078818,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592344282
    },
    {
        "content": "<p>You don't need any induction here. David's matrices are n x n</p>",
        "id": 201080439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592345434
    },
    {
        "content": "<p>It's just some \"if first variable is 0 and second is 1 then 1 else 0\" matrix</p>",
        "id": 201080489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592345485
    },
    {
        "content": "<p>I think you still need induction to show that <code>fin n</code> for <code>n &gt;= 2</code> has <code>has_zero</code> and <code>has_one</code> instances, so that those matrices can be defined via an <code>ite</code> call.</p>",
        "id": 201082692,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592347032
    },
    {
        "content": "<p>This is not induction. You need to prove 0 &lt; n and 1 &lt; n but both of these follow directly from 2&lt;= n</p>",
        "id": 201083908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592348003
    },
    {
        "content": "<p>The ite doesn't care if its clause is never satisfied</p>",
        "id": 201083935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592348027
    },
    {
        "content": "<p>The time when you care is in the proof</p>",
        "id": 201084180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592348175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> sorry, I had to sleep :-)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonzero</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n          <span class=\"n\">S</span> <span class=\"bp\">*</span> <span class=\"n\">T</span> <span class=\"bp\">≠</span> <span class=\"n\">T</span> <span class=\"bp\">*</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">dot_product</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">zero_ne_one</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201115802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592384208
    },
    {
        "content": "<p>Poking around in the library a bit for the <code>has_one</code> issue revealed that the trick is to work with <code>fin (n+2)</code>.</p>",
        "id": 201115950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592384290
    },
    {
        "content": "<p>I'm a bit unhappy with that nonterminal <code>simp</code>: I'm slightly less unhappy, but still unhappy, with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">dot_product</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">zero_ne_one</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201116684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592384776
    }
]