[
    {
        "content": "<p>Hello, I'm having some troubles working with a field that is both a <code>normed_field</code> and a <code>discrete_linear_ordered_field</code> : in the following mwe, the last line yields an error, which I interpret as \"Lean doesn't know which <code>field</code> instance to use\". What should I do to avoid this ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">asymptotics</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_pow_div_pow</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_o_iff_tendsto</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">tendsto_congr'</span> <span class=\"o\">((</span><span class=\"n\">eventually_gt_at_top</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fpow_sub</span> <span class=\"n\">hx.ne.symm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">neg_sub</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">int.coe_nat_sub</span> <span class=\"n\">hpq.le</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">q</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">nat.sub_pos_of_lt</span> <span class=\"n\">hpq</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">tendsto_pow_neg_at_top</span> <span class=\"n\">Œ±</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214554573,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1603706826
    },
    {
        "content": "<p>this is called a diamond</p>",
        "id": 214560540,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603710773
    },
    {
        "content": "<p>if you can't remove the diamond from the assumptions, create a new typeclass that merges the two</p>",
        "id": 214560574,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603710798
    },
    {
        "content": "<p>In other words, you'll need to define <code>linear_ordered_normed_field</code></p>",
        "id": 214564278,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603713722
    },
    {
        "content": "<p>You can also do everything with real numbers and leave a TODO note saying that once someone will have cleaned the order hierarchy then this will be available for generalization.</p>",
        "id": 214572060,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603718632
    }
]