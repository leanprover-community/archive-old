[
    {
        "content": "<p>Dear All,</p>\n<p>I would like to convert a <code>list (list bool)</code> to a single <code>list bool</code>, by taking the \"componentwise <code>or</code> of the entries\".  (I happen to know that all the inner lists of <code>bool</code>s have the same length).  I found that <code>list.map₂ (∨)</code> does the right thing, with input two separate lists.  I would like to iterate this on the whole list.  I could probably write it myself, but I also imagine that this already exists!</p>\n<p>Thanks!</p>",
        "id": 280033707,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650872921
    },
    {
        "content": "<p><code>by library_search</code>?</p>",
        "id": 280034088,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650873132
    },
    {
        "content": "<p><del>I think this is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.join\">docs#list.join</a></del></p>",
        "id": 280034126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650873161
    },
    {
        "content": "<p>with library_search, I find:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ll</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">list.nil</span>\n</code></pre></div>",
        "id": 280034168,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650873194
    },
    {
        "content": "<p>Does it behave any better with <code>ll</code> on the right of the colon?</p>",
        "id": 280034235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650873238
    },
    {
        "content": "<p>What I want is some iteration of currying and <code>list.map₂ (∨)</code>.</p>",
        "id": 280034280,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650873245
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">list.join</span>\n</code></pre></div>\n<p>!</p>",
        "id": 280034318,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650873280
    },
    {
        "content": "<p>Ok, maybe it just is not there.  It is easy enough to instruct lean what to do anyway.  Thanks!</p>",
        "id": 280034382,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650873321
    },
    {
        "content": "<p>What output do you want for <code>nil</code>?</p>",
        "id": 280034410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650873342
    },
    {
        "content": "<p>I am not sure that I care...</p>",
        "id": 280034438,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650873357
    },
    {
        "content": "<p>probably <code>tt</code>.</p>",
        "id": 280034505,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650873368
    },
    {
        "content": "<p>or rather, <code>[tt]</code></p>",
        "id": 280034518,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650873378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> So you want to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.foldr\">docs#list.foldr</a> <code>list.map\\2</code>, I guess?</p>",
        "id": 280034557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650873425
    },
    {
        "content": "<p>I think the behavior might be easier to reason about if your type was <code>list (vector n X)</code>, then the output for <code>nil</code> would be obvious (<code>repeat ff n</code>)</p>",
        "id": 280034562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650873427
    },
    {
        "content": "<p>actually, I think that I want <code>[ff]</code>.  But I really do not care: I want to scan the output for <code>tt</code>.  Also <code>[]</code> woudl work for me.</p>",
        "id": 280034570,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650873434
    },
    {
        "content": "<p>Ah, Johan, this looks promising!!  Thanks!</p>",
        "id": 280034587,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650873452
    },
    {
        "content": "<p>Another option is to transpose the list of lists first, and then use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.any\">docs#list.any</a> [edit: was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bool.any\">docs#bool.any</a>]</p>",
        "id": 280034630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650873481
    },
    {
        "content": "<p>I think you can use the fact that <code>lists</code> is a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/traversable\">docs#traversable</a></p>",
        "id": 280034724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650873502
    },
    {
        "content": "<p>(it doesn't exist)</p>",
        "id": 280034740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650873510
    },
    {
        "content": "<p>Also, transposing <code>nil : list (list X)</code> is ill-defined (it's a <code>0 × n</code> list, but n is unknown)</p>",
        "id": 280034772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650873533
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.any\">docs#list.any</a> does!</p>",
        "id": 280034776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650873534
    },
    {
        "content": "<p><code>list.map list.any</code></p>",
        "id": 280037561,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650874992
    },
    {
        "content": "<p>The idea is that you're doing a component-wise operation, so start with <code>list.map</code>. Then you want to take a bunch of <code>or</code>, so <code>list.any</code>.</p>",
        "id": 280037616,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650875040
    },
    {
        "content": "<p>Oh, do you want to take the <code>or</code>s across the lists rather than within each list?</p>",
        "id": 280037949,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650875199
    },
    {
        "content": "<p>Why were we against transposing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">zip_or</span> <span class=\"o\">(</span><span class=\"n\">ll</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ll.transpose.map</span> <span class=\"n\">list.bor</span>\n</code></pre></div>",
        "id": 280038223,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650875376
    },
    {
        "content": "<p>No idea, that got me confused too.</p>",
        "id": 280038305,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650875415
    },
    {
        "content": "<p><code>zip_or []</code> evaluates to <code>[]</code>, which is sensible.</p>",
        "id": 280038444,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650875505
    },
    {
        "content": "<p>\"zip\" isn't quite the right name. I was thinking about the Python <code>zip(*ll)</code> idiom for taking transposes, where <code>zip(l1, l2, l3, ..., ln)</code> creates a list of length-n tuples using the entries of the lists, and star notation means \"take all the entries of <code>ll</code> as arguments to <code>zip</code>\".</p>",
        "id": 280038765,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650875646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/list.20.28list.20bool.29.20--.3E.20list.20bool/near/280038223\">said</a>:</p>\n<blockquote>\n<p>Why were we against transposing?</p>\n</blockquote>\n<p>I don't think anybody was against transposing. I think <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s <span aria-label=\"thumbs down\" class=\"emoji emoji-1f44e\" role=\"img\" title=\"thumbs down\">:thumbs_down:</span> was indicating that a <code>docs#foobar</code> didn't give a result.</p>",
        "id": 280039269,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650875962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/list.20.28list.20bool.29.20--.3E.20list.20bool/near/280034772\">said</a>:</p>\n<blockquote>\n<p>Also, transposing <code>nil : list (list X)</code> is ill-defined (it's a <code>0 × n</code> list, but n is unknown)</p>\n</blockquote>\n<p>This looked like being against <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 280039443,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650876041
    },
    {
        "content": "<p>Sorry, I had a small emergency with my cat, now resolved!  Let me get up to speed!</p>",
        "id": 280039911,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650876265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/list.20.28list.20bool.29.20--.3E.20list.20bool/near/280038444\">said</a>:</p>\n<blockquote>\n<p><code>zip_or []</code> evaluates to <code>[]</code>, which is sensible.</p>\n</blockquote>\n<p>If we know what the length of each inner list is supposed to be, we can handle the nil case in a special way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">e.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">list</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">[]</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">list.repeat</span> <span class=\"n\">ff</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">s.transpose.map</span> <span class=\"n\">list.bor</span>\n</code></pre></div>",
        "id": 280040024,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650876336
    },
    {
        "content": "<p>Assumption <code>h</code> is redundant, it's there for safety.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)),</span> <span class=\"n\">list</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">list.repeat</span> <span class=\"n\">ff</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s.transpose.map</span> <span class=\"n\">list.bor</span>\n</code></pre></div>",
        "id": 280040058,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650876356
    },
    {
        "content": "<p>Thank you all!  I'll go with Kyle's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">zip_or</span> <span class=\"o\">(</span><span class=\"n\">ll</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ll.transpose.map</span> <span class=\"n\">list.bor</span>\n</code></pre></div>\n<p>but I won't need to actually make the definition.  This is for reporting errors and I simply want to make sure that every input is being used.  Thus, I just want to know whether an entry is <code>tt</code>, standing for \"is unused\", or <code>ff</code>, standing for \"is not unused\".</p>",
        "id": 280040728,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650876743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/list.20.28list.20bool.29.20--.3E.20list.20bool/near/280039443\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/list.20.28list.20bool.29.20--.3E.20list.20bool/near/280034772\">said</a>:</p>\n<blockquote>\n<p>Also, transposing <code>nil : list (list X)</code> is ill-defined (it's a <code>0 × n</code> list, but n is unknown)</p>\n</blockquote>\n<p>This looked like being against <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>\n</blockquote>\n<p>This is more an objection against the phrasing of the question in general, not the solution to it. Transposing <code>list (list X)</code> has tripped me up multiple times in python on the empty list; usually it's an indication that your datatype is wrong. I assume <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.transpose\">docs#list.transpose</a> sends it to the empty list?</p>",
        "id": 280043842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650878783
    }
]