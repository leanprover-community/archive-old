[
    {
        "content": "<p>Can you define coinductive types in lean? E.g. the conaturals. In Agda:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">record</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">where</span>\n  <span class=\"kd\">coinductive</span>\n  <span class=\"n\">field</span>\n    <span class=\"n\">pred</span><span class=\"bp\">∞</span> <span class=\"o\">:</span> <span class=\"n\">Maybe</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span>\n</code></pre></div>",
        "id": 211266630,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1601044968
    },
    {
        "content": "<p>No, right now any coinductive types have to be hand rolled. The QPF framework can construct arbitrary coinductive types but it's still a work in progress</p>",
        "id": 211267440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601045336
    },
    {
        "content": "<p>The conaturals are isomophic to mathlib's <code>computation unit</code>, and <code>enat</code> and <code>with_top nat</code> are also classically isomorphic</p>",
        "id": 211267837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601045518
    },
    {
        "content": "<p>There are no plans to support coinductive types in the lean kernel. It is possible to construct any coinductive type using inductive types, but keep in mind that you don't get the computation rules except as lemmas this way</p>",
        "id": 211268015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601045604
    },
    {
        "content": "<p>This is just word association on my part, but is the <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/meta/coinductive_predicates.lean\">\"coinductive predicates\" file</a> relevant at all here?</p>",
        "id": 211268587,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601045850
    },
    {
        "content": "<p>It is somewhat relevant, depending on how seriously you take propositions as types</p>",
        "id": 211268817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601045934
    },
    {
        "content": "<p>there are two somewhat distinct things - coinductive <em>types</em> and coinductive <em>predicates</em>, with indexed coinductive types subsuming both</p>",
        "id": 211268899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601045965
    }
]