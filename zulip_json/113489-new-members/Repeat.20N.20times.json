[
    {
        "content": "<p>Is there a way to repeat a tactic N times? I need to prove a chain of transitivity with 6 steps, and currently have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">transitivity</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">step_1</span><span class=\"o\">,</span>\n  <span class=\"n\">transitivity</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">step_2</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span>\n  <span class=\"n\">transitivity</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">step_6</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I would like to write something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"mi\">6</span> <span class=\"o\">{</span> <span class=\"n\">transitivity</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">step_1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">step_2</span><span class=\"o\">,</span> <span class=\"bp\">...</span> <span class=\"n\">exact</span> <span class=\"n\">step_6</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Or is there some better way to do this?</p>",
        "id": 229837245,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615464145
    },
    {
        "content": "<p>The better way is to write a <code>calc</code> block!</p>",
        "id": 229837895,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615464545
    },
    {
        "content": "<p>I don't think there is such a <code>repeat_at_most</code> tactic at the moment, although if there isn't it would be easy (and helpful) to add.</p>",
        "id": 229837942,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615464575
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 229838519,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615464852
    },
    {
        "content": "<p>Is there a way to keep the intermediate terms implicit?<br>\nSo for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">H1</span>\n<span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">H2</span>\n<span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">H3</span>\n</code></pre></div>\n<p>... is there a way I can only write <code>H1</code>, <code>H2</code>, <code>H3</code> and have Lean infer <code>b</code>, <code>c</code>, <code>d</code>?</p>",
        "id": 229839004,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615465121
    },
    {
        "content": "<p>You're probably looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#iterate\">tactic#iterate</a></p>",
        "id": 229840093,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615465694
    },
    {
        "content": "<p>Or to apply it up to 6 times, rather than exactly, you can do <code>iterate 6 { try { ... } }</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">f.map_zero</span> <span class=\"o\">}</span> <span class=\"c1\">-- unsolved goal: `f 0 = 0`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">iterate</span> <span class=\"mi\">3</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">f.map_zero</span> <span class=\"o\">}</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">iterate</span> <span class=\"mi\">4</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">f.map_zero</span> <span class=\"o\">}</span> <span class=\"c1\">-- match failed</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">iterate</span> <span class=\"mi\">4</span> <span class=\"o\">{</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">f.map_zero</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 229840283,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615465805
    },
    {
        "content": "<p>Yes! This is exactly what I need. Thanks :)</p>",
        "id": 229841109,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615466230
    },
    {
        "content": "<p>In a <code>calc</code> block you can write <code>_</code> in places (e.g. instead of the <code>b</code>, <code>c</code>, <code>d</code>), but it does lessen the readability.</p>",
        "id": 229841613,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615466536
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.iterate_at_most\">docs#tactic.iterate_at_most</a>, but it's not exposed as an interactive tactic</p>",
        "id": 229880385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615480425
    }
]