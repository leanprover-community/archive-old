[
    {
        "content": "<p>Forgive me for the simple question but, how do you simply prove that a constant nat is prime?  I have tried the below but stuck at  the next step... </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">refine</span> <span class=\"n\">tactic.norm_num.is_prime_helper</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n   <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Seems like there should be a better way of doing this?</p>",
        "id": 295109024,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1661368140
    },
    {
        "content": "<p>Use <code>norm_num</code>. It knows about primes.</p>",
        "id": 295109214,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661368209
    },
    {
        "content": "<p>Thansk for the reply Yaël.  From <code>test/norm_num_ext.lean</code> I found <code>example : nat.prime 5 := by norm_num</code>, which works for me but when I go to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>it errors out  saying that <code>norm_num failed to simplify</code>.  Ultimately what I am trying to do is prove that <code>prime p ^ p &lt; stuff ...</code>.  Any ideas why the example would work and why the above wouldn't?</p>",
        "id": 295116766,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1661371045
    },
    {
        "content": "<p>Does <code>h : nat.prime p</code> work instead? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime\">docs#nat.prime</a> is different from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prime\">docs#prime</a> i believe, and perhaps <code>norm_num</code> only deals with the former.</p>",
        "id": 295117031,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1661371152
    },
    {
        "content": "<p>if you want to convert between both there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime_iff\">docs#nat.prime_iff</a></p>",
        "id": 295117452,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661371313
    },
    {
        "content": "<p>The issue here is not <code>nat.prime</code> vs <code>prime</code> but the fact that you have a <code>let</code> in the way. Unfold that first</p>",
        "id": 295118612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661371786
    },
    {
        "content": "<p>also, <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 295118749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661371837
    },
    {
        "content": "<p>Here should be an mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">p₀</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p₀</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">p₀</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thanks for all the replies, I truly appreciate it.</p>",
        "id": 295121632,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1661372984
    },
    {
        "content": "<p><code>norm_num [p₀]</code> works</p>",
        "id": 295124037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661374007
    },
    {
        "content": "<p>This is neat! Is there a limit to this? Could it prove a 10-digit prime, like 6570237887, or will it time out before finishing?</p>",
        "id": 295143603,
        "sender_full_name": "Tyler Josephson",
        "timestamp": 1661385496
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"mi\">6570237887</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">deterministic</span> <span class=\"n\">timeout</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nat</span>\n</code></pre></div>",
        "id": 295146521,
        "sender_full_name": "Jason Rute",
        "timestamp": 1661388448
    },
    {
        "content": "<p>It uses trial division, so it's order <code>sqrt n</code>. There hasn't really been demand / applications for larger primes, because usually something else goes wrong first</p>",
        "id": 295147385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661389488
    },
    {
        "content": "<p>There is <a href=\"https://github.com/leanprover-community/mathlib/pull/12254/files#diff-0f95a1dfea2490459388549f1aa3b3e8bf2da091c83cf579e01d092c378f9b44\">https://github.com/leanprover-community/mathlib/pull/12254/files#diff-0f95a1dfea2490459388549f1aa3b3e8bf2da091c83cf579e01d092c378f9b44</a></p>",
        "id": 295153574,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661395596
    }
]