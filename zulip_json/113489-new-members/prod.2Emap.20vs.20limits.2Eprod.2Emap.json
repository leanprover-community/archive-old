[
    {
        "content": "<p>Hello, I am yet again working on the thing discussed in <a class=\"stream-topic\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths/topic/Definition.20of.20presheaf.20of.20modules\">#maths &gt; Definition of presheaf of modules</a>, and I believe I have reduced (a chunk of) the problem to showing a statement like the following:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>MWE Lemma statement</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>import category_theory.closed.cartesian<br>\nimport category_theory.limits.types<br>\nimport category_theory.limits.shapes.types<br>\nimport category_theory.types</p>\n<p>noncomputable theory</p>\n<p>universes u v</p>\n<p>open category_theory<br>\n-- open category_theory.limits<br>\nopen category_theory.limits.types<br>\nopen category_theory.concrete_category</p>\n<p>instance : monoidal_category (Type u) :=<br>\n  monoidal_of_has_finite_products (Type u)</p>\n<p>lemma prod_map_bpo_commutes (A B C D : Type u) (f : A ⟶ C) (g : B ⟶ D) :<br>\nas_hom (<a href=\"http://prod.map\">prod.map</a> f g) ≫<br>\n(binary_product_iso C D).inv =<br>\n(binary_product_iso A B).inv ≫<br>\n<a href=\"http://limits.prod.map\">limits.prod.map</a> f g :=<br>\nsorry</p>\n</div></div>\n<p>I don't really know how one would go about comparing <code>prod.map</code> and <code>limits.prod.map</code>, does anyone know how to prove such at thing?</p>",
        "id": 291745502,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1659463318
    },
    {
        "content": "<p>Hmm, it seems I could also use advice on how to get code to properly highlight in a spoiler, if anyone knows.</p>",
        "id": 291746322,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1659463668
    },
    {
        "content": "<p>I think <code>ext1</code> could help? Or maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.prod.hom_ext\">docs#category_theory.limits.prod.hom_ext</a> if <code>ext</code> found the wrong lemma.</p>",
        "id": 291746344,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1659463678
    },
    {
        "content": "<p>It should be </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Spoiler</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n</div></div>\n<p>You can click the view source on the top right to see how I wrote it.</p>",
        "id": 291746548,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1659463755
    },
    {
        "content": "<p>Ok, I ended up proving the lemma! Thanks!</p>",
        "id": 291756684,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1659468301
    },
    {
        "content": "<p>I suspect <code>by {ext1, simp}</code> should close the goal. If not, then there are some simp lemmas missing.</p>",
        "id": 291757517,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659468738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> turns out, <code>by {ext1, simp}</code> does not close it. I don't quite know how <code>ext1</code> works, but it seems to focus on the first, goal, and since there are two (one for each projection), it doesn't seem to work. There also seem to be some lemmas missing, <code>simp</code> doesn't even close the first goal.</p>",
        "id": 291951041,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1659575370
    },
    {
        "content": "<p>By using the strategy of \"write a bunch of have statements that can be cleared by simp, and then use <code>simp?</code> to turn them into things of the form <code>conv_lhs { simp only [...] }</code>, I was able to come up with the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prod_map_bpo_commutes</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">as_hom</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">≫</span>\n<span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">=</span>\n<span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">≫</span>\n<span class=\"n\">limits.prod.map</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">category_theory.limits.prod.hom_ext</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- prod.fst, goal 1</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category_theory.types_comp_apply</span><span class=\"o\">,</span>\n               <span class=\"n\">category_theory.limits.types.binary_product_iso_inv_comp_fst_apply</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category_theory.limits.prod.map_fst</span><span class=\"o\">,</span>\n                         <span class=\"n\">category_theory.iso.cancel_iso_inv_left</span><span class=\"o\">,</span>\n                         <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span>\n                         <span class=\"n\">category_theory.category.assoc</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category_theory.types_comp_apply</span><span class=\"o\">,</span>\n                 <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span>\n                 <span class=\"n\">category_theory.limits.types.binary_product_iso_inv_comp_fst_apply</span><span class=\"o\">]</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- prod.snd, goal 2</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category_theory.types_comp_apply</span><span class=\"o\">,</span>\n               <span class=\"n\">category_theory.limits.types.binary_product_iso_inv_comp_snd_apply</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category_theory.limits.prod.map_snd</span><span class=\"o\">,</span>\n                         <span class=\"n\">category_theory.iso.cancel_iso_inv_left</span><span class=\"o\">,</span>\n                         <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span>\n                         <span class=\"n\">category_theory.category.assoc</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category_theory.types_comp_apply</span><span class=\"o\">,</span>\n                 <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span>\n                 <span class=\"n\">category_theory.limits.types.binary_product_iso_inv_comp_snd_apply</span><span class=\"o\">]</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291951116,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1659575467
    },
    {
        "content": "<p>you should use braces to delimit subgoals instead of comments</p>",
        "id": 291951355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659575762
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.closed.cartesian</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.types</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.shapes.types</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.types</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"c1\">-- open category_theory.limits</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits.types</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.concrete_category</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoidal_category</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">monoidal_of_has_finite_products</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp, reassoc]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fst_foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">≫</span> <span class=\"n\">limits.prod.fst</span> <span class=\"bp\">=</span> <span class=\"n\">prod.fst</span> <span class=\"o\">:=</span>\n<span class=\"n\">limits.prod.lift_fst</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">@[simp, reassoc]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">snd_foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">≫</span> <span class=\"n\">limits.prod.snd</span> <span class=\"bp\">=</span> <span class=\"n\">prod.snd</span> <span class=\"o\">:=</span>\n<span class=\"n\">limits.prod.lift_snd</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_map_bpo_commutes</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">as_hom</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">≫</span>\n<span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">=</span>\n<span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">≫</span>\n<span class=\"n\">limits.prod.map</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext1</span><span class=\"bp\">;</span> <span class=\"n\">simpa</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 291952998,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659577565
    },
    {
        "content": "<p>not quite <code>ext1, simp</code>, but close ;)</p>",
        "id": 291953006,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659577574
    },
    {
        "content": "<p>When I change the final semicolon to a comma, Lean complains because there are two goals and only the first one gets solved. Can you explain why simp works when there is a semicolon, but if I change that to a comma it complains?</p>",
        "id": 291964343,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1659588838
    },
    {
        "content": "<p>A semicolon means: apply the next tactic to <em>all</em> the goals. So, in your case, the tactic after the semicolon solves both goals, but when you change it to a comma, that last tactic only acts on the 1st goal (it solves it, but there's still one leftover).</p>",
        "id": 291964837,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659589418
    }
]