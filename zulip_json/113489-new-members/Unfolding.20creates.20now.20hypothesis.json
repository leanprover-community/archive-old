[
    {
        "content": "<p>Why does <code>unfold</code> create new hypothesis?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">quotient_group</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">quotient_group</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">quotient_group</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"n\">at</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200731508,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592000816
    },
    {
        "content": "<p>because the goal depends on <code>a</code> and <code>b</code></p>",
        "id": 200731890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592001060
    },
    {
        "content": "<p>When <code>simp</code> runs on the reverted version of the goal, it can't rewrite inside the binder domain</p>",
        "id": 200731996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592001125
    },
    {
        "content": "<p>Use <code>dunfold</code></p>",
        "id": 200732007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592001132
    },
    {
        "content": "<p>Interesting.</p>",
        "id": 200732527,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592001489
    },
    {
        "content": "<p>Also on (<code>d</code>)<code>unfold</code>/(<code>d</code>)<code>simp</code>,  how can I unfold <code>setoid.r</code> on the goal <code>setoid.r (quotient.out' a) (quotient.out' b)</code> (the goal at <code>sorry</code>).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">quotient_group</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">quotient_group</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">out_eq&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">out_eq&#39;</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200732599,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592001565
    },
    {
        "content": "<p>I know that <code>setoid.r = r</code> defined above (it is how its defined in <code>group_theory.quotient_group</code> and would like to leverage that fact.</p>",
        "id": 200732731,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592001650
    },
    {
        "content": "<p>do you want the <code>r</code> you defined or the one in <code>quotient_group</code>?</p>",
        "id": 200732892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592001771
    },
    {
        "content": "<p>you can always force it with <code>change</code></p>",
        "id": 200732919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592001793
    },
    {
        "content": "<p>I don't seem to be able to use change. <code>change r a.out' b.out'</code> nor <code>change setoid.r a.out' b.out'</code> work.</p>",
        "id": 200733052,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592001893
    },
    {
        "content": "<p>I've found it frustrating in the past that sometimes one can't just say \"unfold this relation\". You can use <code>set</code> instead of <code>let</code> to unfold a definitional <code>let</code> but there's no analogue here</p>",
        "id": 200733062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592001903
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">change</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">s</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out&#39;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out&#39;</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>works</p>",
        "id": 200733088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592001927
    },
    {
        "content": "<p>Sometimes <code>simp only [setoid.r]</code> works</p>",
        "id": 200733089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592001928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Unfolding.20creates.20now.20hypothesis/near/200733088\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">change</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">s</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out&#39;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out&#39;</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>works</p>\n</blockquote>\n<p>Omg, you are a wizard. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 200733172,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592001963
    },
    {
        "content": "<p>it is complicated here because it's not actually a simple unfold, <code>r</code> is not involved in the definition at all</p>",
        "id": 200733176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592001966
    },
    {
        "content": "<p>That sure is quite the work around (although not really), I would have taken a long while to figure it out myself, thanks!</p>",
        "id": 200733208,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592002004
    },
    {
        "content": "<p>(Maybe making this whole ordeal less opaque would be good. It is not clear at all that this was even possible after a lot of messing around with <code>unfold</code> and <code>simp</code>.)</p>",
        "id": 200733301,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592002078
    },
    {
        "content": "<p>What I actually did was <code>change r _ _,</code> but that didn't work until I did <code>change _ ∈ _, change r _ _,</code> which yields a <code>is_subgroup s</code> subgoal. So apparently it can't figure out the implicit arguments to <code>r</code> without help</p>",
        "id": 200733354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592002086
    },
    {
        "content": "<p>Wow, that is amazing!</p>",
        "id": 200733387,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592002126
    },
    {
        "content": "<p>which makes sense, because <code>r</code> doesn't have anything in its type that would help infer <code>s</code></p>",
        "id": 200733394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592002130
    },
    {
        "content": "<p>Thank you for explaining your thought process. I just started using change earlier today actually (but I remember someone mentioning in another thread a while ago) and am not very good at it. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 200733441,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592002181
    },
    {
        "content": "<p>when in doubt, use lots of underscores <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 200733510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592002203
    },
    {
        "content": "<p>I think it helps to know that there is always the fallback of being completely explicit and providing a fully elaborated term. That will always work unless the kernel is broken, so it's really a matter of inserting more implicit info until it works and then scaling back until you have just enough for lean to close the distance</p>",
        "id": 200733720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592002384
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 205382791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596041460
    },
    {
        "content": "<p>(sorry, caught out by zulip's filtered search)</p>",
        "id": 205383078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596041612
    }
]