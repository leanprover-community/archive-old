[
    {
        "content": "<p>I am learning about preorders, and I read there is a concept called \"opposite preorder\",  which is, Given a preorder (P, &lt;=), the opposite is a preorder (P, &lt;=op) having p &lt;=op q iff q &lt;= p. I am wondering how to write this in lean. I found <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/algebra/order.lean#L19\">preorders</a> in lean. Is that definition suitable for defining 'opposite preorder' with? How to do that?</p>",
        "id": 205751350,
        "sender_full_name": "Iocta",
        "timestamp": 1596416396
    },
    {
        "content": "<p>it's called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual\">docs#order_dual</a> in mathlib</p>",
        "id": 205751459,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596416525
    },
    {
        "content": "<p>Oooh should this be a job for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/opposite\">docs#opposite</a> ?</p>",
        "id": 205751817,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596417197
    },
    {
        "content": "<p><code>opposite</code> is already sort of conceptually dubious but it definitely shouldn't reverse both <code>&lt;=</code> and <code>*</code></p>",
        "id": 205751886,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596417309
    },
    {
        "content": "<p>Oh yeah fair enough. Didn't consider the case of an ordered ring.</p>",
        "id": 205751895,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596417333
    },
    {
        "content": "<p>Well... If you think of a poset as a category, then opposite does make sense.</p>",
        "id": 205752019,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596417496
    },
    {
        "content": "<p>Possibly we should split <code>opposite</code> in category theory and in group theory and turn <code>ᵒᵖ</code> into two <code>localized notation</code>s.</p>",
        "id": 205756780,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596425032
    },
    {
        "content": "<p>A couple questions</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">partition</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">logic</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">classical</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">meta</span><span class=\"bp\">.</span><span class=\"n\">name</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">classes</span>\n\n\n<span class=\"kn\">variable</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">variable</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n\n\n<span class=\"c1\">-- XXX Don&#39;t I mean [preorder P], not [preorder X]?</span>\n<span class=\"n\">def</span> <span class=\"n\">is_upper</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"bp\">≥</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"err\">∈</span> <span class=\"n\">P</span>\n\n<span class=\"n\">def</span> <span class=\"n\">uparrow</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">p&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">P</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">p&#39;</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- XXX Why doesn&#39;t this work?</span>\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">is_upper</span> <span class=\"o\">(</span><span class=\"n\">uparrow</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_mem</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"n\">cats</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">23</span><span class=\"o\">:</span><span class=\"mi\">50</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">P</span>\n<span class=\"err\">⊢</span> <span class=\"n\">preorder</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 205827321,
        "sender_full_name": "Iocta",
        "timestamp": 1596478139
    },
    {
        "content": "<p>Check the type of <code>uparrow</code>. It has more explicit arguments than you seem to think</p>",
        "id": 205828282,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596478585
    },
    {
        "content": "<p>it might help you to squash your three <code>variable</code> statements into one <code>variables</code> statement</p>",
        "id": 205828659,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596478764
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">uparrow</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span>\n</code></pre></div>\n\n\n<p>has two of <code>(these)</code> so I think it needs two arguments<br>\nbut </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">is_upper</span> <span class=\"o\">(</span><span class=\"n\">uparrow</span> <span class=\"n\">X</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">is_upper</span> <span class=\"o\">(</span><span class=\"n\">uparrow</span> <span class=\"n\">X</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">uparrow</span> <span class=\"n\">X</span> <span class=\"n\">p</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 205829883,
        "sender_full_name": "Iocta",
        "timestamp": 1596479341
    },
    {
        "content": "<p>do you know what the type of <code>uparrow X p</code> is?</p>",
        "id": 205830086,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596479445
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n\n\n<p>apparently</p>",
        "id": 205830167,
        "sender_full_name": "Iocta",
        "timestamp": 1596479505
    },
    {
        "content": "<p>does that mean I'm supposed to change it from forall to introducing a specific <code>hp : p \\in P</code> so I can reference it by name?</p>",
        "id": 205830484,
        "sender_full_name": "Iocta",
        "timestamp": 1596479672
    },
    {
        "content": "<p>it's a function of one argument</p>",
        "id": 205830687,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596479778
    },
    {
        "content": "<p>so you can just pass in the argument</p>",
        "id": 205830702,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596479787
    },
    {
        "content": "<p>as in <code>uparrow X p hp</code></p>",
        "id": 205830713,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596479796
    },
    {
        "content": "<p>@Iocta :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">uparrow</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span>\n</code></pre></div>\n\n\n<p>is exactly the same as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">uparrow</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">set</span> <span class=\"n\">X</span>\n</code></pre></div>",
        "id": 205830825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596479870
    },
    {
        "content": "<p>Sorry if I'm being dense, I don't know what this means:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_upper</span> <span class=\"o\">(</span><span class=\"n\">uparrow</span> <span class=\"n\">X</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">type</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">is_upper</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">uparrow</span> <span class=\"n\">X</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">uparrow</span> <span class=\"n\">X</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 205831074,
        "sender_full_name": "Iocta",
        "timestamp": 1596479995
    },
    {
        "content": "<p>Check the type of <code>is_upper</code>...</p>",
        "id": 205831195,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596480056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> Lean is just using logic here, and you can use logic too to figure out exactly which inputs each function wants, and the error messages explain when you have not given each function the right inputs.</p>",
        "id": 205832001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596480487
    },
    {
        "content": "<p>Hovering over the name of a function will tell you exactly what the inputs it wants are</p>",
        "id": 205832162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596480598
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">uparrow</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Why can I say this</span>\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_upper</span> <span class=\"o\">(</span><span class=\"n\">uparrow</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"c1\">-- but not this?</span>\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_upper</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 205836320,
        "sender_full_name": "Iocta",
        "timestamp": 1596482552
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">is_upper</span> <span class=\"n\">S</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">S</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">uparrow</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 205836362,
        "sender_full_name": "Iocta",
        "timestamp": 1596482580
    },
    {
        "content": "<p>isn't <code>↥(uparrow p hp)</code> a set?</p>",
        "id": 205836429,
        "sender_full_name": "Iocta",
        "timestamp": 1596482618
    },
    {
        "content": "<p>The strange arrow means <code>subtype</code>. It's the subtype associated to the set <code>uparrow _ _</code>.</p>",
        "id": 205836505,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596482656
    },
    {
        "content": "<p>whatever else is happening, if <code>is_upper (uparrow p hp)</code> makes sense and <code>S : uparrow p hp</code>, then surely <code>is_upper S</code> will almost never make sense!</p>",
        "id": 205836622,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596482733
    },
    {
        "content": "<p>oh I see, they're at different levels</p>",
        "id": 205836710,
        "sender_full_name": "Iocta",
        "timestamp": 1596482775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> do you know the difference between a type and a term? <a href=\"https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/\">https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/</a></p>",
        "id": 205836722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596482781
    },
    {
        "content": "<p>yeah, just realized that</p>",
        "id": 205836739,
        "sender_full_name": "Iocta",
        "timestamp": 1596482792
    },
    {
        "content": "<p>In Lean, if <code>X : Type</code> then <code>X</code> is a type, but if <code>A : set X</code> then <code>A</code> is a term, not a type.</p>",
        "id": 205836769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596482816
    },
    {
        "content": "<p>So even though we might informally think of X as a \"set\" and A as a \"subset\" and hence a \"set\", they are at different levels as you say.</p>",
        "id": 205836823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596482847
    },
    {
        "content": "<p>The weird arrow promotes a term to a type, in the cases when this can be done</p>",
        "id": 205836860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596482873
    },
    {
        "content": "<p>e.g it would promote <code>A : set X</code> to a type called a subtype; to give a term of this subtype you have to give a pair consisting of <code>x : X</code> and then a proof that <code>x \\in A</code>.</p>",
        "id": 205836947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596482913
    },
    {
        "content": "<p>But a random term can't be promoted to a type</p>",
        "id": 205836977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596482928
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_upper</span> <span class=\"o\">(</span><span class=\"n\">uparrow</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">is_upper</span> <span class=\"o\">(</span><span class=\"n\">uparrow</span> <span class=\"n\">p</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>that <code>H</code> is what i was looking for before \"does that mean I'm supposed to change it from forall to introducing a specific hp : p \\in P so I can reference it by name\"</p>",
        "id": 205837581,
        "sender_full_name": "Iocta",
        "timestamp": 1596483239
    },
    {
        "content": "<p>Currently <code>X</code> <code>has_le</code>, but I think I mean for <code>P</code> to <code>has_le</code> instead, since the whole point of the exercise is that the ordering of <code>X</code>s is flexible. Therefore do I want to make <code>P</code> a subtype of <code>X</code> that <code>has_le</code>instead of a <code>set X</code>, so then I can say <code>[preorder P]</code>?</p>",
        "id": 205839969,
        "sender_full_name": "Iocta",
        "timestamp": 1596484499
    },
    {
        "content": "<p>I don't know what you want because I don't know what you're doing</p>",
        "id": 205840623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596484874
    },
    {
        "content": "<p>I want to talk about \"the opposite preorder of P\": Given a preorder (P, &lt;=), the opposite is a preorder (P, &lt;=op) having p &lt;=op q iff q &lt;= p</p>",
        "id": 205841365,
        "sender_full_name": "Iocta",
        "timestamp": 1596485272
    },
    {
        "content": "<p>which Reid said above is <code>order_dual</code></p>",
        "id": 205841438,
        "sender_full_name": "Iocta",
        "timestamp": 1596485313
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/c6381aa1175c78083b91732aebefb793156a656a/src/order/basic.lean#L219\">https://github.com/leanprover-community/mathlib/blob/c6381aa1175c78083b91732aebefb793156a656a/src/order/basic.lean#L219</a></p>",
        "id": 205841455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596485333
    },
    {
        "content": "<p>I would just get rid of <code>P</code> (or <code>X</code>)</p>",
        "id": 205841457,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596485334
    },
    {
        "content": "<p>er, wait</p>",
        "id": 205841496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596485373
    },
    {
        "content": "<p>I now agree with Kevin</p>",
        "id": 205841508,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596485378
    },
    {
        "content": "<p>haha :-)</p>",
        "id": 205841518,
        "sender_full_name": "Iocta",
        "timestamp": 1596485386
    },
    {
        "content": "<p><code>is_upper</code> looks sensible, but why is there a <code>P</code> in <code>uparrow</code>?</p>",
        "id": 205841594,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596485412
    },
    {
        "content": "<p>The preorder instance on the dual is <a href=\"https://github.com/leanprover-community/mathlib/blob/c6381aa1175c78083b91732aebefb793156a656a/src/order/basic.lean#L235-L240\">https://github.com/leanprover-community/mathlib/blob/c6381aa1175c78083b91732aebefb793156a656a/src/order/basic.lean#L235-L240</a></p>",
        "id": 205841624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596485429
    },
    {
        "content": "<p>I was trying to express  \"P := (X, &lt;=) is a preorder\" but maybe that's pointless and I should just say X is orderable in the first place</p>",
        "id": 205842268,
        "sender_full_name": "Iocta",
        "timestamp": 1596485815
    },
    {
        "content": "<p><code>P : set X</code> means P is a subset of X, not P=X as a set</p>",
        "id": 205842350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596485862
    },
    {
        "content": "<p>I get that part; I'll just skip P as suggested</p>",
        "id": 205842539,
        "sender_full_name": "Iocta",
        "timestamp": 1596485964
    },
    {
        "content": "<p><code>[preorder X]</code> means \"(X,&lt;=) is a preorder\"</p>",
        "id": 205842656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596486011
    },
    {
        "content": "<p>oh. I see</p>",
        "id": 205842949,
        "sender_full_name": "Iocta",
        "timestamp": 1596486181
    }
]