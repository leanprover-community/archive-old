[
    {
        "content": "<p>I'm getting </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">k</span> <span class=\"err\">∣</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">factors&#39;</span> <span class=\"n\">a0</span> <span class=\"n\">hz</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">k</span> <span class=\"err\">∣</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">factors&#39;</span> <span class=\"n\">a0</span> <span class=\"n\">hz</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>from this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">unique_factorization_domain</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">associates</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">associated</span><span class=\"bp\">.</span><span class=\"n\">setoid</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">add_monoid</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">multiset_mul</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"err\">∣</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"err\">•</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">unique_factorization_domain</span> <span class=\"n\">associated</span> <span class=\"n\">lattice</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">unique_factorization_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">associates</span> <span class=\"n\">α</span><span class=\"o\">)]</span>\n\n<span class=\"c1\">-- set_option pp.all true</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">power_of_count&#39;</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"kn\">irreducible</span> <span class=\"n\">a</span><span class=\"o\">}),</span> <span class=\"n\">k</span> <span class=\"err\">∣</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">factors&#39;</span> <span class=\"n\">a0</span> <span class=\"n\">hz</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">factors&#39;</span> <span class=\"n\">a0</span> <span class=\"n\">hz</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"err\">•</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">multiset_mul</span> <span class=\"o\">(</span><span class=\"n\">factors&#39;</span> <span class=\"n\">a0</span> <span class=\"n\">hz</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I'm sure the <code>set_option pp.all true</code> is telling me what is wrong, but I haven't been able to figure it out. Something to do with <code>decidable_eq (associates α)</code>?</p>",
        "id": 196068850,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1588451416
    },
    {
        "content": "<p>You have put <code>open_locale classical</code> and that deals with all the decidable nonsense at once so you should probably remove the decidable_eq instance later</p>",
        "id": 196070617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588454493
    },
    {
        "content": "<p>You shouldn't need it</p>",
        "id": 196070618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588454510
    },
    {
        "content": "<p>Removing either <code>open_locale classical</code> or <code>variable [decidable_eq (associates α)]</code> still gives me errors...</p>",
        "id": 196073816,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1588460120
    },
    {
        "content": "<p>OK you're going to have to talk to someone who knows what's going on. This isn't a mathematical problem, this is some sort of decidability problem. One of the terms contains</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;           classical.prop_decidable\n&lt;             (@eq.{u_1+1}\n&lt;                (@subtype.{u_1+1}\n&lt;                   (@associates.{u_1} α\n&lt;                      (@ring.to_monoid.{u_1} α\n&lt;                         (@domain.to_ring.{u_1} α (@integral_domain.to_domain.{u_1} α _inst_1))))\n&lt;                   (λ\n&lt;                    (a :\n&lt;                      @associates.{u_1} α\n</code></pre></div>\n\n\n<p>and the other contains</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt;           @subtype.decidable_eq.{u_1}\n&gt;             (@associates.{u_1} α\n&gt;                (@ring.to_monoid.{u_1} α (@domain.to_ring.{u_1} α (@integral_domain.to_domain.{u_1} α _inst_1))))\n&gt;             (λ\n&gt;              (x :\n&gt;                @associates.{u_1} α\n&gt;                  (@ring.to_monoid.{u_1} α (@domain.to_ring.{u_1} α (@integral_domain.to_domain.{u_1} α _inst_1)))),\n&gt;                @irreducible.{u_1}\n&gt;                  (@associates.{u_1} α\n&gt;                     (@ring.to_monoid.{u_1} α (@domain.to_ring.{u_1} α (@integral_domain.to_domain.{u_1} α _inst_1))))\n&gt;                  (@comm_monoid.to_monoid.{u_1}\n&gt;                     (@associates.{u_1} α\n</code></pre></div>\n\n\n<p>Something has been decided in two different ways here.</p>",
        "id": 196075177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588462540
    },
    {
        "content": "<p>The usual way around this is to use <code>convert</code> instead of <code>apply</code>. This works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">unique_factorization_domain</span>\n\n<span class=\"c1\">--noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">associates</span>\n<span class=\"c1\">--local attribute [instance] associated.setoid</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">add_monoid</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">multiset_mul</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"err\">∣</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"err\">•</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">unique_factorization_domain</span> <span class=\"n\">associated</span> <span class=\"n\">lattice</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">unique_factorization_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">power_of_count&#39;</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"kn\">irreducible</span> <span class=\"n\">a</span><span class=\"o\">}),</span> <span class=\"n\">k</span> <span class=\"err\">∣</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">factors&#39;</span> <span class=\"n\">a0</span> <span class=\"n\">hz</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">factors&#39;</span> <span class=\"n\">a0</span> <span class=\"n\">hz</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"err\">•</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">multiset_mul</span> <span class=\"o\">(</span><span class=\"n\">factors&#39;</span> <span class=\"n\">a0</span> <span class=\"n\">hz</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hp</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">associates</span>\n</code></pre></div>",
        "id": 196075363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588462879
    },
    {
        "content": "<p>The reason this works is because of this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n\n\n<p><code>decidable P</code> is unfortunately a Type, i.e. it's data, and Lean managed to construct two terms of that type which weren't definitionally equal, so it couldn't unify them. However the example above shows that even though <code>decidable P</code> is a type, it's a subsingleton, which means that any two terms of that type are equal anyway. <code>convert</code> knows about this subsingleton trickery, and <code>rw</code> doesn't, so <code>convert</code> wins. In general you can use <code>convert</code> to close a goal when you have created a term (in this case <code>hp q</code>) which is equal to the goal modulo subsingleton types.</p>",
        "id": 196075536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588463140
    },
    {
        "content": "<p>Wow, I'm glad I asked. I would NEVER have figured that out! Thanks Kevin!</p>",
        "id": 196076678,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1588465426
    },
    {
        "content": "<p>I learnt lean by trying to do mathematics in it and asking whenever I got stuck</p>",
        "id": 196076731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588465520
    },
    {
        "content": "<p>Independent of the convert solution there's still the question of how it happened, which is beyond me but certainly not beyond some people here.</p>",
        "id": 196076788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588465641
    },
    {
        "content": "<p>These things happen because there is no reason they should not happen <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 196076850,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588465760
    },
    {
        "content": "<p>I guess you said how, not why</p>",
        "id": 196076853,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588465775
    },
    {
        "content": "<p>Yes I guess</p>",
        "id": 196076908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588465872
    },
    {
        "content": "<p>I could envisage a rewrite failing for reasons like this, and convert being harder to apply because it's a subterm</p>",
        "id": 196076919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588465914
    },
    {
        "content": "<p>Then what?</p>",
        "id": 196076957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588465929
    },
    {
        "content": "<p>All solutions I can think of are ugly</p>",
        "id": 196076971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588465966
    },
    {
        "content": "<p>Where's the tactic which replaces every instance of decidable anything in the entire local context by the one coming from classical?</p>",
        "id": 196077011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588466029
    },
    {
        "content": "<p>is this morally what one wants from open_locale classical? to add a simp lemma that looks like <code>decidable _ -\\iff classical._</code>? (where that <code>_</code> is the instance you were gesturing at?)</p>",
        "id": 196078213,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588468186
    },
    {
        "content": "<p>Yeah maybe that's the way to do it? I'm not an expert at simp</p>",
        "id": 196091857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588495179
    },
    {
        "content": "<p>A more drastic version of this would be</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">flatten_subsingleton</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"n\">subsingleton</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n<p>But often these subsingletons will appear in places where they are hard to rewrite, I guess.</p>",
        "id": 196093928,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588498598
    }
]