[
    {
        "content": "<p>(world 8 level 10) I have the hypothesis (I think that's the term?) <code>H : succ (a + d) = 0</code> and the goal <code>⊢ false</code>. I'd like to apply  the theorem <code>succ_ne_zero := (a : mynat) : succ a ≠ 0</code> to <code>H</code> in order to have <code>H : false</code>. How do I do that?</p>",
        "id": 298574115,
        "sender_full_name": "Mujtaba Alam",
        "timestamp": 1663072667
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">succ_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>work?</p>",
        "id": 298574488,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663072800
    },
    {
        "content": "<p>I don't teach definitional equality in the game, but <code>succ a ≠ 0</code> is <em>by definition</em> <code>succ a = 0 -&gt; false</code>, which means that if you feed <code>succ_ne_zero x</code> a proof that <code>succ x = 0</code> then it will return a proof of <code>false</code>, so my guess is that Riccardo's suggestion will work.</p>",
        "id": 298585302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663076083
    },
    {
        "content": "<p>Is there a way for me to reorder things? Like how can I reoder a +c +b + d into  b + c + a + d? I expiremented using a series of add_comms and add_assocs and they didn't really reorder differently. Do I just need to try more or is there an easier way?</p>",
        "id": 298638728,
        "sender_full_name": "Ryan Duan",
        "timestamp": 1663092163
    },
    {
        "content": "<p>If this is your goal, <code>abel</code> or <code>ring</code> will do it.</p>",
        "id": 298639005,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663092252
    },
    {
        "content": "<p>gotcha. I don't thinkn ring worked in the context i had, but abel did. Thanks!</p>",
        "id": 298639320,
        "sender_full_name": "Ryan Duan",
        "timestamp": 1663092361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"533309\">@Ryan Duan</span> You can pass arguments to <code>add_assoc</code> and <code>add_comm</code> help specify which terms they should apply to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">c</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 298645294,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663094452
    },
    {
        "content": "<p>Whether tactics like <code>abel</code> or <code>ring</code> will work may somehow depend on how far through the game you are :-)</p>",
        "id": 298656526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663098570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/applying.20theorem.20to.20hypothesis/near/298585302\">said</a>:</p>\n<blockquote>\n<p>I don't teach definitional equality in the game, but <code>succ a ≠ 0</code> is <em>by definition</em> <code>succ a = 0 -&gt; false</code></p>\n</blockquote>\n<p>I'm certain that was mentioned at least once, and confident it was mentioned twice. I'm just thick/couldn't figure out the syntax</p>",
        "id": 298679372,
        "sender_full_name": "Mujtaba Alam",
        "timestamp": 1663109787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/applying.20theorem.20to.20hypothesis/near/298574488\">said</a>:</p>\n<blockquote>\n<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">succ_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>work?</p>\n</blockquote>\n<p>Yes it does!<br>\nI see that once it gets it's first argument it becomes <code>succ (a + b) = 0 -&gt; false</code>, and since H is the first proposition it give <code>false</code>. Very functional.<br>\nThank you!</p>",
        "id": 298679483,
        "sender_full_name": "Mujtaba Alam",
        "timestamp": 1663109896
    },
    {
        "content": "<p>One possible bug: in world 8 level 12, a single <code>refl,</code> proves the theorem. Is this the intended solution?</p>",
        "id": 298680336,
        "sender_full_name": "Mujtaba Alam",
        "timestamp": 1663110582
    },
    {
        "content": "<p>One way to think about it is that <code>refl</code> will automatically rewrite using all the lemmas that are true by definition -- the lemmas <code>add_zero</code> and <code>add_succ</code> define addition, and <code>one_eq_succ_zero</code> defines <code>1</code>.</p>",
        "id": 298680984,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663111195
    },
    {
        "content": "<p>This is more-or-less what \"definitional equality\" is -- Lean has a collection of defining lemmas it will automatically apply when it checks whether two things are the same.</p>",
        "id": 298681069,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663111284
    },
    {
        "content": "<p>The natural number game doesn't reveal which lemmas are true by definition. They come from the underlying theory. (And I'm not being particularly precise here. More precisely there's a system for unfolding definitions while it checks whether two things are the same.)</p>",
        "id": 298681178,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663111413
    },
    {
        "content": "<p>By the way, this is roughly what a <code>refl</code> for world 8 level 12 is doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">one_eq_succ_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 298681195,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663111434
    },
    {
        "content": "<p>If you want a less smart <code>refl</code>, then you can use <code>tactic.reflexivity reducible</code>. For example, that fails, but the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">one_eq_succ_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">tactic.reflexivity</span> <span class=\"n\">reducible</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 298681475,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663111739
    }
]