[
    {
        "content": "<p>I'm working through <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's course and I'm looking at </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ext'</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H.carrier</span> <span class=\"bp\">=</span> <span class=\"n\">K.carrier</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- first take H and K apart</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"c1\">-- H now broken up into its underlying 3-tuple.</span>\n  <span class=\"n\">cases</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- and now it must be obvious, so let's see if the simplifier can do it.</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>For the life of me I cannot figure out what <code>simp</code> is doing here.  The context is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"n\">H_carrier</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span>\n<span class=\"n\">H_one_mem'</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">H_carrier</span>\n<span class=\"n\">H_mul_mem'</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H_carrier</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">H_carrier</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">H_carrier</span>\n<span class=\"n\">H_inv_mem'</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H_carrier</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">H_carrier</span>\n<span class=\"n\">K_carrier</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span>\n<span class=\"n\">K_one_mem'</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">K_carrier</span>\n<span class=\"n\">K_mul_mem'</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K_carrier</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">K_carrier</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">K_carrier</span>\n<span class=\"n\">K_inv_mem'</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K_carrier</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">K_carrier</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">H_carrier</span><span class=\"o\">,</span> <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">H_one_mem'</span><span class=\"o\">,</span> <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">H_mul_mem'</span><span class=\"o\">,</span> <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">H_inv_mem'</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">K_carrier</span><span class=\"o\">,</span> <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">K_one_mem'</span><span class=\"o\">,</span> <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">K_mul_mem'</span><span class=\"o\">,</span> <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">K_inv_mem'</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">carrier</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">{</span><span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">H_carrier</span><span class=\"o\">,</span> <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">H_one_mem'</span><span class=\"o\">,</span> <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">H_mul_mem'</span><span class=\"o\">,</span> <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">H_inv_mem'</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">K_carrier</span><span class=\"o\">,</span> <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">K_one_mem'</span><span class=\"o\">,</span> <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">K_mul_mem'</span><span class=\"o\">,</span> <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">K_inv_mem'</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>I <em>think</em> the idea is: since the carriers are the same by <code>h</code>, you can use all the other hypotheses to show equality of the other components and get the result.  But what are the actual manipulations to do this?</p>",
        "id": 265677026,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640087924
    },
    {
        "content": "<p>Hmm, I would think <code>congr</code> in place of <code>simp</code> should also work.</p>",
        "id": 265677337,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640088120
    },
    {
        "content": "<p>Which roughly means: \"match the LHS up with the RHS, and turn all their differences into new subgoals\"</p>",
        "id": 265677440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640088173
    },
    {
        "content": "<p>Note that all other fields are proofs, so they are equal in a very  strong sense as soon as they prove the same thing.</p>",
        "id": 265677499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640088232
    },
    {
        "content": "<p>So Lean is applying injectivity of constructors of inductive types for you, as well as the proof irrelevance axiom.</p>",
        "id": 265677736,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640088422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Still.20more.20homework.20help.20-.20subgroups/near/265677499\">said</a>:</p>\n<blockquote>\n<p>Note that all other fields are proofs, so they are equal in a very  strong sense as soon as they prove the same thing.</p>\n</blockquote>\n<p>Can you say a little bit more? about this?  It seems like if you have a compound object and you want to prove equality, you need to prove<br>\nequality of the components.  So the idea that <code>congr</code> would split the situation up into subgoals makes sense to me, with a subgoal for each component.  But the equality of the component<br>\nproofs depends on equality of the carriers.  It all seems magic.</p>",
        "id": 265677928,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640088579
    },
    {
        "content": "<p>It is indeed a bit subtle. But you really don't need to understand this in order to use Lean. That kind of extensionality lemma is automatically generated in practice.</p>",
        "id": 265678321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640088860
    },
    {
        "content": "<p>OK, I will table this for now and hope that clarity emerges from experience.</p>",
        "id": 265678497,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640089048
    },
    {
        "content": "<p>Yeah I had a choice here. I could either have written <code>@[ext] structure subgroup...</code> on line 26 of that file, which would have generated <code>xena.subgroup.ext</code> automatically (and which up to choice of brackets would be the same as <code>ext'</code> above) or I could have done it this way. In my copy of the repo I just seem to finish the proof with <code>simp * at *</code>. My take on this is \"the thing is mathematically entirely trivial, the goal follows from <code>h</code>, I don't quite understand equality of structures and furthermore I even know that whatever equality of structures means it will change in Lean 4 (we'll have <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20lean4.3Amaster/near/262736535\">eta for structures</a>, whatever that means), but I do know that the simplifier will know all the relevant lemmas so let's just use it\"</p>",
        "id": 265679371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640089638
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/777\">This</a> is the relevant Lean 4 issue.</p>",
        "id": 265679542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640089771
    },
    {
        "content": "<p>PS Lean does not do magic, but on the other hand I don't understand what it's doing (and don't need to understand). Others here will if you really want to know what's going on. You could ask in <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a> what is happening under the hood and some expert will explain (Patrick probably knows but I don't know how often he frequents <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> )</p>",
        "id": 265679728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640089890
    },
    {
        "content": "<p>The line I don't fully understand is <code>congr</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ext'</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H.carrier</span> <span class=\"bp\">=</span> <span class=\"n\">K.carrier</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- first take H and K apart</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"c1\">-- H now broken up into its underlying 3-tuple.</span>\n  <span class=\"n\">cases</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265680012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640090111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Still.20more.20homework.20help.20-.20subgroups/near/265679728\">said</a>:</p>\n<blockquote>\n<p>PS Lean does not do magic, </p>\n</blockquote>\n<p>Any sufficiently advanced technology is indistinguishable from magic.</p>",
        "id": 265680977,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640090769
    },
    {
        "content": "<p>I often feel that stuff like this is type theory 101 and the reason I don't know it is that I never went to any computer science courses, so it might just be my backwardness rather than the advancedness of the technology in this case.</p>",
        "id": 265681055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640090850
    },
    {
        "content": "<p>But I'll be teaching this again in about a month so I'd be interested in hearing any more details if you get to the bottom of them!</p>",
        "id": 265681133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640090887
    },
    {
        "content": "<p>I've taken CS courses, and even taught them, but  this is all very new to me and feels very strange.   I think I just don't have any real understanding of what \"dependent type theory\" really is.  But I guess that is what makes it interesting.</p>",
        "id": 265681321,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640091038
    },
    {
        "content": "<p>I like your utilitarian attitude though, it's inspiring.</p>",
        "id": 265681405,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640091106
    },
    {
        "content": "<p><em>You</em> get to decide why stuff is interesting to <em>you</em>.</p>",
        "id": 265681414,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640091113
    },
    {
        "content": "<p>And you can choose to spend time thinking about foundational stuff. What Kevin and I are saying is that you don't <em>need</em> to, at least if you only want to formalize math.</p>",
        "id": 265681532,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640091161
    },
    {
        "content": "<p>I'm living proof that you don't need to understand the details of equality of structures in order to formalise maths! On the other hand I am curious. It might be something to do with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/heq\">docs#heq</a> <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 265683641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640092632
    },
    {
        "content": "<p>Not sure if it helps, but this also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ext'</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H.carrier</span> <span class=\"bp\">=</span> <span class=\"n\">K.carrier</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- first take H and K apart</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"c1\">-- H now broken up into its underlying 3-tuple.</span>\n  <span class=\"n\">cases</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265685332,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1640093824
    },
    {
        "content": "<p>So I guess the question is: equality is defined as an inductive type and its recursor, automatically generated, is the substitution property <code>a = b -&gt; P a -&gt; P b</code>. Can one now write down an explicit <code>P</code> such that if <code>a=H.carrier</code> and <code>b=K.carrier</code> then <code>P a</code> can be proved by <code>rfl</code> and <code>P b</code> is the equality we want?</p>",
        "id": 265685957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640094165
    },
    {
        "content": "<p>Another way to write it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ext'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H.carrier</span> <span class=\"bp\">=</span> <span class=\"n\">K.carrier</span><span class=\"o\">),</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">K</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">Hc</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">Kc</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 265688766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640095783
    },
    {
        "content": "<p>(but that's worse because you have to count the <code>_</code>s)</p>",
        "id": 265688776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640095791
    },
    {
        "content": "<p>I am going to try to make sense of Chapter 8 of TPIL and then come back to this discussion.</p>",
        "id": 265696881,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640100169
    },
    {
        "content": "<p>The equation compiler is pretty spectacularly good at this sort of thing but I wanted to keep all proofs within <code>begin end</code> blocks for my students</p>",
        "id": 265698101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640100729
    }
]