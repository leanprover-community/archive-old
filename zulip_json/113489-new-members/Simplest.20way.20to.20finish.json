[
    {
        "content": "<p>Hi! I am wondering what is the \"fastest way\" to finish this off? As you can see, I am pretty close to the goal, the only difference is <code>p | x</code> should be <code>p | k</code> instead, which is handled by <code>x | k</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">x_div</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">k</span>\n<span class=\"n\">hk</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 322026895,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674040580
    },
    {
        "content": "<p>I would do something like <code>let \\&lt;p, hp, h\\&gt; := hk in \\&lt;p, hp, h.trans x_div\\&gt;</code></p>",
        "id": 322027688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674040846
    },
    {
        "content": "<p>Hmm, seems to give some syntax error, <code>invalid constructor ⟨...⟩, 'tactic_state' is not an inductive type</code> and a lot of unknown identifiers. Here is the full code if you want to try (?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_prime_factor</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">p.prime</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">np</span> <span class=\"o\">:</span> <span class=\"n\">n.prime</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">np</span><span class=\"o\">,</span> <span class=\"n\">dvd_refl</span> <span class=\"n\">n</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.prime_def_lt</span> <span class=\"n\">at</span> <span class=\"n\">np</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">np</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">np</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_lt_k</span><span class=\"o\">,</span> <span class=\"n\">x_div_k</span><span class=\"o\">,</span> <span class=\"n\">x_ne_one</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">x_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">zero_dvd_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x_div_k</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">two_le_x</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">two_le</span> <span class=\"n\">x_ne_zero</span> <span class=\"n\">x_ne_one</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x.prime</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">x_div_k</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hk</span> <span class=\"n\">x</span> <span class=\"n\">x_lt_k</span> <span class=\"n\">two_le_x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hk</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p_prime</span><span class=\"o\">,</span> <span class=\"n\">p_div_x</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p_prime</span><span class=\"o\">,</span> <span class=\"n\">dvd_trans</span> <span class=\"n\">p_div_x</span> <span class=\"n\">x_div_k</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- works</span>\n    <span class=\"c1\">-- let ⟨p, hp, h⟩ := hk in ⟨p, hp, dvd_trans h x_div⟩,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 322029039,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674041333
    },
    {
        "content": "<p>The fastest way is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.exists_prime_and_dvd\">docs#nat.exists_prime_and_dvd</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 322033562,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674042800
    },
    {
        "content": "<p>that expression I gave was a term not a tactic, so you have to precede it by <code>exact</code> in tactic mode</p>",
        "id": 322034302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674043066
    },
    {
        "content": "<p>Oh! Now it works with <code>exact let ⟨p, hp, h⟩ := hk in ⟨p, hp, dvd_trans h x_div_k⟩</code>. That's super cool, I will learn more about it :D Thanks!</p>",
        "id": 322046433,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674046867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplest.20way.20to.20finish/near/322033562\">said</a>:</p>\n<blockquote>\n<p>The fastest way is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.exists_prime_and_dvd\">docs#nat.exists_prime_and_dvd</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>Hahaha I am following <a href=\"https://leanprover-community.github.io/mathematics_in_lean/05_Number_Theory.html\">https://leanprover-community.github.io/mathematics_in_lean/05_Number_Theory.html</a> tutorial, so trying not to use existing functions :)</p>",
        "id": 322046640,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674046930
    },
    {
        "content": "<p>Just so you know, in mathlib you'll often see that <code>let</code> line written instead as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">dvd_trans</span> <span class=\"n\">h</span> <span class=\"n\">x_div_k</span><span class=\"o\">⟩,</span>\n</code></pre></div>\n<p>(<code>obtain</code> is <code>rcases</code> but with the pattern coming first. I personally prefer it. It's a generalization of <code>have</code> as well.)</p>",
        "id": 322052377,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674048608
    },
    {
        "content": "<p>I see, I had a similar line with <code>rcases</code> instead of <code>obtain</code>.</p>",
        "id": 322053313,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674048894
    },
    {
        "content": "<p>Hi, hope it is okay to ask here another question. I am trying to finish off another proof, and I essentially have p | (n + 1) and p | n, which means I should get p | 1 by applying <code>nat.div_sub</code>. However, <code>linarith</code> fails to resolve. Can you help with how I should finish?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">primes_infinite</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- construct N = factorial(n) + 1</span>\n  <span class=\"c1\">-- then by contradiction prove !(p &lt;= n)</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">nat.factorial</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">two_le_N</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">nat.factorial_pos</span> <span class=\"n\">n</span><span class=\"o\">],</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">exists_prime_factor</span> <span class=\"n\">two_le_N</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p_prime</span><span class=\"o\">,</span> <span class=\"n\">p_div_N</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">p_gt_N</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">p_div_fact_n</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">nat.factorial</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nat.dvd_factorial</span> <span class=\"o\">(</span><span class=\"n\">nat.prime.pos</span> <span class=\"n\">p_prime</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"c1\">-- above, we have p | N in p_div_N and p | n.factorial in p_div_fact_N</span>\n    <span class=\"c1\">-- i want to prove p | 1, since N := n.factorial + 1</span>\n    <span class=\"c1\">-- but linarith failed to resolve</span>\n    <span class=\"k\">have</span> <span class=\"n\">p_div_1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">nat.dvd_sub</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">p_div_N</span> <span class=\"n\">p_div_fact_n</span><span class=\"o\">],</span> <span class=\"c1\">-- *here*</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>State at <em>here</em> looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">linarith</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">a</span> <span class=\"n\">contradiction</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n.factorial</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">p_div_N</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n<span class=\"n\">p_div_fact_n</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n.factorial</span><span class=\"o\">,</span>\n<span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">n.factorial</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 322056028,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674049643
    },
    {
        "content": "<p>you probably don't want <code>div_sub</code> here, but rather <code>div_add_iff</code></p>",
        "id": 322056231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674049691
    },
    {
        "content": "<p>this is also not really a job for linarith, there are no inequalities in the goal</p>",
        "id": 322056438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674049755
    },
    {
        "content": "<p>I can't seem to get <code>div_add_iff</code> to work <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span></p>",
        "id": 322063465,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674051545
    },
    {
        "content": "<p>I got <code>exact (nat.dvd_add_iff_right p_div_fact_n).2 p_div_N</code> to work! Or <code>exact (nat.dvd_add_right p_div_fact_n).1 p_div_N</code>. Thanks :)</p>",
        "id": 322064622,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674051833
    }
]