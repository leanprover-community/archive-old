[
    {
        "content": "<p>Suppose I have a context of the following form (not sure how to type the turnstile in Lean):</p>\n<div class=\"codehilite\"><pre><span></span>x := &lt;some_term&gt;\n|- &lt;some_goal_involving_x&gt;\n</pre></div>\n\n\n<p>How do I substitute the value of <code>x</code> into the goal (or hypotheses mentioning <code>x</code>)? <code>rw x</code> does not seem to work.</p>",
        "id": 189317888,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582902594
    },
    {
        "content": "<p>If you defined <code>x</code> using <code>let</code> then you might be able to write <code>change [what you want the goal to be]</code>. If you have defined it using <code>set x := blah using hx</code> then you can probably just <code>rw hx</code>.</p>",
        "id": 189323610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582906098
    },
    {
        "content": "<p>So would <code>set x := &lt;some_term&gt;</code> be a better option here?</p>",
        "id": 189323681,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582906143
    },
    {
        "content": "<p>PS turnstile is <code>\\|-</code>. If you copy and paste a turnstile into a Lean file and then hover over it then there's a high chance that it will tell you the keyboard shortcut.</p>",
        "id": 189323695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582906153
    },
    {
        "content": "<p>I always use <code>set</code> rather than <code>let</code> but then again I find <code>let</code> quite confusing and I always work in tactic mode.</p>",
        "id": 189323718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582906172
    },
    {
        "content": "<p>The <code>change</code> tactic changes a goal to a defeq goal</p>",
        "id": 189323746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582906192
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- works</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>So n is definitionally equal to 3 and so the change tactic works.</p>",
        "id": 189323866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582906266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Substitute.20away.20let.20binding.20in.20tactic.20mode/near/189323610\" title=\"#narrow/stream/113489-new-members/topic/Substitute.20away.20let.20binding.20in.20tactic.20mode/near/189323610\">said</a>:</p>\n<blockquote>\n<p>If you defined <code>x</code> using <code>let</code> then you might be able to write <code>change [what you want the goal to be]</code>. If you have defined it using <code>set x := blah using hx</code> then you can probably just <code>rw hx</code>.</p>\n</blockquote>\n<p>Thank you - <code>set x := &lt;some_term&gt; with hx</code> (and then <code>rw hx</code> later on) worked for me</p>",
        "id": 189324547,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582906742
    },
    {
        "content": "<p>Another way to rewrite a let definition <code>x</code> by its value is <code>dsimp [x]</code>.</p>",
        "id": 189328078,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582908997
    }
]