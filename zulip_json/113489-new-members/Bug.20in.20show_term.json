[
    {
        "content": "<p>There seems to be a bug in show_term: in the example</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">b</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">show_term</span><span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">,}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>show_term suggests <code>exact _.mpr x</code>, but lean doesn't seem to know what to do with the underscore, and gives the error <code>unknown identifier '_.mpr'</code>.</p>",
        "id": 208478585,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598783343
    },
    {
        "content": "<p><code>set_option pp.proofs true</code></p>",
        "id": 208478661,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598783438
    },
    {
        "content": "<p>(above the example)</p>",
        "id": 208478664,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598783451
    },
    {
        "content": "<p>Now show_term suggest <code>exact (id (eq.rec (eq.refl (fin b)) h)).mpr x</code>, but lean still doesn't like it:</p>\n<p><code>invalid 'eq.rec' application, elaborator has special support for this kind of application (it is handled as an \"eliminator\"), but expected type must not contain metavariables ?m_1</code></p>",
        "id": 208478839,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598783832
    },
    {
        "content": "<p><code>set_option pp.all true</code></p>",
        "id": 208478981,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598784079
    },
    {
        "content": "<p>There's a reason the <code>rw</code> tactic exists</p>",
        "id": 208478982,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598784090
    },
    {
        "content": "<p>Adding a bit more context, pretty printing is hard, and Lean doesn't promise that it round trips, even with <code>pp.all</code> (although that comes pretty close). Some tactics generate large proof terms, and so <code>show_term</code> is not always useful, and you may need to dance around a bit with <code>pp</code> options to even get parseable expressions.</p>",
        "id": 208484074,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598792163
    },
    {
        "content": "<p>In this case you can do <code> example (a b : ℕ) (h : b = a) (x : fin a) : fin b := h.symm.rec x</code> for a slick term <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 208488207,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1598798659
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">_</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 208488497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598799120
    },
    {
        "content": "<p>in any case, don't use tactics to define data</p>",
        "id": 208488802,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598799558
    },
    {
        "content": "<p>So in this example, would it be better (more in line with the lean style) to write <code>h.symm.rec x</code> as Alex suggests, or to use tactic mode?</p>",
        "id": 208492396,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598804834
    },
    {
        "content": "<p>In this example, you probably shouldn't define the function this way at all, but instead use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.cast\">docs#fin.cast</a></p>",
        "id": 208493599,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598806166
    },
    {
        "content": "<p>this has the advantage that <code>(fin.cast h x).val</code> reduces to <code>x.val</code>, while with the definitions discussed here, it would get stuck on the <code>eq.rec</code></p>",
        "id": 208493676,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598806250
    },
    {
        "content": "<p>basically avoid <code>eq.rec</code> at all cost</p>",
        "id": 208495270,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598808268
    },
    {
        "content": "<p>Thanks Reid, that makes sense. However, the example is a MWE, we actually want to use it in a slightly different case:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I couldn't find a list.cast or anything similar, so should I just use tactic mode here (even though I'm defining data)?</p>",
        "id": 208495453,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598808538
    },
    {
        "content": "<p>\"don't define data in tactic mode\" is a slogan exactly because it wants you to avoid <code>eq.rec</code>.</p>",
        "id": 208495532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598808617
    },
    {
        "content": "<p>And rewriting along type equalities seems pretty \"evil\"</p>",
        "id": 208495539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598808633
    },
    {
        "content": "<p><code>list.map (equiv.refl h)</code>?</p>",
        "id": 208495553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598808667
    },
    {
        "content": "<p>But probably <code>h</code> should itself be a function, or an equiv.</p>",
        "id": 208495569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598808700
    },
    {
        "content": "<p>Right, you probably shouldn't have an equality of types in the first place</p>",
        "id": 208495762,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598808924
    },
    {
        "content": "<p>Why not?</p>",
        "id": 208495834,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598809001
    },
    {
        "content": "<p>I just changed the type equality in the hypothesis to an equivalence, and now everything seems to work fine with <code>list.map</code>, thanks!</p>",
        "id": 208495838,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598809010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319356\">Pim Spelier</span> <a href=\"#narrow/stream/113489-new-members/topic/Bug.20in.20show_term/near/208495834\">said</a>:</p>\n<blockquote>\n<p>Why not?</p>\n</blockquote>\n<p>Because <code>unit \\times nat ≠ nat</code> but they certainly are equiv.</p>",
        "id": 208495866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598809052
    },
    {
        "content": "<p>because <code>nat = int</code> is unprovable in Lean, and one could imagine a refactoring of <code>int</code> where it is redefined to be a type alias for <code>nat</code> with an exotic addition and multiplication, and then it would be true.</p>",
        "id": 208496168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598809326
    },
    {
        "content": "<p>Ok, that makes sense! It's an isomorphism in the category of types, which makes way more sense than an equality.</p>",
        "id": 208496347,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598809562
    },
    {
        "content": "<p>One shouldn't talk about equality of objects in a category, because mathematicians only really care about categories up to equivalence a lot of the time so they like to randomly replace a category with an equivalent category, and this will not change isomorphism but it might change equality. Equality is hence some kind of unstable notion if you're thinking about categories in this way. If you think about the definition of an isomorphism of objects in <code>Type u</code> then you see it's exactly <code>equiv</code>.</p>",
        "id": 208496428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598809696
    },
    {
        "content": "<p>(With the added excitement that <code>equiv</code> can change universe levels, while isomorphisms can't.)</p>",
        "id": 208512849,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598836517
    }
]