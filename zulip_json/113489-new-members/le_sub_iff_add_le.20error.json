[
    {
        "content": "<p>I have following code, which gives an error on the last line:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">limit_start_irrelevant</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">Hε</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">Hε</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">Hn</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">le_sub_iff_add_le</span> <span class=\"n\">N</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"n\">at</span> <span class=\"n\">Hn</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Tactic state:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">le_sub_iff_add_le</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">-</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">↔</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_4</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">Hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">Hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</pre></div>\n\n\n<p>I can't seem to figure out what the problem is, subtracting naturals is fishy but lean seems to be complaining about something else.  Any help would be appreciated :)</p>",
        "id": 159148106,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550833603
    },
    {
        "content": "<p>you wrote <code>le_sub_iff_add_le N k n</code> but it takes no explicit arguments</p>",
        "id": 159148144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550833650
    },
    {
        "content": "<p>Right, without arguments I get this error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">_</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_5</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">Hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">Hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</pre></div>\n\n\n<p>Do I need to \"flip\" the inequality? I thought both sides were treated as equal.</p>",
        "id": 159148260,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550833794
    },
    {
        "content": "<p>try <code>erw</code></p>",
        "id": 159148427,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550833983
    },
    {
        "content": "<p>try <code>rw ge at Hn</code>?</p>",
        "id": 159148436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550833991
    },
    {
        "content": "<p>wait I know why</p>",
        "id": 159148445,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550834008
    },
    {
        "content": "<p>you're dealing with natural numbers.</p>",
        "id": 159148447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550834012
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 159148449,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550834016
    },
    {
        "content": "<p>There are similar theorems explicitly for <code>nat</code></p>",
        "id": 159148503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550834054
    },
    {
        "content": "<p>you can't use the general theorem</p>",
        "id": 159148504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550834061
    },
    {
        "content": "<p>but it still won't match the <code>le</code> with <code>ge</code> I guess</p>",
        "id": 159148509,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550834067
    },
    {
        "content": "<p>so you need to use <code>erw</code> or <code>replace Hn := _</code></p>",
        "id": 159148513,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550834076
    },
    {
        "content": "<p>I think you want <code>replace Hn := nat.le_sub_right_of_add_le Hn</code></p>",
        "id": 159148542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550834118
    },
    {
        "content": "<p>that worked. Thank you :)</p>",
        "id": 159148684,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550834286
    }
]