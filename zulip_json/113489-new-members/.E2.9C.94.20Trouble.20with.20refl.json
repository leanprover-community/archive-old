[
    {
        "content": "<p>Consider</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">gdR</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>      <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">gdR</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">gdR</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I can prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>  <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">gdR</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">gdR</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">gdR</span> <span class=\"n\">k</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gdR</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>      <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">gdR</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">gdR</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">gdR</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>refl doesn't work. Any ideas how to fix? I'm assuming the noncomputable is part of the problem.</p>",
        "id": 266893730,
        "sender_full_name": "Patrick Johnstone",
        "timestamp": 1641353099
    },
    {
        "content": "<p>In the first example, it also breaks if you define <code>gdR</code> as <code>noncomputable</code></p>",
        "id": 266894089,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641353557
    },
    {
        "content": "<p>True, so it is noncomputable which is the problem. Any idea how to fix if possible?</p>",
        "id": 266894190,
        "sender_full_name": "Patrick Johnstone",
        "timestamp": 1641353649
    },
    {
        "content": "<p><code>simp only [gdR]</code> or <code>rw gdR</code> can prove the second example, if that's what you mean by \"fixing\"</p>",
        "id": 266894201,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641353678
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 266894251,
        "sender_full_name": "Patrick Johnstone",
        "timestamp": 1641353760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"441939\">Patrick Johnstone</span> has marked this topic as resolved.</p>",
        "id": 266894295,
        "sender_full_name": "Notification Bot",
        "timestamp": 1641353782
    },
    {
        "content": "<p>I'd appreciate if someone could shed more light on why <code>noncomputable</code> prevents the goal from being closed with <code>refl</code> though <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 266894396,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641353953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"441939\">@Patrick Johnstone</span> Just to illuminate what's going on with <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>'s suggestion, this is what <code>#print prefix gdR</code> for your second example includes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">gdR.equations._eqn_1</span> <span class=\"o\">:</span> <span class=\"n\">gdR</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">gdR.equations._eqn_2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">gdR</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">gdR</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>These are the so-called \"equation lemmas\". What <code>simp only [gdR]</code> is short for is <code>simp only [gdR.equations._eqn_1, gdR.equations._eqn_2]</code>.</p>",
        "id": 266894398,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641353955
    },
    {
        "content": "<p>If you do <code>dsimp only [gdR]</code> instead, it makes sure to only use definitional equalities, and the goal becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">gdR</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">gdR</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>Strangely, <code>refl</code> closes this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">gdR</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">gdR</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">gdR</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266894509,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641354074
    },
    {
        "content": "<p>There's nothing hidden there with that goal; <code>set_option pp.all true</code> shows this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_div.div.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">div_inv_monoid.to_has_div.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_div_inv_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.field</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">gdR</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.has_one</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_div.div.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">div_inv_monoid.to_has_div.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_div_inv_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.field</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">gdR</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.has_one</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>Both sides look the same to me.</p>",
        "id": 266894727,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641354316
    },
    {
        "content": "<p>The only hint as to what's going on that I can see is that it's susceptible to the <code>cases</code> trick to unstick reduction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">gdR</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">gdR</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(So, <span class=\"user-mention\" data-user-id=\"441939\">@Patrick Johnstone</span>, the <code>noncomputable</code> is likely not the problem. As far as I know, <code>noncomputable</code> doesn't affect <code>refl</code>.)</p>",
        "id": 266894840,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641354447
    },
    {
        "content": "<p>This is odd, the proof generated by <code>dsimp only [gdR], refl</code> is not accepted, even when doing <code>set_option pp.all true</code> before printing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">gdR</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">gdR</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"o\">(</span><span class=\"n\">gdR</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  id (eq.refl (gdR k / 2))</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  eq.refl (gdR k / 2)</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  gdR k / 2 = gdR k / 2</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  gdR (k + 1) = gdR k / 2</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"n\">gdR</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_div.div.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">div_inv_monoid.to_has_div.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_div_inv_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.field</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">gdR</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.has_one</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n  <span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"n\">gdR</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_div.div.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">div_inv_monoid.to_has_div.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_div_inv_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.field</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"n\">gdR</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.has_one</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq.refl.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_div.div.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">div_inv_monoid.to_has_div.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_div_inv_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.field</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"n\">gdR</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.has_one</span><span class=\"o\">))))</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">same error</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 266895382,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641355189
    },
    {
        "content": "<p>Is this some kind of mismatch between the elaborator and the kernel?</p>",
        "id": 266895466,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641355215
    },
    {
        "content": "<p>Some more digging with simpler functions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">g</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 266936362,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641390072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> This might have something to do with a feature I've just learned about called smart unfolding. <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/type_context.h#L427\">https://github.com/leanprover-community/lean/blob/master/src/library/type_context.h#L427</a></p>\n<p>The difference between whether they work or not seems to be whether they have a reasonable <code>._sunfold</code> definition. Maybe <code>noncomputable</code> <em>does</em> end up being the culprit, somehow causing the equation compiler to not generate an appropriate <code>._sunfold</code> for recursive definitions. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">g._sunfold</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def g._sunfold : ℕ → ℕ :=</span>\n<span class=\"cm\">λ (ᾰ : ℕ),</span>\n<span class=\"cm\">  ᾰ.brec_on</span>\n<span class=\"cm\">    (λ (ᾰ : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ) ᾰ),</span>\n<span class=\"cm\">       (λ (ᾰ : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ) ᾰ),</span>\n<span class=\"cm\">          ᾰ.cases_on (λ (_F : nat.below (λ (ᾰ : ℕ), ℕ) 0), id_rhs ℕ 0)</span>\n<span class=\"cm\">            (λ (ᾰ : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ) ᾰ.succ),</span>\n<span class=\"cm\">               id_rhs ((λ (ᾰ : ℕ), ℕ) (ᾰ.add 0)) _F.fst.fst)</span>\n<span class=\"cm\">            _F)</span>\n<span class=\"cm\">         ᾰ</span>\n<span class=\"cm\">         _F)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">h._sunfold</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">λ (ᾰ : ℕ), ᾰ.cases_on (id_rhs ℕ 0) (λ (ᾰ : ℕ), id_rhs ℕ ᾰ)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">g'</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">g'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- works</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">g'._sunfold</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def g'._sunfold : ℕ → ℕ :=</span>\n<span class=\"cm\">λ (ᾰ : ℕ), ᾰ.cases_on (id_rhs ℕ 0) (λ (ᾰ : ℕ), id_rhs ℕ (g' ᾰ))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 267004383,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641423807
    },
    {
        "content": "<p>The two levels of recursors in <code>g._sunfold</code> seems like it could explain why <code>cases</code> helps <code>refl</code> go through:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 267004583,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641423920
    },
    {
        "content": "<p>I see, thanks for the explanation!</p>",
        "id": 267009291,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641427082
    }
]