[
    {
        "content": "<p>is there a way to use the <code>exact</code> tactic with the parallel tactic combinator:</p>\n<p>works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>fails:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>with:</p>\n<div class=\"codehilite\"><pre><span></span>equation compiler failed to create auxiliary declaration &#39;_example._match_1&#39;\nnested exception message:\ninvalid object declaration, environment already has an object named &#39;_example._match_1&#39;\n</pre></div>",
        "id": 133876440,
        "sender_full_name": "Olli",
        "timestamp": 1536836725
    },
    {
        "content": "<p>does <code>rintro</code> work?</p>",
        "id": 133886990,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536847780
    },
    {
        "content": "<p>This also works,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133901349,
        "sender_full_name": "Ali Sever",
        "timestamp": 1536861032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> This seems to be indicative of a very strange dependency between parsing and creating definitions. Does this still behave the same way in lean 4?</p>",
        "id": 133901899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536861584
    },
    {
        "content": "<p>Oh wow, this is stranger than I thought.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">mytac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tgt</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">exact</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">twice</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">tac</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">tac</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"c1\">-- doesn&#39;t work</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">twice</span> <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"o\">{</span>\n    <span class=\"n\">tgt</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n    <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">exact</span>\n  <span class=\"o\">})</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">do</span> <span class=\"o\">{</span>\n    <span class=\"n\">tgt</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n    <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">exact</span><span class=\"o\">,</span>\n    <span class=\"n\">tgt</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n    <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">exact</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">twice</span> <span class=\"n\">mytac</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>My new theory is that it has something to do with the way a tactic is elaborated when it contains a subexpression with side effects like this</p>",
        "id": 133903258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536862721
    },
    {
        "content": "<p>Yeah, <code>to_expr</code> is creating a new elaborator. This is horrible, haha</p>",
        "id": 133912590,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536871774
    },
    {
        "content": "<p>Well, I guess it could just skip auxiliary names that have already been taken</p>",
        "id": 133912887,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536872110
    }
]