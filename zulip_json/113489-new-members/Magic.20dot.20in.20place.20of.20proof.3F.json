[
    {
        "content": "<p>Looking through the standard library, I see this in <code>basic.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">not_succ_le_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">.</span>\n</pre></div>\n\n\n<p>What's the magic dot on the second line? Is this syntactic sugar for a particular tactic or set of tactics?</p>\n<p>Source : <a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/nat/basic.lean#L84-L85\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/nat/basic.lean#L84-L85\">https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/nat/basic.lean#L84-L85</a></p>",
        "id": 146826913,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1541454617
    },
    {
        "content": "<p>no, it just says \"this is the end of the definition\", and causes lean to realise that there are no cases to prove!</p>",
        "id": 146826965,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541454688
    },
    {
        "content": "<p>magic. :-)</p>",
        "id": 146826976,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541454697
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/113489-new-members/topic/what.20does.20.2E.20mean.20here.3F\" title=\"#narrow/stream/113489-new-members/topic/what.20does.20.2E.20mean.20here.3F\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/what.20does.20.2E.20mean.20here.3F</a></p>",
        "id": 146827317,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541455011
    },
    {
        "content": "<p>Ah, thank you! I did try searching the archives, but it's not easy to figure out how to search for a single period.</p>",
        "id": 146827412,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1541455113
    },
    {
        "content": "<p>I searched for the name of this lemma, because I was pretty sure it was already discussed</p>",
        "id": 146827436,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541455151
    },
    {
        "content": "<p>Yep, I should have thought to use <code>not_succ_le_zero</code> as a search term ..</p>",
        "id": 146827446,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1541455163
    },
    {
        "content": "<p>And there are very few opportunities to use this trick</p>",
        "id": 146827451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541455166
    },
    {
        "content": "<p>No problem</p>",
        "id": 146827459,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541455178
    },
    {
        "content": "<p>I've sometimes found it useful when rewriting a proof,  e.g. instead of temporarily commenting out the rest of a proof, I just insert a <code>.</code>.</p>",
        "id": 146832913,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1541461025
    },
    {
        "content": "<p>I usually insert a <code>#exit</code></p>",
        "id": 146833077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541461204
    }
]