[
    {
        "content": "<p>The <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#the-existential-quantifier\">text</a> gives this example of using <code>let</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I am trying to adapt this to tactic mode.   This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">⟩),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>However, this does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">⟩),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"k\">match</span><span class=\"bp\">/</span><span class=\"n\">convoy</span> <span class=\"n\">expression</span><span class=\"o\">,</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">known</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>My prior experience has been that this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is equivalent to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Why does the equivalence not hold in the above case?</p>",
        "id": 218038166,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606424597
    },
    {
        "content": "<p>Looking at your tactic state, i think you just need to switch </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">⟩),</span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">⟩),</span>\n</code></pre></div>",
        "id": 218038402,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606424779
    },
    {
        "content": "<p>i.e. right now p and q don't match up exactly with the goal, they are swapped</p>",
        "id": 218038473,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606424844
    },
    {
        "content": "<p>The error message sort of tells you the reason. If your goal is <code>foo</code> and you write <code>exact bar</code>, then Lean knows that <code>bar</code> is supposed to have type <code>foo</code> and it can use this to make sense of <code>bar</code>. If you write <code>have h := bar</code>, then Lean doesn't know what you are intending to do with <code>h</code> and it has to make sense of <code>bar</code> in isolation, and usually this is harder.</p>",
        "id": 218038545,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606424885
    },
    {
        "content": "<p>If you write <code>have h : foo := bar</code> then Lean has the same information again.</p>",
        "id": 218038562,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606424916
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">⟩),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218038803,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606425169
    },
    {
        "content": "<p>This is a very unnatural way to write the proof of course</p>",
        "id": 218039144,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606425504
    },
    {
        "content": "<p>The (mathlib) tactic equivalent to <code>let</code> with a pattern is <code>obtain</code></p>",
        "id": 218039162,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606425528
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218039246,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606425608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> if I try to use <code>obtain ⟨w, hpw, hqw⟩ := h</code> to unpack <code>h : ∃ (x : α), p x ∧ r</code> where the current goal state is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">27</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">goal</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>in this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">pxr</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">px</span> <span class=\"o\">:=</span> <span class=\"n\">pxr.left</span><span class=\"o\">,</span>\n      <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"c1\">-- two open goals at this point</span>\n      <span class=\"n\">exact</span> <span class=\"n\">px</span><span class=\"o\">,</span> <span class=\"c1\">-- no goals here</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>a lot of errors result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Display</span> <span class=\"n\">GoalDisplay</span> <span class=\"n\">Messages</span>\n<span class=\"mi\">27</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">obtain'</span>\n<span class=\"mi\">27</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'w'</span>\n<span class=\"mi\">27</span><span class=\"o\">:</span><span class=\"mi\">15</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">hpw'</span>\n<span class=\"mi\">27</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">hqw'</span>\n<span class=\"mi\">27</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"kd\">begin</span><span class=\"bp\">-</span><span class=\"kd\">end</span><span class=\"bp\">'</span> <span class=\"n\">expression</span><span class=\"o\">,</span> <span class=\"sc\">','</span> <span class=\"n\">expected</span>\n<span class=\"mi\">27</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 218040171,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606426719
    },
    {
        "content": "<p>Yes, it's in mathlib</p>",
        "id": 218040185,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606426747
    },
    {
        "content": "<p>I see <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/rcases.html#tactic.interactive.obtain\">tactic.interactive.obtain </a>  but I get the same error even if I open it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">pxr</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">px</span> <span class=\"o\">:=</span> <span class=\"n\">pxr.left</span><span class=\"o\">,</span>\n      <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"c1\">-- two open goals at this point</span>\n      <span class=\"n\">exact</span> <span class=\"n\">px</span><span class=\"o\">,</span> <span class=\"c1\">-- no goals here</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>If I try to use the full name of <code>obtain</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">pxr</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">px</span> <span class=\"o\">:=</span> <span class=\"n\">pxr.left</span><span class=\"o\">,</span>\n      <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"c1\">-- two open goals at this point</span>\n      <span class=\"n\">exact</span> <span class=\"n\">px</span><span class=\"o\">,</span> <span class=\"c1\">-- no goals here</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">tactic.interactive.obtain</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hpw</span><span class=\"o\">,</span> <span class=\"n\">hqw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>then I get this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Display</span> <span class=\"n\">GoalDisplay</span> <span class=\"n\">Messages</span>\n<span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'w'</span>\n<span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"mi\">34</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">hpw'</span>\n<span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"mi\">39</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">hqw'</span>\n<span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"mi\">44</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"kd\">begin</span><span class=\"bp\">-</span><span class=\"kd\">end</span><span class=\"bp\">'</span> <span class=\"n\">expression</span><span class=\"o\">,</span> <span class=\"sc\">','</span> <span class=\"n\">expected</span>\n<span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">tactic.interactive'</span>\n<span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"bp\">⁇</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n<span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 218040366,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606426951
    },
    {
        "content": "<p>You need to import it, not open it</p>",
        "id": 218040388,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606426985
    },
    {
        "content": "<p>Er, import some module which exports it (basically all of mathlib)</p>",
        "id": 218040400,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606427005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> , switching <code>import</code> for <code>open</code> didn't obtain <code>obtain</code>.   It's OK, I did it without it.  It turns out I can instantiate an existential with <code>cases</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">pxr</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">px</span> <span class=\"o\">:=</span> <span class=\"n\">pxr.left</span><span class=\"o\">,</span>\n      <span class=\"n\">constructor</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">pxr</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">pxr.right</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hpxr</span> <span class=\"o\">:=</span> <span class=\"n\">and.intro</span> <span class=\"n\">px</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hpxr</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218044627,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606432635
    },
    {
        "content": "<p><code>import tactic.basic</code></p>",
        "id": 218046478,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606435282
    }
]