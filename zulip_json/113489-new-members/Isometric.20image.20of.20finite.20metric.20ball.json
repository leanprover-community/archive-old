[
    {
        "content": "<p>Hey! I'm trying to prove that in a transitive metric space, balls have the same cardinality (assuming finite, in my case).<br>\nI reckon there should be a very quick way to do this: an isometry restricts to a bijection on balls, which implies equal cardinalities, but I'm not sure how to use what: <code>fintype,finset,injective, maps_to, etc</code>.<br>\nHow should I proceed here ? And also, is <code>fintype</code> better suited than <code>finset</code> here? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.isometry</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"n\">set</span> <span class=\"n\">fintype</span> <span class=\"n\">function</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">pseudo_metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[class]</span> <span class=\"kd\">structure</span> <span class=\"n\">finite_balls</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fintype_ball</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">finite_balls.fintype_ball</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">uniformly_finite_balls_with</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">finite_balls</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>  <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"n\">r</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">uniformly_finite_balls_with</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">of_transitive</span>\n  <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">finite_balls</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃ᵢ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">uniformly_finite_balls_with</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">card</span> <span class=\"bp\">$</span> <span class=\"n\">metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">tr</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"bp\">ᵢ</span><span class=\"o\">,</span><span class=\"n\">fxy</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">fxy</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">isometric.image_ball</span> <span class=\"n\">f</span><span class=\"bp\">ᵢ</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"c1\">-- doesn't work</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">uniformly_finite_balls_with</span>\n</code></pre></div>",
        "id": 274295884,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646559122
    },
    {
        "content": "<p><code>finset.card_image_of_injective</code> ?</p>",
        "id": 274296377,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646559940
    },
    {
        "content": "<p>Does that mean I should change my defs to use <code>finset</code>, or is it fine as it is?</p>",
        "id": 274296672,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646560429
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">of_transitive</span>\n  <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">finite_balls</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃ᵢ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">uniformly_finite_balls_with</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"n\">use</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">tr</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"bp\">ᵢ</span><span class=\"o\">,</span><span class=\"n\">fxy</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">fxy</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Bxrfintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">Byrfintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">y</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">lol1</span> <span class=\"o\">:=</span> <span class=\"n\">isometric.image_ball</span> <span class=\"n\">f</span><span class=\"bp\">ᵢ</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">-</span>\n  <span class=\"k\">have</span> <span class=\"n\">imgffintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">f</span><span class=\"bp\">ᵢ</span> <span class=\"bp\">''</span> <span class=\"n\">metric.ball</span> <span class=\"n\">x</span> <span class=\"bp\">↑</span><span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">lol3</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">lol4</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">card_image_of_injective</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">Bxrfintype</span> <span class=\"n\">f</span><span class=\"bp\">ᵢ</span> <span class=\"n\">imgffintype</span> <span class=\"o\">(</span><span class=\"n\">isometric.injective</span> <span class=\"n\">f</span><span class=\"bp\">ᵢ</span><span class=\"o\">),</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">lol1</span> <span class=\"n\">at</span> <span class=\"n\">lol4</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lol4</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lol3</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I think that's a contender for ugliest non-working code. After some search on zulip, it seems part of the problem is that the elaborator doesn't handle the <code>fintype</code> instances in the way I'd like it to.</p>",
        "id": 274309169,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646577571
    },
    {
        "content": "<p>Those <code>have</code> should be <code>haveI</code></p>",
        "id": 274309757,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646578348
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">of_transitive</span>\n  <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fb</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">finite_balls</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃ᵢ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">uniformly_finite_balls_with</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"n\">use</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">tr</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"bp\">ᵢ</span><span class=\"o\">,</span><span class=\"n\">fxy</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">fxy</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Bxrfintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">Byrfintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">y</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">imgisball</span><span class=\"o\">:=</span> <span class=\"n\">isometric.image_ball</span> <span class=\"n\">f</span><span class=\"bp\">ᵢ</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">imgffintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">f</span><span class=\"bp\">ᵢ</span> <span class=\"bp\">''</span> <span class=\"n\">metric.ball</span> <span class=\"n\">x</span> <span class=\"bp\">↑</span><span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">set.fintype_image</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"bp\">ᵢ</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">card_image_of_injective</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"bp\">ᵢ</span> <span class=\"n\">imgffintype</span> <span class=\"o\">(</span><span class=\"n\">isometric.injective</span> <span class=\"n\">f</span><span class=\"bp\">ᵢ</span><span class=\"o\">),</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">imgisball</span><span class=\"o\">,</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 274309849,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646578485
    },
    {
        "content": "<p>OK, only two sorries, which I feel should come for free?</p>",
        "id": 274309863,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646578502
    },
    {
        "content": "<p>oh, thanks, <code>haveI</code> looks to be part of what I was missing!</p>",
        "id": 274309883,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646578553
    },
    {
        "content": "<p>ah, I'm getting there, let me see</p>",
        "id": 274310051,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646578733
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">of_transitive</span>\n  <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fb</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">finite_balls</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃ᵢ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">uniformly_finite_balls_with</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"n\">use</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">tr</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"bp\">ᵢ</span><span class=\"o\">,</span><span class=\"n\">fxy</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">fxy</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">imgisball</span> <span class=\"o\">:=</span> <span class=\"n\">isometric.image_ball</span> <span class=\"n\">f</span><span class=\"bp\">ᵢ</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">imgcard</span>   <span class=\"o\">:=</span> <span class=\"n\">card_image_of_injective</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">isometric.injective</span> <span class=\"n\">f</span><span class=\"bp\">ᵢ</span><span class=\"o\">),</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">imgisball</span><span class=\"o\">,</span><span class=\"n\">imgcard</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I believe that's close enough! Thanks for the help!</p>",
        "id": 274310332,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646578981
    },
    {
        "content": "<p>And by the way, it seems that lean doesn't accept unfolding definitions when they are not made properly as a <code>def</code>.<br>\nSay in the code above, I can't <code>unfold k</code>. What's the reason for this?</p>",
        "id": 274310404,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646579052
    },
    {
        "content": "<p>The mathlib way would probably be to split this into several lemmas:</p>\n<ul>\n<li>if there is an isometric equivalence between two spaces, mapping <code>x</code> to <code>y</code>, then the cardinality (in the sense of cardinal numbers) of <code>ball x r</code> and <code>ball y r</code> are the same.</li>\n<li>If additionally <code>ball x r</code> is finite, then <code>ball y r</code> is also finite</li>\n<li>and their cardinalities as finite sets are the same</li>\n</ul>",
        "id": 274310779,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1646579532
    }
]