[
    {
        "content": "<p>Hi! I am trying to simplify a goal: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">y</span>\n</code></pre></div>\n\n\n<p>so I made a have statement</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>and the proof consisted of  <code>rfl</code></p>\n<p>but afterwards, in the tactic state I see this,  </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">y</span>\n</code></pre></div>\n\n\n<p>and so my add statement is not helpful. Why is the goal state not recognizing that I casted then added in LHS and added then casted in RHS?</p>",
        "id": 204972403,
        "sender_full_name": "Rose Lopez",
        "timestamp": 1595629068
    },
    {
        "content": "<p>If you're using mathlib and you have <code>import tactic</code> at the top of your file, then <code>norm_cast</code> might solve this goal for you.</p>",
        "id": 204972512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595629197
    },
    {
        "content": "<p>The answer to your cast question is that Lean casts x and y on the left hand side, and then it looks at the right hand side and says \"OK so it says <code>add x y</code> and I read from left to right, and this is supposed to be an element of <code>zmod n</code> so <code>add</code> must be addition in <code>zmod n</code>, so the elements must be in <code>zmod n</code>, oh gosh they aren't, I'd better cast them.</p>",
        "id": 204972625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595629275
    },
    {
        "content": "<p>You have to change the right hand side to `((x + y : int) : zmod n) (or whatever the type of x and y actually are, to ensure the right kind of addition is done)</p>",
        "id": 204972698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595629330
    }
]