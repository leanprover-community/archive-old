[
    {
        "content": "<p>Probably a very basic type theory question, but what is the purpose of the predicativity of <code>Type</code>? What would break if<br>\n<code>Π α : Type, α</code>were of type <code>Type</code> instead of <code>Type 1</code>? And what among the features distinguishing <code>Prop</code> from <code>Type</code> make <code>Prop</code> admissible as an impredicative sort?</p>",
        "id": 239251081,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1621343683
    },
    {
        "content": "<p>If Pi a : Type, a were of type Type then you will get the same kind of contradiction as Russell's paradox, where you allow the collection of all sets to be a set. I think it's called Girard's paradox in type theory. Prop is impredicative because Leo designed it that way, I'm not sure I really understand the second question.</p>",
        "id": 239251823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621343991
    },
    {
        "content": "<p>Oh I see -- you're asking \"how come forall a : Prop, a is allowed to be a Prop\"?</p>",
        "id": 239252082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621344076
    },
    {
        "content": "<p>Yes, that's right</p>",
        "id": 239252141,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1621344099
    },
    {
        "content": "<p>You could look at <a href=\"https://leanprover-community.github.io/mathlib_docs/logic/girard.html\">https://leanprover-community.github.io/mathlib_docs/logic/girard.html</a> and then change all the <code>Type u</code> to Prop and see what breaks.</p>",
        "id": 239252308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621344151
    },
    {
        "content": "<p>And why is it not contradictory if with <code>Type</code> it is. It seems like the same situation</p>",
        "id": 239252312,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1621344152
    },
    {
        "content": "<p>OK so with the set theoretic version you construct a problematic set -- the set of all sets which don't contain themselves -- and then you make a contradiction from that. The key thing is that the contradiction involves constructing data, which doesn't live in the Prop universe.</p>\n<p>If you just stick to <code>Type</code> then the Girard contradiction involves</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"n\">U</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">pi</span> <span class=\"n\">F</span>\n</code></pre></div>\n<p>If you try this with <code>X : Prop</code> then Lean chokes at <code>set X</code>.</p>",
        "id": 239253518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621344593
    },
    {
        "content": "<p>As I understand it, <code>Type : Type</code>is contradictory because <code>Type</code> is too big, e.g. it should have strictly more elements than any <code>A : Type</code>. Similarly whenever you construct some type by referring to all <code>A : Type</code>, there is a risk that the result is too big, so can't be in <code>Type</code>. (Actually <code>Π α : Type, α</code> is not too big, since it's empty.) This is <em>not</em> true when you construct a <code>Prop</code> by referring to all <code>A : Type</code>: the resulting prop can only have one element, so classically it's <code>true</code> or <code>false</code>. So you shouldn't expect an impredicative <code>Prop</code> to be contradictory.</p>",
        "id": 239253582,
        "sender_full_name": "David Wärn",
        "timestamp": 1621344605
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(((</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"c1\">-- Prop → Type</span>\n<span class=\"k\">#check</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"o\">(((</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"c1\">-- Type → Type</span>\n<span class=\"k\">#check</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"o\">(((</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"c1\">-- Type u → Type u</span>\n</code></pre></div>\n<p>So here explicitly is where the Girard proof breaks. I've replaced <code>set X</code> with <code>X -&gt; Prop</code>. The trick doesn't work with Prop as the target is data.</p>",
        "id": 239254168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621344815
    },
    {
        "content": "<p>Of course the _proof_ that an impredicative Prop isn't contradictory is that Lean's type theory is equiconsistent with ZFC + universes!</p>",
        "id": 239254323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621344857
    },
    {
        "content": "<p>Thank you both for the great clarifications!</p>",
        "id": 239257822,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1621346254
    }
]