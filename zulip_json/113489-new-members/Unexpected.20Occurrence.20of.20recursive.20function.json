[
    {
        "content": "<p>I'm trying to define a map function over the <code>fin n -&gt; U</code> type so that I can use them as if they were vectors. When attempting to map a function recursively I get an error but simply inlining the map works. Why does this happen?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finvec</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finvec.map</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">finvec</span> <span class=\"n\">U</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finvec</span> <span class=\"n\">V</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- short example case of error</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">tree</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">finvec</span> <span class=\"n\">tree</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span>\n\n<span class=\"c1\">-- Causes \"unexpected occurence of recursive function\" error</span>\n<span class=\"kd\">def</span> <span class=\"n\">replaceInTreeBad</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.leaf</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tree.leaf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.node</span> <span class=\"n\">subtrees</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tree.node</span> <span class=\"o\">(</span><span class=\"n\">finvec.map</span> <span class=\"n\">replaceInTreeBad</span> <span class=\"n\">subtrees</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Works fine</span>\n<span class=\"kd\">def</span> <span class=\"n\">replaceInTreeGood</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.leaf</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tree.leaf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.node</span> <span class=\"n\">subtrees</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tree.node</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">replaceInTreeGood</span> <span class=\"o\">(</span><span class=\"n\">subtrees</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 239748087,
        "sender_full_name": "Alex Reynaldi",
        "timestamp": 1621602911
    },
    {
        "content": "<p>If you replace <code>finvec.map replaceInTreeBad</code> with <code>finvec.map (λ i, replaceInTreeBad i)</code> then you get a different error</p>",
        "id": 239757548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621606522
    }
]