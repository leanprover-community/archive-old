[
    {
        "content": "<p>I'm attempting to prove <code>one_mul</code> to show that my type of interest is a monoid, and though the goal involves multiplication, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>when I try to multiply two elements of <code>M</code>, Lean cannot deduce that the type <code>M</code> satisfies <code>has_mul</code>. Here is my <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.category.Mon</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">M_is_monoid</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">M</span>\n<span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">my_goal</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n      <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">my_goal</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>How can I prove an equality like <code>a = 1 * a</code> with out using <code>*</code>? Alternatively, how do I get Lean to realize that <code>*</code> means apply the <code>mul</code> function I gave it earlier?</p>",
        "id": 290932758,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1658858461
    },
    {
        "content": "<p>^^ I've noticed I'm missing an <code>eq.symm</code>, but including it doesn't fix the issue.</p>",
        "id": 290934045,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1658859010
    },
    {
        "content": "<p>One easy way out is to define <code>has_mul</code> first separately</p>",
        "id": 290940082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658861825
    },
    {
        "content": "<p>this one is really throwing me through a loop because it's giving me an error even if <code>has_mul</code> and <code>has_one</code> are defined...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.category.Mon</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M_has_mul</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">M_has_one</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M_is_monoid</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M_has_mul</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">my_goal</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n      <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">my_goal</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">M_has_mul</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">M_has_one</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 290975057,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1658883801
    },
    {
        "content": "<p>The <code>have</code> is harmful there</p>",
        "id": 290975767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658884437
    },
    {
        "content": "<p>You should use <code>letI</code> instead</p>",
        "id": 290975815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658884464
    },
    {
        "content": "<p>Although this looks possibly overly minimized; are you really trying to show every type is a monoid?</p>",
        "id": 290975856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658884518
    },
    {
        "content": "<p>I was able to get <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> 's suggestion to work by using the <code>instance</code> instead of <code>def</code>.</p>",
        "id": 290976115,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1658884727
    },
    {
        "content": "<p>It doesn't feel great to have the extra boilerplate, but idk what else to do.</p>",
        "id": 290976161,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1658884755
    },
    {
        "content": "<p>And no, this was a toy <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> extracted from another situation where the statement I'm trying to prove is actually true.</p>",
        "id": 290976192,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1658884799
    },
    {
        "content": "<p>Can you adjust your mwe to use <code>def M : Type := sorry</code> instead?</p>",
        "id": 290976376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658884944
    },
    {
        "content": "<p>Because using a <code>variable</code> is weird enough that you need lots of workarounds that wouldn't be needed by the original code</p>",
        "id": 290976406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658884979
    }
]