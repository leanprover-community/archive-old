[
    {
        "content": "<p>I sometimes but not always get errors like<br>\ninf.lean:153:0: error<br>\n(deterministic) timeout</p>\n<p>The line is always the start of a new lemma.   #check commands<br>\nshow that the previous lemmas were indeed proved and the <br>\nnext lemma was indeed proved.   Should I worry about this error?<br>\nWhat causes it?</p>",
        "id": 201069297,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592339072
    },
    {
        "content": "<p>Something tried to run for too long and Lean gave up on that particular lemma.</p>",
        "id": 201070523,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592339694
    },
    {
        "content": "<p>Well, but it didn't give up because all the lemmas are actually proved.</p>",
        "id": 201070714,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592339804
    },
    {
        "content": "<p>You said the previous and next lemmas were proved, not the current lemma.</p>",
        "id": 201070766,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592339840
    },
    {
        "content": "<p>But also <code>#check</code> won't complain if the lemma wasn't actually proved. Basically it's as though you wrote <code>lemma ... := sorry</code>, I think.</p>",
        "id": 201070876,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592339896
    },
    {
        "content": "<p>All the lemmas in the whole file are correctly proved.   The error mentions a line number that is the <br>\nfirst line of one lemma.  By previous and next I meant,  the one preceding that line, and the one starting  on that line.</p>",
        "id": 201070880,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592339900
    },
    {
        "content": "<p>Oh!  That is very important thing to know!</p>",
        "id": 201070915,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592339922
    },
    {
        "content": "<p>If you see any error, like this one, it means your file was not accepted.</p>",
        "id": 201070953,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592339953
    },
    {
        "content": "<p>You can also use <code>#print axioms lemma_name</code> to test this.</p>",
        "id": 201070975,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592339967
    },
    {
        "content": "<p>As a technical note, Lean checks proofs of lemmas in parallel, with the lemma statement added to the environment immediately on the main task--so when Lean gets to <code>#check</code>, it doesn't necessarily even know yet whether or not the lemma contained an error. But mainly, it would be quite annoying if an error in one lemma prevented any future use of that lemma (imagine you update mathlib and it changes the name of something you use in one place--you want to get one error and not have that cause zillions of downstream errors).</p>",
        "id": 201073486,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592341288
    },
    {
        "content": "<p>In the tactic state shown below,  if I do  exact h201.right  I get (after a wait)  \"deterministic time out\".   The file does compile OK.<br>\nAlso the whole project has slowed to a crawl even after compiling and restarting VScode.   (On my laptop--I think it's still running OK on my desktop).  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h201</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">FINITE</span> <span class=\"n\">M</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">FINITE</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">similar</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">USC</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SSC</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">similar</span> <span class=\"n\">M</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">SSC</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">similar</span> <span class=\"n\">M</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">USC</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">⊆</span> <span class=\"n\">union</span> <span class=\"o\">(</span><span class=\"n\">SSC</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">FINITE</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">similar</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">USC</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SSC</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">similar</span> <span class=\"n\">M</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">SSC</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">similar</span> <span class=\"n\">M</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">USC</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">⊆</span> <span class=\"n\">union</span> <span class=\"o\">(</span><span class=\"n\">SSC</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>And it also times out after </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"n\">cases</span> <span class=\"n\">h201</span> <span class=\"k\">with</span> <span class=\"n\">h202</span> <span class=\"n\">h203</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h203</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>although just before the exact,  you see that h203 is exactly the goal.</p>",
        "id": 216049920,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604906500
    },
    {
        "content": "<p>Can you try and extract a #MWE ? The following doesn't time out, so there must be something going on in code that you haven't shared:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_subset</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">FINITE</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">similar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">USC</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SSC</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">union</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h201</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">FINITE</span> <span class=\"n\">M</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">FINITE</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">similar</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">USC</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SSC</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">similar</span> <span class=\"n\">M</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">SSC</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">similar</span> <span class=\"n\">M</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">USC</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">⊆</span> <span class=\"n\">union</span> <span class=\"o\">(</span><span class=\"n\">SSC</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">FINITE</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">similar</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">USC</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SSC</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">similar</span> <span class=\"n\">M</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">SSC</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">similar</span> <span class=\"n\">M</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">USC</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">⊆</span> <span class=\"n\">union</span> <span class=\"o\">(</span><span class=\"n\">SSC</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h201.right</span>\n</code></pre></div>",
        "id": 216050833,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604907587
    },
    {
        "content": "<p>What happens if you try <code>convert h203</code> instead of <code>exact h203</code>?</p>",
        "id": 216050858,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1604907603
    },
    {
        "content": "<p>convert also produces a timeout.    I thought perhaps this proof is \"too long\"  so I extracted two long parts as separate lemmas.<br>\nOne of those lemmas now times out.  (In a different place than the original proof).   The project does build,  but it takes a long time compiling<br>\nthat proof.    Can I just ignore that timeout in interactive mode and rely on the compiled file?   But even if I can I don't like it.  <br>\nPerhaps I made too many calls to \"ifinish\"  in that proof?    This does happen both on laptop and desktop by the way.</p>\n<p>I can't think how to make a MWE  as this project has ten files each with a couple thousand lines of proofs,  and this one <br>\nis in the ninth file and God knows what all it depends on.</p>",
        "id": 216052365,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604909124
    },
    {
        "content": "<p>it sounds like you might benefit from some code review</p>",
        "id": 216052524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604909252
    },
    {
        "content": "<p>If anyone would like to look at my code they certainly may,  in principle.   But I'm happy with it,  or at least, I was until an hour ago.   Since the code does build,  and since the proof is accepted up until the very last step,  I don't think the problem is in my code.</p>",
        "id": 216052641,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604909322
    },
    {
        "content": "<p>it's quite possible that you are doing something that is not so efficient, and the number of times you use it is catching up to you</p>",
        "id": 216052695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604909381
    },
    {
        "content": "<p>Yes,  it's not only possible,  it must be so.   And,  the only likely candidate is \"ifinish\".</p>",
        "id": 216052798,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604909445
    },
    {
        "content": "<p>in particular, long proofs are bad style in addition to not being handled well by lean. The mere fact that you have a hypothesis <code>h201</code> means that your proof is 10 times longer than it should be</p>",
        "id": 216052810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604909459
    },
    {
        "content": "<p>That doesn't mean there are 200 hypothesis.  They're not numbered consecutively.</p>",
        "id": 216052848,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604909490
    },
    {
        "content": "<p>oh that's good</p>",
        "id": 216052861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604909501
    },
    {
        "content": "<p>Why are long proofs \"bad style\"?</p>",
        "id": 216052889,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604909523
    },
    {
        "content": "<p>because they are difficult to follow, cause long interactive delays, and make lean consume a lot of memory</p>",
        "id": 216052952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604909556
    },
    {
        "content": "<p>plus, the longer a proof is the more likely there will be some factorable subparts of independent interest</p>",
        "id": 216052977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604909593
    },
    {
        "content": "<p>Well,  you said,  \"in addition to not being handled well by Lean\",  but your last two reasons are \"not handled well by lean\".</p>",
        "id": 216052978,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604909597
    },
    {
        "content": "<p>well mathlib style is in part driven by the current reality of lean</p>",
        "id": 216053001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604909634
    },
    {
        "content": "<p>it's not just indentation</p>",
        "id": 216053051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604909653
    },
    {
        "content": "<p>I'm not quite sure what \"difficult to follow\" means.    In my proofs,  I start with a written proof with numbered or labeled lines.   Then in Lean I construct a proof  with a line  \"have formula76\"   for example  and after that a tactic block proving that line.   If you fold up those tactic blocks you <br>\nsee in Lean a proof that exactly corresponds to the written proof.    That's my idea of \"good style\".  But I'm willing to learn from people with more experience at this.</p>",
        "id": 216053114,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604909724
    },
    {
        "content": "<p>Just to be clear -- if there is a time-out in your code then lean is not verifying it -- verification is failing. You can't ignore it.</p>",
        "id": 216053139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604909746
    },
    {
        "content": "<p>I think numbering things is a bad way to name anything</p>",
        "id": 216053213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604909775
    },
    {
        "content": "<p>it should be a last resort only</p>",
        "id": 216053221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604909786
    },
    {
        "content": "<p>When I do leanproject build  I do not get a timeout message.   So then it is verifying it, right? or not?</p>",
        "id": 216053230,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604909797
    },
    {
        "content": "<p>Where are you seeing the timeouts? In an editor? Which one? Why not increase the time before it times out?</p>",
        "id": 216053311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604909871
    },
    {
        "content": "<p>Now I am naming my lemmas the same names as they get in the LaTeX source files (not by numbers)  but I am still numbering the formulas that are numbered in latex.</p>",
        "id": 216053328,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604909879
    },
    {
        "content": "<p>I am using VSCode.   How can I increase the time?</p>",
        "id": 216053394,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604909900
    },
    {
        "content": "<p><code>set_option timeout 1000000000000</code></p>",
        "id": 216053409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604909916
    },
    {
        "content": "<p>I put that command right in my Lean file?</p>",
        "id": 216053425,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604909940
    },
    {
        "content": "<p>between declarations</p>",
        "id": 216053445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604909960
    },
    {
        "content": "<p>There is also a way to change the default timeout time in the VS Code settings</p>",
        "id": 216053450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604909966
    },
    {
        "content": "<p>I can't remember details but just go to settings and search for lean</p>",
        "id": 216053479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604909996
    },
    {
        "content": "<p>I put it in the file.  Had to knock a couple of zeroes off before it would \"fit in a machine integer\".  Still got a timeout message.</p>",
        "id": 216053596,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604910053
    },
    {
        "content": "<p>Now I'll look for it in the settings.</p>",
        "id": 216053628,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604910072
    },
    {
        "content": "<p>If it's a legitimate timeout,  it must be just barely timing out,  because it gets to the last line and the last line should be trivial.  <br>\nBut I think there is something fishy about that.</p>",
        "id": 216053718,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604910130
    },
    {
        "content": "<p>is it actually the last line?</p>",
        "id": 216053739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604910144
    },
    {
        "content": "<p>because if so it could be the result of kernel typechecking</p>",
        "id": 216053768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604910164
    },
    {
        "content": "<p>in particular if <code>ifinish</code> or some other tactic is producing a bad proof</p>",
        "id": 216053781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604910177
    },
    {
        "content": "<p>The last line of the proof.   Not the last line of the file.  <br>\nAnd when I extracted two parts of the proof as lemmas,  the timeout is at the last line of one of the lemmas.</p>",
        "id": 216053793,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604910184
    },
    {
        "content": "<p>you won't notice that anything is wrong until all the metavariables are closed and the finished proof is pushed to the kernel for verification</p>",
        "id": 216053840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604910214
    },
    {
        "content": "<p>Ah,  so it could be that ifinish is not just taking too long,  but is producing a bogus proof!</p>",
        "id": 216053875,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604910236
    },
    {
        "content": "<p>Here is a hypothesis. You are getting a timeout because you have inadvertently written some code that stinks, and if you're not going to post a minimal working example which exhibits the problem then nothing anyone says here is going to help you.</p>",
        "id": 216053972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604910294
    },
    {
        "content": "<p>There are all sorts of tricks you can use to minimise your example, for example using axioms or constants instead of including previous proofs or definitions</p>",
        "id": 216054149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604910392
    },
    {
        "content": "<p>OK,   thanks for trying to help me.</p>",
        "id": 216054190,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604910429
    },
    {
        "content": "<p>One tiny typo can throw lean into a loop</p>",
        "id": 216054239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604910472
    },
    {
        "content": "<p>Yes,  but Lean isn't in a loop.   If I don't type the last \"exact\" command,  it processes the proof up to that point just fine.   Then,  <br>\nyou can see that the goal and the last hypothesis are identical.   So I don't see how I've written stinky code.   But it does seem possible,<br>\nas Mario suggested, that my code \"stinks\"  because 'ifinish' has produced a bogus proof.    So,  I think I'll try to eliminate the uses of <br>\nifinish and see if I still have my problem.  And if I do,  then I'll try replacing all the referenced lemmas by axioms so I can create a MWE. <br>\nBut I think that will take hours.</p>",
        "id": 216054468,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604910609
    },
    {
        "content": "<p>\"stinky code\" doesn't mean logically incorrect</p>",
        "id": 216054510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604910646
    },
    {
        "content": "<p>It could just mean one definition which doesn't quite do what you think it does</p>",
        "id": 216054592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604910708
    },
    {
        "content": "<p>Well,  I thought Kevin meant code that caused a timeout.    But since I don't get a timeout right up until the last step...</p>",
        "id": 216054667,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604910736
    },
    {
        "content": "<p>by the way, one way to minimize the proof is to replace subparts with <code>sorry</code></p>",
        "id": 216054733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604910795
    },
    {
        "content": "<p>this will keep the proof compiling, and in particular going to the kernel, so you might be able to suss out a bad proof that way</p>",
        "id": 216054768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604910825
    },
    {
        "content": "<p>Well,   I may be slow here,  but it seems to me that whatever I might have written,  if I arrive at a point where the goal and one of my hypotheses are identical ( and there are no duplicate names of hypotheses)   then it shouldn't matter what came before that.</p>",
        "id": 216054812,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604910843
    },
    {
        "content": "<p>Thanks Mario,  I will try that as well as putting in axioms for lemmas.</p>",
        "id": 216054869,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604910877
    },
    {
        "content": "<p>There are a number of reasons why that can cause a timeout, but it's hard to say for sure which reason is applicable unless you share some code with the bug</p>",
        "id": 216054898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604910907
    },
    {
        "content": "<p>OK  you guys have given me enough hints to follow up.   Thank you very much.   I'll let you know tomorrow what happened.  It's bedtime now.</p>",
        "id": 216054945,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604910954
    },
    {
        "content": "<p>If your goal is <code>X = X</code> and you can't close it, try <code>set_option pp.all true</code> before your theorem. You might find that (a) they're not the same after all or (b) you have inadvertently made some gigantic terms</p>",
        "id": 216055533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604911344
    },
    {
        "content": "<p>OK,  so I went through and replaced all calls to ifinish  with direct proofs.   After that the timeout message is gone and everything is working fine.   So,  I guess Mario's theory that ifinish produced a bogus proof is the correct explanation.     My code \"stank\" because ifinish stank.</p>",
        "id": 216057755,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604912645
    },
    {
        "content": "<p>I'm pretty sure you're the only user of this tactic, so not surprised at all that bug live there.</p>",
        "id": 216057823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604912701
    },
    {
        "content": "<p>OK.    But I humbly suggest that  instead of \"deterministic timeout\" ,  a message like,  \"kernel failed to check proof\"  would have been helpful.   Anyway,  thanks to Mario and Kevin  all is well.</p>",
        "id": 216057958,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604912780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284844\">@Michael Beeson</span> but the kernel thought that if you gave it 5 more years, maybe it would have been able to check the proof after all...</p>",
        "id": 216058048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604912868
    },
    {
        "content": "<p>Haha,  that's wonderful!</p>",
        "id": 216058109,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1604912892
    },
    {
        "content": "<p>Lean will tell you that the proof is wrong, if it is convinced that it's wrong. You hit an unlucky spot where Lean couldn't decide in a reasonable amount of time whether the proof was good or bad. Hence a timeout.</p>",
        "id": 216058856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604913468
    },
    {
        "content": "<p>i agree that \"deterministic timeout\" is an inaccurate name, mostly because it is not deterministic. it would be better to simply call it a \"timeout\"</p>",
        "id": 216123458,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604945815
    },
    {
        "content": "<p>I thought it was deterministic</p>",
        "id": 216123837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604945977
    },
    {
        "content": "<p>if you forget to run <code>get-cache</code> you can get timeouts on things that normally would be fine, for example. it is not a deterministic function of your code</p>",
        "id": 216124376,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604946213
    },
    {
        "content": "<p>it is a deterministic function of the inputs to lean</p>",
        "id": 216124415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604946230
    },
    {
        "content": "<p>I think if you do a zero-edit on a failing proof in vscode it will not make it pass</p>",
        "id": 216124524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604946281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> made a list of possible sources of nondeterminism before. I guess the unique names will be different, which could lead to a difference in some edge cases</p>",
        "id": 216124636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604946354
    },
    {
        "content": "<p>caching is the big one right? at least from what I can tell</p>",
        "id": 216124712,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604946376
    },
    {
        "content": "<p>yes but that's easy to control and is a function of data on your HDD</p>",
        "id": 216124753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604946398
    },
    {
        "content": "<p>it's not a deterministic function of <em>your code</em>, but then again even the result of your code can depend on things like IO and unique names</p>",
        "id": 216124918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604946486
    },
    {
        "content": "<p>I am trying to prove the Noetherianess of a Dedekind domain (using the fractional ideals are invertible definition).</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/de0bf7e02d1c4912e08982eeba8cb717a873da65/src/ring_theory/dedekind_domain.lean#L338\">https://github.com/leanprover-community/mathlib/blob/de0bf7e02d1c4912e08982eeba8cb717a873da65/src/ring_theory/dedekind_domain.lean#L338</a></p>\n<p>Whenever I try to put a sorry at the end of this proof, or anything that would solve the goal, I end up getting a deterministic timeout.</p>\n<p>Any help is appreciated, thank you!</p>",
        "id": 216131298,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1604949620
    },
    {
        "content": "<p>Can you split it into lemmas of &lt;20 lines each?</p>",
        "id": 216131408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604949689
    },
    {
        "content": "<p>That might make it more manageable</p>",
        "id": 216131435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604949704
    },
    {
        "content": "<p>Ok, I will try, thank you.</p>",
        "id": 216131564,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1604949762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> Do you know about <code>extract_goal</code>?</p>",
        "id": 216131891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604949901
    },
    {
        "content": "<p>It's a very useful tactic for things like this</p>",
        "id": 216131920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604949911
    },
    {
        "content": "<p>Yes, I see. I will try to use it, thank you.</p>",
        "id": 216132208,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1604950030
    },
    {
        "content": "<p>By the way, does it help to <code>clear</code> statements?</p>",
        "id": 216132298,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1604950082
    },
    {
        "content": "<p>Probably not</p>",
        "id": 216132459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604950139
    },
    {
        "content": "<p>i would try replacing some of those <code>simp</code> statements in the middle of the proofs with <code>simp only</code>, it's easy to do and sometimes simp is slow</p>",
        "id": 216133694,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604950749
    },
    {
        "content": "<p>i'm not sure how vscode displays it, but in emacs you can kind of see there are orange bars on the left while lean is compiling, and you can often figure out which parts of the proof are slow by watching those, and then you can optimize those parts</p>",
        "id": 216133992,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604950881
    },
    {
        "content": "<p>vscode has them too</p>",
        "id": 216134097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604950924
    },
    {
        "content": "<p>Yeah, I guess it might be the 4 line long <code>suffices</code> statement that might be causing the issue.</p>",
        "id": 216134788,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1604951281
    },
    {
        "content": "<p>\"lemmas of 20 lines\" might be more extreme than is absolutely necessary, i would be lazier about it and just break this up into 2 separate lemmas and see if that fixed it. and then if it still continued to not work, hopefully just 1 of the 2 is too slow, and then you can recurse</p>",
        "id": 216134976,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604951363
    },
    {
        "content": "<p>I will try, thank you!</p>",
        "id": 216135095,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1604951415
    },
    {
        "content": "<p>Ok so I broke it up into two lemmas, it works perfectly fine till a certain goal, and then suddenly gives a deterministic timeout error only if I input a <code>sorry</code> or the statement that closes the goal. If I input something inaccurate, I see an error immediately. The lemma is about 25 lines long.</p>",
        "id": 216144297,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1604956849
    },
    {
        "content": "<p>can you paste just the lemma that's failing</p>",
        "id": 216147607,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604958735
    },
    {
        "content": "<p>my guess is that some statement isn't compiling without the \"sorry\" because it needs some backward type inference or something weird like that before it'll start compiling</p>",
        "id": 216147647,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604958767
    },
    {
        "content": "<p>what i would do here is, delete lines from the end of the slow proof and replace them with <code>sorry</code>, until i get something that works with sorry. then, probably the last bit you removed is the slow bit. when you say \"it works perfectly fine until I write sorry\", it isn't really working perfectly fine then, right? it's just not compiling at all because the code is ungrammatical.</p>",
        "id": 216147865,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604958890
    },
    {
        "content": "<p>basically it would help to post both the \"minimum not-working example\" that doesn't compile, along with the \"maximum working example\", the point where your code <em>does</em> compile, you've just replaced a bunch of it with a sorry. the problem probably lies in the diff between those two states</p>",
        "id": 216147957,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604958952
    },
    {
        "content": "<p>Thank you very much for your help. Turns out the lemma I was trying to use had the incorrect form. As soon as I fixed that, everything worked smoothly!</p>",
        "id": 216159159,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1604967097
    }
]