[
    {
        "content": "<p>you can't coerce (or construct a function) from a quotient to its base type, in general</p>",
        "id": 215006307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603994955
    },
    {
        "content": "<p>instead, you construct functions out of the quotient using <code>quotient.lift</code>, which has essentially the type <code>(A -&gt; B) -&gt; (quotient A -&gt; B)</code></p>",
        "id": 215006386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603994998
    },
    {
        "content": "<p>but it has a side condition that the provided function must respect the quotient relation</p>",
        "id": 215006479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603995021
    },
    {
        "content": "<p>OK, maybe I should <a href=\"https://en.wikipedia.org/wiki/XY_problem\">XY</a> what I'm actually trying to do, with a slightly less minimal mwe : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">LTL</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">formula</span> <span class=\"o\">(</span><span class=\"n\">AP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">AP</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶‚ÇÅ</span> <span class=\"bp\">Œ¶‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">until</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶‚ÇÅ</span> <span class=\"bp\">Œ¶‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"kn\">open</span> <span class=\"n\">formula</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`¬¨`</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">LTL.formula.neg</span> <span class=\"n\">P</span>\n<span class=\"kd\">notation</span> <span class=\"n\">P</span> <span class=\"bp\">`‚àß`</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">LTL.formula.conj</span> <span class=\"n\">P</span> <span class=\"n\">Q</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">O</span><span class=\"bp\">`</span> <span class=\"bp\">Œ¶</span> <span class=\"o\">:=</span> <span class=\"n\">formula.next</span> <span class=\"bp\">Œ¶</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">Œ¶</span> <span class=\"bp\">`ùí∞`</span> <span class=\"bp\">Œ®</span> <span class=\"o\">:=</span> <span class=\"n\">formula.until</span> <span class=\"bp\">Œ¶</span> <span class=\"bp\">Œ®</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">inf_word</span> <span class=\"o\">(</span><span class=\"n\">AP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"n\">stream</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">AP</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sat</span> <span class=\"o\">{</span><span class=\"n\">AP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">inf_word</span> <span class=\"n\">AP</span> <span class=\"bp\">‚Üí</span>  <span class=\"n\">formula</span> <span class=\"n\">AP</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span>\n<span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">œÉ</span> <span class=\"bp\">`‚ä®`</span> <span class=\"bp\">Œ¶</span> <span class=\"o\">:=</span> <span class=\"n\">sat</span> <span class=\"n\">œÉ</span> <span class=\"bp\">Œ¶</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">words</span> <span class=\"o\">{</span><span class=\"n\">AP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"n\">AP</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">inf_word</span> <span class=\"n\">AP</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">œÉ</span> <span class=\"bp\">|</span> <span class=\"n\">œÉ</span> <span class=\"bp\">‚ä®</span> <span class=\"bp\">Œ¶</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">equiv</span> <span class=\"o\">{</span><span class=\"n\">AP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"bp\">Œ®</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"n\">AP</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">words</span> <span class=\"bp\">Œ¶</span> <span class=\"bp\">=</span> <span class=\"n\">words</span> <span class=\"bp\">Œ®</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">Œ¶</span> <span class=\"bp\">‚â°</span> <span class=\"bp\">Œ®</span> <span class=\"o\">:=</span> <span class=\"n\">equiv</span> <span class=\"bp\">Œ®</span> <span class=\"bp\">Œ¶</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">next_dual</span> <span class=\"o\">{</span><span class=\"n\">AP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"n\">AP</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"bp\">¬¨</span><span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"bp\">Œ¶</span><span class=\"o\">))</span> <span class=\"bp\">‚â°</span> <span class=\"n\">O</span> <span class=\"o\">(</span><span class=\"bp\">¬¨</span> <span class=\"bp\">Œ¶</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">LTL</span>\n</code></pre></div>\n\n<p>I would like to use either <code>apply</code> or <code>rewrite</code> to use the last lemma to prove something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span>\n<span class=\"kn\">open</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">formulae.atom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"bp\">‚â°</span> <span class=\"n\">O</span> <span class=\"o\">(</span><span class=\"bp\">¬¨</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"c1\">-- apply next_dual bar,</span>\n <span class=\"c1\">-- rw next_dual bar,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>I guess my question would be, what's the idiomatic or canonical Lean way to do this?</p>",
        "id": 215008271,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1603995814
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 215017765,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1604000457
    },
    {
        "content": "<p>I mean shouldn't I be able to prove things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span>\n<span class=\"kn\">open</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">formula.atom</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬¨</span><span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"n\">bar</span><span class=\"o\">))</span> <span class=\"bp\">‚â°</span> <span class=\"n\">O</span> <span class=\"o\">(</span><span class=\"bp\">¬¨</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n<p>without needing the quotient type</p>",
        "id": 215022383,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1604002884
    },
    {
        "content": "<p>I mean i could just keep unfolding the definitions i suppose but shouldn't there be a way to leverage <code>next_dual</code>?</p>",
        "id": 215022521,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1604002945
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬¨</span><span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"n\">bar</span><span class=\"o\">))</span> <span class=\"bp\">‚â°</span> <span class=\"n\">O</span> <span class=\"o\">(</span><span class=\"bp\">¬¨</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">next_dual</span> <span class=\"n\">_</span>\n</code></pre></div>\n\n<p>?</p>",
        "id": 215022625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604003009
    },
    {
        "content": "<p>I think you haven't shown any examples which actually need rewriting like this</p>",
        "id": 215022934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604003162
    },
    {
        "content": "<p>I suspect the answer is simply to unfold <code>equiv</code> and have simp lemmas or rewriting on <code>words</code> applied to diferent formulas</p>",
        "id": 215023030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604003208
    },
    {
        "content": "<p>But for instance nothing in your code snippet implies that <code>A ‚â° B -&gt; ¬¨ A ‚â° ¬¨ B</code> so of course rewriting isn't going to do anything nontrivial</p>",
        "id": 215023184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604003296
    },
    {
        "content": "<p>The point of the quotient type is so that you can lift the constructors, in the process proving that they all respect equivalence</p>",
        "id": 215023241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604003332
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 215023318,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1604003385
    },
    {
        "content": "<p>For quotients of the form <code>f x = f y</code>, you often don't need the quotient, since you can just use <code>f</code> in place of the <code>quotient.mk</code></p>",
        "id": 215023324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604003390
    },
    {
        "content": "<p>I think I found what was overcomplicating things (at least in my mind)</p>",
        "id": 215023694,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1604003555
    },
    {
        "content": "<p>Thanks for the help</p>",
        "id": 215023719,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1604003566
    }
]