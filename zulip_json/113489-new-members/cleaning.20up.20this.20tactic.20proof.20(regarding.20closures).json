[
    {
        "content": "<p>I've got most of the way through the following proof; however, I'm stuck at one section (Q6). In addition, I was wondering if you could help me clean up the existing code. (live in web editor: <a href=\"https://tinyurl.com/upkybhm\" title=\"https://tinyurl.com/upkybhm\">https://tinyurl.com/upkybhm</a>). Any help greatly appreciated.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- Q0. Notation for absolute. Should I reuse this from somewhere in Lean or mathlib?</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`|`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">is_adherent</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"n\">is_adherent_to</span><span class=\"bp\">`</span> <span class=\"o\">:</span><span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">is_adherent</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">is_adherent_to</span> <span class=\"n\">X</span> <span class=\"o\">}</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">closure_squeeze</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⊆</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- Q1. Should all unfolds be removed when finished? Are they superfluous?</span>\n  <span class=\"c1\">--unfold closure,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_of_subset_of_subset</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Q2. intro vs. assume, which is preferred? assume has the benefit of optionally being</span>\n    <span class=\"c1\">-- explicit in what is being introduced.</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">),</span>\n    <span class=\"n\">intro</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"n\">is_adherent_to</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">is_adherent</span> <span class=\"n\">at</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">x&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">x&#39;</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₃</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x&#39;</span> <span class=\"n\">h_exists_temp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h_exists_temp</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h₆</span> <span class=\"n\">h₇</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₈</span> <span class=\"o\">:</span> <span class=\"n\">x&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₁</span> <span class=\"n\">h₆</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h₈</span> <span class=\"n\">h₇</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">),</span>\n    <span class=\"n\">intro</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Q3. What is a better way to get a δ = ε/3? It takes...</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">δ</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">exists_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hδ</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- ... me 4 lines.</span>\n    <span class=\"c1\">-- Q4. What is the proof for h₅ exactly? library_search doesn&#39;t turn up anything.</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">y&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">y&#39;</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₃</span> <span class=\"n\">δ</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Q5. Is there a better way to access the two proofs (hy&#39; and h₇)? It takes ...</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h₆</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hy&#39;</span> <span class=\"o\">:</span> <span class=\"n\">y&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h₇</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">y&#39;</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n    <span class=\"c1\">--- ... me 6 lines.</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₈</span> <span class=\"o\">:</span> <span class=\"n\">y&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">h₂</span> <span class=\"n\">hy&#39;</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- This next bit is a repeat of Q5..</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₉</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">y&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₈</span> <span class=\"n\">δ</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h₉</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h₁₀</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">y&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- ... another 6 lines.</span>\n    <span class=\"c1\">-- Q6. I&#39;m a bit stuck on the following line. I think, what is needed is something like:</span>\n    <span class=\"c1\">--    norm_add_le_of_le (by apply_instance) h₇ h₁₀,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁₁</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁₂</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">hx</span> <span class=\"n\">h₁₂</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192339476,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585621048
    },
    {
        "content": "<p>Which version of mathlib are you using? I get an error</p>\n<div class=\"codehilite\"><pre><span></span>invalid definition, a declaration named &#39;closure&#39; has already been declared\n</pre></div>\n\n\n<p>on line 15, and <code>#check @closure</code> gives me</p>\n<div class=\"codehilite\"><pre><span></span>closure : Π {α : Type u_1} [_inst_1 : topological_space α], set α → set α\n</pre></div>",
        "id": 192352507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585639330
    },
    {
        "content": "<p>Yes, we have closure defined for any topological space, not just real numbers.</p>",
        "id": 192353801,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585640314
    },
    {
        "content": "<p>Changing <code>closure</code> to <code>closure'</code> throughout the snippet fixes it. </p>\n<p><code>norm_add_le_of_le</code> is a theorem about normed groups. I don't know much about what structures are put on the real numbers, but if I write <code>have ZZZ := norm_add_le_of_le h₇ h₁₀,</code> just before your sorry then the error seems to indicate that nobody has put a normed group structure on the reals with the norm being abs, or perhaps you have not imported the file where this structure is defined.</p>",
        "id": 192354975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585641215
    },
    {
        "content": "<p>What you need is <code>abs_add</code> I guess.</p>",
        "id": 192355193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585641339
    },
    {
        "content": "<p>This structure is defined in <code>normed_space.basic</code></p>",
        "id": 192355388,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585641465
    },
    {
        "content": "<p>but I guess you can persuade <code>linarith</code> to do this:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"k\">have</span> <span class=\"n\">h₁₁</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">δ</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">y&#39;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">),</span>\n      <span class=\"n\">linarith</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 192355399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585641478
    },
    {
        "content": "<p>Actually it fails because for Lean <code>(a - b) + (b - c)</code> is not the same as <code>a - c</code></p>",
        "id": 192355586,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585641591
    },
    {
        "content": "<p>So, you need to either rewrite as <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> suggested, or use <code>dist</code> instead of <code>|a - b|</code>.</p>",
        "id": 192355798,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585641677
    },
    {
        "content": "<p>In terms of structure, I would not embark upon a big monolithic proof like this. Why is your result true? Here is a proof which only uses fundamental facts about closures. Firstly there is <code>closure_mono</code>, the fact that closure is monotonic, which is a fancy way of saying that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>⊆</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X\\subseteq Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>X</mi><mo stretchy=\"true\">‾</mo></mover><mo>⊆</mo><mover accent=\"true\"><mi>Y</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{X}\\subseteq\\overline{Y}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0193em;vertical-align:-0.13597em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8833300000000001em;vertical-align:0em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span>. Applying this to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>h</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">h_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> shows <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>X</mi><mo stretchy=\"true\">‾</mo></mover><mo>⊆</mo><mover accent=\"true\"><mi>Y</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{X}\\subseteq\\overline{Y}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0193em;vertical-align:-0.13597em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8833300000000001em;vertical-align:0em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span> and applying it to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>h</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">h_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> shows <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>Y</mi><mo stretchy=\"true\">‾</mo></mover><mo>⊆</mo></mrow><annotation encoding=\"application/x-tex\">\\overline{Y}\\subseteq</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0193em;vertical-align:-0.13597em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span></span></span></span><code>closure(closure(X))</code>Secondly there is <code>closure_closure</code>, saying <code>closure (closure X)=closure X</code>. Applying these two facts shows inclusions in both ways so you're done. This means that the actual proof of <code>closure_squeeze</code> should be three lines long, deducing the result from these more fundamental results, whose proofs would obviously be where more of the work is. But you should try and make your proofs as modular as possible. Note that I used <code>closure_mono</code> twice in my argument above, and it would not surprise me if in some sense you prove it twice in your argument, meaning that your proof might be much longer than it should be.</p>",
        "id": 192356191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585641877
    },
    {
        "content": "<p>Apologies, I did not include a namespace in my snippet. </p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , thanks for the <code>rw</code> tip! Regarding the monolithic proof, my intention is to follow a textbook, and those closure properties you mention are later proved using this one.</p>",
        "id": 192359823,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585644234
    },
    {
        "content": "<p>Any thoughts on improving the section:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"c1\">-- Q3. What is a better way to get a δ = ε/3? It takes...</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">δ</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">exists_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hδ</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- ... me 4 lines.</span>\n</pre></div>",
        "id": 192359886,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585644254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252241\">Kevin Doran</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192359823\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192359823\">said</a>:</p>\n<blockquote>\n<p>Regarding the monolithic proof, my intention is to follow a textbook, and those closure properties you mention are later proved using this one.</p>\n</blockquote>\n<p>Having spent some time reading mathlib, I would now definitely question whether mathematicians always know best when it comes to ordering of material. You might be right though, I have not thought about how to develop this sort of theory (I probably should, there has been some real number game action recently)</p>",
        "id": 192360757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585644776
    },
    {
        "content": "<p>Chris Hughes pointed out to me that his 2nd year analysis lecturer proved the same result three times over the course of two lectures, as sublemmas or remarks in the middle of other proofs.</p>",
        "id": 192360836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585644839
    },
    {
        "content": "<p><code>set δ := ε/3 with hδ,</code> is the way to do the delta thing perhaps.</p>",
        "id": 192360928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585644886
    },
    {
        "content": "<p>I think, no matter which way you choose, at least one of them will require a delta-epsilon formulation, which is where most of my mess above comes from. </p>\n<p>The other big eye sore is the double exist-elim:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"c1\">-- Q5. Is there a better way to access the two proofs (hy&#39; and h₇)? It takes ...</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h₆</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hy&#39;</span> <span class=\"o\">:</span> <span class=\"n\">y&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h₇</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">y&#39;</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n    <span class=\"c1\">--- ... me 6 lines.</span>\n</pre></div>\n\n\n<p>This seems like such a common pattern (working with an proposition, ∃x ∈ X, &lt;something&gt;). Any thoughts on a better way?</p>",
        "id": 192361864,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585645406
    },
    {
        "content": "<p>Oh sorry -- I have only just noticed all the questions!</p>",
        "id": 192362498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585645696
    },
    {
        "content": "<p>Also, I would love a real number game.</p>",
        "id": 192362675,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585645808
    },
    {
        "content": "<p>Q1 yeah I'd not bother unfolding. Q2 intro is much more common. Just above Q3: you can just do <code>intros eps heps</code>.</p>",
        "id": 192362695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585645818
    },
    {
        "content": "<p>Q4 the proof is linarith. Maybe there is some result of the form a&gt;0 and b&gt;0 -&gt; a/b&gt;0 but then you'll still need to prove 3&gt;0 (which you can do with <code>norm_num</code>)</p>",
        "id": 192362815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585645882
    },
    {
        "content": "<p>Q5 <code>    rcases h₆ with ⟨y', hy', h₇⟩,</code></p>",
        "id": 192363013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585645975
    },
    {
        "content": "<p>Hopefully that's everything! <code>rcases</code> is a brilliant tactic for this sort of proof.</p>",
        "id": 192363097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585646019
    },
    {
        "content": "<p>Thanks a million!</p>",
        "id": 192363199,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585646067
    },
    {
        "content": "<p>I think <code>closure_mono</code> is very simple to prove by the way. I think it's just a set-theoretic triviality</p>",
        "id": 192363478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585646218
    },
    {
        "content": "<p>The same is true for closure_closure</p>",
        "id": 192363517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585646242
    },
    {
        "content": "<p>It's just a 2epsilon proof</p>",
        "id": 192363533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585646252
    },
    {
        "content": "<p>Can I vote twice for proving <code>closure_mono</code> first?</p>",
        "id": 192365038,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585647112
    },
    {
        "content": "<p>Everything Kevin wrote about distrusting lecture notes for this kind of things is crucial.</p>",
        "id": 192365231,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585647201
    },
    {
        "content": "<p>To try and argue the position of the author, <code>closure_mono</code> is fine to be proven first, no debate there. The main point of contention is between<code>closure_closure</code>, <code>closure_union</code> or the the above lemma; all follow easily from each other. So far, the author's presentation order has been illuminating.</p>",
        "id": 192366556,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585647932
    },
    {
        "content": "<p>I also think it's worth having a look at mathlib, even if the setup is hugely more general. <a href=\"https://github.com/leanprover-community/mathlib/blob/17632202cdf9682cea972e86437d32ac20c91b06/src/topology/basic.lean#L262-L319\" title=\"https://github.com/leanprover-community/mathlib/blob/17632202cdf9682cea972e86437d32ac20c91b06/src/topology/basic.lean#L262-L319\">This</a> is the sequence of lemmas you are interested in. You don't need to understand the proofs, only notice how shorts are the proofs because of the careful ordering of statements.</p>",
        "id": 192366596,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585647960
    },
    {
        "content": "<p>Oh, yea, that's a great spot to study. I went looking before, but I got a bit lost.</p>",
        "id": 192366737,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585648026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252241\">@Kevin Doran</span> do you see how natural the proof below is?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">closure&#39;_mono</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hXY</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">closure&#39;</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">closure&#39;</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"c1\">--λ a haX ε hε, ⟨_, hXY haX, _⟩ #exit</span>\n<span class=\"c1\">--⟨(haX ε hε).1 _⟩</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- Say a is in the closure of X. We want to show a is in the closure of Y.</span>\n  <span class=\"c1\">-- So say ε &gt; 0. We want to find y ∈ Y such that |a - y| ≤ ε.</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">haX</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- By definition of closure of X, there&#39;s x ∈ X with |a - x| ≤ ε.</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">haX</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">haX&#39;</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- So let y be x.</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Remark:</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- x is in Y because it&#39;s in X and X ⊆ Y</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hXY</span> <span class=\"n\">haX&#39;</span><span class=\"o\">,</span> <span class=\"c1\">-- hXY is actually a function!</span>\n  <span class=\"o\">},</span>\n  <span class=\"c1\">-- oh but now one of our assumptions is the conclusion</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192368057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585648743
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">closure&#39;_mono</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hXY</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">closure&#39;</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">closure&#39;</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">haX</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n</pre></div>\n\n\n<p>Can you write the proof in term mode?</p>",
        "id": 192368216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585648826
    },
    {
        "content": "<p>The only tactics this proof uses are trivialities.</p>",
        "id": 192368229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585648836
    },
    {
        "content": "<p>Monotonocity is a really natural thing to look for -- we are saying monotonicity is a morphism of posets.</p>",
        "id": 192368384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585648925
    },
    {
        "content": "<p>The squeeze lemma you are trying to prove has a much uglier statement.</p>",
        "id": 192368413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585648950
    },
    {
        "content": "<p>Formalising reveals an underlying elegance which humans often miss.</p>",
        "id": 192368453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585648979
    },
    {
        "content": "<p>closure_closure is the statement that a morphism is idempotent. This is also a much more natural statement than the squeeze lemma.</p>",
        "id": 192368633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585649088
    },
    {
        "content": "<p>Why do you tag all your definitions as reducible?</p>",
        "id": 192368907,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585649302
    },
    {
        "content": "<p>This is very rarely a good idea, and should certainly not be used when you don't understand what it means.</p>",
        "id": 192368947,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585649339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>,  that is far more elegant! </p>\n<p>Also agreed that the squeeze statement is pretty ugly in itself.</p>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , ah I forgot to take that out. I was just playing with the feature to see what it does.</p>",
        "id": 192369222,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585649521
    },
    {
        "content": "<p>It is kind of annoying that <code>#print closure'_mono</code> gives a term</p>\n<div class=\"codehilite\"><pre><span></span>theorem closure&#39;_mono : ∀ {X Y : set ℝ}, X ⊆ Y → closure&#39; X ⊆ closure&#39; Y :=\nλ {X Y : set ℝ} (hXY : X ⊆ Y),\n  id\n    (λ (a : ℝ) (haX : a ∈ closure&#39; X),\n       id\n         (λ (ε : ℝ) (hε : ε &gt; 0),\n            Exists.dcases_on (haX ε hε)\n              (λ (x : ℝ) (h : ∃ (H : x ∈ X), |a - x| ≤ ε),\n                 Exists.dcases_on h\n                   (λ (haX&#39; : x ∈ X) (h : |a - x| ≤ ε),\n                      Exists.intro x (id (exists_prop.mpr ⟨hXY haX&#39;, h⟩))))))\n</pre></div>\n\n\n<p>in the pretty printer which does not then compile. I was finding it hard to eliminate the cases in term mode too.</p>",
        "id": 192369658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585649817
    },
    {
        "content": "<p>In term mode the <code>rcases</code> becomes a <code>let</code>.</p>",
        "id": 192369922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585649997
    },
    {
        "content": "<p>I'm only half paying attention, do you want me to post the proof term or is it an exercise for the new Kevin?</p>",
        "id": 192370015,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585650045
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"n\">is_adherent_to</span><span class=\"bp\">`</span> <span class=\"o\">:</span><span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">is_adherent</span>\n</pre></div>\n\n\n<p><del>I definitely think you should choose one or the other.</del> Oh I see it's the infix, but don't we want better notation? Is this what they say in French?</p>",
        "id": 192370403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585650329
    },
    {
        "content": "<p>It does look like a literal translation from French.</p>",
        "id": 192370711,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585650579
    },
    {
        "content": "<p>In the beginning I was also defining a lot of infix notation to make the assumption look like proper sentences, but then I quickly realized this was unsustainable. I don't even do it in my teaching because this obfuscate <code>unfold</code> lines (that have to refer the the actual name, not the notation).</p>",
        "id": 192370818,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585650653
    },
    {
        "content": "<p>The proof term should be <code>assume a haX ε hε, let ⟨x, haX, h⟩ := haX ε hε in ⟨x, hXY haX, h⟩</code> by the way.</p>",
        "id": 192370842,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585650677
    },
    {
        "content": "<p>Is there a way of writing this without the <code>let</code>?</p>",
        "id": 192370925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585650724
    },
    {
        "content": "<p>It did not occur to me to use <code>let</code>. I never normally use it, I think it obfuscates goals. When there are <code>let</code>s around, tactic mode proofs can start getting ugly goals.</p>",
        "id": 192371003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585650780
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- Q0. Notation for absolute. Should I reuse this from somewhere in Lean or mathlib?</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`|`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_adherent</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"n\">is_adherent_to</span><span class=\"bp\">`</span> <span class=\"o\">:</span><span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">is_adherent</span>\n\n<span class=\"n\">def</span> <span class=\"n\">closure&#39;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">is_adherent_to</span> <span class=\"n\">X</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- closure_mono term proof</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- If $$X\\subseteq Y$$ then $$\\overline{X}\\subseteq\\overline{Y}$$ -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">closure&#39;_mono</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hXY</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">closure&#39;</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">closure&#39;</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">haX</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">haX&#39;</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">haX</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hXY</span> <span class=\"n\">haX&#39;</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n\n<span class=\"c1\">-- closure_mono tactic proof</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hXY</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">closure&#39;</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">closure&#39;</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- Say a is in the closure of X. We want to show a is in the closure of Y.</span>\n  <span class=\"c1\">-- So say ε &gt; 0. We want to find y ∈ Y such that |a - y| ≤ ε.</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">haX</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- By definition of closure of X, there&#39;s x ∈ X with |a - x| ≤ ε.</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">haX</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">haX&#39;</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- So let y be x.</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Remark:</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- x is in Y because it&#39;s in X and X ⊆ Y</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hXY</span> <span class=\"n\">haX&#39;</span><span class=\"o\">,</span> <span class=\"c1\">-- hXY is actually a function!</span>\n  <span class=\"o\">},</span>\n  <span class=\"c1\">-- oh but now one of our assumptions is the conclusion</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- subset_closure term proof</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- For all subsets $$X$$ of $$\\mathbb{R}$$, we have $$X\\subseteq\\overline{X}$$ -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">subset_closure&#39;</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">closure&#39;</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">abs_zero</span><span class=\"o\">])</span><span class=\"bp\">⟩</span>\n\n<span class=\"c1\">-- tactic proof</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">closure&#39;</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- Say x ∈ X and ε &gt; 0.</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- We need to find y ∈ X with |x - y| ≤ ε. Just use x.</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Remark: x ∈ X</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Note also that |x - x| is obviously zero</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- and because ε &gt; 0 we&#39;re done</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hε</span>\n  <span class=\"c1\">-- Note that that last bit would have been better if your definition of closure&#39;</span>\n  <span class=\"c1\">-- had used &lt; and not ≤</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- closure_closure</span>\n\n<span class=\"c1\">-- Note: for some reason this is not formalaised as `closure ∘ closure = closure`</span>\n<span class=\"c1\">-- I don&#39;t know why we have this convention</span>\n\n<span class=\"c1\">-- tactic mode proof</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The closure of $$\\overline{X}$$ is $$\\overline{X}$$ again -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">closure&#39;_closure&#39;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">closure&#39;</span> <span class=\"o\">(</span><span class=\"n\">closure&#39;</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">closure&#39;</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"c1\">--</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- We prove inclusions in both directions</span>\n  <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"c1\">--</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ⊆ : say $$a$$ is in the closure of $$\\overline{X}$$.</span>\n    <span class=\"n\">intro</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- We want to show it&#39;s in $$\\overline{X}$$ so say ε &gt; 0, and we want x with |x-a| ≤ ε</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- By definition of a, there&#39;s some elements $$b\\in\\overline{X}$$</span>\n    <span class=\"c1\">-- with |a - b| ≤ ε/2</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- and by definition of b there&#39;s some x ∈ X with |b - x| ≤ ε/2</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hbx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Let&#39;s use this x</span>\n    <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Note it&#39;s obviously in X</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- and now |a - x| = |(a - b) + (b - x)|</span>\n    <span class=\"k\">calc</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n                   <span class=\"c1\">-- ≤ ε/2 + ε/2 = ε</span>\n    <span class=\"bp\">...</span>          <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">|</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">abs_add</span>\n    <span class=\"bp\">...</span>          <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ⊇ : follows immediately from subset_closure&#39;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">subset_closure&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- closure_squeeze term mode proof</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">closure&#39;_squeeze</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⊆</span> <span class=\"n\">closure&#39;</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">closure&#39;</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">closure&#39;</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"o\">(</span><span class=\"n\">closure&#39;_mono</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">closure&#39;_closure&#39;</span> <span class=\"n\">X</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">closure&#39;_mono</span> <span class=\"n\">h₂</span>\n\n<span class=\"c1\">-- tactic mode proof</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⊆</span> <span class=\"n\">closure&#39;</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">closure&#39;</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">closure&#39;</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- We prove inclusions in both directions</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ⊆ is just closure&#39;_mono</span>\n    <span class=\"n\">apply</span> <span class=\"n\">closure&#39;_mono</span> <span class=\"n\">h₁</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ⊇ -- first use closure&#39;_closure&#39;</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">closure&#39;_closure&#39;</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- and then it follows from closure&#39;_mono</span>\n    <span class=\"n\">apply</span> <span class=\"n\">closure&#39;_mono</span> <span class=\"n\">h₂</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"252241\">@Kevin Doran</span></p>",
        "id": 192408764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585669836
    },
    {
        "content": "<p>I think \"destructuring <code>let</code>\" (with a pattern match on the left) doesn't actually translate to a <code>let</code> in the usual sense.</p>",
        "id": 192409166,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585669983
    },
    {
        "content": "<p>I think the more mathematically natural definition of adherent is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_adherent</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</pre></div>\n\n\n<p>This is because eps &gt; 0 and not eps &gt;= 0.</p>",
        "id": 192409263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585670019
    },
    {
        "content": "<p>I hadn't realised that one needed <code>let</code>. I was just trying to do <code>(haX ε hε).1</code> and it wouldn't work.</p>",
        "id": 192409425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585670072
    },
    {
        "content": "<p>Assuming this is referring to a Prop, there's no reason to avoid this kind of <code>let</code>. If you put <code>_</code> after <code>in</code> and put your cursor on it you'll see the context is the same as it would be in a tactic proof where you used <code>rcases</code>.</p>",
        "id": 192409571,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585670152
    },
    {
        "content": "<p>Although if you used a \"true\" <code>let</code> I don't know what the context would look like, actually. But this kind of <code>let</code> must just be translated to an application of the recursor.</p>",
        "id": 192409708,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585670207
    },
    {
        "content": "<p>(Maybe multiple applications of recursors.)</p>",
        "id": 192409739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585670221
    },
    {
        "content": "<p>I hadn't realised this. Thanks!</p>",
        "id": 192410023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585670345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , the example is beautiful, thanks. It's funny to look back now at my original  monolith.</p>",
        "id": 192611028,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585789648
    },
    {
        "content": "<p>I have a follow up question. I'm posting it in the existing thread due to the shared context of closures.</p>\n<p>When proving a conjunction where both conjuncts share a common quantifier and assumption, can the quantifier and assumption be introduced before the proof splits?</p>\n<p>Concrete example below: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_closure</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`|`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_adherent</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"n\">def</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">is_adherent</span> <span class=\"n\">x</span> <span class=\"n\">X</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">closure_inter_subset_inter_closure&#39;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">closure</span> <span class=\"n\">X</span> <span class=\"err\">∩</span> <span class=\"n\">closure</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">ha</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">xy</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">xy</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hxy</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">my_closure</span>\n</pre></div>\n\n\n<p>It want to know how to prove the above without a repeat—have something like a <code>intros a ha ε hε</code> at the begging, <em>then</em> split the conjunction.</p>",
        "id": 192620772,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585803047
    },
    {
        "content": "<p>I've seen people write things like <code>split; intro h</code> before but I never thought it was particularly good style</p>",
        "id": 192624118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585807775
    },
    {
        "content": "<p>This way the intro gets applied to both strands of the proof</p>",
        "id": 192624125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585807800
    },
    {
        "content": "<p>[In the right stream this time]</p>\n<p>Ah, I see. They it could be taken to the extreme and have all tactics apply to both strands:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">closure_inter_subset_inter_closure</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">closure</span> <span class=\"n\">X</span> <span class=\"err\">∩</span> <span class=\"n\">closure</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"bp\">;</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ha</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">xy</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"bp\">⟩;</span>\n  <span class=\"n\">use</span> <span class=\"n\">xy</span><span class=\"bp\">;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hxy</span><span class=\"bp\">;</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This too falls into the category of being questionable style? Are there other alternatives (other than repeat)?</p>",
        "id": 192625350,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585809526
    },
    {
        "content": "<p>if \"style\" means mathlib style:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">closure_mono</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">closure</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hpx</span><span class=\"o\">,</span> <span class=\"n\">hapε</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">hpx</span><span class=\"o\">,</span> <span class=\"n\">hapε</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">closure_inter_subset_inter_closure&#39;</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">closure</span> <span class=\"n\">X</span> <span class=\"err\">∩</span> <span class=\"n\">closure</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_inter</span>\n  <span class=\"o\">(</span><span class=\"n\">closure_mono</span> <span class=\"err\">$</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_left</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">closure_mono</span> <span class=\"err\">$</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 192625784,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585810015
    },
    {
        "content": "<p>and if you insist on using tactics, you can still have the lemma</p>",
        "id": 192625822,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585810064
    },
    {
        "content": "<p>That's pretty. I wish the proofs would come to mind like that, and not as hacks with epsilons.</p>",
        "id": 192629115,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585812631
    },
    {
        "content": "<p>You want to move away from the epsilons as soon as possible. This is the whole point of proving things such as <code>closure_mono</code>. There might be a few basic properties such as <code>closure_mono</code> which ultimately end up defining all the key features of your <code>closure</code> function. It's probably something like a Galois insertion or something -- some very abstract combinatorial definition which implies a whole bunch of properties which a mathematician might try and prove with epsilons.</p>",
        "id": 192630073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585813450
    },
    {
        "content": "<p>That's become very apparent to me.</p>",
        "id": 192630390,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585813726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252241\">Kevin Doran</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192625350\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192625350\">said</a>:</p>\n<blockquote>\n<p>[In the right stream this time]<br>\nThis too falls into the category of being questionable style? Are there other alternatives (other than repeat)?</p>\n</blockquote>\n<p>After <code>split;</code>, use <code>{ }</code>.</p>",
        "id": 192630916,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585814073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, that's better.<br>\nPosting the tweaked code for reference.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">closure_inter_subset_inter_closure</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">closure</span> <span class=\"n\">X</span> <span class=\"err\">∩</span> <span class=\"n\">closure</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"o\">{</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ha</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">xy</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">xy</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192631332,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585814368
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">rcases</span> <span class=\"n\">ha</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">xy</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hxy</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 192808617,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585922924
    },
    {
        "content": "<p>This is useless splitting</p>",
        "id": 192808671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585922945
    },
    {
        "content": "<p>You can use <code>rcases ha ε hε with ⟨xy, ⟨l, r⟩, _⟩,</code></p>",
        "id": 192808725,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585922964
    },
    {
        "content": "<p>But of course Kenny's solution to use <code>closure_mono</code> is actually the \"right\" answer.</p>",
        "id": 192808889,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585923011
    },
    {
        "content": "<p>And now let me introduce you to the next level:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">closure_mono</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">closure</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hpx</span><span class=\"o\">,</span> <span class=\"n\">hapε</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">hpx</span><span class=\"o\">,</span> <span class=\"n\">hapε</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">closure_inter_subset_inter_closure&#39;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">closure</span> <span class=\"n\">X</span> <span class=\"err\">∩</span> <span class=\"n\">closure</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">closure_mono</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_inf_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 192810659,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585923705
    },
    {
        "content": "<p>what <code>import</code> does that use?</p>",
        "id": 192811309,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585923964
    },
    {
        "content": "<p>Nothing beyond <code>data.real.basic</code></p>",
        "id": 192811382,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585924006
    },
    {
        "content": "<p>And Kevin's definition of closure of course</p>",
        "id": 192811436,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585924029
    },
    {
        "content": "<p>The full thing is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">my_closure</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`|`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_adherent</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"n\">def</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">is_adherent</span> <span class=\"n\">x</span> <span class=\"n\">X</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">closure_mono</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">closure</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hpx</span><span class=\"o\">,</span> <span class=\"n\">hapε</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">hpx</span><span class=\"o\">,</span> <span class=\"n\">hapε</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">closure_inter_subset_inter_closure&#39;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">closure</span> <span class=\"n\">X</span> <span class=\"err\">∩</span> <span class=\"n\">closure</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">closure_mono</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_inf_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">my_closure</span>\n</pre></div>",
        "id": 192811537,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585924073
    },
    {
        "content": "<p>So Reid pointed out <a href=\"https://en.wikipedia.org/wiki/Closure_operator#Closure_operators_on_partially_ordered_sets\" title=\"https://en.wikipedia.org/wiki/Closure_operator#Closure_operators_on_partially_ordered_sets\">this Wikipedia link</a> which seems to say that the three properties isolated earlier (closure_mono, le_closure, closure_closure) seem to be equivalent to saying that the closure operator is a Galois insertion.</p>",
        "id": 192813716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585924912
    },
    {
        "content": "<p>I see so this fundamental idea seems to be actually equivalent to the concept of a Galois insertion.</p>",
        "id": 192813870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585924960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252241\">Kevin Doran</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192359823\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192359823\">said</a>:</p>\n<blockquote>\n<p>Apologies, I did not include a namespace in my snippet. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> , thanks for the <code>rw</code> tip! Regarding the monolithic proof, my intention is to follow a textbook, and those closure properties you mention are later proved using this one.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"252241\">@Kevin Doran</span> which textbook were you following, out of interest?</p>",
        "id": 192959006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586092542
    },
    {
        "content": "<p>It's Tao's Analysis I.</p>",
        "id": 192959604,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1586093245
    },
    {
        "content": "<p>We need to have a conversation with that guy.</p>",
        "id": 192959919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586093739
    },
    {
        "content": "<p>It's a good book for analysis formalization. I think I got up to chapter 5 before I decided I had more interesting things to do on the weekends. There's also a similarly half-finished version done by someone in Lean 2 lying around somewhere on Github</p>",
        "id": 192969731,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586108685
    },
    {
        "content": "<p>If you get far with it I'd be pretty interested in reading your code</p>",
        "id": 192969825,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586108819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span>  What's wrong with all this calculus stuff in mathlib? I reckon they've got further than chapter 5 of Tao by now -- they have manifolds!</p>",
        "id": 192972760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586113183
    },
    {
        "content": "<p>That's a completely different story. All those people doing elementary analysis and topology in Lean without using what's in mathlib are doing exercises, or want to teach.</p>",
        "id": 192972825,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586113254
    },
    {
        "content": "<p>I do it as well. In my lectures, I define limits of a sequence without using mathlib, and ask my students to prove many lemmas that are super special cases of things we already have in mathlib.</p>",
        "id": 192972843,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586113301
    },
    {
        "content": "<p>Yes I know. Isn't it interesting? One could ask why people formalise it at all, given that it's all a super-special case of mathlib. If we want people to do exercises or to teach them then we should write some definitive approach where everything gets done in a mathlib-sensible order and then tell people to work through that.</p>",
        "id": 192973081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586113609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192973081\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192973081\">said</a>:</p>\n<blockquote>\n<p>Yes I know. Isn't it interesting? One could ask why people formalise it at all, given that it's all a super-special case of mathlib. If we want people to do exercises or to teach them then we should write some definitive approach where everything gets done in a mathlib-sensible order and then tell people to work through that.</p>\n</blockquote>\n<p>FWIW, I see two reasons:</p>\n<p>(1) mathlib uses machinery that students are not necessarily accustomed to, aware or can even understand (e.g. filters for undergraduate in topology who never know there is such thing as a topological space)<br>\n(2) Teachers want you to re-formalize with another approach which is different from mathlib one; it's interesting, but it gets annoying to not be able to rely on the shoulders of giants, but that brings me to the next point.</p>\n<p>If someone wanted to start to contribute to Lean or learn how to do advanced things in Lean (after doing the nat games, read the manual, read the docs), how should he proceed? Is there a list of lemmas that are not there? Good first issues for beginners?<br>\nSome docs on this (maybe it exist and I just didn't search hard enough…) would be awesome.</p>\n<p>If that's possible, then it becomes possible to do school projects around contributing to mathlib.</p>",
        "id": 192974158,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586115133
    },
    {
        "content": "<p>Contributing elementary stuff to mathlib becomes harder and harder. You missed the golden age two years ago.</p>",
        "id": 192974215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586115247
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> still managed to find something with partial derivatives of polynomials.</p>",
        "id": 192974227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586115278
    },
    {
        "content": "<p>When I got interested in Lean in mid-2017 there were a <em>ton</em> of such issues. Lean didn't even have the complex numbers! My first PR to mathlib was a definition of the complex numbers as a pair of real numbers. </p>\n<p>But now things are completely different. It's much harder to find undergraduate level gaping holes in mathlib, and many of the undergraduate holes left need very careful consideration by experts, unfortunately. For example, for years we did not have a basic theory of calculus in one variable, and I was always pushing for it, but the people like Patrick and Sebastien who understood analysis properly assured me that we just had to wait and do it properly, with stuff like the Bochner integral and multivariable calculus all done first before the one variable case.</p>",
        "id": 192974242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586115318
    },
    {
        "content": "<p>The partial derivative thing was just a fluke -- we were riffing with this STEP question and thought about the two-variable case and then all of a sudden we ran into this hole.</p>",
        "id": 192974294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586115364
    },
    {
        "content": "<p>Over Easter I plan on doing 1000 things, and amongst them is writing some tutorials for post-natural-number-game people. Until then there's always the stuff on codewars. Right now I am checking that a super-hard codewars level I set this afternoon is actually solvable.</p>",
        "id": 192974333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586115463
    },
    {
        "content": "<p>Ryan, what happened to your absolute value stuff by the way?</p>",
        "id": 192974385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586115522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192974385\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192974385\">said</a>:</p>\n<blockquote>\n<p>Ryan, what happened to your absolute value stuff by the way?</p>\n</blockquote>\n<p>I paused the work on this to help some students on this metric space thing and I used this opportunity to learn more Lean to write the whole machinery for Bolzano Weierstrass, hence my recent questions</p>\n<p>I learned a lot and feel like I'll be able to move forward faster for the Ostrowski/absolute value thing</p>",
        "id": 192974839,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586116143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192974333\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192974333\">said</a>:</p>\n<blockquote>\n<p>Over Easter I plan on doing 1000 things, and amongst them is writing some tutorials for post-natural-number-game people. Until then there's always the stuff on codewars. Right now I am checking that a super-hard codewars level I set this afternoon is actually solvable.</p>\n</blockquote>\n<p>I'm really curious about this super-hard level :D… Please post it when it's ready!</p>",
        "id": 192974864,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586116191
    },
    {
        "content": "<p>Do you help students learning Lean or BW?</p>",
        "id": 192974865,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586116191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192974865\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192974865\">said</a>:</p>\n<blockquote>\n<p>Do you help students learning Lean or BW?</p>\n</blockquote>\n<p>Learning Lean and I decompose some theorems they have to prove as smaller parts while explaining them the maths behind this and the process of proving \"a big theorem\" (R is a complete, for example)</p>",
        "id": 192974927,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586116244
    },
    {
        "content": "<p>Where did you find those students?</p>",
        "id": 192974947,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586116282
    },
    {
        "content": "<p>Which construction of R do you want to use? Proving completeness of R is very dependent on its construction.</p>",
        "id": 192974956,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586116314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192974242\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192974242\">said</a>:</p>\n<blockquote>\n<p>When I got interested in Lean in mid-2017 there were a <em>ton</em> of such issues. Lean didn't even have the complex numbers! My first PR to mathlib was a definition of the complex numbers as a pair of real numbers. </p>\n<p>But now things are completely different. It's much harder to find undergraduate level gaping holes in mathlib, and many of the undergraduate holes left need very careful consideration by experts, unfortunately. For example, for years we did not have a basic theory of calculus in one variable, and I was always pushing for it, but the people like Patrick and Sebastien who understood analysis properly assured me that we just had to wait and do it properly, with stuff like the Bochner integral and multivariable calculus all done first before the one variable case.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192974215\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192974215\">said</a>:</p>\n<blockquote>\n<p>Contributing elementary stuff to mathlib becomes harder and harder. You missed the golden age two years ago.</p>\n</blockquote>\n<p>I definitely see that. But in some schools, complex analysis is considered to be undergraduate level in France AFAIK and isn't this something that mathlib does not have currently?</p>",
        "id": 192975003,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586116338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> has been learning metric spaces using Lean (he will not go to the metric space course until next year). He just proved that closure was a Galois connection :-) I'm not entirely sure if this statement is covered in the course, but it's where we ended up going...</p>",
        "id": 192975033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586116388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192974947\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192974947\">said</a>:</p>\n<blockquote>\n<p>Where did you find those students?</p>\n</blockquote>\n<p>In Jussieu, there is a math project and Frédéric Paugam suggested to work on Lean, so there are two groups of 4 students working on Lean, the plan is to do: natural number games → reworking the metric space file that Frédéric Le Roux initiated to see how to do metric spaces <em>without</em> filters and in a more natural way for undergraduate students</p>",
        "id": 192975043,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586116410
    },
    {
        "content": "<p>I am absolutely serious: you should just make the metric space stuff into a tutorial.</p>",
        "id": 192975098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586116448
    },
    {
        "content": "<p>and then throw it into Patrick's tutorial project.</p>",
        "id": 192975108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586116458
    },
    {
        "content": "<p>Oh yes, I remembered you mentioned working with Paugam.</p>",
        "id": 192975113,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586116477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975033\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975033\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> has been learning metric spaces using Lean (he will not go to the metric space course until next year). He just proved that closure was a Galois connection :-) I'm not entirely sure if this statement is covered in the course, but it's where we ended up going...</p>\n</blockquote>\n<p>I won't have metric spaces next year :P They replaced the course with Lesbegue measure theory instead!</p>",
        "id": 192975114,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586116478
    },
    {
        "content": "<p>I think the metric space stuff in mathlib is hard to read. Even the definition of a metric space is intimidating because all the auto-generated fields are <a href=\"#narrow/stream/116395-maths/topic/.60metric_space.60.20documentation/near/191666976\" title=\"#narrow/stream/116395-maths/topic/.60metric_space.60.20documentation/near/191666976\">displayed both in mathlib and in the docs</a>.</p>",
        "id": 192975126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586116506
    },
    {
        "content": "<p>I definitely intend to transform my first year exercises into a tutorial in the near future. But this is even more elementary than metric spaces.</p>",
        "id": 192975167,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586116563
    },
    {
        "content": "<p>What's nice with metric spaces is you need to build structures and classes. This is not at all covered in my class.</p>",
        "id": 192975192,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586116588
    },
    {
        "content": "<p>Patrick -- how do you feel about adding a bunch of files with <code>sorry</code>s into the tutorial project? Would this be Ok?</p>",
        "id": 192975193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586116597
    },
    {
        "content": "<p>So that would be a very nice follow-up</p>",
        "id": 192975195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586116606
    },
    {
        "content": "<p>Metric space is a great example of a structure.</p>",
        "id": 192975198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586116611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192974956\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192974956\">said</a>:</p>\n<blockquote>\n<p>Which construction of R do you want to use? Proving completeness of R is very dependent on its construction.</p>\n</blockquote>\n<p>I'm using the usual construction of R coming from mathlib, but I use another definition of convergence, etc ; so I cannot reuse all the <code>cau_seq</code> part from mathlib (though I could prove equivalence).</p>\n<p>I didn't bother too much because I wanted a R-agnostic proof, just give me something which looks like R, some sup/inf and here's completeness</p>\n<p>But in the metric space file, there are plans to take completed space (using quotient of Cauchy sequences) so we can build R from Q using this and try to prove that our R is isomorphic to mathlib's R (which is cool IMHO).</p>",
        "id": 192975208,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586116635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975193\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975193\">said</a>:</p>\n<blockquote>\n<p>Patrick -- how do you feel about adding a bunch of files with <code>sorry</code>s into the tutorial project? Would this be Ok?</p>\n</blockquote>\n<p>Yes, this is what I want to do. Keep the only existing file as a kind of overview of the basics, then have a lot of exercises.</p>",
        "id": 192975211,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586116656
    },
    {
        "content": "<p>We are picking up people who know about the basics of apply and intro exact because of NNG. Getting them working on metric spaces would be great because this is proper mathematics, not like all this Peano nonsense.</p>",
        "id": 192975212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586116658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975212\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975212\">said</a>:</p>\n<blockquote>\n<p>But we are picking up people who know about the basics of apply and intro exact because of NNG. Getting them working on metric spaces would be great because this is proper mathematics, not like all this Peano nonsense.</p>\n</blockquote>\n<p>I want now NNG with ZFC…………… Can I?</p>",
        "id": 192975253,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586116683
    },
    {
        "content": "<p>What does that mean?</p>",
        "id": 192975258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586116695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975033\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975033\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> has been learning metric spaces using Lean (he will not go to the metric space course until next year). He just proved that closure was a Galois connection :-) I'm not entirely sure if this statement is covered in the course, but it's where we ended up going...</p>\n</blockquote>\n<p>Wow!</p>",
        "id": 192975267,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586116714
    },
    {
        "content": "<p>If it means what I think it means, the first thing you should do in ZFC is to prove that induction and recursion work, and then just do things like NNG anyway :-)</p>",
        "id": 192975275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586116730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975258\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975258\">said</a>:</p>\n<blockquote>\n<p>What does that mean?</p>\n</blockquote>\n<p>Building natural numbers with ZFC rather than Peano, but yes, once you have minimal stuff, it becomes like with Peano</p>",
        "id": 192975283,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586116743
    },
    {
        "content": "<p>It's not that hard to prove it's a Galois connection. It's one of these things which sounds super-complicated but is just some abstract computer science way of saying some triviality about closures.</p>",
        "id": 192975317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586116779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975317\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975317\">said</a>:</p>\n<blockquote>\n<p>It's not that hard to prove it's a Galois connection. It's one of these things which sounds super-complicated but is just some abstract computer science way of saying some triviality about closures.</p>\n</blockquote>\n<p>Still, it is not expected to see what is a Galois connection, and stuff around order theory (though I really like order theory but that's just me…)</p>",
        "id": 192975376,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586116819
    },
    {
        "content": "<p>I really also like the idea that Lean could be used to learn mathematics, but I'm unsure whether it's a good idea (?)</p>",
        "id": 192975388,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586116842
    },
    {
        "content": "<p>(I learned a lot of maths thanks to mathlib docs to be honest… :D)</p>",
        "id": 192975389,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586116850
    },
    {
        "content": "<p>I think this is an interesting point. The people at Xena seem to be the ones who are on top of the material in the lectures. Athina Thoma specialises in education and she told me that she thinks it's difficult to teach people Lean and equivalence relations at the same time if a student has never heard of either of them before.</p>",
        "id": 192975409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586116909
    },
    {
        "content": "<p>This is why NNG is a nice thing to do because everyone knows natural numbers already, even if they didn't know why addition was commutative. The objects are not intimidating.</p>",
        "id": 192975462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586116957
    },
    {
        "content": "<p>In my course I don't cover any maths the students haven't met before. But I do cover a lot of maths they didn't understand before (all this \"proving\" stuff for instance).</p>",
        "id": 192975487,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586117028
    },
    {
        "content": "<p>Yes this is exactly what I do in my course, and then the Xena people are the ones who kind of knew what a proof was already. I want to use Lean to teach people what a proof is but I just attract people who know what it is already.</p>",
        "id": 192975564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586117123
    },
    {
        "content": "<p>Definitely, once you have enough experience with Lean, well, the new game is the whole mathematics.</p>\n<p>Also, I'm interested in Lean for computer science, proving some correctness of algorithms you see as CS undergraduate, this sort terminates, etc, etc.<br>\nBut that's something I didn't have time to get in, though doing some maths first was super important because the purpose of those specific mathlib containers which looked like really my <code>std::vector</code> or a list in Haskell was not totally obvious to me at start.</p>",
        "id": 192975625,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586117171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975564\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975564\">said</a>:</p>\n<blockquote>\n<p>Yes this is exactly what I do in my course, and then the Xena people are the ones who kind of knew what a proof was already. I want to use Lean to teach people what a proof is but I just attract people who know what it is already.</p>\n</blockquote>\n<p>There is a finite number of people who know what is a proof, so surely, you will attract people who don't know what it is!</p>",
        "id": 192975634,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586117214
    },
    {
        "content": "<p>A couple of weeks ago I heard one student telling the other: \"Oh, I think I'm beginning to understand the math101 course\" (the one where they studied limits without understanding any proof).</p>",
        "id": 192975646,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586117231
    },
    {
        "content": "<p>But of course the best students in my course were probably the best ones before. It's very frustrating that Covid-19 will completely ruin my hope to measure the impact of my course.</p>",
        "id": 192975704,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586117324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975704\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975704\">said</a>:</p>\n<blockquote>\n<p>But of course the best students in my course were probably the best ones before. It's very frustrating that Covid-19 will completely ruin my hope to measure the impact of my course.</p>\n</blockquote>\n<p>Are exams completely canceled in Orsay? Or are they like bonus marks only?</p>",
        "id": 192975809,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586117463
    },
    {
        "content": "<p>Nobody really knows. But it's already clear that everything will be biased by the lock-down.</p>",
        "id": 192975874,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586117526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975874\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/192975874\">said</a>:</p>\n<blockquote>\n<p>Nobody really knows. But it's already clear that everything will be biased by the lock-down.</p>\n</blockquote>\n<p>Ah :/<br>\nIn Jussieu, they decided that everything done during the lock-down can only be beneficial to students, otherwise it'll be ignored.<br>\nMeaning, there is no real incentive to continue studying right now ; but at the same time, some parts are unclear, e.g. whether a final exam or not will be performed in June.</p>",
        "id": 192975971,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586117667
    },
    {
        "content": "<p>It seems that roughly half of my students are still working. But the bias is this is most probably the better half.</p>",
        "id": 192976007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586117728
    },
    {
        "content": "<p>It is pretty worrying that Kevin above has said \"all the easy stuff is done\". I don't think that's really the case at all, and we need to provide much better \"on-ramping\" to get new users towards useful things they could contribute.</p>",
        "id": 192988621,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586138191
    },
    {
        "content": "<p>We need a better workflow for turning <code>sorry</code> into an accessible issue marked \"needs-help\" \"new-user\" somewhere. :-)</p>",
        "id": 192988633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586138228
    },
    {
        "content": "<p>... maybe we need a channel here for standalone sorries. :-)</p>",
        "id": 192994696,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586147678
    },
    {
        "content": "<p>We could have some standard set of emojis for \"found the lemma in mathlib\", \"proof provided\", \"new user issue created\", \"sounds hard\".</p>",
        "id": 192994711,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586147736
    },
    {
        "content": "<p>to keep track of progress :-)</p>",
        "id": 192994713,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586147748
    },
    {
        "content": "<p>I've often wondered about this, how feasible it is to have a natural number game / proving for fun / codewars style website to collaboratively work towards a goal one lemma at a time. Sometimes I want to do some lean for mathlib but not spend several hours on a project.</p>",
        "id": 192994852,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586147901
    },
    {
        "content": "<p>Anyone want to: locate in mathlib / PR / generalize-then-PR:</p>\n<div class=\"codehilite\"><pre><span></span>@[simp]\nlemma head_add_tail_sum (L : list ℕ) : L.head + L.tail.sum = L.sum :=\nbegin\n  cases L,\n  { simp, refl, },\n  { simp, },\nend\n\n-- lemma head_le_sum (L : list ℕ) : L.head ≤ L.sum := by library_search -- fails\n\n@[simp]\nlemma tail_sum (L : list ℕ) : L.tail.sum = L.sum - L.head :=\nbegin\n  have := head_add_tail_sum L,\n  omega,\nend\n</pre></div>",
        "id": 192995509,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586148928
    },
    {
        "content": "<p>Is this the sort of thing we could conceivably put on a big list / gamify?</p>",
        "id": 192995547,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586148963
    },
    {
        "content": "<p>Really we need something real time and interactive. :-)</p>",
        "id": 192995691,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586149139
    },
    {
        "content": "<p>By \"all the easy stuff is done\" I mean \"it is no longer the case that a beginner eg Kevin in 2017 can just come along and do the complex numbers\". The elementary stuff which needs doing typically needs to be done in a certain way which beginners can't do. This at least is my impression</p>",
        "id": 192998449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586153136
    },
    {
        "content": "<p>I'm doing quaternions now. It's not much harder than complex numbers...</p>",
        "id": 192998518,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586153210
    },
    {
        "content": "<p>That's a good counterpoint :-)</p>",
        "id": 192998604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586153311
    },
    {
        "content": "<p>sedenions!</p>",
        "id": 193014542,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586164506
    },
    {
        "content": "<p>rofl, I'd never heard of these. A <a href=\"https://en.wikipedia.org/wiki/Sedenion\" title=\"https://en.wikipedia.org/wiki/Sedenion\">16-dimensional algebra in which no axioms hold at all</a>!</p>",
        "id": 193014668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586164565
    },
    {
        "content": "<p>Oh I take that back -- it's a <code>distrib</code>! <em>rofl</em> so <em>that's</em> the point of distribs!</p>",
        "id": 193014724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586164605
    },
    {
        "content": "<p>Lol, also</p>\n<blockquote>\n<p>Moreno (1998) showed that the space of pairs of norm-one sedenions that multiply to zero is homeomorphic to the compact form of the exceptional Lie group G2. (Note that in his paper, a \"zero divisor\" means a pair of elements that multiply to zero.) </p>\n</blockquote>",
        "id": 193015441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586165036
    },
    {
        "content": "<p><em>wow</em> so actually they do have a point :-)</p>",
        "id": 193015705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586165184
    },
    {
        "content": "<p>Oh wait -- homeomorphic? No group structure?</p>",
        "id": 193015732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586165210
    },
    {
        "content": "<p>Do we even have Clifford algebras?</p>",
        "id": 193026381,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586171708
    },
    {
        "content": "<p>Not in mathlib</p>",
        "id": 193026390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586171717
    },
    {
        "content": "<p>But in perfectoid I suppose?</p>",
        "id": 193026402,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586171726
    },
    {
        "content": "<p>nope</p>",
        "id": 193026910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586172038
    },
    {
        "content": "<p>Oh okay</p>",
        "id": 193026978,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586172097
    },
    {
        "content": "<p>Ok, I should have said \"Not in any repo I know of\"</p>",
        "id": 193031326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586174854
    },
    {
        "content": "<p>If you want more algebra I'd suggest doing antisymmetric multilinear forms long before doing Clifford algebras.</p>",
        "id": 193032037,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586175336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/193032037\" title=\"#narrow/stream/113489-new-members/topic/cleaning.20up.20this.20tactic.20proof.20(regarding.20closures)/near/193032037\">said</a>:</p>\n<blockquote>\n<p>If you want more algebra I'd suggest doing antisymmetric multilinear forms long before doing Clifford algebras.</p>\n</blockquote>\n<p>Isn't something being worked on? I have seen some commits multilinear/* but I don't know what's the state of all this</p>",
        "id": 193039360,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586178929
    },
    {
        "content": "<p>Yes, Sébastien did a lot on multilinear on his way to higher order derivatives and then analytic functions. But I really mean exterior algebras.</p>",
        "id": 193043043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586180583
    },
    {
        "content": "<p>In particular we probably want to do it right in full generality, provided this doesn't make elementary examples too painful.</p>",
        "id": 193043133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586180626
    },
    {
        "content": "<p>There is a tension between having <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mi>k</mi></msup><msup><mi>V</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Lambda^k V^*</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> seen as the subspace of multilinear maps from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>V</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">V^k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> to the base field which happen to be antisymmetric, which is nice and concrete, and the fact this is clearly wrong in positive characteristic where there is no other choice than seeing it as a <em>quotient</em> of the tensor algebra.</p>",
        "id": 193043418,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586180759
    },
    {
        "content": "<p>So I would say to first have a look at what we have about tensor algebras (I know there are binary tensor product, but I'm afraid maybe not much more). Then try the quotient route. And then think about simpler things.</p>",
        "id": 193043615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586180860
    }
]