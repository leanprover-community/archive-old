[
    {
        "content": "<p>Im using lean 4, and i have this macro.  I am wondering why it is infinitely recursing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Nat'</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Nat'</span> <span class=\"bp\">â†’</span> <span class=\"n\">Nat'</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat'</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">to_nat'</span><span class=\"o\">)</span> <span class=\"s2\">\"nat!\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">to_nat'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">!</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat'.zero</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat'.succ</span> <span class=\"bp\">$</span> <span class=\"n\">nat</span><span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">let</span> <span class=\"n\">seven</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">!</span> <span class=\"mi\">7</span><span class=\"bp\">;</span> <span class=\"n\">seven</span>\n<span class=\"c\">/-</span><span class=\"cm\"> maximum recursion depth has been reached (use `set_option maxRecDepth &lt;num&gt;` to increase limit) -/</span>\n</code></pre></div>",
        "id": 275508183,
        "sender_full_name": "Joseph O",
        "timestamp": 1647436419
    },
    {
        "content": "<p>Won't <code>nat! 0</code> match both rules? And then <code>nat!($n-1)</code> gives <code>nat!0</code> because <code>0 - 1 = 0</code>?</p>",
        "id": 275509653,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1647437214
    },
    {
        "content": "<p>Yes, but shouldn't it stop on the first rule?</p>",
        "id": 275510365,
        "sender_full_name": "Joseph O",
        "timestamp": 1647437565
    },
    {
        "content": "<p><code>1-1</code> probably does not match <code>0</code> for macro expansion purposes</p>",
        "id": 275511829,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1647438300
    },
    {
        "content": "<p>Then do you have an alternative solution?</p>",
        "id": 275511919,
        "sender_full_name": "Joseph O",
        "timestamp": 1647438332
    }
]