[
    {
        "content": "<p>I don't think I fully grok how sets work. How does one prove the following?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">⋃₀</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 208303191,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1598587547
    },
    {
        "content": "<p>There are many many proofs. The first thing I hit was</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">⋃₀</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208303620,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598588171
    },
    {
        "content": "<p>The thinking goes </p>\n<ul>\n<li>\"we're trying to prove sets are equal, so lets do it elementwise\" : <code>ext</code></li>\n<li>\"presumably mathlib knows something about this situation\": <code>simp</code></li>\n<li>\"we're trying to prove something with universal quantifiers: <code>intros</code></li>\n<li>\"the hypothesis <code>h</code> looks helpful, and we now have a suitable argument for it:\" <code>rw</code></li>\n<li>\"surely it's easy from here\":  <code>simp</code></li>\n</ul>",
        "id": 208303639,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598588254
    },
    {
        "content": "<p>I don't doubt that one of our golfers will come up with something shorter. :-)</p>",
        "id": 208303642,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598588270
    },
    {
        "content": "<p>And I'm sure a pure term mode proof is available too.</p>",
        "id": 208303692,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598588285
    },
    {
        "content": "<p>If you try <code>by suggest</code></p>",
        "id": 208303917,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598588630
    },
    {
        "content": "<p>the top result is <code>exact Sup_eq_bot.mpr h</code></p>",
        "id": 208303957,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598588647
    },
    {
        "content": "<p>i.e. this lemma is already in the library (unsuprisingly)</p>",
        "id": 208303970,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598588662
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Sup_eq_bot/src\">src#Sup_eq_bot</a></p>",
        "id": 208303971,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598588672
    },
    {
        "content": "<p>which is a term mode proof</p>",
        "id": 208303983,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598588709
    },
    {
        "content": "<p>Learning a ton from your answer, thank you so much!</p>\n<p>That first simp makes everything much clearer, that's the big step I was missing.</p>",
        "id": 208304129,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1598588919
    },
    {
        "content": "<p><code>ext</code> is an extremely useful tactic, that does many things. But generally it means \"prove an equality 'componentwise'\".</p>",
        "id": 208304626,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598589592
    },
    {
        "content": "<p>heh, I tried <code>by suggest</code>, got briefly confused, and then realised it wasn't finding the theorem because I hadn't imported <code>data.set.lattice</code>. so here's a (probably very not-idiomatic) term-mode proof that does not invoke the properties of a complete lattice, and proceeds naïvely by \"<code>set α</code> in lean is just <code>α → Prop</code>\":</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">⋃₀</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span> <span class=\"k\">in</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"n\">ha</span> <span class=\"bp\">▸</span> <span class=\"n\">hs</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hx</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 208304906,
        "sender_full_name": "Jean Lo",
        "timestamp": 1598589948
    },
    {
        "content": "<blockquote>\n<p>ext is an extremely useful tactic</p>\n</blockquote>\n<p>I got that far, but after ext, I didn't know how to turn the set membership proposition into something I could intro. I guess I still don't understand what <code>x ∈ s</code> means exactly</p>",
        "id": 208304948,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1598589975
    },
    {
        "content": "<p>Even this much simpler thing, I'm not sure how to prove:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>suggest doesn't seem to help much.</p>",
        "id": 208305241,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1598590411
    },
    {
        "content": "<p>Ok, yeah, that was actually easy</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">eq</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208305949,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1598591323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329777\">@Sebastián Galkin</span> Internally a subset of X, ie <code>s : set X</code>, is just implemented as a function <code>s : X -&gt; Prop</code> and <code>x \\in s</code> is sugar for <code>s x</code>. But all the interface is there for you to not have to think about this internal representation.</p>",
        "id": 208312864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598599564
    }
]