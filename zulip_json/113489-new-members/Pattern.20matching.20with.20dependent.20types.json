[
    {
        "content": "<p>Hi,<br>\nI would like to write a small interpreter, as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nn</span>  <span class=\"o\">:</span> <span class=\"n\">τ</span>\n<span class=\"bp\">|</span> <span class=\"n\">bb</span> <span class=\"o\">:</span> <span class=\"n\">τ</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">τ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"o\">:</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ei</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">nn</span>\n<span class=\"bp\">|</span> <span class=\"n\">Eb</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">bb</span>\n<span class=\"bp\">|</span> <span class=\"n\">Eplus</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">nn</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">nn</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">nn</span>\n<span class=\"bp\">|</span> <span class=\"n\">Eand</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">bb</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">bb</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">bb</span>\n<span class=\"bp\">|</span> <span class=\"n\">Eequal</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">τeval</span> <span class=\"o\">:</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nn</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">bb</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Eeval</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">τeval</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Ei</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Eb</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Eplus</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Eeval</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Eeval</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Eand</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Eeval</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Eeval</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Eequal</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eqdec</span> <span class=\"o\">(</span><span class=\"n\">Eeval</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Eequal</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>However, I do not know how to write the patterns in the function <code>Eeval</code>: how do I handle the argument <code>α</code>?</p>\n<p>Also, in the last pattern I will need a boolean equality test for nat and bool. Is there a way to search the library, e.g., <code>#search nat -&gt; nat -&gt; bool</code>? to find functions of that type?</p>",
        "id": 211201189,
        "sender_full_name": "Benedikt Ahrens",
        "timestamp": 1600989209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258163\">@Benedikt Ahrens</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nn</span>  <span class=\"o\">:</span> <span class=\"n\">τ</span>\n<span class=\"bp\">|</span> <span class=\"n\">bb</span> <span class=\"o\">:</span> <span class=\"n\">τ</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">τ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"o\">:</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ei</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">nn</span>\n<span class=\"bp\">|</span> <span class=\"n\">Eb</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">bb</span>\n<span class=\"bp\">|</span> <span class=\"n\">Eplus</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">nn</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">nn</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">nn</span>\n<span class=\"bp\">|</span> <span class=\"n\">Eand</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">bb</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">bb</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">bb</span>\n<span class=\"bp\">|</span> <span class=\"n\">Eequal</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">bb</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">τeval</span> <span class=\"o\">:</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nn</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">bb</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">τeval</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">α</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Exp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Eeval</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">},</span> <span class=\"n\">Exp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">τeval</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">nn</span> <span class=\"o\">(</span><span class=\"n\">Ei</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">bb</span> <span class=\"o\">(</span><span class=\"n\">Eb</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">nn</span> <span class=\"o\">(</span><span class=\"n\">Eplus</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">Eeval</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Eeval</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">bb</span> <span class=\"o\">(</span><span class=\"n\">Eand</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">band</span> <span class=\"o\">(</span><span class=\"n\">Eeval</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Eeval</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Eequal</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">Eeval</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Eeval</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 211204742,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600992229
    },
    {
        "content": "<p>(Notice this required changing <code>Eequal b</code> to <code>Eeval b</code> in the last line, and <code>| Eequal {a : τ} : Exp a → Exp a → Exp a</code> to <code>| Eequal {a : τ} : Exp a → Exp a → Exp bb</code>.)</p>",
        "id": 211204815,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600992277
    },
    {
        "content": "<p>You may not like the approach I used here of using normal <code>Prop</code>-valued equality, and then a <code>decidable_eq</code> instance to allow casting to <code>bool</code>, but it is the idiomatic Lean way. :-)</p>",
        "id": 211204853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600992322
    },
    {
        "content": "<p>Regarding searching, there are tactics <code>library_search</code> and <code>suggest</code>, which try to solve the current goal using a single lemma from the library and available hypotheses. They won't help much with <code>nat -&gt; nat -&gt; bool</code>. There is <code>#find</code>, but it is unfortunately not very good. (Perhaps could become better with some love, however!)</p>",
        "id": 211204946,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600992407
    },
    {
        "content": "<p>Notice that in the line <code>| nn (Eplus a b) := ((Eeval a) + (Eeval b) : nat)</code> I had to help Lean along by adding a type ascription --- typeclass resolution is done at a syntactic level, so it's not cleverer enough to \"see through\" <code>τeval nn</code> and realise you are trying at add natural numbers.</p>",
        "id": 211205061,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600992504
    },
    {
        "content": "<p>Another approach would be to add a <code>has_add</code> instance (or more likely, <code>semiring</code>) for <code>τeval nn</code> (just by unfolding the definition and then using <code>apply_instance</code> to pick up the instance for <code>nat</code>).</p>",
        "id": 211205111,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600992552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> : Thanks a lot for all the information. Yes, I had some typos in my example, thanks for spotting them. Your explanations have helped me a lot in understanding Lean. I will play around a bit with the different approaches you are suggesting.</p>",
        "id": 211353382,
        "sender_full_name": "Benedikt Ahrens",
        "timestamp": 1601115528
    }
]