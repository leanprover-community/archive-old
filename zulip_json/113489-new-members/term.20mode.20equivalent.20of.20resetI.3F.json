[
    {
        "content": "<p>I'm in a situation similar to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.isomorphism</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_iso</span> <span class=\"n\">f</span><span class=\"o\">],</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">resetI</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">inv</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Only instead of the <code>exact inv f</code>, imagine a more complicated term, using the local instance <code>i</code> in multiple places. I'm a little annoyed that I have to go into tactic mode, just for the <code>resetI</code>. Can I avoid this somehow? The only alternative I see is using <code>@</code> and passing instances around explicitly, but that seems more complicated than it needs to be...</p>",
        "id": 250501847,
        "sender_full_name": "Justus Springer",
        "timestamp": 1629818829
    },
    {
        "content": "<p><code>by exactI</code> is the common hack I think, but it's not a great situation</p>",
        "id": 250502163,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629818966
    },
    {
        "content": "<p>Its so common there was even some fancy notation for it for LTE <a href=\"#narrow/stream/113488-general/topic/by.20exactI/near/222908190\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/by.20exactI/near/222908190</a></p>",
        "id": 250502405,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629819066
    },
    {
        "content": "<p>the notation is actually now a zero-width space, as they use it so much</p>",
        "id": 250502497,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629819112
    },
    {
        "content": "<p>Thanks, I didn't know about <code>exactI</code>.</p>",
        "id": 250502673,
        "sender_full_name": "Justus Springer",
        "timestamp": 1629819183
    },
    {
        "content": "<p>The best way to learn a new tactic is by discovering its use case independently :)</p>",
        "id": 250502740,
        "sender_full_name": "Justus Springer",
        "timestamp": 1629819208
    }
]