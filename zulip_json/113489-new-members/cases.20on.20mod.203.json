[
    {
        "content": "<p>Is there a better way to prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_mod</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">nat.add_mod</span><span class=\"o\">],</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">hn</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">hn</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226269487,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1613252883
    },
    {
        "content": "<p>Some purely local optimizations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_mod</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">nat.add_mod</span><span class=\"o\">],</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">hn</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span><span class=\"bp\">;</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226269725,
        "sender_full_name": "Yevhenii Diomidov",
        "timestamp": 1613253221
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">nat.mod_lt</span> <span class=\"n\">n</span> <span class=\"n\">zero_lt_three</span><span class=\"o\">,</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226269817,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1613253339
    },
    {
        "content": "<p>Thanks, that's exactly what I was looking for (and also thanks Yevhenii, I didn't know about the | notation)</p>",
        "id": 226269925,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1613253456
    },
    {
        "content": "<p>Just for the sake of completeness, here is a term mode proof based on <code>mod_two_eq_zero_or_one</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">nat.mod_lt</span> <span class=\"n\">n</span> <span class=\"mi\">3</span> <span class=\"n\">dec_trivial</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span>   <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span>   <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">or.inr</span> <span class=\"bp\">$</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"o\">,</span>   <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">or.inr</span> <span class=\"bp\">$</span> <span class=\"n\">or.inr</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226270026,
        "sender_full_name": "Yevhenii Diomidov",
        "timestamp": 1613253580
    }
]