[
    {
        "content": "<p>I'm working with finite lattices, and I would like to give a special name to the bottom element which I've proven exists:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lat</span><span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nempty</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">fin</span> <span class=\"n\">lat</span> <span class=\"n\">nempty</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_bot</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>How could I do this?</p>",
        "id": 250678106,
        "sender_full_name": "Lucas Polymeris",
        "timestamp": 1629923437
    },
    {
        "content": "<p>That element is already called bot, and is written \\bot</p>",
        "id": 250678394,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629923577
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 250678412,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629923590
    },
    {
        "content": "<p>No it is not, just of bunded_lattices</p>",
        "id": 250678455,
        "sender_full_name": "Lucas Polymeris",
        "timestamp": 1629923612
    },
    {
        "content": "<p>You're right.</p>",
        "id": 250678558,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629923654
    },
    {
        "content": "<p>You can use fintype.choose</p>",
        "id": 250678576,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629923667
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.choose\">docs#fintype.choose</a></p>",
        "id": 250678602,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629923680
    },
    {
        "content": "<p>thanks. Do you know if I can prove a structure to _be_ other? Like if I could prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> is also a <a href=\"https://leanprover-community.github.io/mathlib_docs/order/bounded_lattice.html#bounded_lattice\">bounded_lattice</a> would also be nice</p>",
        "id": 250678762,
        "sender_full_name": "Lucas Polymeris",
        "timestamp": 1629923764
    },
    {
        "content": "<p>To make your example a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> please include the imports and variables so we don't have to guess them e.g:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lat</span><span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nempty</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">fin</span> <span class=\"n\">lat</span> <span class=\"n\">nempty</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_bot</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 250679359,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629924035
    },
    {
        "content": "<p>For the second question you can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_bot</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">bounded_lattice</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_top</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">bot_le</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 250679771,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629924253
    },
    {
        "content": "<p>Sorry, mb, I'm working with the following setup</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.basic</span> <span class=\"n\">order.lattice</span> <span class=\"n\">data.fintype.basic</span> <span class=\"n\">data.finset.basic</span> <span class=\"n\">algebra.order</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">mysec</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lat</span><span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nempty</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">fin</span> <span class=\"n\">lat</span> <span class=\"n\">nempty</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">minimum</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_bot</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">minimum</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 250679780,
        "sender_full_name": "Lucas Polymeris",
        "timestamp": 1629924257
    },
    {
        "content": "<p>I'd do this via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.bounded_lattice\">docs#fin.bounded_lattice</a> and the fin to fintype order iso whose name I can never recall</p>",
        "id": 250679888,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629924342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20element.2C.20given.20its.20existence.20and.20uniqueness/near/250679771\">said</a>:</p>\n<blockquote>\n<p>For the second question you can do:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_bot</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">bounded_lattice</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_top</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">bot_le</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>it_complaints that a declaration named <code>bounded_lattice</code> has already been declared. Does this mean is already in some of my imports the fact that a finite lattice is bounded?</p>",
        "id": 250680586,
        "sender_full_name": "Lucas Polymeris",
        "timestamp": 1629924696
    },
    {
        "content": "<p>No, it just means that the autogenerated name clashes with an existing name, afaiu.</p>",
        "id": 250681575,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629925123
    },
    {
        "content": "<p>You can do it like this I guess:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_bot</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"n\">fintype.bounded_lattice</span> <span class=\"o\">:</span> <span class=\"n\">bounded_lattice</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some</span> <span class=\"n\">exists_bot.exists</span><span class=\"o\">,</span>\n  <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"n\">order_dual.of_dual</span> <span class=\"bp\">$</span> <span class=\"n\">classical.some</span> <span class=\"n\">exists_bot.exists</span><span class=\"o\">,</span>\n  <span class=\"n\">le_top</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">order_dual.le_to_dual</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">classical.some_spec</span> <span class=\"n\">exists_bot.exists</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">bot_le</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some_spec</span> <span class=\"n\">exists_bot.exists</span> <span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 250682309,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629925426
    },
    {
        "content": "<p>It's probably easier to read to just prove existence of the bot element, then you'll get uniqueness from that</p>",
        "id": 250682579,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629925536
    },
    {
        "content": "<p>Exists unique isn't really used so much in mathlib, you're just packing up two facts into one.</p>",
        "id": 250682683,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629925572
    },
    {
        "content": "<p>Is <a href=\"https://github.com/leanprover-community/mathlib/issues/7123\">#7123</a> relevant here?</p>",
        "id": 250683441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629925876
    },
    {
        "content": "<p>Specifically the <code>fintype.bounded_lattice</code> it provides</p>",
        "id": 250683692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629925989
    },
    {
        "content": "<p>It even does everything constructively <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 250684473,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629926348
    },
    {
        "content": "<p>Does it have the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">lattice.of_order_iso</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sup</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f.symm</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">f.symm</span> <span class=\"n\">b'</span><span class=\"o\">),</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">),</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f.symm.le_iff_le.mp</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"bp\">...</span><span class=\"c1\">-- sorry</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">bounded_lattice.of_order_iso</span> <span class=\"o\">[</span><span class=\"n\">bounded_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">bounded_lattice</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span>\n  <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">⊥</span><span class=\"o\">,</span>\n  <span class=\"n\">le_top</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f.symm_apply_le.mp</span> <span class=\"n\">le_top</span><span class=\"o\">,</span>\n  <span class=\"n\">bot_le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f.le_symm_apply.mp</span> <span class=\"n\">bot_le</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">lattice.of_order_iso</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 250684687,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629926440
    },
    {
        "content": "<p>Ah I guess I need <code>linear_order α</code> to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.order_iso_of_fin\">docs#finset.order_iso_of_fin</a></p>",
        "id": 250685350,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629926762
    },
    {
        "content": "<p>btw <code>fintype.choose</code> is also constructive. <code>fintype.choose</code> or <code>finset.fold</code> might have different performance characteristics -- the latter will terminate on finding the bot element, but verifying that it is the bot element requires checking <code>&lt;=</code> for all elements. So worst-case is N^2.</p>",
        "id": 250685960,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629927082
    },
    {
        "content": "<p>I was trying to prove <a href=\"https://en.wikipedia.org/wiki/Birkhoff%27s_representation_theorem\">Birkhoff's representation theorem</a> for distributive lattices. And indeed <a href=\"https://git.sr.ht/~average-user/birkhoff\"> Idid</a>, but I ended up using<br>\n<code>bounded_distrib_lattice</code> as the base type. Later I would still like to prove it from <code>fintype</code> and <code>lattice</code>. But for now this is what I'v got.  If anyone wants to criticize the work ,I'll be happy to learn from your comments, and thank's for the ones already made. I'll now try to figure out that part.</p>",
        "id": 251025790,
        "sender_full_name": "Lucas Polymeris",
        "timestamp": 1630123638
    }
]