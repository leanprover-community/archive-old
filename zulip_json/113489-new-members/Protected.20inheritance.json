[
    {
        "content": "<p>I do not understand how I access the fields of an inherited structure such as, in this example</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">c</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">a</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p><code>bar.a</code></p>",
        "id": 202840082,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593814943
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">c</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">to_foo</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">a</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">a</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">foo&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">bar&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">bar&#39;</span><span class=\"bp\">.</span><span class=\"n\">c</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">bar&#39;</span><span class=\"bp\">.</span><span class=\"n\">a</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo&#39;</span><span class=\"bp\">.</span><span class=\"n\">a</span>\n</code></pre></div>",
        "id": 202840198,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593815089
    },
    {
        "content": "<p>But I need to go to bed, so I'll let other elaborate.</p>",
        "id": 202840202,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593815102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Protected.20inheritance/near/202840202\">said</a>:</p>\n<blockquote>\n<p>But I need to go to bed, so I'll let other elaborate.</p>\n</blockquote>\n<p>Sure haha good night!</p>",
        "id": 202840271,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593815177
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">c</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"c1\">-- y.to_foo.a : α</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">a</span>\n</code></pre></div>",
        "id": 202840315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593815279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Protected.20inheritance/near/202840315\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">c</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"c1\">-- y.to_foo.a : α</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">a</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>I am not sure I understand why your example works but in any case I still cannot make the following example work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">topological_group_morphism</span>\n<span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">G&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">monoid_hom</span> <span class=\"n\">G</span> <span class=\"n\">G&#39;</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">continuous_to_fun</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">G&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">topological_group_morphism</span> <span class=\"n\">G</span> <span class=\"n\">G&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">topological_group_morphism</span><span class=\"bp\">.</span><span class=\"n\">to_monoid_hom</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 202840515,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593815556
    },
    {
        "content": "<p>I think this works</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">topological_group_morphism</span>\n<span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">G&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">monoid_hom</span> <span class=\"n\">G</span> <span class=\"n\">G&#39;</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">continuous_to_fun</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">G&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">topological_group_morphism</span> <span class=\"n\">G</span> <span class=\"n\">G&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 202841088,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593816511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Protected.20inheritance/near/202841088\">said</a>:</p>\n<blockquote>\n<p>I think this works</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">topological_group_morphism</span>\n<span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">G&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">monoid_hom</span> <span class=\"n\">G</span> <span class=\"n\">G&#39;</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">continuous_to_fun</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">G&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">topological_group_morphism</span> <span class=\"n\">G</span> <span class=\"n\">G&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G&#39;</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Ok thanks this makes some sense! I'll try to understand the details tomorrow!</p>",
        "id": 202841174,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593816653
    },
    {
        "content": "<p>sorry, the version you quoted has a typo that makes it not work. The current version compiles on my end, though, and seems very similar to what you had written</p>",
        "id": 202841187,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593816683
    },
    {
        "content": "<p>Sure I saw the correction ;)</p>",
        "id": 202841246,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593816735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Protected.20inheritance/near/202841187\">said</a>:</p>\n<blockquote>\n<p>sorry, the version you quoted has a typo that makes it not work. The current version compiles on my end, though, and seems very similar to what you had written</p>\n</blockquote>\n<p>Thanks a lot!</p>",
        "id": 202841341,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593816924
    }
]