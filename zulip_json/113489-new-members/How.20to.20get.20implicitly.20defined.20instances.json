[
    {
        "content": "<p>I'm completely new to Lean and formalization, and I was thinking of formalizing some easy results in complexity theory, involving space complexity. I've looked at the existing Turing machine libraries in mathlib, and I wanted to make a \"bounded stack\" type, which is a list that can only have less than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> elements. I especially want it to be a <code>fintype</code> so that I can use the existing cardinality methods, and e.g. show that there are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{O(M)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span> possible configurations for a TM whose stacks are limited by a memory bound <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>.</p>\n<p>I tried the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The set of all possible memory configurations</span>\n<span class=\"kd\">def</span> <span class=\"n\">all_bounded_stacks_set</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finset.univ</span>\n</code></pre></div>\n<p>Here, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is a set which indexes the stacks, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>:</mo><mi>K</mi><mo>→</mo><mtext>Type</mtext></mrow><annotation encoding=\"application/x-tex\">\\Gamma : K \\rightarrow \\text{Type}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\"><span class=\"mord\">Type</span></span></span></span></span> is a function which gives the type of each stack (this is the modeled after the original <code>turing_machine.lean</code> file). Unfortunately, this didn't work. For context, the section parameters go like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">K_eq</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">K_fin</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"n\">_fin</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"c1\">-- Type of stack elements</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span><span class=\"n\">_fin</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"c1\">-- Type of function labels</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ_fin</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"c1\">-- Type of variable settings</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">bounded_space</span>\n<span class=\"c1\">-- The global bound</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>I eventually realized that the issue was that my assumptions like <code>K_eq</code> and <code>Γ_fin</code> were not being used by Lean's inference engine, so I solved it by doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">all_bounded_stacks_set</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"bp\">Γ</span><span class=\"n\">_fin</span><span class=\"o\">,</span>\n      <span class=\"n\">___</span> <span class=\"o\">:=</span> <span class=\"n\">K_eq</span><span class=\"o\">,</span>\n      <span class=\"n\">____</span> <span class=\"o\">:=</span> <span class=\"n\">K_fin</span>\n  <span class=\"k\">in</span> <span class=\"n\">finset.univ</span>\n</code></pre></div>\n<p>Is there a better way? What I'd really like to do is not have to rely on the inference as much, because I can never tell what I'm actually missing for Lean to understand, and it's just really frustrating. For example, if I replace the above with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">all_bounded_stacks</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">all_bounded_stacks_set</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset</span> <span class=\"n\">all_bounded_stacks</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"bp\">Γ</span><span class=\"n\">_fin</span><span class=\"o\">,</span>\n      <span class=\"n\">___</span> <span class=\"o\">:=</span> <span class=\"n\">K_eq</span><span class=\"o\">,</span>\n      <span class=\"n\">____</span> <span class=\"o\">:=</span> <span class=\"n\">K_fin</span>\n  <span class=\"k\">in</span> <span class=\"n\">finset.univ</span>\n</code></pre></div>\n<p>it fails, maybe because it is too deep.</p>\n<p>So if I want to use <code>finset.univ</code> explicitly, <code>@finset.univ</code> requires the type <code>T</code> and a proof of finiteness, <code>fintype T</code>. But I don't know how to \"retrieve\" the implied instance from mathlib. In order to get <code>all_bounded_stacks_fintype</code> I had to make everything explicit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- A single bounded stack</span>\n<span class=\"kd\">def</span> <span class=\"n\">bounded_stack</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- A single bounded stack has only finitely many possibilities</span>\n<span class=\"kd\">def</span> <span class=\"n\">bounded_stack_fintype</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">bounded_stack</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sigma.fintype</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin.fintype</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">vector.fintype</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"n\">_fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- All K bounded stacks</span>\n<span class=\"kd\">def</span> <span class=\"n\">all_bounded_stacks</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">bounded_stack</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">all_bounded_stacks_fintype</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"n\">all_bounded_stacks</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">@</span><span class=\"n\">pi.fintype</span> <span class=\"n\">K</span> <span class=\"n\">bounded_stack</span> <span class=\"n\">K_eq</span> <span class=\"n\">K_fin</span> <span class=\"n\">bounded_stack_fintype</span>\n</code></pre></div>\n<p>There must be a better way to get the <code>fintype</code>. Moreover, some of the instance types (e.g. product) don't have a name, so I don't know how to get them. For example, I don't know how to make this work at all, not even by explicitly writing everything out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bounded_cfg</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">σ</span> <span class=\"bp\">×</span> <span class=\"n\">all_bounded_stacks</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bounded_cfg_set</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">bounded_cfg</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">all_bounded_stacks_fintype</span><span class=\"o\">,</span>\n      <span class=\"n\">___</span> <span class=\"o\">:=</span> <span class=\"bp\">Λ</span><span class=\"n\">_fin</span><span class=\"o\">,</span>\n      <span class=\"n\">____</span> <span class=\"o\">:=</span> <span class=\"n\">σ_fin</span>\n  <span class=\"k\">in</span> <span class=\"n\">finset.univ</span> <span class=\"c1\">-- This fails</span>\n</code></pre></div>\n<p>Any suggestions?</p>",
        "id": 252051764,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1630819567
    },
    {
        "content": "<p>This looks extremely interesting and ambitious! Imma read your post and comment on it later.</p>",
        "id": 252064819,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1630835394
    },
    {
        "content": "<p>Is this close to what you were aiming for?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">computability.turing_machine</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"c1\">-- Type of stack elements</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span> <span class=\"c1\">-- Type of function labels</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"c1\">-- Type of variable settings</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- max stack size</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bounded_stacks</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">bounded_stacks</span> <span class=\"bp\">Γ</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pi.fintype</span>\n</code></pre></div>",
        "id": 252065320,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630835981
    },
    {
        "content": "<p>Inference fails in your example because <em>named</em> typeclass arguments are not included by default</p>",
        "id": 252067015,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630837880
    },
    {
        "content": "<p>Meanwhile, you forgot to put <code>Γ_fin</code> in square brackets.</p>",
        "id": 252067091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630837929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"437861\">@Praneeth Kolichala</span> <br>\nIf the suggested \"patch\" works, will you please upload the whole code with all imports etc so that I can play with it?</p>",
        "id": 252068696,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1630839675
    }
]