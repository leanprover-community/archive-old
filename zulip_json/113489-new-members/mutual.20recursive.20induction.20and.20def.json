[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"bp\">...</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">t</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>is it possible to define such thing?</p>",
        "id": 231098829,
        "sender_full_name": "kana",
        "timestamp": 1616193280
    },
    {
        "content": "<p>can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 231099037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616193409
    },
    {
        "content": "<p>This is an inductive-recursive type, and the answer is no, at least not directly</p>",
        "id": 231099082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616193450
    },
    {
        "content": "<p>but it might be possible to refactor the recursive function into an inductive relation, and then you can do it by mutual induction</p>",
        "id": 231099106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616193477
    },
    {
        "content": "<p>Your sketch doesn't typecheck, because <code>t</code> is not a type but you wrote <code>forall (a : t)</code></p>",
        "id": 231099230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616193550
    },
    {
        "content": "<p>It is not mwe, because I don't know how to make it workable</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"c1\">-- u means type of type</span>\n<span class=\"bp\">|</span> <span class=\"n\">unit</span>\n<span class=\"kn\">open</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">u</span> <span class=\"c1\">-- injection of types into terms</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">the</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">from_type</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">from_type</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">from_type</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">term.type</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">term.the</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">from_type</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 231099610,
        "sender_full_name": "kana",
        "timestamp": 1616193795
    },
    {
        "content": "<p>You can encode this much using a well-formedness predicate on terms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">unit</span>\n<span class=\"kn\">open</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">the</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">term</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">from_type</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">term.type</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">term.tt</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">term.the</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">term.wf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">term.the</span> <span class=\"n\">β</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">from_type</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">β</span> <span class=\"bp\">∧</span> <span class=\"n\">α.wf</span> <span class=\"bp\">∧</span> <span class=\"n\">x.wf</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">term.type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">term.tt</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">wfterm</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">t.wf</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 231100586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616194430
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 231102423,
        "sender_full_name": "kana",
        "timestamp": 1616195623
    }
]