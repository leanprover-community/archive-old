[
    {
        "content": "<p>My impression was that <code>rw</code> always did a call to <code>refl</code> after rewriting. However, this doesn't seem to be strictly true; <code>example {α} (f : α → α) (hf : f = id) (a : α) : f a = a := by {rw hf}</code> doesn't work, and sticking a <code>refl</code> after fixes it.  I dug into the <code>rw</code> code a bit, and although I'm no monad genius I think I found the reason why <a href=\"https://github.com/leanprover-community/lean/blob/5a3bb32c05bcfa6495384bc5b08b1049f36af9b0/library/init/meta/interactive.lean#L393\">here</a>. It does a \"reducible\" <code>refl</code>, whilst I guess that <code>id</code> is not reducible. My question is, is it worth writing a note of this on the <code>rw</code> tactic docs?</p>",
        "id": 234976048,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1618652706
    },
    {
        "content": "<p>Yes that's right. I don't know anything about meta code but my mental model is \"tries <code>refl</code> but not particularly hard\" -- maybe it doesn't unfold stuff too much or something. Certainly there are instances of rw, refl in mathlib</p>",
        "id": 234979114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618655945
    }
]