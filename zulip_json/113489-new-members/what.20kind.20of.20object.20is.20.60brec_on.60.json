[
    {
        "content": "<p>I just found out about <code>brec_on</code>, which from the tutorial I understand is used when a recursive definition doesn't just depend on the structural predecessors of a term, but on earlier \"ancestors\" terms as well. </p>\n<p>Is <code>brec_on</code> a primitive function, without which we couldn't do such recursion? Or is it translated into something based on <code>rec_on</code>?</p>",
        "id": 206179302,
        "sender_full_name": "Chris M",
        "timestamp": 1596738678
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">bin_tree</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">bin_tree</span><span class=\"bp\">.</span><span class=\"n\">brec_on</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">bin_tree</span><span class=\"bp\">.</span><span class=\"n\">below</span>\n</code></pre></div>\n\n\n<p>I don't know what this last term <code>below</code> is, but I guess it is also auto-generated by <code>inductive</code>, and it shows up in the type signature <code>brec_on</code></p>",
        "id": 206181039,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596739554
    },
    {
        "content": "<p><code>#print</code> will show you how they are defined (which they indeed are)</p>",
        "id": 206181255,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596739651
    },
    {
        "content": "<p>I think only <code>rec</code> is not a definition</p>",
        "id": 206181291,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596739672
    },
    {
        "content": "<p>you mean they are not autogenerated? why does right click on <code>bin_tree.below</code> -&gt; go to source take me to the definition of <code>bin_tree</code>?</p>",
        "id": 206183317,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596740616
    },
    {
        "content": "<p>maybe this means I should trust <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bin_tree.below\">docs#bin_tree.below</a> over right click go to source</p>",
        "id": 206183418,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596740653
    },
    {
        "content": "<p>the docs also don't find it, presumably because of the keyword <code>protected</code> that appears when you <code>#print bin_tree.below</code>?</p>",
        "id": 206183489,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596740689
    },
    {
        "content": "<p>No they are autogenerated, of course</p>",
        "id": 206183509,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596740700
    },
    {
        "content": "<p>But they are not axioms</p>",
        "id": 206183515,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596740704
    },
    {
        "content": "<p>They are automatically generated definitions</p>",
        "id": 206183562,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596740724
    },
    {
        "content": "<p>okay, thanks, I am un-confused, but I'm not still not sure what Chris M's confusion is/was</p>",
        "id": 206183854,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596740854
    },
    {
        "content": "<p>One thing that is confusing/surprising here is that the equation compiler always uses <code>brec_on</code> for structural recursion, even when you write something that looks exactly like an application of <code>rec_on</code></p>",
        "id": 206184040,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596740951
    },
    {
        "content": "<p>I wasn't confused about anything in particular, I'm just trying to get a clear model of how recursion in lean works, and it seems like it's all reduced to <code>rec</code>. I didn't think of using <code>#print</code> for some reason...</p>",
        "id": 206220568,
        "sender_full_name": "Chris M",
        "timestamp": 1596770230
    },
    {
        "content": "<p>What does the <code>b</code> in <code>brec_on</code> mean?</p>",
        "id": 206236353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596790766
    },
    {
        "content": "<p>bounded recursion</p>",
        "id": 206243567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596797188
    },
    {
        "content": "<p>because it is used to compile patterns like <code>f (n + 3) = f n</code> but not <code>f n = f (n / 2)</code></p>",
        "id": 206243594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596797227
    }
]