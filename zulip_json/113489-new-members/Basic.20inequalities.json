[
    {
        "content": "<p>I want to show that <code>y  -  x  &lt;  e</code> given <code>abs(x  -  y)  &lt;  e</code> and <code> x \\leq y</code>.  I found a lemma</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">abs_of_nonpos</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>but I can't figure out how to get <code>x - y \\leq 0</code> from <code> x \\leq y</code>.<br>\nDoes anyone have any hints?</p>",
        "id": 204094215,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1594911086
    },
    {
        "content": "<p>Try <code>linarith</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 204095418,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594911553
    },
    {
        "content": "<p>Other way around, I think, which can be solved with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sub_nonpos_of_le</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 204100181,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1594913505
    },
    {
        "content": "<p>Can you use linarith in the begin end-mode? Because each time I try it, the program seems to get stuck. When I make its own functions then it works.</p>",
        "id": 204100187,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1594913508
    },
    {
        "content": "<p>Alternatively,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n\n\n<p>gives</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">sub_nonpos</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 204100407,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1594913576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294534\">@Emiel Lanckriet</span>  Could you post an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? I don't know what you mean here:</p>\n<blockquote>\n<p>Because each time I try it, the program seems to get stuck. When I make its own functions then it works.</p>\n</blockquote>",
        "id": 204100424,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594913583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294534\">Emiel Lanckriet</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20inequalities/near/204100187\">said</a>:</p>\n<blockquote>\n<p>Can you use linarith in the begin end-mode? Because each time I try it, the program seems to get stuck. When I make its own functions then it works.</p>\n</blockquote>\n<p>Like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"n\">done</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204100788,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594913712
    },
    {
        "content": "<p>Sorry, I must have wrongly identified the problem because I can't seem to reproduce it and the example works.</p>",
        "id": 204101180,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1594913865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294534\">Emiel Lanckriet</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20inequalities/near/204101180\">said</a>:</p>\n<blockquote>\n<p>Sorry, I must have wrongly identified the problem because I can't seem to reproduce it and the example works.</p>\n</blockquote>\n<p>No problem, remember to post minimal working examples:</p>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">https://leanprover-community.github.io/mwe.html</a></p>\n<p>so we can help more effectively.</p>",
        "id": 204101870,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594914139
    },
    {
        "content": "<p>Is there a function that has signature <code>abs(x) &lt; e -&gt; x &gt; 0 -&gt; x &lt; e</code>? Also, is there a way to comb through mathlib using type signatures much like the searches you can do in Hoogle for Haskell commands?</p>",
        "id": 204292167,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1595062579
    },
    {
        "content": "<p>I have found <code>#check (@abs_le ℤ _)</code> I don't  know if there is anything closer.</p>",
        "id": 204292593,
        "sender_full_name": "Eloi",
        "timestamp": 1595063394
    },
    {
        "content": "<p>It looks like this function does not exist yet. Here is one way to write it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">lt_of_abs_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_ordered_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs_lt</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n</code></pre></div>",
        "id": 204292813,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595063784
    },
    {
        "content": "<p>If you state the result you want as an <code>example</code> <code>library_search</code> is often successful. (You can use <code>library_search</code> mid tactic block as well, but often it helps to state a cleaner version of the result you know you're after.)</p>",
        "id": 204292883,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595063963
    },
    {
        "content": "<p>There's also the <code>#find</code> command, but it's unusually pretty unsatisfactory.</p>",
        "id": 204292898,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595063979
    },
    {
        "content": "<p>The other strategy is to know the name ahead of time -- Markus's suggestion is pretty good. Using ctrl+space completion with the correct prefix is often useful.</p>",
        "id": 204292939,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595064042
    },
    {
        "content": "<p>This function has unused inputs so will be rejected by the maths linter :-) <code>abs(x)&lt;e -&gt; x &lt; e</code> without any further assumptions.</p>",
        "id": 204293085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595064325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20inequalities/near/204293085\">said</a>:</p>\n<blockquote>\n<p>This function has unused inputs so will be rejected by the maths linter :-) <code>abs(x)&lt;e -&gt; x &lt; e</code> without any further assumptions.</p>\n</blockquote>\n<p>Ah, I see, thank you. I indeed made a mistake.</p>",
        "id": 204293417,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1595064928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20inequalities/near/204292813\">said</a>:</p>\n<blockquote>\n<p>It looks like this function does not exist yet. Here is one way to write it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">lt_of_abs_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_ordered_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs_lt</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>What does .mp mean in the solution? When I try it specifically for \\R I get an error for this, I already found the solution in a slightly different way, but I was still wondering what .mp does.</p>",
        "id": 204293956,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1595066013
    },
    {
        "content": "<p><code>mp</code> converts an if-and-only-if to an implication from the left to the right side</p>",
        "id": 204294027,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595066144
    },
    {
        "content": "<p>What error do you get? The following works for me:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lt_of_abs_lt</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs_lt</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n</code></pre></div>",
        "id": 204294076,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595066194
    },
    {
        "content": "<p>It is probably because I tried to use the command in begin-end-mode.</p>",
        "id": 204294082,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1595066259
    },
    {
        "content": "<p>If you post your code, I can help you fix it</p>",
        "id": 204294124,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595066312
    },
    {
        "content": "<p>The problem I had before is gone, so now it works, thanks a lot for your help. I don't what I did wrong the first time, but it is apparently not a problem anymore.</p>",
        "id": 204294138,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1595066396
    },
    {
        "content": "<p><code>mp</code> is short for \"modus ponens\" if that helps you remember. (It doesn't help me. :-)</p>",
        "id": 204294182,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595066419
    },
    {
        "content": "<p>I like <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> 's take on it -- \"iMPlies\" :-)</p>",
        "id": 204294979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595068123
    },
    {
        "content": "<p>I find <code>.1</code> and <code>.2</code> easier to remember</p>",
        "id": 204309499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595093237
    }
]