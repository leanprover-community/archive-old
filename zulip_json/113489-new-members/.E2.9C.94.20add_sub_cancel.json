[
    {
        "content": "<p>What am I doing wrong here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"txt\"><pre><span></span><code>invalid apply tactic, failed to unify\n  a + (b + 2) - (b + 2) = a\nwith\n  ?m_3 + ?m_4 - ?m_4 = ?m_3\n</code></pre></div>",
        "id": 264830494,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639473932
    },
    {
        "content": "<p>Hmm, <code>nat.add_sub_cancel</code> seems to work. I guess there is some class instantiation problem with <code>add_sub_cancel</code> that I am not aware of.</p>",
        "id": 264830749,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639474088
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_tsub_cancel_of_le\">docs#add_tsub_cancel_of_le</a></p>",
        "id": 264831043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639474310
    },
    {
        "content": "<p>the nat version holds without the <code>le</code> requirement, though</p>",
        "id": 264831311,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639474461
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.add_sub_cancel\">docs#nat.add_sub_cancel</a> is a different order too though</p>",
        "id": 264831614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639474611
    },
    {
        "content": "<p>So I guess I meant <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_tsub_cancel_right\">docs#add_tsub_cancel_right</a></p>",
        "id": 264831704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639474659
    },
    {
        "content": "<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_tsub_cancel_of_le\">docs#add_tsub_cancel_of_le</a> is a different order of what the goal is</li>\n<li><del> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_tsub_cancel_right\">docs#add_tsub_cancel_right</a> forces me to additionally prove <code>∀ {b : ℕ} ⦃x y : ℕ⦄, b + 2 + x ≤ b + 2 + y → x ≤ y</code></del></li>\n</ul>\n<p>Since <code>apply nat.add_sub_cancel</code> solves the goal, I'll go with it. Why <code>add_sub_cancel</code> from the prelude doesn't work is still a mystery for me, but I guess it is not intended to be used on natural numbers.</p>",
        "id": 264833013,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639475356
    },
    {
        "content": "<p><code>add_tsub_cancel_right</code> works fine here</p>",
        "id": 264833054,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1639475391
    },
    {
        "content": "<p>I mean, <code>add_sub_cancel</code> doesn't work because it's for <code>add_groups</code>, which ℕ is clearly not</p>",
        "id": 264833980,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639475948
    },
    {
        "content": "<p>That makes sense.</p>",
        "id": 264834691,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639476369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> has marked this topic as resolved.</p>",
        "id": 264834695,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639476374
    },
    {
        "content": "<p>It's really unfortunate that Lean doesn't just tell you that it failed to synthesize <code>add_group ℕ</code> or whatever it is--I feel like this should be fixable</p>",
        "id": 264879781,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639497796
    },
    {
        "content": "<p>yeah, I'm used to it by now, but the first time I saw <code>failed to unify ?m_1 + ?m_2 with x + y</code> I was absolutely mystified</p>",
        "id": 264880640,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639498083
    }
]