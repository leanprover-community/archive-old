[
    {
        "content": "<p>Is it possible to prove <code>h</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 185456916,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1578875213
    },
    {
        "content": "<p>No, it's not. Could you say more about what you're trying to do?</p>",
        "id": 185457925,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578877060
    },
    {
        "content": "<p>You would have to write that function like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>The <code>a := 0</code> is trivial of course in this version</p>",
        "id": 185461097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578883389
    },
    {
        "content": "<p>I'm porting some code from Haskell, I was trying to use pattern matching instead of <code>dite</code>.</p>",
        "id": 185473567,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1578904337
    },
    {
        "content": "<p>I'm trying to write a tactic that keeps a pattern match witness, but I'm getting stuck implementing <code>has_reflect</code>. What am I missing here?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"kn\">structure</span> <span class=\"n\">equation</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">witness</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pattern</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"kn\">instance</span> <span class=\"n\">equation</span><span class=\"bp\">.</span><span class=\"n\">reflect</span> <span class=\"o\">:</span> <span class=\"n\">has_reflect</span> <span class=\"n\">equation</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">witness</span><span class=\"o\">,</span> <span class=\"n\">pattern</span><span class=\"o\">,</span> <span class=\"n\">body</span><span class=\"bp\">⟩</span>\n<span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">equation</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">witness</span><span class=\"o\">)</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">pattern</span><span class=\"o\">)</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">body</span><span class=\"o\">))</span>\n<span class=\"c1\">-- equation type mismatch, term has type</span>\n<span class=\"c1\">--   expr</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   reflected {witness := witness, pattern := pattern, body := body}</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">equation</span><span class=\"o\">,</span> <span class=\"n\">reflected</span> <span class=\"n\">x</span>\n<span class=\"c1\">-- λ (x : equation), expr</span>\n</pre></div>",
        "id": 185525421,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1578942288
    },
    {
        "content": "<p>I think you can just do this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">has_reflect</span><span class=\"o\">]</span>\n<span class=\"n\">meta</span> <span class=\"kn\">structure</span> <span class=\"n\">equation</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">witness</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pattern</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 185528421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578943982
    },
    {
        "content": "<p>You have to use some messy methods to get around the typing otherwise:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">dont_tell_me_what_I_cant_do</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">reflected</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">delta</span> <span class=\"n\">reflected</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">id</span>\n\n<span class=\"n\">meta</span> <span class=\"kn\">instance</span> <span class=\"n\">equation</span><span class=\"bp\">.</span><span class=\"n\">reflect</span> <span class=\"o\">:</span> <span class=\"n\">has_reflect</span> <span class=\"n\">equation</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">witness</span><span class=\"o\">,</span> <span class=\"n\">pattern</span><span class=\"o\">,</span> <span class=\"n\">body</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">dont_tell_me_what_I_cant_do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">equation</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">witness</span><span class=\"o\">)</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">pattern</span><span class=\"o\">)</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">body</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 185528815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578944171
    },
    {
        "content": "<p>If you don't construct the term yourself but let lean do it, it is more agreeable:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"kn\">instance</span> <span class=\"n\">equation</span><span class=\"bp\">.</span><span class=\"n\">reflect</span> <span class=\"o\">:</span> <span class=\"n\">has_reflect</span> <span class=\"n\">equation</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">witness</span><span class=\"o\">,</span> <span class=\"n\">pattern</span><span class=\"o\">,</span> <span class=\"n\">body</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 185529053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578944306
    },
    {
        "content": "<p>Splendid, the attribute does work.</p>",
        "id": 185529083,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1578944331
    },
    {
        "content": "<p><code>_</code> seems dodgy.. I have two <del>terms</del> variables of the same type I don't know which one it would pick.</p>",
        "id": 185529255,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1578944407
    },
    {
        "content": "<p>The type is <code>reflect a</code> so lean knows exactly what to put there</p>",
        "id": 185529284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578944432
    },
    {
        "content": "<p>The value is reflected in the type of the goal</p>",
        "id": 185529324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578944464
    },
    {
        "content": "<p>You only need the brute force methods if you want to lie to lean about what the reflected value is</p>",
        "id": 185529352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578944484
    },
    {
        "content": "<p>for example</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"kn\">instance</span> <span class=\"n\">equation</span><span class=\"bp\">.</span><span class=\"n\">reflect</span> <span class=\"o\">:</span> <span class=\"n\">has_reflect</span> <span class=\"n\">equation</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">witness</span><span class=\"o\">,</span> <span class=\"n\">pattern</span><span class=\"o\">,</span> <span class=\"n\">body</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">dont_tell_me_what_I_cant_do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 185529475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578944539
    },
    {
        "content": "<p>What magic makes <code>_</code> work? If I change the pattern match into a <code>let</code>, it fails \"to synthesize type class instance\"</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">|</span> <span class=\"n\">eqn</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">witness</span> <span class=\"o\">:=</span> <span class=\"n\">eqn</span><span class=\"bp\">.</span><span class=\"n\">witness</span><span class=\"o\">,</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">eqn</span><span class=\"bp\">.</span><span class=\"n\">body</span><span class=\"o\">,</span> <span class=\"n\">pattern</span> <span class=\"o\">:=</span> <span class=\"n\">eqn</span><span class=\"bp\">.</span><span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 185530105,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1578944912
    },
    {
        "content": "<p>If you don't pattern match on <code>eqn</code>, the goal is <code>reflect eqn</code>, and then lean's automatic mechanism for deriving reflect instances will use the <code>has_reflect equations</code> instance to synthesize this goal. This fails because we're in the middle of building the instance</p>",
        "id": 185547657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578956581
    },
    {
        "content": "<p>The magic that makes <code> `(_)</code> produce a reflect instance is... magic, it is built into lean's elaborator</p>",
        "id": 185547696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578956629
    }
]