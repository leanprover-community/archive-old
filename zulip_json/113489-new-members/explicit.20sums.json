[
    {
        "content": "<p>I was looking to knock out freek42. I wanted to use a \"discrete FTC\", since that seems to be a clean way to deal with sums in general. I proved what looks like a fine version of it (<code>explicit_sum</code> in the code that follows) but then it's not able to do the <code>rw</code> I designed it for. Any ideas?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">range_insert</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">insert</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"o\">],</span>\n<span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">explicit_sum</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n<span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n<span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)],</span>\n<span class=\"n\">rw</span> <span class=\"n\">sub_eq_iff_eq_add</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">range_insert</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_insert</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">not_mem_range_self</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">],</span>\n\n<span class=\"n\">intro</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hF</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_empty</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range_zero</span><span class=\"o\">],</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_one</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">calc1</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">sub_eq_iff_eq_add</span> <span class=\"n\">at</span> <span class=\"n\">calc1</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">calc1</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">calc1</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span>  <span class=\"err\">←</span> <span class=\"n\">range_insert</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">not_mem_range_self</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_insert</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inverse_triangle_sum</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">revert</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">explicit_sum</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197689536,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589549074
    },
    {
        "content": "<p>er, I suppose the MWE is just</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">explicit_sum</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n<span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inverse_triangle_sum</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">revert</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">explicit_sum</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197689732,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589549171
    },
    {
        "content": "<p>Oh, my anonymous functions are getting typed as <code>ℕ → ℕ</code> instead of <code>ℕ → ℝ</code>, it works just fine if I put in the appropriate typecasts</p>",
        "id": 197690126,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589549393
    },
    {
        "content": "<p>Make sure you add it to <a href=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md\">https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md</a> if you get it done, I think we should add some updates to this list!</p>",
        "id": 197712471,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589558113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  I think we plan to track things on the community website now, see <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml\">this thread</a>.</p>",
        "id": 197712838,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589558284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Thanks, I'm just catching up on all the messages overnight sorry!</p>",
        "id": 197713456,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589558557
    },
    {
        "content": "<p>the \"discrete FTC\" i posted indeed reduced it to some real arithmetic, and i still find that pretty challenging. I'm definitely not claiming a lock on this problem</p>",
        "id": 197717682,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589560415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> Put your stuff on a branch and push it to the repo (-; Then others can/might join in on the fun</p>",
        "id": 197717902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589560481
    },
    {
        "content": "<p>oof</p>",
        "id": 197717968,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589560506
    },
    {
        "content": "<p>by \"the repo\" do you mean mathlib?</p>",
        "id": 197718040,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589560529
    },
    {
        "content": "<p>i don't see why this statement should be in mathlib</p>",
        "id": 197718085,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589560543
    },
    {
        "content": "<p>unless we want a freek folder for collecting answers to the freek problems that don't come straight out of the theory</p>",
        "id": 197718227,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589560578
    },
    {
        "content": "<p>I guess one of the answers is in the archive folder already</p>",
        "id": 197718262,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589560589
    },
    {
        "content": "<p>there is a freek folder</p>",
        "id": 197718316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589560608
    },
    {
        "content": "<p>it's <code>archive/100</code> I think</p>",
        "id": 197718335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589560617
    },
    {
        "content": "<p>i don't see it on my local machine and i ran <code>leanproject up</code> yesterday, does it exist in only a branch?</p>",
        "id": 197718594,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589560700
    },
    {
        "content": "<p>It's not in <code>src/</code></p>",
        "id": 197718682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589560740
    },
    {
        "content": "<p>Aah, it's just not there</p>",
        "id": 197718710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589560760
    },
    {
        "content": "<p>But feel free to make that directory in the <code>archive/</code></p>",
        "id": 197718727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589560772
    }
]