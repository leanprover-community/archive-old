[
    {
        "content": "<p>Hi all, I have a <code>s : finset a</code> for some <code>a : Type</code> and a function <code>f : a  → b</code>, where  <code>(b : Type) [add_comm_monoid b]</code>, so I can consider the sum <code>∑ x in s, f x</code>. I also have another function <code>g: a  → b</code> and I now that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\"> f = g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>, but not in general. I want to prove that <code>∑ x in s, f x = ∑ x in s, g x</code>. How can I prove this? It is something like a <code>rw</code> I guess, but I do not know how tell Lean to use the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\"> f = g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> (actually I am not even able to write this  in Lean, maybe something like <code>x ∈ s → f x = g x</code>, where <code>x : a</code>?). Thank you!</p>",
        "id": 213418020,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602765677
    },
    {
        "content": "<p>I think you want to <code>apply finset.sum_congr</code>.</p>",
        "id": 213418165,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1602765747
    },
    {
        "content": "<p>Oh, thank you! For some reasons I tried to do it by myself without looking into the library.</p>",
        "id": 213418502,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602765924
    },
    {
        "content": "<p>Is there a reason of having in <code>finset.sum_congr</code> two finsets <code>s1</code> and <code>s2</code> with the assumption that <code>s1 = s2</code>?</p>",
        "id": 213418758,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602766049
    },
    {
        "content": "<p>I guess it's just to make it more general, making it possible to vary the set being summed.</p>",
        "id": 213419177,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1602766242
    },
    {
        "content": "<p>But usually I need <code>finset.sum_bij</code> if <code>s1</code> and <code>s2</code> are not literally the same.</p>",
        "id": 213419282,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1602766295
    },
    {
        "content": "<p><code>sum_bij</code> is what you need if <code>s1</code> and <code>s2</code> are not finsets of the same type.</p>",
        "id": 213419934,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602766593
    },
    {
        "content": "<p>Note that there is even <code>sum_bij_ne_zero</code> which is the most awesome version of all (-;</p>",
        "id": 213419975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602766615
    },
    {
        "content": "<p>And <code>fintype.sum_congr</code> if you are looking at two sums over a fintype (i.e. <code>s1 = s2 = (univ : finset X)</code>)</p>",
        "id": 213420029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602766647
    },
    {
        "content": "<p>Wow, <code>sum_bij_ne_zero</code> is scary <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 213420191,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602766713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> the difficulty of some of this finite stuff was quite surprising to me. I am pretty sure that when I arrived on the scene in 2017 trying to do 1st year UG problem sheets, if all the machinery of finite sets and finite types hadn't been there I would have been completely lost and unable to use anything. But people like Mario had built this stuff before. How difficult can a finite set be? Well, <code>data.finset</code> was thousands of lines long in 2017, and it imported <code>data.multiset</code> which was also thousands of lines long -- I once printed out data.multiset onto 28 pages and would sit and read it in the bath trying to fathom out what was going on.</p>",
        "id": 213423280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602767946
    },
    {
        "content": "<p>Yes, the machinery is quite confusing at the beginning, but I guess one gets used to it.</p>",
        "id": 213423437,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602768012
    },
    {
        "content": "<p>It was only much later that I realised that the point was not to see how it was built, it was to understand what the main definitions were (these files are 98% theorems)</p>",
        "id": 213423474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602768025
    },
    {
        "content": "<p>And probably sooner or later I will have to read it in details too.</p>",
        "id": 213423496,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602768032
    },
    {
        "content": "<p>and to start to understand what kind of things are available</p>",
        "id": 213423525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602768043
    },
    {
        "content": "<p>Here is the way to read a file in mathilb. First, check to see if there is a module docstring. If there is, then read all of that first.</p>",
        "id": 213423572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602768066
    },
    {
        "content": "<p>And if there isn't then I guess you could even just make one yourself after you finished reading it.</p>",
        "id": 213423648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602768096
    },
    {
        "content": "<p>Secondly try and find all the definitions and all the instances (use search functionality of your viewer)</p>",
        "id": 213423727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602768123
    },
    {
        "content": "<p>Hopefully each one should have a docstring. They should tell you the main objects you're working with in this file.</p>",
        "id": 213423808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602768146
    },
    {
        "content": "<p>Then scan the theorems to work out the normal form for each new concept, i.e how things are expressed on the right hand side of simp lemmas.</p>",
        "id": 213423921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602768188
    },
    {
        "content": "<p>because simp moves things from left to right</p>",
        "id": 213423944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602768196
    },
    {
        "content": "<p>and then scan the theorems, you probably won't see anything surprising, so skip the proofs.</p>",
        "id": 213424071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602768235
    },
    {
        "content": "<p>Then if there wasn't a module docstring, pop back to the top and write one.</p>",
        "id": 213424158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602768254
    },
    {
        "content": "<p>Oh! There is a tactic for this!</p>",
        "id": 213490209,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602797305
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_congr\">https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_congr</a></p>",
        "id": 213490407,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602797439
    },
    {
        "content": "<p>Very nice, this is exactly what I wanted! :)</p>",
        "id": 213567106,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602858470
    }
]