[
    {
        "content": "<p>When I write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">X</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"err\">ùíú</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">compress</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"n\">U</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">‚à™</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"err\">\\</span> <span class=\"n\">V</span>\n  <span class=\"k\">else</span> <span class=\"n\">A</span>\n</pre></div>\n\n\n<p>I get an error saying \"failed to synthesize type class instance\" for \"decidable (disjoint U A ‚àß V ‚äÜ A)\", but if I rewrite the condition with <code>U ‚à© A = ‚àÖ</code>,  it's fine... I'd like to keep the definition with disjoint though, since every time I use this definition I found myself converting the empty intersection to disjointness. How could I get around this?</p>",
        "id": 183154891,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576070039
    },
    {
        "content": "<p>I proved <code>disjoint U V</code> is decidable instead... Is there a reason this isn't already in <code>data/finset.lean</code>?</p>",
        "id": 183159875,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576073433
    },
    {
        "content": "<p>There's no reason not to have it in mathlib. People tend to add what they use so that might just never have come up before</p>",
        "id": 183221099,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1576114778
    },
    {
        "content": "<p>Okay! Is there an issue with typeclass resolution, since this is saying disjoint on finsets is decidable, but might not be in other cases?</p>",
        "id": 183257373,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576156810
    },
    {
        "content": "<p>With decidable equality on <code>Œ±</code>, disjointness on <code>finset</code> should always be decidable.</p>",
        "id": 183293625,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1576179483
    }
]