[
    {
        "content": "<p>Switching gears from my other project... I'd like to use Lean to check my work with/potentially automate operator arithmetic. Things like quantum mechanics, where I would like to be able to be sure I haven't dropped a commutator somewhere</p>",
        "id": 278917394,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649904895
    },
    {
        "content": "<p>It seems like I can do this by declaring a generic, noncommutative <code>star_ring</code> and using it to make a <code>star_algebra</code>, maybe? Of whatever operators over C</p>",
        "id": 278917470,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649904983
    },
    {
        "content": "<p>but my operators need to be \"square\", when I take their transpose/star they should be the same kind of object</p>",
        "id": 278917499,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649905048
    },
    {
        "content": "<p>I think this means somehow telling lean that <code>mul_opposite A</code> is not just equiv to but actually equal to <code>A</code>, but I'm not entirely sure how to do that safely/rigorously...</p>",
        "id": 278917565,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649905112
    },
    {
        "content": "<p>This should be pretty straightforward actually: square matrices have a ring instance on them, so things like addition and multiplication will just work out of the box.</p>",
        "id": 278919989,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1649908138
    },
    {
        "content": "<p>If you want a more abstract setting, you can see in <code>analysis/normed_space/star/basic</code> how to declare a C*-algebra, and all those operations should also just work.</p>",
        "id": 278920162,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1649908323
    },
    {
        "content": "<p>Yeah, this should \"just work\". Be aware of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#noncomm_ring\">tactic#noncomm_ring</a> which can help you proving some of the arithmetic.</p>",
        "id": 278920284,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649908464
    },
    {
        "content": "<p>Actually we do have an example from quantum mechanics that might be relevant: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/CHSH_inequality_of_comm\">docs#CHSH_inequality_of_comm</a>.</p>",
        "id": 278920337,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1649908534
    },
    {
        "content": "<p>ooh, I'll have to take a look</p>",
        "id": 278920685,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649908828
    },
    {
        "content": "<p>and yeah my worry is that the \"matrices\" I'm working with are continuous-indexed/uncountably infinite, and that can blow things up sometimes</p>",
        "id": 278920712,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649908862
    },
    {
        "content": "<p>notably anything to do with traces and determinants</p>",
        "id": 278920725,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649908878
    },
    {
        "content": "<p>oh, hold on, can you be more specific about exactly what you want to do? Indexing matrices by arbitrary types is fine, but I'm pretty sure we only have traces and determinants if the index types are fintypes.</p>",
        "id": 278921077,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649909271
    },
    {
        "content": "<p>I probably wouldn't be doing anything with them, I just don't have an encyclopedic knowledge of what results depend on them</p>",
        "id": 278924020,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649913376
    },
    {
        "content": "<p>though it would be cool if Lean could magic up a definition for functional determinants out of nowhere :V</p>",
        "id": 278924067,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649913466
    },
    {
        "content": "<p>I think we're rather a long way off before we can define functional determinants.</p>",
        "id": 278924644,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649914175
    },
    {
        "content": "<p>Right now <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.has_mul\">docs#matrix.has_mul</a> requires a finite index type, as does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det\">docs#matrix.det</a></p>",
        "id": 278925750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649915615
    },
    {
        "content": "<p>well, I'm going the C* route for now</p>",
        "id": 278927252,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649917247
    },
    {
        "content": "<p>but unfortunately it doesn't seem to recognize that <code>1 • 1 = 1</code> when <code>1: ℂ</code></p>",
        "id": 278927268,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649917277
    },
    {
        "content": "<p>okay, it looks like it was because I had extraneous information/multiple copies of various typeclasses</p>",
        "id": 278927465,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649917509
    },
    {
        "content": "<p>weird way of telling me tho</p>",
        "id": 278927470,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649917515
    }
]