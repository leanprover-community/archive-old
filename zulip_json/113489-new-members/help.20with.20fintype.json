[
    {
        "content": "<p>I have a type of words over alphabets (which I am treating as enumerated types). </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"err\">Γ</span> <span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">Y</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">word</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">ε</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">word</span>\n<span class=\"bp\">|</span> <span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">word</span> <span class=\"bp\">→</span> <span class=\"n\">word</span>\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"err\">∙</span> <span class=\"bp\">`</span> <span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">word</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"err\">∙</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">word</span> <span class=\"err\">Γ</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I would like to have a <code>matrix (word Γ) (word Γ) _</code>, but this doesn't work as we would need <code>instance : fintype (word Γ)</code> (which surely is not constructible). So I started an attempt at finite words</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">max_length</span> <span class=\"o\">:=</span> <span class=\"mi\">1000</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">finword</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">finword</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">nonempty</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">max_length</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finword</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">finword</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I have no idea really how to prove <code>fintype</code> for this. Maybe I need to rethink my approach. Thanks in advance for any suggestions. For reference I am trying to model what is called on slide 7 here \"Closed and Consistent Finite Hankel Matrices\", which as you can see are in the first instance finite matrices indexed by words in a language (hopefully once I have the correct type for such a matrix, then the closed &amp; consistent predicates will be easy) <a href=\"https://borjaballe.github.io/slides/turing18.pdf\" target=\"_blank\" title=\"https://borjaballe.github.io/slides/turing18.pdf\">https://borjaballe.github.io/slides/turing18.pdf</a></p>",
        "id": 188777502,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582321369
    },
    {
        "content": "<p>I would just not use <code>matrix</code></p>",
        "id": 188778987,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582322503
    },
    {
        "content": "<p>A function seems fine</p>",
        "id": 188779003,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582322520
    },
    {
        "content": "<p>hm, yes I suppose a \"partial\" function <code>word α -&gt; word α -&gt; option bool</code> could work... I was thinking it would be useful to draw on the <code>matrix</code> methods, but actually it does not have the main thing I need which is some kind of <code>add_row</code>. let's see if I can define that...</p>",
        "id": 188779994,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582323380
    },
    {
        "content": "<p>so this is working well enough so far:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">table</span> <span class=\"o\">:=</span> <span class=\"n\">word</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">word</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">bool</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add_row</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">table</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"o\">:</span> <span class=\"n\">word</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">entries</span> <span class=\"o\">:</span> <span class=\"n\">word</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">update</span> <span class=\"n\">t</span> <span class=\"n\">row</span> <span class=\"n\">entries</span>\n\n<span class=\"n\">def</span> <span class=\"n\">consistent</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">table</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">word</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">p₁</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"n\">p₂</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"err\">∙</span><span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"err\">∙</span><span class=\"n\">p₂</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>now, ideally I would have a function that for any table, either proves consistency or gives a counterexample (or at least gives a bool answer for consistent or not). I should be able to construct that function as a term of some type right? I'm having trouble getting started</p>",
        "id": 188793709,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582338748
    },
    {
        "content": "<p>You should probably make <code>table</code> a definition rather than a notation</p>",
        "id": 188794472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582339999
    },
    {
        "content": "<p>You can't decide <code>consistent T</code> unless <code>word A</code> is finite</p>",
        "id": 188794516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582340048
    },
    {
        "content": "<p>and <code>A</code></p>",
        "id": 188794526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582340067
    },
    {
        "content": "<p>The type you want to construct is <code>decidable (consistent T)</code></p>",
        "id": 188794545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582340113
    },
    {
        "content": "<p>although this is only the weaker form; for the stronger form you need some specialized proof-or-counterexample type</p>",
        "id": 188794551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582340162
    },
    {
        "content": "<p>thanks. so I'm back to square one - I know how to deal with proving <code>fintype A</code> but <code>word A</code> just isn't finite (it is basically <code>list A</code>). so was my original <code>finword</code>sketch possibly a non insane idea?</p>",
        "id": 188808316,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582362691
    },
    {
        "content": "<p>right, so I'm pretty happy with this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">x</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">fin</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">finword</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span>    <span class=\"o\">{}</span>      <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>     <span class=\"o\">:</span> <span class=\"n\">finword</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">nonempty</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">len</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finword</span> <span class=\"n\">n</span> <span class=\"n\">len</span> <span class=\"bp\">→</span> <span class=\"n\">finword</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">len</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"err\">∙</span> <span class=\"bp\">`</span> <span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">finword</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ε</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">finword</span><span class=\"bp\">.</span><span class=\"n\">empty</span>\n</pre></div>\n\n\n<p>but now I'm stuck on the type of tables:<br>\n<code>def mytable : finword α 100 _ → finword α 100 _ → option bool |  ε ε := tt ...</code> clearly isn't valid, but neither is filling in any particular <code>fin</code> for the <code>_</code>. so it seems I would need to make that argument implicit in <code>finword</code>, but I'm not sure if that's possible...</p>",
        "id": 188819826,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582382013
    },
    {
        "content": "<p>this works, including the word lengths manually but is not very elegant</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">mytable</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">},</span> <span class=\"n\">finword</span> <span class=\"err\">Γ</span> <span class=\"mi\">10</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">finword</span> <span class=\"err\">Γ</span> <span class=\"mi\">10</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">zero</span>  <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">zero</span>  <span class=\"n\">ε</span>          <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"err\">∙</span><span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n</pre></div>",
        "id": 188820722,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582383558
    },
    {
        "content": "<p>and further, for a moderately sized table, lean does not want to compile it (<code>deep recursion was detected at 'replace'</code>)</p>",
        "id": 188821509,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582384910
    },
    {
        "content": "<p>This is not what you want - each <code>finword A n i</code> is isomorphic to <code>A</code>, so it doesn't represent the type of words. You need <code>empty</code> and <code>nonempty</code> to be able to inhabit the same type for that. I suggest:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">finword</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">{}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finword</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nonempty</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finword</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">finword</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 188833441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582406037
    },
    {
        "content": "<p>Where <code>fin</code> comes in is that you can define a bijection between <code>finword A n</code> and <code>fin n -&gt; A</code></p>",
        "id": 188833513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582406138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> that's perfect, thanks. I got into a subtle confusion but I see now</p>",
        "id": 188834255,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582407470
    },
    {
        "content": "<p>Actually, I think <code>empty</code> needs type <code>finword 0</code> if you want this to be like the type <code>vector A n</code></p>",
        "id": 188834310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582407568
    },
    {
        "content": "<p>true</p>",
        "id": 188834362,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582407622
    },
    {
        "content": "<p>I think the original should work for my purposes</p>",
        "id": 188834489,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582407900
    },
    {
        "content": "<p>I am proving <code>decidable (consistent T)</code> for a special case to get a feel for the general one. blanking on how to solve a goal of the form:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span>  <span class=\"bp\">=</span> <span class=\"n\">f</span>  <span class=\"n\">y</span>\n<span class=\"err\">⊢</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">c</span>\n</pre></div>\n\n\n<p>where <code>a_1</code> is false... it's late</p>",
        "id": 188841405,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582419954
    },
    {
        "content": "<p>If you can get a term <code>t : false</code>, then <code>t.elim</code> will solve the goal. Similarly, if you have <code>ha : a</code> and <code>hna: ¬a</code>, <code>absurd ha hna</code> will work.</p>",
        "id": 188841861,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582420547
    },
    {
        "content": "<p>You can use <code>exfalso</code> to make the goal <code>false</code> explicitly, but it's rarely necessary. Once you prove the context is contradictory it usually doesn't matter what the goal is</p>",
        "id": 188842106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582420976
    },
    {
        "content": "<p>cheers, remember these from the NNG but actually introducing the relevant term was tripping me up... got there in the end</p>",
        "id": 188842591,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582421924
    },
    {
        "content": "<p>I feel it will be brutal to generalize this proof to any table...</p>",
        "id": 188842674,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582422095
    },
    {
        "content": "<p>Hello! I'm trying to construct an object for all fintypes, i.e. I want a conclusion of the form <code>∀ (J: Type u) [fintype J], C J</code> for some motive <code>C</code>. I scoured the chat for ways to construct stuff out of fintypes and it seems one way to do it is by induction on <code>fintype.card</code>, but the inductive step is really awkward since one needs to construct something like \"a fintype-with-one-object-less-than-J given that <code>fintype.card J = nat.succ n</code>\". Constructing my thing would be quite nice given the following recursion principle:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">myrec</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">J</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">J</span><span class=\"o\">],</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">C0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">pempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">CS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">J&#39;</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">J&#39;</span><span class=\"o\">],</span> <span class=\"n\">C</span> <span class=\"n\">J&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"err\">⊕</span> <span class=\"n\">J&#39;</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">J</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">J</span><span class=\"o\">],</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">C</span> <span class=\"n\">J</span>\n</pre></div>\n\n\n<p>The problem is I'm not quite sure if this is provable, or even true. Might it be?</p>",
        "id": 189127374,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1582732708
    },
    {
        "content": "<p>My guess is that this would only be provable if you can prove that <code>C</code> is constant on isomorphism classes, i.e. if there's a bijection between J and K then C(J)=C(K).</p>",
        "id": 189127826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582732930
    },
    {
        "content": "<p>Because your assumptions will enable to you prove C(unit ⊕ unit ⊕ ... ⊕ unit) but where do you go from there unless you know C is constant on isomorphism classes?</p>",
        "id": 189127974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582733027
    },
    {
        "content": "<p>Thank you, this does sound reasonable. So something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">myrec</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">J</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">J</span><span class=\"o\">],</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">C0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">pempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">CS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">J&#39;</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">J&#39;</span><span class=\"o\">],</span> <span class=\"n\">C</span> <span class=\"n\">J&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"err\">⊕</span> <span class=\"n\">J&#39;</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"n\">J&#39;</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">J&#39;</span><span class=\"o\">],</span> <span class=\"n\">J</span> <span class=\"err\">≃</span> <span class=\"n\">J&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">J</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">J&#39;</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">J</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">J</span><span class=\"o\">],</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">C</span> <span class=\"n\">J</span>\n</pre></div>\n\n\n<p>might be true.</p>",
        "id": 189133624,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1582736444
    },
    {
        "content": "<p>Yes it might be, but if C is really taking values in Sort v then the danger here is that it might be hard to prove <code>C J = C J'</code>. Equality of types is a thorny subject.</p>",
        "id": 189134307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582736894
    },
    {
        "content": "<p>You should be able to do this with only the assumption <code>J ≃ J' → C J ≃ C J'</code>.</p>",
        "id": 189138404,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582739276
    },
    {
        "content": "<p>But at this point you might as well just prove <code>nonempty (C J)</code></p>",
        "id": 189141213,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582740873
    },
    {
        "content": "<p>So you might as well just assume C takes values in Props</p>",
        "id": 189141259,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582740911
    },
    {
        "content": "<p>This is assuming you don't intend to prove any lemmas about <em>which</em> value <code>my_rec</code> takes, but it's hard to see what kind of lemma you could expect to have.</p>",
        "id": 189142256,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582741505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Wouldn't <code>def myC (J: Type u) [fintype J] : Type := fin (fintype.card J)</code> be a valid non-Prop example? It's fairly simple to prove that it respects isomorphisms.</p>",
        "id": 189142374,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1582741571
    },
    {
        "content": "<p>We could even take <code>C J = J</code></p>",
        "id": 189142761,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582741743
    },
    {
        "content": "<p>But to define <code>myrec</code> you will have to choose an isomorphism from J to the nested sum of <code>unit</code>s, and this choice won't be compatible with isomorphisms</p>",
        "id": 189143066,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582741864
    },
    {
        "content": "<p>Thank you, I don't really care about what it returns as long as it's in Type. For context, I'm trying to prove in the catthy library that binary products and terminal object imply finite products by recursion on the size of <code>J</code> where <code>(discrete J) ⥤ C</code> is the diagram. The return type is <code>has_limit F</code> which is not a Prop. Doing this on <code>fin n</code> doesn't seem to work because it's not universe-polymorphic and the category wants objects at level <code>u</code>, so perhaps what I really want is a polymorphic <code>pfin</code>.</p>",
        "id": 189146195,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1582743414
    }
]