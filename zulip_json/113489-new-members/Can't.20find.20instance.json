[
    {
        "content": "<p>Hi. Could anyone please explain why instance resolution works in the first case (<code>stabilizer.submonoid</code>)  but not in the second one (<code>stabilizer</code>) ? (The strange thing is that the same lines in a bigger file compile without any error, but the problem appeared when I tried to incorporate them in <code>group_theory.group_action.sub_mul_action.lean</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Stabilizer of sub_mul_action</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.sub_mul_action</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">u'</span> <span class=\"n\">u''</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u''</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mul_action</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">sub_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Stabilizers in monoid sub_mul_action coincide with stabilizer -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">stabilizer_of_sub_mul.submonoid</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">stabilizer.submonoid</span> <span class=\"n\">R</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">stabilizer.submonoid</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_action.mem_stabilizer_submonoid_iff</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">sub_mul_action.coe_smul</span><span class=\"o\">,</span> <span class=\"n\">set_like.coe_eq_coe</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">stabilizer_of_sub_mul</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">stabilizer</span> <span class=\"n\">R</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">stabilizer</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">subgroup.to_submonoid_eq</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_submonoid</span> <span class=\"bp\">=</span> <span class=\"n\">stabilizer.submonoid</span> <span class=\"n\">G</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_submonoid</span> <span class=\"bp\">=</span> <span class=\"n\">stabilizer.submonoid</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">stabilizer_of_sub_mul.submonoid</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270981996,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1644242571
    },
    {
        "content": "<p>Can you find out what the instance is that is found in the bigger file? (By clicking around in the info-view, drilling down the widgets.)</p>",
        "id": 270982249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644242680
    },
    {
        "content": "<p>Because it sounds like you might just need an extra <code>import</code>.</p>",
        "id": 270982281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644242694
    },
    {
        "content": "<p>It doesn't work on master with <code>import all</code></p>",
        "id": 270984046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644243403
    },
    {
        "content": "<p>What is the bigger file, and does it have any instances or local instances in it?</p>",
        "id": 270984166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644243474
    },
    {
        "content": "<p>waitwaitwait, your problem is that R is both a group and a monoid; your tactic state has <code>_inst_1 : monoid R</code> and also <code>_inst_7 : group R</code> so you have two unrelated multiplications on R. If you want to prove lemmas about monoids and then later on lemmas about groups then either use a different letter or use sections.</p>",
        "id": 270984507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644243638
    },
    {
        "content": "<p>Yeah, the lemma statement compiles if you change <code>[monoid R]</code> to <code>[group R]</code> right at the top so you might have to put the first lemma in a section and then restate all the variables in a second section but with R being a group not a monoid.</p>",
        "id": 270984747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644243756
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Stabilizer of sub_mul_action</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.sub_mul_action</span>\n<span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">u'</span> <span class=\"n\">u''</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u''</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mul_action</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">monoidy_stuff</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">sub_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Stabilizers in monoid sub_mul_action coincide with stabilizer -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">stabilizer_of_sub_mul.submonoid</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">stabilizer.submonoid</span> <span class=\"n\">R</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">stabilizer.submonoid</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_action.mem_stabilizer_submonoid_iff</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">sub_mul_action.coe_smul</span><span class=\"o\">,</span> <span class=\"n\">set_like.coe_eq_coe</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">monoidy_stuff</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">groupy_stuff</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">sub_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">stabilizer_of_sub_mul</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">stabilizer</span> <span class=\"n\">R</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">stabilizer</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">subgroup.to_submonoid_eq</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_submonoid</span> <span class=\"bp\">=</span> <span class=\"n\">stabilizer.submonoid</span> <span class=\"n\">G</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_submonoid</span> <span class=\"bp\">=</span> <span class=\"n\">stabilizer.submonoid</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">stabilizer_of_sub_mul.submonoid</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">groupy_stuff</span>\n</code></pre></div>",
        "id": 270984904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644243832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Can't.20find.20instance/near/270984747\">said</a>:</p>\n<blockquote>\n<p>Yeah, the lemma statement compiles if you change <code>[monoid R]</code> to <code>[group R]</code> right at the top so you might have to put the first lemma in a section and then restate all the variables in a second section but with R being a group not a monoid.</p>\n</blockquote>\n<p>It seems that you're right : the file that worked had sections :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.sub_mul_action</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">sub_mul_action</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mul_action</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">monoid</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Stabilizers in monoid sub_mul_action coincide with stabilizer -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">stabilizer_of_sub_mul.submonoid</span> <span class=\"o\">{</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">sub_mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">stabilizer.submonoid</span> <span class=\"n\">G</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">stabilizer.submonoid</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_stabilizer_submonoid_iff</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">sub_mul_action.coe_smul</span><span class=\"o\">,</span> <span class=\"n\">set_like.coe_eq_coe</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- Orbits in sub_mul_action coincide with orbits -/</span>\n<span class=\"c1\">-- useful ?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">orbit_of_sub_mul</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">sub_mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">orbit</span> <span class=\"n\">G</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">orbit</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">monoid</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">group</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mul_action</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Stabilizers in sub_mul_action coincide with stabilizer -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">stabilizer_of_sub_mul</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">sub_mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">subgroup.to_submonoid_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">stabilizer_of_sub_mul.submonoid</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">group</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">sub_mul_action</span>\n</code></pre></div>",
        "id": 270984972,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1644243849
    },
    {
        "content": "<p>So: what is the impact of those sections?</p>",
        "id": 270985015,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1644243868
    },
    {
        "content": "<p><code>variable [monoid R] [group R]</code> is always bad. But variables defined within a section disappear at the end of the section.</p>",
        "id": 270985053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644243893
    },
    {
        "content": "<p>Something I do personally is that I always make my section names not equal to namespace names, because then when I see <code>end groupy_stuff</code> I know that this is the end of a section and not a namespace.</p>",
        "id": 270985142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644243941
    },
    {
        "content": "<p>I just saw that you had explained it already !<br>\nThere should be a way to say — up to now, <code>R</code>was a monoid, but from now on we assume that it is a group.</p>",
        "id": 270985161,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1644243948
    },
    {
        "content": "<p>The problem in your case is that <code>mul_action R M</code> and <code>is_scalar_tower S R M</code> already all used <code>_inst_1</code> so you have to restate them to use <code>_inst_7</code>.</p>",
        "id": 270985313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644244016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/113489-new-members/topic/Can't.20find.20instance/near/270985161\">said</a>:</p>\n<blockquote>\n<p>I just saw that you had explained it already !<br>\nThere should be a way to say — up to now, <code>R</code>was a monoid, but from now on we assume that it is a group.</p>\n</blockquote>\n<p>I agree, it would be pretty cool to have <code>unvariables [monoid R]</code>.</p>",
        "id": 270985439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644244080
    },
    {
        "content": "<p>We think of group as a propositional extension of a monoid but Lean doesn't because it wants to know the inverse function; we know one exists uniquely but my guess is that this would be a can of worms for Lean. Similarly we think of fields as being a predicate on rings but Lean doesn't.</p>",
        "id": 270985554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644244113
    },
    {
        "content": "<p>I worked out an example of this with a student recently; he had a ring which he wanted to promote to a field at some point so we used <code>is_field</code> and it's a bit of a minefield; in the end we went with <code>[fact (is_field R)]</code> and made the (noncomputable) field instance using type class inference, which worked.</p>",
        "id": 270985719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644244185
    },
    {
        "content": "<p>We can make a similar remark from model theory : the language of Rings has 0, 1, +, - and * — it has subtraction as an elementary law — and the language of Fields is the same : division is not put in. So that basic formulas, even written in fields, have no division. This is not necessarily annoying because you can emulate them with existential quantifiers. But when one proves quantifier elimination in (algebraically closed, say) fields, this implies that you can really remove all division signs.</p>",
        "id": 270987723,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1644245061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Can't.20find.20instance/near/270985439\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/113489-new-members/topic/Can't.20find.20instance/near/270985161\">said</a>:</p>\n<blockquote>\n<p>I just saw that you had explained it already !<br>\nThere should be a way to say — up to now, <code>R</code>was a monoid, but from now on we assume that it is a group.</p>\n</blockquote>\n<p>I agree, it would be pretty cool to have <code>unvariables [monoid R]</code>.</p>\n</blockquote>\n<p>I would rather have <code>upgrade [group R] from [monoid R]</code> so that we are not forced to rewrite all the intermediate variables (from types such as <code>mul_action R M</code>) that already depended on <code>R </code>.</p>",
        "id": 270987904,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1644245157
    },
    {
        "content": "<p>Yeah, that's certainly better.</p>",
        "id": 270988132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644245237
    },
    {
        "content": "<p>No idea how feasible it would be to do that Lean-wise. But I suppose it can easily be done in Lean 4.</p>",
        "id": 270988201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644245269
    },
    {
        "content": "<p>Anyway, the PR is now done ! <a href=\"https://github.com/leanprover-community/mathlib/pull/11899\">#11899</a></p>",
        "id": 270988434,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1644245359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> I left two comments about the docstrings (and renamed the PR)</p>",
        "id": 270989909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644245983
    },
    {
        "content": "<p>Thanks, and I committed them at once ! Eric made an important comment as well. And Rob removed the <em>easy</em> tag!</p>",
        "id": 271121872,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1644324616
    }
]