[
    {
        "content": "<p>I've been trying to adapt some proofs written in Coq, and I'm having trouble proving decidable equality on an inductive family of types. A simplified version of the problem looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.bitvec.basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.check</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">bitvec</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c1</span> <span class=\"k\">with</span> <span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">generalizing</span> <span class=\"n\">c2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">c2</span> <span class=\"k\">with</span> <span class=\"n\">A</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hA</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">Foo.inj</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">is_true</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">Foo</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">contradiction</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><code>induction</code> and <code>cases</code> fail because of motive issues with the differing lengths of the bitvectors, and I can't make the proof go through with the recursors either. Is there a better way to handle this kind of nested induction? Or have I defined the inductive family badly in some way?</p>",
        "id": 224528398,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1611952003
    },
    {
        "content": "<p>For reference, the family in Coq looks something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Inductive</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">Foo</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">),</span> <span class=\"n\">eq_dec</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bar</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">Bvector</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 224528539,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1611952109
    },
    {
        "content": "<p>That's a bit different, isn't it?</p>",
        "id": 224528831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611952283
    },
    {
        "content": "<p>what happened to that eq_dec argument in your lean version?</p>",
        "id": 224528857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611952298
    },
    {
        "content": "<p>I tried moving it between the constructor and lemma hypothesis to see if that would help with the problem, but either way I couldn't get the proofs to work</p>",
        "id": 224529065,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1611952396
    },
    {
        "content": "<p>It seemed mostly orthogonal to the induction/recursor problems I was having, but I could be wrong about that</p>",
        "id": 224529114,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1611952423
    },
    {
        "content": "<p>This theorem is true but nontrivially so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">bitvec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bitvec.card</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">bitvec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">A'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">A'</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"bp\">==</span> <span class=\"n\">c2</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">decidable_of_decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">heq_iff_eq</span> <span class=\"o\">},</span>\n  <span class=\"n\">clear</span> <span class=\"n\">c2</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">c1</span> <span class=\"k\">with</span> <span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">c2</span> <span class=\"k\">with</span> <span class=\"n\">A</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_false</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">heq_iff_eq</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">c2</span> <span class=\"k\">with</span> <span class=\"n\">A</span> <span class=\"n\">a'</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_false</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">heq_iff_eq</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_true</span><span class=\"o\">,</span>\n      <span class=\"n\">congr</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">bitvec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">bitvec</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">congr'</span><span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bitvec.card</span><span class=\"o\">,</span> <span class=\"n\">bitvec.card</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat.pow_right_injective</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">this</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224531160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611953450
    },
    {
        "content": "<p>For the most part type constructors are not injective, and you need that in order for this theorem to be true</p>",
        "id": 224531334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611953486
    },
    {
        "content": "<p>in this case you picked <code>bitvec</code>, which <em>is</em> injective, because it's a finite type whose size is an injective function of the input</p>",
        "id": 224531459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611953513
    },
    {
        "content": "<p>This is a really weird inductive type though. If I could <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> the problem, what do you need this type for?</p>",
        "id": 224531863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611953674
    },
    {
        "content": "<p>Generally speaking type equalities are a bad idea and this type is basically saying that <code>C A</code> is <code>A</code> unless <code>A = bitvec n</code> in which case it is <code>option A</code></p>",
        "id": 224532046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611953763
    },
    {
        "content": "<p>which makes it more or less useless for other types like say <code>fin 2</code> because you don't know whether or not <code>fin 2 = bitvec 1</code> is true</p>",
        "id": 224532172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611953809
    },
    {
        "content": "<p>that is, this proposition is independent of lean's axioms</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Foo</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 224532468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611953930
    },
    {
        "content": "<p>The full original Coq definition looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Inductive</span> <span class=\"n\">Comp</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ret</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">),</span> <span class=\"n\">eq_dec</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Comp</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bind</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">),</span> <span class=\"n\">Comp</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Comp</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Comp</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">Rnd</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Comp</span> <span class=\"o\">(</span><span class=\"n\">Bvector</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Repeat</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">),</span> <span class=\"n\">Comp</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Comp</span> <span class=\"n\">A.</span>\n</code></pre></div>\n<p>And is meant to be a shallow embedding of a basic programming language (where the Rnd constructor is a computation of some random bits for cryptography purposes). I was curious to see if something like this would work in Lean, but ran into the above issue.</p>",
        "id": 224533237,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1611954298
    },
    {
        "content": "<p>In general then is it a bad idea to have some type constructors of the family produce more generic types than other constructors? So it would be better to have some kind of <code>rnd_gen A</code> Prop for types that can be randomly generated, and then have <code>Rnd</code> look like <code>Rnd : forall {A : Type*}, rnd_gen A -&gt; Comp A</code>?</p>",
        "id": 224534178,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1611954715
    },
    {
        "content": "<p>Surely this type doesn't have decidable equality though?</p>",
        "id": 224535415,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611955271
    },
    {
        "content": "<p>Since there's a function in the <code>Bind</code> constructor</p>",
        "id": 224535532,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611955325
    },
    {
        "content": "<p>Yeah, I don't see the value in attempting to prove decidable equality for this type. Seems like it would be more useful, if you cared about equality on this type, to at least quotient by the monad laws</p>",
        "id": 224535764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611955465
    },
    {
        "content": "<p>but it still wouldn't be decidable</p>",
        "id": 224535793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611955500
    },
    {
        "content": "<p>Going back to the orignal paper, it seems like I majorly tunnel-visioned on what the actual claim was. The statement shouldn't be <code>decidable_eq A -&gt; decidable_eq (Comp A)</code>, instead it should be <code>Comp A -&gt; decidable_eq A</code>, which is a much more reasonable statement to prove. Seems like I was so used to Lean naming conventions that I just assumed the content of the lemma based on its name</p>",
        "id": 224536796,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1611956059
    },
    {
        "content": "<p>Apologies for the confusion</p>",
        "id": 224536859,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1611956085
    },
    {
        "content": "<p>Of course you need the <code>decidable_eq</code> assumption inside the type for that to be true</p>",
        "id": 224539016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611957293
    }
]