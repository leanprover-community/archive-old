[
    {
        "content": "<p>I am trying to prove that sum of two negligible functions are negligible, but I am stuck with this goal: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">μ₁</span> <span class=\"n\">μ₂</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span>\n<span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₀</span> <span class=\"bp\">→</span> <span class=\"n\">μ₁</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₀</span> <span class=\"bp\">→</span> <span class=\"n\">μ₂</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">Hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">max</span> <span class=\"n\">n₁</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">n₂</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"n\">Ht</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₁</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">max</span> <span class=\"n\">n₂</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">Ht₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₁</span><span class=\"o\">,</span>\n<span class=\"n\">Ht₃</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₂</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">Ht₂</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₂</span><span class=\"o\">,</span>\n<span class=\"n\">Ht₃</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">Hn₁</span> <span class=\"o\">:</span> <span class=\"n\">μ₁</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">Hn₂</span> <span class=\"o\">:</span> <span class=\"n\">μ₂</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">μ₁</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">μ₂</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>Based on my calculation, unless I missed something very obvious, adding <br>\nHn₁ : μ₁ n * ↑n ^ (c + 2) &lt; 1,<br>\nHn₂ : μ₂ n * ↑n ^ (c + 2) &lt; 1 <br>\nwould give me  ( μ₁ n + μ₂ n) * ↑n ^ c  * ↑n ^ 2  &lt; 2 . Since  n ≥ 2 (Ht₃ ), 2/↑n ^ 2  &lt; 1 which proves the goal. Below is the complete working code: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n  <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">order</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">omega</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">neg_fn</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₀</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sum_neg_fn</span> <span class=\"o\">(</span><span class=\"n\">μ₁</span> <span class=\"n\">μ₂</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">μ₁</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">μ₂</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">upper_bound_max</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">max</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₁</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"n\">Hn</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">max_le_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_neg_fn_is_neg_fn</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">μ₁</span> <span class=\"n\">μ₂</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">neg_fn</span> <span class=\"n\">μ₁</span> <span class=\"bp\">→</span> <span class=\"n\">neg_fn</span> <span class=\"n\">μ₂</span> <span class=\"bp\">→</span> <span class=\"n\">neg_fn</span> <span class=\"o\">(</span><span class=\"n\">sum_neg_fn</span> <span class=\"n\">μ₁</span> <span class=\"n\">μ₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">sum_neg_fn</span> <span class=\"n\">neg_fn</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">μ₁</span> <span class=\"n\">μ₂</span> <span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">destruct</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"n\">intros</span> <span class=\"n\">n₁</span> <span class=\"n\">Hn₁</span><span class=\"o\">,</span>\n    <span class=\"n\">destruct</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"n\">intros</span> <span class=\"n\">n₂</span> <span class=\"n\">Hn₂</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">n₁</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">n₂</span> <span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">Hn</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">Ht</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₁</span> <span class=\"bp\">∧</span>  <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">max</span> <span class=\"n\">n₂</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n      <span class=\"n\">apply</span> <span class=\"n\">upper_bound_max</span><span class=\"o\">,</span> <span class=\"n\">apply_assumption</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">destruct</span> <span class=\"n\">Ht</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">Ht₁</span> <span class=\"n\">Ht₂</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">Ht₃</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₂</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n      <span class=\"n\">apply</span> <span class=\"n\">upper_bound_max</span><span class=\"o\">,</span> <span class=\"n\">apply_assumption</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">Ht₂</span><span class=\"o\">,</span>\n    <span class=\"n\">destruct</span> <span class=\"n\">Ht₃</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">Ht₂</span> <span class=\"n\">Ht₃</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"o\">(</span><span class=\"n\">Hn₁</span> <span class=\"n\">n</span> <span class=\"n\">Ht₁</span><span class=\"o\">),</span> <span class=\"n\">specialize</span> <span class=\"o\">(</span><span class=\"n\">Hn₂</span> <span class=\"n\">n</span> <span class=\"n\">Ht₂</span><span class=\"o\">),</span>\n   <span class=\"c\">/-</span><span class=\"cm\"> How to finish rest -/</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203632199,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1594538927
    },
    {
        "content": "<p>So far so good.  I modified your tactics to look more like idiomatic Lean (as far as I understand it), and after a good amount of <code>library_search</code>, I found the following proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">order</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">neg_fn</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n₀</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sum_neg_fn</span> <span class=\"o\">(</span><span class=\"n\">μ₁</span> <span class=\"n\">μ₂</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">μ₁</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">μ₂</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_neg_fn_is_neg_fn</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">μ₁</span> <span class=\"n\">μ₂</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">neg_fn</span> <span class=\"n\">μ₁</span> <span class=\"bp\">→</span> <span class=\"n\">neg_fn</span> <span class=\"n\">μ₂</span> <span class=\"bp\">→</span> <span class=\"n\">neg_fn</span> <span class=\"o\">(</span><span class=\"n\">sum_neg_fn</span> <span class=\"n\">μ₁</span> <span class=\"n\">μ₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">μ₁</span> <span class=\"n\">μ₂</span> <span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H₁</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">n₁</span> <span class=\"n\">Hn₁</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H₂</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">n₂</span> <span class=\"n\">Hn₂</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">max</span> <span class=\"n\">n₁</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">n₂</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">Hn</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">max_le_iff</span> <span class=\"n\">at</span> <span class=\"n\">Hn</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">Hn</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">Ht₁</span><span class=\"o\">,</span> <span class=\"n\">Ht₂</span><span class=\"o\">,</span> <span class=\"n\">Ht₃</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">Hn₁</span> <span class=\"n\">n</span> <span class=\"n\">Ht₁</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">Hn₂</span> <span class=\"n\">n</span> <span class=\"n\">Ht₂</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">sum_neg_fn</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Hn₁</span> <span class=\"n\">Hn₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">npos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsqp</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">pow_pos</span> <span class=\"n\">npos</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">lt_div_iff</span> <span class=\"n\">hsqp</span> <span class=\"n\">at</span> <span class=\"n\">Hn₁</span> <span class=\"n\">Hn₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Ht₃&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_le_pow_of_le_left</span> <span class=\"n\">Ht₃</span> <span class=\"mi\">2</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">Ht₃&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">div_le_div_of_le_left</span> <span class=\"n\">zero_le_one</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">Ht₃&#39;</span> <span class=\"o\">},</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">Hn₁</span><span class=\"o\">,</span> <span class=\"n\">Hn₂</span><span class=\"o\">,</span> <span class=\"n\">Ht₃&#39;&#39;</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203635704,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594546016
    },
    {
        "content": "<p>One curiosity is that changing the proof of <code>Ht₃''</code> to be term mode and not <code>exact</code> causes Lean to time out.  I have no idea why this is.</p>",
        "id": 203635775,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594546129
    },
    {
        "content": "<p>Also, to get the <code>max_le_iff</code> rewrite to work, I changed the inequality in <code>neg_fn</code> to <code>n₀ ≤ n</code>.  Lean tends to prefer <code>≤</code> since <code>≥</code> is defined in terms of it.</p>",
        "id": 203636137,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594546751
    },
    {
        "content": "<p>A question of my own: does mathlib have pointwise addition of functions?  It seems like something like <code>sum_neg_fn</code> should be defined already.</p>",
        "id": 203636292,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594547062
    },
    {
        "content": "<p>Sure, <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/pi_instances.html\">https://leanprover-community.github.io/mathlib_docs/algebra/pi_instances.html</a></p>",
        "id": 203636431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594547363
    },
    {
        "content": "<p>Great!</p>\n<p>In that case, this can be given as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">order</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">neg_fn</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n₀</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_neg_fn_is_neg_fn</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">μ₁</span> <span class=\"n\">μ₂</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">neg_fn</span> <span class=\"n\">μ₁</span> <span class=\"bp\">→</span> <span class=\"n\">neg_fn</span> <span class=\"n\">μ₂</span> <span class=\"bp\">→</span> <span class=\"n\">neg_fn</span> <span class=\"o\">(</span><span class=\"n\">μ₁</span> <span class=\"bp\">+</span> <span class=\"n\">μ₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">μ₁</span> <span class=\"n\">μ₂</span> <span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H₁</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">n₁</span> <span class=\"n\">Hn₁</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H₂</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">n₂</span> <span class=\"n\">Hn₂</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">max</span> <span class=\"n\">n₁</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">n₂</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">Hn</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">max_le_iff</span> <span class=\"n\">at</span> <span class=\"n\">Hn</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">Hn</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">Ht₁</span><span class=\"o\">,</span> <span class=\"n\">Ht₂</span><span class=\"o\">,</span> <span class=\"n\">Ht₃</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">Hn₁</span> <span class=\"n\">n</span> <span class=\"n\">Ht₁</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">Hn₂</span> <span class=\"n\">n</span> <span class=\"n\">Ht₂</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Hn₁</span> <span class=\"n\">Hn₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">npos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsqp</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">pow_pos</span> <span class=\"n\">npos</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">lt_div_iff</span> <span class=\"n\">hsqp</span> <span class=\"n\">at</span> <span class=\"n\">Hn₁</span> <span class=\"n\">Hn₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Ht₃&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_le_pow_of_le_left</span> <span class=\"n\">Ht₃</span> <span class=\"mi\">2</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">Ht₃&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">div_le_div_of_le_left</span> <span class=\"n\">zero_le_one</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">Ht₃&#39;</span> <span class=\"o\">},</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">Hn₁</span><span class=\"o\">,</span> <span class=\"n\">Hn₂</span><span class=\"o\">,</span> <span class=\"n\">Ht₃&#39;&#39;</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203636633,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594547745
    },
    {
        "content": "<p>It is perhaps nicer to write the theorem statement as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">sum_neg_fn_is_neg_fn</span> <span class=\"o\">(</span><span class=\"n\">μ₁</span> <span class=\"n\">μ₂</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">neg_fn</span> <span class=\"n\">μ₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">neg_fn</span> <span class=\"n\">μ₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">neg_fn</span> <span class=\"o\">(</span><span class=\"n\">μ₁</span> <span class=\"bp\">+</span> <span class=\"n\">μ₂</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and then adjust the <code>intros</code> to <code>intro c</code> accordingly.</p>\n<p>Or, it could even be given with implicit arguments</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">sum_neg_fn_is_neg_fn</span> <span class=\"o\">{</span><span class=\"n\">μ₁</span> <span class=\"n\">μ₂</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">neg_fn</span> <span class=\"n\">μ₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">neg_fn</span> <span class=\"n\">μ₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">neg_fn</span> <span class=\"o\">(</span><span class=\"n\">μ₁</span> <span class=\"bp\">+</span> <span class=\"n\">μ₂</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>since the functions can be inferred from <code>H₁</code> and <code>H₂</code>.</p>",
        "id": 203636898,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594548127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  Thank you very much. I have a question: how did you find this  lemma   by lt_div_iff library search (to pattern match something in the assumptions and find the lemma)? What my understanding of library_search is: when I write library_search, it pattern matches the goal and try to come up with matching lemmas, and if it can not find any, then it fails.  I have no idea how to use library_search to pattern match in assumptions.</p>",
        "id": 203637990,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1594550193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239476\">@Mukesh Tiwari</span> you can find <code>lt_div_iff</code> by guessing that this is what it is called. This is a really important technique. You try <code>lt_div</code> because one side is <code>a &lt; b / c</code> and then you hit ctrl-space and you can see all Lean theorems which have lt_div in, and you scroll up and down with the arrow keys to find the one you want. See <a href=\"https://youtu.be/bghu6jVt0SY?t=320\">https://youtu.be/bghu6jVt0SY?t=320</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"bghu6jVt0SY\" href=\"https://youtu.be/bghu6jVt0SY?t=320\"><img src=\"https://i.ytimg.com/vi/bghu6jVt0SY/default.jpg\"></a></div>",
        "id": 203638442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594551128
    },
    {
        "content": "<p>Thank you very much everyone for answering my questions patiently.</p>",
        "id": 203638982,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1594551978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239476\">@Mukesh Tiwari</span> I wasn't able to guess what it was called in this case out of inexperience, so what I did was create a new goal with the single transform I wanted to do:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">μ₁</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">library_search</span> <span class=\"o\">},</span>\n</code></pre></div>\n\n\n<p>Then Lean responded with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_div_iff</span> <span class=\"n\">hsqp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">Hn₁</span>\n</code></pre></div>\n\n\n<p>and then I modified this suggested tactic to use <code>rw</code> since it could apply to both hypotheses.</p>\n<p>One complication was that I knew the theorem would need to know <code>n^2 &gt; 0</code>, so I made sure to prove that first.  For <code>(4 : ℚ) ≤ (↑n : ℚ)^2</code>, I did a <code>norm_cast</code> first to turn it into <code>4 ≤ n^2</code>, since I figured there would be a theorem about this for the naturals already, and that's when I used <code>library_search</code> again, even though I probably could have guessed the name.</p>",
        "id": 203658502,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594584244
    }
]