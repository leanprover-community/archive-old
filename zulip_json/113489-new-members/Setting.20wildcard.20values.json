[
    {
        "content": "<p>Given an expression in my context such as <code>a: eval ((t_abs ?m_1 ?m_2).t_app ?m_3) (upshift (-1) (subst (upshift 1 ?m_3) 0 ?m_2))</code> How can I fix the wildcard values? I'm currently doing it by creating another variable with the same structure and assigning <code>a</code> to it, but that seems sub optimal.</p>\n<p>Thanks</p>",
        "id": 230727691,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616000269
    },
    {
        "content": "<p>How did they end up in that expression in the first place?</p>",
        "id": 230732093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616001805
    },
    {
        "content": "<p>Those metavariables will be other goals... but it can be hard to guess which one is which.</p>",
        "id": 230732151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616001831
    },
    {
        "content": "<p>That is true, 3 subgoals seem to be produced (which disappear after I fix the variables).<br>\nIs there a simple way to manipulate the goal list? Things like sending a goal to the bottom? That would work too</p>",
        "id": 230732774,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616002091
    },
    {
        "content": "<p>And yeah, would be cool if the correspondent metavar was shown in the goal. Maybe a future feature? ;)</p>",
        "id": 230732869,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616002136
    },
    {
        "content": "<p><code>swap</code>, <code>swap n</code>, <code>rotate</code></p>",
        "id": 230735891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616003161
    },
    {
        "content": "<p>Exactly what I was looking for, thanks!</p>",
        "id": 230744671,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616006306
    },
    {
        "content": "<p>I knew about swap, but not about rotate</p>",
        "id": 230744698,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616006317
    },
    {
        "content": "<p>You can use use <code>show XXX</code> to pull a goal unifying with <code>XXX</code> up to the top.</p>",
        "id": 230780616,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616020380
    },
    {
        "content": "<p>There is also <code>work_on_goal n</code>.  The number <code>n</code> begins at 0.</p>",
        "id": 230814983,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616044679
    },
    {
        "content": "<p>I sometimes find <code>any_goals {tactics}</code> and <code>all_goals {tactics}</code> useful.</p>",
        "id": 230815068,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616044770
    },
    {
        "content": "<p>I found <code>any_goals</code> and <code>all_goals</code> very useful when working with wide inductive structures (lambda calculus)</p>",
        "id": 230845580,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616065842
    }
]