[
    {
        "content": "<p>Hello, I am having an issue at the moment where I am struggling to get lean to recognise that I have (started) to define a particular category. </p>\n<p>I am trying to define the category attached to any reflexive transitive relation, and have introduced variables for the relation and defined the category using those variables, however whenever I try to use that definition, lean pretends it doesn't see it. </p>\n<p>I am not exactly sure what I am doing wrong here? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">universes</span> <span class=\"n\">u</span>\n  <span class=\"kd\">class</span> <span class=\"n\">rel_cat_data</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel_refl</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">rel</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel_trans</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">rel</span><span class=\"o\">)</span>\n  <span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">rel_cat_data</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"kn\">open</span> <span class=\"n\">rel_cat_data</span>\n\n  <span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n  <span class=\"kd\">instance</span> <span class=\"n\">rel_cat</span>  <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">ulift</span><span class=\"o\">(</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n    <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">ulift.up</span> <span class=\"o\">(</span><span class=\"n\">plift.up</span> <span class=\"o\">(</span><span class=\"n\">rel_refl</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n    <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">r1</span> <span class=\"n\">r2</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">let</span> <span class=\"n\">r1'</span> <span class=\"o\">:=</span> <span class=\"n\">plift.down</span> <span class=\"o\">(</span><span class=\"n\">ulift.down</span> <span class=\"n\">r1</span><span class=\"o\">),</span>\n      <span class=\"k\">let</span> <span class=\"n\">r2'</span> <span class=\"o\">:=</span> <span class=\"n\">plift.down</span> <span class=\"o\">(</span><span class=\"n\">ulift.down</span> <span class=\"n\">r2</span><span class=\"o\">),</span>\n      <span class=\"k\">let</span> <span class=\"n\">r3'</span> <span class=\"o\">:=</span> <span class=\"n\">rel_trans</span> <span class=\"n\">r1'</span> <span class=\"n\">r2'</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">ulift.up</span> <span class=\"o\">(</span><span class=\"n\">plift.up</span> <span class=\"n\">r3'</span><span class=\"o\">),</span>\n    <span class=\"o\">}</span>\n\n  <span class=\"o\">}</span>\n\n<span class=\"c1\">--this does not work for some reason</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">ulift</span> <span class=\"o\">(</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  failed to synthesize type class instance for</span>\n<span class=\"cm\">  S : Type u,</span>\n<span class=\"cm\">  _inst_3 : rel_cat_data S,</span>\n<span class=\"cm\">  a b : S</span>\n<span class=\"cm\">  ⊢ quiver S</span>\n<span class=\"cm\">  -/</span>\n\n  <span class=\"c1\">--and yet this works ???</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rel_cat.hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">ulift</span> <span class=\"o\">(</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306326816,
        "sender_full_name": "Will Fourie",
        "timestamp": 1666816818
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? This code doesn't compile as it stands.</p>",
        "id": 306331417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666817820
    }
]