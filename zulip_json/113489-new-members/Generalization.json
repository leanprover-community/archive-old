[
    {
        "content": "<p>What is the point of the generalizing statement on induction? Can anyone give a simple example that it helps solve? I've tried googling it, but the docs don't give examples.</p>\n<p>Thanks</p>",
        "id": 229645579,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615378152
    },
    {
        "content": "<p>Search for <code>induction.*generalizing</code> in mathlib (turn regexes on if necessary in the search box) and you'll find heaps of examples.</p>",
        "id": 229646085,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615378366
    },
    {
        "content": "<p>Say you have an <code>n m : nat</code> in the context. If you write <code>induction n</code>, then you're doing the induction for some fixed value of <code>m</code>. If you write <code>induction n generalizing m</code>, you're just \"reverting\" the hypothesis <code>m</code>, obtaining a \"for all m, ...\" statement in the goal, and then doing an induction argument for that (<code>generalizing</code> will automatically re-introduce <code>m</code>).</p>",
        "id": 229646618,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615378583
    },
    {
        "content": "<p>This helped. In other words, it adds a forall in the induction hypothesis correct?<br>\nI guess then my further question is the following: Why is just generalizing not correct? Can generalizing in induction make something unprovable?</p>",
        "id": 229647769,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615379140
    },
    {
        "content": "<p>Generalizing \"too much\" just makes your induction step more tedious, because you have to instantiate the induction hypothesis with your fixed <code>m</code></p>",
        "id": 229649344,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615379881
    },
    {
        "content": "<p>I don't think it can make anything unprovable</p>",
        "id": 229649441,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615379901
    },
    {
        "content": "<p>Alright, that's useful to know. Thanks!<br>\nAditionally, how do I turn <code>\\forall x x = y</code> into, for example, <code>z = y</code>?</p>",
        "id": 229654690,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615381994
    },
    {
        "content": "<p>Seems have does it, but I was wondering if there was a better way</p>",
        "id": 229654994,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615382107
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#specialize\">tactic#specialize</a> works too</p>",
        "id": 229659134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615383501
    },
    {
        "content": "<p>Generalizing too much can make things unprovable, because you lose access to the relation to the original arguments to the induction. Plus you generally can't generalize <em>everything</em>, for example if you are inducting on <code>list A</code> then <code>A</code> can't be generalized.</p>",
        "id": 229670408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615386991
    },
    {
        "content": "<p>But can't you always just specialize and restore the relation?</p>",
        "id": 229679804,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615389854
    },
    {
        "content": "<p>If you generalize, then while your hypothesis got stronger, so did your goal.</p>",
        "id": 229717623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615401028
    },
    {
        "content": "<p>I think that just generalising a variable before an induction can never make a provable-with-induction thing unprovable and conversely sometimes it's essential, like in that level of the natural number game which causes people problems</p>",
        "id": 229807746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615448848
    }
]