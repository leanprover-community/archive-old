[
    {
        "content": "<p>I want to write a function that takes as input an argument of type <code>list ℤ</code> and whenever it finds that an integer <code>n</code> and <code>-n</code> are both in the list, it removes both of them and replaces them with a <code>0</code> (so in some sense the <code>n</code> and <code>-n</code> annihilate each other). Repeat process till the list is \"completely reduced\".</p>\n<p>My only thoughts so far have been to define an equivalence relation on <code>list ℤ</code> and then use that to create a quotient type. Is that right? Is there a simpler way I am missing.</p>\n<p>In case it is relevant to the answer, there are two other things I have in mind --</p>\n<ul>\n<li>at some point I might decide to change it from <code>list ℤ</code> to <code>multiset ℤ</code> or even <code>set ℤ</code>. So an answer that would let me switch between these would be preferable (that way I am not tied to some particular property of <code>list</code>).</li>\n<li>i then want to be able to prove other theorems about this \"reduced/quotiented\" object. I am somewhat scared of the <code>quot</code> API. So the easier the final type is to handle, the better.</li>\n</ul>",
        "id": 187824642,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1581347992
    },
    {
        "content": "<p>The easiest way I can see to define something like that is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">multiset</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">multiset</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">::</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">quotset</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">quot</span> <span class=\"n\">rel</span>\n</pre></div>",
        "id": 187825033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581348201
    },
    {
        "content": "<p>This definition doesn't work for <code>list</code> because it relies on being able to permute stuff. You would have to change the relation to allow permutation</p>",
        "id": 187825148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581348255
    },
    {
        "content": "<p>It's also not clear what to do with a <code>set</code> or <code>finset</code> because you can accumulate multiple copies of <code>0</code> here</p>",
        "id": 187825214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581348301
    },
    {
        "content": "<p>Thanks Mario, you really blew my mind with that. <span aria-label=\"astonished\" class=\"emoji emoji-1f632\" role=\"img\" title=\"astonished\">:astonished:</span>  Till now I was using <code>inductive</code> only to write <em>nonfunction?</em> types. I had not realized I can define relations using <code>inductive</code>.</p>",
        "id": 187826278,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1581348954
    },
    {
        "content": "<p>This does not define what \"completely reduced\" means, there is a proof obligation there quite similar to what we are doing in free groups</p>",
        "id": 187826855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581349316
    }
]