[
    {
        "content": "<p>Hello again! I'm still having a little trouble with my induction. In the example below the second dite gives me</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">term</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">sol</span><span class=\"bp\">.</span><span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"bp\">_</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">sol</span><span class=\"bp\">.</span><span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">¬</span><span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n</pre></div>\n\n\n<p>But by the definition, V s hs should be the same as sol.V s (lt_of_ne s hs h)?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">finset</span>\n\n<span class=\"n\">def</span> <span class=\"n\">names</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"s2\">&quot;BARC&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;HSBC&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;LLOY&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;NATW&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;RBSG&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;SANT&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;STDCH&quot;</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">names</span><span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">soln</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">find_domain</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">soln</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">solve_pde</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">soln</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">solve_system</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">soln</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n    <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">not_lt_zero</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n        <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">not_lt_zero</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n        <span class=\"bp\">@</span><span class=\"n\">soln</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"mi\">0</span> <span class=\"n\">V</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sol</span> <span class=\"o\">:</span> <span class=\"n\">soln</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n        <span class=\"k\">let</span> <span class=\"n\">lt_of_ne</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n            <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lt_succ_iff_lt_or_eq</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n            <span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h1</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n        <span class=\"k\">let</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n            <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">find_domain</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">h</span> <span class=\"n\">sol</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">sol</span><span class=\"bp\">.</span><span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">lt_of_ne</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n        <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n            <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">solve_pde</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">h</span> <span class=\"n\">sol</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">sol</span><span class=\"bp\">.</span><span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">lt_of_ne</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n        <span class=\"bp\">@</span><span class=\"n\">soln</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134579977,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1537860609
    },
    {
        "content": "<p>As you can probably tell by the names, I am attempting some applied mathematics :)</p>",
        "id": 134579994,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1537860655
    },
    {
        "content": "<p><code>V s hs</code> isn't equal to <code>sol.V s (lt_of_ne s hs h)</code> in general, only when you have the hypothesis <code>¬card s = n</code>, and even then it's not a definitional equality. You have to use <code>dif_neg</code> to simplify the <code>dite</code>.</p>",
        "id": 134590793,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537876167
    },
    {
        "content": "<p>I haven't looked carefully at what's going on here, but I wonder if there might be an easier way--it looks like you're constructing a \"solution for all sets of size &lt; n\" by induction on n, where we just pass to the inductive hypothesis if the set is not of the new size--then why not just define a \"solution for all sets of size = n\", and then if you want to reproduce the type of <code>soln</code>, just provide <code>n = card s</code></p>",
        "id": 134590965,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537876427
    },
    {
        "content": "<p>Thanks! I have applied dif_neg but the final step eludes me...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n    <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">solve_pde</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">h</span> <span class=\"n\">sol</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n            <span class=\"k\">have</span> <span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">=</span> <span class=\"n\">sol</span><span class=\"bp\">.</span><span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">lt_of_ne</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">dif_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">sol</span><span class=\"bp\">.</span><span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">lt_of_ne</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n</pre></div>",
        "id": 134592386,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1537878038
    },
    {
        "content": "<p>Your description of my intended algorithm is spot on. The reason I am trying to accumulate the Vs and vs in each successive soln is so that I can prove certain relations between them.</p>",
        "id": 134592520,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1537878225
    },
    {
        "content": "<p>Now there are two ways to proceed</p>",
        "id": 134592759,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537878456
    },
    {
        "content": "<p>The easier way is to change the last line to something like <code>by rw this; exact sol.v s (lt_of_ne s hs h)</code>, or the term-mode equivalent using <code>eq.rec</code></p>",
        "id": 134592811,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537878487
    },
    {
        "content": "<p>Got it! Thank you.</p>",
        "id": 134593877,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1537879478
    },
    {
        "content": "<p>The slightly more complicated way is to instead use the equality <code>this</code> to turn the hypothesis <code>y ∈ V s hs</code> into a proof of <code>y ∈ sol.V s _</code>--this will probably make things easier later if you want to prove things about the values of <code>v</code>, because the actual <code>β</code> value won't be wrapped inside a <code>rw</code>/<code>eq.rec</code></p>",
        "id": 134594108,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537879729
    },
    {
        "content": "<p>I have been fortunate enough to come across this code of <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  <a href=\"https://github.com/rwbarton/lean-model-categories/blob/top-dev/src/logic/crec.lean\" target=\"_blank\" title=\"https://github.com/rwbarton/lean-model-categories/blob/top-dev/src/logic/crec.lean\">https://github.com/rwbarton/lean-model-categories/blob/top-dev/src/logic/crec.lean</a>. Reckon it might be the missing link I need to make progress on my original goal from the top of this thread. (At the same time it was perhaps a little unfortunate that the first thing I ever tried to do in Lean required such trickery <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span>)</p>",
        "id": 164322190,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1556348659
    },
    {
        "content": "<p>Is it likely to get into mathlib any time soon?</p>",
        "id": 164322191,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1556348663
    },
    {
        "content": "<p>My guess: if you ask Reid he won't mind if you just copy and use his code. I don't think he is planning to PR it to mathlib soon (i.e. within a month).</p>",
        "id": 164322795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556349604
    },
    {
        "content": "<p>Did two different threads get mixed together by Zulip here?</p>",
        "id": 164353062,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1556398245
    },
    {
        "content": "<p>Zulip doesn't mix threads. But users often do...</p>",
        "id": 164353156,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556398423
    },
    {
        "content": "<p>The one Mario posted a bit earlier. He labeled it \"without tactics\".</p>",
        "id": 164355174,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1556401795
    },
    {
        "content": "<p>I have to leave. I will try to clarify tomorrow. Sorry.</p>",
        "id": 164355979,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1556403149
    },
    {
        "content": "<p>Yes it looks as if they got mixed together because they have the same name, even though mine has some extra capitals...</p>",
        "id": 164356424,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1556403924
    },
    {
        "content": "<p>I've proved a lemma, but I'm sure I'm making it far too complicated :(<br>\n<a href=\"https://gist.github.com/agjftucker/193bcb9f8b77a2bb12f06646df892208\" target=\"_blank\" title=\"https://gist.github.com/agjftucker/193bcb9f8b77a2bb12f06646df892208\">https://gist.github.com/agjftucker/193bcb9f8b77a2bb12f06646df892208</a></p>",
        "id": 168990393,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1561509316
    },
    {
        "content": "<p>finite.exists_maximal_wrt is a bit strange to work with I think. Was it designed with some particular purpose in mind?</p>",
        "id": 168990527,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1561509515
    },
    {
        "content": "<p>This one: <a href=\"https://github.com/leanprover-community/mathlib/blob/fbce6e4d46fb22ff4145c0e854d3966ef69a983d/src/data/set/finite.lean#L410\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/fbce6e4d46fb22ff4145c0e854d3966ef69a983d/src/data/set/finite.lean#L410\">https://github.com/leanprover-community/mathlib/blob/fbce6e4d46fb22ff4145c0e854d3966ef69a983d/src/data/set/finite.lean#L410</a></p>",
        "id": 168990540,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1561509535
    },
    {
        "content": "<p>I have run into decidability issues with finite sets anyway that I resolved by using finsets in those places. Maybe it's best just to use finsets everywhere? I'm not sure what the trade-offs are</p>",
        "id": 168991233,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1561510525
    },
    {
        "content": "<blockquote>\n<p>finite.exists_maximal_wrt is a bit strange to work with I think. Was it designed with some particular purpose in mind?</p>\n</blockquote>\n<p>it's zorn's lemma</p>",
        "id": 168991324,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561510638
    },
    {
        "content": "<p>I did come across a file called zorn but that seemed a bit more general. And the two seem to have been written independently. In the finite case maybe it can be proved without choice? or something</p>",
        "id": 168991588,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1561510962
    },
    {
        "content": "<p>in the finite case you automatically have the chain condition</p>",
        "id": 168991602,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561511001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111433\">@Alistair Tucker</span> </p>\n<p><code>apply and.intro</code> -- you can just write <code>split</code>. But you can just make the entire term without too much trouble: instead of </p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"n\">apply</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"c1\">-- `split`</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hr</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n</pre></div>\n\n\n<p>you can just write <code>exact ⟨subset.trans h₁.1 hr.1, h₁.2⟩},</code>. Similarly <code>apply and.intro (and.left h₁),</code> could just be <code>split, exact h₁.1,</code>.</p>",
        "id": 169081693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561584321
    }
]