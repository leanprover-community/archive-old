[
    {
        "content": "<p>Hello all, I am new to lean, just going through the basics of lean4.  Is there a facility for searching for functions by type signature (like the Coq \"Search\" command)?  Also, is there official API documentation so I could look up things like how to parse a string to an integer?</p>",
        "id": 314586696,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1670461299
    },
    {
        "content": "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Permission.20for.20github\">#new members &gt; Permission for github</a> by <span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span>.</p>",
        "id": 314586777,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670461371
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/LibrarySearch.html\"><code>library_search</code></a>?</p>",
        "id": 314587350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670461818
    },
    {
        "content": "<p>Correct me if I'm wrong, but that looks like a tactic, not just a user facing search.  Like I would want to find a list of functions matching a partial type signature, and then looking them up one by one to check whether they do what I want.</p>",
        "id": 314587765,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1670462165
    },
    {
        "content": "<p>I know what you mean, like Hoogle with Haskell... not sure Lean4 has anything like that (though I don't have that much experience with Lean4)</p>",
        "id": 314587961,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1670462370
    },
    {
        "content": "<p>have you browsed the API docs at <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">https://leanprover-community.github.io/mathlib4_docs/</a>?</p>",
        "id": 314587989,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1670462401
    },
    {
        "content": "<p>I have not!  Thank you for sharing the link (and thanks Eric for the link to the docs too!)</p>",
        "id": 314588360,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1670462735
    },
    {
        "content": "<p>Hoogle for Lean 4 (Loogle?) has been discussed a few times and I think it only a question of time until someone comes around and does that.</p>",
        "id": 314589086,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670463352
    },
    {
        "content": "<p>There is the <code>#find</code> command, which is intended to mimic the coq Search command</p>",
        "id": 314589170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670463423
    },
    {
        "content": "<p>but also, don't let the tactic-like status of <code>library_search</code> fool you. It is actually used for searching, you just make a lemma statement on the spot and try to prove it by <code>library_search</code></p>",
        "id": 314589207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670463479
    },
    {
        "content": "<p>I think there is also a <code>#library_search</code> command that makes this easier</p>",
        "id": 314589251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670463492
    },
    {
        "content": "<p>Thank you, #find was what I am looking for!</p>",
        "id": 314589730,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1670463993
    },
    {
        "content": "<p>I may be confused, but #find doesn't seem to be working the same way as #eval or #check.  Is there some other way I am supposed to invoke it?</p>",
        "id": 314592092,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1670466102
    }
]