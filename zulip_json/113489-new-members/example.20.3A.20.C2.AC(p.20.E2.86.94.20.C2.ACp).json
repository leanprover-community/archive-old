[
    {
        "content": "<p>Question posted to stackoverflow:</p>\n<p><a href=\"https://stackoverflow.com/q/58496954/268581\" target=\"_blank\" title=\"https://stackoverflow.com/q/58496954/268581\">https://stackoverflow.com/q/58496954/268581</a></p>\n<p>Thanks for any suggestions!</p>",
        "id": 178721504,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1571717715
    },
    {
        "content": "<p>are you sure you can't prove the precondition of <code>hppf2</code>?</p>",
        "id": 178722438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571719209
    },
    {
        "content": "<blockquote>\n<p>are you sure you can't prove the precondition of <code>hppf2</code>?</p>\n</blockquote>\n<p>Hi <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> !</p>\n<p>Given what is shown on the question so far:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hppf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)),</span>\n\n        <span class=\"k\">have</span> <span class=\"n\">hppf1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">hppf</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hppf2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">elim_right</span> <span class=\"n\">hppf</span><span class=\"o\">,</span>\n\n    <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>by \"precondition of <code>hppf2</code>\", I'm guessing you mean: <code>(p → false)</code>?</p>",
        "id": 178722731,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1571719753
    },
    {
        "content": "<p>yes</p>",
        "id": 178724669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571722959
    },
    {
        "content": "<p>try to prove it</p>",
        "id": 178724670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571722964
    },
    {
        "content": "<blockquote>\n<p>yes</p>\n<p>try to prove it</p>\n</blockquote>\n<p>Well, I can start with this:</p>\n<div class=\"codehilite\"><pre><span></span>    (assume hp : p, ...)\n</pre></div>\n\n\n<p>but then I'd have to have a way to generate a value of type <code>false</code>. It's not clear how to do so.</p>",
        "id": 178724840,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1571723237
    },
    {
        "content": "<p>It certainly is</p>",
        "id": 178724913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571723345
    },
    {
        "content": "<p>After all <code>p ↔ ¬ p</code></p>",
        "id": 178724920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571723368
    },
    {
        "content": "<p>And you know <code>p</code></p>",
        "id": 178724928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571723388
    },
    {
        "content": "<p>Hmm... something like this?</p>\n<p><code>(assume hp : p, false.elim ((hppf1 hp) hp))</code></p>",
        "id": 178725125,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1571723622
    },
    {
        "content": "<p>Does it typecheck? If so, you won.</p>",
        "id": 178725179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571723699
    },
    {
        "content": "<p>This seems to typecheck:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hppf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)),</span>\n\n        <span class=\"k\">have</span> <span class=\"n\">hppf1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">hppf</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hppf2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">elim_right</span> <span class=\"n\">hppf</span><span class=\"o\">,</span>\n\n        <span class=\"k\">have</span> <span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">hppf1</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"n\">hp</span><span class=\"o\">)),</span>\n\n        <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">hppf2</span> <span class=\"n\">hpf</span><span class=\"o\">),</span>\n\n        <span class=\"o\">(</span><span class=\"n\">hppf1</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 178725474,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1571724123
    },
    {
        "content": "<p>Here's my version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">all_goals</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hp_copy</span> <span class=\"o\">:=</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">hp_copy</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 178725509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571724202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243015\">@Eduardo Cavazos</span> and here is a golfed version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">finish</span>\n</pre></div>",
        "id": 178725647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571724354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ,</p>\n<p>Your earlier hint helped me, thank you!</p>\n<p>Here I was aiming for a solution that doesn't use the techniques mentioned in section 3.5 \"Classical Logic\". Indeed, exercise 3.7.2 asks for this.</p>",
        "id": 178725756,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1571724480
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>! Your hint along with Johan's helped me come up with something that appears to work.</p>",
        "id": 178726114,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1571724956
    },
    {
        "content": "<p>Doesn't <code>finish</code> use classical stuff? Someone should check the axioms used in that proof</p>",
        "id": 178733946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571733193
    },
    {
        "content": "<p>unfortunately we do not have an intuitionistic 0th order logic automator yet</p>",
        "id": 178733978,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571733229
    },
    {
        "content": "<p><code>by ifinish</code> solves it without choice.</p>",
        "id": 178734110,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571733307
    },
    {
        "content": "<p>oh what it's there now! oh how fast time flies</p>",
        "id": 178734128,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571733327
    },
    {
        "content": "<p>I think the <code>i</code> versions of the <code>finish</code> family have been there since the beginning, no?</p>",
        "id": 178734208,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571733370
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">finish</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ifinish</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">X</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">λ (p : Prop),</span>\n<span class=\"cm\">  eq.mpr</span>\n<span class=\"cm\">    (id</span>\n<span class=\"cm\">       (eq.trans ((λ (a a_1 : Prop) (e_1 : a = a_1), congr_arg not e_1) (p ↔ ¬p) false (propext (iff_not_self p)))</span>\n<span class=\"cm\">          (propext not_false_iff)))</span>\n<span class=\"cm\">    (decidable.by_contradiction</span>\n<span class=\"cm\">       (λ (a : ¬true), (λ (p : Prop) (a : ¬true), false.rec false (false_of_true_eq_false (eq_false_intro a))) p a))</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>I like how the proof term uses <code>decidable.by_contradiction</code> to prove <code>true</code>.</p>",
        "id": 178736338,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1571735281
    },
    {
        "content": "<p>It thinks like an undergraduate</p>",
        "id": 178736743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571735637
    },
    {
        "content": "<p>Yeah, that's a very long way to write <code>(iff_not_self p).1</code>.</p>",
        "id": 178738169,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571736915
    },
    {
        "content": "<blockquote>\n<p>It thinks like an undergraduate</p>\n</blockquote>\n<p>I explicitly tell the maths UGs here that proof by contradiction is the most powerful way to prove <code>P -&gt; Q</code> because you get to assume both <code>P</code> and <code>not Q</code> so you have a lot to play with. As a consequence I've been marking perfectly constructive-doable scripts last weekend, with P -&gt; Q proofs of the form \"Assume P. Assume for a contradiction not Q. Now here's a proof of Q. But not Q! Contradiction!\". I just give them full marks, it's my job to train people to think this way.</p>",
        "id": 178742235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571740474
    },
    {
        "content": "<p>OK so I occasionally write a slightly sarcastic comment in the margin as well.</p>",
        "id": 178742266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571740509
    },
    {
        "content": "<p>It's interesting that I still vividly remember figuring out myself that this was the correct way to think about every problem, as a first year undergraduate. As a result I rejected constructivism at 18 (without even understanding what this meant) and hence this is why I have very little feeling for it.</p>",
        "id": 178743604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571741804
    }
]