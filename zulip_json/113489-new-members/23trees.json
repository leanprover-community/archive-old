[
    {
        "content": "<p>Dear all, I am writing a tactic and I want to keep a set of things in a datastructure for quick access. In other languages you would use a 23tree or similar. Is there something like this in the Lean library? Otherwise I am fine just keeping a <code>list</code> of objects and removing the dupes but I thought I'd check if the datastructure is in there.</p>",
        "id": 131202630,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533856489
    },
    {
        "content": "<p>Yes there's the <code>rbmap</code> which should be available without imports</p>",
        "id": 131202740,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533856629
    },
    {
        "content": "<p>perhaps I can just use <code>set</code> and lean will magically figure it out?</p>",
        "id": 131202747,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533856641
    },
    {
        "content": "<p>You can see the api here: <a href=\"https://github.com/leanprover/lean/blob/a666c7f04eb77ecfd29f253b7fc389a4507404f1/library/init/data/rbmap/basic.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/a666c7f04eb77ecfd29f253b7fc389a4507404f1/library/init/data/rbmap/basic.lean\">https://github.com/leanprover/lean/blob/a666c7f04eb77ecfd29f253b7fc389a4507404f1/library/init/data/rbmap/basic.lean</a></p>",
        "id": 131202750,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533856651
    },
    {
        "content": "<blockquote>\n<p>perhaps I can just use <code>set</code> and lean will magically figure it out?</p>\n</blockquote>\n<p>Unfortunately, not yet.</p>",
        "id": 131202786,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533856682
    },
    {
        "content": "<p>thanks</p>",
        "id": 131202815,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533856727
    },
    {
        "content": "<p>No problems :)</p>",
        "id": 131202827,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533856746
    },
    {
        "content": "<p>If I want to write my own helper methods for <code>list</code>, is it correct to write in the form <code>def list.myextension ...</code>?</p>",
        "id": 131202893,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533856828
    },
    {
        "content": "<p>Yes, sure. You can also put it in <code>namespace list ... end list</code> so that, inside the namespace, you don't have to specify <code>list.</code> everywhere but outside, you can still use <code>my_list.myextension</code> to call it with argument <code>my_list</code></p>",
        "id": 131203112,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533857171
    },
    {
        "content": "<p>Is there a better way of listing all of the local constants which appear in an <code>expr</code> other than recursion over <code>expr</code>?</p>",
        "id": 131203675,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533858115
    },
    {
        "content": "<p>you can use <code>expr.fold</code>.</p>",
        "id": 131203745,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533858238
    },
    {
        "content": "<p>But if you use <code>mathlib</code>, you can import <code>meta.expr</code>and use <code>expr.list_local_const</code></p>",
        "id": 131203823,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533858339
    },
    {
        "content": "<p>fab</p>",
        "id": 131204072,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533858734
    },
    {
        "content": "<p>What is the difference between <code>import</code> and <code>open</code>?</p>",
        "id": 131204216,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533859026
    },
    {
        "content": "<p><code>import</code> is about modules i.e. source files and <code>open</code> is about namespaces which can span multiple files.</p>",
        "id": 131204294,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533859137
    },
    {
        "content": "<p>if I <code>import</code> a source file, is that effectively the same as pasting it above my code?</p>",
        "id": 131204379,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533859250
    },
    {
        "content": "<p>You could say that. But it's a smart paste: it does not paste the same module more than once.</p>",
        "id": 131204442,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533859359
    },
    {
        "content": "<blockquote>\n<p>perhaps I can just use <code>set</code> and lean will magically figure it out?</p>\n</blockquote>\n<p>Is that a thing people want? It is conceivable that we could associate data to a typeclass on <code>set</code>, basically the same as <code>fintype s</code> currently but with a tree-like data structure. Currently you have to use explicit data structures like <code>rbmap</code> or <code>hash_map</code> or <code>finmap</code></p>",
        "id": 131209476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533866068
    },
    {
        "content": "<p>What would the type class be applied to? The element type?</p>",
        "id": 131209657,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533866345
    },
    {
        "content": "<p>the set</p>",
        "id": 131210024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533866952
    },
    {
        "content": "<p>I'm not eager to go down that rabbit hole. In Haskell, a similar situation has created multiple types for strings and multiple solutions to simplify the situation once and for all with unclear consequences.</p>",
        "id": 131210086,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533867050
    },
    {
        "content": "<p>in some ways it seems appealing, similar to decidability of a prop, you have representability of a set</p>",
        "id": 131210092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867077
    },
    {
        "content": "<p>but it's probably not good if the typeclass is not a subsingleton, meaning you have to hide a lot of structure</p>",
        "id": 131210122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867122
    },
    {
        "content": "<p>Yeah but with prop and decidability, the representation is unique.</p>",
        "id": 131210156,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533867169
    },
    {
        "content": "<p>you can always perform a suitable quotient to make it a subsingleton</p>",
        "id": 131210175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867198
    },
    {
        "content": "<p>but you need more than decidable_eq if you want to have any representation better than an association list (which you already get with <code>fintype s</code>)</p>",
        "id": 131210237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867243
    },
    {
        "content": "<p>That creates another mess: if you take two sets as parameters, you have to anticipate that they have vastly different representations.</p>",
        "id": 131210247,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533867251
    },
    {
        "content": "<p>what do you mean? If it is a binary tree structure the only representation ambiguity is wrt tree rotations</p>",
        "id": 131210266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867302
    },
    {
        "content": "<p>No I mean if you have a function that takes two sets as a parameter, one might be a binary search tree, the other may be represented as an assoc list (if I understand your quotient idea properly). That makes taking their union needlessly complicated.</p>",
        "id": 131210336,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533867377
    },
    {
        "content": "<p>oh, no I wasn't thinking that</p>",
        "id": 131210345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867399
    },
    {
        "content": "<p>if you have two data structures which are both applicable here you have two typeclasses</p>",
        "id": 131210352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867420
    },
    {
        "content": "<p>I'm not even sure how to implement type ambiguity of that kind</p>",
        "id": 131210365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867449
    },
    {
        "content": "<p>Actually, I think existential types would be the best way to go. But I don't advise trying it at home.</p>",
        "id": 131210419,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533867489
    },
    {
        "content": "<p>existential types don't really work in lean though</p>",
        "id": 131210424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867508
    },
    {
        "content": "<p>because of predicativity</p>",
        "id": 131210432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867518
    },
    {
        "content": "<p>Really? But if you have structure where one of the field is a type and the next is a type class assumption, doesn't that work?</p>",
        "id": 131210452,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533867560
    },
    {
        "content": "<p>It's possible but it will live in a higher universe</p>",
        "id": 131210454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867586
    },
    {
        "content": "<p>Yeah, it is annoying to say the least</p>",
        "id": 131210462,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533867601
    },
    {
        "content": "<p>I guess it might work if it acts a bit like <code>monad</code> or <code>traversable</code>-type typeclasses</p>",
        "id": 131210512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867639
    },
    {
        "content": "<p>What kind of type classes do you have in mind? Do they including operations like union, intersection, empty set?</p>",
        "id": 131210515,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533867653
    },
    {
        "content": "<p>At the very least</p>",
        "id": 131210520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867666
    },
    {
        "content": "<p>Indeed there probably isn't much else they can support</p>",
        "id": 131210527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867678
    },
    {
        "content": "<p>I found curious wrinkle about finset and traversable by the way but I think it's a different conversation.</p>",
        "id": 131210529,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533867707
    },
    {
        "content": "<p>that sounds ominous</p>",
        "id": 131210530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867721
    },
    {
        "content": "<p>I recall Johannes having difficulty defining the BNF instance for multiset because of quotients, I assume the issue is similar here</p>",
        "id": 131210580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867779
    },
    {
        "content": "<p>I think having that kind of type class would be useful but it should be a last resort of generalization. You should probably stick to concrete types of set representations in the type of your computable functions as much as possible.</p>",
        "id": 131210587,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533867791
    },
    {
        "content": "<p>Does haskell have a typeclass for finite maps? Or is it just traversable</p>",
        "id": 131210642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533867878
    },
    {
        "content": "<p>As for the wrinkle. I managed to make <code>multiset</code> sort-of traversable -- sort-of because in <code>traverse</code> (not its laws) I require the applicative to be lawful and commutative. In <code>finset</code>, I didn't manage to make it sort-of traversable because I would need <code>seq</code> to be idempotent. That's not a big wrinkle but our conversation reminded me of that.</p>",
        "id": 131210651,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533867915
    },
    {
        "content": "<p>Officially, it's mostly just traversable and the like. Some packages have classes for that but they aren't very useable and don't simplify much.</p>",
        "id": 131210704,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533867988
    },
    {
        "content": "<p>I think I just understood why you talked of monad and traversable. I think you're right. You might also need a lattice or a monoid</p>",
        "id": 131210718,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533868027
    },
    {
        "content": "<p>Why does <code>seq</code> have to be idempotent? Seems like the finset traverse should just refer to multiset traverse</p>",
        "id": 131210934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533868445
    },
    {
        "content": "<p>Because somewhere in the laws, you need to prove the equivalence between pruning duplicates before and after a traversal with pruning them only after.</p>",
        "id": 131210959,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533868515
    },
    {
        "content": "<p>That's for a lawful traversable instance. The traverse implementation itself works for <code>finset</code></p>",
        "id": 131211091,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533868713
    },
    {
        "content": "<p>I just noticed that there are five axioms in <code>is_lawful_traversable</code>. Are none of them redundant?</p>",
        "id": 131211127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533868801
    },
    {
        "content": "<p>I suspect one might be but I haven't managed to prove it.</p>",
        "id": 131211193,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533868853
    },
    {
        "content": "<p>Two of them look really similar and it's odd that I can't prove one from the other.</p>",
        "id": 131211212,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533868904
    },
    {
        "content": "<p>do you know any category theoretic treatment of traversable?</p>",
        "id": 131211311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533869025
    },
    {
        "content": "<p>I know of a few papers that I still need to read. I don't know how far they go into category theory</p>",
        "id": 131211364,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533869080
    },
    {
        "content": "<p>Haskell only mentions axioms 1,2,5</p>",
        "id": 131211458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533869239
    },
    {
        "content": "<p>the map_traverse and traverse_map axioms aren't mentioned</p>",
        "id": 131211464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533869253
    },
    {
        "content": "<p>That's right but the laws it does mention do not connect <code>map</code> and <code>traverse</code>. In the case of <code>finset</code>, the trouble comes from proving <code>comp_traverse</code> anyway.</p>",
        "id": 131211615,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533869495
    },
    {
        "content": "<p>(the map of <code>t</code>, not <code>f</code>)</p>",
        "id": 131211664,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533869537
    },
    {
        "content": "<p>Lol @ \"origami programming\"</p>\n<blockquote>\n<p>In the <em>origami</em> style of programming (Meijer et al. , 1991; Gibbons, 2002; Gibbons, 2003), the  structure of  programs is  captured by higher-order recursion operators such as <em>map</em>, <em>fold</em> and <em>unfold</em>. [from <a href=\"http://www.cs.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf\" target=\"_blank\" title=\"http://www.cs.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf\">http://www.cs.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf</a> ]</p>\n</blockquote>",
        "id": 131211853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533869891
    },
    {
        "content": "<p><span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span></p>",
        "id": 131211869,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533869928
    },
    {
        "content": "<p>I guess you now know that bifunctor and bitraversable are coming</p>",
        "id": 131211881,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533869969
    },
    {
        "content": "<p>Also: monotraversable to use traversable-like techniques on monomorphic structures like strings</p>",
        "id": 131211962,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533870030
    },
    {
        "content": "<p>what does that mean? What is the type of traverse in this case?</p>",
        "id": 131212437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533870784
    },
    {
        "content": "<p>that would look like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">mono_traversable</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">traverse</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">applicative</span> <span class=\"n\">m</span><span class=\"o\">],</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 131212578,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533870979
    },
    {
        "content": "<p>Lean has chosen to handle modules and namespaces orthogonally. A nice choice, I think. It means that if you need to prove something about lists, it doesn't need to go into the file <code>list.lean</code>, you can just prove <code>list.foobar</code> in your own file. Or you write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"bp\">....</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n</pre></div>\n\n\n<p>Of course, that also means that you don't get access to <code>list.foobar</code> by just <code>import data.list</code>. You will also have to import the file where <code>list.foobar</code> is stated.</p>\n<p><code>open list</code> means that inside the section/file where you issued the <code>open</code> command, you can just write <code>foobar</code> instead of <code>list.foobar</code>. If you already had a <code>foobar</code>, this would lead to ambiguity. You can close one of them with <code>close</code>. The root namespace is called <code>_root_</code>.</p>",
        "id": 131216060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533876613
    },
    {
        "content": "<blockquote>\n<p>But if you use <code>mathlib</code>, you can import <code>meta.expr</code>and use <code>expr.list_local_const</code></p>\n</blockquote>\n<p>I really think that it is a pity that there is group theory in core, and stuff like this in mathlib... I wish it was the other way round (-;</p>",
        "id": 131220955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533885092
    }
]