[
    {
        "content": "<p>I'm struggling with the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finmap\">docs#finmap</a>. It's defined as <code>structure finmap {α : Type u} (β : α → Type v) : Type (max u v)</code>. Hence if I want a <code>finmap</code> with keys of type <code>A</code> and values of type <code>B</code> I have to write <code>@finmap A (λ _, B)</code>. There must be a more elegant way. What am I missing?</p>\n<p>Perhaps for context: I want to use <code>finmap A B</code> like dictionaries/hash-map would be in \"regular\" programming languages. I hope this is the correct type for that.</p>",
        "id": 245958145,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626268919
    },
    {
        "content": "<p><code>finmap (λ _ : A, B)</code></p>",
        "id": 245962459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626270873
    },
    {
        "content": "<p>The reason this API feels weird to you is you're not using the more powerful dependently-typed cases, like <code>x : finmap fin</code> where <code>x.lookup 2 : option (fin 2)</code> etc.</p>",
        "id": 245963775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626271432
    },
    {
        "content": "<p>Yeah, I guess I'm just used to Lean providing a dependent and non-dependent version of these kinds of types ¯\\_(ツ)_/¯</p>",
        "id": 245964047,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626271549
    }
]