[
    {
        "content": "<p>Hi, I've been working with some representation stuff, and when trying to define a subrepresentation I get this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.monoid_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">representation</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">k</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_smul</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">k</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">subrepresentation</span> <span class=\"o\">[</span><span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">submodule</span> <span class=\"n\">k</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">sub_mul_action</span> <span class=\"n\">G</span> <span class=\"n\">M</span>\n<span class=\"c1\">-- invalid 'structure' header, field 'smul_mem'' from 'sub_mul_action' has already been declared with a different type</span>\n</code></pre></div>\n<p>So Lean is unhappy with the implementation detail that two <code>smul</code>s from the <code>G</code>-action and the <code>k</code> scalar multiplication are called the same thing. Is there any way to tell Lean to use different names?</p>",
        "id": 235990053,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1619287029
    },
    {
        "content": "<p>Instead of <code>extend</code>ing you can just extend one thing, add the fields of the other thing (changing the bad name appropriately), and then define the structure projection yourself if and when you need it.</p>",
        "id": 235990191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619287134
    },
    {
        "content": "<p>Is there any preference for which one I should extend? Or does it not matter?</p>",
        "id": 235990434,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1619287286
    },
    {
        "content": "<p>I think it doesn't matter. I should add that I learnt about this stuff earlier today for the first time, so I am not really an expert.</p>",
        "id": 235990513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619287337
    },
    {
        "content": "<p>Also, I was wondering if I should still be using <code>set_option old_structure_cmd true</code>, since you seemed to be getting rid of all them.</p>",
        "id": 235990584,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1619287391
    },
    {
        "content": "<p>Ah, I guess I will wait for someone who knows better to tell me how this works then</p>",
        "id": 235990723,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1619287467
    },
    {
        "content": "<p>If my understanding of your problem is correct, the old structure command won't help you. That's for when you extend two things which both have a <code>smul_mem'</code> but they're the same thing.</p>",
        "id": 235990789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619287534
    },
    {
        "content": "<p>I think this will be fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">subrepresentation</span> <span class=\"o\">[</span><span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">submodule</span> <span class=\"n\">k</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">group_smul_mem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Note structure not class: a typical representation will have more than one subrepresentation.</p>",
        "id": 235991222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619287861
    },
    {
        "content": "<p>Oh, thank you! I had your exact copy of code with <code>class</code> instead of <code>structure</code>; that mistake would not have been fun to fix later</p>",
        "id": 235991381,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1619287988
    },
    {
        "content": "<p>I think this is better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">representation</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">k</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_smul</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I think that you shouldn't extend stuff with fewer variables (like e.g. semimodule k M does not extend add_comm_monoid M, it asks for it)</p>",
        "id": 235991407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619287994
    },
    {
        "content": "<p>As I say, I don't really understand why.</p>",
        "id": 235991429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619288022
    },
    {
        "content": "<p>Hmm, ok, I will keep that in mind. Thank you again for your help!</p>",
        "id": 235991753,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1619288260
    },
    {
        "content": "<p>If you extend something with fewer arguments, then the <code>instance derived.to_base : base</code> is a dangerous instance with an unrestricted argument</p>",
        "id": 235996737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619291254
    }
]