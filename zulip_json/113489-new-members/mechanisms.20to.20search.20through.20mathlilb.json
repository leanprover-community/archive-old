[
    {
        "content": "<p>How frequently do more experienced Leaners use <code>library_search</code> or <code>suggest</code>? Personally, I find myself using <code>library_search</code> a lot, and not so much <code>suggest</code>. Just in the general situation of, hmmm this seems like it could be a lemma in mathlib but I don't know if it is exactly. I'm wondering if it were possible to speed up or improve the depth of <code>library_search</code> if many people would use that. So I'm curious if:</p>\n<ol>\n<li>Most people just remember all the relevant lemmas</li>\n<li>People use <code>library_search</code> a lot</li>\n<li>People usually just look through the documentation for relevant lemmas</li>\n<li>People use some other similar tactic that I'm not familiar with</li>\n</ol>",
        "id": 213190903,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602610755
    },
    {
        "content": "<p>Being familiar with the <a href=\"https://leanprover-community.github.io/contribute/naming.html\">naming conventions</a> helps a lot with being able to guess enough of a name to get the Lean server's auto-complete to do the rest.</p>",
        "id": 213191520,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602611063
    },
    {
        "content": "<p>I use <code>library_search</code> mostly in the middle of tactic proofs for little things which I know should (or at least ought to) be in mathlib.</p>",
        "id": 213192629,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602611613
    },
    {
        "content": "<p>I don't think I've ever actually used <code>suggest</code>, but I know it's there.</p>",
        "id": 213192977,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602611766
    },
    {
        "content": "<p>I rarely use <code>library_search</code> or <code>suggest</code>, since finding something by name or by guessing which file it should be in is often faster for me. The <code>Ctrl-T</code> search gets me what i want most of the time, and I use VSCode search otherwise. Sometimes I use the docs when I want to get an overview of a file.</p>\n<p>Using <code>library_search</code> to find instance definitions can be a bit slow, so I just use <code>by show_term {apply_instance}</code> when I want to find the definition of an instance.</p>",
        "id": 213195757,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1602613041
    },
    {
        "content": "<p>Apart from regular <code>library_search</code> usage, I sometimes use <code>suggest</code> to see what related constructors might be present in the imported namespace</p>",
        "id": 213196813,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602613523
    },
    {
        "content": "<p>ok, this is very enlightening for me as I was not considering vscode autocomplete as a logical tool for comparison, but that makes total sense now that you bring it up</p>",
        "id": 213197070,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602613659
    },
    {
        "content": "<p>my takeaway is that <code>library_search</code> has some utility, but the latency is not competitive enough with vscode language features to supplant them</p>",
        "id": 213197318,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602613768
    },
    {
        "content": "<p>An additional search mechanism I use (in VSCode) is use <code>suggest</code> or <code>library_search</code> to prove something related or simpler, then F12 to go to definition in the file of that newly found lemma, and read the lemmas and proofs to get a sense of what the API is. Which is more involved than just a doc search,  but a lot more informative for me.</p>",
        "id": 213198370,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602614209
    },
    {
        "content": "<p>I use library search a lot, even in situations where I'm reasonably sure I can work out the name / order of arguments, or even in place of <code>assumption</code> quite often. If you dont have too many imports it can be quicker in my experience just to do that / less mental energy. <code>suggest</code> I use when I want to find a possible <code>rw</code> as well as things to apply, as the rewrite-able lemmas come up as <code>blah_iff_blah.mp</code>.</p>",
        "id": 213204180,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1602616583
    },
    {
        "content": "<p>Does anybody use the <code>library_search</code> \"hole command\"? I have not been able to get it to work, but I only found out about its existence from looking at the code, so I'm not sure if it's in general use</p>",
        "id": 213223321,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602627063
    },
    {
        "content": "<p>Hole commands don't work in tactic mode, unfortunately.</p>",
        "id": 213223593,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602627231
    },
    {
        "content": "<p>So you'd have to do something like <code>example : true := {! !}</code> and then try to trigger the whole command there.</p>",
        "id": 213223655,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602627252
    },
    {
        "content": "<p>I got that far, but I haven't been able to get it to work outside tactic mode either. the <code>library_search</code> hole command at least seems to spit out some extra characters</p>",
        "id": 213223830,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602627397
    },
    {
        "content": "<p>but, it seems like it isn't generally what people are using anyway</p>",
        "id": 213223844,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602627408
    },
    {
        "content": "<p>Oh, you're right. There's a bug with the <code>library_search</code> hole command right now. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">!!</span><span class=\"o\">}</span>\n<span class=\"c1\">-- triggering the hole command leads to:</span>\n<span class=\"c1\">-- example : true := is: exact trivial</span>\n</code></pre></div>",
        "id": 213224114,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602627630
    },
    {
        "content": "<p>yeah i was just looking into this - i bet the string chopping here in <code>suggest.lean</code> is the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[hole_command]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">library_search_hole_cmd</span> <span class=\"o\">:</span> <span class=\"n\">hole_command</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"library_search\"</span><span class=\"o\">,</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Use `library_search` to complete the goal.\"</span><span class=\"o\">,</span>\n  <span class=\"n\">action</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"n\">script</span> <span class=\"bp\">←</span> <span class=\"n\">library_search</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Is there a better API for dropping the 'exact ' prefix on this string?</span>\n    <span class=\"n\">return</span> <span class=\"o\">[((</span><span class=\"n\">script.mk_iterator.remove</span> <span class=\"mi\">6</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_string</span><span class=\"o\">,</span> <span class=\"s2\">\"by library_search\"</span><span class=\"o\">)]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 213224253,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602627727
    },
    {
        "content": "<p>do you know if lean tactic language has a way to split strings on a string match? or just like, typical string manipulation library stuff</p>",
        "id": 213224308,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602627775
    },
    {
        "content": "<p>Yep, I was about to make a PR.</p>",
        "id": 213224328,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602627790
    },
    {
        "content": "<p>ok cool go for it</p>",
        "id": 213224343,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602627800
    },
    {
        "content": "<p>Not off the top of my head, I was just going to change 6 to 16.</p>",
        "id": 213224354,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602627810
    },
    {
        "content": "<p>lol</p>",
        "id": 213224360,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602627814
    },
    {
        "content": "<p>everyone has all of these aesthetic principles when it comes to the mathematical proofs, but when it comes to splitting a string on a word, bah let's hard code in the length of the string prefix <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 213224471,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602627890
    },
    {
        "content": "<p>Hah. Well, I'm now digging around in the string API at the moment so there you go.</p>",
        "id": 213224588,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602627965
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/string.split\">docs#string.split</a> ?</p>",
        "id": 213224605,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1602627983
    },
    {
        "content": "<p>Splits on a character/character list it seems</p>",
        "id": 213224620,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1602628000
    },
    {
        "content": "<p><code>#eval \"exact library_search\".split (= ' ')</code></p>",
        "id": 213224768,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1602628099
    },
    {
        "content": "<p>I started working on splitting strings and decided it wasn't worth my time - but that's why there are now lemmas relating <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.inits\">docs#list.inits</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.tails\">docs#list.tails</a>.</p>",
        "id": 213226967,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602629373
    },
    {
        "content": "<p>I ended up going with a <code>list</code> function instead. See <a href=\"https://github.com/leanprover-community/mathlib/issues/4609\">#4609</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.defs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">script</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Try this: exact trivial\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">script.to_list</span>\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"n\">s.get_rest</span> <span class=\"s2\">\"Try this: exact \"</span><span class=\"bp\">.</span><span class=\"n\">to_list</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">as_string</span>\n</code></pre></div>",
        "id": 213228405,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602630338
    },
    {
        "content": "<p>Didn't see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.get_rest\">docs#list.get_rest</a>, that's not so bad</p>",
        "id": 213232176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602633521
    },
    {
        "content": "<p>Heh, I missed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/string.get_rest\">docs#string.get_rest</a> ... <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.defs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">script</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Try this: exact trivial\"</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">script.get_rest</span> <span class=\"s2\">\"Try this: exact \"</span><span class=\"bp\">.</span><span class=\"n\">to_list</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"n\">script</span>\n</code></pre></div>",
        "id": 213320173,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602694633
    },
    {
        "content": "<p>I use <code>suggest</code> a lot, as it is faster than <code>library_search</code> and doesn't fail if it can't close the goal. There is also a tactic named <code>hint</code> if I am not mistaken, but I seldom use it.</p>",
        "id": 213334609,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602701174
    },
    {
        "content": "<p><code>hint</code> is completely different: it just tries a list of popular tactics and tells you if any close the goal, and if none do it tells you which ones \"make progress\".</p>",
        "id": 213356279,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602713202
    },
    {
        "content": "<p><code>library_search</code> could likely be made a <em>lot</em> faster with some attention from a good meta-programmer.</p>",
        "id": 213356309,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602713225
    },
    {
        "content": "<p>The basic balance is between just relying on the fact that Leo made <code>apply</code> (i.e. unification) <em>really</em> fast, and so just try all the lemmas, vs doing some amount of analysis of the current goal and only applying a subset of the lemmas.</p>",
        "id": 213356363,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602713278
    },
    {
        "content": "<p>Currently we look at the head symbol of the goal, and filter the lemmas by that (after a bit of munging, to handle things like <code>&gt;</code> vs <code>&lt;</code>).</p>",
        "id": 213356439,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602713315
    },
    {
        "content": "<p>Perhaps there is scope for more caching here?</p>",
        "id": 213356448,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602713322
    },
    {
        "content": "<p><code>library_search</code> tends to be extra slow with <code>=</code> goals, because unsurprisingly there are a great many lemmas that talk about <code>=</code>, and so <code>library_search</code> tries them all with <code>apply</code>, even if the types are wrong. Now unification is smart and so most of these fail very fast --- perhaps so fast that any amount of filtering in <code>meta</code> code is actually going to be a slow down. But it's not completely clear to me; particularly if someone can think up a good way to cache tables of lemmas.</p>",
        "id": 213356574,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602713429
    },
    {
        "content": "<p>yeah, I was looking through it to profile it and see which parts are slow. I cannot currently claim to be \"a good meta-programmer\" though ;-) it seems like more time is being spent in <code>solve_by_elim</code> than in <code>apply</code> but they are both significant and it probably depends a lot on context.</p>",
        "id": 213357771,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602714330
    },
    {
        "content": "<p>is <code>apply</code> fast because it's basically a wrapper around <code>apply_core</code> which is in c++? I think someone mentioned that lean 4 might allow c++ extensions, which might be nice for something like a tree search</p>",
        "id": 213358132,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602714589
    },
    {
        "content": "<p>when a <code>library_search</code> is doing a million object allocations, it kind of seems like the most obvious performance thing is to push more of the logic into c++.</p>",
        "id": 213358313,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602714678
    },
    {
        "content": "<p>Nowadays, the most common way that I search through mathlib is using the Search function of mathlib docs. It just searches through the names of theorems, so you need to know the naming convention a bit for it to use it well, but its fuzzy matching is really good. For example if I search<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_implies_measurable\">https://leanprover-community.github.io/mathlib_docs/find/continuous_implies_measurable</a><br>\nI get <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.measurable\">docs#continuous.measurable</a> as third result. A common strategy is that if I want a theorem that involves both <code>foo</code> and <code>bar</code> I just search for <code>foo_bar</code> using this serach function. For example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_comp\">https://leanprover-community.github.io/mathlib_docs/find/tendsto_comp</a> gives <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.comp\">docs#filter.tendsto.comp</a> (after some other suggestions).<br>\nIn Chrome you can add <code>http://leanprover-community.github.io/mathlib_docs/find/%s</code> as search engine, with a keyword. In my case I just have to type <code>ml tendsto_comp</code> in the search bar to do the above search.</p>\n<p>The other way I search is the regular search (<code>ctrl+F</code>) or search through all files (<code>ctrl+shift+F</code>) in VSCode.<br>\nI don't know how well these strategies translate to tips to beginners/intermediate users, because they probably work less well if you don't know the naming scheme well.</p>",
        "id": 213360248,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602715956
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113489-new-members/topic/mechanisms.20to.20search.20through.20mathlilb/near/213358313\">said</a>:</p>\n<blockquote>\n<p>when a <code>library_search</code> is doing a million object allocations, it kind of seems like the most obvious performance thing is to push more of the logic into c++.</p>\n</blockquote>\n<p>I haven't written C++ in years and don't plan to break my streak, but I would love a fastar <code>library_search</code>!</p>",
        "id": 213365221,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602719760
    },
    {
        "content": "<p>I'd be curious to see examples where <code>solve_by_elim</code> is taking the majority of the time. This means that <em>many</em> lemmas are successfully unifying with the goal, and so there are then many calls to <code>solve_by_elim</code> to \"clean up the mess\", i.e. enforce that all new goals can be solved from existing hypotheses.</p>",
        "id": 213373922,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602728893
    },
    {
        "content": "<p>It may be there are good heuristics for avoiding calling solve_by_elim (or just using <code>assumption</code>)</p>",
        "id": 213373941,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602728917
    },
    {
        "content": "<p>I had always assumed it was being called infrequently enough this wasn't worth optimising.</p>",
        "id": 213373947,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602728931
    },
    {
        "content": "<p>Also, if we had easier support for parallelism, <code>library_search</code> is embarrassingly parallelizable.</p>",
        "id": 213374140,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602729194
    },
    {
        "content": "<p>here's an example i was profiling:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"c1\">-- set_option trace.suggest true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 213451300,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602779264
    },
    {
        "content": "<p>47% of the time is in solve_by_elim, 36% spent in the apply that's called directly from <code>suggest.lean</code></p>",
        "id": 213451469,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602779352
    },
    {
        "content": "<p>it's a bit tricky to measure because <code>solve_by_elim</code> itself calls apply - do you know if the profiler is capable of outputting tree-style profiles? - but i mucked around renaming things to separate them out</p>",
        "id": 213451526,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602779390
    },
    {
        "content": "<p>parallelism is a good point - are there any mechanisms for spawning a thread or similar things in lean?</p>",
        "id": 213451685,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602779456
    },
    {
        "content": "<p>I guess <code>io.cmd</code> <em>sort</em> of lets you do parallelism, but it seems kinda terrible to do that</p>",
        "id": 213518578,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602823784
    }
]