[
    {
        "content": "<p>Is there a mathlib lemma that says if I can construct a <code>finset α</code> with cardinality <code>n</code> then <code>fintype.card α ≥ n</code>?</p>",
        "id": 195659127,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1588134547
    },
    {
        "content": "<p>I doubt it, but I am sure there are lemmas that say things like every finset is a subset of <code>finset.univ</code> and <code>finset.card</code> preserves order and <code>finset.univ.card</code> equals <code>fintype.card</code>.</p>",
        "id": 195659193,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588134645
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hX</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_of_subset</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195714045,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588169114
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">hX</span> <span class=\"bp\">▸</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_of_subset</span> <span class=\"err\">$</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span> <span class=\"n\">X</span>\n</code></pre></div>",
        "id": 195714292,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588169206
    },
    {
        "content": "<p>just to check my understanding, your proof is more-or-less a mechanical translation of my tactic script into a single term? (do you think it runs noticeably faster?)</p>",
        "id": 195714603,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588169303
    },
    {
        "content": "<p>yes; no</p>",
        "id": 195714674,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588169335
    },
    {
        "content": "<p>I think that there is some overhead for entering tactic mode and some more overhead by using the rewrite command; I've noticed slowdown in scripts which use a lot of rewrites. I would be interested to know how much faster term mode is; in some sense the best argument for writing stuff in term mode is that it's faster (because it's also less readable, harder to debug, harder to write...)</p>",
        "id": 195719730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588171345
    },
    {
        "content": "<p>I created files which were just 10,000 copies of the term proof and the tactic proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">hX</span> <span class=\"bp\">▸</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_of_subset</span> <span class=\"err\">$</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span> <span class=\"n\">X</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">hX</span> <span class=\"bp\">▸</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_of_subset</span> <span class=\"err\">$</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span> <span class=\"n\">X</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">hX</span> <span class=\"bp\">▸</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_of_subset</span> <span class=\"err\">$</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span> <span class=\"n\">X</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hX</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_of_subset</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">example</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hX</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_of_subset</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>and here are the timings:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">bob</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">xena</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">term_v_tactic</span><span class=\"err\">$</span> <span class=\"n\">date</span><span class=\"bp\">;</span> <span class=\"n\">lean</span> <span class=\"c1\">--make tactic10000.lean; date</span>\n<span class=\"n\">Wed</span> <span class=\"mi\">29</span> <span class=\"n\">Apr</span> <span class=\"mi\">16</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span><span class=\"mi\">54</span> <span class=\"n\">BST</span> <span class=\"mi\">2020</span>\n<span class=\"n\">Wed</span> <span class=\"mi\">29</span> <span class=\"n\">Apr</span> <span class=\"mi\">16</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">58</span> <span class=\"n\">BST</span> <span class=\"mi\">2020</span>\n<span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">bob</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">xena</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">term_v_tactic</span><span class=\"err\">$</span> <span class=\"n\">date</span><span class=\"bp\">;</span> <span class=\"n\">lean</span> <span class=\"c1\">--make term10000.lean; date</span>\n<span class=\"n\">Wed</span> <span class=\"mi\">29</span> <span class=\"n\">Apr</span> <span class=\"mi\">16</span><span class=\"o\">:</span><span class=\"mi\">15</span><span class=\"o\">:</span><span class=\"mi\">05</span> <span class=\"n\">BST</span> <span class=\"mi\">2020</span>\n<span class=\"n\">Wed</span> <span class=\"mi\">29</span> <span class=\"n\">Apr</span> <span class=\"mi\">16</span><span class=\"o\">:</span><span class=\"mi\">15</span><span class=\"o\">:</span><span class=\"mi\">11</span> <span class=\"n\">BST</span> <span class=\"mi\">2020</span>\n<span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">bob</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">xena</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">term_v_tactic</span><span class=\"err\">$</span>\n</code></pre></div>\n\n\n<p>The tactic proof took over a minute and the term proof took 6 seconds.</p>",
        "id": 195725403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588173415
    },
    {
        "content": "<p>The profiler also seems to indicate that the term mode proof is much faster; the tactic proof takes well over a millisecond and the tactic proof well under.</p>",
        "id": 195725634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588173511
    },
    {
        "content": "<p>surely it's worth a thousand milliseconds to not use that awful triangle, though</p>",
        "id": 195726540,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588173862
    },
    {
        "content": "<p>I suspect it's the triangle which is saving the time; rewrite is hard work, it's a lot more than eq.subst, that's why the triangle is so awful. We should just celebrate the miracle that it actually works in this situation</p>",
        "id": 195726794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588173973
    },
    {
        "content": "<p>I agree except actually I have no idea whether these claims about timing are true. eq.subst has to work out the motive too.</p>",
        "id": 195726925,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588174034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Finsets.20and.20fintypes/near/195726540\" title=\"#narrow/stream/113489-new-members/topic/Finsets.20and.20fintypes/near/195726540\">said</a>:</p>\n<blockquote>\n<p>surely it's worth a thousand milliseconds to not use that awful triangle, though</p>\n</blockquote>\n<p><a href=\"https://imgur.com/t/before_id_let_this_company_die/2wF5Jvx\" title=\"https://imgur.com/t/before_id_let_this_company_die/2wF5Jvx\">compile-time optimization at any cost (just a humorous image)</a></p>",
        "id": 195727075,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588174095
    },
    {
        "content": "<p>this reminds me that we need the leftwards-pointing triangle notation for <code>eq.substr</code></p>",
        "id": 195727990,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1588174461
    },
    {
        "content": "<p>but looking forward to Lean 4, I think there's a lot of scope for making term mode a nicer environment to do proofs in... people in Agda generally are happy with programming and proving with holes. In a way I think this would be a good way to produce \"fast\" proofs that are reasonably easy to write</p>",
        "id": 195728329,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1588174591
    },
    {
        "content": "<p>Hopefully tactics will get faster in Lean 4 as well</p>",
        "id": 195729023,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588174898
    },
    {
        "content": "<p>Me too, but there's no getting around the fact that tactics are generally very powerful pieces of compile-time automation, and that represents work the computer has to do</p>",
        "id": 195729628,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1588175087
    },
    {
        "content": "<p>Say what you want about Metamath, but I am impressed they manage to type-check everything in just a few seconds</p>",
        "id": 195729719,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1588175104
    },
    {
        "content": "<p>everything being their entire body of formalized math</p>",
        "id": 195729784,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1588175124
    },
    {
        "content": "<p>Metamath is also Pollack-consistent, I learnt today</p>",
        "id": 195731002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588175563
    },
    {
        "content": "<p>Isn't \"people with Agda generally are happy with programming and proving with holes\" partially explained by \"agda users are more computer sciencey than mathy?\"</p>",
        "id": 195731081,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588175582
    },
    {
        "content": "<p>I guess I'm still not sure where the time is actually going. Is it expensive to write <code>begin ... end</code>? (Kevin, maybe try wrapping the term mode proofs in <code>by exact</code>?) Is <code>rw</code> intrinsically doing a lot more work than the stupid triangle, such that if the stupid triangle became a smart triangle, it would also be expensive? Or is it because parts of <code>rw</code> are written in Lean? Is the tactic state access of <code>apply</code> and <code>refine</code> slow? Surely these latter tactics do not do significantly more than just building the corresponding terms in term mode?</p>",
        "id": 195731112,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588175593
    },
    {
        "content": "<p>ooh</p>",
        "id": 195731486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588175760
    },
    {
        "content": "<p>I just remembered that $ doesn't work in tactic mode.</p>",
        "id": 195731553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588175769
    },
    {
        "content": "<p>Boy that's a lot of errors</p>",
        "id": 195731565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588175776
    },
    {
        "content": "<p>Somehow after <code>exact</code> you can't use <code>$</code>. I never understood why not. You seem to be able to use everything else.</p>",
        "id": 195731685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588175821
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">$</span> <span class=\"n\">date</span><span class=\"bp\">;</span> <span class=\"n\">lean</span> <span class=\"c1\">--make byexactterm10000.lean; date</span>\n<span class=\"n\">Wed</span> <span class=\"mi\">29</span> <span class=\"n\">Apr</span> <span class=\"mi\">16</span><span class=\"o\">:</span><span class=\"mi\">58</span><span class=\"o\">:</span><span class=\"mi\">00</span> <span class=\"n\">BST</span> <span class=\"mi\">2020</span>\n<span class=\"n\">Wed</span> <span class=\"mi\">29</span> <span class=\"n\">Apr</span> <span class=\"mi\">16</span><span class=\"o\">:</span><span class=\"mi\">58</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"n\">BST</span> <span class=\"mi\">2020</span>\n</code></pre></div>",
        "id": 195731951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588175915
    },
    {
        "content": "<p>So <code>by exact</code> already incurs 1/3 the cost</p>",
        "id": 195732501,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588176122
    },
    {
        "content": "<p>and you have three tactics <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 195732537,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588176133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264734\">Donald Sebastian Leung</span> <a href=\"#narrow/stream/113489-new-members/topic/Finsets.20and.20fintypes/near/195659127\" title=\"#narrow/stream/113489-new-members/topic/Finsets.20and.20fintypes/near/195659127\">said</a>:</p>\n<blockquote>\n<p>Is there a mathlib lemma that says if I can construct a <code>finset α</code> with cardinality <code>n</code> then <code>fintype.card α ≥ n</code>?</p>\n</blockquote>\n<p>Also I just found out why you asked this <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 196096973,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588503135
    },
    {
        "content": "<p>I think a more naturally-phrased form of this lemma would be good for mathlib</p>",
        "id": 196096984,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588503168
    }
]