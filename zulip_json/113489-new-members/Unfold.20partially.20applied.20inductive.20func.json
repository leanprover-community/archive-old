[
    {
        "content": "<p>In the following example. ..</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">side</span>\n<span class=\"bp\">|</span> <span class=\"n\">front</span> <span class=\"o\">:</span> <span class=\"n\">side</span>\n<span class=\"bp\">|</span> <span class=\"n\">back</span> <span class=\"o\">:</span> <span class=\"n\">side</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">thing.nth</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">side</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">side.front</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">t.input.nth</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">side.back</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">t.output.nth</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">front_eq_input</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t.input.nth</span> <span class=\"bp\">=</span> <span class=\"n\">t.nth</span> <span class=\"n\">side.front</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">thing.nth</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- simplify tactic failed to simplify</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>... why can't I unfold <code>thing.nth</code>?<br>\nI feel like it has to do something with the fact that the <code>ℕ</code> is on the right side of the colon in <code>thing.nth</code>, but I don't actually know.</p>",
        "id": 228669462,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614806021
    },
    {
        "content": "<p>Yes, you have to invent a <code>nat</code> there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">front_eq_input</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t.input.nth</span> <span class=\"bp\">=</span> <span class=\"n\">t.nth</span> <span class=\"n\">side.front</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">thing.nth</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228669791,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614806139
    },
    {
        "content": "<p>Compare to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">thing.nth</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">side</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">side.front</span> <span class=\"o\">:=</span> <span class=\"n\">t.input.nth</span>\n<span class=\"bp\">|</span> <span class=\"n\">side.back</span> <span class=\"o\">:=</span> <span class=\"n\">t.output.nth</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">front_eq_input</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t.input.nth</span> <span class=\"bp\">=</span> <span class=\"n\">t.nth</span> <span class=\"n\">side.front</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 228669961,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614806201
    },
    {
        "content": "<p>I've removed the repetitive <code>... n := ... n</code> into a <code>... := ... </code></p>",
        "id": 228670026,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614806227
    },
    {
        "content": "<p>This is particularly pernicious when the inductive function is in the middle of a larger expression so ext doesn't work</p>",
        "id": 228680439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614810591
    },
    {
        "content": "<p>Eg <code>list.map (t.nth side.back) l</code></p>",
        "id": 228680836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614810767
    },
    {
        "content": "<p>Is the some way to un-delta/beta/whatever-it-is reduce the function?</p>",
        "id": 228680935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614810816
    },
    {
        "content": "<p>You mean to rewrite within the <code>map</code> if the lemma exists only in fully applied form?</p>",
        "id": 228682628,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614811635
    },
    {
        "content": "<p>I want to unfold <code>nth</code> into a lambda</p>",
        "id": 228682782,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614811697
    },
    {
        "content": "<p>As if I'd written <code>list.map (fun n, t.nth side.back n) l</code></p>",
        "id": 228682832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614811725
    },
    {
        "content": "<p>Because <code>unfold</code> works in that second case</p>",
        "id": 228682858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614811739
    },
    {
        "content": "<p><code>have : t.nth side.back = fun n, t.nth side.back n := rfl, rw this</code>?</p>",
        "id": 228683129,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614811885
    },
    {
        "content": "<p>More awkward if the arguments are some ugly expression, but I guess that works</p>",
        "id": 228683974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614812281
    },
    {
        "content": "<p>Nope, doesn't work. But it wouldn't have worked even for the either type of defining it.</p>",
        "id": 228699224,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614820582
    },
    {
        "content": "<p>I did experiment with a tactic that would do exactly what I suggested, but it got me nowhere. For posterity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">expr.pi_to_lam</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span> <span class=\"n\">b.pi_to_lam</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">expr.count_pis</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b.count_pis</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">func_to_lam</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">eo</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e</span><span class=\"o\">),</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">t.count_pis</span><span class=\"o\">,</span>\n  <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">list.mfoldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e'</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">%%</span><span class=\"n\">e'</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">list.range</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n  <span class=\"n\">pe</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">eo</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">e'</span><span class=\"o\">),</span>\n  <span class=\"n\">h</span> <span class=\"bp\">←</span> <span class=\"n\">get_unused_name</span><span class=\"o\">,</span>\n  <span class=\"n\">rflp</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"n\">note</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">pe</span><span class=\"o\">)</span> <span class=\"n\">rflp</span><span class=\"o\">,</span>\n  <span class=\"n\">he</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- how do I run `rw %%he` now?</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">interactive.func_to_lam</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">t.nth</span> <span class=\"n\">side.front</span><span class=\"o\">),</span>\n  <span class=\"n\">func_to_lam</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">front_eq_input</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"n\">t.input.nth</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"n\">t.nth</span> <span class=\"n\">side.front</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">interactive.func_to_lam</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">_x</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228699648,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614820813
    },
    {
        "content": "<p>I feel like I've run into the same situation again.<br>\nIs this one solvable, or does there exists some workaround? <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span><br>\nAnd why doesn't this just work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">υ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ports</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">υ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">υ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ports.nth</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ports</span> <span class=\"n\">υ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">υ</span> <span class=\"o\">:=</span> <span class=\"n\">mjoin</span> <span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">ports</span> <span class=\"n\">υ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.nth</span> <span class=\"bp\">=</span> <span class=\"n\">p'.nth</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">ports.nth</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- doesn't unfold</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228803400,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614875056
    },
    {
        "content": "<p>What do you want to do here? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">ports</span> <span class=\"n\">υ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.nth</span> <span class=\"bp\">=</span> <span class=\"n\">p'.nth</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p.nth</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p'.nth</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">ports.nth</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228803848,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614875218
    },
    {
        "content": "<p>Ok now I'm confused, this doesn't work for me outside of the MWE.<br>\nI'm trying to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">ports</span> <span class=\"n\">υ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hₚ</span> <span class=\"o\">:</span> <span class=\"n\">p.nth</span> <span class=\"bp\">=</span> <span class=\"n\">p'.nth</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₗ</span> <span class=\"o\">:</span> <span class=\"n\">p.length</span> <span class=\"bp\">=</span> <span class=\"n\">p'.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p.length</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p.nth</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p'.nth</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">congr_fun</span> <span class=\"n\">hₚ</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">ports.nth</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- ...</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">not_lt.mp</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">hₗ</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">not_lt.mp</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.nth_len_le</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">list.nth_len_le</span> <span class=\"n\">h'</span><span class=\"o\">],</span>\n    <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228805011,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614875569
    },
    {
        "content": "<p>Do you know that <code>mjoin</code> here is injective?</p>",
        "id": 228805898,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614875844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Unfold.20partially.20applied.20inductive.20func/near/228805898\">said</a>:</p>\n<blockquote>\n<p>Do you know that <code>mjoin</code> here is injective?</p>\n</blockquote>\n<p>What does that mean in this context?</p>",
        "id": 228806138,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614875922
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">ports</span> <span class=\"n\">υ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hₚ</span> <span class=\"o\">:</span> <span class=\"n\">p.nth</span> <span class=\"bp\">=</span> <span class=\"n\">p'.nth</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₗ</span> <span class=\"o\">:</span> <span class=\"n\">p.length</span> <span class=\"bp\">=</span> <span class=\"n\">p'.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p.length</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p.nth</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p'.nth</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">congr_fun</span> <span class=\"n\">hₚ</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">ports.nth</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">mjoin</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">υ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">υ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">h'</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">not_lt.mp</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">hₗ</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">not_lt.mp</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.nth_len_le</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">list.nth_len_le</span> <span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228806165,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614875933
    },
    {
        "content": "<p>In general, <code>option.join</code> is not injective because <code>option.join none = option.join (some none)</code></p>",
        "id": 228806441,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614876045
    },
    {
        "content": "<p>You'll have to show that <code>list.nth</code> must be <code>some</code> when in bounds</p>",
        "id": 228806554,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614876089
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">ports</span> <span class=\"n\">υ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hₚ</span> <span class=\"o\">:</span> <span class=\"n\">p.nth</span> <span class=\"bp\">=</span> <span class=\"n\">p'.nth</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₗ</span> <span class=\"o\">:</span> <span class=\"n\">p.length</span> <span class=\"bp\">=</span> <span class=\"n\">p'.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p.length</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p.nth</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p'.nth</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">congr_fun</span> <span class=\"n\">hₚ</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">ports.nth</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ports</span> <span class=\"n\">υ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p.length</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">list.nth</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n          <span class=\"n\">use</span> <span class=\"n\">list.nth_le</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">list.nth_eq_some</span><span class=\"o\">,</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">h'</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">v'</span><span class=\"o\">,</span> <span class=\"n\">hv'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">p'</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hₗ</span> <span class=\"bp\">▸</span> <span class=\"n\">hc</span><span class=\"o\">),</span>\n      <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">hv'</span><span class=\"o\">,</span> <span class=\"n\">option.join_eq_join</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h'</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">not_lt.mp</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">hₗ</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">not_lt.mp</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.nth_len_le</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">list.nth_len_le</span> <span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228808406,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614876686
    },
    {
        "content": "<p>I ended up doing it this way :D</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">ports</span> <span class=\"n\">υ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hₚ</span> <span class=\"o\">:</span> <span class=\"n\">p.nth</span> <span class=\"bp\">=</span> <span class=\"n\">p'.nth</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₗ</span> <span class=\"o\">:</span> <span class=\"n\">p.length</span> <span class=\"bp\">=</span> <span class=\"n\">p'.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">ext1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p.length</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n          <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p.nth</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p'.nth</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">congr_fun</span> <span class=\"n\">hₚ</span><span class=\"o\">,</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">nth</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n          <span class=\"n\">replace</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">list.nth_le_nth</span> <span class=\"n\">hc</span> <span class=\"n\">at</span> <span class=\"n\">h'</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">υ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">option.some</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">hj</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">hₗ</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">list.nth_le_nth</span> <span class=\"n\">hc</span> <span class=\"n\">at</span> <span class=\"n\">h'</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">hj</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n          <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">not_lt.mp</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">hₗ</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">not_lt.mp</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.nth_len_le</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">list.nth_len_le</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n        <span class=\"o\">}</span>\n    <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228808809,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614876827
    },
    {
        "content": "<p>But thanks for your help!</p>",
        "id": 228808892,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614876848
    },
    {
        "content": "<p>In general, the <code>simp</code>lifier is your friend!</p>",
        "id": 228810932,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614877553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> are you talking about that sequence of rewrites I have? :D</p>",
        "id": 228825703,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614882706
    }
]