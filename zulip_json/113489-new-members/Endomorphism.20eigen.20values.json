[
    {
        "content": "<p>Hi,</p>\n<p>I'm trying to express that \"0 \\not \\in sp(f) &lt;-&gt; f surjective\" where f is an endomorphism. I wrote the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.eigenspace</span>\n\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">module.End</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">):</span>\n\n<span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">f.has_eigenvalue</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>\n<span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I get an error about the type of f that I do not understand.  What  am i doing wrong?</p>",
        "id": 241814636,
        "sender_full_name": "Maxime Darrin",
        "timestamp": 1623088253
    },
    {
        "content": "<p>What's the error?</p>",
        "id": 241814803,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623088316
    },
    {
        "content": "<p>One thing you're doing wrong is that I very much doubt that this is true without some finiteness hypotheses</p>",
        "id": 241814952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623088364
    },
    {
        "content": "<p>Eg consider the abelian group hom <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>:</mo><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mo>→</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">E:=\\Z[X]\\to\\Z[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> sending X to 2X</p>",
        "id": 241815165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623088446
    },
    {
        "content": "<p>The error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">f.has_eigenvalue</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">module.End</span> <span class=\"n\">R</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">module.End</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>And yeah, ok I forgot the finiteness</p>",
        "id": 241815225,
        "sender_full_name": "Maxime Darrin",
        "timestamp": 1623088474
    },
    {
        "content": "<p>Probably you need R to be a ring</p>",
        "id": 241815276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623088492
    },
    {
        "content": "<p>So this should suggest to you that the <code>has_eigenvalue</code> function requires some typeclass which you don't have. I suggest starting there</p>",
        "id": 241815353,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623088523
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.End.has_eigenvalue\">docs#module.End.has_eigenvalue</a></p>",
        "id": 241815366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623088526
    },
    {
        "content": "<p><code>comm_ring R</code></p>",
        "id": 241815405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623088539
    },
    {
        "content": "<p>Hover over <code>has_eigenvalue</code> in your code and you'll see what assumptions it needs</p>",
        "id": 241815409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623088540
    },
    {
        "content": "<p>Or do what Eric did and then click on the link</p>",
        "id": 241815449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623088561
    },
    {
        "content": "<p>Thanks i got it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">module.End</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">):</span>\n<span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"n\">E</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">((</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">f.has_eigenvalue</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is this the correct way to add the finite dimensionality hypothesis ?</p>",
        "id": 241816132,
        "sender_full_name": "Maxime Darrin",
        "timestamp": 1623088864
    },
    {
        "content": "<p>Just add <code>[finite_dimensional R E]</code> before you introduce <code>f</code></p>",
        "id": 241816180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623088891
    },
    {
        "content": "<p>But this looks good now</p>",
        "id": 241816343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623088948
    }
]