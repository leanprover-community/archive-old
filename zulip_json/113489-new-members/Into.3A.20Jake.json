[
    {
        "content": "<p>Hi all, my name is Jake. I'm a developer looking and venturing into dependently typed languages using lean 4! I will be using lean to do the advent of code this year: <a href=\"https://adventofcode.com\">https://adventofcode.com</a> </p>\n<p>I've been reading through the functional programming in lean and trying to get through \"the Bible\" (theorem proving in lean 4) but I definitely have lots of questions that I'm hoping you all can help me with or at least give me some pointers on where to learn more!</p>\n<p>One thing that I'm running in to: I want to define a new number type to represent a AOC problem number (day 1 through 25) and I'm wondering what the best way to do that is? So far I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ProblemNumber</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">of</span> <span class=\"o\">::</span>\n  <span class=\"n\">day</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">dayMin</span><span class=\"o\">:</span> <span class=\"n\">day</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"n\">dayMax</span><span class=\"o\">:</span> <span class=\"n\">day</span> <span class=\"bp\">≤</span> <span class=\"mi\">25</span>\n</code></pre></div>\n<p>But I don't know how to create an instance of this type (I don't know how to supply a proposition of type <code>1 &gt; 0 : Prop</code>.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">ProblemNumber</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">ProblemNumber.of</span> <span class=\"mi\">1</span> <span class=\"n\">___</span> <span class=\"n\">___</span>\n</code></pre></div>\n<p>Any pointers or thoughts on better ways of modeling this?</p>",
        "id": 312676085,
        "sender_full_name": "Jake S",
        "timestamp": 1669655328
    },
    {
        "content": "<p>One proof would be <code>Nat.lt_succ_self 0</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.lt_succ_self#doc\">docs4#Nat.lt_succ_self</a>). However, a much nicer way exists! Lean can just compute <code>1 &gt; 0</code> as a boolean, so you can write <code>(by decide)</code> to solve goals that can be checked by direct computation (of course, Lean will check that the result of <code>1 &gt; 0</code> is indeed true).</p>",
        "id": 312679859,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1669656397
    },
    {
        "content": "<p>Why supply the proof when you can get the computer to do it for you?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ProblemNumber</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">of</span> <span class=\"o\">::</span>\n  <span class=\"n\">day</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">dayMin</span><span class=\"o\">:</span> <span class=\"n\">day</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n  <span class=\"n\">dayMax</span><span class=\"o\">:</span> <span class=\"n\">day</span> <span class=\"bp\">≤</span> <span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ProblemNumber</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 312679863,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669656399
    },
    {
        "content": "<p>Here, I am using \"default fields\" for a structure, where the default value (RHS of walrus) is a tactic, which describes _how_ to create a default value</p>",
        "id": 312679978,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669656447
    },
    {
        "content": "<p>(Is \"walrus\" an official name for <code>:=</code>?)</p>",
        "id": 312680174,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1669656502
    },
    {
        "content": "<p>It is in python <span aria-label=\"snake\" class=\"emoji emoji-1f40d\" role=\"img\" title=\"snake\">:snake:</span></p>",
        "id": 312681475,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669656855
    },
    {
        "content": "<p><a href=\"https://docs.python.org/3/whatsnew/3.8.html#assignment-expressions\">https://docs.python.org/3/whatsnew/3.8.html#assignment-expressions</a></p>",
        "id": 312681848,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669656975
    },
    {
        "content": "<p>This is amazing! Thank you both for the help here. Thank you <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> - I would like to look into supplying this proof my self. I think I may need to spend more time reading up on theorem proving in lean :)</p>\n<p>I found similar code from timelib here: <a href=\"https://github.com/ammkrn/timelib/blob/main/Timelib/Date/Ymd.lean#L19-L20\">https://github.com/ammkrn/timelib/blob/main/Timelib/Date/Ymd.lean#L19-L20</a><br>\nBut I didn't realize that they must have been proving these explicitly </p>\n<p>Follow up question: Is defining each instance of OfNat (1-25) the best way... or is it possible to model this in some more succinct way like for Positive numbers from the book:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Pos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>(edit: except with bounds in my case)</p>\n<p>or is that what you're saying <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> — will <code>example : ProblemNumber := .of 1</code> also elaborate to 1-25?</p>",
        "id": 312682397,
        "sender_full_name": "Jake S",
        "timestamp": 1669657143
    },
    {
        "content": "<p><code>OfNat ProblemNumber YOURNUMBERHERE</code> will only work if you explicitly construct (either through copy-paste, or some Lean meta code) the 25 instances. Typeclass search does not execute tactics, so unfortunately you can't say something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ProblemNumber</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">of</span> <span class=\"o\">::</span>\n  <span class=\"n\">day</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">dayMin</span><span class=\"o\">:</span> <span class=\"n\">day</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n  <span class=\"n\">dayMax</span><span class=\"o\">:</span> <span class=\"n\">day</span> <span class=\"bp\">≤</span> <span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ProblemNumber</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h25</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">25</span><span class=\"o\">}:</span> <span class=\"n\">OfNat</span> <span class=\"n\">ProblemNumber</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">n</span> <span class=\"n\">h0</span> <span class=\"n\">h25</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ProblemNumber</span><span class=\"o\">)</span> <span class=\"c1\">-- doesn't work, TC search can't populate h0 and h25</span>\n</code></pre></div>",
        "id": 312684537,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669657390
    },
    {
        "content": "<p>So either I suggest you stay with <code>.of 1</code>, <code>.of 2</code>, or you just remove the <code>dayMin</code> and <code>dayMax</code> from your structure. In mathlib, we often make structures/definitions that have no proof obligations on their own. It is only in the _theorems_ about those structures/definitions that some assumption about the structure is necessary</p>",
        "id": 312684770,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669657468
    },
    {
        "content": "<p>Awesome, thank yoU! something to think about. Appreciate the help from everyone!!</p>",
        "id": 312684914,
        "sender_full_name": "Jake S",
        "timestamp": 1669657517
    },
    {
        "content": "<blockquote>\n<p>Typeclass search does not execute tactics, so unfortunately you can't say something like:</p>\n</blockquote>\n<p>This is a bummer though... maybe someday :)</p>",
        "id": 312685215,
        "sender_full_name": "Jake S",
        "timestamp": 1669657609
    },
    {
        "content": "<p>You could also decide that <code>(28 : ProblemNumber)</code> should mean 25 (or 3), and either use <code>min</code> (or <code>mod</code>) to define the instance for any <code>n</code>.</p>",
        "id": 312685245,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1669657618
    },
    {
        "content": "<p>interesting thought! thanks. I was more looking for the compiler to error if I tried to write a problem number that doesn't exist (or is out of bounds)</p>",
        "id": 312685507,
        "sender_full_name": "Jake S",
        "timestamp": 1669657693
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ProblemNumber</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">of</span> <span class=\"o\">::</span>\n  <span class=\"n\">day</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">deriving</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Ord</span><span class=\"o\">,</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ProblemNumber</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">ProblemNumber</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ProblemNumber</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ProblemNumber</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ProblemNumber</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"mi\">1</span>\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ProblemNumber</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"mi\">1</span>\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ProblemNumber</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">ProblemNumber</span> <span class=\"o\">:=</span> <span class=\"n\">leOfOrd</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">ProblemNumber</span> <span class=\"o\">:=</span> <span class=\"n\">ltOfOrd</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ProblemNumber</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"mi\">7</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 312685528,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669657700
    },
    {
        "content": "<p>If you want that \"compile-time\" check, then stick with your \"proofs as part of the structure\" and use <code>.of 24</code></p>",
        "id": 312685622,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669657733
    },
    {
        "content": "<p>Yeah I think for me for now the exercise I was trying to achieve was a bounded Nat type, to understand how to enforce bounds. </p>\n<p>What <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>  described was something like what I was looking for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h25</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">25</span><span class=\"o\">}:</span> <span class=\"n\">OfNat</span> <span class=\"n\">ProblemNumber</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">n</span> <span class=\"n\">h0</span> <span class=\"n\">h25</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>But I hear you all on alternative ways to model this, and I appreciate the discussion! Thanks for the help!</p>",
        "id": 312687374,
        "sender_full_name": "Jake S",
        "timestamp": 1669658252
    }
]