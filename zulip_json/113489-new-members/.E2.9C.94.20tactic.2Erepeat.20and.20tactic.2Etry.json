[
    {
        "content": "<p>Is there a better way to implement the following tactic?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">find_in_explicit_list</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span>\n  <span class=\"n\">tactic.repeat</span> <span class=\"bp\">`</span><span class=\"o\">[</span>\n    <span class=\"n\">tactic.try</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">list.mem_cons_self</span><span class=\"o\">],</span>\n    <span class=\"n\">tactic.try</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">list.mem_cons_of_mem</span><span class=\"o\">]</span>\n  <span class=\"o\">]</span>\n<span class=\"o\">]</span>\n</code></pre></div>\n<p>I want to automatically close goals like <code>3 ∈ [1, 2, 3, 4]</code> which the above-mentioned tactic does but its code looks too ugly.</p>",
        "id": 300018303,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663785851
    },
    {
        "content": "<p><code>apply_rules [list.mem_cons_self, list.mem_cons_of_mem]</code>?</p>",
        "id": 300018501,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663785933
    },
    {
        "content": "<p>On which level is <code>apply_rules</code> equivalent to my code?</p>",
        "id": 300019056,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663786142
    },
    {
        "content": "<p>Yaël's <code>apply_rules</code> is essentially equivalent to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">list.mem_cons_self</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">list.mem_cons_of_mem</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(This might not be syntactically correct -- I did not test it.)</p>",
        "id": 300019944,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663786475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 300021578,
        "sender_full_name": "Notification Bot",
        "timestamp": 1663787015
    },
    {
        "content": "<p>dec_trivial should work here too, right?</p>",
        "id": 300057612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663805080
    }
]