[
    {
        "content": "<p>Is it possible to convert a <code>fintype</code> to a <code>finset</code> and later recover the fintype?</p>\n<p>I'm trying to define Theta series of a quadratic form, and I need <code>fin 2</code>... but the <code>∑</code> notation requires a finset...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">Theta&#39;</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)(</span><span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"n\">quadratic_form</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"c\">/-</span><span class=\"cm\">[in_upper_half_plane z] [pos_def Q]-/</span><span class=\"o\">:</span>\n  <span class=\"n\">cau_seq</span> <span class=\"n\">ℂ</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">⟨λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Ico_ℤ</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">m</span><span class=\"o\">)),</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 204264373,
        "sender_full_name": "Eloi",
        "timestamp": 1595022997
    },
    {
        "content": "<p>you might like to use <code>\\sum m in finset.range 2</code></p>",
        "id": 204264658,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595023205
    },
    {
        "content": "<p>I'm not sure what you mean by recover</p>",
        "id": 204264768,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595023305
    },
    {
        "content": "<p>Then to define a sum over ℤ² I need a sum inside a sum, right? <br>\nI mean that <code>m</code> is indexed by a <code>finset</code>, but a quadratic form has to be applied to a term of type <code>fin 2 → ℤ</code></p>\n<p>To be clear, my dream would be to be able to write something like </p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"err\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span>  <span class=\"bp\">→</span>  <span class=\"n\">Ico_ℤ</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204265016,
        "sender_full_name": "Eloi",
        "timestamp": 1595023479
    },
    {
        "content": "<p>oh I misunderstood your code</p>",
        "id": 204265551,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595023875
    },
    {
        "content": "<p>I usually either use a double sum or index over the product type</p>",
        "id": 204265653,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595023951
    },
    {
        "content": "<p>can you post code that compiles? I'm not familiar with the parts of the library you're using, so chasing down the imports is not fun</p>",
        "id": 204265804,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595024055
    },
    {
        "content": "<p>sure, I updated the first comment to make this thread more readable :)</p>",
        "id": 204266935,
        "sender_full_name": "Eloi",
        "timestamp": 1595024989
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">quadratic_form</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>  <span class=\"c1\">-- pi</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>  <span class=\"c1\">-- Ico_ℤ</span>\n<span class=\"kn\">open</span> <span class=\"n\">cau_seq</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">Theta&#39;</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"n\">quadratic_form</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"c\">/-</span><span class=\"cm\">[in_upper_half_plane z] [pos_def Q]-/</span><span class=\"o\">:</span>\n  <span class=\"n\">cau_seq</span> <span class=\"n\">ℂ</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">⟨λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Ico_ℤ</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">t</span><span class=\"o\">)))),</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 204270421,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595028022
    },
    {
        "content": "<p>actually using <code>fintype.pi_finset</code> instead seems nicer</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">Theta&#39;</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"n\">quadratic_form</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"c\">/-</span><span class=\"cm\">[in_upper_half_plane z] [pos_def Q]-/</span><span class=\"o\">:</span>\n  <span class=\"n\">cau_seq</span> <span class=\"n\">ℂ</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">⟨λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">pi_finset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">Ico_ℤ</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">Q</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>and if I were you I think I'd separate the creation of the theta series into making a power series in <code>q</code> with integer coefficients, and then evaluation as a complex function!</p>",
        "id": 204270762,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595028429
    },
    {
        "content": "<p>Nice! Thank you, I'll do so</p>",
        "id": 204285587,
        "sender_full_name": "Eloi",
        "timestamp": 1595050408
    }
]