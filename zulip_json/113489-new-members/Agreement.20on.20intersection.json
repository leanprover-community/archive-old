[
    {
        "content": "<p>Hi, I'm new on this chat :)<br>\nI'm currently trying to state and prove the following lemma:<br>\nIf H1, H2 are subgroups of an abelian group K with maps f1 : H1 -&gt;+ G and f2 : H2 -&gt;+ G, then whenever f1 and f2 agree on the intersection, there is a map from the join H1 v H2 to G such that it restricts to f1 and f2 on H1 and H2.</p>\n<p>I'm having problem with specifying that the two maps agree on the intersection. This is because H1 ⊓ H2 is a subgroup of K.<br>\nI considered using comap so that I can consider the preimage of H1 ⊓ H2 by H1.subtype and H2.subtype, but then I get two new subgroups of H1 and H2 and I still don't get to specify that f1 and f2 agree on the intersection.</p>\n<p>What should I do to specify that two such morphisms agree on the intersection?</p>",
        "id": 229864993,
        "sender_full_name": "uzu",
        "timestamp": 1615475699
    },
    {
        "content": "<p>Would it work to state that the compositions (H1 cap H2) -&gt; H1 -&gt; G and (H1 cap H2) -&gt; H2 -&gt; G agree?</p>",
        "id": 229869073,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1615477076
    },
    {
        "content": "<p>I don't think so, although I see a way to make it work:<br>\nIf you pull back H1 cap H2 as a subgroup of H1, it has the type <code>subgroup H1</code>. <br>\nWe then need isomorphisms between (the pullback of H1 cap H2 by H1 -&gt; K) and (H1 cap H2) itself.<br>\nThen we can state agreement on intersection. But this seems terribly inelegant.</p>",
        "id": 229887862,
        "sender_full_name": "uzu",
        "timestamp": 1615482821
    },
    {
        "content": "<p>Here's a suggestion from <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, which at least sorts out the statement part of the initial question.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">extd_mor_from_add_subgps</span>\n<span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">H1</span> <span class=\"bp\">→+</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">H2</span> <span class=\"bp\">→+</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">H1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">H2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f1</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">f2</span> <span class=\"n\">x2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">⊔</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n    <span class=\"n\">f.comp</span> <span class=\"o\">(</span><span class=\"n\">add_subgroup.inclusion</span> <span class=\"n\">le_sup_left</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f1</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">f.comp</span> <span class=\"o\">(</span><span class=\"n\">add_subgroup.inclusion</span> <span class=\"n\">le_sup_right</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229888017,
        "sender_full_name": "uzu",
        "timestamp": 1615482863
    },
    {
        "content": "<p>However, Eric noted that it seems hard to actually prove this lemma.</p>",
        "id": 229888100,
        "sender_full_name": "uzu",
        "timestamp": 1615482887
    },
    {
        "content": "<p>I would be tempted to generalize it to the case where <code>↥H1</code>, <code>↥H2</code> and <code>↥(H1 ⊔ H2)</code> are replaced by arbitrary types and you have an explicit pullback square. That should help get those proofs out of the statement</p>",
        "id": 229888787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615483097
    },
    {
        "content": "<p>This splits the task into two parts, one is to prove this theorem and the other is to prove that <code>↥(H1 ⊔ H2)</code> is a pullback of the appropriate type</p>",
        "id": 229889017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615483178
    },
    {
        "content": "<p>I believe the latter is an easier task than this theorem though, because you can deal only with subsets instead of <code>-&gt;+</code> morphisms for that</p>",
        "id": 229889304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615483241
    },
    {
        "content": "<p>That sounds tantalizing. However, at the moment I'm quite a beginner in Lean and I wouldn't know how to work with category here.</p>",
        "id": 229890059,
        "sender_full_name": "uzu",
        "timestamp": 1615483474
    },
    {
        "content": "<p>I don't actually mean to use category theory notation, although that is an option; I just meant that you have four types, four <code>-&gt;+</code> functions and some equalities in the hypotheses that basically assert that the four types are in a pullback square</p>",
        "id": 229896156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615485417
    },
    {
        "content": "<p>That's true. I'm going to <code>sorry</code> this part for now but if anyone has an idea of how to prove the above <code>sorry</code>, please let me know.</p>",
        "id": 229896827,
        "sender_full_name": "uzu",
        "timestamp": 1615485661
    },
    {
        "content": "<p>here's a generalized statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">extd_mor_from_add_subgps'</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">H1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">H2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"n\">i1</span> <span class=\"o\">:</span> <span class=\"n\">H1</span> <span class=\"bp\">→+</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"n\">i2</span> <span class=\"o\">:</span> <span class=\"n\">H2</span> <span class=\"bp\">→+</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k1</span> <span class=\"o\">:</span> <span class=\"n\">H1</span> <span class=\"bp\">→+</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k2</span> <span class=\"o\">:</span> <span class=\"n\">H2</span> <span class=\"bp\">→+</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">H1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">H2</span><span class=\"o\">),</span> <span class=\"n\">i1</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">i2</span> <span class=\"n\">x2</span> <span class=\"bp\">→</span> <span class=\"n\">f1</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">f2</span> <span class=\"n\">x2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→+</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">f.comp</span> <span class=\"n\">k1</span> <span class=\"bp\">=</span> <span class=\"n\">f1</span> <span class=\"bp\">∧</span> <span class=\"n\">f.comp</span> <span class=\"n\">k2</span> <span class=\"bp\">=</span> <span class=\"n\">f2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The <code>hP : sorry</code> should say something about how <code>P</code> is a pullback, which is probably the same statement as the theorem but with <code>i1</code> and <code>i2</code> instead of <code>f1</code> and <code>f2</code></p>",
        "id": 229897186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615485793
    },
    {
        "content": "<p>Oh, interesting, this isn't a pullback diagram because the <code>k1,k2</code> arrows go the wrong way</p>",
        "id": 229897637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615485990
    },
    {
        "content": "<p>I think this is actually a nontrivial proof. I think it can be done by zorn's lemma, although I've exceeded my time budget on this problem so I'll let someone else have a crack at it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">extd_mor_from_add_subgps</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"bp\">→+</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"n\">x2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">supr</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g.comp</span> <span class=\"o\">(</span><span class=\"n\">add_subgroup.inclusion</span> <span class=\"o\">(</span><span class=\"n\">le_supr</span> <span class=\"n\">_</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">|</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">r.carrier</span> <span class=\"bp\">=</span> <span class=\"n\">R</span><span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">add_subgroup.closure</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">M0</span><span class=\"o\">,</span> <span class=\"n\">Ma</span><span class=\"o\">⟩,</span> <span class=\"n\">hM1</span><span class=\"o\">,</span> <span class=\"n\">hM2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">zorn.zorn_subset₀</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">T</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">cs</span> <span class=\"n\">hc</span> <span class=\"n\">c0</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229916182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615492980
    },
    {
        "content": "<p>oh wow okay</p>",
        "id": 229918407,
        "sender_full_name": "uzu",
        "timestamp": 1615493796
    },
    {
        "content": "<p>maybe ill do a workaround for now, since I just need the case when one of the two subgroups  is cyclic</p>",
        "id": 229918482,
        "sender_full_name": "uzu",
        "timestamp": 1615493825
    },
    {
        "content": "<p>The problem is a lot easier if you assume <code>add_comm_group</code> instead of <code>add_group</code> I think (and stick with the original two-subgroup formulation rather than an indexed family)</p>",
        "id": 229956512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615510596
    },
    {
        "content": "<p>I don't think the two-subgroup formulation is any easier, you need zorn's lemma either way, and there are a couple things you have to do twice instead of once with a variable. If you have commutative groups though this is a lot easier because you can use the fundamental theorem of abelian groups to decompose the sup into a direct sum, and then it's easy to describe the function by its action on the factors</p>",
        "id": 229964533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615515895
    }
]