[
    {
        "content": "<p>I have a basic question about the use of coinduction. Do you think it would be possible to define a coinductive type, that looks like the following?</p>\n<div class=\"codehilite\"><pre><span></span>coinductive ostream (α : Type) : Type\n| head : ostream → α\n| otail: ostream → option ostream\n</pre></div>\n\n\n<p>That is: a stream that can possibly be finite, but it is not yet known when. I could encode it as a stream as follows:</p>\n<div class=\"codehilite\"><pre><span></span>structure gstream (α : Type) : Type :=\n(carrier : stream (option α))\n(head : carrier 0 ≠ none)\n(definite : ∀n, carrier n = none → ∀m ≥ n, carrier m = none)\n</pre></div>\n\n\n<p>But dealing with the proof objects here is kind of tedious. Any suggestions?</p>",
        "id": 157843574,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1549614882
    },
    {
        "content": "<p>what you wrote are the destructors of a record, but for <code>coinductive</code> you would need to write down the constructors, like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">coinductive</span> <span class=\"n\">llist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">llist</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">llist</span> <span class=\"bp\">→</span> <span class=\"n\">llist</span>\n</pre></div>\n\n\n<p>At least in Isabelle it's called a lazy list, a maybe terminating list. As far as I know, there is no encoding which is nicely reducing in Lean</p>",
        "id": 157844592,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1549616251
    },
    {
        "content": "<p>There are plans to support coinductive data types similar to isabelle. This type would fall under the scope, but for now you have to do it \"by hand\" like you did.</p>",
        "id": 157844659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549616317
    },
    {
        "content": "<p>Technically, this coinductive type represents a nonempty lazy list, but something like this would work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">coinductive</span> <span class=\"n\">ostream</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">otail</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ostream</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ostream</span>\n</pre></div>",
        "id": 157844790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549616437
    },
    {
        "content": "<p>I'm not sure if we will have special support for \"record-like\" coinductives with projections, instead of the usual constructor/destructor/corec</p>",
        "id": 157844845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549616505
    },
    {
        "content": "<p>Thanks!<br>\nUnfortunately, both</p>\n<div class=\"codehilite\"><pre><span></span>coinductive ostream (α : Type) : Type\n| mk (head : α) (otail : option ostream) : ostream\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span>coinductive nellist (α : Type) : Type\n| sing : α → nellist\n| cons : α → nellist → nellist\n</pre></div>\n\n\n<p>give me an error: <code>vm check failed: is_closure(o) (possibly due to incorrect axioms, or sorry)</code>.<br>\nDo I need to import anything?</p>",
        "id": 157845133,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1549616828
    },
    {
        "content": "<p>you have to import the future, maybe 3 months</p>",
        "id": 157845302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549617003
    },
    {
        "content": "<p>That's not a great error, though. Are you using 3.4.2? I thought <code>coinductive</code> was removed as a token, so you should get <code>command expected</code></p>",
        "id": 157845365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549617102
    },
    {
        "content": "<p>Yes.</p>\n<div class=\"codehilite\"><pre><span></span>$ lean -v\nLean (version 3.4.2, commit cbd2b6686ddb, Release)\n$ lean --make src\n/ufs/hdh/projects/lean-abs/src/util.lean:29:0: error: vm check failed: is_closure(o) (possibly due to incorrect axioms, or sorry)\n</pre></div>",
        "id": 157845504,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1549617252
    },
    {
        "content": "<p>weird... when I put</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">coinductive</span> <span class=\"n\">ostream</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">otail</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ostream</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ostream</span>\n</pre></div>\n\n\n<p>alone in a file I get</p>\n<div class=\"codehilite\"><pre><span></span>test.lean:1:0: error: unknown command &#39;coinductive&#39;\ntest.lean:1:12: error: command expected\n</pre></div>",
        "id": 157845627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549617454
    },
    {
        "content": "<p>do you have <code>import meta.coinductive_predicates</code>?</p>",
        "id": 157845687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549617519
    },
    {
        "content": "<p>looks like the old coinductive predicates code fails with that error on a coinductive data type</p>",
        "id": 157845699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549617555
    },
    {
        "content": "<p>When you add <code>import data.finmap</code> on top, two errors appear:<br>\nthe vm check, and <code>invalid introduction rule, ':' expected</code></p>",
        "id": 157845763,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1549617617
    },
    {
        "content": "<p>hm, can't repro, I just get the vm check</p>",
        "id": 157845851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549617762
    },
    {
        "content": "<p>OK, perhaps it is because I am using a non-standard mathlib:<br>\n<code>mathlib = {git = \"https://github.com/leanprover/mathlib\", branch = \"master\", rev = \"9615b385615e51359dce12af181d8cfcc386d105\"}</code></p>",
        "id": 157845876,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1549617802
    },
    {
        "content": "<p>in any case you aren't going to find an automatic solution right now... this is all just hypothetical syntax at this point, so lean is just finding new and interesting ways to crash</p>",
        "id": 157845881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549617815
    },
    {
        "content": "<p>Thanks for answering! Also thanks to <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> :-)</p>",
        "id": 157845925,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1549617845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"202346\">@Hans-Dieter Hiep</span> oh, you also might want to change the <code>mathlib</code> reference to <code>leanprover-commnuity</code> in the future.</p>",
        "id": 157857858,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1549631378
    }
]