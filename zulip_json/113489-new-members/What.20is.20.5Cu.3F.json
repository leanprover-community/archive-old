[
    {
        "content": "<p>Absolute beginner question, but what is the \\u operator on natural numbers? Thanks!</p>",
        "id": 277314909,
        "sender_full_name": "Albert Jiang",
        "timestamp": 1648747936
    },
    {
        "content": "<p>Somehow searching the documentation gives very little results maybe due to the operator search feature...</p>",
        "id": 277314975,
        "sender_full_name": "Albert Jiang",
        "timestamp": 1648747974
    },
    {
        "content": "<p>Do you mean <code>↑</code>? This is <code>coe</code>. It is a <em>coercion</em>. In this case, it's the natural map <code>ℕ → ℤ</code>.</p>",
        "id": 277315151,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648748066
    },
    {
        "content": "<p>Note, coercions can exist between lots of different types, so <code>↑</code> is not always this map (it depends on the source and target types).</p>",
        "id": 277315225,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648748111
    },
    {
        "content": "<p>Ah I see! Thank you! So it just converts the type of the operand in the most intuitive way?</p>",
        "id": 277315280,
        "sender_full_name": "Albert Jiang",
        "timestamp": 1648748140
    },
    {
        "content": "<p>sorry, I implicitly assumed the output type was ℤ, but you didn't say that, so what you are looking at may even be a different coercion.</p>",
        "id": 277315377,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648748184
    },
    {
        "content": "<p>Oh so it does convert the type depending on the type expected. Awesome!</p>",
        "id": 277315434,
        "sender_full_name": "Albert Jiang",
        "timestamp": 1648748233
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 277315439,
        "sender_full_name": "Albert Jiang",
        "timestamp": 1648748234
    },
    {
        "content": "<p>It can't convert any type to any other type, it only works for for types with a coercion defined.</p>",
        "id": 277315455,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648748242
    },
    {
        "content": "<p>I'm looking at a case from nat to int :)</p>",
        "id": 277315476,
        "sender_full_name": "Albert Jiang",
        "timestamp": 1648748256
    },
    {
        "content": "<p>You need a <code>has_coe_t</code> (or <code>has_coe</code>) instance between the types. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_t\">docs#has_coe_t</a></p>",
        "id": 277315501,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648748269
    },
    {
        "content": "<p>If you look at the docs for that and then click the \"instances\" arrow, you'll see the list of coercions. For example, you'll see <code>nat.cast_coe</code> which actually gives a coercion from <code>ℕ</code> to any type <code>α</code> with a zero, a one, and addition.</p>",
        "id": 277315795,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648748408
    },
    {
        "content": "<p>One neat thing is that Lean will insert coercions for you when types don't match up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def foo : ℕ → ℤ :=</span>\n<span class=\"cm\">λ (x : ℕ), ↑x</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>This occurs while the elaborator is trying to take your expression and fill out all the missing details before it hands it off to the kernel for a final check.</p>",
        "id": 277315924,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648748489
    },
    {
        "content": "<p>You can turn this feature off:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">elaborator.coercions</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch, term</span>\n<span class=\"cm\">  x</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ℕ</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ℤ</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 277316063,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648748562
    },
    {
        "content": "<p>Here's a way you can experimentally check what the coercion is from within Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold_coes</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  n : ℕ,</span>\n<span class=\"cm\">  m : ℤ := ↑n,</span>\n<span class=\"cm\">  h : m = int.of_nat n</span>\n<span class=\"cm\">  ⊢ false</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277316296,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648748683
    },
    {
        "content": "<p>I guess the constructor <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.of_nat\">docs#int.of_nat</a> takes priority over <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_coe\">docs#nat.cast_coe</a>. The coercion is defined right here: <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/data/int/basic.lean#L21\">https://github.com/leanprover-community/lean/blob/master/library/init/data/int/basic.lean#L21</a></p>",
        "id": 277316436,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648748755
    },
    {
        "content": "<p>Also, if you are using VS Code, in the widget panel you can click on the ↑ in the tactic state to see which coercion is being used.</p>",
        "id": 277316772,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648748905
    }
]