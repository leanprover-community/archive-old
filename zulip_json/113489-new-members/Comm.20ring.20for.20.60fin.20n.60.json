[
    {
        "content": "<p>I've been working on some things that use addition in <code>fin n</code> to keep count of a known finite set. As part of that, I found that I needed <code>zero_add</code> etc. I thought I would add the simple lemmas to <code>data/fin</code> at <a href=\"https://github.com/leanprover-community/mathlib/issues/5010\">#5010</a>. But the linter then informed me that the <code>comm_ring</code> definitions do exist, but aren't provided globally as instanced. Why is that? If <code>add</code> and <code>mul</code> are defined for <code>fin</code>, should at least the <code>monoid</code> and <code>add_monoid</code> instanced be made global?</p>",
        "id": 216893687,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605543461
    },
    {
        "content": "<p>I don't think you're supposed to use <code>+</code> on <code>fin n</code>--but it exists in order to make numerals work</p>",
        "id": 216895488,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605544196
    },
    {
        "content": "<p>if you want mod <code>n</code> arithmetic, there's another type for that; if you want to think of numbers that you know are less than <code>n</code>, then the definition of <code>+</code> isn't really appropriate</p>",
        "id": 216896163,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605544467
    },
    {
        "content": "<p>I appreciate the fact that <code>+</code> and even more so <code>*</code> aren't supposed to be used for <code>fin n</code>. But seemingly basic things like <code>0 + k = k</code> for some <code>k : fin (n + 1)</code> seem to me to be part of what makes numerals work. If one had a statement <code>0 + 1 = 1</code> where those numerals were in <code>fin (n + 2)</code>, the current way to prove that is to operate on the coercion into <code>nat</code>.</p>",
        "id": 216896305,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605544532
    },
    {
        "content": "<p>Is it not true by <code>rfl</code>?</p>",
        "id": 216896338,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605544551
    },
    {
        "content": "<p>oh in a variable type, perhaps not</p>",
        "id": 216896352,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605544558
    },
    {
        "content": "<p>but why did you have <code>0 + 1</code> in the first place?</p>",
        "id": 216896406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605544566
    },
    {
        "content": "<p>It seems like you could avoid that by not adding <code>0</code>, or using <code>fin.succ</code></p>",
        "id": 216896699,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605544684
    },
    {
        "content": "<p>I see what you mean about not \"counting\" using <code>fin n</code>. That's where I got the addition from.</p>",
        "id": 216896718,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605544695
    },
    {
        "content": "<p>Using <code>fin.succ</code> makes a chain of non-equal types.</p>",
        "id": 216896764,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605544717
    },
    {
        "content": "<p>in that case, how about just using <code>nat</code></p>",
        "id": 216896803,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605544736
    },
    {
        "content": "<p>It's good for counting things <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 216896843,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605544752
    },
    {
        "content": "<p>it seems to me that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0, 1, \\ldots, n-1\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> isn't something that has an addition that's suitable for counting</p>",
        "id": 216896913,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605544795
    },
    {
        "content": "<p>You're right. It was an exploration of first encoding that the maximum of countable elements is <code>n</code>, then counting them, instead of first counting them, then showing there are at most <code>n</code> of them.</p>",
        "id": 216896981,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605544813
    },
    {
        "content": "<p>If you use <code>+</code> on <code>fin</code>, then  you've introduced some <code>mod</code> which are artificial for the problem you're trying to solve</p>",
        "id": 216897016,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605544829
    },
    {
        "content": "<p>And asking, at position <code>i</code>, how many elements have I seen so far?</p>",
        "id": 216897026,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605544833
    },
    {
        "content": "<p><code>foldl (+) 0 ...</code></p>",
        "id": 216897046,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605544843
    },
    {
        "content": "<p>And as you're explaining, everything I'm doing will still make sense in <code>nat</code>, just deferring the boundedness check to the end.</p>",
        "id": 216897148,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605544890
    },
    {
        "content": "<p>Basically you have to prove a bound at some point, and you can do it in three ways: at the end; along the way (with a type that changes); or by forcing it with <code>mod</code>, but then it will be hard to reason about the value you defined (and in particular, why <code>mod</code> \"never did anything\")</p>",
        "id": 216897391,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605544985
    },
    {
        "content": "<p>IIRC <code>zmod n</code> is defined to be a type alias for <code>fin n</code> if n&gt;0, and there you have all the ring structure you expect. <code>fin 0</code> is not a ring which makes doing ringy things on <code>fin n</code> messy.</p>",
        "id": 216906576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605548939
    }
]