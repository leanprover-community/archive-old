[
    {
        "content": "<p>What's the idiomatic way of solving problems like these? Is there a tactic that can do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">7</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 252194997,
        "sender_full_name": "Justus Springer",
        "timestamp": 1630944029
    },
    {
        "content": "<p><code>norm_num</code></p>",
        "id": 252195094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630944077
    },
    {
        "content": "<p>Wow, it works even for types other than ℕ. Thanks!</p>",
        "id": 252195787,
        "sender_full_name": "Justus Springer",
        "timestamp": 1630944537
    },
    {
        "content": "<p>I didn't expect that, I thought <code>norm_num</code> only proves stuff about numbers.</p>",
        "id": 252195981,
        "sender_full_name": "Justus Springer",
        "timestamp": 1630944672
    },
    {
        "content": "<p>yeah, this is some kind of relatively recent plugin which Mario wrote for it I think.</p>",
        "id": 252196382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630944928
    },
    {
        "content": "<p>Why use <code>norm_num</code> over <code>dec_trivial</code>?</p>",
        "id": 252197546,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630945669
    },
    {
        "content": "<p>I don't believe in decidability.</p>",
        "id": 252197780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630945813
    },
    {
        "content": "<p><code>norm_num</code> doesn't know anything about this problem, but it calls <code>simp</code> using <code>norm_num</code> to discharge side goals</p>",
        "id": 252199078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630946663
    },
    {
        "content": "<p>in fact, I think <code>simp</code> alone will do this</p>",
        "id": 252199093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630946672
    }
]