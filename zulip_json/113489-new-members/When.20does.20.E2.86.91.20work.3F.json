[
    {
        "content": "<p>I'm confused about when the <code>↑</code> (<code>\\u</code>) operator works - especially related to subtypes. When I try it in small examples, it always works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"c1\">-- doesn't even need the ↑</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"c1\">-- needs the ↑</span>\n</code></pre></div>\n<p>But when I try to use it in my own projects I always have to resort to using <code>x.val</code>.<br>\nFor example (sorry for the size of this example):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">digraph.edge</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">dst</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">is</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">({</span> <span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">is</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">digraph.edge</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">i</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">digraph</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">ids</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">ids</span> <span class=\"n\">data</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">in_degree_of</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">ι</span> <span class=\"n\">δ</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">g.ids</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">g.edges.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">edge.dst</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">i.val</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"c1\">-- `↑i` doesn't work</span>\n</code></pre></div>\n<p>In the last line, replacing <code>i.val</code> with <code>↑i</code> is not possible. It produces the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">({</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">is</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i_1</span> <span class=\"bp\">//</span> <span class=\"n\">i_1</span> <span class=\"bp\">∈</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">),</span> <span class=\"n\">digraph.edge</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">i</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">ι</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">ι</span> <span class=\"n\">δ</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">g.ids</span><span class=\"o\">},</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"n\">g.ids</span> <span class=\"n\">g.data</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>Which placeholder can't Lean synthesize?</p>",
        "id": 221065328,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609166844
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">(</span><span class=\"n\">g.edges.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">edge.dst</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 221065617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609167148
    },
    {
        "content": "<p>I think what's going on is that after the lambda, Lean doesn't know the type of e when it comes to figuring out where it should be coercing i.</p>",
        "id": 221065634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609167184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/When.20does.20.E2.86.91.20work.3F/near/221065634\">said</a>:</p>\n<blockquote>\n<p>I think what's going on is that after the lambda, Lean doesn't know the type of e when it comes to figuring out where it should be coercing i.</p>\n</blockquote>\n<p>Isn't the type of <code>e</code> constrained by the type of <code>g.edges.filter</code> though?</p>",
        "id": 221065718,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609167269
    },
    {
        "content": "<p>I have no idea in what order everything happens -- I have never looked at the elaborator code (I can't read C++). This works too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">(</span><span class=\"n\">g.edges.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">edge.dst</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n</code></pre></div>",
        "id": 221065748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609167303
    },
    {
        "content": "<p>I just go by the general rule of thumb that if Lean can't figure out what you mean and it looks like it's an issue with working out types, then add some type ascriptions.</p>",
        "id": 221065851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609167408
    },
    {
        "content": "<p>My fuss is really about writing <code>↑i</code> instead of <code>i.val</code> only for looks anyway :D So I guess <code>i.val</code> is still a perfectly fine solution.</p>",
        "id": 221065944,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609167498
    },
    {
        "content": "<p>Sometimes it's still better to use the arrow + a type ascription instead of .val</p>",
        "id": 221066638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609168124
    },
    {
        "content": "<p>Eg all the lemmas about fin are written in terms of the arrow</p>",
        "id": 221066653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609168137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/When.20does.20.E2.86.91.20work.3F/near/221066638\">said</a>:</p>\n<blockquote>\n<p>Sometimes it's still better to use the arrow + a type ascription instead of .val</p>\n</blockquote>\n<p>Why is that?</p>",
        "id": 221066671,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609168161
    },
    {
        "content": "<p>So if you define things using .val, you can't apply any lemmas to the definition until you rewrite all the .val's into arrows</p>",
        "id": 221066686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609168179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/When.20does.20.E2.86.91.20work.3F/near/221066686\">said</a>:</p>\n<blockquote>\n<p>So if you define things using .val, you can't apply any lemmas to the definition until you rewrite all the .val's into arrows</p>\n</blockquote>\n<p>I don't understand. Say we have <code>x : { n : ℕ // n &gt; 10 }</code>, then doesn't <code>↑x</code> and <code>x.val</code> produce the same thing, since:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">coe_subtype</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">subtype.val</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 221066784,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609168271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> what does \"same\" mean?</p>",
        "id": 221066794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609168287
    },
    {
        "content": "<p>They will be equal in the sense of provably equal, and even definitionally equal. But they are clearly not syntactically equal.</p>",
        "id": 221066819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609168318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/When.20does.20.E2.86.91.20work.3F/near/221066819\">said</a>:</p>\n<blockquote>\n<p>They will be equal in the sense of provably equal, and even definitionally equal. But they are clearly not syntactically equal.</p>\n</blockquote>\n<p>By \"same\" I mean definitionally equal.</p>",
        "id": 221066866,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609168338
    },
    {
        "content": "<p>Different tactics use different levels of equality. For example <code>rw</code> uses syntactic equality.</p>",
        "id": 221066868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609168342
    },
    {
        "content": "<p>Some automation relies on syntactic equality. So if you want <code>simp</code> or <code>rw</code> to help you...</p>",
        "id": 221066870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609168345
    },
    {
        "content": "<p>There is a concept of \"simp normal form\" in Lean, which is the preferred way to express something. For example you can't just have some lemmas about a nonempty set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>≠</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">X\\not=\\emptyset</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span></span></span></span> being used as the definition, some as <code>X.nonempty</code> and some with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>∈</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">\\exists x, x \\in X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> -- even though they might all be definitionally equal, <code>rw</code> and <code>simp</code> would prefer that just one of these is used (otherwise you have to state lemmas in 3 ways). Did you know that there are essentially no occurrences of <code>&gt;</code> in mathlib? Because it was decided that <code>a &lt; b</code> was the simp normal form for <code>b &gt; a</code>.</p>",
        "id": 221066990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609168477
    },
    {
        "content": "<p>The simp normal form in this case is <code>↑i</code>.</p>",
        "id": 221067018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609168506
    },
    {
        "content": "<p>In some sense this concept should be called the \"<code>mathlib</code> normal form\".</p>",
        "id": 221067131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609168577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/When.20does.20.E2.86.91.20work.3F/near/221066990\">said</a>:</p>\n<blockquote>\n<p>There is a concept of \"simp normal form\" in Lean, which is the preferred way to express something. For example you can't just have some lemmas about a nonempty set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>≠</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">X\\not=\\emptyset</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span></span></span></span> being used as the definition, some as <code>X.nonempty</code> and some with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>∈</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">\\exists x, x \\in X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> -- even though they might all be definitionally equal, <code>rw</code> and <code>simp</code> would prefer that just one of these is used (otherwise you have to state lemmas in 3 ways). Did you know that there are essentially no occurrences of <code>&gt;</code> in mathlib? Because it was decided that <code>a &lt; b</code> was the simp normal form for <code>b &gt; a</code>.</p>\n</blockquote>\n<p>Awesome, thanks! This explains a lot :)</p>",
        "id": 221067265,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609168703
    },
    {
        "content": "<p>I've been thinking lately that it might be nice to have some documentation explicitly stating what the simp normal form is for various expressions. Not sure where the best place to put such notes would be; maybe in doc strings of definitions?</p>",
        "id": 221072936,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609173464
    },
    {
        "content": "<p>There and/or in module docs under implementation notes. This is very important information to have!</p>",
        "id": 221073535,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1609174076
    },
    {
        "content": "<p>I created <a href=\"https://github.com/leanprover-community/mathlib/issues/5518\">#5518</a> for this since I didn't want to forget. There are still some details I'm not sure about, so suggestions are welcome.</p>",
        "id": 221075096,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609175419
    }
]