[
    {
        "content": "<p>Why does not this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.local_equiv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">local_equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">local_equiv</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">e</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">source_inter_preimage_target_inter</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">e.source</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">e.target</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">e.source</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ext_iff.mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_inter_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_preimage</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span>\n  <span class=\"n\">exacts</span> <span class=\"o\">[⟨</span><span class=\"n\">hx.1</span><span class=\"o\">,</span> <span class=\"n\">hx.2.2</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">hx.1</span><span class=\"o\">,</span> <span class=\"n\">e.map_source</span> <span class=\"n\">hx.1</span><span class=\"o\">,</span> <span class=\"n\">hx.2</span><span class=\"o\">⟩],</span> <span class=\"c1\">--exacts?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244025439,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624728775
    },
    {
        "content": "<p>Is this missing an import?</p>",
        "id": 244025675,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624729117
    },
    {
        "content": "<p>The code doesn't work for me</p>",
        "id": 244025699,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624729125
    },
    {
        "content": "<p>Sorry, I pasted the wrong import, now it should work</p>",
        "id": 244026864,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624730651
    },
    {
        "content": "<p>It's weird, splitting it into two <code>exact</code> tactics works</p>",
        "id": 244026865,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624730654
    },
    {
        "content": "<p>I'm also not sure why the exact tactics work</p>",
        "id": 244026885,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624730704
    },
    {
        "content": "<p>Yes that's my point I mean it probably has something to do with the fact that I use an implicit construtctor?</p>",
        "id": 244026888,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624730712
    },
    {
        "content": "<p>You have a semicolon. Change it to a comma</p>",
        "id": 244026911,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624730753
    },
    {
        "content": "<p>Oh, I completely missed the <code>;</code>.  Exacts should work when there are multiple goals.</p>",
        "id": 244026946,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624730764
    },
    {
        "content": "<p>When it's a <code>;</code>, it means it applies the tactic to each goal that the previous tactic has created.</p>",
        "id": 244026971,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624730795
    },
    {
        "content": "<p>Oh right!! I meant to put it on the previous line! I wanted to apply the simp to both goals!</p>",
        "id": 244027260,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624731135
    },
    {
        "content": "<p>Thanks to both!</p>",
        "id": 244027264,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624731147
    },
    {
        "content": "<p>And thanks to this I realized the simp is not needed.</p>",
        "id": 244027336,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624731260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> You probably already worked this out after removing the simp, but you can condense it down to a one-liner term-mode proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">source_inter_preimage_target_inter</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">e.source</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">e.target</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">e.source</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hx.1</span><span class=\"o\">,</span> <span class=\"n\">hx.2.2</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hx.1</span><span class=\"o\">,</span> <span class=\"n\">e.map_source</span> <span class=\"n\">hx.1</span><span class=\"o\">,</span> <span class=\"n\">hx.2</span><span class=\"o\">⟩⟩)</span>\n</code></pre></div>\n<p>(note that <code>set.ext_iff.mpr</code> is <code>set.ext</code>)</p>",
        "id": 244031525,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624737329
    },
    {
        "content": "<p>Yes I know! I already pushed it to mathlib! Thanks anyways!</p>",
        "id": 244031572,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624737369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/exacts/near/244031525\">said</a>:</p>\n<blockquote>\n<p>(note that <code>set.ext_iff.mpr</code> is <code>set.ext</code>)</p>\n</blockquote>\n<p>I did not know this though! Thanks!</p>",
        "id": 244031580,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624737412
    }
]