[
    {
        "content": "<p>Hello to all. I was trying to solve for the following goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">real.pi</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"n\">real.pi</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">real.pi</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>with <code> rw ← real.rpow_sub_one, </code> , but I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">^</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">/</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>\n<p>Does anyone understand why that happens?</p>",
        "id": 291873581,
        "sender_full_name": "Julia Ramos Alves",
        "timestamp": 1659543154
    },
    {
        "content": "<p>Because you're not posting <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> s, it's difficult to diagnose such an error. Here's a conjecture: <code>rpow</code> is about <code>a ^ b</code> with <code>b : real</code>, but you have <code>a ^ b</code> with <code>b : something else</code> (e.g. perhaps int or nat). What you have posted doesn't give me enough information to know whether this is correct (because the real three and the integer 3 and the natural 3 all show up as <code>3</code>).</p>",
        "id": 291874493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659543532
    },
    {
        "content": "<p><code>extract_goal</code> could help create a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 291874569,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659543563
    },
    {
        "content": "<p>Does this now give enough information? (I have tried <code> extract_goal </code> )</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.fourier</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.interval_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.integrals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">real.pi</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"n\">real.pi</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">real.pi</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">real.rpow_sub_one</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Probably not all imports concern this specific goal, but these are all I have. I believe the problem must be indeed that 3 is being treated as a nat, but I don't know how to fix that.</p>",
        "id": 291875501,
        "sender_full_name": "Julia Ramos Alves",
        "timestamp": 1659544003
    },
    {
        "content": "<p>For sure that 3 in the power is a nat -- the default 3 is a nat. You can check yourself by clicking on it:<br>\n<a href=\"/user_uploads/3121/Jed21Tq0BStjYpPA2E-8eLfH/three.png\">three.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Jed21Tq0BStjYpPA2E-8eLfH/three.png\" title=\"three.png\"><img src=\"/user_uploads/3121/Jed21Tq0BStjYpPA2E-8eLfH/three.png\"></a></div>",
        "id": 291876721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659544536
    },
    {
        "content": "<p>There are different ways you can make it a real 3. If you have the power to manually change the goal, you can tell Lean you mean the real 3 like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.fourier</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.interval_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.integrals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">real.pi</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">real.pi</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">real.pi</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">real.rpow_sub_one</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Note that another reason your rewrite wasn't working was that associativity is not right for you -- default associativity is left-to-right so this is (1 / 3 * real.pi ^ 3) / real.pi, which is a different reason why the rewrite will fail. I've fixed it in the above.</p>",
        "id": 291877127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659544704
    },
    {
        "content": "<p>Another approach is to rewrite the theorem saying that <code>a ^ (b : real) = a ^ b</code> for <code>b : nat</code>, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">real.pi</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"n\">real.pi</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">real.pi</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">real.rpow_sub_one</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291877720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659544932
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.fourier</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.interval_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.integrals</span>\n\n<span class=\"c1\">-- me figuring out the first rewrite</span>\n<span class=\"c1\">-- example (a b c : ℝ) : a * b / c = a * (b / c) := by library_search</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">real.pi</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"n\">real.pi</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">real.pi</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"c1\">-- sort out the brackets</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"c1\">-- get the right 3</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">real.rpow_sub_one</span> <span class=\"n\">real.pi_ne_zero</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291878202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659545155
    }
]