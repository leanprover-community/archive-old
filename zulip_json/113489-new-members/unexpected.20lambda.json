[
    {
        "content": "<p>Hi, I am trying to use Lean for verification of software for electrical transmission optimization that uses Mixed Integer Linear Programming. Therefore I have to deal with many finite sums. I get stuck with a trivial lemma trying to apply <code>finset.sum_nonneg</code>.  Why did the lambda expression appear? How to get rid of it to proceed further with the proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.order</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">something</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">finset.sum_nonneg</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"c1\">-- r : 0 ≤ ∑ (x : α) in S, (λ (k : α), f k) x &lt;&lt;-- WHY LAMBDA?!?</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- what to do next?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218597603,
        "sender_full_name": "Szymon Kitowski",
        "timestamp": 1606933162
    },
    {
        "content": "<p>lean just isn't automatically simplifying that expression for you. throw in a <code>simp at r</code> to simplify r and it'll be simpler</p>",
        "id": 218598996,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606933728
    },
    {
        "content": "<p>personally, i would use a bunch of tactics to break up the lemma into smaller bits before trying to proveit</p>",
        "id": 218599212,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606933807
    },
    {
        "content": "<p>this cheat sheet is handy: <a href=\"https://leanprover-community.github.io//img/lean-tactics.pdf\">https://leanprover-community.github.io//img/lean-tactics.pdf</a></p>",
        "id": 218599274,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606933835
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.order</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">something</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">finset.sum_eq_zero_iff_of_nonneg</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">finset.sum_nonneg</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>not the neatest proof, some golfing possible</p>",
        "id": 218600426,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606934347
    },
    {
        "content": "<p>Thank you all. This was super fast. <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> I am trying to figure out the role of <code>le_antisymm</code>. How did it help with simplifying <code>finset.sum_nonneg</code>?</p>",
        "id": 218601458,
        "sender_full_name": "Szymon Kitowski",
        "timestamp": 1606934829
    },
    {
        "content": "<p><code>le_antisymm</code> says that if you have an <code>x</code> such that <code>x &lt;= 0</code> and <code>0 &lt;= x</code> then <code>x = 0</code>. By <code>split</code>ing,  we turn the iff into two implications we have to prove. The forward implication gives us the hypothesis that the sum is &lt;= 0. Your <code>H</code> hypothesis can be used in <code>finset.sum_nonneg</code> to give the <code>0 &lt;= _</code> hypothesis.</p>",
        "id": 218602379,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606935234
    },
    {
        "content": "<p>It's generally not a great idea to write a term and have Lean guess what it is a proof of, like in <code>have r := finset.sum_nonneg H</code>.</p>",
        "id": 218602777,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606935384
    },
    {
        "content": "<p>Better to use tactics which operate on the goal (which Lean already knows) like <code>rw</code> or <code>exact</code>, or use <code>have</code> with an explicit type: <code>have r : ... := ...</code></p>",
        "id": 218602888,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606935450
    },
    {
        "content": "<p>Thanks. <br>\n<span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>  I just wonder why <code>le_antisymm</code> worked with <code>∑ (k : α) in S, f k ≤ 0</code> and <code>0 ≤ ∑ (x : α) in S, (λ (k : α), f k) x</code>. Is it like that Lean can somehow perform implicit beta reduction so he knows that both sigma sums are the same?<br>\n<span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I understand that this is because type interference can get me something strange, right?</p>",
        "id": 218603748,
        "sender_full_name": "Szymon Kitowski",
        "timestamp": 1606935839
    },
    {
        "content": "<p>Lean has to solve a higher-order unification to figure out what <code>f</code> is in <code>finset.sum_nonneg</code>, because <code>f</code> only ever appears applied to an argument. In this case it probably doesn't really make a difference whether Lean knows the expected type too.</p>",
        "id": 218604040,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606935982
    },
    {
        "content": "<p>It decided that <code>f</code> was your <code>\\lam k, f k</code>, but that's fine because of beta reduction like you said.</p>",
        "id": 218604067,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606936003
    },
    {
        "content": "<p>More precisely, <code>(λ (k : α), f k) x</code> is definitionally equal to <code>f x</code> and so <code>le_antisymm h (finset.sum_nonneg H)</code> will type check even though the types look a bit different.</p>",
        "id": 218604718,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606936329
    },
    {
        "content": "<p>Thanks. I get it now. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 218604914,
        "sender_full_name": "Szymon Kitowski",
        "timestamp": 1606936443
    }
]