[
    {
        "content": "<p>Here are two attempts at the same idea:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">pairing</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">pairing</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span><span class=\"o\">),</span> <span class=\"n\">bar</span>\n</pre></div>\n\n\n<p>called <code>foo</code> and <code>bar</code>, where <code>bar</code> is evidently isomorphic to <code>foo (fin 2)</code>. It seems like the <code>&lt;...&gt;.rec</code> generated for the former is considerably weaker than that for the latter. I think this has something to do with the way nesting inductives is done. Can anyone comment on whether that's what's going on. Is there a way to fix things, while keeping my gamma parameter?</p>",
        "id": 167935678,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560337601
    },
    {
        "content": "<p>nested inductives in lean 3 are kind of garbage</p>",
        "id": 167939713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560341338
    },
    {
        "content": "<p>nested meta inductives aren't bad because lean just rolls with whatever you say, but regular nested inductives have a complicated and buggy compilation</p>",
        "id": 167939763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560341382
    },
    {
        "content": "<p>Yeah okay damn. This is really depressing. Since I suddenly care about them and haven't been listening prior, are they getting better in lean 4?</p>",
        "id": 167939928,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560341489
    },
    {
        "content": "<p>the correct equivalent of <code>foo</code> is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n</pre></div>",
        "id": 167940004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560341532
    },
    {
        "content": "<p>I recommend just hand-unrolling any nested/mutual inductives you need into plain inductives</p>",
        "id": 167940036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560341578
    },
    {
        "content": "<p>Ok dreams restored maybe</p>",
        "id": 167940058,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560341596
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 167940070,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560341610
    },
    {
        "content": "<p>I think they are being addressed in lean 4, but I don't know how successful it will be, we will see</p>",
        "id": 167940092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560341637
    },
    {
        "content": "<p>ok.</p>",
        "id": 167940312,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560341808
    },
    {
        "content": "<p>EVERYTHING IS BETTER AND DEFINITIONALLY EQUAL NOW AND I LOVE IT</p>",
        "id": 167940327,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560341817
    },
    {
        "content": "<p>sorry</p>",
        "id": 167940328,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560341818
    },
    {
        "content": "<p>:D</p>",
        "id": 167940330,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560341821
    },
    {
        "content": "<p>Oooh, interesting, I still don't get that more powerful recursor using the unwrapped definition!...</p>",
        "id": 167941169,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560342517
    },
    {
        "content": "<p>is the claim that <code>bar</code> is isomorphic to <code>foo (fin 2)</code>?</p>",
        "id": 167941331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560342652
    },
    {
        "content": "<p>the <code>.rec</code>s look alright to me</p>",
        "id": 167941453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560342745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> compare the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">v</span> <span class=\"n\">v2</span> <span class=\"n\">Ihv</span> <span class=\"n\">Ihv2</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- I have Ihv and Ihv2</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">v</span> <span class=\"n\">v2</span> <span class=\"n\">Ihv</span> <span class=\"n\">Ihv2</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- I don&#39;t have Ihv and Ihv2</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 167943157,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560344065
    },
    {
        "content": "<p>here are some improved names in the second case:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">αβ</span> <span class=\"n\">vv2</span> <span class=\"n\">IhvIhv2</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">αβ</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">αβ</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">vv2</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">vv2</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Ihv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">IhvIhv2</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Ihv2</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">IhvIhv2</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 167943258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560344161
    },
    {
        "content": "<p>the parameters are mashed together</p>",
        "id": 167943335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560344194
    }
]