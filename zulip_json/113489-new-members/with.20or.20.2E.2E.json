[
    {
        "content": "<p>Is there a difference between <code>{ foo with bar := baz, }</code> and <code>{bar := baz, ..foo}</code>?</p>",
        "id": 271971827,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644931005
    },
    {
        "content": "<p>I think only the latter syntax lets you unpack multiple structures</p>",
        "id": 271971913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644931060
    },
    {
        "content": "<p>Maybe there's more to it though</p>",
        "id": 271971924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644931068
    },
    {
        "content": "<p>According to my grep attempt, mathlib only uses the former a few times in tactics</p>",
        "id": 271972661,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644931452
    },
    {
        "content": "<p>I didn't know it existed</p>",
        "id": 271972683,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644931469
    },
    {
        "content": "<p>I find slightly odd that the <code>..</code> syntax is preferred, when the <code>{ foo with …}</code> is (IMHO) more readable and natural: You start with the object you want to extend, and then you list the additional fields.<br>\nBut maybe uniformity is useful, and so <code>with</code> really shouldn’t be used in mathlib?</p>",
        "id": 271973374,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644931840
    },
    {
        "content": "<p>The reference manual at &lt;<a href=\"https://leanprover.github.io/reference/declarations.html#structures-and-records\">https://leanprover.github.io/reference/declarations.html#structures-and-records</a>&gt; doesn't give much guidance. Although unless I am blind it only documents <code>with</code>, but not <code>..foo</code> syntax?</p>",
        "id": 271973673,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644932038
    },
    {
        "content": "<p>I personally didn't even know this syntax existed.</p>",
        "id": 271973754,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644932070
    },
    {
        "content": "<p>Does <code>{ foo with ... }</code> work when you want to have multiple <code>foo</code>s?</p>",
        "id": 271974296,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644932360
    },
    {
        "content": "<p>E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"kd\">extends</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">g</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 271974333,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644932387
    },
    {
        "content": "<p>There might be some way to do this with the <code>{ foo with ... }</code> syntax, but I don't know what it is.</p>",
        "id": 271974417,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644932411
    },
    {
        "content": "<p>Sounds like the <code>..</code> is more versatile and powerful, and conversely <code>with</code> simpler?</p>",
        "id": 271976222,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644933252
    },
    {
        "content": "<p>Maybe there is a difference in intention (even if not technically, not sure): <code>{ x with a := t' }</code> suggests we already have a structure of the same type and we are changing one of the fields, while <code>{ b := u, .. x }</code> suggests that we are building a bigger structure reusing some fields from <code>x</code>.</p>",
        "id": 271985157,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644936822
    },
    {
        "content": "<p>The first one would be relatively rare in math (for instance if the structure is a proposition, then it makes no sense).</p>",
        "id": 271985320,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644936891
    },
    {
        "content": "<p>Hmm, in a language with extensible records I am not surprised that <code>with</code> allows extension, not just updates. But I see your point.</p>\n<p>Is <code>{.. x, b := u}</code> legal? (On the phone right now)</p>",
        "id": 271988945,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644938364
    },
    {
        "content": "<p>It's not legal it seems</p>",
        "id": 271989811,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644938739
    },
    {
        "content": "<p>The thing is that the <code>..</code> fill in everything they can as soon as they're used. So you want to use them last.</p>",
        "id": 271991461,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644939455
    },
    {
        "content": "<p>Isnt that odd? I can out a .. foo before.. bar, but not before individual field assignments? Anyways, probably all not so important, and I'll adjust to the mathlib style</p>",
        "id": 271991485,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644939469
    },
    {
        "content": "<p>Are you using the old or new structure command? What is the value of <code>old_structure_cmd</code>?</p>",
        "id": 271991608,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644939522
    },
    {
        "content": "<p>If you're using the new one, then usually what you consider a single field of a structure is actually a field of a parent one and the structure you have in hand has that parent as a field. If you understand this, then you'll see why the <code>{ := , := }</code> is such a nice syntax sugar.</p>",
        "id": 271991767,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644939601
    },
    {
        "content": "<p>I thought I had remembered Mario discussing <code>with</code> vs <code>..</code> and the history of <code>..</code> in Lean 3, but all I managed to dig up was <a href=\"#narrow/stream/270676-lean4/topic/.22.2E.2Es.22.20in.20structure.20literals/near/224902754\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.22.2E.2Es.22.20in.20structure.20literals/near/224902754</a></p>\n<p>Too bad \"with\" is a stop word for Zulip's search...</p>",
        "id": 272027126,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644953943
    },
    {
        "content": "<p>By the way for the curious, the <code>..s</code> notation has since been added as a mathlib4 extension written <code>__ := s</code>. I think it is also less restrictive in terms of its positioning wrt other fields</p>",
        "id": 272072009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644985216
    }
]