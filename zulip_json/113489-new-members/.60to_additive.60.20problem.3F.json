[
    {
        "content": "<p>Dear All,</p>\n<p>I would like to state the lemmas below that look like a perfect <code>to_additive</code> pair.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c1\">--@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_self_eq_npow_two</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">npow</span> <span class=\"mi\">2</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">monoid.npow_succ'</span><span class=\"o\">,</span> <span class=\"n\">monoid.npow_succ'</span><span class=\"o\">,</span> <span class=\"n\">monoid.npow_zero'</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_self_eq_nsmul_two</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">nsmul</span> <span class=\"mi\">2</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid.nsmul_succ'</span><span class=\"o\">,</span> <span class=\"n\">add_monoid.nsmul_succ'</span><span class=\"o\">,</span> <span class=\"n\">add_monoid.nsmul_zero'</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>However, if I uncomment the <code>to_additive</code> attribute, I get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"mi\">0</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">nat.has_one</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_one</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_zero</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>at the <code>2</code> in <code>npow 2 a</code>.  I suspect that this is due to the fact that <code>to_additive</code> is converting the <code>nat.one</code> and to a <code>nat.zero</code>.  Regardless of the issue, is there a way to get this to work with <code>to_additive</code>?</p>\n<p>Thanks!</p>",
        "id": 240844089,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622473675
    },
    {
        "content": "<p>When I've hit things like this I don't bother diagnosing, I just do what you did (prove both lemmas and then join them together afterwards).</p>",
        "id": 240844273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622473772
    },
    {
        "content": "<p>Ok, fair enough!  Besides, I do not see myself proving a lot of such lemmas!</p>",
        "id": 240844385,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622473814
    },
    {
        "content": "<p>so, for completeness, this is what you are suggesting, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_self_eq_nsmul_two</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">nsmul</span> <span class=\"mi\">2</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid.nsmul_succ'</span><span class=\"o\">,</span> <span class=\"n\">nsmul_one'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_self_eq_npow_two</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">npow</span> <span class=\"mi\">2</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">monoid.npow_succ'</span><span class=\"o\">,</span> <span class=\"n\">npow_one</span><span class=\"o\">]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">mul_self_eq_npow_two</span>\n</code></pre></div>",
        "id": 240844475,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622473877
    },
    {
        "content": "<p>Yes. That works, right? If you <code>set_option pp.numerals false</code> then you can see the issue -- the multiplicative statement has a <code>one</code> in it because <code>2</code> expands to <code>bit0 has_one.one</code>.</p>",
        "id": 240844704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622474005
    },
    {
        "content": "<p>I believe that it does work -- it gives no error, and this is what I see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_self_eq_nsmul_two</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">nsmul</span> <span class=\"mi\">2</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid.nsmul_succ'</span><span class=\"o\">,</span> <span class=\"n\">nsmul_one'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_self_eq_npow_two</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">npow</span> <span class=\"mi\">2</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">monoid.npow_succ'</span><span class=\"o\">,</span> <span class=\"n\">npow_one</span><span class=\"o\">]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">mul_self_eq_npow_two</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">mul_self_eq_npow_two</span>\n<span class=\"kd\">@[to_additive to_additive.value_type.mk name.anonymous (option.none.{0} string), to_additive_aux id.{1} name add_self_eq_nsmul_two]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_self_eq_npow_two</span> <span class=\"o\">:</span> <span class=\"n\">blah</span> <span class=\"n\">blah</span> <span class=\"n\">blah</span>\n</code></pre></div>",
        "id": 240844942,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622474152
    },
    {
        "content": "<p>Note that most lemmas involving <code>nsmul</code> should not be stated with <code>nsmul</code>, but instead with <code>•</code>. It is not registered from the start because modules are not yet defined, but once this is done one should essentially never mention <code>nsmul</code> explicitely any more.</p>",
        "id": 240845053,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622474199
    },
    {
        "content": "<p>Sébastien, if I try to use <code>\\sm</code>, Lean says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_scalar</span> <span class=\"n\">ℕ</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>Your comment refers to the fact that once there will be a future PR with modules, <code>\\sm</code> will actually work and be the preferred syntax?</p>",
        "id": 240845300,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622474352
    },
    {
        "content": "<p>Kevin, thank you for the <code>set_option pp.numerals false</code>: this makes it much clearer than what I thought that I had inferred!</p>",
        "id": 240845447,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622474427
    },
    {
        "content": "<p>I think he just means that you should import <code>algebra.group_power.basic</code></p>",
        "id": 240845550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622474502
    },
    {
        "content": "<p>Ah, yes!  Now the notation works and it turns out that the lemma is already in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_self_eq_nsmul_two</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">two_nsmul</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>Thanks a lot!</p>",
        "id": 240846062,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622474817
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/.02klzzwxh.3A0000.03.20problem.3F\">#general &gt; <code>to_additive</code> problem?</a></p>",
        "id": 240875969,
        "sender_full_name": "Notification Bot",
        "timestamp": 1622499719
    }
]