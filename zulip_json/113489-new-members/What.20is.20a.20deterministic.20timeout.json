[
    {
        "content": "<p>The following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.lebesgue_measure</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">measure_theory.real.measure_space</span>\n</code></pre></div>\n<p>causes Lean to print the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span>\n</code></pre></div>\n<p>Why is that?</p>",
        "id": 219301118,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607494197
    },
    {
        "content": "<p><code>(deterministic) timeout</code> means that Lean was trying to do a computation which exceeded the time limit allowed by the <code>--timeout</code> / <code>-T</code> option. If you run <code>lean --help</code> you'll see that it says:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>--timeout=num -T   maximum number of memory allocations per task\n                     this is a deterministic way of interrupting long running tasks\n</code></pre></div>\n<p>In this case, you are trying to reduce an enormous term in the Lean kernel which is going to take a lot of time and memory.</p>",
        "id": 219301428,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607494720
    },
    {
        "content": "<p>I'm not sure the result of this (some extremely long, unreadable expression) would be very enlightening.</p>",
        "id": 219301504,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607494862
    },
    {
        "content": "<p>Thank you.  I am trying to understand whether it is a finitely long expression that it is trying to print or recursively defined and infinitely long.  I will up the memory parameter to 64GB and see if it prints.</p>",
        "id": 219334646,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607520177
    },
    {
        "content": "<p>How do I up the memory parameter in general for VS Code?  I am just running <code>code</code> and I don't know how that connects to <code>lean</code>.</p>",
        "id": 219334782,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607520264
    },
    {
        "content": "<p>I've made a file <code>foo.lean</code> with the above contents and run <code>lean foo.lean</code>.  It's not using any memory at all, it's just sitting there keeping one core hot at 100%. <a href=\"user_uploads/3121/xhnCFIHx6Vhoa3hidRb-QrG5/Screenshot-from-2020-12-09-08-28-48.png\">Screenshot-from-2020-12-09-08-28-48.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/3121/xhnCFIHx6Vhoa3hidRb-QrG5/Screenshot-from-2020-12-09-08-28-48.png\" title=\"Screenshot-from-2020-12-09-08-28-48.png\"><img src=\"user_uploads/3121/xhnCFIHx6Vhoa3hidRb-QrG5/Screenshot-from-2020-12-09-08-28-48.png\"></a></div>",
        "id": 219335305,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607520601
    },
    {
        "content": "<p>it's finite</p>",
        "id": 219335367,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607520620
    },
    {
        "content": "<p>Thank you, what is it busy doing?  You can see from the picture it is using constant memory and all of one CPU.</p>",
        "id": 219335490,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607520699
    },
    {
        "content": "<p>probably working out the expression, I imagine</p>",
        "id": 219335586,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607520735
    },
    {
        "content": "<p>I don't think this is a productive line of inquiry</p>",
        "id": 219335605,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607520750
    },
    {
        "content": "<p>What are you hoping for reduce to tell you about this definition?</p>",
        "id": 219335702,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607520805
    },
    {
        "content": "<p>I am trying to work out the 3 questions in <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Probability.20measure.20of.20B%28R%29.20and.20B%28.5B0.2C1.5D%29/near/219292649\">this thread</a>. This was question 3, which is the easiest to state in 2 lines.   It's still working out that expression as I type, on a core i9 CPU.   The stack of definitions is not that long, so I guess there is some way to make a combinatorial explosion in term expansion.  Which is not what I am trying to understand, but it would be interesting to demonstrate, in a few lines without imports, how to produce a type expression of say <code>k</code> terms which Lean will expand into <code>2^2^k</code> terms, if that's what's going on here, which I also kind of doubt because I'm still not using any memory.  So it may not be particularly productive but in some ways, still interesting on its own.</p>",
        "id": 219336112,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607521043
    },
    {
        "content": "<p>Unless this is a case where <a href=\"https://link.springer.com/chapter/10.1007/3-540-62950-5_78\">unification is intractable</a>, which may also be an unproductive thing to think about, but still.</p>",
        "id": 219336363,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607521183
    },
    {
        "content": "<p>well for example <code>#reduce (2^2^10)</code> will already result in a term of size 2^2^10</p>",
        "id": 219336452,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607521218
    },
    {
        "content": "<p>Good example, case closed....if the definition of the real numbers contains something like that.  Where is it?</p>",
        "id": 219336526,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607521258
    },
    {
        "content": "<p>And also, it's using <strong>no additional memory</strong>, so...probably not.</p>",
        "id": 219336609,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607521303
    },
    {
        "content": "<p>Type <code>#print notation ℝ</code> to discover that <code>ℝ</code> is notation for <code>real</code>, and then <code>#check real</code> and right click to go to the definition of <code>real</code>.</p>",
        "id": 219336629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607521311
    },
    {
        "content": "<p>Then you can right click more at your leisure to explore the term without ever explicitly unfolding it.</p>",
        "id": 219336704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607521339
    },
    {
        "content": "<p>Thank you Kevin, that is helpful.  I am trying to climb into definitions, so that is all I really need to know.</p>",
        "id": 219336768,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607521383
    },
    {
        "content": "<p>But...in this case I am trying to climb into <code>measure_theory.real.measure_space</code> as a constructed object.  I can read the code but I don't have Lean in my head so it's not a perfect replacement for <code>#reduce</code>.</p>",
        "id": 219336927,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607521449
    },
    {
        "content": "<p>If you're interested in such questions, why not start with something a <strong>lot</strong> smaller than <code>measure_theory.real.measure_space</code></p>",
        "id": 219337029,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607521500
    },
    {
        "content": "<p>Yes, please suggest an example.  I looked for other fully instantiated <code>measure_space</code> examples in <code>mathlib</code> but didn't see one.</p>",
        "id": 219337108,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607521535
    },
    {
        "content": "<p>maybe <code>nat.mul</code> or something</p>",
        "id": 219337282,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607521601
    },
    {
        "content": "<p>or heck, <code>real.mul</code></p>",
        "id": 219337317,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607521614
    },
    {
        "content": "<p>I only see one fully instantiated <code>measure_space</code> in <code>mathlib</code>, and one measure-space-producing function instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">grep</span> <span class=\"n\">measure_space</span> <span class=\"bp\">*/*.</span><span class=\"n\">lean</span> <span class=\"bp\">*/*/*.</span><span class=\"n\">lean</span> <span class=\"bp\">|</span> <span class=\"n\">grep</span> <span class=\"kd\">instance</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">lebesgue_measure.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"n\">real.measure_space</span> <span class=\"o\">:</span> <span class=\"n\">measure_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">prod.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"n\">prod.measure_space</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">measure_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 219337654,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607521803
    },
    {
        "content": "<p>Well a measure space is a measurable space + a choice of measure and there are other examples of measures in mathlib (e.g. the Haar measure), so these can be used to define other measure spaces</p>",
        "id": 219338182,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607522095
    },
    {
        "content": "<p>They just might not be an instance as some choice is involved (picking a compact open) so there isn't going to be a unique such choice for any topological group</p>",
        "id": 219338380,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607522190
    },
    {
        "content": "<p>The phenomenon that terms get really big when you <code>#reduce</code> them is not specific to measure spaces.</p>",
        "id": 219338615,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607522324
    },
    {
        "content": "<p>Is there a way to trace the rewriting steps of a <code>#reduce</code>?  I recall there is a way to trace proofs, not sure about <code>#reduce</code>.</p>\n<p>Also in the end, in terms of picking things apart, the major question I have at the moment in terms of how the language works is why I can't extract the value of <code>m_Union</code> in a fully constructed <a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/measure_space.html#measure_theory.measure\">measure</a>.</p>",
        "id": 219340484,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607523193
    },
    {
        "content": "<p>What do you mean by \"can't extract the value\"?</p>",
        "id": 219344098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607524685
    },
    {
        "content": "<p>In the last line of this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measurable_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A1</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">𝒫</span> <span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">is_measurable'</span> <span class=\"o\">:=</span> <span class=\"n\">A1</span><span class=\"o\">,</span>\n  <span class=\"n\">is_measurable_empty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">A1</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">},</span>\n  <span class=\"n\">is_measurable_compl</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">A1</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">},</span>\n  <span class=\"n\">is_measurable_Union</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">A1</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">M1</span>\n<span class=\"kd\">instance</span> <span class=\"n\">XFT</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">fin.fintype</span> <span class=\"n\">_</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">amy</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">μ_M1</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">measure_theory.measure</span> <span class=\"n\">X</span> <span class=\"n\">M1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">measure_theory.measure.of_measurable</span> <span class=\"n\">_</span> <span class=\"n\">M1</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">finset.card</span> <span class=\"n\">s.to_finset</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"kd\">end</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">μ_M1</span> <span class=\"c1\">-- μ_M1 : measure_theory.measure X</span>\n<span class=\"k\">#check</span> <span class=\"n\">μ_M1.m_Union</span> <span class=\"c1\">-- ERROR</span>\n</code></pre></div>\n<p>where it says ERROR in the comment, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"n\">μ_M1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">⁇</span>\n</code></pre></div>\n<p>where <code>m_Union</code> is <a href=\"https://github.com/leanprover-community/mathlib/blob/d12a7319934516253eb85a7f90cc47fc20621cdb/src/measure_theory/measure_space.lean#L95\">defined as</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">m_Union</span> <span class=\"o\">⦃</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">⦄</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_measurable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">measure_of</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measure_of</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 219345591,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607525270
    },
    {
        "content": "<p>It's not necessary to go to the reals to get <code>#reduce</code> to time out, reducing the type of finite sets with 1 element will also work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">fin.fintype</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 219415292,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607556969
    },
    {
        "content": "<p>why are you trying to break Lean</p>",
        "id": 219415672,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607557272
    },
    {
        "content": "<p>Sure, here's an easier example. These numbers might be specific to my computer / Lean settings but you get the point:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"mi\">25781</span> <span class=\"c1\">-- slow, but returns 25781</span>\n<span class=\"k\">#reduce</span> <span class=\"mi\">25782</span> <span class=\"c1\">-- deep recursion detected</span>\n</code></pre></div>",
        "id": 219416801,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607558274
    },
    {
        "content": "<p>We try not to make the Lean kernel reduce big terms. (This is why Kenny is always saying \"never unfold definitions!\")</p>",
        "id": 219416953,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607558365
    },
    {
        "content": "<p>The set <code>{0}</code> is not as big as the von Neumann ordinal representation of 25782.  Something in <code>#reduce fin.fintype 1</code> is intractable, but not because of arithmetic with large von Neumann ordinals.  Insight would be gained by finding exactly what in the relatively small (compared to ℝ)  set of rules governing <code>fintype</code> is triggering an intractable computation.    The  question is then whether it is </p>\n<ul>\n<li>Some phrasing in the rules which could be changed to make this example run faster, or </li>\n<li>Lean is triggering an unavoidable instance of an intractable unification problem.  </li>\n</ul>\n<p>There are lots of intractable unification situations, for example</p>\n<ul>\n<li><a href=\"https://academic.oup.com/logcom/article/10/1/105/1078476\">https://academic.oup.com/logcom/article/10/1/105/1078476</a></li>\n<li><a href=\"https://link.springer.com/chapter/10.1007/3-540-62950-5_78\">https://link.springer.com/chapter/10.1007/3-540-62950-5_78</a></li>\n<li><a href=\"https://www.sciencedirect.com/science/article/pii/S0747717103001445\">https://www.sciencedirect.com/science/article/pii/S0747717103001445</a></li>\n<li><a href=\"https://dl.acm.org/doi/abs/10.5555/647196.720997\">https://dl.acm.org/doi/abs/10.5555/647196.720997</a></li>\n</ul>\n<p>If there is an option  for <code>#reduce</code> that causes it to print each rewrite then I could drill down on it more.</p>",
        "id": 219418108,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607559216
    },
    {
        "content": "<p>And to be clear, this is an intractable <strong>time</strong> problem, not an intractable <strong>space</strong> problem, because my memory usage is constant during the run.</p>",
        "id": 219418387,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607559445
    },
    {
        "content": "<p>But anyway, I don't really care about the intractability of unification, do you?  The real reason I was obsessing over this was because I was having a <a href=\"#narrow/stream/113489-new-members/topic/How.20can.20I.20concretize.20this.20particular.20_.20type.3F/near/219419800\">very very hard time</a> figuring out how to rewrite <code>(λ s _, finset.card s.to_finset)</code> as a standalone function.  It took me several days of spare time to come up with this (note, <code>def</code> doesn't work):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"n\">abbreviation</span> <span class=\"n\">qlbrdl</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_measurable</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span>\n  <span class=\"n\">finset.card</span> <span class=\"n\">s.to_finset</span>\n</code></pre></div>\n<p>It's done, though, so I can move on.</p>",
        "id": 219420091,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607560939
    },
    {
        "content": "<p>The problem with reducing <code>fin.fintype 1</code> is that using <code>#reduce</code> means it also has to reduce the <em>proofs</em>, which is not something you normally have to worry about in unification problems / proof by <code>rfl</code>. <code>fintype</code> contains several proofs, proved using some recursions that were not size optimized, so it's not particularly surprising to me that this fails. Really, <code>#reduce</code> is useless on almost everything beyond the basics</p>",
        "id": 219442467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607588529
    },
    {
        "content": "<p>Would it be sensible to have a <code>#reduce'</code> that only reduces types and not proofs?</p>",
        "id": 219442826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607588845
    },
    {
        "content": "<p>You can use <code>whnf</code> to incrementally drill down into a term, unfolding only what you need to.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- #reduce (fin.fintype 1) -- timeout</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.whnf</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fin.fintype</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span>\n<span class=\"c1\">-- {elems := finset.fin_range 1, complete := finset.mem_fin_range 1}</span>\n\n<span class=\"c1\">-- #reduce finset.fin_range 1 -- timeout</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.whnf</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">finset.fin_range</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span>\n<span class=\"c1\">-- {val := ↑(list.fin_range 1), nodup := list.nodup_fin_range 1}</span>\n\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"c1\">-- quot.mk list.perm [⟨0, _⟩]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs</span> <span class=\"n\">true</span>\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"c1\">-- quot.mk list.perm [⟨0, &lt;1310 lines of proof&gt;⟩]</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.whnf</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span>\n<span class=\"c1\">-- quot.mk setoid.r (list.fin_range 1)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">list.fin_range</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- [⟨0, _⟩]</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.whnf</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span>\n<span class=\"c1\">-- fin.mk 0 _ :: list.pmap fin.mk list.nil _</span>\n</code></pre></div>",
        "id": 219446190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607591020
    },
    {
        "content": "<p>Thank you, having a technique for stepping through term-mode proofs is extremely useful.</p>\n<p>So the root cause in this case is an unoptimized recursion in the proof.</p>\n<p>This introduces a new field of study: <strong>The computational complexity of Lean proofs about <code>P m</code>. </strong>  If there are <code>m</code> variables in a statement about <code>P m1 ... mN</code>, it would be reasonable to write papers of the form \"We can prove <code>P m1 .. mN</code> in Lean in O(N^2) time thus improving on the prior proof in O(2^N)\" or in a sad case of form \"Any proof of <code>P m1..mN</code> in Lean requires O(2^2^n) time\".</p>\n<p>You can see something along these lines in a different paradigm (decidable sublanguages of set theory) here:</p>\n<ul>\n<li><a href=\"https://onlinelibrary.wiley.com/doi/abs/10.1002/cpa.3160330503\">Decision procedures for elementary sublanguages of set theory. I. Multi‐level syllogistic and some extensions</a></li>\n<li><a href=\"https://onlinelibrary.wiley.com/doi/abs/10.1002/cpa.3160340203\">Decision procedures for elementary sublanguages of set theory. II. Formulas involving restricted quantifiers, together with ordinal, integer, map, and domain notions</a></li>\n<li>...</li>\n<li><a href=\"https://link.springer.com/article/10.1007/BF00245818\">Decision procedures for elementary sublanguages of set theory\nXV. Multilevel syllogistic extended by the predicate finite and the operators singleton and pred</a></li>\n</ul>\n<p>The only downside is that a lot of these results are of form \"this is hyperexponential in <code>N</code>\" .  This creates a market for <a href=\"https://people.eecs.berkeley.edu/~vazirani/pubs/bv.pdf\">quantum computing</a>.  It can also lead to some discouragement in the absence of a quantum computer.</p>",
        "id": 219470104,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607606391
    },
    {
        "content": "<p>There's no real purpose in reducing proofs in the first place though, or using <code>#reduce</code> at all really.</p>",
        "id": 219470734,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607606724
    },
    {
        "content": "<p>The size of a fully expanded proof is basically the same thing as proving a theorem only using the axioms. There is a close connection to cut-free proofs, and the computational bounds on those are usually in the range <code>2^^n</code> where <code>^^</code> is the iterated exponential (power tower), so quite bad. However, we need not dismay, because all this means is that <em>lemmas are important</em>. We can still prove and efficiently typecheck a proof without ever inlining all the lemmas, which is what <code>#reduce</code> amounts to.</p>",
        "id": 219473135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607608040
    }
]