[
    {
        "content": "<p>We know</p>\n<ul>\n<li><code>α β: Type</code></li>\n<li><code>c: set α</code></li>\n<li><code>f: ({x:α // c x} → β)</code></li>\n<li><code>y: α</code></li>\n<li><code>c y</code><br>\nHow to apply <code>f</code> to <code>y</code>?</li>\n</ul>",
        "id": 277495025,
        "sender_full_name": "Victor Porton",
        "timestamp": 1648860579
    },
    {
        "content": "<p>By the way, writing a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> like the following makes it easier for everyone:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(That way we don't have a bunch of people collectively spending time writing what I just did.)</p>",
        "id": 277495103,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648860684
    },
    {
        "content": "<p>Actually, is that <code>c y</code> another hypothesis?</p>",
        "id": 277495183,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648860740
    },
    {
        "content": "<p>I assume so, so here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 277495212,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648860781
    },
    {
        "content": "<p>Yes, <code>c y</code> is a hypothesis.</p>",
        "id": 277495215,
        "sender_full_name": "Victor Porton",
        "timestamp": 1648860783
    },
    {
        "content": "<p>This is equivalent:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>When you use <code>set</code>, you're meant to use <code>∈</code> since there are <code>simp</code> lemmas that are for sets that won't apply if you use <code>c</code> as a predicate directly.</p>",
        "id": 277495288,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648860859
    },
    {
        "content": "<p>The angle brackets (\"anonymous constructor notation\") are short for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">subtype.mk</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I'm able to use <code>c</code> in the domain of <code>f</code> since Lean will automatically coerce it to a type using <code>subtype</code>.</p>",
        "id": 277495340,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648860907
    }
]