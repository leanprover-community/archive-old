[
    {
        "content": "<p>i've been struggling a bit to define braid group and properties. i wanted to double check that this is the way to define a braid group using presented groups: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">braid_group</span> <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"bp\">ᵢ</span> <span class=\"n\">σₖ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span> <span class=\"bp\">≃*</span> <span class=\"n\">presented_group</span> <span class=\"o\">(</span><span class=\"n\">braid_rels</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span> <span class=\"n\">σₖ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is this saying that <code>multiplicative ℤ</code> and <code>presented_group (braid_rels σᵢ σₖ)</code> are both braid groups?</p>",
        "id": 249142825,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628703905
    },
    {
        "content": "<p>Your <code>def</code> says that <code>multiplicative ℤ</code> is isomorphic to the group <code>presented_group (braid_rels σᵢ σₖ)</code>.</p>",
        "id": 249143575,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628704195
    },
    {
        "content": "<p>What is <code>braid_rels</code>?</p>",
        "id": 249143583,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628704200
    },
    {
        "content": "<p>those are braid relations which i tried to write as so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">`σₖ⁻¹ * σᵢ⁻¹ * σₖ⁻¹ * σᵢ * σₖ * σᵢ = 1` and `σᵢ⁻¹ * σₖ⁻¹ * σᵢ * σₖ = 1`</span>\n<span class=\"cm\">1 ≤ i - k for the second one.  -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">braid_rels</span> <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"bp\">ᵢ</span> <span class=\"n\">σₖ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">free_group</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σₖ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σₖ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span>\n<span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σₖ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σₖ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n<span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σₖ</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 249143942,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628704351
    },
    {
        "content": "<p>so <code>σᵢ * σₖ * σᵢ = σₖ * σᵢ * σₖ </code> and <code>σᵢ * σₖ = σₖ * σᵢ</code> for braid crossings <code>σᵢ </code>,<code> σₖ</code></p>",
        "id": 249144148,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628704446
    },
    {
        "content": "<p>These aren't the correct relations for the braid group -- you're inadvertently defining the symmetric group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">S_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and that's definitely not isomorphic to <code>multiplicative ℤ</code>.</p>",
        "id": 249144246,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628704503
    },
    {
        "content": "<p>I'm wrong, it's not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">S_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, but I'm not sure what it is.</p>",
        "id": 249144334,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628704551
    },
    {
        "content": "<p>I see, the relations imply that <code>σᵢ = σₖ</code>, and then it's an infinite cyclic group.  It's not the three-strand braid group, though, which is what you'd expect from two generators.</p>",
        "id": 249144938,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628704780
    },
    {
        "content": "<p>Do you want to define the 3-strand braid group or the general one?</p>",
        "id": 249145074,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628704821
    },
    {
        "content": "<p>yes i think i don't yet have <code>1 &lt; i &lt; n-2</code>for the first relation and <code>i - k ≥ 2</code> for the second one and my indexing is incorrect. how do i say that <code>i</code> and <code>i + 1</code> are the indices rather than <code>i</code>, <code>k</code>?</p>",
        "id": 249145147,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628704855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/braid.20group/near/249145074\">said</a>:</p>\n<blockquote>\n<p>Do you want to define the 3-strand braid group or the general one?</p>\n</blockquote>\n<p>i think both</p>",
        "id": 249145197,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628704872
    },
    {
        "content": "<p>The main problem is that <code>σᵢ</code> is just a notation, it has nothing to do with <code>i</code>.</p>",
        "id": 249145227,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628704884
    },
    {
        "content": "<p>You can start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">free_group</span> <span class=\"o\">(</span><span class=\"n\">of</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">braids_rel3</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">free_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{(</span><span class=\"n\">of</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">of</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">of</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">of</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">braids_group3</span> <span class=\"o\">:=</span> <span class=\"n\">presented_group</span> <span class=\"n\">braids_rel3</span>\n</code></pre></div>",
        "id": 249145712,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628705051
    },
    {
        "content": "<p>oh ok</p>",
        "id": 249146295,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628705293
    },
    {
        "content": "<p>In the general case you need something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">free_group</span> <span class=\"o\">(</span><span class=\"n\">of</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">braids_rel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">free_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">of</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">of</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">of</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">of</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">of</span> <span class=\"n\">k</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">brais_group</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">presented_group</span> <span class=\"o\">(</span><span class=\"n\">braids_rel</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 249146340,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628705321
    },
    {
        "content": "<p>I see <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> already came up with a short definition, but this is what I came up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.presented_group</span>\n\n<span class=\"sd\">/-- For the n-strand braid group, we will have 1,...,n-1 be the generators. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">braid_gens</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">σ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">braid_gens</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">free_group</span> <span class=\"o\">(</span><span class=\"n\">braid_gens</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">free_group.of</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- Generators commute if they have to do with strands at least two away. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">braid_rel_A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">braid_gens</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">braid_gens</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">free_group</span> <span class=\"o\">(</span><span class=\"n\">braid_gens</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The braid relation for adjacent generators. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">braid_rel_B</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">braid_gens</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">braid_gens</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">free_group</span> <span class=\"o\">(</span><span class=\"n\">braid_gens</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hj</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hj</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hj</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">braid_rels</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">free_group</span> <span class=\"o\">(</span><span class=\"n\">braid_gens</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">braid_rel_A</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span><span class=\"o\">}</span>\n  <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">braid_rel_B</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">braid_group</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">presented_group</span> <span class=\"o\">(</span><span class=\"n\">braid_rels</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 249146660,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628705484
    },
    {
        "content": "<p>If recommend using <code>fin n</code> instead of <code>braid_gens n</code> because we have more <code>def</code>s and theorems about <code>fin n</code>.</p>",
        "id": 249146850,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628705564
    },
    {
        "content": "<p>It looks like you defined the (n+1)-strand braid group</p>",
        "id": 249146880,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628705581
    },
    {
        "content": "<p>But I like your idea to split the definition into several smaller defs.</p>",
        "id": 249147139,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628705696
    },
    {
        "content": "<p>Do we have that an iso between types induces a group iso between free groups over those types?</p>",
        "id": 249147293,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628705763
    },
    {
        "content": "<p>Either we do, or we should.</p>",
        "id": 249147407,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628705810
    },
    {
        "content": "<p>It'd be nice to define <a href=\"https://en.wikipedia.org/wiki/Artin%E2%80%93Tits_group\">Artin-Tits groups</a> and have the braid groups be a special case.</p>",
        "id": 249147494,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628705855
    },
    {
        "content": "<p>Here's Artin-Tits groups and the braid group:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">alt</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">free_group</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">free_group.of</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">alt</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">artin_tits_rels</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">free_group</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">alt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">alt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)}</span>\n\n<span class=\"sd\">/-- Artin-Tits groups.  Traditionally we require that</span>\n<span class=\"sd\">`∀ s t, m s t = m t s` but the hypothesis isn't used in the definition. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">artin_tits</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">presented_group</span> <span class=\"o\">(</span><span class=\"n\">artin_tits_rels</span> <span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">braid_group</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">artin_tits</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 249149317,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628706648
    },
    {
        "content": "<p>Walking through this, <code>alt n s t</code> gives an n-term product starting with <code>s * t * s * t * ...</code>.  The <code>artin_tits</code> group is defined using a matrix <code>m</code> of natural numbers with one row and column per generator, where for <code>s</code> and <code>t</code> there is a relation <code>s * t * s * t * ... = t * s * t * s * ...</code> with <code>m s t</code> terms in the first product and <code>m t s</code> terms in the second.  In the usual definition, the matrix has entries from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">2,3,\\dots,\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∞</span></span></span></span>, but (1) you can use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> instead of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span> and have the same result and (2) there's no harm in allowing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, since it just means you could have written the group with fewer generators.  Also, in the usual definition the matrix is supposed to be symmetric, but that's not used in the definition.</p>\n<p>Then the braid group is where for neighboring generators you use 3 terms in the relation, and for non-neighboring generators you use 2 terms.</p>",
        "id": 249150662,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628707216
    },
    {
        "content": "<p>what does <code>m s t</code> and <code>m t s</code> mean? i'm confused on what writing the matrix <code>m</code> next to <code>s</code> <code>t </code> does here</p>",
        "id": 249151797,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628707709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/braid.20group/near/249147293\">said</a>:</p>\n<blockquote>\n<p>Do we have that an iso between types induces a group iso between free groups over those types?</p>\n</blockquote>\n<p>I'm fairly sure we have this...</p>",
        "id": 249151913,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628707760
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_group.free_group_congr\">docs#free_group.free_group_congr</a></p>",
        "id": 249152078,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628707811
    },
    {
        "content": "<p>The name should be changed to <code>free_group.congr</code>;)</p>",
        "id": 249152134,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628707840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"418958\">@Holly Liu</span> The type of <code>m</code> is <code>m : S → S → ℕ</code>, which is a type commonly thought of as being a matrix.  The two <code>S</code> arguments are like the two indices for the matrix.</p>",
        "id": 249152244,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628707891
    },
    {
        "content": "<p>oh i see. i am also confused about why we want to use a matrix <code>m</code> of natural numbers to contain the generators</p>",
        "id": 249152620,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628708032
    },
    {
        "content": "<p>Braid groups are an example of Artin-Tits groups, and this is how Artin-Tits groups are defined.  (Also, the matrix does not contain the generators, the entries sort of describe \"how much the generators commute\" so to speak.)</p>",
        "id": 249153101,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628708225
    },
    {
        "content": "<p>In my earlier code, <code>braid_rel_A</code> corresponds to a matrix entry of 2, and <code>braid_rel_B</code> corresponds to a matrix entry of 3</p>",
        "id": 249153268,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628708285
    },
    {
        "content": "<p>I like the artin-tits presentation, it's much more symmetric!</p>",
        "id": 249153514,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628708400
    },
    {
        "content": "<p>hmm ok, i still don't know what commuting generators mean in the context of the matrix. i'll have to read up a bit on artin-tits groups</p>",
        "id": 249153822,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628708512
    },
    {
        "content": "<p>thank you all for the input. it was incredibly helpful <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 249155125,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628709060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"418958\">@Holly Liu</span> Here's half the proof that the 2-strand braid group is infinite cyclic.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">braid_group_2_to_mul_ℤ'</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">multiplicative.of_add</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">braid_group_2_to_mul_ℤ</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span> <span class=\"bp\">→*</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">presented_group.to_group</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">braid_group_2_to_mul_ℤ'</span> <span class=\"n\">_</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">artin_tits_rels</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hr</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">braid_group_2_is_cyclic</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span> <span class=\"bp\">≃*</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">braid_group_2_to_mul_ℤ</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">presented_group.of</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x.to_add</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">braid_group_2_to_mul_ℤ.map_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 249155560,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628709266
    },
    {
        "content": "<p>(By the way, I had to make the definitions of <code>braid_group</code> and <code>artin_tits</code> reducible (I used <code>abbreviation</code>) to make Lean see that they're groups. I edited that message.)</p>",
        "id": 249156842,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628709925
    },
    {
        "content": "<p>oh wow ok thanks</p>",
        "id": 249176973,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628720348
    },
    {
        "content": "<p>I'd recommend using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.to_mul_equiv\">docs#monoid_hom.to_mul_equiv</a> if possible there, because usually the two proofs fall out with <code>ext, simp</code></p>",
        "id": 249180415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628722789
    },
    {
        "content": "<p>And if they don't, then you should add the lemmas needed so that they do!</p>",
        "id": 249180606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628722883
    },
    {
        "content": "<p>Only partially following <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s advice (and it'd be better to follow all of it), here's an unrefined proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- import algebra.group_power</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">braid_group_2_to_mul_ℤ'</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">multiplicative.of_add</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">braid_group_2_to_mul_ℤ</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span> <span class=\"bp\">→*</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">presented_group.to_group</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">braid_group_2_to_mul_ℤ'</span> <span class=\"n\">_</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">artin_tits_rels</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hr</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul_ℤ_to_braid_group_2</span> <span class=\"o\">:</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→*</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"n\">gpowers_hom</span> <span class=\"o\">(</span><span class=\"n\">braid_group</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">presented_group.of</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">braid_group_2_is_cyclic</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span> <span class=\"bp\">≃*</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"n\">monoid_hom.to_mul_equiv</span> <span class=\"n\">braid_group_2_to_mul_ℤ</span> <span class=\"n\">mul_ℤ_to_braid_group_2</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">braid_group_2_to_mul_ℤ</span><span class=\"o\">,</span> <span class=\"n\">mul_ℤ_to_braid_group_2</span><span class=\"o\">,</span> <span class=\"n\">monoid_hom.id_apply</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">monoid_hom.coe_comp</span><span class=\"o\">,</span>\n    <span class=\"n\">gpowers_hom_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">quotient_group.induction_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">free_group.induction_on</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.mk</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">quotient_group.mk</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">quotient_group.mk</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">h2</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">gpow_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">to_add_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">congr'</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">presented_group.to_group</span><span class=\"o\">,</span> <span class=\"n\">monoid_hom.map_mul</span><span class=\"o\">,</span> <span class=\"n\">quotient_group.lift_mk'</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249188178,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628730278
    },
    {
        "content": "<p>This really shouldn't be the proof -- instead it should be that it's a group presentation with to relations, so it's a free group, and it's a free group with one generator, so it's isomorphic to <code>multiplicative ℤ</code>.</p>\n<p>(It doesn't apply here, but it would be nice if there were things like <a href=\"https://en.wikipedia.org/wiki/Tietze_transformations\">Tietze transformations</a> for group presentations.)</p>",
        "id": 249188429,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628730625
    },
    {
        "content": "<p>A good relevant test of such transformations would be to show that <code>braid_group 3</code> is isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⟨</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>∣</mo><msup><mi>x</mi><mn>2</mn></msup><mo>=</mo><msup><mi>y</mi><mn>3</mn></msup><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">\\langle x,y \\mid x^2 = y^3\\rangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">⟩</span></span></span></span>.</p>",
        "id": 249189533,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628732105
    },
    {
        "content": "<p>There's definitely an ext lemma missing on quotient_group that that proof would benefit from</p>",
        "id": 249202812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628751236
    },
    {
        "content": "<p>Added those lemmas in <a href=\"https://github.com/leanprover-community/mathlib/issues/8641\">#8641</a></p>",
        "id": 249209986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628757610
    },
    {
        "content": "<p>why does this result in <code>free_group S</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">alt</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">free_group</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">free_group.of</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">alt</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 249302260,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628807933
    },
    {
        "content": "<p>why wouldn't it?</p>",
        "id": 249303737,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628809079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"418958\">@Holly Liu</span> Are you familiar with how to write recursive definitions in Lean? This is recursing on the natural number argument to create a product of the form <code>free_group.of s * free_group.of t * free_group.of s * ...</code> with <code>n</code> terms.</p>",
        "id": 249304464,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628809595
    },
    {
        "content": "<p>Well, technically it has n+1 terms with the last term being <code>1</code>. For example, <code>alt 2 s t</code> is <code>free_group.of s * free_group.of t * 1</code>.</p>",
        "id": 249304514,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628809659
    },
    {
        "content": "<p>oh ok, i think i understand the recursive part. i've been using <code>free_group.of</code> to define the generators but i don't actually know why we do this. this seems to be saying a generator is a free group and the product <code>free_group.of s * free_group.of t * ...</code> is also a free group, but this looks like a word to me.</p>",
        "id": 249308724,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628813699
    },
    {
        "content": "<p>Have you studied free groups and their universal property?  <code>free_group.of</code> is the function <code>S → free_group S</code> that is part of the universal property.</p>",
        "id": 249308932,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628813929
    },
    {
        "content": "<p>The result of <code>free_group.of s</code> is not a free group, it's an element of the free group.  A word of length 1 in particular.</p>",
        "id": 249308961,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628813987
    },
    {
        "content": "<p><code>alt n s t</code> is creating a word of length n that looks like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>t</mi><mi>s</mi><mi>t</mi><mi>s</mi><mi>t</mi><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">ststst\\dots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span> in math.</p>",
        "id": 249309050,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628814060
    },
    {
        "content": "<p>ah so if it's of type <code>free_group S</code> then it is an element? that makes more sense and probably something fundamental i should know...<br>\ni know a bit about free groups and haven't yet studied them rigorously. i've also just been reading the manuals on lean and lack a lot of practice coding with it, though the proofs you gave me are helpful</p>",
        "id": 249309483,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628814557
    },
    {
        "content": "<p>Yeah, <code>free_group S</code> is <em>the</em> free group generated by <code>S</code>.  There's only one group (up to isomorphism) freely generated by <code>S</code>, so it wouldn't be very useful having a whole type of free groups.  Mathlib chooses just one of them (representing elements by words) and calls it <code>free_group S</code>.</p>",
        "id": 249309665,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628814806
    },
    {
        "content": "<p>so then this isn't true for sets right? if something is of type <code>set (free_group S)</code> then it's an element of this set of sets? i vaguely remember reading something about for <code>U : Type</code>, <code>A : set U</code> is a set.</p>",
        "id": 249310553,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628815870
    },
    {
        "content": "<p>an element of <code>set (free_group S)</code> is a subset of the free group</p>",
        "id": 249311353,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628816681
    },
    {
        "content": "<p>in your example, <code>A</code> is a subset of <code>U</code>.  (I'm using \"subset\" like how we mean it in math.  A type <code>U</code> is basically a set, and things with type <code>set U</code> are sets whose elements have type <code>U</code>, or in other words things with type <code>set U</code> are subsets of <code>U</code>.  Don't take this too literally, since <code>example (U : Type) (A : set U) : A ⊆ U := sorry</code> gives a type error -- the subset-of relation is only for subsets of the same type.  <code>set.univ</code> is the name for the subset of <code>U</code> that represents <code>U</code> being a subset of itself, so <code>example (U : Type) (A : set U) : A ⊆ set.univ := sorry</code> resolves that type error.)</p>",
        "id": 249311655,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628816949
    },
    {
        "content": "<p>that makes sense. thanks.</p>",
        "id": 249312081,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628817367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, would you mind trying out your proof above with the now-merged ext lemmas? I don't have a mwe to hand.</p>",
        "id": 249400848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628881919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Nice, those worked great (with a bit of heavy refling):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">braid_group_2_is_cyclic</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span> <span class=\"bp\">≃*</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"n\">monoid_hom.to_mul_equiv</span> <span class=\"n\">braid_group_2_to_mul_ℤ</span> <span class=\"n\">mul_ℤ_to_braid_group_2</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>MWE:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.presented_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_power</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">alt</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">free_group</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">free_group.of</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">alt</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">artin_tits_rels</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">free_group</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">alt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">alt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)}</span>\n\n<span class=\"sd\">/-- Artin-Tits groups.  Traditionally we require that</span>\n<span class=\"sd\">`∀ s t, m s t = m t s` but the hypothesis isn't used in the definition. -/</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">artin_tits</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">presented_group</span> <span class=\"o\">(</span><span class=\"n\">artin_tits_rels</span> <span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">braid_group</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">artin_tits</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">braid_group_2_to_mul_ℤ'</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">multiplicative.of_add</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">braid_group_2_to_mul_ℤ</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span> <span class=\"bp\">→*</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">presented_group.to_group</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">braid_group_2_to_mul_ℤ'</span> <span class=\"n\">_</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">artin_tits_rels</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hr</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul_ℤ_to_braid_group_2</span> <span class=\"o\">:</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→*</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"n\">gpowers_hom</span> <span class=\"o\">(</span><span class=\"n\">braid_group</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">presented_group.of</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">braid_group_2_is_cyclic</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span> <span class=\"bp\">≃*</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"n\">monoid_hom.to_mul_equiv</span> <span class=\"n\">braid_group_2_to_mul_ℤ</span> <span class=\"n\">mul_ℤ_to_braid_group_2</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 249405713,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628884396
    },
    {
        "content": "<p>how do i resolve red underlines for <code>fin_cases</code>?</p>",
        "id": 249407499,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628885297
    },
    {
        "content": "<p><code>import tactic</code>?</p>",
        "id": 249408330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628885662
    },
    {
        "content": "<p>thanks</p>",
        "id": 249408953,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628885992
    },
    {
        "content": "<p>I wonder if <code>ext</code> should know about <code>fin 1</code> too...</p>",
        "id": 249410559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628886751
    },
    {
        "content": "<p>for the line <code>(λ i j, if abs ((i : ℤ) - j) = 1 then 3 else 2)</code> in this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">artin_tits</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">presented_group</span> <span class=\"o\">(</span><span class=\"n\">artin_tits_rels</span> <span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">braid_group</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">artin_tits</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>why do we have <code>i : ℤ</code> if <code>i</code> is also of type <code>fin (n-1)</code>?</p>",
        "id": 249667294,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629162047
    },
    {
        "content": "<p>The <code>(i : ℤ)</code> is casting from <code>fin (n-1)</code> to <code>ℤ</code>, so that the subtraction happens in <code>ℤ</code>, rather than in <code>fin (n-1)</code> (where subtraction means truncated subtraction).</p>",
        "id": 249667633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629162464
    },
    {
        "content": "<p>This is not obviously the ideal way to do this!</p>",
        "id": 249667643,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629162473
    },
    {
        "content": "<p>I wonder if <code>fin n</code> has a <code>dist</code> function (or should have)?</p>",
        "id": 249667691,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629162488
    },
    {
        "content": "<p>what is truncated subtraction?</p>",
        "id": 249668565,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629163509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/braid.20group/near/249667633\">said</a>:</p>\n<blockquote>\n<p>in <code>fin (n-1)</code> (where subtraction means truncated subtraction).</p>\n</blockquote>\n<p>(I'd thought so too, but it seems to be subtraction mod <code>n - 1</code>! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sub\">docs#fin.sub</a>)</p>",
        "id": 249668586,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629163544
    },
    {
        "content": "<p>A subtlety, by the way, with <code>(i : ℤ) - j</code> is that it's actually casting both <code>i</code> and <code>j</code>, so it could also have been written more clearly as <code>(i : ℤ) - (j : ℤ)</code>.  I shouldn't have saved those handful of characters since it makes it less clear.</p>",
        "id": 249668758,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629163705
    },
    {
        "content": "<p>why would we need to cast it here? wouldn't any number in <code>fin (n-1)</code> subtracted by another number from <code>fin (n-1)</code> always be less than <code>fin (n-1)</code>?</p>",
        "id": 249669065,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629164156
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span> <span class=\"mi\">0</span>\n<span class=\"c1\">-- shows 3</span>\n</code></pre></div>",
        "id": 249669125,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629164222
    },
    {
        "content": "<p>oh got it, thanks</p>",
        "id": 249669283,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629164410
    },
    {
        "content": "<p>I'd argue <code>(i - j : ℤ)</code> would be the clearest way to spell the cast</p>",
        "id": 249687427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629185946
    },
    {
        "content": "<p>No, that version is very confusing for beginners.</p>",
        "id": 249691394,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629189340
    },
    {
        "content": "<p>It is very unintuitive for most people that the casts happen as early as possible, rather than \"at the moment indicated by the typography\".</p>",
        "id": 249691545,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629189467
    },
    {
        "content": "<p>The Perl part of Lean.  (It's very reminiscent of scalar/list contexts.)</p>",
        "id": 249692476,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629190255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/braid.20group/near/249691394\">said</a>:</p>\n<blockquote>\n<p>No, that version is very confusing for beginners.</p>\n</blockquote>\n<p>Yes, but if you start preferring the spelling <code>(i : ℤ)- j</code> instead of <code>(i - j : ℤ)</code> to make things \"easier\" for beginners, you've given those beginners exactly the wrong intuition as to how to read casts, and the non-intuitiveness is self-fulfilling. I guess the way to avoid that while also not confusing beginners is <code>(↑i - ↑j : ℤ)</code>, which reads as <code>(_ : ℤ)</code> (\"lean I am telling you an integer\") and <code>↑i</code> (\"do a cast for me\").</p>",
        "id": 249694086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629191413
    },
    {
        "content": "<p>i am getting an error here:<br>\n<a href=\"/user_uploads/3121/AQN46v9Ce7wrV7K36XcvuOsR/image.png\">image.png</a> <br>\nthis is the message:<br>\n<a href=\"/user_uploads/3121/rjCE48X78F4nRRP8TwEluTrN/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AQN46v9Ce7wrV7K36XcvuOsR/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/AQN46v9Ce7wrV7K36XcvuOsR/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/rjCE48X78F4nRRP8TwEluTrN/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/rjCE48X78F4nRRP8TwEluTrN/image.png\"></a></div>",
        "id": 249927653,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629332397
    },
    {
        "content": "<p>these are my imports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.presented_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.free_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.mul_add</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_power</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 249927716,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629332429
    },
    {
        "content": "<p>It says it can't prove that <code>braid_group 2</code> is finite. I don't know much about braid groups but considering that you are trying to prove it's isomorphic to <code>multiplicative int</code> I would guess this is false</p>",
        "id": 249927859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629332548
    },
    {
        "content": "<p>I see you picked this theorem from up-thread. I guess <code>ext</code> is finding the wrong extensionality lemma - there is probably an extensionality lemma saying that functions out of <code>braid_group 2</code> are determined by their values on <code>x : fin 2</code> but you are getting a more generic <code>ext</code> lemma</p>",
        "id": 249928012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629332748
    },
    {
        "content": "<p>Perhaps the ext lemma isn't matching because Holly's <code>braid_group</code> isn't an abbreviation like the one upthread</p>",
        "id": 249928998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629333773
    },
    {
        "content": "<p>(who can say without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>)</p>",
        "id": 249929012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629333791
    },
    {
        "content": "<p>The braid group is not finite.</p>",
        "id": 249930930,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629336000
    },
    {
        "content": "<p>ah ok. how do i add the updated <code>ext</code> to the mathlib version on my desktop?</p>",
        "id": 250047000,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629406152
    },
    {
        "content": "<p>(For those who missed it, the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is in the spoiler tag upthread at <a href=\"#narrow/stream/113489-new-members/topic/braid.20group/near/249405713\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/braid.20group/near/249405713</a> and the reason <code>fin_cases</code> isn't working is because <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> added some new <code>ext</code> lemmas.)</p>",
        "id": 250049571,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629407383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"418958\">@Holly Liu</span> How is your project set up? Are you editing inside mathlib itself (that's what I normally do) or do you have a separate project that just uses mathlib?</p>",
        "id": 250049723,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629407442
    },
    {
        "content": "<p>If it's the second, I think <code>leanproject up</code> (short for <code>leanproject upgrade-mathlib</code>) will update mathlib.</p>",
        "id": 250050539,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629407784
    },
    {
        "content": "<p>Wait, did I break it?</p>",
        "id": 250051889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629408591
    },
    {
        "content": "<p>No, the <code>fin_cases</code> that doesn't work is because it relies on your <code>ext</code> lemmas, and <span class=\"user-mention\" data-user-id=\"418958\">@Holly Liu</span> hasn't updated mathlib. (You only broke it if somehow you're Merlin-like, living backwards in time.)</p>",
        "id": 250052178,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629408759
    },
    {
        "content": "<p>i am still getting the error after doing <code>leanproject up</code>. maybe i should just copy paste the lemma into the file, or try editing inside mathlib itself?</p>",
        "id": 250058082,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629412917
    },
    {
        "content": "<p>hello again. i am trying to prove the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Every 2-braid can be written in the form `σ₁^n` for some integer `n`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">n_form</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>i'm trying to say <code>0^n</code> is a type of <code>braid_group 2</code>, however i'm not able to declare the generator <code>0</code>. i get the error <code>invalid binder, identifier expected</code>. how do i go about this?</p>",
        "id": 250141085,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629477092
    },
    {
        "content": "<p>i think the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is upthread in the spoiler tag, as mentioned before</p>",
        "id": 250141189,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629477131
    },
    {
        "content": "<p>Your statement is nonsensical to me; do you understand how <code>:</code> works in a lemma statement? In particular, everything before the colon should be of the form <code>(name : type)</code> or similar. Lean is complaining that <code>0</code> is not a name.</p>",
        "id": 250142788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629477992
    },
    {
        "content": "<p>oh ok i see. is there a way to declare just the element <code>0</code> of <code>braid_group 2</code>?</p>",
        "id": 250143546,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629478401
    },
    {
        "content": "<p>It depends what you mean by declare. You can maybe write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">another_spelling_of_zero</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 250143677,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629478457
    },
    {
        "content": "<p><code>(0 : braid_group 2)^n</code> would be a way to use <code>0</code> in <code>braid_group 2</code> (though it doesn't have <code>0</code>)</p>",
        "id": 250143704,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629478480
    },
    {
        "content": "<p>Maybe you mean this <code>0</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">σ₁</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">presented_group.of</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 250143751,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629478514
    },
    {
        "content": "<p>oh yes i think that's the one i meant.</p>",
        "id": 250143911,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629478595
    },
    {
        "content": "<p>And maybe you mean this lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">σ₁</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">presented_group.of</span> <span class=\"mi\">0</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Every 2-braid can be written in the form `σ₁^n` for some integer `n`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">n_form</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">σ₁</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">braid_group_2_is_cyclic</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 250143915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629478599
    },
    {
        "content": "<p>what is the <code>(braid_group_2_is_cyclic x).to_add</code> doing?</p>",
        "id": 250144459,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629478845
    },
    {
        "content": "<p>This proof that the braid group was equivalent to the infinite cyclic group was much stronger than just saying they're equivalent -- it is an explicit isomorphism between them.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">braid_group_2_is_cyclic</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span> <span class=\"bp\">≃*</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span>\n</code></pre></div>\n<p>So <code>braid_group_2_is_cyclic x</code> gives the image of <code>x</code> in the cyclic group.  If you convert that element to <code>ℤ</code> (using <code>to_add</code>) you get the power you need to construct <code>x</code> from the generator.</p>\n<p>The proof of <code>n_form</code> should probably be one line, but I'm not sure what that one line is.</p>",
        "id": 250144830,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629479032
    },
    {
        "content": "<p>ok i think i understand. thanks!</p>",
        "id": 250145441,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629479351
    },
    {
        "content": "<p>Probably you want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/gpowers_hom\">docs#gpowers_hom</a> to make it an equality of monoid_homs, then use <code>ext</code></p>",
        "id": 250148312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629480788
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 250148529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629480882
    },
    {
        "content": "<p>Oh, the proof will just be <code>braid_group_2_is_cyclic.apply_symm_apply x</code> or <code>braid_group_2_is_cyclic.symm_apply_apply x</code></p>",
        "id": 250148765,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629480977
    },
    {
        "content": "<p>tada:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">n_form</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">σ₁</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">braid_group_2_is_cyclic</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">braid_group_2_is_cyclic.symm_apply_apply</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 250149105,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629481139
    },
    {
        "content": "<p><del>is it using the <code>mul_equiv.symm_apply_apply</code> or the <code>equiv.symm_apply_apply</code>? or does it matter</del> nvm</p>",
        "id": 250150919,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629481999
    },
    {
        "content": "<p>i seem to be getting errors with the above code:<br>\n<a href=\"/user_uploads/3121/c5RyH6Zj5NjUX0VFY2HmHPDC/image.png\">image.png</a> <br>\nthese are the messages:<br>\n<a href=\"/user_uploads/3121/rkcZFIXnyt7eQk0VRtBJLUty/image.png\">image.png</a> <br>\ni wonder if this is because a part of the proof in <code>braid_group_2_is_cyclic</code> is not working in my project?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/c5RyH6Zj5NjUX0VFY2HmHPDC/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/c5RyH6Zj5NjUX0VFY2HmHPDC/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/rkcZFIXnyt7eQk0VRtBJLUty/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/rkcZFIXnyt7eQk0VRtBJLUty/image.png\"></a></div>",
        "id": 250163599,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629488431
    },
    {
        "content": "<p>Either remove the begin/end or put <code>exact</code> at the beginning of that line.</p>",
        "id": 250164847,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629489142
    },
    {
        "content": "<p>The one-line proof is a \"term-mode\" proof</p>",
        "id": 250164892,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629489179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/braid.20group/near/250149105\">said</a>:</p>\n<blockquote>\n<p>tada:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">n_form</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">σ₁</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">braid_group_2_is_cyclic</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">braid_group_2_is_cyclic.symm_apply_apply</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>what is <code>braid_group_2_is_cyclic.symm_apply_apply x</code> doing?</p>",
        "id": 250234140,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629575685
    },
    {
        "content": "<p>Have you followed the definition for <code>symm_apply_apply</code> yet?</p>",
        "id": 250235104,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629577062
    },
    {
        "content": "<p>i think it is saying perform <code>braid_group_2_is_cyclic.symm : multiplicative ℤ ≃* braid_group 2 </code> then map <code>x : braid_group 2</code> to it's corresponding element in <code>multiplicative ℤ</code> then map that back to <code>braid_group_2_is_cyclic.symm</code> to get <code>x</code> again?</p>",
        "id": 250235937,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629578316
    },
    {
        "content": "<p>essentially i think it's saying <code>for sets M,N, M ≃* N → N ≃* M, N(M(x)) = x</code> and then you flip it to get <code>x = N(M(x)) </code>. if this is correct, i'm a bit confused about how this is of type <code>x = 0 * 0 * ... * 0</code>.</p>",
        "id": 250237805,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629581032
    }
]