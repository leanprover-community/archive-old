[
    {
        "content": "<p>I think this is what it's telling me to do.</p>",
        "id": 225890951,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612984061
    },
    {
        "content": "<p>Hi everyone! I don't know if I'll be here much but I just started out on the intro exercises.</p>",
        "id": 225891162,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612984140
    },
    {
        "content": "<p>in multiplication world, the text casually introduces \"repeat\" and \"rwa\" but doesn't define them, and they aren't listed in the existing \"tactics\". Repeat seems obvious, but what does rwa do?</p>",
        "id": 225891564,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612984296
    },
    {
        "content": "<p><strong>r</strong>e<strong>w</strong>rite then <strong>a</strong>ssumption</p>",
        "id": 225891821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612984397
    },
    {
        "content": "<p>that is, it does the same as <code>rw [...]</code> but tries to match the result of the goal after rewriting to something in the context</p>",
        "id": 225892055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612984484
    },
    {
        "content": "<p>oh, so like \"rewrite then check if i'm done\"</p>",
        "id": 225892166,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612984533
    },
    {
        "content": "<p>Cheers Mario. Also, when using rw, is there a way to specify the operand? Like, if I do rw \\l one_mul d, it changes all instances of d to 1 * d, which isn't useful when I was gonna use that to factorise into a multiplication. Maybe I want just, say, the 4th instance of d to be rw'd.</p>",
        "id": 225892902,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612984832
    },
    {
        "content": "<p><code>nth_rewrite</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#nth_rewrite%20/%20nth_rewrite_lhs%20/%20nth_rewrite_rhs\">https://leanprover-community.github.io/mathlib_docs/tactics.html#nth_rewrite%20/%20nth_rewrite_lhs%20/%20nth_rewrite_rhs</a></p>",
        "id": 225893110,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1612984922
    },
    {
        "content": "<p>I'm not sure <code>nth_rewrite</code> works in the natural number game. It uses a modified tactic monad</p>",
        "id": 225893453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612985052
    },
    {
        "content": "<p>can confirm it doesn't</p>",
        "id": 225893612,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612985117
    },
    {
        "content": "<p>you can also use <code>conv</code>, although that might not work for the same reason</p>",
        "id": 225893666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612985144
    },
    {
        "content": "<p>but surprisingly often you can get away with not doing this by rewriting the other side of the equation or something along those lines</p>",
        "id": 225893774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612985176
    },
    {
        "content": "<p>yeah i got round it last time by multiplying out instead of factoring</p>",
        "id": 225893867,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612985221
    },
    {
        "content": "<p>Does the <code>occs</code> option work? For examples, see e.g. <a href=\"#narrow/stream/113489-new-members/topic/rewrite.20in.20one.20location.20only\">this thread</a>.</p>",
        "id": 225893937,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612985252
    },
    {
        "content": "<p><code>unknown identifier 'occurences.pos'</code></p>",
        "id": 225894079,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1612985307
    },
    {
        "content": "<p>it's probably in a namespace</p>",
        "id": 225894172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612985358
    },
    {
        "content": "<p>But you can certainly avoid doing this in NNG</p>",
        "id": 225894238,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1612985391
    },
    {
        "content": "<p>If only because people finish it :)</p>",
        "id": 225894254,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1612985399
    },
    {
        "content": "<p><code>occurrences.pos</code> is not in a namespace...</p>",
        "id": 225894327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612985426
    },
    {
        "content": "<p>same problem again, I have (after some manipulation):</p>\n<p>case mynat.succ<br>\na t d : mynat,<br>\nhd : (a + d) * t = a * t + d * t<br>\n‚ä¢ (d + a) * t + t = a * t + (d + 1) * t</p>\n<p>and I can't insert the inductive hypothesis because add_comm goes for the outer addition instead of the ( d + a ) that i want it to replace.</p>",
        "id": 225894343,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612985437
    },
    {
        "content": "<p><code>rw [add_comm d a, hd]</code></p>",
        "id": 225894402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612985463
    },
    {
        "content": "<p>can you walk me through the syntax there v briefly?</p>",
        "id": 225894457,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612985495
    },
    {
        "content": "<p>rewrite with  <code>add_comm d a</code>, then rewrite <code>hd</code></p>",
        "id": 225894502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612985512
    },
    {
        "content": "<p>maybe NNG uses <code>rw add_comm d a, rw hd</code></p>",
        "id": 225894587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612985531
    },
    {
        "content": "<p>I'm with ya, cheers</p>",
        "id": 225894624,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612985544
    },
    {
        "content": "<p>the point being that you can substitute into a lemma before the actual rewrite to limit the matching occurrences</p>",
        "id": 225894682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612985576
    },
    {
        "content": "<p>in NNG, if I finish by typing \"simp\" because it's equal up to addition order, it doesn't close out the exercise :-S</p>",
        "id": 225895061,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612985756
    },
    {
        "content": "<p>at what goal?</p>",
        "id": 225895148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612985780
    },
    {
        "content": "<p>you might need <code>simp [add_comm]</code> if it's not a simp lemma</p>",
        "id": 225895175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612985793
    },
    {
        "content": "<p>mysterious</p>",
        "id": 225895256,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612985832
    },
    {
        "content": "<p>just finishing up multiplication world</p>",
        "id": 225895288,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612985849
    },
    {
        "content": "<p><code>simp</code> only uses the lemmas that are given to it, plus lemmas that are marked as simp lemmas. In this case <code>add_comm</code> is not a simp lemma so you have to provide it explicitly if you want it to be used</p>",
        "id": 225895382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612985884
    },
    {
        "content": "<p>ok that makes some sense, cheers for the help!</p>",
        "id": 225895504,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612985958
    },
    {
        "content": "<p>oof done this twice now, repeat { blah } causes infinite loop and lean locks up - any way to help it unstuck?</p>",
        "id": 225896721,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612986455
    },
    {
        "content": "<p>NNG doesn't handle lean timeouts very well, I think you have to reload the page</p>",
        "id": 225897464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612986827
    },
    {
        "content": "<p><code>repeat { tac }</code> repeats <code>tac</code> until it fails, so if you use it with something that always succeeds (like <code>repeat { rw add_comm }</code> which will rewrite <code>a + b</code> to <code>b + a</code> and back) then it will just run forever</p>",
        "id": 225897608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612986885
    },
    {
        "content": "<p>there is a variation on <code>repeat</code> that only runs a fixed number of times, <code>iterate n</code></p>",
        "id": 225897648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612986906
    },
    {
        "content": "<p>so if you have a type (uppercaseletter), is intro (lowercaseletter) always assumed to be of the type matching the letter?</p>",
        "id": 225903045,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612989190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"388717\">@Ron Stampler</span> Nope, there is no relation at all</p>",
        "id": 225903457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612989358
    },
    {
        "content": "<p>You can have types whose name is lowercase and terms whose name is uppercase</p>",
        "id": 225903531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612989375
    },
    {
        "content": "<p>Nothing needs to match</p>",
        "id": 225903550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612989382
    },
    {
        "content": "<p>But of course it can be helpful to use such conventions</p>",
        "id": 225903612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612989407
    },
    {
        "content": "<p>not even the letters? like type U, intro blep is fine?</p>",
        "id": 225903643,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612989420
    },
    {
        "content": "<p>People will be confused if we <code>a : B</code> and <code>x : C</code> and <code>b : X</code> and <code>c : A</code></p>",
        "id": 225903684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612989437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"388717\">@Ron Stampler</span> If you want you can have <code>qUuX : fO___baR</code></p>",
        "id": 225903754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612989472
    },
    {
        "content": "<p>aye and confusion isn't our game - but I'm trying to get my head around function world. you type intro this and exact f(this) and it's like... how did it know that this : T, or whatever</p>",
        "id": 225903836,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612989495
    },
    {
        "content": "<p>You can use a number of unicode symbols even</p>",
        "id": 225903848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612989497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"388717\">Ron Stampler</span> <a href=\"#narrow/stream/113489-new-members/topic/specific.20qs.20on.20intro.20exercises/near/225903836\">said</a>:</p>\n<blockquote>\n<p>and it's like... how did it know that this : T, or whatever</p>\n</blockquote>\n<p>keyword: type inference</p>",
        "id": 225903899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612989523
    },
    {
        "content": "<p>Lean remembers a lot of things behind the scenes</p>",
        "id": 225903936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612989541
    },
    {
        "content": "<p>but if you don't give it a type or anything, it's just like <em>shrug</em> that's fine</p>",
        "id": 225903995,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612989570
    },
    {
        "content": "<p>The types are always there, but they might not be displayed.</p>",
        "id": 225904131,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612989630
    },
    {
        "content": "<p>and if there's a number of possibilities, it doesn't worry about it until it can infer it, or?</p>",
        "id": 225904379,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612989744
    },
    {
        "content": "<p>\"Whatever the sets P and Q and R are, we make an element of  Hom(Hom(P,Hom(Q,R)),Hom(Hom(P,Q),Hom(P,R)))\" ... why do I have to perform mental acrobatics? :-S</p>",
        "id": 225904734,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612989905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"388717\">Ron Stampler</span> <a href=\"#narrow/stream/113489-new-members/topic/specific.20qs.20on.20intro.20exercises/near/225903836\">said</a>:</p>\n<blockquote>\n<p>aye and confusion isn't our game - but I'm trying to get my head around function world. you type intro this and exact f(this) and it's like... how did it know that this : T, or whatever</p>\n</blockquote>\n<p>When you use <code>intro this</code>, the goal will be <code>\\forall x: T, p x</code> or something like that, and so lean knows the type that <code>this</code> is supposed to have, it's the type in the forall</p>",
        "id": 225905132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612990061
    },
    {
        "content": "<p>That also applies if the goal is an implication; if the goal is <code>T -&gt; U</code> and you <code>intro x</code> then <code>x</code> will have type <code>T</code></p>",
        "id": 225905303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612990128
    },
    {
        "content": "<p>thanks for the explanation, that makes it clear</p>",
        "id": 225905364,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612990156
    },
    {
        "content": "<p>I'm a bit baffled that, when learning what amounts to a new language, someone thought one of the intro exercises should be a twisted sentence like this one...</p>",
        "id": 225905449,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612990194
    },
    {
        "content": "<p>There aren't really a \"number of possibilities\" except in very rare cases. Usually it's a sort of continuous family of possibilities represented by a type with a metavariable in it (which looks like <code>?m_1</code> in printing)</p>",
        "id": 225905468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612990202
    },
    {
        "content": "<p>What's the exercise?</p>",
        "id": 225905556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612990220
    },
    {
        "content": "<p>the one I just copied and pasted, it's function world 6</p>",
        "id": 225905608,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612990241
    },
    {
        "content": "<p>well if you don't worry about how type inference works and just use it it's just type tetris</p>",
        "id": 225905670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612990274
    },
    {
        "content": "<p>there's really only one thing to do at every stage</p>",
        "id": 225905752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612990315
    },
    {
        "content": "<p>My vague memory was that the \"Hom(Hom(...\" sentence was a joke...</p>",
        "id": 225905877,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612990366
    },
    {
        "content": "<p>still trying to get head round the notation, exercise is like \"here's a tongue twister in it\"... I can see why someone already versed in the language might think that funny...</p>",
        "id": 225906029,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612990432
    },
    {
        "content": "<p>that theorem is certainly a lot easier to read with arrows instead of Hom</p>",
        "id": 225906169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612990470
    },
    {
        "content": "<p>I guess it illustrates that lean will be more clear than the person writing the exercise, but I think that exercise a poor choice for a language learner.</p>",
        "id": 225908058,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612991276
    },
    {
        "content": "<p>or maybe I'm missing the point altogether</p>",
        "id": 225908224,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612991337
    },
    {
        "content": "<p>The point is to prove <code>(A -&gt; B -&gt; C) -&gt; ((A -&gt; B) -&gt; (A -&gt; C))</code> by intro and apply</p>",
        "id": 225908488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612991450
    },
    {
        "content": "<p>I'm not sure whether you are confused about how to do this</p>",
        "id": 225908563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612991486
    },
    {
        "content": "<p>no i did the exercise, forgive me, I whinge too much</p>",
        "id": 225908615,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612991507
    },
    {
        "content": "<p>Do you think that the task you performed was too difficult to figure out? Proving that is all that is being asked. The <code>hom</code> stuff is just trolling</p>",
        "id": 225909012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612991696
    },
    {
        "content": "<p>NNG will teach you how to get a sort of operational understanding of lean but it doesn't dwell on the fundamentals very much, so all the tactics and stuff are just pulled out of a hat</p>",
        "id": 225909217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612991780
    },
    {
        "content": "<p>if you want to learn about dependent type theory and foundations, <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> is a better choice</p>",
        "id": 225909252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612991804
    },
    {
        "content": "<p>specifically chapter 2</p>",
        "id": 225909422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612991883
    },
    {
        "content": "<p>what is the etymology behind the term \"exact\"?</p>",
        "id": 225926945,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1612998998
    },
    {
        "content": "<p>in NNG, level 4 of advanced proposition world, shouldn't the statement of iff_trans be (P ‚Üî Q)‚àß(Q ‚Üî R) ‚Üí (P ‚Üî R)? The statement there might be logically equivalent, but...</p>",
        "id": 225931277,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1613001551
    },
    {
        "content": "<p>The fact that they're \"logically equivalent\" is a lemma to be proved (maybe already proved in NNG by that point?).</p>",
        "id": 225931429,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613001638
    },
    {
        "content": "<p>But I think <code>iff_trans</code> is easier to use in the <code>(P ‚Üî Q)‚Üí(Q ‚Üî R) ‚Üí (P ‚Üî R)</code> case in Lean because:</p>",
        "id": 225931469,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613001667
    },
    {
        "content": "<p>If I have <code>h1 : (P ‚Üî Q)</code> and <code>h2 : (Q ‚Üî R)</code> then <code>h1.trans h2 = (P ‚Üî R)</code></p>",
        "id": 225931506,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613001707
    },
    {
        "content": "<p>If you have a <code>lemma iff.trans : (P ‚Üî Q) ‚Üí (Q ‚Üî R) ‚Üí (P ‚Üî R) := sorry</code></p>",
        "id": 225931568,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613001736
    },
    {
        "content": "<p>otherwise, you'd have to construct the <code>and</code> term</p>",
        "id": 225931580,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613001747
    },
    {
        "content": "<p>yeah that's good justification for the definition, but the statement presupposes the result, as it were</p>",
        "id": 225931590,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1613001759
    },
    {
        "content": "<p>as a point of order, you're right : it was the previous exercise.</p>",
        "id": 225931604,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1613001776
    },
    {
        "content": "<p>You're just so deeply familiar with logic and the laws that things you've internalized seem to obviously true</p>",
        "id": 225931652,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613001800
    },
    {
        "content": "<p>you write inline code in here... is that in the latex markup?</p>",
        "id": 225931820,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1613001889
    },
    {
        "content": "<p>Just using <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 225931978,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613001988
    },
    {
        "content": "<p>In fact, Lean knows the following about propositions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚Üî</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">=</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 225932003,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613002011
    },
    {
        "content": "<p>That is, <code>‚Üî</code> can substituted precisely for <code>=</code>! So then, of course <code>iff.trans</code> is true, because <code>eq.trans</code> is true; and <code>eq.trans</code> is true because equalities allow for substitution, which is axiomatic by how they're defined.</p>",
        "id": 225932351,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613002287
    },
    {
        "content": "<p>Now, if you check the proof for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚Üî</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">=</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>you'll see it doesn't actually use <code>eq.trans</code>, but still uses equality substitution in one place, and another axiom of propositional extensionality in another place.</p>",
        "id": 225932441,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613002335
    },
    {
        "content": "<p>By the way, this is basically the logical version of <a href=\"https://en.wikipedia.org/wiki/Currying\">currying</a></p>",
        "id": 225933664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613003337
    },
    {
        "content": "<p>it's more convenient to work with iterated implication in functional languages than tuples</p>",
        "id": 225933685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613003355
    },
    {
        "content": "<p>I've been going crazy for hours upon hours with Advanced Multiplication level 4, help!  I got as far as <br>\nhd : a * succ b = a * d ‚Üí succ b = d<br>\nbut the goal is this with succ d instead of d.</p>",
        "id": 225938277,
        "sender_full_name": "PsyMar#2210",
        "timestamp": 1613007289
    },
    {
        "content": "<p>I think I've spent longer on this problem than every other problem combined.</p>",
        "id": 225938288,
        "sender_full_name": "PsyMar#2210",
        "timestamp": 1613007308
    },
    {
        "content": "<p>The boss level! Of course, with that goal and hypothesis combo, it isn't solvable. You took a wrong turn somewhere. What's your current tactic sequence?</p>",
        "id": 225939117,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613008086
    },
    {
        "content": "<p>I don't like it but I finished Advanced Addition 5 with \"exact hs(succ_inj(h)),\" ... is there a better way? I want to say, like, \"apply succ_inj at h\" but it doesn't let me.</p>",
        "id": 225939727,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1613008689
    },
    {
        "content": "<p>full text: intro h,<br>\ninduction t with s hs,<br>\nrw add_zero at h,<br>\nrw add_zero at h,<br>\nexact h,<br>\nrw succ_eq_add_one at h,<br>\nrw ‚Üê add_assoc at h,<br>\nrw ‚Üê add_assoc at h,<br>\nrw ‚Üê succ_eq_add_one at h,<br>\nrw ‚Üê succ_eq_add_one at h,<br>\nexact hs(succ_inj(h)),</p>",
        "id": 225939789,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1613008763
    },
    {
        "content": "<p>you can say <code>apply hs, apply succ_inj, exact h</code> if you want to replicate the behavior of <code>exact hs (succ_inj h)</code></p>",
        "id": 225940236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613009143
    },
    {
        "content": "<p>If you want to work forward by applying <code>succ_inj</code> on <code>h</code> you can say <code>have h := succ_inj h</code></p>",
        "id": 225940323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613009204
    },
    {
        "content": "<p>You're doing a lot of forward reasoning -- modifying your hypothesis to try to get it to match the goal. Lean and mathlib also like to do reverse reasoning -- modifying the goal to match the hypotheses you have.</p>",
        "id": 225940325,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613009206
    },
    {
        "content": "<p>re: forward reasoning, in this instance use of \"at h\" was encouraged by the example text, I guess I went all-in.</p>",
        "id": 225940418,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1613009298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/specific.20qs.20on.20intro.20exercises/near/225940323\">said</a>:</p>\n<blockquote>\n<p>If you want to work forward by applying <code>succ_inj</code> on <code>h</code> you can say <code>have h := succ_inj h</code></p>\n</blockquote>\n<p>yeah i think this is what I want, h isn't replaced, it's a way of saying a consequence of h is succ_inj(h) and keeping that around.</p>",
        "id": 225940533,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1613009405
    },
    {
        "content": "<p>Totally. And it's valid, as you can see you have a proof. Reverse reasoning ends up being shorter syntactically, since you will likely have fewer <code>rw ‚Üê</code> and more <code>rw</code> and fewer <code>at h</code>. Of course, sometimes you do have to rewrite at a hypothesis.</p>",
        "id": 225940556,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613009428
    },
    {
        "content": "<p>obviously I'm very early on but are there \"proof simplifiers\"? Like, tactics that look at proofs and say \"this contradiction unnecessary, this reasoning backwards\" etc and pump out a neater version of a proof?</p>",
        "id": 225940601,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1613009488
    },
    {
        "content": "<p>maybe half the point of this project is that the nuance isn't important, in the face of a method like \"cc\" or \"simp\" the details may be irrelevant</p>",
        "id": 225940681,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1613009566
    },
    {
        "content": "<p>There are, of different kinds. If you know what some collection of lemmas will solve the goal, but you don't care to think about their order, <code>simp [lemma3, lemma1, lemma2]</code> will still work. Some tactics are just to solve specific types of goals, like <code>linarith</code> for inequalities, <code>ring</code> for statements that have to do with associativity, commutativity, and distributivity of rings, <code>norm_num</code> to deal with statements about numerals...</p>",
        "id": 225940705,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613009597
    },
    {
        "content": "<p>We now also have <code>lean-gptf</code> which is scouring the library and reducing proofs using a ML based method</p>",
        "id": 225940722,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613009623
    },
    {
        "content": "<p>Yeah, the exact order of the tactic steps to prove why <code>matrix.det ![![a, b], ![c, d]] = a * d - b * c</code> aren't that interesting.</p>",
        "id": 225940829,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613009726
    },
    {
        "content": "<p>I feel like... if I had this machinery as an undergrad, I could have proved stuff a lot quicker but understood it a lot less. Would that have been a good thing or a bad thing? Nobody counts on their fingers any more, nobody does multiplication on paper, and you don't even have to differentiate functions any more - mathematica or whatever can do it all for you. Is this the next step of reducing once complicated stuff to mere footnotes? I'm daunted.</p>",
        "id": 225940917,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1613009766
    },
    {
        "content": "<p>When Mathematica can't, for some reason, differentiate a function for you, or when you are trying to explain why swapping the order of rotations of a Rubick's cube aren't equivalent, what will you do then? When a proof in Lean breaks, how will you know how to fix it?</p>",
        "id": 225941056,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613009889
    },
    {
        "content": "<p>and, after all, bits <em>do</em> flip occasionally...</p>",
        "id": 225941181,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1613010011
    },
    {
        "content": "<p>Additionally, some material in mathlib is at such a high level of generalization that it might not always be accessible why something is true, because it's using a level of theory deeper than one's understanding. In principle I know epsilon-delta analysis works. But I don't know filters, which is what mathlib uses and which are more powerful.</p>",
        "id": 225941303,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613010202
    },
    {
        "content": "<p>when one area of maths retires another, will lean automatically spot a library as superfluous?</p>",
        "id": 225941729,
        "sender_full_name": "Ron Stampler",
        "timestamp": 1613010611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"388717\">Ron Stampler</span> <a href=\"#narrow/stream/113489-new-members/topic/specific.20qs.20on.20intro.20exercises/near/225940917\">said</a>:</p>\n<blockquote>\n<p>I feel like... if I had this machinery as an undergrad, I could have proved stuff a lot quicker but understood it a lot less. Would that have been a good thing or a bad thing? Nobody counts on their fingers any more, nobody does multiplication on paper, and you don't even have to differentiate functions any more - mathematica or whatever can do it all for you. Is this the next step of reducing once complicated stuff to mere footnotes? I'm daunted.</p>\n</blockquote>\n<p>This post reminds me of a previous discussion near the beginning of <a href=\"#narrow/stream/113489-new-members/topic/example.20.3A.20.C2.AC.20%28.E2.88.80.20x.2C.20.C2.AC.20p.20x%29.20.E2.86.92.20%28.E2.88.83.20x.2C.20p.20x%29/near/179814351\">this thread</a>.</p>",
        "id": 225942217,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613011181
    }
]