[
    {
        "content": "<p>Hi, i've seen a few <a href=\"#narrow/stream/270676-lean4/topic/Treating.20.60Float.60.20as.20reals.2C.20inconsistent.3F\">topics</a> recently talking about possibly making code on reals runnable and give back floats, but as far as I understand, this is not possible in general, unless working on computable numbers, something that, to my knowledge, isn't yet present in mathlib. If one was to implement an API for computable numbers over reals (showing it's a subfield of R, stable through basic functions like exp and log,...), would this be enough to have \"runnable\" code for the most common equations we use day to day ?</p>",
        "id": 266659575,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1641197007
    },
    {
        "content": "<p>Yes there are many nice subsets of computable real numbers which contain commonly used functions, see for instance <a href=\"https://fredrikj.net/math/ejcim2020_joh_en.pdf\">https://fredrikj.net/math/ejcim2020_joh_en.pdf</a>, having such a thing in lean would be really cool. The most similar things we have already are the linarith and norm_num tactics, which while tactics do normalize certain expressions in real fields, but are not runnable code in the sense of a definition of a type for which lean generates the code</p>",
        "id": 266668690,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641203826
    },
    {
        "content": "<p>It is possible to make code runnable on floats but prove things about it for reals. See bottom of</p>\n<p><a href=\"#narrow/stream/113489-new-members/topic/Patrick.20Johnstone.20.28mathematical.20optimizer.29\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Patrick.20Johnstone.20.28mathematical.20optimizer.29</a></p>\n<p>where we figure out you can just define the function polymorphically to run on both real and float data types. If you run it with floats your proofs don't mean anything but it will run.</p>",
        "id": 266707260,
        "sender_full_name": "Patrick Johnstone",
        "timestamp": 1641228319
    },
    {
        "content": "<p>This is interesting, thanks for the link <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> . I was more interested in the subject of approximating reals themselves with an arbitrary precision, rather than interpreting  functions over reals as functions over floats,  sorry for the bad wording of my question. I'd be very interested on working on computable numbers in Lean, but i do not know if this would be of any interest for mathlib, hence this post.</p>",
        "id": 266729629,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1641239553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Real.20to.20Float.20and.20computable.20numbers/near/266668690\">said</a>:</p>\n<blockquote>\n<p>Yes there are many nice subsets of computable real numbers which contain commonly used functions, see for instance <a href=\"https://fredrikj.net/math/ejcim2020_joh_en.pdf\">https://fredrikj.net/math/ejcim2020_joh_en.pdf</a>, having such a thing in lean would be really cool. The most similar things we have already are the linarith and norm_num tactics, which while tactics do normalize certain expressions in real fields, but are not runnable code in the sense of a definition of a type for which lean generates the code</p>\n</blockquote>\n<p>I'll look into this document in more details in the following days, thanks a lot for the link <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 266730166,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1641239906
    },
    {
        "content": "<p>You might also be interested in work of Krebbers and Spitters who implemented exact reals in Coq, such as <a href=\"https://arxiv.org/abs/1106.3448\">https://arxiv.org/abs/1106.3448</a>, which is part of <a href=\"https://github.com/coq-community/corn\">https://github.com/coq-community/corn</a></p>",
        "id": 266732497,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641241279
    },
    {
        "content": "<p>We have also done a few abstract real computations in mathlib in ad-hoc fashion, for example to prove high precision estimates on <code>e</code> and <code>pi</code>. The method depends on the particular real number to approximate but it ultimately boils down to some computations on natural numbers that can be proven by <code>norm_num</code></p>",
        "id": 266765521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641266957
    }
]