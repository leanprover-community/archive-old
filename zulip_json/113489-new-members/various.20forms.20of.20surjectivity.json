[
    {
        "content": "<p>I am looking for the 'canonical proof' of the following lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_of_range_eq_top</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">linear_map.range</span> <span class=\"o\">(</span><span class=\"n\">of_le</span> <span class=\"n\">hAB</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>\n</code></pre></div>\n<p>This should best be proven from a lemma like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_of_im_inc_eq_top</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">image</span> <span class=\"o\">(</span> <span class=\"n\">inclusion</span> <span class=\"n\">hab</span> <span class=\"o\">)</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>\n</code></pre></div>\n<p>where we might use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">range_eq_top_iff_surj</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span>\n</code></pre></div>\n<ul>\n<li>First of all I have trouble finding any of these lemmas in mathlib, but I would not be surprised if the latter two exist.</li>\n<li>Secondly, I have a proof for all three lemmas which to me seem longer than they should be. Maybe you have some suggestions if the lemma does not exist in mathlib already. For example</li>\n</ul>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_of_im_inc_eq_top</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">image</span> <span class=\"o\">(</span> <span class=\"n\">inclusion</span> <span class=\"n\">hab</span> <span class=\"o\">)</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">le_top</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span> <span class=\"o\">{</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">⟩,</span>\n      <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">inclusion_self</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">range_eq_top_iff_surj</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">y'</span> <span class=\"o\">:</span> <span class=\"n\">coe_sort</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">y'</span> <span class=\"k\">with</span> <span class=\"n\">x'</span> <span class=\"n\">hx'</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">y'.1</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hx'</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>\n<ul>\n<li>Lastly, I wonder if there is an easy way to prove the first lemma from the second. It feels like this should be trivial, but I keep having to reduce to sets and coercion.</li>\n</ul>",
        "id": 305367480,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1666362257
    },
    {
        "content": "<p>For the last one there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.image_univ\">docs#set.image_univ</a> and function.surjective.range_eq. Maybe you didn't find them because you were looking for ⊤ instead of the usual spelling (\"simp normal form\") <code>set.univ</code>.</p>",
        "id": 305376826,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666364980
    },
    {
        "content": "<p>For the second one, here is a pure rewrite proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_of_im_inc_eq_top</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">hab</span><span class=\"o\">)</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_iff_subset</span> <span class=\"n\">at</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">top_eq_univ</span><span class=\"o\">,</span> <span class=\"n\">image_univ</span><span class=\"o\">,</span> <span class=\"n\">range_inclusion</span><span class=\"o\">,</span> <span class=\"n\">eq_univ_iff_forall</span><span class=\"o\">,</span> <span class=\"n\">set_coe.forall</span><span class=\"o\">,</span>\n    <span class=\"n\">mem_set_of</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">subset_def</span><span class=\"o\">,</span> <span class=\"n\">subset.antisymm_iff</span><span class=\"o\">,</span> <span class=\"n\">and_iff_right</span> <span class=\"n\">hab</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The canonical spelling of <code>le</code> (≤) for sets is <code>subset</code> (⊆); you probably had trouble finding relevant lemmas because you didn't use the preferred spelling.</p>",
        "id": 305379882,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666365824
    },
    {
        "content": "<p>wow thanks! that proof is pretty neat. Using your suggestions of usual spelling, I found </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">range_iff_surjective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"bp\">↔</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>I did not expect this would make such a difference for <code>library_search</code> and <code>suggest</code>.</p>",
        "id": 305383961,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1666366754
    },
    {
        "content": "<p>You can try <code>library_search!</code> which should use a weaker version of equality when searching for matches, this may see through these differences, but it is slower because of this.</p>",
        "id": 305384301,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666366817
    }
]