[
    {
        "content": "<p>I defined an inductive family <code>f : nat -&gt; Type</code>, and an abbreviation <code>abbreviation f0 := f 0</code>. However, the induction tactic does not recognize <code>f 0</code> and <code>f0</code> are the same. So induction on the former works but not the latter. How can I fix this?</p>",
        "id": 189146819,
        "sender_full_name": "?????",
        "timestamp": 1582743784
    },
    {
        "content": "<p>Could you give an example?</p>",
        "id": 189147072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582743913
    },
    {
        "content": "<p>I got a bit further by generalizing the 0 and using <code>nat.zero</code> instead of <code>0</code>. Now the problem is that in the type <code>f nat.zero</code>, <code>nat.zero</code> is not a variable, which makes the induction tactic throw an error. I want to generalize the 0 anyway, so is there a way of unfolding abbreviations? </p>\n<div class=\"codehilite\"><pre><span></span>inductive f : ℕ → Type\n| c1 : ∀ n, f n\n\nopen f\n\nabbreviation f0 := f nat.zero\n\nexample : ∀ (v : f0), v = c1 nat.zero :=\nbegin\nintros,\nset x := nat.zero with h,\ninduction v,\nend\n</pre></div>",
        "id": 189149425,
        "sender_full_name": "?????",
        "timestamp": 1582745179
    },
    {
        "content": "<p>The easy way to do this is to use the <code>cases</code> tactic.  This tactic is a little smarter, and can do cases on terms which live in a specific instance of an inductive family:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">abbreviation</span> <span class=\"n\">f0</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">f0</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">c1</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 189150761,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1582745991
    },
    {
        "content": "<p>The problem with the <code>induction</code> tactic is that the <code>induction</code> tactic requires <code>v</code> to have type <code>f x</code> where <code>x</code> is a variable in the local context (and <em>not</em> a local definition, i.e. not of the form <code>x : nat := ...</code>)</p>",
        "id": 189151223,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1582746262
    },
    {
        "content": "<p>Thanks for the tip. But from the spec it looks like <code>cases</code> doesn't generate the inductive hypothesis, which I would need sometimes.</p>",
        "id": 189151559,
        "sender_full_name": "?????",
        "timestamp": 1582746466
    },
    {
        "content": "<p>That is correct. But what do you expect your induction hypothesis to look like if you are only proving something about elements in <code>f 0</code>? <br>\nTo get an induction hypothesis, you need to prove something for an element in <code>f n</code> for an arbitrary <code>n</code>.</p>",
        "id": 189152128,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1582746818
    },
    {
        "content": "<p>Ah that makes sense. Thanks!</p>",
        "id": 189152430,
        "sender_full_name": "?????",
        "timestamp": 1582747079
    }
]