[
    {
        "content": "<p>Is it possible to implement the C abstract machine with inductive types? Where can I get started? I want to be able to reason about C programs and I'm willing to put in some work to formalize C semantics.</p>",
        "id": 241409214,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622734806
    },
    {
        "content": "<p>As a side note: I'm really infatuated with inductive types since they can be used to formalize many models. They are just so powerful.</p>",
        "id": 241409499,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622734947
    },
    {
        "content": "<p>You might be interested in Mario's mm0 and mm1</p>",
        "id": 241409916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622735115
    },
    {
        "content": "<p>Then you don't have to implement everything yourself. But you don't get 100% pure C</p>",
        "id": 241409963,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622735139
    },
    {
        "content": "<p>Thanks. But how does that relate to my question though? I thought mm0 was just an insanely fast verifier that is incredibly, incredibly low level and had nothing to do with formalizing C semantics.</p>",
        "id": 241410197,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622735235
    },
    {
        "content": "<p>It might help to think about the type of statement you want to formalize</p>",
        "id": 241410441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622735340
    },
    {
        "content": "<p>Actually I've been building a verified compiler for a <a href=\"https://github.com/digama0/mm0/blob/master/mm0-rs/mmc.md\">C-like language</a> in mm0. But probably a closer match to your question is <a href=\"https://github.com/AbsInt/CompCert\">CompCert</a>, which formalized (most of) the semantics of C inside Coq and built a verified compiler for it. I got some ways through <a href=\"https://github.com/digama0/kremlin\">porting it to lean</a> many years ago</p>",
        "id": 241412788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622736366
    },
    {
        "content": "<p>I also object to \"incredibly, incredibly low level\". It's somewhat low level but quite a bit higher level than metamath</p>",
        "id": 241413126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622736525
    },
    {
        "content": "<p>and in principle the only thing stopping it from being even more usable is more UX work that I don't have the time to work on since it's basically a one man project right now</p>",
        "id": 241413262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622736597
    },
    {
        "content": "<p>Maybe the IMP chapter from software foundations would be a lighter introduction to this? It walks you through representing a basic imperative language in Coq and proving stuff about the behaviour of programs in it.</p>",
        "id": 241433645,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622745359
    },
    {
        "content": "<p>There's also the new-ish SF volume \"Verifiable C\": <a href=\"https://softwarefoundations.cis.upenn.edu/vc-current/index.html\">https://softwarefoundations.cis.upenn.edu/vc-current/index.html</a>. It uses coq, but it's probably a pretty good on-ramp for reasoning about C in a CiC-flavored ITP. Volume 6  was just released, and is about seapration logic, which might be of interest as well.</p>",
        "id": 241442071,
        "sender_full_name": "Chris B",
        "timestamp": 1622749254
    },
    {
        "content": "<p>I learnt a lot about lean by doing all the exercises from the first volume of that series in Lean.</p>",
        "id": 241468693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622762354
    },
    {
        "content": "<p>(removed)</p>",
        "id": 241482054,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622770975
    },
    {
        "content": "<p>(removed)</p>",
        "id": 241484076,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622773469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/the.20C.20abstract.20machine.20and.20code.20extraction/near/241412788\">said</a>:</p>\n<blockquote>\n<p>Actually I've been building a verified compiler for a <a href=\"https://github.com/digama0/mm0/blob/master/mm0-rs/mmc.md\">C-like language</a> in mm0. But probably a closer match to your question is <a href=\"https://github.com/AbsInt/CompCert\">CompCert</a>, which formalized (most of) the semantics of C inside Coq and built a verified compiler for it. I got some ways through <a href=\"https://github.com/digama0/kremlin\">porting it to lean</a> many years ago</p>\n</blockquote>\n<p>Is the code for an older version of Lean? I just cloned the Lean port and the code doesn't seem to work...</p>",
        "id": 241488939,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622779456
    },
    {
        "content": "<p>And by \"work\" I mean the code verifies cleanly</p>",
        "id": 241488950,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622779480
    },
    {
        "content": "<p>This is what I am seeing: <a href=\"/user_uploads/3121/EihWNTbyD8VlWi3T1oEPM6YE/Screenshot-from-2021-06-04-11-05-21.png\">Screenshot-from-2021-06-04-11-05-21.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/EihWNTbyD8VlWi3T1oEPM6YE/Screenshot-from-2021-06-04-11-05-21.png\" title=\"Screenshot-from-2021-06-04-11-05-21.png\"><img src=\"/user_uploads/3121/EihWNTbyD8VlWi3T1oEPM6YE/Screenshot-from-2021-06-04-11-05-21.png\"></a></div>",
        "id": 241488996,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622779543
    },
    {
        "content": "<p>Since the latest timestamp in Mario's repo is from early Jun 2017, I suspect that the code only works with Lean 3.1.0: <a href=\"https://github.com/leanprover/lean/releases\">https://github.com/leanprover/lean/releases</a></p>",
        "id": 241489207,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1622779774
    },
    {
        "content": "<p>The data.nat.bquant looks like the code is written for Lean 2 though. Let me rollback to Lean 2 and see if the code works or not.</p>",
        "id": 241489291,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622779906
    },
    {
        "content": "<p>Oh, and I have to install Emacs. The horror!</p>",
        "id": 241489449,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622780049
    },
    {
        "content": "<p>I think you're right,<code>data.nat.bquant</code> was already moved to <code>old_library</code> in even in Lean 3.0.0: <a href=\"https://github.com/leanprover/lean/blob/dae1c9dac28d1db1865ae2b1b3a39408b8ee5504/old_library/data/nat/bquant.lean\">https://github.com/leanprover/lean/blob/dae1c9dac28d1db1865ae2b1b3a39408b8ee5504/old_library/data/nat/bquant.lean</a></p>",
        "id": 241489588,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1622780257
    },
    {
        "content": "<p>I'm pretty sure it is lean 3 code, not lean 2, although like Bryan says it's quite old</p>",
        "id": 241507076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622796659
    },
    {
        "content": "<p>But there are very few proofs outside a few files, it's mostly defining inductive types and I think the syntax for that is still basically the same, so updating the project shouldn't be too bad</p>",
        "id": 241507249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622796788
    },
    {
        "content": "<p>just remove the imports of nonexisting files</p>",
        "id": 241507284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622796815
    }
]