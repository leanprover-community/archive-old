[
    {
        "content": "<p>This thread is a sequel to <a href=\"https://leanprover-community.github.io/archive/stream/113489-new-members/topic/I.20want.20to.20generate.20binary.20strings.20and.20reason.20about.20them!.html\">this thread</a>. The main lemma I proved is <code>dp_eq_total_popcount</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.range</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.modeq</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">the_rest</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">the_rest</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">the_rest</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">the_rest</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">the_rest</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">the_rest</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">the_rest</span> <span class=\"n\">tt</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dp_popcount</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">the_rest</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">dp_popcount</span> <span class=\"n\">the_rest</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">the_rest</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">dp_popcount</span> <span class=\"n\">the_rest</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dp_popcount</span> <span class=\"n\">the_rest</span> <span class=\"n\">ff</span> <span class=\"bp\">+</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">the_rest</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">the_rest</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">dp_popcount</span> <span class=\"n\">the_rest</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dp_popcount</span> <span class=\"n\">the_rest</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">the_rest</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">to_binary_terminates</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat.div_le_self</span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat.div_eq_self</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_binary</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">to_binary_terminates</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_pos</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">to_binary</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"n\">to_binary</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">tt</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">last_bit_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">initial</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat.modeq.mod_modeq</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.mul_mod_right</span> <span class=\"mi\">2</span> <span class=\"n\">n</span> <span class=\"n\">at</span> <span class=\"n\">initial</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.modeq.modeq_add</span> <span class=\"n\">initial</span> <span class=\"o\">(</span><span class=\"n\">nat.modeq.refl</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.modeq</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">last_bit_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">initial</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat.modeq.mod_modeq</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">last_bit_one</span> <span class=\"n\">n</span> <span class=\"n\">at</span> <span class=\"n\">initial</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.modeq.modeq_add</span> <span class=\"n\">initial</span> <span class=\"o\">(</span><span class=\"n\">nat.modeq.refl</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.modeq</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">eq_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">append_true</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">to_binary</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_binary</span> <span class=\"n\">n</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">tt</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">to_binary</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">last_bit_one</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.div_add_mod</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">last_bit_one</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ.inj</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.eq_of_mul_eq_mul_left</span> <span class=\"n\">zero_lt_two</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">append_false</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">to_binary</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_binary</span> <span class=\"n\">n</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">guard</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">to_binary</span><span class=\"o\">,</span>\n    <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.div_add_mod</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">last_bit_zero</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">distribute</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">distribute</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">distribute</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.eq_of_mul_eq_mul_left</span> <span class=\"n\">zero_lt_two</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n      <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">last_bit_zero</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dp_popcount</span> <span class=\"o\">(</span><span class=\"n\">to_binary</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ff</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">popcount</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">the_rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">popcount</span> <span class=\"n\">the_rest</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">the_rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">popcount</span> <span class=\"n\">the_rest</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">total_popcount</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">total_popcount</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">popcount</span> <span class=\"o\">(</span><span class=\"n\">to_binary</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cardinality_ignores_string</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">tt</span><span class=\"o\">])</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_cardinality</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_cardinality</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cardinality_ignores_string'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_cardinality</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string'</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_cardinality</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cardinality_ignores_string''</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">tt</span><span class=\"o\">])</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_cardinality</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string''</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_cardinality</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string''</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">popcount_ignores_string</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">dp_popcount</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">tt</span><span class=\"o\">])</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">dp_popcount</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_popcount</span><span class=\"o\">,</span> <span class=\"n\">popcount_ignores_string</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_popcount</span><span class=\"o\">,</span> <span class=\"n\">popcount_ignores_string</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">popcount_ignores_string'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">dp_popcount</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">dp_popcount</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_popcount</span><span class=\"o\">,</span> <span class=\"n\">popcount_ignores_string'</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string'</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string''</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_popcount</span><span class=\"o\">,</span> <span class=\"n\">popcount_ignores_string'</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string'</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string''</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">double_cardinality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">string</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp_cardinality</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">::(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">cons_append</span> <span class=\"n\">tt</span> <span class=\"n\">rest</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp_cardinality</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">double_cardinality</span> <span class=\"n\">rest</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cardinality_ignores_string'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp_cardinality</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp_cardinality</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">::(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">cons_append</span> <span class=\"n\">ff</span> <span class=\"n\">rest</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp_cardinality</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">double_cardinality</span> <span class=\"n\">rest</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dp_cardinality_odd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">tt</span><span class=\"o\">])</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">ff</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_cardinality</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality_odd</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string'</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string''</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_cardinality</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality_odd</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string'</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string''</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(cont'd)</p>",
        "id": 225642923,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1612842447
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">not_even_is_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nat.odd_iff</span><span class=\"o\">,</span> <span class=\"n\">nat.odd_iff_not_even</span><span class=\"o\">,</span> <span class=\"n\">nat.even_iff</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">lemma</span> <span class=\"n\">is_bijective_even</span><span class=\"o\">,</span> <span class=\"n\">is_bijective_odd</span>\n<span class=\"k\">with</span> <span class=\"n\">is_bijective_even</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">to_binary</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">is_zero</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"kd\">begin</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_zero</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span><span class=\"o\">,</span> <span class=\"n\">to_binary</span><span class=\"o\">],</span> <span class=\"kd\">end</span> <span class=\"k\">else</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">append_false</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">is_zero</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">double_cardinality</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.div_add_mod</span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">is_even</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">is_even</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this.symm</span><span class=\"o\">,</span>\n      <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">to_binary_terminates</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">is_zero</span><span class=\"o\">),</span> <span class=\"n\">is_bijective_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"kd\">end</span>\n    <span class=\"k\">else</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">not_even_is_odd</span> <span class=\"n\">n</span> <span class=\"n\">is_even</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this.symm</span><span class=\"o\">,</span>\n      <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">to_binary_terminates</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">is_zero</span><span class=\"o\">),</span> <span class=\"n\">is_bijective_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"kd\">end</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"k\">with</span> <span class=\"n\">is_bijective_odd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">to_binary</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">append_true</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp_cardinality_odd</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.div_add_mod</span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">is_zero</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_zero</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span><span class=\"o\">,</span> <span class=\"n\">to_binary</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">is_even</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_even</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this.symm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">double_cardinality</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">to_binary_terminates</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">is_zero</span><span class=\"o\">),</span> <span class=\"n\">is_bijective_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span>\n  <span class=\"k\">else</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">not_even_is_odd</span> <span class=\"n\">n</span> <span class=\"n\">is_even</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this.symm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">double_cardinality</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">to_binary_terminates</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">is_zero</span><span class=\"o\">),</span> <span class=\"n\">is_bijective_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_bijective</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">to_binary</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.div_add_mod</span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">is_even</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_even</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this.symm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_bijective_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span> <span class=\"k\">else</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">is_odd</span> <span class=\"o\">:=</span> <span class=\"n\">not_even_is_odd</span> <span class=\"n\">n</span> <span class=\"n\">is_even</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_odd</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this.symm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_bijective_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">helper</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">dp_popcount</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">string</span> <span class=\"n\">ff</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">dp_popcount</span> <span class=\"n\">string</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">::(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">cons_append</span> <span class=\"n\">tt</span> <span class=\"n\">rest</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp_popcount</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">helper</span> <span class=\"n\">rest</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">double_cardinality</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp_cardinality</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp_popcount</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">popcount_ignores_string'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp_popcount</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">::(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">cons_append</span> <span class=\"n\">ff</span> <span class=\"n\">rest</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp_popcount</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">helper</span> <span class=\"n\">rest</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp_cardinality</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp_popcount</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">even_dp_induction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">dp</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">is_zero</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span> <span class=\"k\">else</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">append_false</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">is_zero</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">helper</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_bijective</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">popcount_even</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">popcount</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"n\">popcount</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">popcount</span><span class=\"o\">,</span> <span class=\"n\">popcount_even</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">popcount</span><span class=\"o\">,</span> <span class=\"n\">popcount_even</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">popcount_odd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">popcount</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">tt</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"n\">popcount</span> <span class=\"n\">string</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">popcount</span><span class=\"o\">,</span> <span class=\"n\">popcount_odd</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">popcount</span><span class=\"o\">,</span> <span class=\"n\">popcount_odd</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">even_popcount_induction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">total_popcount</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">total_popcount</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">induction_hypothesis</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">total_popcount</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">total_popcount</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">total_popcount</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">append_true</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">induction_hypothesis</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">is_zero</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">is_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span> <span class=\"k\">else</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">append_false</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">is_zero</span><span class=\"o\">),</span>\n      <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">total_popcount</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">popcount</span> <span class=\"o\">(</span><span class=\"n\">to_binary</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">popcount</span> <span class=\"o\">(</span><span class=\"n\">to_binary</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">total_popcount</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">popcount</span> <span class=\"o\">(</span><span class=\"n\">to_binary</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"k\">from</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">popcount_even</span><span class=\"o\">,</span> <span class=\"n\">popcount_odd</span><span class=\"o\">],</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n      <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dp_popcount_odd_add_one</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">tt</span><span class=\"o\">])</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">ff</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">tt</span><span class=\"o\">])</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">ff</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">ff</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_popcount_odd_add_one</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span><span class=\"o\">],</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cardinality_ignores_string</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">tt</span><span class=\"o\">])</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">ff</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">ff</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_popcount_odd_add_one</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cardinality_ignores_string</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dp_popcount_identity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">dp_popcount</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">tt</span><span class=\"o\">])</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">dp_popcount</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">ff</span> <span class=\"bp\">+</span> <span class=\"n\">popcount</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">dp_popcount</span> <span class=\"n\">rest</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dp_popcount</span> <span class=\"n\">rest</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">rest</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dp_popcount</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">ff</span> <span class=\"bp\">+</span> <span class=\"n\">popcount</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"bp\">+</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">tt</span><span class=\"o\">])</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dp_popcount</span> <span class=\"n\">rest</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dp_popcount</span> <span class=\"n\">rest</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">rest</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dp_popcount</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">ff</span> <span class=\"bp\">+</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">popcount</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])),</span> <span class=\"k\">from</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_popcount</span><span class=\"o\">,</span> <span class=\"n\">dp_popcount_identity</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span><span class=\"o\">,</span> <span class=\"n\">popcount</span><span class=\"o\">,</span> <span class=\"n\">popcount_ignores_string</span><span class=\"o\">,</span> <span class=\"n\">popcount_ignores_string'</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string'</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string''</span><span class=\"o\">],</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp_popcount_odd_add_one</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dp_popcount</span><span class=\"o\">,</span> <span class=\"n\">dp_popcount_identity</span><span class=\"o\">,</span> <span class=\"n\">dp_cardinality</span><span class=\"o\">,</span> <span class=\"n\">popcount</span><span class=\"o\">,</span> <span class=\"n\">popcount_ignores_string</span><span class=\"o\">,</span> <span class=\"n\">popcount_ignores_string'</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string'</span><span class=\"o\">,</span> <span class=\"n\">cardinality_ignores_string''</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">odd_dp_induction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">popcount</span> <span class=\"o\">(</span><span class=\"n\">to_binary</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">append_true</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">is_zero</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_zero</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"k\">else</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">dp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">append_false</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">is_zero</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">dp_popcount_identity</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dp_eq_total_popcount</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dp</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">total_popcount</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">is_even</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.div_add_mod</span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_even</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this.symm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">even_dp_induction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">even_popcount_induction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">is_zero</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">is_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span>\n    <span class=\"k\">else</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">exact</span> <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">to_binary_terminates</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">is_zero</span><span class=\"o\">),</span> <span class=\"n\">dp_eq_total_popcount</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"kd\">end</span>\n  <span class=\"kd\">end</span> <span class=\"k\">else</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">is_odd</span> <span class=\"o\">:=</span> <span class=\"n\">not_even_is_odd</span> <span class=\"n\">n</span> <span class=\"n\">is_even</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.div_add_mod</span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_odd</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this.symm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">odd_dp_induction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">total_popcount</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n\n    <span class=\"n\">rw</span> <span class=\"n\">even_dp_induction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">even_popcount_induction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">is_zero</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">is_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span>\n    <span class=\"k\">else</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">exact</span> <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">to_binary_terminates</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">is_zero</span><span class=\"o\">),</span> <span class=\"n\">dp_eq_total_popcount</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"kd\">end</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225642935,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1612842464
    },
    {
        "content": "<p>You can use a <a href=\"http://gist.github.com\">gist</a> if you want to share code above zulip's file size limit</p>",
        "id": 225643322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612842959
    },
    {
        "content": "<p>I'm reluctant to do that—link rot is my perpetual enemy. Thanks for the suggestion though.</p>",
        "id": 225647906,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1612848926
    },
    {
        "content": "<p>gists don't bitrot though? They aren't very discoverable but they should last as long as github does</p>",
        "id": 225648373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612849593
    },
    {
        "content": "<p>My experience is that <code>rw A, rw B, rw C,...</code> can be decidedly slower than <code>rw [A, B, C, ...]</code></p>",
        "id": 225653862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612856551
    },
    {
        "content": "<p>I have to spend today preparing for class so can't give detailed feedback but just to say that this looks pretty good. <code>to_binary_terminates</code> should be called <code>nat.div_two_lt_of_pos</code> (to match <code>div_two_lt_of_pos</code>) and should be PR'ed (I was surprised it wasn't there, but <code>library_search</code> didn't find it). It's a bit disappointing that <code>omega</code> doesn't solve this (<code>omega</code> takes a while to run, but less time to write!). Here's a shorter proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.div_two_lt_of_pos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">nat.div_lt_iff_lt_mul'</span> <span class=\"o\">(</span><span class=\"n\">zero_lt_two</span><span class=\"o\">),</span> <span class=\"n\">mul_two</span><span class=\"o\">,</span> <span class=\"n\">lt_add_iff_pos_left</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which also compiles in about 15ms on my machine -- your proof takes nearly 200ms, probably because of the appeals to <code>linarith</code>.  In fact let me just run through the <code>nat</code> stuff you did:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">last_bit_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.add_mul_mod_self_left</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and it should probably be called something like two_mul_add_one_mod_two or something :-) <code>last_bit_zero</code> shouldn't really be stated like that, <code>2*n+1+1</code> should be replaced by <code>2*n+2</code> (they are defeq):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">two_mul_add_two_mod_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.add_mul_mod_self_left</span><span class=\"o\">,</span> <span class=\"n\">nat.mod_self</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">last_bit_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">two_mul_add_two_mod_two</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>In general lemmas should be stated in their \"simplest form\". Here's a sublemma you needed (which you should really factor out -- two short proofs is better than one big one, this is a style tip):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">two_mul_add_one_div_two</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.add_mul_div_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">zero_lt_two</span><span class=\"o\">)],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero_add</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Note now I abuse definitional equality.</p>",
        "id": 225660084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612861315
    },
    {
        "content": "<p>This theorem looks a lot like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.div2_bit\">docs#nat.div2_bit</a></p>",
        "id": 225665001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612864226
    }
]