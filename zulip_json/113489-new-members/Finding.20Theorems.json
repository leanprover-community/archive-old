[
    {
        "content": "<p>When I am writing a Lean project and if I want to use some lemma/theorem \"L\" to prove a new one, how do I know whether \"L\" has already existed in mathlib?</p>",
        "id": 240180070,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621946320
    },
    {
        "content": "<p>How can you use it if it doesn't exist? I'm a bit confused by this question.</p>",
        "id": 240180171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621946372
    },
    {
        "content": "<p>\"in mathlib\" I mean, I edited the question. Sorry for any confusion.</p>",
        "id": 240180387,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621946461
    },
    {
        "content": "<p>Oh so \"L\" is a mathematical theorem, not a formalised one? You can search for it <a href=\"https://leanprover-community.github.io/mathlib_docs/\">in the docs</a> or ask in <a class=\"stream\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F\">#Is there code for X?</a></p>",
        "id": 240180580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621946540
    },
    {
        "content": "<p>If I'm hacking on <code>mathlib</code> then I often just use the search functionality of VS Code.</p>",
        "id": 240180671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621946596
    },
    {
        "content": "<p>Yeah, I do mean a math theorem or a commonly used lemma (such as if x is real, then x^2&gt;=0).</p>",
        "id": 240181010,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621946734
    },
    {
        "content": "<p>For something as simple as that, I would guess the name of the lemma.</p>",
        "id": 240181048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621946754
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">pow_two_nonneg</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 240181194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621946808
    },
    {
        "content": "<p>other options include <code>library_search</code>, <code>suggest</code>, using <code>simp</code> and seeing what lemmas it uses with<code>squeeze_simp</code></p>",
        "id": 240181397,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1621946916
    },
    {
        "content": "<p>Many thanks! I am just taking that simple lemma as an example.</p>",
        "id": 240181403,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621946919
    },
    {
        "content": "<p>The naming conventions are <a href=\"https://leanprover-community.github.io/contribute/naming.html\">here</a>.</p>",
        "id": 240181448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621946939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/Finding.20Theorems/near/240181403\">said</a>:</p>\n<blockquote>\n<p>Many thanks! I am just taking that simple lemma as an example.</p>\n</blockquote>\n<p>Different examples require different techniques -- your question is very broad.</p>",
        "id": 240182177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621947257
    },
    {
        "content": "<p>Eric, could you please explain how to use <code>squeeze_simp</code> maybe with a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 240184526,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621948262
    },
    {
        "content": "<p>This is the variant of your question where the theorem you want is actually your goal in a formalisation effort. You suspect the result is in the library, and then you discover that <code>simp</code> solves the goal, you can replace it with <code>squeeze_simp</code> and see what actually happened.</p>",
        "id": 240184734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621948351
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">squeeze_simp</span>\n<span class=\"c1\">-- Try this: simp only [mul_zero]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 240184813,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621948399
    }
]