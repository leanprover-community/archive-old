[
    {
        "content": "<p>Can somebody please help me understand what is going on here? I have a means of generating a preorder from a variable (2 variables in my mwe below). I would like to fix those variables for the scope of a section and introduce a preorder instance for the current scope. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">place</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">place</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">copland</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">po</span> <span class=\"o\">:</span> <span class=\"n\">place</span> <span class=\"bp\">→</span> <span class=\"n\">preorder</span> <span class=\"n\">copland</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">place</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">po</span> <span class=\"n\">p</span> <span class=\"c1\">-- po p : preorder copland</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"kd\">instance</span> <span class=\"n\">xmpl</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">place</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">copland</span> <span class=\"o\">:=</span> <span class=\"n\">po</span> <span class=\"n\">p</span>\n<span class=\"k\">#check</span> <span class=\"n\">xmpl</span> <span class=\"c1\">-- xmpl : (place → preorder copland) → place → preorder copland</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">copland</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">c1</span> <span class=\"bp\">≤</span> <span class=\"n\">c2</span>\n<span class=\"c\">/-</span><span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">po : place → preorder copland,</span>\n<span class=\"cm\">p : place,</span>\n<span class=\"cm\">c1 c2 : copland</span>\n<span class=\"cm\">⊢ has_le copland-/</span>\n</code></pre></div>\n<p>So, basically, Lean knows <code>po p : preorder copland</code>, and I'm looking for a way of introducing that as an instance. But the only way I know of creating instances gives me a dependent type that creates instances from variables instead of the desired instance.</p>",
        "id": 305707568,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666558254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300396\">Paul Rowe</span> has marked this topic as unresolved.</p>",
        "id": 305724976,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666569523
    },
    {
        "content": "<p>It's not as smooth sailing as I had hoped! I actually rely heavily on the inductive structure of the underlying type for which I'm defining a type synonym. It seems the type synonym doesn't give me access to the constructors. Or rather, if I use them, Lean seems to coerce it back to the original type. </p>\n<p>I'm too tired to generate a mwe. I'll come back sometime tomorrow. But if there's any obvious advice in the meantime, I'll take it. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 305725525,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666569868
    },
    {
        "content": "<p>One way to fix that is to make copies of the constructors but with a type that uses the type synonym instead of the original</p>",
        "id": 305738689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666580252
    },
    {
        "content": "<p>I assume the <code>reducible</code> attribute wouldn't help here, right?</p>",
        "id": 305738751,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666580313
    },
    {
        "content": "<p>Instead of a type synonym, can the indices be added to the inductive type itself!</p>",
        "id": 305758229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666594927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span>  I've never encountered the <code>reducible</code> attribute, but it seems to do the trick! The symptom was not being able to compare two terms of the new type synonym using <code>≤</code> if the constructors were explicit. Using <code>reducible</code> seems to make it work. I will look up what it does, but is there a nice explanation of what it does?</p>",
        "id": 305819902,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666618376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Does your suggestion essentially amount to creating a duplicate type without it being a true type synonym? If not, I'm not sure what you mean.</p>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  Are you suggesting I force the original type to carry the extra parameter <code>p</code>? I'm not sure I like that since other results about that type truly don't need it. Sorry if I'm misunderstanding.</p>",
        "id": 305820648,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666618588
    },
    {
        "content": "<p>like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">place</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">place</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">copland</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coplandA</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">place</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">copland</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coplandA.mk</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">coplandA</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">copland.mk</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">place</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">xmpl</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">coplandA</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">coplandA</span> <span class=\"n\">p</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">coplandA.mk</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">c2</span>\n</code></pre></div>",
        "id": 305821029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666618706
    },
    {
        "content": "<p>it's up to you whether <code>p</code> needs to be explicit or not in <code>coplandA.mk</code></p>",
        "id": 305821113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666618731
    },
    {
        "content": "<p>I see. What will happen if I try to apply <code>cases</code> to a term of type <code>coplandA p</code>? The type actually has numerous constructors.</p>",
        "id": 305821562,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666618849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300396\">@Paul Rowe</span> I'm actually not completely sure what <code>reducible</code> does myself... also, I seem to have a habit of giving advice that technically works but isn't the right solution <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> so I hope someone else can come along and verify that <code>reducible</code> is appropriate here</p>\n<p>I'm curious to know if it's documented anywhere</p>",
        "id": 305862005,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666629872
    },
    {
        "content": "<p>One small wrinkle that I have run across with using <code>reducible</code> is that it breaks the separation of the type synonyms. What I mean is that if I have two type synonyms for the same type and they are both reducible, then they are in conflict. I can fix this by making the <code>reducible</code> attribute local, which eliminates one of the benefits of the approach. That said, I think I'll keep moving forward with this as it has provided me the least resistance so far.</p>",
        "id": 305862848,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666630150
    },
    {
        "content": "<p>Also found a nice reference sheet <a href=\"https://leanprover.github.io/tutorial/A1_Quick_Reference.html\">here</a>.</p>\n<p>From that reference: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">reducible</span>       <span class=\"o\">:</span> <span class=\"n\">unfold</span> <span class=\"n\">at</span> <span class=\"n\">any</span> <span class=\"n\">time</span> <span class=\"n\">during</span> <span class=\"n\">elaboration</span> <span class=\"k\">if</span> <span class=\"n\">necessary</span>\n<span class=\"n\">quasireducible</span>  <span class=\"o\">:</span> <span class=\"n\">unfold</span> <span class=\"n\">during</span> <span class=\"n\">higher</span> <span class=\"n\">order</span> <span class=\"n\">unification</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">not</span> <span class=\"n\">during</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"n\">resolution</span>\n<span class=\"n\">semireducible</span>   <span class=\"o\">:</span> <span class=\"n\">unfold</span> <span class=\"n\">when</span> <span class=\"n\">performance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">critical</span>\n<span class=\"n\">irreducible</span>     <span class=\"o\">:</span> <span class=\"n\">avoid</span> <span class=\"n\">unfolding</span> <span class=\"n\">during</span> <span class=\"n\">elaboration</span>\n</code></pre></div>",
        "id": 305866852,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666631442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300396\">@Paul Rowe</span> nice! is it possible that something like <code>quasireducible</code> might provide the benefits without the drawbacks?</p>",
        "id": 305878199,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666632370
    },
    {
        "content": "<p>I also wonder if using <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold\">tactic#unfold</a> manually would work</p>",
        "id": 305879056,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666632663
    },
    {
        "content": "<p>I thought about <code>quasireducible</code> too, but since I got unstuck, I'm having too much fun proving new things. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> You must be right about <code>unfold</code> since that's clearly what reducible is doing for me behind the scenes.</p>",
        "id": 305879340,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666632752
    },
    {
        "content": "<p>I don't think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quasireducible\">docs#quasireducible</a> (note: no suggestions provided by the docs) exists in Lean 3; I've never seen it in the wild</p>",
        "id": 305900843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666640295
    },
    {
        "content": "<p>Ah yes! I blew right by the comment at the top of the reference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Note</span> <span class=\"n\">that</span> <span class=\"n\">this</span> <span class=\"n\">quick</span> <span class=\"n\">reference</span> <span class=\"n\">guide</span> <span class=\"n\">describes</span> <span class=\"n\">Lean</span> <span class=\"mi\">2</span> <span class=\"n\">only.</span>\n</code></pre></div>",
        "id": 305901620,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666640621
    },
    {
        "content": "<p>Was it changed to <code>instance</code> reducible? That exists in lean 3 and isn't on that reference list.</p>",
        "id": 306632586,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666955896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/help.20with.20instances/near/306632586\">said</a>:</p>\n<blockquote>\n<p>Was it changed to <code>instance</code> reducible? That exists in lean 3 and isn't on that reference list.</p>\n</blockquote>\n<p>How does that work? Is there documentation on it?</p>",
        "id": 306689245,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666972104
    },
    {
        "content": "<p>I was thinking of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.transparency\">docs#tactic.transparency</a>, but it looks like that is somehow the opposite</p>",
        "id": 306696780,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666974073
    }
]