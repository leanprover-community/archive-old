[
    {
        "content": "<p>I recognize this is not a typical use case, but: is there some mechanism to undefine or hide everything defined in core.lean? (I'm still just in the \"playing with the language\" state so I'm asking more from curiosity than anything.)</p>",
        "id": 287284598,
        "sender_full_name": "Peter B",
        "timestamp": 1656041180
    },
    {
        "content": "<p>You can use the command <code>prelude</code> to exclude everything in <code>init</code></p>",
        "id": 287285797,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656042616
    },
    {
        "content": "<p>The answer might be \"Don't do that, then!\" but when I try to view this in either emacs or VSCode with the lean 4 (stable) toolchain</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prelude</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">bool</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">negb</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool.true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bool.false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool.false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bool.true</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">boolean</span>\n<span class=\"k\">#check</span> <span class=\"n\">negb</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>I get <code>unknown constant 'sorryAx' [2 times]</code> at or around the <code>match b</code> line.</p>\n<p>If I remove \"prelude\" and rename <code>bool</code> to something unique/not overloaded, it compiles fine.</p>",
        "id": 287333998,
        "sender_full_name": "Peter B",
        "timestamp": 1656079095
    },
    {
        "content": "<p>If I then import (for example) <code>Lean.Util.Sorry</code>, then bool is declared (presumably because that file implicitly or explicitly depends on the stuff in Prelude)</p>",
        "id": 287336277,
        "sender_full_name": "Peter B",
        "timestamp": 1656080167
    },
    {
        "content": "<p>Are you perhaps trying to do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Peter</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">bool</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">negb</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool.true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bool.false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool.false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bool.true</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">bool</span>\n<span class=\"k\">#check</span> <span class=\"n\">negb</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Peter</span>\n</code></pre></div>",
        "id": 287337710,
        "sender_full_name": "Julian Berman",
        "timestamp": 1656080819
    },
    {
        "content": "<p>Using <code>prelude</code> strictly speaking satisfies what you were originally asking for (by undefining lots of stuff) but as you're finding it then requires you to define a bunch of stuff. I'm not sure whether it's even specified what stuff needs to go in a custom prelude to get various functionality to work again, probably it is -- but if you instead really mean to define your own versions of things, you might instead yeah use a namespace like ^ where now technically speaking you're defining <code>Peter.bool</code> but are free to do so without it clashing with the root <code>bool</code>.</p>",
        "id": 287337890,
        "sender_full_name": "Julian Berman",
        "timestamp": 1656080903
    },
    {
        "content": "<p>Possibly? I don't think that works either, though, let me re-try it.</p>",
        "id": 287341488,
        "sender_full_name": "Peter B",
        "timestamp": 1656082530
    },
    {
        "content": "<p>Grrr that sure does work!</p>",
        "id": 287341725,
        "sender_full_name": "Peter B",
        "timestamp": 1656082632
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 287341759,
        "sender_full_name": "Peter B",
        "timestamp": 1656082656
    }
]