[
    {
        "content": "<p>I had a really hard time with this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Given a permutation of [0, n-1] , create a permutation of `[0, n]` that</span>\n<span class=\"sd\">    moves `n` into position `i` and leaves the rest untouched-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">equiv.perm.snoc</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fin.last</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">fin.succ_above</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">((</span><span class=\"n\">fin.last</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">fin.last</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">fin.succ_above</span> <span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"bp\">$</span> <span class=\"n\">i.pred_above</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hnl</span> <span class=\"o\">:</span> <span class=\"n\">fin.last</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n      <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hnl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">hnl.symm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">)},</span>\n      <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">hnl.symm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">)},</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n      <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">hnl</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">fin.succ_above_ne</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">hnl</span> <span class=\"n\">h.symm</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The <code>dite</code>s were very hard to simplify, and I had to close a lot of trivial contradictions I'd rather just vanished.</p>\n<p>Am I missing a tactic here?</p>\n<p>( I expect I can do <code>right_inv</code>, but I'd rather wait to see if there's a trick I missed!)</p>",
        "id": 218135545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606518612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.fin</span>\n\n<span class=\"sd\">/-- Given a permutation `e` of [0, n-1] , create a permutation of `[0, n]` that</span>\n<span class=\"sd\">    moves `n` into position `i`, and shifts `e x &gt; i` up one. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">equiv.perm.snoc</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fin.last</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">fin.succ_above</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">((</span><span class=\"n\">fin.last</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">fin.last</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">fin.succ_above</span> <span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"bp\">$</span> <span class=\"n\">i.pred_above</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">eq_or_lt_of_le</span> <span class=\"n\">x.le_last</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hnl</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">fin.last</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">hnl</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">fin.pred_above_succ_above</span><span class=\"o\">,</span> <span class=\"n\">equiv.symm_apply_apply</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span><span class=\"o\">,</span>\n                 <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_above_pred_above</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_above_ne</span><span class=\"o\">]}</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 218186799,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606607398
    },
    {
        "content": "<p>I didn't touch your data defns, but there's probably a neater way of defining that.</p>",
        "id": 218186847,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606607416
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.fin</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">fin.pred_last</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">fin.pred</span> <span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">fin.last_pos</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fin.last</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fin.pred_above_of_last</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fin.last</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fin.pred_above</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">fin.last</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin.pred_above</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_le</span> <span class=\"n\">k.le_last</span><span class=\"o\">),</span> <span class=\"n\">fin.pred_last</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fin.pred_above_last</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fin.last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fin.pred_above</span> <span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k.cast_lt</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin.pred_above</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Given a permutation `e` of [0, n-1] , create a permutation of `[0, n]` that</span>\n<span class=\"sd\">    moves `n` into position `i`, and shifts `e x &gt; i` up one. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">equiv.perm.snoc</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fin.last</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">fin.succ_above</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">((</span><span class=\"n\">fin.last</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">fin.last</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">fin.succ_above</span> <span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"bp\">$</span> <span class=\"n\">i.pred_above</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fin.last</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">fin.pred_above_succ_above</span><span class=\"o\">,</span> <span class=\"n\">equiv.symm_apply_apply</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span><span class=\"o\">,</span>\n                 <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_above_pred_above</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_above_ne</span><span class=\"o\">]}</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- this could be a lemma too, but I was advised against it</span>\n      <span class=\"k\">have</span> <span class=\"n\">nel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">k.cast_succ</span> <span class=\"bp\">≠</span> <span class=\"n\">fin.last</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">k.cast_succ_lt_last</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">nel</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_above_last</span><span class=\"o\">,</span>\n                 <span class=\"n\">fin.pred_above_last</span> <span class=\"o\">(</span><span class=\"n\">fin.cast_succ_lt_last</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">fin.cast_lt_cast_succ</span><span class=\"o\">,</span>\n                 <span class=\"n\">equiv.apply_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_above_pred_above</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 218187781,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606609107
    },
    {
        "content": "<p>Feel free to PR.</p>",
        "id": 218187785,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606609128
    },
    {
        "content": "<p>The crucial part for <code>left_inv</code> was knowing that <code>fin.succ_above_ne</code> is a lemma, but it's not a <code>simp</code> one because it provides an <code>ne</code> statement.</p>",
        "id": 218187842,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606609240
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 218202139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606637799
    },
    {
        "content": "<p>I've realized I should probably replace <code>fin.last n</code> with a generic <code>j</code> argument</p>",
        "id": 218202146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606637843
    },
    {
        "content": "<p>And also that I no longer need this for the proof I was working on...</p>",
        "id": 218202148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606637862
    },
    {
        "content": "<p>Do you still need the \"split sum over univ into disjoint sets given involutive function etc\"?</p>",
        "id": 218203373,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606640323
    },
    {
        "content": "<p>I found that exists already, mostly</p>",
        "id": 218204783,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606642999
    },
    {
        "content": "<p>It turns out that in asking for the Y in my XY problem, I found an X' that used Y in mathlib that was already most of the way towards the X I wanted</p>",
        "id": 218204842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606643063
    },
    {
        "content": "<p>I think the possibly mathlib-suitable version is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Given a permutation of [0, n-1] , create a permutation of `[0, n]` that</span>\n<span class=\"sd\">    inserts `i` in the input and `j` in the output, and maps one to the other. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">equiv.perm.insert_fin</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">):</span>\n  <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">j</span> <span class=\"k\">else</span> <span class=\"n\">fin.succ_above</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">i.pred_above</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">fin.succ_above</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"bp\">$</span> <span class=\"n\">j.pred_above</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_above_ne</span><span class=\"o\">],</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_above_ne</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 218218295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606665654
    },
    {
        "content": "<p>Or perhaps these:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Given a permutation of [0, n-1] , create a permutation of `[0, n]` that</span>\n<span class=\"sd\">    leaves a hole around `i`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">equiv.perm.fin_succ_above</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">fin.succ_above</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">$</span> <span class=\"n\">i.pred_above</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">fin.succ_above</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"bp\">$</span> <span class=\"n\">i.pred_above</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_above_ne</span><span class=\"o\">],</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_above_ne</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Given a permutation of `[0, n]` that leaves `i` unchanged, create a permutation of `[0, n - 1]` that</span>\n<span class=\"sd\">ignores `i`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">equiv.perm.fin_pred_above</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">i.pred_above</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">$</span> <span class=\"n\">i.succ_above</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">i.succ_above_ne</span> <span class=\"n\">x</span> <span class=\"bp\">$</span> <span class=\"n\">e.injective</span> <span class=\"bp\">$</span> <span class=\"n\">h'.trans</span> <span class=\"n\">h.symm</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">i.pred_above</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"bp\">$</span> <span class=\"n\">i.succ_above</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">i.succ_above_ne</span> <span class=\"n\">x</span> <span class=\"bp\">$</span> <span class=\"n\">e.symm.injective</span> <span class=\"bp\">$</span> <span class=\"n\">h'.trans</span> <span class=\"o\">(</span><span class=\"n\">e.apply_eq_iff_eq_symm_apply.mp</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 218219086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606666976
    },
    {
        "content": "<p>hm, I would prefer to see this factored a bit to go via <code>option (fin n)</code></p>",
        "id": 218220571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606669625
    },
    {
        "content": "<p>That is, there is an equiv <code>fin (n+1) ~= option (fin n)</code> that sends <code>i</code> to <code>none</code> and is otherwise monotone</p>",
        "id": 218220630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606669705
    },
    {
        "content": "<p>and then from an equiv <code>option A ~= option B</code> you can construct <code>A ~= B</code> (I think we have this already)</p>",
        "id": 218220652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606669794
    },
    {
        "content": "<p>So something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">functor.map_equiv</span> <span class=\"n\">option</span>\n\n<span class=\"sd\">/-- An equivalence that leaves a hole around `i`, into which `none` is mapped -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">equiv.option_equiv_fin_succ_above</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.cases_on'</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">fin.succ_above</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">none</span> <span class=\"k\">else</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">i.pred_above</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.succ_above_ne</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_above_ne</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- the definition higher in the thread</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">equiv.option_equiv_fin_succ_above</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">perm_congr</span> <span class=\"o\">(</span><span class=\"n\">functor.map_equiv</span> <span class=\"n\">option</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 218221421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606671095
    },
    {
        "content": "<p>What should that definition be called? <code>fin.succ_above_option</code>? Reverse it and use <code>fin.pred_above_option</code>?</p>",
        "id": 218221955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606672008
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/leanprover-community/mathlib/issues/5145\">#5145</a> so that this doesn't get forgotten</p>",
        "id": 218223740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606674605
    }
]