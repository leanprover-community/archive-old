[
    {
        "content": "<p>If we have a <code>fintype n</code> and a function <code>(f : n → ℂ)</code>, then we can consider the range of <code>f</code> as a multiset <code>(M : multiset ℂ)</code>.  I want to know how to go the other way.  Given a multiset <code>(M : multiset ℂ)</code> with <code>M.card = fintype.card n</code>, how do I define a function <code>(f : n → ℂ)</code> whose range as a multiset is equal to <code>M</code>?  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.lists\">docs#multiset.lists</a> looks promising, but I'm not sure how to select a representative list or then convert it to a function.</p>",
        "id": 269045876,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1642980960
    },
    {
        "content": "<p>You could combine <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.to_list\">docs#multiset.to_list</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth_le\">docs#list.nth_le</a> to obtain a function from <code>fin n</code>. Do we not have <code>list.get</code> (we have this in the lean4 stdlib)?</p>",
        "id": 269047412,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642983003
    },
    {
        "content": "<p>Does <code>to_list</code> retain multiplicities?  I am guessing yes, since it looks like it pulls a representative list that quotients to the multiset.</p>",
        "id": 269047682,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1642983369
    },
    {
        "content": "<p>yes</p>",
        "id": 269047695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642983414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <code>list.get</code> is called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth\">docs#list.nth</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.inth\">docs#list.inth</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth_le\">docs#list.nth_le</a> depending on what you want to do about out of bounds values</p>",
        "id": 269047767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642983538
    },
    {
        "content": "<p>looking at lean 4 stdlib it seems like it corresponds to <code>list.nth_le</code></p>",
        "id": 269047849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642983643
    },
    {
        "content": "<p>You can obtain the list of all elements of <code>n</code> from <code>fintype n</code>. Then you can obtain the list of elements of the multiset using <code>multiset.to_list</code>. Since the cardinalities are the same and the first list contains all elements of <code>n</code> exactly once, you can create a function that maps each element of the first list to the corresponding element of the second list (for each element obtain the index and then use <code>list.nth_le</code>).</p>",
        "id": 269047920,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642983759
    },
    {
        "content": "<p>thanks very much folks</p>",
        "id": 269048463,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1642984520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459656\">Hans Parshall</span> has marked this topic as resolved.</p>",
        "id": 269048467,
        "sender_full_name": "Notification Bot",
        "timestamp": 1642984526
    },
    {
        "content": "<p>Will you be using this function in other definitions or proofs, Hans? As you can imagine, there is no canonical way to make this function, unless you have a total ordering on your range.</p>",
        "id": 269048555,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642984663
    },
    {
        "content": "<p>for the moment it was a placeholder, but this does make sense</p>",
        "id": 269049201,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1642985585
    }
]