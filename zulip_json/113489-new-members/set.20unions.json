[
    {
        "content": "<p>I am not particularly happy of having written these lines, in either version. Does anybody see how to shorten it ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">ι</span> <span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Union_union_distrib'</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">J₁</span> <span class=\"n\">J₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">J₁</span> <span class=\"bp\">∪</span> <span class=\"n\">J₂</span><span class=\"o\">)),</span> <span class=\"n\">s</span> <span class=\"bp\">↑</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">J₁</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">↑</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">J₂</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">↑</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">set.ext</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hxj</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_Union.1</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">J₁</span> <span class=\"bp\">∨</span> <span class=\"bp\">↑</span><span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">J₂</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">set.mem_union</span> <span class=\"bp\">↑</span><span class=\"n\">j</span> <span class=\"n\">J₁</span> <span class=\"n\">J₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"n\">exact</span> <span class=\"n\">subtype.mem</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">or.elim</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">set.mem_union_left</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">set.mem_Union.2</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"bp\">↑</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hxj</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">set.mem_union_right</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">set.mem_Union.2</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"bp\">↑</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hxj</span><span class=\"o\">,</span> <span class=\"o\">},</span>  <span class=\"o\">},</span>\n\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">or.elim</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hxj</span>  <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_Union.1</span> <span class=\"n\">hx1</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">set.mem_Union.2</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">set.mem_union_left</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subtype.mem</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hxj</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hxj</span>  <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_Union.1</span> <span class=\"n\">hx1</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">set.mem_Union.2</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">set.mem_union_right</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subtype.mem</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hxj</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Union_union_distrib''</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">J₁</span> <span class=\"n\">J₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">J₁</span> <span class=\"bp\">∪</span> <span class=\"n\">J₂</span><span class=\"o\">)),</span> <span class=\"n\">s</span> <span class=\"bp\">↑</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">J₁</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">↑</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">J₂</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">↑</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.subset.antisymm_iff.2</span> <span class=\"o\">,</span>  <span class=\"n\">split</span><span class=\"o\">,</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">set.Union_subset</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">J₁</span> <span class=\"bp\">∨</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">J₂</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">set.mem_union</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"n\">J₁</span> <span class=\"n\">J₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"n\">exact</span> <span class=\"n\">subtype.mem</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">or.elim</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">set.subset_union_of_subset_left</span>  <span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">set.subset_Union</span> <span class=\"o\">(</span><span class=\"n\">set.restrict</span> <span class=\"n\">s</span> <span class=\"n\">J₁</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">set.subset_union_of_subset_right</span>  <span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">set.subset_Union</span> <span class=\"o\">(</span><span class=\"n\">set.restrict</span> <span class=\"n\">s</span> <span class=\"n\">J₂</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n\n\n  <span class=\"n\">apply</span> <span class=\"n\">set.union_subset</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">set.Union_subset</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">set.subset_Union</span> <span class=\"o\">(</span><span class=\"n\">set.restrict</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">J₁</span> <span class=\"bp\">∪</span> <span class=\"n\">J₂</span><span class=\"o\">))</span>\n      <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">set.mem_union</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"n\">J₁</span> <span class=\"n\">J₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">or.intro_left</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">subtype.mem</span> <span class=\"n\">i</span><span class=\"o\">))⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">set.Union_subset</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">set.subset_Union</span> <span class=\"o\">(</span><span class=\"n\">set.restrict</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">J₁</span> <span class=\"bp\">∪</span> <span class=\"n\">J₂</span><span class=\"o\">))</span>\n      <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">set.mem_union</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"n\">J₁</span> <span class=\"n\">J₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">or.intro_right</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">subtype.mem</span> <span class=\"n\">i</span><span class=\"o\">))⟩,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261333379,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1636769506
    },
    {
        "content": "<p>Here it is golfed to a reasonable state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">ι</span> <span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">ι</span> <span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Union_union_distrib'</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">J₁</span> <span class=\"n\">J₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">J₁</span> <span class=\"bp\">∪</span> <span class=\"n\">J₂</span><span class=\"o\">)),</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J₁</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J₂</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hj</span><span class=\"bp\">|</span><span class=\"n\">hj</span><span class=\"o\">)⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span><span class=\"o\">⟩⟩),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"n\">hj</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">or.inr</span> <span class=\"n\">hj</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rintro\">tactic#rintro</a> is amazing!</p>",
        "id": 261334267,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636770903
    },
    {
        "content": "<p>Note also that explicitly denoting the coercions is not necessary.</p>",
        "id": 261334359,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636771077
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Union_subtype\">docs#set.Union_subtype</a>? If we had <code>⋃ i : s, f I = ⋃ i ∈ s, f i</code> then you could just apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Union_or\">docs#set.Union_or</a> after <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_union\">docs#set.mem_union</a></p>",
        "id": 261350832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636795635
    },
    {
        "content": "<p>Ah, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.bUnion_eq_Union\">docs#set.bUnion_eq_Union</a> in reverse</p>",
        "id": 261351032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636795928
    },
    {
        "content": "<p>What about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">set.bUnion_eq_Union'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">supr_subtype'</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Union_union_distrib'</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">J₁</span> <span class=\"n\">J₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">J₁</span> <span class=\"bp\">∪</span> <span class=\"n\">J₂</span><span class=\"o\">)),</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J₁</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J₂</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">set.bUnion_eq_Union'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">set.bUnion_eq_Union'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">set.bUnion_eq_Union'</span><span class=\"o\">,</span> <span class=\"n\">set.bUnion_union</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But mainly, this indicates that what you are doing is not really idiomatic: instead of using Unions over subtypes, it is more usual to use a Union with the condition that the point belongs to a subset (called <code>bUnion</code> in our naming conventions). I.e., if you replace your lemma with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Union_union_distrib'</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">J₁</span> <span class=\"n\">J₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">J₁</span> <span class=\"bp\">∪</span> <span class=\"n\">J₂</span><span class=\"o\">)),</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">J₁</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">J₂</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>then this is just <code>bUnion_union</code>.</p>",
        "id": 261352091,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1636797519
    }
]