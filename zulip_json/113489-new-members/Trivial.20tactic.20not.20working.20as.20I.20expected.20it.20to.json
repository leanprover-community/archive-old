[
    {
        "content": "<p>Hello guys, </p>\n<p>first, I am new here so I apologize if this isn't the space to ask these questions. </p>\n<p>I'm trying to create a SAT solver where we have variables (of type form.FVar which takes a string as parameter)  and each variable is either assigned true or false.  This is determined by a object of type valuation which maps a string to a boolean value. </p>\n<p>I now want to proof the following: <br>\nGiven the following SAT problem expression : \"x\" (just a single var x), give an potential valuation such that the entire expression evaluates to true. </p>\n<p>In this example, such a valuation clearly exists. The mapping from \"x\" to true. <br>\nHowever, when I try to solve this simple tactic, I get a problem: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">form</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">FVar</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">form</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">valuation</span> <span class=\"o\">:=</span> <span class=\"n\">string</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">valid</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">form</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">form.FVar</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">satisfiable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">form</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span><span class=\"o\">,</span> <span class=\"n\">valid</span> <span class=\"n\">V</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toyexample</span> <span class=\"o\">:=</span> <span class=\"n\">form.FVar</span> <span class=\"s2\">\"x\"</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">proof_simple</span> <span class=\"o\">:</span> <span class=\"n\">satisfiable</span> <span class=\"n\">toyexample</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"s2\">\"x\"</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">satisfiable</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exists.intro</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span> <span class=\"bp\">&lt;</span><span class=\"c1\">-- problem here!</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So in my proof I create a valuation V such that the entire sat expression evaluates to true. Then I use exists.intro V to use it as a witness. The goal after this step is ⊢ valid V toyexample, which I thought should be solveable with the 'trivial' tactic. However, applying this I get the following error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">trivial</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_bool</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_bool</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">valid</span> <span class=\"n\">V</span> <span class=\"n\">toyexample</span>\n</code></pre></div>\n<p>I have been stuck on this for longer than I'd like to amit, any help is greatly appreciated</p>",
        "id": 320932567,
        "sender_full_name": "Kasper",
        "timestamp": 1673528712
    },
    {
        "content": "<p>This is not a lean 4 problem at least judging by your syntax.</p>",
        "id": 320934489,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1673529321
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Trivial.20tactic.20not.20working.20as.20I.20expected.20it.20to\">#lean4 &gt; Trivial tactic not working as I expected it to</a> by <span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span>.</p>",
        "id": 320936955,
        "sender_full_name": "Notification Bot",
        "timestamp": 1673530056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"579335\">@Kasper</span> Since your question is not about Lean 4, I moved it here. <code>trivial</code> is not supposed to solve this goal.<br>\nYou're transitioning between <code>bool</code> and <code>Prop</code> in your code, which adds the coercion <code>bool -&gt; Prop</code> in some places. This coercion defined to be <code>fun b, b = tt</code>. So <code>exact rfl</code> works instead of <code>trivial</code>.<br>\nA maybe more systematic approach unfolds the notions in your goal to prove it: <code>simp_rw [toyexample, valid, V, if_pos, to_bool_true]</code> (requires <code>import tactic.basic</code> and a dependency on <code>mathlib</code>)</p>",
        "id": 320938729,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673530582
    },
    {
        "content": "<p>Thank you for the clear explanation! I noticed this when trying to debug too that bool and Prop are not always treated the same (I thought they always converted automatically). </p>\n<p>Just a small follow up question, for debugging purposes, I have tried to #eval a Prop but the printed result is always <a href=\"https://github.com/leanprover-community/mathlib/pull/0\">#0</a> for me regardless if the Prop is true or not. If I try to eval a boolean I correctly get true or false. Is there a way to do this? Might help me in the future with debugging</p>",
        "id": 320947059,
        "sender_full_name": "Kasper",
        "timestamp": 1673532646
    },
    {
        "content": "<p>Goedel's theorem says that you can't hope to eval the truth-values of Props in general. There is no algorithm for mathematics.</p>",
        "id": 320958309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673535430
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579335\">Kasper</span> <a href=\"#narrow/stream/113489-new-members/topic/Trivial.20tactic.20not.20working.20as.20I.20expected.20it.20to/near/320947059\">said</a>:</p>\n<blockquote>\n<p>Just a small follow up question, for debugging purposes, I have tried to #eval a Prop but the printed result is always <a href=\"https://github.com/leanprover-community/mathlib/pull/0\">#0</a> for me regardless if the Prop is true or not</p>\n</blockquote>\n<p>This is sort of a long-standing \"bug\" in <code>#eval</code>. When you evaluate, what happens is that Lean compiles your code to a bytecode that's then evaluated by a virtual machine. Part of compilation is erasing everything that's computationally irrelevant. This includes types (i.e., type erasure) and proofs. If you evaluate a Prop, then <em>everything</em> is erased, and <code>#0</code> is some side-effect of the evaluator trying to get the result of the evaluation of absolutely nothing at all.</p>",
        "id": 320959579,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673535758
    },
    {
        "content": "<p>One way to inspect this is with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler</span> <span class=\"n\">true</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>This shows the compiled bytecode</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">compiler.optimize_bytecode</span><span class=\"o\">]</span>  <span class=\"n\">_main</span> <span class=\"mi\">0</span>\n<span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">scnstr</span> <span class=\"bp\">#</span><span class=\"mi\">0</span>\n<span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ret</span>\n</code></pre></div>\n<p>The <code>scnstr #0</code> pushes a zero-argument constructor number 0 onto the stack, which is then returned with <code>ret</code>, and then printed by the <code>#eval</code> command (note the error \"result type does not have an instance of type class 'has_repr', dumping internal representation\")</p>",
        "id": 320962320,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673536423
    }
]