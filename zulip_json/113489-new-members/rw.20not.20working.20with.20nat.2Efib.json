[
    {
        "content": "<p>(from the coderwars fibonacci problem). I think I'm misunderstanding something about the interface between <code>nat</code> and <code>real</code> here, and the way <code>nat.fib</code> is defined. I'm getting errors on the last two lines even though the rewrites look like they're trying to rewrite things that are there. Any comments or links to resources would be appreciated; I've had a hard time finding useful info on working with reals in tactic mode. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">f_succ_succ&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">binet&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">phi</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">psi</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">f_succ_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194574103,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587262032
    },
    {
        "content": "<p>Is there a reason that your lemma has a <code>'</code> but you rewrite with a lemma without the <code>'</code>?<br>\nCan you provide working code?</p>",
        "id": 194574993,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587263822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/rw.20not.20working.20with.20nat.2Efib/near/194574993\" title=\"#narrow/stream/113489-new-members/topic/rw.20not.20working.20with.20nat.2Efib/near/194574993\">said</a>:</p>\n<blockquote>\n<p>Is there a reason that your lemma has a <code>'</code> but you rewrite with a lemma without the <code>'</code>?<br>\nCan you provide working code?</p>\n</blockquote>\n<p>Sorry! This error got introduce when I simplified my code to show the error more concisely. The error is still happening though.</p>",
        "id": 194577079,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587267955
    },
    {
        "content": "<p>Can you provide working code then?</p>",
        "id": 194577332,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587268461
    },
    {
        "content": "<p>lemma f_succ_succ' (n : ℕ) : fib (succ (succ n)) = (fib (succ n)) + (fib n) := <br>\nbegin <br>\nsorry,<br>\nend </p>\n<p>theorem binet' (n : ℕ) : (nat.fib n : ℝ) = (phi^n - psi^n) / real.sqrt 5 :=<br>\nbegin <br>\ninduction n with k hk,<br>\nsimp,<br>\ninduction k with l hl,<br>\nsorry,<br>\nrw f_succ_succ',<br>\nrw hl,<br>\nrw hk,<br>\nend</p>",
        "id": 194580786,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587275217
    },
    {
        "content": "<p>If you put the code between</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">```</span>\n<span class=\"n\">your</span> <span class=\"n\">code</span> <span class=\"n\">here</span>\n<span class=\"bp\">```</span>\n</pre></div>\n\n\n<p>then you get syntax highlighting</p>",
        "id": 194581702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587276824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"261068\">@ROCKY KAMEN-RUBIO</span> </p>\n<p>For a Minimum Working Example, you want to include imports and all definitions required here. so it should look like this:</p>\n<p>For something from Codewars, include the preloaded file, so people can just copy what you post here and run it.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span>\n       <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">def</span> <span class=\"n\">phi</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">def</span> <span class=\"n\">psi</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">f_succ_succ&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">binet&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">phi</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">psi</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">f_succ_succ&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194582751,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587278946
    },
    {
        "content": "<p>The reasons why your rewrites weren't working was because in your goal, you have <code>↑(fib (succ l) + fib l)</code>, but in<code>hk</code> you have <code>↑(fib (succ l))</code>. If you use <code>norm_num</code>, your goal becomes <code>↑(fib (succ l)) + ↑(fib l)</code> and your rewrite works.</p>",
        "id": 194582801,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587279041
    },
    {
        "content": "<p>(Removed, Kata spoiler?)</p>",
        "id": 194582845,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587279152
    },
    {
        "content": "<p>(Kata spoiler?)</p>",
        "id": 194583718,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587280831
    }
]