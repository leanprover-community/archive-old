[
    {
        "content": "<p>Hi, </p>\n<p>I'm struggling how to figure out how to write proofs that aren't super super long. In particular, my current workflow is to write a bunch of have statements and then rewrite using them. This matches my mental model of how I think about how I would prove something on paper--in particular the have statements seem to be nice for communicating a proof to a human. However, they get quite cumbersome and people who answer my questions here (thanks again, especially <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> ) seem to be able to prove things more efficiently. Or at least, they know how to golf all of the have statements away. </p>\n<p>A good example is the following lemma, part of proving that a monoid object in the category of types is a monoid:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.closed.cartesian</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.has_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.monoidal.Mon_</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.types</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.shapes.types</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.types</span>\n\n<span class=\"c1\">-- set_option pp.universes true</span>\n<span class=\"c1\">-- set_option pp.implicit true</span>\n<span class=\"c1\">-- set_option trace.simplify.rewrite true</span>\n\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits.types</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.concrete_category</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoidal_category</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">monoidal_of_has_finite_products</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_one_of_Mon__Type</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Mon_</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">M.X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">terminal_iso.symm.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">M.one</span><span class=\"o\">)</span> <span class=\"n\">punit.star</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_mul_of_Mon__Type</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Mon_</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">M.X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">M.mul</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp, reassoc]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">binary_product_iso_limits_fst_eq_fst</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">‚â´</span> <span class=\"n\">limits.prod.fst</span> <span class=\"bp\">=</span> <span class=\"n\">prod.fst</span> <span class=\"o\">:=</span>\n<span class=\"n\">limits.prod.lift_fst</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">@[simp, reassoc]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">binary_product_iso_limits_snd_eq_snd</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">‚â´</span> <span class=\"n\">limits.prod.snd</span> <span class=\"bp\">=</span> <span class=\"n\">prod.snd</span> <span class=\"o\">:=</span>\n<span class=\"n\">limits.prod.lift_snd</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">punit_prod_iso</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">punit</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">√ó</span> <span class=\"n\">A</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">‚â™‚â´</span>\n  <span class=\"n\">tensor_iso</span> <span class=\"n\">terminal_iso.symm</span> <span class=\"o\">(</span><span class=\"n\">iso.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">‚â™‚â´</span>\n  <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">_</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">punit_morph_prod</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Mon_</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">punit</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"n\">M.X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">M.X</span> <span class=\"bp\">√ó</span> <span class=\"n\">M.X</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.hom</span> <span class=\"bp\">‚â´</span>\n  <span class=\"o\">(</span><span class=\"n\">tensor_iso</span> <span class=\"n\">terminal_iso.symm</span> <span class=\"o\">(</span><span class=\"n\">iso.refl</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">‚â´</span>\n  <span class=\"o\">(</span><span class=\"n\">M.one</span> <span class=\"bp\">‚äó</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">))</span> <span class=\"bp\">‚â´</span>\n  <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_map_bpo_commutes</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">as_hom</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span>\n<span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">=</span>\n<span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">‚â´</span>\n<span class=\"n\">limits.prod.map</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext1</span><span class=\"bp\">;</span> <span class=\"n\">simpa</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rearrange_comp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span> <span class=\"bp\">‚â´</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">‚â´</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rearrange_comp_2</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span> <span class=\"bp\">‚â´</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">one_mul_of_Mon__Type</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Mon_</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">M.mul</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">om</span> <span class=\"o\">:=</span> <span class=\"n\">M.one_mul</span><span class=\"o\">,</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">morph_one_a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"o\">(</span><span class=\"n\">terminal_iso.symm.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">M.one</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">punit.star</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">((</span><span class=\"n\">terminal_iso.symm.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">M.one</span><span class=\"o\">)</span> <span class=\"n\">punit.star</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">morph_one_comp_a</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">as_hom</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">terminal_iso.inv</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">))</span> <span class=\"bp\">‚â´</span>\n    <span class=\"n\">as_hom</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">M.one</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">punit.star</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">((</span><span class=\"n\">terminal_iso.symm.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">M.one</span><span class=\"o\">)</span> <span class=\"n\">punit.star</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category_theory.types_comp_apply</span><span class=\"o\">,</span> <span class=\"n\">category_theory.iso.symm_hom</span><span class=\"o\">],</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">comm_rectangle_terminal_iso</span><span class=\"o\">:</span>\n    <span class=\"n\">as_hom</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"o\">(</span><span class=\"n\">terminal_iso.inv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">))</span> <span class=\"bp\">‚â´</span>\n    <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.hom</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.hom</span> <span class=\"bp\">‚â´</span>\n    <span class=\"o\">((</span><span class=\"n\">terminal_iso.symm.hom</span><span class=\"o\">)</span> <span class=\"bp\">‚äó</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">)),</span> <span class=\"c1\">-- you have to have the outer parens</span>\n    <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">prod_map_bpo_commutes</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">comm_rectangle_prod_map</span> <span class=\"o\">:</span>\n    <span class=\"n\">as_hom</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">M.one</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">))</span> <span class=\"bp\">‚â´</span>\n    <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.hom</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.hom</span> <span class=\"bp\">‚â´</span>\n    <span class=\"o\">(</span><span class=\"n\">M.one</span> <span class=\"bp\">‚äó</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">)),</span> <span class=\"c1\">-- you have to have the outer parens</span>\n    <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">prod_map_bpo_commutes</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">rearrange_composition</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">as_hom</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">terminal_iso.inv</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">))</span> <span class=\"bp\">‚â´</span>\n    <span class=\"n\">as_hom</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">M.one</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">)))</span> <span class=\"bp\">‚â´</span>\n    <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">M.X</span> <span class=\"n\">M.X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.hom</span> <span class=\"bp\">‚â´</span>\n    <span class=\"n\">M.mul</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">as_hom</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">terminal_iso.inv</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">))</span> <span class=\"bp\">‚â´</span>\n    <span class=\"o\">(</span><span class=\"n\">as_hom</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">M.one</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">))</span> <span class=\"bp\">‚â´</span>\n    <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">M.X</span> <span class=\"n\">M.X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.hom</span><span class=\"o\">))</span> <span class=\"bp\">‚â´</span>\n    <span class=\"n\">M.mul</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">rearrange_comp</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- simp,</span>\n      <span class=\"c1\">-- `simp` should work here, at the time of writing this comment it seems to time out</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">rearrange_composition_2</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">as_hom</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">terminal_iso.inv</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">))</span> <span class=\"bp\">‚â´</span>\n    <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"n\">M.X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.hom</span> <span class=\"bp\">‚â´</span>\n    <span class=\"o\">(</span><span class=\"n\">M.one</span> <span class=\"bp\">‚äó</span> <span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">))</span> <span class=\"bp\">‚â´</span>\n    <span class=\"n\">M.mul</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">as_hom</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">terminal_iso.inv</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">))</span> <span class=\"bp\">‚â´</span>\n    <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"n\">M.X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.hom</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span>\n    <span class=\"o\">(</span><span class=\"n\">M.one</span> <span class=\"bp\">‚äó</span> <span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span>\n    <span class=\"n\">M.mul</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">rearrange_comp_2</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">same_morphism</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"o\">(</span><span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">M.X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.hom</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"n\">M.X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.hom</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">ppo_equality</span> <span class=\"o\">:</span>\n    <span class=\"o\">(((</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">punit</span> <span class=\"n\">M.X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.hom</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">terminal_iso.symm.hom</span> <span class=\"bp\">‚äó</span> <span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">))</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">_</span> <span class=\"n\">M.X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">prod.snd</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n\n  <span class=\"n\">unfold</span> <span class=\"n\">has_mul.mul</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_one.one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">morph_one_comp_a</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"o\">(</span><span class=\"n\">types_comp_apply</span> <span class=\"o\">(</span><span class=\"n\">as_hom</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">terminal_iso.inv</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">))</span> <span class=\"bp\">‚â´</span>\n                         <span class=\"n\">as_hom</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">M.one</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">)))</span>\n                         <span class=\"o\">((</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">M.X</span> <span class=\"n\">M.X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.hom</span> <span class=\"bp\">‚â´</span>\n                         <span class=\"n\">M.mul</span><span class=\"o\">))],</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rearrange_composition</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">comm_rectangle_prod_map</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rearrange_composition_2</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">same_morphism</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">comm_rectangle_terminal_iso</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">om</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ppo_equality</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>\n<p>Each of the have statements/auxillary lemmas pretty much comes down to simp. Does anyone have any tips and tricks on how one golfs such a proof?</p>",
        "id": 294804692,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1661232319
    },
    {
        "content": "<p>This is how I would have approached this problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoidal_category</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">monoidal_of_has_finite_products</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_one_of_Mon__Type</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Mon_</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">M.X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">terminal_iso.symm.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">M.one</span><span class=\"o\">)</span> <span class=\"n\">punit.star</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_mul_of_Mon__Type</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Mon_</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">M.X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">M.mul</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">one_mul_of_Mon__Type</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Mon_</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">has_mul.mul</span><span class=\"o\">,</span> <span class=\"n\">has_one.one</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">M.one</span> <span class=\"bp\">‚äó</span> <span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">M.mul</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">_</span> <span class=\"n\">M.X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">M.one_mul</span> <span class=\"o\">},</span>\n  <span class=\"n\">convert</span> <span class=\"n\">_root_.congr_fun</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">terminal_iso.inv</span> <span class=\"n\">punit.star</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">binary_product_iso</span> <span class=\"n\">M.X</span> <span class=\"n\">M.X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">mono_iff_injective</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">elementwise_of</span> <span class=\"o\">(</span><span class=\"n\">limits.prod.map_fst</span> <span class=\"n\">M.one</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">)),</span>\n      <span class=\"n\">elementwise_of</span> <span class=\"o\">(</span><span class=\"n\">limits.prod.map_snd</span> <span class=\"n\">M.one</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">M.X</span><span class=\"o\">))]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This is roughly how I came up with this proof:</p>\n<ol>\n<li>I know that the proof \"is just <code>M.one_mul</code>\", so I first applied <code>a</code> into <code>M.one_mul</code> (by composing with <code>binary_product_iso</code> and using <code>congr_fun</code>.</li>\n<li>I applied <code>simp</code> on both the goal and the hypothesis obtained, and see what I have. In this case the hypothesis already looks like the goal, so I used <code>convert</code>. </li>\n<li>In the lhs, the two elements (in <code>limits.prod _ _</code>) are equal since the components are (this is usually done by <code>ext</code>). I moved into <code>prod</code> since the <code>ext</code>lemmas there looks better.</li>\n<li>Apply <code>simp</code> again. The only barrier seems to be <code>limits.prod.fst (limits.prod.map foo)</code> so the <code>elementwise_of</code> versions of them are provided. <code>simp</code> then closes the goal.</li>\n<li>The rhs can also be closed by <code>simp</code>.</li>\n</ol>",
        "id": 294809650,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1661235861
    },
    {
        "content": "<p>Ok, I have one question:</p>\n<p>how would I \"use <code>congr_fun</code>\" without knowing that I already had to use the <code>convert</code> tactic? All of the tactics I use seem to give errors.</p>",
        "id": 294958043,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1661295630
    },
    {
        "content": "<p>I would first <code>have := _root_.congr_fun this (terminal_iso.inv punit.star, a)</code><br>\nAnd then I could <code>simp at this ‚ä¢</code>.</p>",
        "id": 294960427,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1661297458
    }
]