[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <a href=\"https://github.com/leanprover/mathlib/pull/421#discussion_r225011707\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/421#discussion_r225011707\">said</a>:</p>\n<blockquote>\n<p>You shouldn't use any tactics in a definition unless you know what you're doing, I think.</p>\n</blockquote>\n<p>Why is this?</p>",
        "id": 135796356,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539557257
    },
    {
        "content": "<p>because it would be hxxx when you unfold the definition</p>",
        "id": 135796362,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539557282
    },
    {
        "content": "<p>The rule of thumb is: tactics generate weird proof terms. So sure use tactics when proving theorems (because the proof terms are forgotten) and you can even use tactics when defining complex things like <code>ring R</code> for the bits which are proofs (e.g. proof of associativity) -- but the moment you use a tactic as part of a definition of some data it's not going to unfold well, making the definition hard to use in general.</p>",
        "id": 135796540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539557560
    },
    {
        "content": "<p>Thanks, with the exception for \"proof bits\" of structures this makes much more sense. I just went through the code I've written and I've been more or less following this without knowing it.</p>",
        "id": 135797057,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539558603
    }
]