[
    {
        "content": "<p>After <a href=\"https://github.com/leanprover-community/mathlib/pull/13273\">#13273</a>, if I apply <code>uniform_group.uniform_continuous_iff_open_ker</code> to a monoid_hom <code>f : Œ± ‚Üí* Œ≤</code>, a coercion from <code>Œ± ‚Üí* Œ≤</code> to <code>Œ± ‚Üí* Œ≤</code> appears in the goal.  I can get rid of it using change (as in the mwe below), but what would be a better way to do that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.uniform_group</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_group</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">discrete_topology</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_group</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí*</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">filter.tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.coercions</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">uniform_continuous.continuous</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">uniform_group.uniform_continuous_iff_open_ker</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">is_open</span> <span class=\"bp\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">f.ker</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279002442,
        "sender_full_name": "Mar√≠a In√©s de Frutos Fern√°ndez",
        "timestamp": 1649960386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span></p>",
        "id": 279002536,
        "sender_full_name": "Mar√≠a In√©s de Frutos Fern√°ndez",
        "timestamp": 1649960420
    },
    {
        "content": "<p>I thought at first that there was a typo in this question but it really does seem to be a coercion from <code>Œ± ‚Üí* Œ≤</code> to itself!</p>",
        "id": 279004769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649961642
    },
    {
        "content": "<p>Oh yeah, I didn‚Äôt think about it but I totally see why it is happening</p>",
        "id": 279007092,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1649962896
    },
    {
        "content": "<p>Tbh I don‚Äôt see any other solution that duplicating the lemma to keep the monoid_hom version :/</p>",
        "id": 279007670,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1649963195
    },
    {
        "content": "<p>The correct fix here is to make <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.ker\">docs#monoid_hom.ker</a> take in <code>(f : F)</code>, where <code>monoid_hom_class F Œ± Œ≤</code>, rather than <code>f : Œ± ‚Üí* Œ≤</code>.</p>",
        "id": 279007922,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649963316
    },
    {
        "content": "<p>Then you don't need the coercion to apply it in <code>uniform_group.uniform_continuous_iff_open_ker</code>.</p>",
        "id": 279007953,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649963336
    },
    {
        "content": "<p>But that would break dot notation right ?</p>",
        "id": 279007984,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1649963350
    },
    {
        "content": "<p>Yeah</p>",
        "id": 279007995,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649963355
    },
    {
        "content": "<p>And there‚Äôs another problem : a linear map is an add_monoid_hom, but the kers have different types</p>",
        "id": 279008054,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1649963386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> is working on preserving the dot notation in such cases but as far as I know this is still WIP.</p>",
        "id": 279008058,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649963387
    },
    {
        "content": "<p>Is that a Lean problem, though?</p>",
        "id": 279008087,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649963402
    },
    {
        "content": "<p>I'm not saying you should rename <code>monoid_hom.ker</code> to <code>ker</code> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 279008193,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649963442
    },
    {
        "content": "<p>Yes but if we make dot notation work we won‚Äôt have an explicit distinction</p>",
        "id": 279008294,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1649963496
    },
    {
        "content": "<p>That's why I think we shouldn't care much about dot notation here.</p>",
        "id": 279008382,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649963528
    },
    {
        "content": "<p>You can always <code>open monoid_hom</code> whenever you use <code>monoid_hom.ker</code>. As it happens, <code>f.ker</code> and <code>ker f</code> have the same number of characters.</p>",
        "id": 279008467,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649963569
    },
    {
        "content": "<p>Yes but the second one needs more parentheses x)</p>",
        "id": 279008525,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1649963600
    },
    {
        "content": "<p>(Yeah, that‚Äôs not a big problem)</p>",
        "id": 279008541,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1649963612
    },
    {
        "content": "<p>What's the coercion say the instance name is if you hover over it?</p>",
        "id": 279010273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649964416
    },
    {
        "content": "<p>Just to check; does Ya√´l's suggestion actually break dot notation on <code>monoid_hom</code>s if it remains in the <code>monoid_hom</code> namespace?</p>",
        "id": 279010348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649964461
    },
    {
        "content": "<p>I haven't checked in the infoview, but I know it is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.has_coe_t\">docs#monoid_hom.has_coe_t</a></p>",
        "id": 279010529,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649964556
    },
    {
        "content": "<p>I ran into this the other day; that instance is nasty because it has no (d)simp lemmas</p>",
        "id": 279010649,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649964603
    },
    {
        "content": "<p>It does have a few, but we're missing lots.</p>",
        "id": 279011728,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649965191
    },
    {
        "content": "<p>It currently causes a problem because Lean 3 doesn't have eta expansion for structures, so this series of instances is not defeq everywhere. If we were using old structures as <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> suggests, this would be fine without waiting for Lean 4.</p>",
        "id": 279012088,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649965390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/monoid_hom.20coercion/near/279010273\">said</a>:</p>\n<blockquote>\n<p>What's the coercion say the instance name is if you hover over it?</p>\n</blockquote>\n<p>The infoview shows <code>coe</code> <code>Œ± ‚Üí* Œ≤</code> <code>Œ± ‚Üí* Œ≤</code> <code>coe_to_lift</code> <code>f</code></p>",
        "id": 279013820,
        "sender_full_name": "Mar√≠a In√©s de Frutos Fern√°ndez",
        "timestamp": 1649966268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span>, where's the lemma that says <code>‚áë‚Üëf = ‚áëf</code> for that come?</p>",
        "id": 279013878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649966286
    },
    {
        "content": "<p>Likely missing.</p>",
        "id": 279013905,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649966304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406490\">@Mar√≠a In√©s de Frutos Fern√°ndez</span>, you can hover over <code>coe_to_lift</code> to dig deeper</p>",
        "id": 279013926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649966316
    },
    {
        "content": "<blockquote>\n<p>Likely missing.</p>\n</blockquote>\n<p>That's the most important lemma to have!</p>",
        "id": 279013967,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649966332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/monoid_hom.20coercion/near/279013926\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"406490\">Mar√≠a In√©s de Frutos Fern√°ndez</span>, you can hover over <code>coe_to_lift</code> to dig deeper</p>\n</blockquote>\n<p>True. That shows the <code>monoid_hom.has_coe_t</code> (<code>has_coe_t (Œ± ‚Üí* Œ≤) (Œ± ‚Üí* Œ≤)</code>).</p>",
        "id": 279014169,
        "sender_full_name": "Mar√≠a In√©s de Frutos Fern√°ndez",
        "timestamp": 1649966416
    },
    {
        "content": "<p>As predicted by <span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> then, thanks for confirming</p>",
        "id": 279014245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649966444
    },
    {
        "content": "<p>One option that I have suggested before (might be in a different context): should we instead define <code>subgroup.ker</code> and <code>submodule.ker</code> as the closure of <code>f‚Åª¬π {1}</code> (or <code>f‚Åª¬π {0}</code> as applicable), where <code>f</code> is an arbitary <em>function</em>? Then we don't need to care about the precise kind of map <code>f</code> happens to be, and we can distinguish kernel-as-subgroup from kernel-as-submodule.</p>",
        "id": 279060051,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1650011203
    }
]