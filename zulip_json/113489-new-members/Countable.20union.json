[
    {
        "content": "<p>I'm trying to re-create a measurable space. In looking at the mathlib definition, the structure field for closed under countable unions is encoded like this ```lean <br>\n∀ f : ℕ → set α, (∀ i : ℕ, is_measurable (f i)) → is_measurable (⋃i, f i)) </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">This</span> <span class=\"n\">doesn&#39;t</span> <span class=\"n\">look</span> <span class=\"n\">anything</span> <span class=\"n\">like</span> <span class=\"n\">the</span> <span class=\"s2\">&quot;on paper&quot;</span> <span class=\"n\">way</span> <span class=\"n\">of</span> <span class=\"n\">describing</span> <span class=\"n\">closed</span> <span class=\"n\">under</span> <span class=\"n\">countable</span> <span class=\"n\">unions</span><span class=\"bp\">..</span> <span class=\"n\">just</span> <span class=\"n\">to</span> <span class=\"kn\">check</span> <span class=\"n\">my</span> <span class=\"n\">understanding</span><span class=\"o\">,</span> <span class=\"n\">is</span> <span class=\"n\">the</span> <span class=\"n\">space</span> <span class=\"n\">of</span> <span class=\"n\">functions</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"n\">acting</span> <span class=\"n\">as</span> <span class=\"n\">an</span> <span class=\"n\">indexed</span> <span class=\"n\">set</span> <span class=\"n\">of</span> <span class=\"n\">subsets</span><span class=\"err\">?</span> <span class=\"n\">Can</span> <span class=\"n\">I</span> <span class=\"n\">also</span> <span class=\"n\">just</span> <span class=\"n\">use</span> <span class=\"bp\">```</span> <span class=\"o\">(</span> <span class=\"n\">closed_unions</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Union</span> <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">```</span> <span class=\"err\">?</span>\n</code></pre></div>",
        "id": 206763983,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597273863
    },
    {
        "content": "<p>Your alternative doesn't make (mathematical) sense, as it doesn't have any hypothesis about the measurability of the sets <code>f i</code>.</p>",
        "id": 206764425,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597274184
    },
    {
        "content": "<p>(You can fix the formatting of your message by adding a newline before the triple backticks)</p>",
        "id": 206765506,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597275026
    },
    {
        "content": "<p>Ok I see <code>⋃ i, f i </code> is like what we'd do on paper but now I don't understand what is going on in lean. Is it just an alias for <code>set.Union</code> ?</p>",
        "id": 206773350,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597283581
    },
    {
        "content": "<p><code>#print notation ⋃</code></p>",
        "id": 206773606,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597283941
    },
    {
        "content": "<p><code>⋃</code>:1024 binders <code>,</code>:0 (scoped 0) := <a href=\"https://github.com/leanprover-community/mathlib/issues/0\">#0</a></p>",
        "id": 206774000,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597284386
    },
    {
        "content": "<p>oh, sorry, I copied the character from your last message, which is not the same as one that's used in mathlib</p>",
        "id": 206774151,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597284581
    },
    {
        "content": "<p><code>#print notation  ∪</code><br>\nyields<br>\n<code>_ `∪`:65 _:65 := has_union.union #1 #0</code><br>\nand then you might <code>#check has_union.union</code> or right click on that and go to definition</p>",
        "id": 206774218,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597284632
    },
    {
        "content": "<p><code>⋃ i, f i</code> is indeed notation for <code>set.Union f</code>. The <code>#print notation</code> output for notation that uses the binders feature is not very helpful, but you can use hover/jump-to-definition to see what it means.</p>",
        "id": 206774703,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597285215
    },
    {
        "content": "<p>thank you both, I got it now</p>",
        "id": 206775225,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597285914
    },
    {
        "content": "<p>Related question. Do you know how I get the complement notation to work e.g. <code>sᶜ</code> right now it says unexpected token so I have to do <code>set.compl s</code></p>",
        "id": 206775356,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597286088
    },
    {
        "content": "<p>I assume I need to import something but I couldn't find it in the docs</p>",
        "id": 206775362,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597286101
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">disjointed</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">countable</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n</code></pre></div>\n\n\n<p>this is what I have imported so far</p>",
        "id": 206775386,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597286157
    },
    {
        "content": "<p>I think you have an older mathlib/Lean</p>",
        "id": 206775654,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597286499
    },
    {
        "content": "<p>It used to be <code>-s</code></p>",
        "id": 206775658,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597286505
    },
    {
        "content": "<p>oh must be right, <code>-s</code> works</p>",
        "id": 206775694,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597286523
    },
    {
        "content": "<p>thanks</p>",
        "id": 206775703,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597286529
    },
    {
        "content": "<p>Then you should upgrade</p>",
        "id": 206786669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597302938
    },
    {
        "content": "<p>I did! All is working now</p>",
        "id": 206819201,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597327823
    }
]