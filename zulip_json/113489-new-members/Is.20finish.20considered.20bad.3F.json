[
    {
        "content": "<p>I've noticed (by a quick github search) that use of <code>finish</code> seems very rare in mathlib. However, I'm often using in it my own lemmas when <code>finish</code> works and it's not obvious what else to do.</p>\n<p>Is <code>finish</code> considered bad? Should it be avoided in mathlib?</p>\n<p>What are some techniques for dealing with situations where <code>finish</code> closes the goal, but it's not clear how to proceed otherwise? I'm aware of <code>show_term</code>, but <code>finish</code> usually spits out something pretty horrendous from that!</p>",
        "id": 292276402,
        "sender_full_name": "Sam",
        "timestamp": 1659816293
    },
    {
        "content": "<p>Finish can be a bit slow, so while it's not necessarily banned it often gets golfed out to speed things up. I guess it's a bit situational, but if you are using it for logic goals the tactics like <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#tauto\">tactic#tauto</a> (and variants) do less than finish so are faster when they do work. If you post some examples we can take a look at alternative proofs.</p>",
        "id": 292276648,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659816680
    },
    {
        "content": "<p>I always at least try <code>hint</code> when resorting to <code>finish</code>, I think that will reliably tell me whether something like <code>tauto</code> is a valid substitute, won't it? I already only use it as a last resort, although I expect more experienced people know better techniques.</p>",
        "id": 292276791,
        "sender_full_name": "Sam",
        "timestamp": 1659816843
    },
    {
        "content": "<p>maybe <code>squeeze_simp</code> could help?</p>",
        "id": 292276803,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1659816881
    },
    {
        "content": "<p>that tells you what works if <code>simp</code> works, and I believe <code>finish</code> calls the simplifier</p>",
        "id": 292276822,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1659816906
    },
    {
        "content": "<p>I'm already doing a lot of <code>simp</code>ing. This is situation where <code>simp * at *</code> even isn't getting anywhere. I'll try to find a nice example that doesn't rely on too many other defs.</p>",
        "id": 292276894,
        "sender_full_name": "Sam",
        "timestamp": 1659816989
    },
    {
        "content": "<p>Here's a simple case where I'm using a <code>finish</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list.containsp</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">list.containsp_cons_of_neg</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">containsp</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">l.containsp</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.containsp</span><span class=\"o\">,</span> <span class=\"n\">list.mem_cons_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.containsp</span><span class=\"o\">],</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292277009,
        "sender_full_name": "Sam",
        "timestamp": 1659817164
    },
    {
        "content": "<p>Ignore the name of that lemma, I think that's bad/wrong.</p>",
        "id": 292277023,
        "sender_full_name": "Sam",
        "timestamp": 1659817197
    },
    {
        "content": "<p>Maybe in this case there's some smart way to handle existentials that I don't know? <code>hint</code>, <code>simp</code>, <code>library_search</code> and <code>suggest</code> all seem like dead-ends as far as I can tell.</p>",
        "id": 292277093,
        "sender_full_name": "Sam",
        "timestamp": 1659817285
    },
    {
        "content": "<p>Well, that's <code>finish</code> being too clever by half, imo :)</p>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">list.containsp_cons_of_neg</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">containsp</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">l.containsp</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.containsp</span><span class=\"o\">,</span> <span class=\"n\">list.mem_cons_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.containsp</span><span class=\"o\">],</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292277303,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659817545
    },
    {
        "content": "<p>Ah, so this is just me being a newb then. I don't think I've encountered <code>obtain</code> yet! I have some reading to do.</p>",
        "id": 292277359,
        "sender_full_name": "Sam",
        "timestamp": 1659817621
    },
    {
        "content": "<p>So essentially I just need to learn lots more tactics?</p>",
        "id": 292277372,
        "sender_full_name": "Sam",
        "timestamp": 1659817639
    },
    {
        "content": "<p>At least several, I'd say - <code>obtain</code> is a version of <code>cases</code> with a little more bells and whistles (like the <code>rfl|hb1</code> bit)</p>",
        "id": 292277433,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659817703
    },
    {
        "content": "<p>I think that's a reason I'm not a fan of <code>finish</code>; if you rely on it for the simple problems, you don't learn as much, and you suddenly have to start learning on the difficult problems :)</p>",
        "id": 292277528,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659817841
    },
    {
        "content": "<p>Is there a good list of which tactics to focus on learning? I've been using a lot of <code>simp</code>, <code>intro</code>, <code>split</code>, <code>induction</code>, <code>rw</code>, <code>split_ifs</code>, <code>apply</code>, <code>exact</code>, <code>assumption</code>, <code>tauto</code>, <code>finish</code>,  and <code>cases</code>. But clearly there are some \"obvious\" ones that I've missed!</p>",
        "id": 292277559,
        "sender_full_name": "Sam",
        "timestamp": 1659817897
    },
    {
        "content": "<p>Tbh I've been bruteforcing my way through some of those, I don't fully understand them all yet.</p>",
        "id": 292277591,
        "sender_full_name": "Sam",
        "timestamp": 1659817922
    },
    {
        "content": "<p><code>finish</code> is being phased out of mathlib since it's not being ported to Lean 4.</p>\n<p>My understanding is that it uses some Z3-like algorithms (SMT solving), and it uses lemmas with the <code>ematch</code> attribute.</p>",
        "id": 292277624,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659817952
    },
    {
        "content": "<p>I'm under the impression that it doesn't use <code>simp</code></p>",
        "id": 292277638,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659818002
    },
    {
        "content": "<p>In terms of tactics, I think that the most common that I use are <code>refine</code> and <code>rcases</code>, the occasional <code>rw</code> and, when I want to fast-forward, <code>convert</code>.  (I mentioned tactics that you did not mention, the ones in your list are also common.)</p>",
        "id": 292277732,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659818108
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#tidy\">tactic#tidy</a> is nice as an auto-solver sometimes</p>",
        "id": 292277743,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659818141
    },
    {
        "content": "<p>Oh, I forgot about <code>tidy</code>! That actually works for the example I posted.</p>",
        "id": 292277813,
        "sender_full_name": "Sam",
        "timestamp": 1659818204
    },
    {
        "content": "<p>Ah, so no <code>finish</code> in mathlib going forward, good to know! I hadn't realised it was SMT like! That explains the slowness.</p>",
        "id": 292277835,
        "sender_full_name": "Sam",
        "timestamp": 1659818259
    },
    {
        "content": "<p>Thanks for that list <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, I'll make a note to learn those.</p>",
        "id": 292277883,
        "sender_full_name": "Sam",
        "timestamp": 1659818284
    },
    {
        "content": "<p>You can do <code>tidy?</code> to have it output the proof it came up with. Sometimes you can hand-edit a reasonable proof out of it.</p>",
        "id": 292277891,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659818299
    },
    {
        "content": "<p>Ah, Kyle's mention of tidy made me remember of <code>ext</code>, which is also useful!</p>",
        "id": 292277900,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659818321
    },
    {
        "content": "<p>In mathlib, would it be considered better to inline <code>tidy?</code>'s result in the code? For the example I posted, it gives this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h_h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h_h_left</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h_h_left</span><span class=\"o\">,</span>\n    <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">2</span> <span class=\"o\">{</span>\n      <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span>\n      <span class=\"o\">{</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">},</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">2</span> <span class=\"o\">{</span>\n    <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span>\n    <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"o\">},</span>\n</code></pre></div>\n<p>Is it reasonable to just put that in the proof? Is it acceptable to leave it just as <code>tidy</code>?</p>",
        "id": 292278084,
        "sender_full_name": "Sam",
        "timestamp": 1659818613
    },
    {
        "content": "<p>Do these automatic tactics ever have regressions when mathlib updates? That seems like it would be a reason not to use them.</p>",
        "id": 292278170,
        "sender_full_name": "Sam",
        "timestamp": 1659818730
    },
    {
        "content": "<p>I have found that the relative proportion of tactics that I use changed quite a bit with time.  Initially, I used <code>tidy, simp, dsimp, apply</code> a lot.  Later, I started preferring <code>refine</code> to <code>apply</code> to get finer control, I did not try <code>simp/tidy</code> on <em>everything</em>, but just when they were likely to make progress, started replacing <code>rw</code>  by carefully reformulating statements to avoid needing it (when possible).</p>",
        "id": 292278177,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659818761
    },
    {
        "content": "<p>The chain of cases can likely be replaced by the output of <code>rcases? h</code>: try it out!</p>",
        "id": 292278255,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659818874
    },
    {
        "content": "<p>I am making the wild guess that the output of tidy above can be compacted to 3, max 4 lines.</p>",
        "id": 292278327,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659818961
    },
    {
        "content": "<p>(I'm not at a computer now, so cannot actually take my own challenge!)</p>",
        "id": 292278380,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659819009
    },
    {
        "content": "<p>Well we know</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>is equivalent to that <code>tidy</code> because <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> already found it! So yes, 3 lines. I'll give the <code>rcases</code> route a go!</p>",
        "id": 292278424,
        "sender_full_name": "Sam",
        "timestamp": 1659819122
    },
    {
        "content": "<p>Ah, i did not realize it was the same example!  <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 292278475,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659819194
    },
    {
        "content": "<p>By the way, this is a proof of that too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.containsp</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">tidy</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292279200,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659820184
    },
    {
        "content": "<p>Hah. Every time I think I'm getting better at making my proofs more succinct, somebody comes along and shows her verbose I was still being! The versions I wrote today are already better than the ones I wrote yesterday, so progress is in the right direction at least.</p>",
        "id": 292279548,
        "sender_full_name": "Sam",
        "timestamp": 1659820703
    },
    {
        "content": "<p>There is always someone on Zulip who has a shorter proof.</p>",
        "id": 292279575,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659820771
    },
    {
        "content": "<p>You'd be surprised by how infinite descent plays out with Lean.</p>",
        "id": 292279626,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659820813
    },
    {
        "content": "<p>This is what I obtained by using <code>tidy?</code> and then golfing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.containsp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>  <span class=\"c1\">-- this can be replace by the two simps that you had</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span>  <span class=\"c1\">-- takes care of the chain of `cases` and some of the `induction`s</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">h2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span>  <span class=\"c1\">-- this is the contradiction</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span>  <span class=\"c1\">-- this is the other `split` and then the `assumption`s</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292290297,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659837315
    },
    {
        "content": "<p>Nice, thanks! I can't remember how small I got it by golfing, but you definitely did better than I did!</p>\n<p>I've left it as <code>tidy</code> for now. Of course by line count that's the smallest, and <code>tidy</code> seems relatively common in mathlib, so is there a good reason to prefer to inline it instead of leaving it as <code>tiny</code>?</p>",
        "id": 292300984,
        "sender_full_name": "Sam",
        "timestamp": 1659851556
    },
    {
        "content": "<p>In this specific case, <code>tidy</code> does not call \"non-terminal <code>simp</code>s\", so replacing <code>tidy</code> by the output of <code>tidy?</code> would just be for performance issues.  If I remember correctly, though, <code>tidy</code> tries <code>simp</code> and <code>dsimp</code> \"in the middle\" and non-terminal <code>(d)simp</code>s should be avoided.</p>",
        "id": 292301324,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659852017
    },
    {
        "content": "<p>I set myself the <a href=\"#narrow/stream/113488-general/topic/mathlib.20sat.20solvers/near/266372372\">project</a> of eliminating the use of <code>finish</code> from the main body of mathlib back in December.  I found <code>tidy?</code> was a good substitute in a lot of cases, generating an inelegant proof that I could then edit into a reasonable form, which was a good exercise in learning how to golf a proof.</p>",
        "id": 292313244,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659869704
    },
    {
        "content": "<p>This is probably too short to be helpful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">list.containsp_cons_of_neg</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">containsp</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">l.containsp</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.containsp</span><span class=\"o\">,</span> <span class=\"n\">list.mem_cons_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.containsp</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.imp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hb.1.resolve_left</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hb'</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">hb'</span> <span class=\"bp\">▸</span> <span class=\"n\">hb.2</span><span class=\"o\">)),</span> <span class=\"n\">hb.2</span><span class=\"o\">⟩),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292314662,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659871897
    }
]