[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">inductive</span> <span class=\"n\">Op</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Add</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">Nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">Op</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sub</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">Nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">Op</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>Repr seems to have issues with the inductive type, I'm not sure why? </p>\n<p>This is the error message<br>\n<a href=\"/user_uploads/3121/CJj9a_aAdTyDdnPU0898SRPr/Screenshot-from-2022-10-26-09-50-06.png\">Screenshot-from-2022-10-26-09-50-06.png</a> file:///home/sk/Pictures/Screenshots/Screenshot%20from%202022-10-26%2009-50-06.png</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/CJj9a_aAdTyDdnPU0898SRPr/Screenshot-from-2022-10-26-09-50-06.png\" title=\"Screenshot-from-2022-10-26-09-50-06.png\"><img src=\"/user_uploads/3121/CJj9a_aAdTyDdnPU0898SRPr/Screenshot-from-2022-10-26-09-50-06.png\"></a></div>",
        "id": 306162663,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1666758025
    },
    {
        "content": "<p>What is <code>Nat</code> in <code>inductive Op Nat where</code> supposed to mean?</p>",
        "id": 306177385,
        "sender_full_name": "Reid Barton",
        "timestamp": 1666768266
    },
    {
        "content": "<p>Is <code>Nat</code> a variable for the whole declaration?</p>",
        "id": 306177418,
        "sender_full_name": "Reid Barton",
        "timestamp": 1666768279
    },
    {
        "content": "<p>I'm unsure about both what you intended and how Lean interprets this definition and even if they are the same, this probably isn't the clearest way to write the definition.</p>",
        "id": 306177914,
        "sender_full_name": "Reid Barton",
        "timestamp": 1666768521
    },
    {
        "content": "<p>good question<br>\n<span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.3A.20Repr.20in.20parameterized.20inductive.20types/near/306177385\">said</a>:</p>\n<blockquote>\n<p>What is <code>Nat</code> in <code>inductive Op Nat where</code> supposed to mean?</p>\n</blockquote>\n<p>I'm not sure if I was doing it the right way but I wanted Op to be parameterized with a Natural Number.<br>\nAnd Add and Sub are 2 operations on Natural numbers that I am trying to define inductively.</p>\n<p>I'm pretty sure I didn't represent it correctly</p>",
        "id": 306187519,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1666772634
    },
    {
        "content": "<p>You might want <code>(n : Nat)</code> in that case. But I still don't understand what your are trying to do exactly.</p>",
        "id": 306188070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666772864
    },
    {
        "content": "<p>It seems like you want to do at the same time:</p>\n<ul>\n<li>state that <code>Add</code> is a <em>binary</em> operation? (I guess you want it to be an <code>Op 2</code>, maybe?</li>\n<li>given an actual definition of <code>Add</code>, because it eats <code>(x : Nat)</code> and <code>(y : Nat)</code>.</li>\n</ul>",
        "id": 306188305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666772959
    },
    {
        "content": "<p>But if that is what you want to do, then you shouldn't do them at the same time.</p>",
        "id": 306188400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666772992
    },
    {
        "content": "<p>Can you <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> your question?</p>",
        "id": 306188493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666773011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.3A.20Repr.20in.20parameterized.20inductive.20types/near/306188070\">said</a>:</p>\n<blockquote>\n<p>Can you <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> your question?</p>\n</blockquote>\n<p>sure I want to build a inductive type that essentially does addition, multiplication, division and subtraction.</p>\n<p>I don't know how to represent that in lean4</p>",
        "id": 306192135,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1666774144
    },
    {
        "content": "<p>when I say \"does\" I mean generate constructors for doing those operations if that makes any sense</p>",
        "id": 306192964,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1666774456
    },
    {
        "content": "<p>Are you trying to build your own copy of the natural numbers? Or are you trying to define what a (semi)ring is? Or are you trying to do some sort of model theory?</p>",
        "id": 306194306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666774918
    },
    {
        "content": "<p>I'm trying to write semantics of a stack machine that does the four operations, it can be only add and multiply just to make things work</p>",
        "id": 306202813,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1666777946
    },
    {
        "content": "<p>nothing too complex</p>",
        "id": 306202837,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1666777953
    },
    {
        "content": "<p>I am trying to learn how to encode operational semantics, very much a beginner</p>",
        "id": 306203231,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1666778088
    },
    {
        "content": "<p>in lean and expressing semantics in lean</p>",
        "id": 306203283,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1666778105
    },
    {
        "content": "<p>The simplest option is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Op</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Add</span> <span class=\"o\">:</span> <span class=\"n\">Op</span>\n<span class=\"bp\">|</span> <span class=\"n\">Sub</span> <span class=\"o\">:</span> <span class=\"n\">Op</span>\n</code></pre></div>",
        "id": 306204300,
        "sender_full_name": "Reid Barton",
        "timestamp": 1666778465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar ðŸ¦€ (he/him)</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.3A.20Repr.20in.20parameterized.20inductive.20types/near/306202813\">said</a>:</p>\n<blockquote>\n<p>I'm trying to write semantics of a stack machine that does the four operations, it can be only add and multiply just to make things work</p>\n</blockquote>\n<p>Ok, that's a much better <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>.</p>",
        "id": 306206259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666779194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.3A.20Repr.20in.20parameterized.20inductive.20types/near/306206259\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar ðŸ¦€ (he/him)</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.3A.20Repr.20in.20parameterized.20inductive.20types/near/306202813\">said</a>:</p>\n<blockquote>\n<p>I'm trying to write semantics of a stack machine that does the four operations, it can be only add and multiply just to make things work</p>\n</blockquote>\n<p>Ok, that's a much better <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>.</p>\n</blockquote>\n<p>Sorry for making it too complex, thanks for bearing with me :-)</p>",
        "id": 306206534,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1666779291
    }
]