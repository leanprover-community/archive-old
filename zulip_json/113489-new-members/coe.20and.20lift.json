[
    {
        "content": "<p>I saw the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Can perform a lifting operation `↑a`. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Auxiliary class that contains the transitive closure of has_lift. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Auxiliary class that contains the transitive closure of has_coe. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_coe_t</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 244259827,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624962241
    },
    {
        "content": "<p>What are the differences between coe and lift?</p>",
        "id": 244259910,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624962271
    },
    {
        "content": "<p>If I am declaring an instance about coercion<br>\n<code>instance my_instance: ... A B:=</code>, should I use <code>has_coe</code> or <code>has_coe_t</code> for ...?</p>",
        "id": 244260112,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624962396
    },
    {
        "content": "<p>You're looking at the implementation details of how coercions actually work. There are more details in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> but as an end user I have never had to worry about these. Note that all those definitions are \"the same\", but the classes are used in different ways.</p>",
        "id": 244260115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624962397
    },
    {
        "content": "<p>Hi, Kevin! How about the second question, for an end user?</p>",
        "id": 244260328,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624962532
    },
    {
        "content": "<p>If you're defining a coercion you should use <code>has_coe</code>, and then start worrying about these things if something doesn't work. <del>The little up arrow is has_coe.coe .</del> (actually it's just <code>coe</code>)</p>",
        "id": 244261626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624963329
    },
    {
        "content": "<p>Often <code>#lint</code> will tell you if you are using <code>has_coe</code> but should be using <code>has_coe_t</code></p>",
        "id": 244262394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624963867
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span>\n<span class=\"kn\">include</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">β_to_α</span><span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">β</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">):=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"n\">fun_to_fun</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">aux</span><span class=\"bp\">;</span><span class=\"n\">assumption</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">want</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The statement of the theorem reports an error:<code>maximum class-instance resolution depth has been reached</code>.<br>\nIs it possible to somehow fix it?</p>",
        "id": 244265301,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624965836
    },
    {
        "content": "<p>The same error occurs if I change <code>fun_to_fun</code> to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">fun_to_fun</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 244265563,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624966010
    },
    {
        "content": "<p>The coercion will never trigger because the type class inference system handles coercions and the type class inference system will not be able to find a proof that <code>alpha = beta</code> because <code>=</code> is not a typeclass.</p>",
        "id": 244266229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624966476
    },
    {
        "content": "<p>Is there a minor fix that makes the code works (I am just exploring things in Lean)?</p>",
        "id": 244267746,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624967473
    }
]