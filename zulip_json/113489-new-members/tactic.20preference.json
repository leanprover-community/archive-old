[
    {
        "content": "<p>Dear All,</p>\n<p>in the process of cleaning up proofs, I find myself having to make choices between using different tactics with the same final effect.  In practice, I often end up with the following scheme:</p>\n<p><code>simp</code> becomes <code>rw</code> (if I am lucky, via <code>squeeze_simp</code>)<br>\n<code>apply [...], exact [...]</code> becomes <code>exact [......]</code><br>\n<code>rw [... \\iff ...]</code> becomes <code>apply [(...).mp(r)...]</code> (when reasonable/possible)<br>\n<code>have</code> becomes a previous <code>lemma</code></p>\n<p>I realize that tactics are not just not linearly ordered, they are probably not even a poset!  Still, a proof commits you to some choices and I would like to know that I am at least going in a reasonable direction.  I would like to know whether you find the scheme above reasonable.  What other substitutions would you make?  For instance, I rarely use <code>subst [...]</code> since the next tactic is almost invariably <code>rw</code> and then I merge them in a longer <code>rw</code>.  Which is normally preferred: <code>subst [...], rw [...]</code> or <code>rw [......]</code>?</p>\n<p>Sorry for the vague question: I hope that someone can still give me some pointers!</p>",
        "id": 213690617,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603000583
    },
    {
        "content": "<p>I try to merge <code>subst</code> into the nearest <code>rcases</code></p>",
        "id": 213690636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603000656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/tactic.20preference/near/213690636\">said</a>:</p>\n<blockquote>\n<p>I try to merge <code>subst</code> into the nearest <code>rcases</code></p>\n</blockquote>\n<p>Ah, I use very rarely <code>rcases</code>!  The fact that you mention it, makes me understand that I should use it more!  Thanks!</p>",
        "id": 213690694,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603000713
    },
    {
        "content": "<p>You can go really far with <code>rcases</code> and <code>refine</code></p>",
        "id": 213690705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603000753
    },
    {
        "content": "<p>it's basically term mode proof in tactic clothing</p>",
        "id": 213690716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603000779
    },
    {
        "content": "<p><code>refine</code> I *try * a lot, but end up being able to apply it only very rarely.</p>",
        "id": 213690718,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603000788
    },
    {
        "content": "<p>refine can be used in place of almost any tactic, although the equivalent may not be pretty depending on the tactic it replaces</p>",
        "id": 213690776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603000824
    },
    {
        "content": "<p>so would a good measure be the length of the output of <code>show_term</code> to inform the choices above?</p>",
        "id": 213690789,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603000859
    },
    {
        "content": "<p>it's good for replacing <code>split</code>, <code>existsi</code>/<code>use</code> and <code>intro</code> in some combination</p>",
        "id": 213690801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603000877
    },
    {
        "content": "<p>ah, I did not know that <code>split</code>s could be avoided by <code>refine</code>: this will keep me busy!  Ahaha</p>",
        "id": 213690817,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603000921
    },
    {
        "content": "<p>yes, although you should be aware that some tactics do work that doesn't show up in the term, for example <code>simp</code></p>",
        "id": 213690854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603000926
    },
    {
        "content": "<p><code>split</code> is just <code>refine &lt;_, _&gt;</code></p>",
        "id": 213690861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603000941
    },
    {
        "content": "<p>and you can stick a term in there if one of the sides is easy</p>",
        "id": 213690865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603000957
    },
    {
        "content": "<p>I never leave a <code>simp</code> and almost never leave even a <code>simp only</code></p>",
        "id": 213690866,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603000973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/tactic.20preference/near/213690861\">said</a>:</p>\n<blockquote>\n<p><code>split</code> is just <code>refine &lt;_, _&gt;</code></p>\n</blockquote>\n<p>I did not know!  I will stop using <code>split</code>, then!</p>",
        "id": 213690877,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603001008
    },
    {
        "content": "<p>I will also point out that this doesn't necessarily match everyone's preference; this is good for making low compile time proofs but may go against one's aesthetics</p>",
        "id": 213690923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603001053
    },
    {
        "content": "<p><code>existsi a</code> is just <code>refine &lt;a, _&gt;</code></p>",
        "id": 213690946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603001139
    },
    {
        "content": "<p>Yes, I understand that.  Although, to be honest, proof irrelevance has the effect in my mind of replacing \"beauty\" with \"efficiency\" in a proof.</p>",
        "id": 213690951,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603001153
    },
    {
        "content": "<p>a kindred spirit <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 213690991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603001173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/tactic.20preference/near/213690946\">said</a>:</p>\n<blockquote>\n<p><code>existsi a</code> is just <code>refine &lt;a, _&gt;</code></p>\n</blockquote>\n<p>I did not even know about the tactic <code>existsi</code>.</p>",
        "id": 213690994,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603001180
    },
    {
        "content": "<p><code>use</code> is basically the same as <code>existsi</code></p>",
        "id": 213690998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603001194
    },
    {
        "content": "<p>Ah, good to know!  I work aournd statements so as to avoid needing <code>use</code> whenever I can.  I do not know why...</p>",
        "id": 213691015,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603001242
    },
    {
        "content": "<p>It does a bit of postprocessing with <code>simp</code> to make it more user friendly I think</p>",
        "id": 213691065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603001312
    },
    {
        "content": "<p>check out this beautiful proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">split_bits.determ_l</span> <span class=\"o\">{</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">split_bits</span> <span class=\"n\">n₁</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">split_bits</span> <span class=\"n\">n₂</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n₁</span> <span class=\"bp\">=</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"n\">generalizing</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">l_hd</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l'</span> <span class=\"n\">generalizing</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">l_ih</span> <span class=\"n\">h₁_a</span> <span class=\"n\">h₂_a</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">l'</span><span class=\"o\">},</span>\n      <span class=\"n\">split_bits</span> <span class=\"n\">n</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span>\n      <span class=\"n\">l'</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">l'_hd</span> <span class=\"o\">::</span> <span class=\"n\">l'_tl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">l_tl</span> <span class=\"bp\">→</span>\n      <span class=\"n\">l'_hd</span> <span class=\"bp\">=</span> <span class=\"n\">nat.bodd</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">split_bits</span> <span class=\"o\">(</span><span class=\"n\">nat.div2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">l'_tl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">l_tl</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">a_1</span><span class=\"o\">},</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">a_bs</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">injection</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h_2</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">bitvec</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">v.2.1</span><span class=\"o\">)</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">a_a</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"n\">h₁</span> <span class=\"n\">rfl</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h₁'</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"n\">h₂</span> <span class=\"n\">rfl</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">h₂'</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nat.bit_decomp</span> <span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">l'_ih</span> <span class=\"n\">h₁'</span> <span class=\"n\">h₂'</span><span class=\"o\">,</span> <span class=\"n\">nat.bit_decomp</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>100% old school tactics</p>",
        "id": 213691075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603001355
    },
    {
        "content": "<p>I now need to resist the urge to go back to all the code that I have written and preform further substitutions... surely, alongside proof-checkers, there are \"proof-spas\", beautifying your code, no?</p>",
        "id": 213691077,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603001380
    },
    {
        "content": "<p>it's big business in metamath land, but lean doesn't make it so easy to optimize proofs in any large scale way</p>",
        "id": 213691126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603001425
    },
    {
        "content": "<p>Why do you call the proof above \"old school tactics\"?  What are examples \"new school tactics\"?  I feel that I am a beginner learning the old-school...</p>",
        "id": 213691150,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603001487
    },
    {
        "content": "<p>Is this something AI can do for us someday?  Take the corpus of all the lemmas and definitions in mathlib, and find its own proofs, sometimes 3 lines shorter than the existing proofs?</p>",
        "id": 213691201,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603001548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/tactic.20preference/near/213691201\">said</a>:</p>\n<blockquote>\n<p>Is this something AI can do for us someday?  Take the corpus of all the lemmas and definitions in mathlib, and find its own proofs, sometimes 3 lines shorter than the existing proofs?</p>\n</blockquote>\n<p>In my proofs, I think I would be happy if it only shortened them by 3 lines!  Even my one-line-proofs are long...</p>",
        "id": 213691219,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603001592
    },
    {
        "content": "<p>It's something that can absolutely be done in principle (that's basically what GPT-f did for metamath), but the limiting factor is ease of access of the data to automated tools, which is crazy considering that it's a formal theorem prover</p>",
        "id": 213691275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603001694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/tactic.20preference/near/213691275\">said</a>:</p>\n<blockquote>\n<p>that's basically what GPT-f did for metamath</p>\n</blockquote>\n<p>I don't know about this, can you suggest something for further reading?</p>",
        "id": 213691330,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603001783
    },
    {
        "content": "<p>In fact, for a long time the main metamath tool has had a proof processing tool called \"minimize\" that is basically a peephole optimizer: it looks at sequences of 2 or 3 steps in your proof and tries to find ways to do the same thing in 1 or 2 steps utilizing the whole library. It's computationally expensive, so it is run once a year or so on the entire library, but it can also be run in the background while you are working on your new proof</p>",
        "id": 213691346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603001861
    },
    {
        "content": "<p>There is some discussion about GPT-f on the <a class=\"stream\" data-stream-id=\"219941\" href=\"/#narrow/stream/219941-Machine-Learning-for-Theorem-Proving\">#Machine Learning for Theorem Proving</a> stream</p>",
        "id": 213691391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603001896
    },
    {
        "content": "<p>The upshot is that most proofs in <a href=\"http://set.mm\">set.mm</a> are \"locally optimal\": they don't necessarily take the globally shortest path but there are no local missteps so everything proceeds straightforwardly</p>",
        "id": 213691453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603002016
    },
    {
        "content": "<p>a simple analogue for lean would be deleting <code>have</code> statements that are never used</p>",
        "id": 213691468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603002084
    },
    {
        "content": "<p>But none of that can happen in lean 3 because no one can parse lean except lean</p>",
        "id": 213691518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603002140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thank you very much for your input!  I have already shortened a couple of proofs using some of your ideas!</p>",
        "id": 213691998,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603003095
    },
    {
        "content": "<p>What causes the parsing difficulties in Lean 3 (and what's changing)?</p>",
        "id": 213706477,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603027775
    },
    {
        "content": "<p>Well, lean 4 will be <em>even harder to parse</em></p>",
        "id": 213706490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603027794
    },
    {
        "content": "<p>the reason lean 3 is hard to parse is because you can run arbitrary code while parsing</p>",
        "id": 213706538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603027822
    },
    {
        "content": "<p>Ah, of course.</p>",
        "id": 213706549,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603027856
    },
    {
        "content": "<p>which means that parsing correctly implies also running the VM correctly, having a typechecker and tactic framework and every other observable feature of lean</p>",
        "id": 213706562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603027878
    },
    {
        "content": "<p>how do you run arbitrary code while parsing?</p>",
        "id": 213706771,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603028188
    },
    {
        "content": "<p>notation I guess?</p>",
        "id": 213706930,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603028408
    },
    {
        "content": "<p>Or are you saying how would you implement that? I mean I guess if you're sufficiently motivated you start with running a Lean process externally or embedding it in the parser, parse everything you can statically and then communicate with it for the bits you can't parse yourself or something</p>",
        "id": 213706956,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603028462
    },
    {
        "content": "<p>Anything using the <code>parser</code> monad</p>",
        "id": 213707019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603028524
    },
    {
        "content": "<p>tactic argument parsing and user commands</p>",
        "id": 213707024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603028540
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.even</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">interactive.parse</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">lean.parser.small_nat</span><span class=\"o\">,</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.skip</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">even</span> <span class=\"mi\">1234</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">even</span> <span class=\"mi\">1233</span> <span class=\"c1\">-- parse error</span>\n</code></pre></div>",
        "id": 213707172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603028768
    },
    {
        "content": "<p>I'm saying that it is impossible to parse lean without also doing everything else lean does. It is not a separate pass</p>",
        "id": 213707202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603028845
    },
    {
        "content": "<p>can you get Lean to output a representation of the abstract syntax tree of a file? like in python, it's also a pain to make a third-party parser for Python code, but you don't have to do it because Python itself can use its parser and then you can walk the AST to encode it into json or something</p>",
        "id": 213817767,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603128064
    },
    {
        "content": "<p>I think there never really is an abstract syntax tree, or at least, not of the whole file at the same time</p>",
        "id": 213818073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603128227
    },
    {
        "content": "<p>which isn't to say you couldn't retrofit such a concept onto Lean, but it sounds like a lot of work</p>",
        "id": 213818145,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603128250
    },
    {
        "content": "<p>I looked into how the \"return information for the identifier at a specific location\" feature works and it just reparses the whole file up to that location</p>",
        "id": 213818275,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603128321
    },
    {
        "content": "<p>weird</p>",
        "id": 213818742,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603128515
    },
    {
        "content": "<p>In Lean 4 the parser is written in Lean and will be user-extensible in ways which hopefully include being able to capture the parsed AST for whatever nefarious purposes one might have</p>",
        "id": 213818786,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603128536
    },
    {
        "content": "<p>and there's actually a <code>Syntax</code> Lean type which is the AST, rather than, when the parser encounters the <code>inductive</code> keyword, it just calling the handler for <code>inductive</code> commands, or however it works now</p>",
        "id": 213819211,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603128714
    },
    {
        "content": "<p>One way to implement AST retrieval would be to have an AST structure in the parser state, and then just log all parser function calls in it, i.e. whenever you call <code>p.inductive()</code> the first thing it does is call <code>ast.inductive()</code> which pushes an inductive AST node on the stack. You end up with a preorder traversal of the AST as an array and stream that out</p>",
        "id": 213819641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603128910
    },
    {
        "content": "<p>i guess even the ast is kind of weird if you're thinking of external proof minimizers or similar</p>",
        "id": 213819809,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603128983
    },
    {
        "content": "<p>what you really want is a reduced language... like theoretically, would it be possible to write every proof in lean as a sequence of <code>have ___, from &lt;existing lemma&gt; _ _ _</code> type lines?</p>",
        "id": 213819903,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603129030
    },
    {
        "content": "<p>because otherwise the minimizer has to understand <code>norm_num</code>, <code>solve_by_elim</code>, all these complex things</p>",
        "id": 213819943,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603129055
    },
    {
        "content": "<p>That kind of thing is in the olean files and the export format, and there are already external parsers for that</p>",
        "id": 213819975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129074
    },
    {
        "content": "<p>the external typecheckers work on the data from the export format, which you can get by running <code>lean --export</code></p>",
        "id": 213820121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129134
    },
    {
        "content": "<p>but what we don't have access to is stuff like the list of tactics used in a file</p>",
        "id": 213820174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129168
    },
    {
        "content": "<p>But this might somehow be \"too reduced\"</p>",
        "id": 213820177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603129171
    },
    {
        "content": "<p>it's too reduced to minimize a proof - it isn't obvious how minimal a lean proof is, from its compiled form. it might be useful for something though...</p>",
        "id": 213820282,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603129220
    },
    {
        "content": "<p>the olean files are a bit more feature rich in that they contain notations and annotations, in addition to raw logical proof data (which is all that is in the lean export files), but they don't have anything about <code>begin end</code> blocks</p>",
        "id": 213820355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129263
    },
    {
        "content": "<p>is lean 4 going to maintain these formats</p>",
        "id": 213820392,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603129282
    },
    {
        "content": "<p>no, olean was never meant to be a stable format</p>",
        "id": 213820416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129295
    },
    {
        "content": "<p>and even the core logic has changed so the export format would have to be different</p>",
        "id": 213820463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129320
    },
    {
        "content": "<p>but I think in lean 4 there won't be an export format (but there will be enough tools to roll your own)</p>",
        "id": 213820533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129348
    },
    {
        "content": "<p>i wonder how painful transitioning from 3 -&gt; 4 is going to be....</p>",
        "id": 213820560,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603129366
    },
    {
        "content": "<p>quite</p>",
        "id": 213820573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129371
    },
    {
        "content": "<p>I'm told that lean 4 is at least compatible enough to read lean 3 olean files and get \"raw mathlib\"</p>",
        "id": 213820673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129440
    },
    {
        "content": "<p>or maybe that was the export format? <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> knows</p>",
        "id": 213820759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129464
    },
    {
        "content": "<p>olean or export?</p>",
        "id": 213820764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603129465
    },
    {
        "content": "<p>I think it was export</p>",
        "id": 213820780,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603129473
    },
    {
        "content": "<p>that would make more sense. No one wants to parse the rats nest that is olean files</p>",
        "id": 213820841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129506
    },
    {
        "content": "<p>says the author of olean-rs</p>",
        "id": 213820868,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603129527
    },
    {
        "content": "<p>by the way, last time I checked it was out of date <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 213820882,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603129542
    },
    {
        "content": "<p>I should do something about that</p>",
        "id": 213820978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129575
    },
    {
        "content": "<p>There is an importer for the text output format here: <a href=\"https://github.com/gebner/lean4-mathlib-import\">https://github.com/gebner/lean4-mathlib-import</a></p>",
        "id": 213821027,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603129608
    },
    {
        "content": "<h1>Import mathlib into Lean 4</h1>\n<p>This tool takes the text export of <a href=\"https://github.com/leanprover-community/mathlib\">mathlib</a> and creates an olean file that you can import with <a href=\"https://github.com/leanprover/lean4\">Lean 4</a>.</p>\n<p>Notation, etc., is not supported.  All theorems are imported as axioms.  Some names are adapted to the new convention, some aren't.  <strong>This code is not intended for production.</strong></p>\n<p>You can build the <code>Mathlib.olean</code> as follows (make sure you have enough RAM):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">make</span>\n<span class=\"n\">make</span> <span class=\"n\">emacs</span>    <span class=\"bp\">#</span> <span class=\"n\">install</span> <span class=\"n\">the</span> <span class=\"n\">lean4</span> <span class=\"n\">emacs</span> <span class=\"n\">package</span> <span class=\"n\">yourself</span><span class=\"bp\">!</span>\n</code></pre></div>\n\n<p>(If you're on NixOS, you might need to run everything inside <code>nix-shell ~/lean4</code>.)</p>\n<p>After that, you can import mathlib and play with it in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Import.Mathlib</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">real</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">real</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 213821073,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603129629
    },
    {
        "content": "<p>Relevant Zulip thread <a href=\"#narrow/stream/113488-general/topic/Importing.20mathlib.20into.20Lean.204/near/187561178\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Importing.20mathlib.20into.20Lean.204/near/187561178</a></p>",
        "id": 213821102,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603129641
    },
    {
        "content": "<p>oh, you <em>write</em> olean files?</p>",
        "id": 213821130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129656
    },
    {
        "content": "<p>so let's say I want to parse, or quasi-parse mathlib. the theory is that you could make a faster library_search if you did some preprocessing and wrote things in a faster language. I just want the names, namespaces, and signatures of the lemmas/theorems, though. enough to generate some code that refers to them. I don't need to verify the proofs. is that possible from the export format?</p>",
        "id": 213821160,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603129671
    },
    {
        "content": "<p>so I suppose you know what lean 4 olean looks like</p>",
        "id": 213821161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129671
    },
    {
        "content": "<p>I'm using the Lean 4 API for olean files.</p>",
        "id": 213821234,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603129694
    },
    {
        "content": "<p>You can fairly easily write an introspection tactic from lean to gather that information. That's what leandoc is</p>",
        "id": 213821374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129769
    },
    {
        "content": "<p>You can also reconstruct this information from the export format.</p>",
        "id": 213821421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603129794
    },
    {
        "content": "<p>ok. so it's not the full AST but it's like the first level of the AST</p>",
        "id": 213821498,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603129816
    },
    {
        "content": "<p>more like the last level</p>",
        "id": 213821520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129827
    },
    {
        "content": "<p>it's the fully digested form</p>",
        "id": 213821547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129841
    },
    {
        "content": "<p>well, if you think of the AST as a tree where the root is like a namespace, and the first level of the tree is the children of that namespace, and then the next levels are how those children start to be defined, etc</p>",
        "id": 213821604,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603129871
    },
    {
        "content": "<p>you don't even have information about implicit args though, so generating a parseable expr from that info is tough</p>",
        "id": 213821633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129889
    },
    {
        "content": "<p>lean isn't really structured like that though</p>",
        "id": 213821684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129914
    },
    {
        "content": "<p>you can put stuff in namespaces in an arbitrary order</p>",
        "id": 213821750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129928
    },
    {
        "content": "<p>from any file</p>",
        "id": 213821777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129945
    },
    {
        "content": "<p>I mean, the file structure is like that with namespaces and sections, but none of that structure is visible in the digested theorems</p>",
        "id": 213821857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603129986
    },
    {
        "content": "<p>makes sense. well i'll check out what leandoc does</p>",
        "id": 213821953,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603130038
    },
    {
        "content": "<p>Implicit arguments are there in the text output format.  Even infix notation.</p>",
        "id": 213821983,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603130044
    },
    {
        "content": "<p>But yes, please write your own exporter in lean like doc-gen.</p>",
        "id": 213822027,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603130063
    },
    {
        "content": "<p>That's another thing that you could only get at with a proper AST - we currently have no idea when namespaces and sections start and end, except when you are inside them</p>",
        "id": 213822028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603130065
    },
    {
        "content": "<p>and getting the current namespace is only recently available too. I think we still can't get at the list of variables in scope</p>",
        "id": 213822175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603130137
    },
    {
        "content": "<p>so my dream of writing a <code>def</code>-equivalent tactic is as yet unfulfilled</p>",
        "id": 213822282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603130172
    }
]