[
    {
        "content": "<p>Are tactics ever modified? Could a tactics proof become invalid after an update that changes a detail about simp?</p>",
        "id": 197074017,
        "sender_full_name": "Golol",
        "timestamp": 1589139193
    },
    {
        "content": "<p>Yes</p>",
        "id": 197074031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589139203
    },
    {
        "content": "<p>The <code>simp</code> algorithm itself is not modified, but tagging lemmas with <code>simp</code> happens all the time, and changes the way <code>simp</code> behaves. This is why it is not recommended to use <code>simp</code> in the middle of a proof, but only to close a goal, because the philosophy is that <code>simp</code> should only get better.</p>",
        "id": 197074128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589139255
    },
    {
        "content": "<p>Okay. So form a perfectionist view a library should at least store the term-style proofs, because these can never become invalid.</p>",
        "id": 197074209,
        "sender_full_name": "Golol",
        "timestamp": 1589139332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243838\">Golol</span> <a href=\"#narrow/stream/113489-new-members/topic/(no.20topic)/near/197074209\" title=\"#narrow/stream/113489-new-members/topic/(no.20topic)/near/197074209\">said</a>:</p>\n<blockquote>\n<p>Okay. So form a perfectionist view a library should at least store the term-style proofs, because these can never become invalid.</p>\n</blockquote>\n<p>Tactics aren't the only things that change</p>\n<p>but in practice I think mathlib likes to have compact term-mode proofs because they run faster</p>",
        "id": 197074274,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589139404
    },
    {
        "content": "<p>Ah okay, then nevermind. There probably isnt a risk to \"break everything\".</p>",
        "id": 197074292,
        "sender_full_name": "Golol",
        "timestamp": 1589139445
    },
    {
        "content": "<p>It's certainly possible to \"break everything\". For example if you changed the definition of <code>eq</code> you could probably get over 90% of mathlib to break</p>",
        "id": 197074584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589139687
    },
    {
        "content": "<p>The way we deal with this is \"if you break it you fix it\". So you are incentivized not to make changes that cause large breakage unless you are personally motivated enough about the change to fix the breakage</p>",
        "id": 197074631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589139737
    },
    {
        "content": "<p>(also, obviously there should be some kind of consensus that the change is a good one, especially if there is large breakage)</p>",
        "id": 197074647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589139805
    },
    {
        "content": "<p>Much more commonly, a minor change breaks some 2 or 10 theorems and it's not a big deal to repair them as part of the PR that makes the change</p>",
        "id": 197074707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589139857
    },
    {
        "content": "<p>What kind of changes are we talking about here, changes to the lean code itself or changes to lower level definitions and theorems?</p>",
        "id": 197074812,
        "sender_full_name": "Golol",
        "timestamp": 1589140044
    },
    {
        "content": "<p>What do you mean by lower level?</p>",
        "id": 197074836,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589140081
    },
    {
        "content": "<p>But it's not really true that term mode proofs are less prone to breakage than tactic proofs. One advantage of tactic proofs, especially those using \"heavy\" tactics like <code>simp</code>, <code>ring</code> or <code>finish</code> is that they don't care too much about the form of the goal statement, and can ride along with many kinds of simple changes to the library, while term proofs are pretty directly tied to the exact form of all the statements that were used. So something like changing the order of arguments, changing typeclass instances, removing an unnecessary argument are all more likely to break a term mode proof than a tactic proof</p>",
        "id": 197074868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589140084
    },
    {
        "content": "<p>The price \"heavy\" tactics pay for their flexibility is that they tend to be slower, because you don't know in advance what the proof is going to look like</p>",
        "id": 197074902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589140164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/do.20tactics.20change.3F/near/197074836\" title=\"#narrow/stream/113489-new-members/topic/do.20tactics.20change.3F/near/197074836\">said</a>:</p>\n<blockquote>\n<p>What do you mean by lower level?</p>\n</blockquote>\n<p>Maybe someone changes a detail about the definition of a Ring (bad example) and some theorem breaks. But I was more interested in changes to the code that verifies a term-style proof.</p>",
        "id": 197074968,
        "sender_full_name": "Golol",
        "timestamp": 1589140255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243838\">Golol</span> <a href=\"#narrow/stream/113489-new-members/topic/do.20tactics.20change.3F/near/197074812\" title=\"#narrow/stream/113489-new-members/topic/do.20tactics.20change.3F/near/197074812\">said</a>:</p>\n<blockquote>\n<p>What kind of changes are we talking about here, changes to the lean code itself or changes to lower level definitions and theorems?</p>\n</blockquote>\n<p>Changes to mathlib (the library of proven results in lean) are much more common than changes to elaboration or C++ details like that</p>",
        "id": 197074978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589140274
    },
    {
        "content": "<p>and we have to be pretty conservative about C++ changes exactly because they tend to have large breakage</p>",
        "id": 197074988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589140318
    },
    {
        "content": "<p>It \"helps\" that the person who was mostly responsible for writing that code has left to work on lean 4 so no one else wants to touch it</p>",
        "id": 197075045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589140394
    },
    {
        "content": "<p>and lean 4 is definitely \"major breakage\"</p>",
        "id": 197075057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589140439
    },
    {
        "content": "<p>Oh that sounds like transferring will be a mess lol.</p>",
        "id": 197075170,
        "sender_full_name": "Golol",
        "timestamp": 1589140580
    },
    {
        "content": "<p>we'll cross that bridge when we come to it</p>",
        "id": 197075175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589140601
    },
    {
        "content": "<p>I just noticed I was basically spamming tactics till it clicks in the natural number game. If the way tactics apply themselves changed slightly my proofs could be wrong :D.</p>",
        "id": 197075197,
        "sender_full_name": "Golol",
        "timestamp": 1589140652
    },
    {
        "content": "<p>that's because NNG doesn't teach how to write structured proofs</p>",
        "id": 197075253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589140729
    },
    {
        "content": "<p>if you submitted a proof like that to mathlib it would be excoriated (probably by me)</p>",
        "id": 197075260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589140757
    },
    {
        "content": "<p>The easiest thing to start with is to always use <code>{ }</code> around the branches after a tactic that creates multiple subgoals</p>",
        "id": 197075336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589140822
    },
    {
        "content": "<p>Users can pick up good habits later :P</p>",
        "id": 197075682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589141408
    },
    {
        "content": "<p>Actually, it shouldn't be too bad to introduce it early in NNG, emphasizing that it's optional; I'm sure there are some people who like their proofs to look professional but they can't use <code>{ }</code> if it is never even mentioned to exist.</p>",
        "id": 197075932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589141837
    },
    {
        "content": "<p>This discussion about <code>{ }</code> is cycling again...</p>",
        "id": 197076079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589141956
    }
]