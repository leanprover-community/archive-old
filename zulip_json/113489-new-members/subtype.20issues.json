[
    {
        "content": "<p>Hi,<br>\nI'm having some issues working with propositions involving terms in a subtype.</p>\n<p>For example, I've been playing around with subsets of fields, and I came across the following goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">a_val</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">a_property</span> <span class=\"o\">:</span> <span class=\"n\">a_val</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">⟨</span><span class=\"n\">a_val</span><span class=\"o\">,</span> <span class=\"n\">a_property</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a_val</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>This should be a tautology, but the <code>assumption</code> tactic doesn't work.<br>\nIf I understand correctly the issue stems from the fact that <code>⟨a_val, a_property⟩</code> is of type <code>{ x : F // x ∈ S }</code>. There must be some really simple way to rewrite <code>h</code> as <code>a_val = 0</code>. Any help would me much appreciated!</p>",
        "id": 183888391,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1576791949
    },
    {
        "content": "<p>I wonder what that 0 is on the RHS of h?</p>",
        "id": 183888614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576792096
    },
    {
        "content": "<p>There's some coercion going on?</p>",
        "id": 183888630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576792115
    },
    {
        "content": "<p>It's difficult for me to figure out the type of both sides of h. In theory that zero could be defined in a completely wacky way and have nothing to do with F's zero, although this is unlikely unless you did it maliciously or by accident. Can you post the code which generated this?</p>",
        "id": 183888798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576792263
    },
    {
        "content": "<p>I guess you could do <code>unfold zero at h</code> to find out what's going on. Does <code>cases h</code> help?</p>",
        "id": 183889049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576792498
    },
    {
        "content": "<p>Sure! I'm playing around trying to define the typeclass of multiplicative subgroups of a field, and define a group instance given something in that typeclass.<br>\nThe code is below. <br>\n<code>unfold zero at h</code> doesn't work, and <code>cases h</code> doesn't work either...</p>\n<p>While I'm at it, it's unclear to me why <code>tactic.unfreeze_local_instances</code> is needed. I just followed lean's suggestion here as the first step...<br>\nAlso, I suppose there is a much more efficient way to go about doing this, so please forgive my naivety -- I'm still very much a beginner at this.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">subring</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">is_mult_subgroup</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_closed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one_mem</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero_nmem</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">∉</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">instance</span> <span class=\"n\">is_mult_subgroup</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"o\">[</span><span class=\"n\">ms</span> <span class=\"o\">:</span> <span class=\"n\">is_mult_subgroup</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unfreeze_local_instances</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">ms</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">division_ring</span><span class=\"bp\">.</span><span class=\"n\">inv_mul_cancel</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 183889503,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1576792805
    },
    {
        "content": "<p>You're constructing data so you don't really want to be using tactic mode. You probably want to be doing something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">is_mult_subgroup</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"o\">[</span><span class=\"n\">ms</span> <span class=\"o\">:</span> <span class=\"n\">is_mult_subgroup</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 183889967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576793082
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">is_mult_subgroup</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"o\">[</span><span class=\"n\">is_mult_subgroup</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">mul_closed</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 183890134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576793194
    },
    {
        "content": "<p>I agree... But suppose I want to do the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Wouldn't similar issues pop up here?</p>",
        "id": 183890730,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1576793657
    },
    {
        "content": "<p>That's <code>subtype.ext.2</code></p>",
        "id": 183890749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576793674
    },
    {
        "content": "<p>no, it's <code>subtype.ext.1</code></p>",
        "id": 183890763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576793685
    },
    {
        "content": "<p>but I agree that this is trivial. Cases on x and y should do this.</p>",
        "id": 183890773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576793698
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 183890908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576793784
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 183890950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576793831
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 183891102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576793978
    },
    {
        "content": "<p>But this is a different question to your earlier question, because <code>x</code> is not definitionally equal to <code>⟨x.1, x.2⟩</code></p>",
        "id": 183891234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576794085
    },
    {
        "content": "<p>They're equal because of a theorem.</p>",
        "id": 183891256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576794111
    },
    {
        "content": "<p>Right... I'm trying to concoct a similar example to illustrate the coercion issue using <code>has_zero</code>.</p>",
        "id": 183891393,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1576794219
    },
    {
        "content": "<p>With your has_zero example you didn't have <code>x</code> and <code>x.val</code>, you had <code>&lt;a_val,a_property&gt;</code> and <code>a_val</code> which is different</p>",
        "id": 183891474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576794272
    },
    {
        "content": "<p>If you have x you can rewrite with it</p>",
        "id": 183891542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576794340
    },
    {
        "content": "<p>Suppose I have <code>foo = { x : F // x \\in S }</code> and an assumption <code>h : (0 : F) \\in S</code> which can then be used to create an instance of <code>has_zero</code> for <code>foo</code> as <code>(0 : foo) := &lt; (0 : F), h &gt;</code>, I should then be able to prove <code>example (x : foo) : (x = 0) \\to x.val = 0</code>. Wouldn't this cause similar issues?</p>",
        "id": 183891693,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1576794449
    },
    {
        "content": "<p>Again this is just <code>subtype.ext.1</code></p>",
        "id": 183891831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576794555
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 183891852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576794576
    },
    {
        "content": "<p>which boils down to <code>congr_arg</code></p>",
        "id": 183891949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576794633
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n <span class=\"n\">congr_arg</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 183892063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576794724
    },
    {
        "content": "<p>I agree that somehow it looks like it should be \"more tautological\". I guess a simpler example would just be products. If <code>(x1,y1)=(x2,y2)</code> then why does <code>x1=x2</code>? This feels like it should be true by definition but somehow the proof relies on a case analysis, you do need to apply the recursor, which is an axiom.</p>",
        "id": 183892364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576795038
    },
    {
        "content": "<p><code>congr_arg</code> is the same, it looks like it should be true by definition but the proof involves induction on <code>=</code></p>",
        "id": 183892447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576795099
    },
    {
        "content": "<p>For stuff like this it's all just beyond my comprehension in some sense; this is foundational sludge and you just learn your way around it.</p>",
        "id": 183892472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576795136
    },
    {
        "content": "<p>Yes, I completely understand now. </p>\n<p>Perhaps a more general (but related) question is the following: If <code>T</code> is a structure type, for example of the following form:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">T1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">T2</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">T3</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>And I have a hypotheses of the form</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</pre></div>\n\n\n<p>Is there a tactic which automatically extracts the following?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">t1</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">t2</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">t2</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">t3</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">t3</span>\n</pre></div>",
        "id": 183892594,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1576795250
    },
    {
        "content": "<p>All of those can be proved with <code>rw h</code></p>",
        "id": 183892703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576795343
    },
    {
        "content": "<p>Or by <code>congr_arg</code>.</p>",
        "id": 183892751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576795407
    },
    {
        "content": "<p>Usually tactics prove one thing not three. The way this is dealt with usually is that this sort of thing is proved very quickly after defining the structure</p>",
        "id": 183892822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576795463
    },
    {
        "content": "<p>Check out the beginning of <code>data.complex.basic</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">complex</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">im</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℂ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">complex</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">complex</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">eta</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">},</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">→</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">zr</span><span class=\"o\">,</span> <span class=\"n\">zi</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ext_iff</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">],</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">ext</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 183893198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576795760
    },
    {
        "content": "<p>I see... I tried <code>rw h</code> in such an example with no luck, but of course congr_arg works. It might be nice to have some automation here, like how <code>cases x</code> can automatically provide</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">x_t1</span> <span class=\"o\">:</span> <span class=\"n\">T1</span>\n<span class=\"n\">x_t2</span> <span class=\"o\">:</span> <span class=\"n\">T2</span>\n<span class=\"n\">x_t3</span> <span class=\"o\">:</span> <span class=\"n\">T3</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">t1</span> <span class=\"o\">:=</span> <span class=\"n\">x_t1</span><span class=\"o\">,</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">x_t2</span><span class=\"o\">,</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">x_t3</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 183893202,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1576795766
    },
    {
        "content": "<p>It's difficult to know exactly what you want.</p>",
        "id": 183893286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576795818
    },
    {
        "content": "<p>There are several similar fiddly things. If you're making your own structure it's your job to make a good interface to it.</p>",
        "id": 183893313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576795842
    },
    {
        "content": "<p>Gotcha! Thanks very much for the help! I'll keep playing around :)</p>",
        "id": 183893366,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1576795885
    },
    {
        "content": "<p>Note the first three theorems of <code>data.complex.basic</code> -- all completely trivial but you need them a lot.</p>",
        "id": 183893388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576795910
    },
    {
        "content": "<p>When I was learning this stuff, making the complex numbers taught me a lot.</p>",
        "id": 183893445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576795935
    },
    {
        "content": "<p>I might have some teaching materials about this stuff lying around somewhere...</p>",
        "id": 183893463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576795961
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/xena/blob/master/lean_together/complex.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/lean_together/complex.lean\">https://github.com/kbuzzard/xena/blob/master/lean_together/complex.lean</a></p>",
        "id": 183893503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576796001
    },
    {
        "content": "<p>My definition of <code>conj</code> in that file is bad, I think: it should send z to <code>\\&lt;z.1,-z.2\\&gt;</code></p>",
        "id": 183893616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576796108
    },
    {
        "content": "<p>Slightly different but probably easier to use.</p>",
        "id": 183893630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576796122
    },
    {
        "content": "<p>I think <code>cases x, cases y, congr</code> does what you want</p>",
        "id": 183900004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576802543
    },
    {
        "content": "<p><code>ext</code> will often provide lemmas of the form you are looking for, but it relies on theorems you have to write yourself and mark with <code>@[extensionality]</code></p>",
        "id": 183900033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576802623
    }
]