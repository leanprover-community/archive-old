[
    {
        "content": "<p>I want to show that the set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>4</mn></msub><mo stretchy=\"false\">)</mo><mo>∈</mo><msup><mi mathvariant=\"double-struck\">R</mi><mn>4</mn></msup><mo>:</mo><msub><mi>x</mi><mn>3</mn></msub><mo>=</mo><mn>5</mn><msub><mi>x</mi><mn>4</mn></msub><mo>+</mo><mi>b</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{(x_1,x_2,x_3,x_4) \\in \\mathbb{R}^4 : x_3 = 5x_4 + b\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\">5</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">}</span></span></span></span> forms a subspace iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">b=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> (taken from Linear algebra done right). If I am not mistaken the syntax in lean for this set should be <code>{x : fin 5 → ℝ | x 3 = 5*(x 4) + b}</code>.  I know that I cannot do something like this,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.submodule</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">subspace</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Essentially I want to specify a specific carrier set and show that it forms a subspace iff some other condition holds. How would I write the statement of the question in LEAN?</p>",
        "id": 262938435,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1638119505
    },
    {
        "content": "<p><code>fin 5</code> has five elements (0,1,2,3,4) so you probably want to use <code>fin 4</code> instead and index from 0.</p>",
        "id": 262938613,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638119835
    },
    {
        "content": "<p>There isn't an <code>is_subspace</code> predicate in mathlib currently, possibly the easiest way to state this using the definitions in mathlib currently is to say that <code>(submodule.span {x : fin 5 → ℝ | x 3 = 5*(x 4) + b} : set _) = {x : fin 5 → ℝ | x 3 = 5*(x 4) + b}</code>. The span is the smallest subspace (module) containing the set so being equal to the span as a set is the same as being closed under the module operations</p>",
        "id": 262938682,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638119993
    },
    {
        "content": "<p>If you want to define a predicate, one possibility:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"sd\">/-- Does there exist an R-linear subspace with the given carrier set? -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_subspace</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">is_subspace</span> <span class=\"n\">ℝ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262938828,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638120163
    },
    {
        "content": "<p>You could alternatively phrase it as there exists a submodule that is equal as a set:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">S</span>\n</code></pre></div>",
        "id": 262938832,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638120172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thank you for your help, both of these solutions should be enough for me <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 262938904,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1638120249
    },
    {
        "content": "<p>Oh nice I didn't know we had the abbreviation <code>subspace</code> for <code>submodule</code>, thats good</p>",
        "id": 262938915,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638120271
    },
    {
        "content": "<p>I haven't really done too much with algebra in Lean, so I had a go at the exercise.</p>\n<p>I did it in a very hands-on way, but it would be conceptually nicer to use the fact that when <code>b = 0</code> it's a subspace because it's the kernel of a linear map.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.submodule</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"sd\">/-- Does there exist an R-linear subspace with the given carrier set? -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_subspace</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">is_subspace</span> <span class=\"n\">ℝ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">true_iff</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">false_iff</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- lean messes up the syntax if you don't give it the set explicitly</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"mi\">3</span><span class=\"o\">)},</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n      <span class=\"n\">intros</span><span class=\"o\">,</span>\n      <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n      <span class=\"n\">intros</span><span class=\"o\">,</span>\n      <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hzero</span><span class=\"o\">,</span> <span class=\"n\">hadd</span><span class=\"o\">,</span> <span class=\"n\">hbul</span><span class=\"o\">⟩,</span> <span class=\"n\">hcarrier</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hcarrier</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">ne.symm</span> <span class=\"n\">hb</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hzero</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 262939365,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638121007
    },
    {
        "content": "<p>The proof is nicer if there's an <code>is_subspace_iff</code> lemma so you get easier access to the three axioms of a subspace.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_subspace_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_subspace</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span>\n    <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n    <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">carrier</span><span class=\"o\">,</span> <span class=\"n\">hzero</span><span class=\"o\">,</span> <span class=\"n\">hadd</span><span class=\"o\">,</span> <span class=\"n\">hbul</span><span class=\"o\">⟩,</span> <span class=\"n\">hcarrier</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">submodule.coe_set_mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hcarrier</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">carrier</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hzero</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">hadd</span><span class=\"o\">,</span> <span class=\"n\">hbul</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hzero</span><span class=\"o\">,</span> <span class=\"n\">hadd</span><span class=\"o\">,</span> <span class=\"n\">hbul</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hzero</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">hadd</span><span class=\"o\">,</span> <span class=\"n\">hbul</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">is_subspace</span> <span class=\"n\">ℝ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_subspace_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">ne.symm</span> <span class=\"n\">hb</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 262939925,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638121856
    },
    {
        "content": "<p>It seems like predicates like <code>is_subspace</code> could be rather useful, since they expose carrier set for rewriting purposes.  I know similar things are in the deprecated folder.</p>\n<p>It's nice how you can easily turn an <code>is_subspace R s</code> into a <code>subspace</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_subspace.to_subspace</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_subspace</span> <span class=\"n\">R</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_subspace_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2.1</span><span class=\"o\">,</span> <span class=\"n\">h.2.2</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262940402,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638122436
    },
    {
        "content": "<p>I wonder what it would be like if mathlib's subobjects used a more unified interface, where there's an explicit predicate on carrier sets.</p>\n<p>One possible design:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- it's `subtype` but with `carrier` rather than `val` -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">subobject</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- subobjects have a canonical set_like instance -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">subobject.set_like</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set_like</span> <span class=\"o\">(</span><span class=\"n\">subobject</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m.carrier</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">congr'</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">is_subfoo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">op_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">foo.op</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subfoo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">subobject</span> <span class=\"o\">(</span><span class=\"n\">is_subfoo</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">subfoo.set_like</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">set_like</span> <span class=\"o\">(</span><span class=\"n\">subfoo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">subobject.set_like</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subfoo.op_mem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">subfoo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo.op</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">m.property.op_mem</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">subfoo.foo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">subfoo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">foo.op</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">m.op_mem</span> <span class=\"n\">x.property</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 262941703,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638124219
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I guess this is another way <code>set_like</code> could work for subobjects)</p>",
        "id": 262942080,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638124775
    },
    {
        "content": "<p>I have also been thinking along these lines (also for morphisms). Some notes:</p>\n<ul>\n<li>it's not clear whether <code>subfoo</code> should be (semi)reducible:</li>\n<li>\n<ul>\n<li>if yes, then you'll create big unification problems easily (especially if it involves <code>simp</code> lemmas). I guess when using a structure type <code>is_subfoo</code> it's not too bad, but what about someone defining <code>is_subring s := is_add_subgroup s ∧ is_submonoid s</code>, <code>is_add_subgroup s := is_add_monoid s ∧ ∀ x ∈ s, x⁻¹ ∈ s</code> and <code>is_add_monoid s := is_sub_additive s ∧ 0 ∈ s</code>?</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>and if no, then you'll have to duplicate everything defined for <code>subobject</code>, resulting in <em>more</em> duplication</li>\n</ul>\n</li>\n<li>there are relatively few things you have to duplicate per subobject that aren't handled through <code>set_like</code>: <code>s.carrier = ↑s</code>, the <code>@[ext]</code> lemma (could be solved with a smarter <code>ext</code> tactic, and the <code>copy</code> constructor.</li>\n<li>it doesn't really address the main source of duplication in my experience: for sub{semiring,ring,field} we (should) have <code>finset_prod_mem</code>, <code>multiset_prod_mem</code>, <code>list_prod_mem</code>, <code>finset_sum_mem</code>, <code>multiset_sum_mem</code>, <code>list_sum_mem</code>, <code>polynomial_eval_mem</code>, <code>polynomial_eval₂_mem</code>, <code>polynomial_aeval_mem</code>, <code>finsupp_sum_mem</code>, <code>finsupp_total_mem</code>, ...</li>\n</ul>",
        "id": 262997266,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638186302
    },
    {
        "content": "<p>So my conclusion is I'd be very happy to see someone else do this, but I'll first try out other ways to refactor subobjects, such as a per-subobject typeclass :)</p>",
        "id": 262997442,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638186414
    },
    {
        "content": "<p>I tried a refactor that included a <code>closed_under (+)</code> typeclass; the key thing we need the typeclass to state (or just provide) is that addition is the obvious addition induced by coercion. There's an open PR somewhere that doesn't build</p>",
        "id": 263009366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638193258
    },
    {
        "content": "<p>Looks like <a href=\"https://github.com/leanprover-community/mathlib/issues/7834\">#7834</a>?</p>",
        "id": 263010975,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638194217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> Do you think there's a missing feature in Lean that would help deal with all this duplication? I think there's no reason to believe that typeclasses are necessarily up to the task (as powerful as they may be).  It might be like additive vs multiplicative structures, where we need generated lemmas to have the correct syntactic form -- one of the many issues with trying to use typeclasses for generic operations is that there's no head function for <code>rw</code> or <code>simp</code>.</p>\n<p>One thing that's come to mind is having some way to write generalized theorems in some namespace, then having some metaprogramming command you can use to instantiate everything in that namespace with some substitutions that specialize the theorem statements, creating new theorems in the current namespace.  It'd be like C++ templates (but the generic version is typechecked) or ML/OCaml functors (but implemented with metaprogramming).</p>\n<p>One of the horrible things that the <code>declare</code>/<code>def_declare</code> thing supports with the simple way it's implemented is stringly typed (but easy) metaprogramming, like this example for <code>set_like</code> that I didn't share because I didn't want to give the wrong idea for what <code>declare</code> was supposed to be about:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">def_declare</span> <span class=\"n\">subobject_set_like</span> <span class=\"n\">cls</span> <span class=\"n\">subcls</span> <span class=\"o\">:=</span>\n<span class=\"s2\">\"</span>\n<span class=\"s2\">namespace %(subcls)</span>\n<span class=\"s2\">variables {X : Type*} [%(cls) X]</span>\n\n<span class=\"s2\">instance : set_like (%(subcls) X) X :=</span>\n<span class=\"s2\">⟨carrier, λ p q h, by cases p; cases q; congr'⟩</span>\n\n<span class=\"s2\">@[simp] lemma mem_carrier {p : %(subcls) X} {x : X} : x ∈ p.carrier ↔ x ∈ (p : set X) := iff.rfl</span>\n\n<span class=\"s2\">@[ext] theorem ext {p q : %(subcls) X} (h : ∀ x, x ∈ p ↔ x ∈ q) : p = q := set_like.ext h</span>\n\n<span class=\"s2\">/-- Copy of a `%(subcls)` with a new `carrier` equal to the old one. Useful to fix definitional</span>\n<span class=\"s2\">equalities. See Note [range copy pattern]. -/</span>\n<span class=\"s2\">protected def copy (p : %(subcls) X) (s : set X) (hs : s = ↑p) : %(subcls) X :=</span>\n<span class=\"s2\">{ carrier := s,</span>\n<span class=\"s2\">  op_mem' := hs.symm ▸ p.op_mem' }</span>\n\n<span class=\"s2\">@[simp] lemma coe_copy (p : %(subcls) X) (s : set X) (hs : s = ↑p) :</span>\n<span class=\"s2\">  (p.copy s hs : set X) = s := rfl</span>\n\n<span class=\"s2\">lemma copy_eq (p : %(subcls) X) (s : set X) (hs : s = ↑p) : p.copy s hs = p :=</span>\n<span class=\"s2\">set_like.coe_injective hs</span>\n\n<span class=\"s2\">end %(subcls)</span>\n<span class=\"s2\">\"</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">subfoo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">op_mem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">foo.op</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"n\">declare</span> <span class=\"n\">subobject_set_like</span> <span class=\"n\">foo</span> <span class=\"n\">subfoo</span>\n</code></pre></div>",
        "id": 263047689,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638209907
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Unified.20interface.20for.20subobjects\">#general &gt; Unified interface for subobjects</a></p>",
        "id": 263128436,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638270084
    }
]