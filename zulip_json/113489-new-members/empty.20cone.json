[
    {
        "content": "<p>I want to define the empty cone, given an object in a category C. I have tried to do as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">empty_cone</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"n\">nat_trans</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">pempty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>by (trying to) mimic the way the constant functor is used in const.lean</p>\n<p>I get the following error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kn\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kn\">constant</span>\n  <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">pempty</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</pre></div>\n\n\n<p>If I remove the .obj X I instead get:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">nat_trans</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">pempty</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">pempty</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">pempty</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">calle</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">sheaves</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">zeroobject</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"n\">nat_trans</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"err\">?</span><span class=\"n\">m_6</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">?</span> <span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"err\">?</span> <span class=\"err\">?</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">pempty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n</pre></div>",
        "id": 178904414,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571871126
    },
    {
        "content": "<p><code>π := nat_trans</code> is already wrong--<code>π</code> needs to be a specific natural transformation, not the type of natural transformation between ... and ...<br>\nIs there something like <code>nat_trans.empty</code> already? Otherwise, you can define it easily enough</p>",
        "id": 178904705,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571871372
    },
    {
        "content": "<p>I have not found anything like nat_trans.empty, so I will try to define it myself. Thank you.</p>",
        "id": 178904777,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571871456
    },
    {
        "content": "<p>Now that I have defined empty_trans I still get the same error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">empty_cone</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"n\">empty_trans</span> <span class=\"o\">((</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">pempty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>gives the error</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kn\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kn\">constant</span>\n  <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">pempty</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</pre></div>\n\n\n<p>Im probably not referring to the constant functor correctly, I tried copying the way it was done in const.lean but apparently I am doing something wrong. Do I need to refer to C explictly somehow?</p>",
        "id": 178906177,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571872715
    },
    {
        "content": "<p>This is an example of how its used in const.lean:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">obj_obj</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">const</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 178906216,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571872759
    },
    {
        "content": "<p>oh</p>",
        "id": 178906592,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571873100
    },
    {
        "content": "<p>You probably have <code>category.functor.const</code>, not <code>category_theory.functor.const</code>.</p>",
        "id": 178906628,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571873136
    },
    {
        "content": "<p>It's super annoying.</p>",
        "id": 178906632,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571873141
    },
    {
        "content": "<p>Thank you! I think it works because now Im getting a different error, hopefully a somewhat easier one though.</p>",
        "id": 178907170,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571873681
    },
    {
        "content": "<p>What does this error mean?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">empty_trans</span> <span class=\"o\">((</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">pempty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">pempty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">pempty</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">?</span> <span class=\"n\">v</span> <span class=\"err\">?</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">calle</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">sheaves</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">zeroobject</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"n\">empty_trans</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_3</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pempty</span> <span class=\"err\">⥤</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"n\">nat_trans</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">?</span> <span class=\"err\">?</span> <span class=\"err\">?</span> <span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"err\">?</span> <span class=\"err\">?</span><span class=\"o\">)</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">pempty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n</pre></div>\n\n\n<p>This is my code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">empty_trans</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pempty</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat_trans</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tidy</span>\n\n<span class=\"n\">def</span> <span class=\"n\">empty_cone</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"n\">empty_trans</span> <span class=\"o\">((</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">pempty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 178907511,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571874010
    },
    {
        "content": "<p>Why is it expecting Type ? : Type (?+1)? Is there some implicit argument to empty_trans that I am not providing?</p>",
        "id": 178907554,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571874094
    },
    {
        "content": "<p>I solved it, I just had to supply the category C to empty_trans as well</p>",
        "id": 178907759,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571874332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> welcome back!</p>",
        "id": 178909041,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571875761
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">cones</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">pempty</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">limits</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">𝒞</span>\n\n<span class=\"n\">def</span> <span class=\"n\">empty_trans</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pempty</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nat_trans</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tidy</span>\n\n<span class=\"n\">def</span> <span class=\"n\">empty_cone</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"n\">empty_trans</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span>\n</pre></div>",
        "id": 178909501,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571876322
    },
    {
        "content": "<p>Looks like we should add these!</p>",
        "id": 178912952,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571880544
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> :)</p>",
        "id": 178927500,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571902271
    },
    {
        "content": "<p>Would it be safe to use <code>clean</code> to clean up after <code>tidy</code> in this case? I think it would be a lot of fun if we could use tactics for definitions.</p>",
        "id": 178927780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571902527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Did you just define data using a tactic <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> ?</p>",
        "id": 178927781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571902527
    },
    {
        "content": "<p>I just copied his code for that part</p>",
        "id": 178927800,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571902550
    },
    {
        "content": "<p>In mathlib the empty functor is defined by tidy</p>",
        "id": 178927873,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571902607
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">pempty</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tidy</span>\n</pre></div>",
        "id": 178927876,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571902622
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> Did you just define data using a tactic <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> ?</p>\n</blockquote>\n<p>when I tell people not to define data using a tactic, I always append \"unless you know what you're doing\" :P</p>",
        "id": 178927964,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571902696
    },
    {
        "content": "<p>Aah... I see what you're getting at (-;</p>",
        "id": 178928001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571902773
    },
    {
        "content": "<p>Anyway I want to now define a zero object:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">initial</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">empty_cone</span> <span class=\"n\">zero</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">terminal</span> <span class=\"o\">:</span> <span class=\"n\">is_colimit</span> <span class=\"o\">(</span><span class=\"n\">empty_cocone</span> <span class=\"n\">zero</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>but the line (initial : is_limit (empty_cone zero) gives the following error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">empty_cone</span> <span class=\"n\">zero</span><span class=\"o\">)</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"err\">?</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I am still not that familiar with classes, structures etc. in lean, should this be a class instead (like has_terminal, has_initial)?</p>",
        "id": 178928070,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571902823
    },
    {
        "content": "<p>you're missing closing brackets</p>",
        "id": 178928181,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571902935
    },
    {
        "content": "<p>In terminal.lean they define terminal as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">has_terminal</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">has_limits_of_shape</span> <span class=\"o\">:</span> <span class=\"n\">has_limits_of_shape</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">pempty</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n<span class=\"kn\">abbreviation</span> <span class=\"n\">terminal</span> <span class=\"o\">[</span><span class=\"n\">has_terminal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Now using has_terminal makes it easy to say if any given category has a terminal object or not. Should I define a class has_zero similarly or is there a way to rephrase this using structures?</p>",
        "id": 178928744,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571903536
    },
    {
        "content": "<p>Isn't there a PR for zero object?</p>",
        "id": 178928832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571903649
    },
    {
        "content": "<p>Maybe it's even merged already</p>",
        "id": 178928834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571903655
    },
    {
        "content": "<p>I have not found anything, but it would be great if it exists. I want to eventually define an abelian category in lean</p>",
        "id": 178928952,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571903784
    },
    {
        "content": "<p>Have you talked with Scott?</p>",
        "id": 178929065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571903945
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/1445\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1445\">https://github.com/leanprover-community/mathlib/pull/1445</a></p>",
        "id": 178929093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571903998
    },
    {
        "content": "<p>No I have not talked with Scott, but this looks good! Kernels as well :o</p>",
        "id": 178929445,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571904286
    },
    {
        "content": "<p>I decided before I proceeded with zero objects and kernels I should go back and patch a few gaps in the API.</p>",
        "id": 178939692,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571914115
    },
    {
        "content": "<p>Particularly, for all the special shapes of limits a characterisation of an object being the limit, in the form <code>\\forall Y, (Y \\hom X) \\equiv ...</code> for an appropriate <code>...</code>.</p>",
        "id": 178939767,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571914203
    },
    {
        "content": "<p>And then actually proving a bunch of the basic lemmas about the shapes we have already.</p>",
        "id": 178939792,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571914214
    },
    {
        "content": "<p>e.g. equalisers are monomorphisms, equalisers are \"commutative\" and \"associative\", etc., etc., to test out the existing limits API a bit further. Reid is right to complain that there haven't been enough lemmas relative to definitions so far in <code>category_theory/limits/shapes/</code>.</p>",
        "id": 178939839,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571914281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Is there anything you think I could help with?</p>",
        "id": 178941896,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571916146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span>, how about proving that <code>equaliser f g \\iso equaliser g f</code>, or that <code>mono (equaliser.\\iota f g)</code>?</p>\n<p>In some sense the real problem is to explain what went wrong when you tried to implement your preferred pencil-and-paper proofs of these facts in Lean. The limits API still (...) needs work, and having people attempt to fill in some basic things like these and report back how it goes would be super useful.</p>",
        "id": 178942633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571916814
    },
    {
        "content": "<p>(I have an idea of what I want to add to the limits API, which I think would make both of these questions easier, but I'm happy not to spoil it for you. :-)</p>",
        "id": 178942714,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571916871
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 178942725,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571916880
    },
    {
        "content": "<p>How do you use abbrevations? I have the following abbrevations:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">abbreviation</span> <span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">equalizer</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">parallel_pair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">zero</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">reassoc</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">condition</span> <span class=\"o\">:</span> <span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">ι</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">ι</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">erw</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">parallel_pair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">walking_parallel_pair_hom</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">erw</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">parallel_pair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">walking_parallel_pair_hom</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">abbreviation</span> <span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"err\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">⟶</span> <span class=\"n\">equalizer</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">parallel_pair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fork</span><span class=\"bp\">.</span><span class=\"n\">of_ι</span> <span class=\"n\">k</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I want to combine them as:<br>\n<code>lean have H1 : equalizer f g ⟶ equalizer g f, exact ((equalizer g f).lift (equalizer f g).ι (equalizer f g).condition) </code><br>\nBut this gives the error</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kn\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kn\">constant</span>\n  <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">equalizer</span> <span class=\"n\">g</span> <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">C</span>\n</pre></div>",
        "id": 178947369,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571920957
    },
    {
        "content": "<p>Unrelated: <code>have</code> is for propositions. Your morphism is data, so you need <code>let H1 : ...</code></p>",
        "id": 178947849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571921331
    },
    {
        "content": "<p>Thank you</p>",
        "id": 178947880,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571921374
    },
    {
        "content": "<p>Next, <code>(equalizer g f).lift</code> will try to see if <code>(equalizer g f)</code> is a <em>term</em> of type <code>equalizer _ _</code></p>",
        "id": 178947988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571921435
    },
    {
        "content": "<p>But it is not.</p>",
        "id": 178947992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571921441
    },
    {
        "content": "<p>So you should simply write <code>equalizer.lift _ _</code></p>",
        "id": 178948013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571921461
    },
    {
        "content": "<p>I see, thank you</p>",
        "id": 178948674,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571921903
    },
    {
        "content": "<p>Does it work now?</p>",
        "id": 178948749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571921958
    },
    {
        "content": "<p>Yeah</p>",
        "id": 178949577,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1571922485
    }
]