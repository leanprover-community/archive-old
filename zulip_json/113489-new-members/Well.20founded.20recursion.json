[
    {
        "content": "<p>I'm currently trying to formalize things about impartial games and am having trouble using well founded recursion. I have defined a <code>subsequent</code> relation similar to the ones on <code>pgame</code> in mathlib and have shown it is well founded. To use it I have been showing that the appropriate things are subsequent and then writing <code>using_well_founded {dec_tac := tactic.assumption}</code>. This has worked in a couple of proofs but has broken when I tried to show that P-positions (second player has a winning strategy) are not N-positions (first player has a winning strategy):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">p_imp_not_n</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pimpartial</span><span class=\"o\">),</span> <span class=\"n\">p_position</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">n_position</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"mi\">0</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">intro</span> <span class=\"n\">hpG</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">zero_unique</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">zero_not_n_position</span>\n    <span class=\"kn\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">intro</span> <span class=\"n\">hpG</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">hnG</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">p_position</span> <span class=\"n\">at</span> <span class=\"n\">hpG</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">n_position</span> <span class=\"n\">at</span> <span class=\"n\">hnG</span><span class=\"o\">,</span>\n\n      <span class=\"n\">cases</span> <span class=\"n\">hnG</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hnG&#39;</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hpG&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">hpG</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hpG&#39;</span> <span class=\"k\">with</span> <span class=\"n\">j</span> <span class=\"n\">hpG&#39;&#39;</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hnG&#39;&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">hnG&#39;</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n\n      <span class=\"c1\">-- For recursion</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subsequent</span> <span class=\"o\">((</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">subsequent</span><span class=\"bp\">.</span><span class=\"n\">from_move</span> <span class=\"o\">((</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subsequent</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">subsequent</span><span class=\"bp\">.</span><span class=\"n\">from_move</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subsequent</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">subsequent</span><span class=\"bp\">.</span><span class=\"n\">from_trans</span> <span class=\"o\">(((</span><span class=\"n\">mk</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">mk</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n\n      <span class=\"n\">exact</span> <span class=\"n\">p_imp_not_n</span> <span class=\"o\">(((</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">hpG&#39;&#39;</span> <span class=\"n\">hnG&#39;&#39;</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>This has an error saying that it could not find a well founded relation between <code>((mk (nat.succ n) M).move i).move j</code> and <code>mk (nat.suc n) M</code> and <code>hwf</code> is not listed in the current state. Is there a better way to use well founded recursion and why is <code>hwf</code> not in the current state?</p>",
        "id": 199318070,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1590953558
    },
    {
        "content": "<p>Can you share a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 199342167,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590995164
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pimpartial</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">pimpartial</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pimpartial</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pimpartial</span>\n\n<span class=\"c1\">-- Definitions to talk about moves</span>\n<span class=\"n\">def</span> <span class=\"n\">moves</span> <span class=\"o\">:</span> <span class=\"n\">pimpartial</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span>\n<span class=\"n\">def</span> <span class=\"n\">move</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pimpartial</span><span class=\"o\">),</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">moves</span> <span class=\"bp\">→</span> <span class=\"n\">pimpartial</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">M</span> <span class=\"n\">i</span>\n\n<span class=\"c1\">-- definitions of subsequent and proof it is well founded</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">subsequent</span> <span class=\"o\">:</span> <span class=\"n\">pimpartial</span> <span class=\"bp\">→</span> <span class=\"n\">pimpartial</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">from_move</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pimpartial</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">moves</span><span class=\"o\">),</span> <span class=\"n\">subsequent</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">from_trans</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">pimpartial</span><span class=\"o\">),</span> <span class=\"n\">subsequent</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">subsequent</span> <span class=\"n\">H</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">subsequent</span> <span class=\"n\">G</span> <span class=\"n\">F</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">wf_subsequent</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"n\">subsequent</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_well_founded</span> <span class=\"n\">pimpartial</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">subsequent</span><span class=\"o\">,</span>\n  <span class=\"n\">wf</span> <span class=\"o\">:=</span> <span class=\"n\">wf_subsequent</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- Definition using well founded recursion (works)</span>\n<span class=\"n\">def</span> <span class=\"n\">p_position</span> <span class=\"o\">:</span> <span class=\"n\">pimpartial</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"mi\">0</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">moves</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">moves</span><span class=\"o\">),</span>\n      <span class=\"k\">have</span> <span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subsequent</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">p_position</span> <span class=\"o\">(((</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">n_position</span> <span class=\"o\">:</span> <span class=\"n\">pimpartial</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- Proof using well founded recursion (does not work)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">p_imp_not_n</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pimpartial</span><span class=\"o\">),</span> <span class=\"n\">p_position</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">n_position</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"mi\">0</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">intro</span> <span class=\"n\">hpG</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">hnG</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">p_position</span> <span class=\"n\">at</span> <span class=\"n\">hpG</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">n_position</span> <span class=\"n\">at</span> <span class=\"n\">hnG</span><span class=\"o\">,</span>\n\n      <span class=\"n\">cases</span> <span class=\"n\">hnG</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hnG&#39;</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hpG&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">hpG</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hpG&#39;</span> <span class=\"k\">with</span> <span class=\"n\">j</span> <span class=\"n\">hpG&#39;&#39;</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hnG&#39;&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">hnG&#39;</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n\n      <span class=\"c1\">-- For recursion</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subsequent</span> <span class=\"o\">((</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">subsequent</span><span class=\"bp\">.</span><span class=\"n\">from_move</span> <span class=\"o\">((</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subsequent</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">subsequent</span><span class=\"bp\">.</span><span class=\"n\">from_move</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subsequent</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">subsequent</span><span class=\"bp\">.</span><span class=\"n\">from_trans</span> <span class=\"o\">(((</span><span class=\"n\">mk</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">mk</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n\n      <span class=\"n\">exact</span> <span class=\"n\">p_imp_not_n</span> <span class=\"o\">(((</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">hpG&#39;&#39;</span> <span class=\"n\">hnG&#39;&#39;</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">pimpartial</span>\n</code></pre></div>",
        "id": 199359117,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1591011942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267202\">@Fox Thomson</span>, sorry, I don't have time to look at this now, but notice in <code>pgame.lean</code> I used a more complicated tactic for proving well-founded-ness. Look for the line <code>using_well_founded { dec_tac := pgame_wf_tac }</code>.</p>",
        "id": 199360316,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591012894
    },
    {
        "content": "<p>Not sure if that will help with your problem; I haven't read your code yet.</p>",
        "id": 199360343,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591012912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  I've just tried using the tactic and it seems to be working now, thank you.</p>",
        "id": 199418410,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1591043213
    }
]