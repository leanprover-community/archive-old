[
    {
        "content": "<p>I have the following goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span>\n</pre></div>\n\n\n<p>Now I have an element s which has all required properties to prove this goal. I would like to provide this s using existsi. Of course I also have to provide the fact that s is in S (my hypothesis Hs). However using existsi s Hs doesnt seem to work, and I need to call existsi two times. That is existsi s, existsi Hs. Is there anyway to make this into a one-liner?</p>",
        "id": 148043024,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1542724586
    },
    {
        "content": "<p><code>refine \\&lt;s, Hs, _\\&gt;</code></p>",
        "id": 148043187,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542724757
    },
    {
        "content": "<p><code>existsi</code> takes an expression or a list of expressions. Try <code>existsi [s, Hs]</code>.</p>",
        "id": 148043189,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542724757
    },
    {
        "content": "<p>Thank you! Both methods worked fine :). What would be the pro of using refine instead of existsi? That its more general?</p>",
        "id": 148044104,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1542725625
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/113488-general/subject/.60existsi.60.20is.20so.20dumb\" title=\"#narrow/stream/113488-general/subject/.60existsi.60.20is.20so.20dumb\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/.60existsi.60.20is.20so.20dumb</a></p>",
        "id": 148044259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542725767
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 148044703,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1542726228
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">easy</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">--  existsi 23, -- lean says &quot;that&#39;s not an integer!&quot;</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"mi\">23</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"c1\">-- works fine</span>\n    <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I have almost given up on <code>existsi</code>, it doesn't try hard enough.</p>",
        "id": 148078885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542759677
    }
]