[
    {
        "content": "<p>Is there a way to set up dependent PRs to avoid having to solve a merge conflict once the dependence is merged? (I was half hoping that the bot would take care of this, but it didn't).<br>\nThis is how I solved my merge conflict in <a href=\"https://github.com/leanprover-community/mathlib/pull/12939\">#12939</a>: I did <code>git pull</code> in the master branch, and then back in the <code>padic_add_valuation</code> branch I did a rebase where I resolved the conflict:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">rebase</span> <span class=\"n\">master</span>\n<span class=\"n\">git</span> <span class=\"n\">add</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">field_power.lean</span>\n<span class=\"n\">git</span> <span class=\"n\">rebase</span> <span class=\"c1\">--continue</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"c1\">--fallback=download-all</span>\n<span class=\"n\">git</span> <span class=\"n\">push</span> <span class=\"bp\">-</span><span class=\"n\">f</span>\n</code></pre></div>\n<p>and finally I committed the changes (the <code>leanproject get-cache</code> was just so that I could check that the code was still working). <br>\nI  may be overcomplicating things; could anyone suggest a simpler git workflow to deal with this situation? Thanks!</p>",
        "id": 276984793,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1648549727
    },
    {
        "content": "<p>What I did with <a href=\"https://github.com/leanprover-community/mathlib/pull/12890\">#12890</a> was to put only the material for the new PR, meaning that it didn't compile, but one rebase after <a href=\"https://github.com/leanprover-community/mathlib/pull/12888\">#12888</a> was enough to get CI to pass.</p>",
        "id": 276984944,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648549822
    },
    {
        "content": "<p>Ah, I see. Thanks!</p>",
        "id": 276985045,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1648549914
    },
    {
        "content": "<p>When I want to merge master, I do <code>git fetch; git merge origin/master</code> and solve conflicts in VScode.</p>",
        "id": 276985363,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648550137
    },
    {
        "content": "<p>I tried <code>git merge master</code> without doing <code>git fetch</code> first and I ended up with about 200 changed files, so I undid this and tried rebase instead. If I understand correctly, you're saying that if I do <code>git fetch</code> first it should work?</p>",
        "id": 276985833,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1648550445
    },
    {
        "content": "<p>No, <code>git fetch</code> and <code>origin/master</code> just ensure that you are merging the most up to date version of <code>master</code> (rather than the one you have in local). What you're describing sounds like you accidentally left the merge mode.</p>",
        "id": 276985962,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648550539
    },
    {
        "content": "<p>Where exactly did you see that you changed 200 files?</p>",
        "id": 276985999,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648550568
    },
    {
        "content": "<p>Oh, so you mean I should use <code>git fetch</code> in my branch  instead of <code>git pull</code> in master? I don't know what you mean by leaving merge mode.<br>\nI saw the changed files in VSCode, right after trying <code>git merge master</code>.</p>",
        "id": 276986546,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1648550929
    },
    {
        "content": "<p>Ah! That's perfectly fine then. Just finish the merge, push the commit and you will see on Github that everything is as it should.</p>",
        "id": 276986606,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648550987
    },
    {
        "content": "<p>I was afraid that completing that merge with the 200 changes would introduce some mess like I did <a href=\"#narrow/stream/113489-new-members/topic/Merge.20conflict.20-.20localization\">here</a>.</p>",
        "id": 276987377,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1648551452
    },
    {
        "content": "<p>The lazy way to do this is:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git fetch\n<span class=\"c1\"># save and commit all your work first!</span>\ngit checkout the-branch-that-was-merged-by-bors\n\n<span class=\"c1\"># https://stackoverflow.com/a/46741538/102441</span>\ngit merge -s ours --no-commit origin/master <span class=\"o\">&amp;&amp;</span> git read-tree -m -u origin/master\n\ngit checkout the-branch-you-want-to-continue-with\ngit merge the-branch-that-was-merged-by-bors  <span class=\"c1\"># git should sort out the conflicts here</span>\n</code></pre></div>",
        "id": 277015458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648565074
    },
    {
        "content": "<p>It would be nice if bors did the first two steps for you</p>",
        "id": 277015770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648565182
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 277037124,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1648573890
    },
    {
        "content": "<p>(I didn't actually test the above, but it approximates the add-hoc approach I usually use)</p>",
        "id": 277043653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648576825
    }
]