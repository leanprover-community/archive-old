[
    {
        "content": "<p>Dear All,</p>\n<p>I am trying to work with <code>mul_opposite</code> and <code>polynomial</code>.  As far as I can see, there is little more in mathlib, besides the equivalence</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">op_ring_equiv</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I can get by with the two lemmas below: if my understanding is correct, they should be true.  Can someone either provide a proof, or give a hint as to how to use <code>op_ring_equiv</code> to prove them?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span> <span class=\"n\">mul_opposite</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_opposite.op_C</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">op_ring_equiv</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_opposite.op_X</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">op_ring_equiv</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277512699,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648884286
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.op_ring_equiv\">docs#polynomial.op_ring_equiv</a></p>",
        "id": 277513505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648885483
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra.op_ring_equiv_single\">docs#add_monoid_algebra.op_ring_equiv_single</a> is basically the proof you want</p>",
        "id": 277513519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648885530
    },
    {
        "content": "<p>You just need to do the appropriate unfolding to turn polynomial into add_monoid_algebra</p>",
        "id": 277513561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648885565
    },
    {
        "content": "<p>I spent quite some time trying various combinations of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unfold</span> <span class=\"n\">polynomial</span>\n<span class=\"n\">unfold</span> <span class=\"n\">op_ring_equiv</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">add_monoid_algebra.op_ring_equiv</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">monomial</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">monomial_fun</span><span class=\"o\">,</span>\n<span class=\"n\">ext</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">congr</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">add_monoid_algebra.op_ring_equiv_single</span> <span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">convert</span> <span class=\"n\">add_monoid_algebra.op_ring_equiv_single</span> <span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">add_monoid_algebra.op_ring_equiv_single</span> <span class=\"mi\">0</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">convert</span> <span class=\"n\">add_monoid_algebra.op_ring_equiv_single</span> <span class=\"mi\">0</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>but (I can say with almost certainly) none of these commands in any order actually works.</p>\n<p>I imagine that the proof is just a few characters, but I am having a really hard time figuring out which ones...</p>",
        "id": 277532048,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648908995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20op_C/near/277513505\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.op_ring_equiv\">docs#polynomial.op_ring_equiv</a></p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13132\">#13132</a> :-)</p>",
        "id": 277532919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648910174
    },
    {
        "content": "<p>This is harder to do now <code>polynomial</code> is a structure with one field.</p>",
        "id": 277533645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648910936
    },
    {
        "content": "<p>I feel very silly, but... this does not answer the question, right?</p>\n<p>I had not realized the typo in the doc-string, since I had only read the lean code. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 277535796,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648913440
    },
    {
        "content": "<p>Yes, I can't answer the question in just a few characters. I could imagine proving it using <code>ext</code> and checking coefficients but I think Eric has something much smarter in mind. The issue is that we can no longer unfold <code>polynomial</code> into <code>add_monoid_algebra</code> because they're no longer defeq.</p>",
        "id": 277536277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648914045
    },
    {
        "content": "<p>Ok, for the moment, I am happy with working assuming that the two lemmas that I wrote above are provable.  I can always leave <code>sorry</code>s and go back to them later.</p>",
        "id": 277536309,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648914109
    },
    {
        "content": "<p>Ideally, I would like to know that nat_degree, support, leading_coeff convert \"the obvious way\" from a polynomial to its <code>op</code>.  I think that I may be able to do the conversion, once those two pieces are in place.</p>",
        "id": 277536357,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648914154
    },
    {
        "content": "<p>(that is, once that <del>bridge</del>gap is closed, then I can make everything fit through the equivalence, or so I hope)</p>",
        "id": 277536370,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648914180
    },
    {
        "content": "<p>I made a start on this, but needed <a href=\"https://github.com/leanprover-community/mathlib/pull/13139\">#13139</a> first</p>",
        "id": 277539456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648917946
    },
    {
        "content": "<p>It should be possible to just do something like (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_finsupp_iso\">docs#to_finsupp_iso</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">to_finsupp_iso.injective</span><span class=\"o\">,</span>\n<span class=\"n\">clean_up_the_mess</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">the_lemma_i_mentioned_earlier</span>\n</code></pre></div>",
        "id": 277540036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648918692
    },
    {
        "content": "<p>But I can't work out what the intended spelling of <code>clean_up_the_mess</code> is</p>",
        "id": 277540047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648918736
    },
    {
        "content": "<p>Ok, thanks for the suggestion!  I'm probably not going to look at this today, but I have full proofs of the fact that supports, natdegrees, coeffs, leading coeffs... are what they should be, modulo these two lemmas.</p>",
        "id": 277540248,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648918966
    },
    {
        "content": "<p>Besides failing at proving <code>X = X</code>, this question exposed two typos in doc-strings: the one Kevin opened above and <a href=\"https://github.com/leanprover-community/mathlib/pull/13144\">#13144</a>.</p>",
        "id": 277547683,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648928441
    },
    {
        "content": "<p>As is often the case, once you find a solution to a problem, the problem suddenly appears much easier!  What is below works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">op_monomial</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">op_ring_equiv</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"bp\">=</span> <span class=\"n\">monomial</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">op_ring_equiv</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">op_C</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">op_ring_equiv</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">op_monomial</span> <span class=\"mi\">0</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">op_X</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">op_ring_equiv</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">op_monomial</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 277698578,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649061339
    },
    {
        "content": "<p>The first <code>by simp [op_ring_equiv]</code> squeezes to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">op_ring_equiv</span><span class=\"o\">,</span> <span class=\"n\">ring_equiv.trans_apply</span><span class=\"o\">,</span> <span class=\"n\">ring_equiv.op_apply_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_equiv.to_add_equiv_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">add_equiv.mul_op_apply</span><span class=\"o\">,</span> <span class=\"n\">add_equiv.to_fun_eq_coe</span><span class=\"o\">,</span>\n  <span class=\"n\">add_equiv.coe_trans</span><span class=\"o\">,</span> <span class=\"n\">op_add_equiv_apply</span><span class=\"o\">,</span> <span class=\"n\">ring_equiv.coe_to_add_equiv</span><span class=\"o\">,</span> <span class=\"n\">op_add_equiv_symm_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">unop_op</span><span class=\"o\">,</span> <span class=\"n\">to_finsupp_iso_monomial</span><span class=\"o\">,</span> <span class=\"n\">add_monoid_algebra.op_ring_equiv_single</span><span class=\"o\">,</span>\n  <span class=\"n\">to_finsupp_iso_symm_single</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>No wonder there were lots of wring turns that I was taking!</p>",
        "id": 277698726,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649061384
    },
    {
        "content": "<p>I am thinking of making a PR with the lemmas above and also </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coeff_op</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">op_ring_equiv</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">mul_opposite.op</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">mul_opposite.op</span> <span class=\"o\">(</span><span class=\"n\">p.coeff</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n <span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">support_op</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">op_ring_equiv</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">=</span> <span class=\"n\">p.support</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n <span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_op</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">op_ring_equiv</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">p.nat_degree</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n <span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">leading_coeff_op</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">op_ring_equiv</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">leading_coeff</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">p.leading_coeff</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Assuming this seems like a good idea, what should the namespaces for these lemmas be?  <code>polynomial</code> for dot-notation?  Should <code>mul_opposite</code> or <code>op_ring_equiv</code> appear somewhere?</p>\n<p>Thanks!</p>",
        "id": 277700830,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649062449
    },
    {
        "content": "<p>Those look useful. And yes, I would go for <code>namespace polynomial</code>.</p>",
        "id": 277703396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649063669
    },
    {
        "content": "<p>Thanks!  I'm preparing a PR.  I am thinking of starting a new file <code>ring_theory.polynomial.opposites</code>.  The <code>polynomial</code> files tend to be big and slow, and probably not often people need opposites, when working with polynomials.</p>\n<p>Does this sound reasonable?</p>",
        "id": 277703525,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649063746
    },
    {
        "content": "<p>I think they should be called <code>coeff_op_ring_equiv</code>, and be stated without the <code>op</code> on the LHS by changing the type of <code>p</code></p>",
        "id": 277703698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649063839
    },
    {
        "content": "<p>But those lemmas look good to me</p>",
        "id": 277703705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649063845
    },
    {
        "content": "<p>Also, in the context of this PR, <code>op (a * b)</code> converts to <code>op b * op a</code>.  However, it would make more sense to have <code>op (C a * X ^ n)</code> convert to <code>(C (op a) * X ^ n</code>.  Is there a way to instruct <code>simp</code> to use a different lemma than the \"obvious\" one?</p>",
        "id": 277703731,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649063860
    },
    {
        "content": "<p>If you do that, I think <code>op_ring_equiv</code> should move to that file</p>",
        "id": 277703737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649063862
    },
    {
        "content": "<p>We could add a simp lemma that sends <code>X ^ n * C</code> to <code>C * X ^ n</code>?</p>",
        "id": 277703846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649063900
    },
    {
        "content": "<p>We already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.X_pow_mul\">docs#polynomial.X_pow_mul</a>, but that's not safe as a simp lemma</p>",
        "id": 277703859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649063913
    },
    {
        "content": "<p>The lemma already exists.</p>",
        "id": 277703867,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649063919
    },
    {
        "content": "<p>Not specialized to <code>C</code>, does it?</p>",
        "id": 277703884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649063934
    },
    {
        "content": "<p>Ah, I see your point!</p>",
        "id": 277703906,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649063947
    },
    {
        "content": "<p>I will also add this lemma, then.  Though to a more basic file.</p>",
        "id": 277703919,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649063958
    },
    {
        "content": "<p>The idea with specializing to <code>C</code> is that it becomes a valid simp lemma that doesn't loop on <code>X ^ n * X ^ n</code></p>",
        "id": 277703920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649063958
    },
    {
        "content": "<p>Note that I just finished off my polynomial refactor in <a href=\"https://github.com/leanprover-community/mathlib/pull/13139\">#13139</a>, which will likely upset some calls to <code>simp</code> in your code if it gets merged</p>",
        "id": 277703965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649063991
    },
    {
        "content": "<p>Thanks for the heads up!  However, having learned that <code>monomial</code> is a much more stable spelling of <code>C a * X ^ n</code>, I am confident that it will be easy to fix the first lemma and all the other ones follow from it.</p>",
        "id": 277704080,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649064050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20op_C/near/277703698\">said</a>:</p>\n<blockquote>\n<p>I think they should be called <code>coeff_op_ring_equiv</code>, and be stated without the <code>op</code> on the LHS by changing the type of <code>p</code></p>\n</blockquote>\n<p>I thought that I understood this comment, but is what is below what you had in mind?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coeff_op_ring_equiv</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">op_ring_equiv</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">((</span><span class=\"n\">unop</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 277705148,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649064649
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13162\">#13162</a></p>\n<p>It seems that no file used <code>polynomial.op_ring_equiv</code>, so I simply moved the definition to a new file and placed there also the lemmas above.</p>\n<p>I will see if CI finds a hidden use of <code>op_ring_equiv</code> somewhere.</p>",
        "id": 277713941,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649069997
    },
    {
        "content": "<p>I also PRed the <code>simp</code> version of <code>X_mul</code> and <code>X_pow_mul</code>: <a href=\"https://github.com/leanprover-community/mathlib/pull/13163\">#13163</a>.</p>",
        "id": 277715418,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649070933
    }
]