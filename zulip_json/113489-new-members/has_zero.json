[
    {
        "content": "<p>I'm writing down some of <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/\">https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/</a> into a single standalone code and trying to run it in <a href=\"https://leanprover.github.io/live/latest\">https://leanprover.github.io/live/latest</a>.</p>\n<p>I have this code: <a href=\"https://tinyurl.com/2p9afvwh\">https://tinyurl.com/2p9afvwh</a> </p>\n<p>When I try to prove the <code>zero_add</code> lemma, I'm required to explicitly rewrite <code>zero</code> as 0 (via the <code>zero_is_nat</code> axiom), whereas in the game it seems like this inference happens automatically. Am I missing something?</p>\n<div class=\"codehilite\"><pre><span></span><code>instance : has_zero Nat := ⟨zero⟩    \naxiom zero_is_nat : zero = 0\naxiom add_zero (n : Nat) : n + 0 = n\n...\nlemma zero_add (n : Nat) : 0 + n = n :=\nbegin\ninduction n with d hd,\n\n-- base\n--  rw zero_is_nat,\nrw add_zero,\n\n-- inductive step\nrw add_succ,\nrw hd,\nend\n</code></pre></div>",
        "id": 269195408,
        "sender_full_name": "Guilherme Kunigami",
        "timestamp": 1643073069
    },
    {
        "content": "<p>You aren't missing anything, there are a few differences between the game and the environment you are running in.<br>\nThe first is that the natural number game is tweaked for teaching purposes to make some things more intuitive, I believe the behaviour of induction is one of those things.<br>\nThe second is that the game runs on a more recent but not the most recent version of lean, the web editor you are using is actually very old, we recommend you use the more recent one at <a href=\"https://leanprover-community.github.io/lean-web-editor/\">https://leanprover-community.github.io/lean-web-editor/</a></p>",
        "id": 269196375,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643073903
    },
    {
        "content": "<p>Thanks for the pointers!</p>\n<p>There does seem to be some customization here:<br>\n<a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/tactic/modded.lean#L73-L78\">https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/tactic/modded.lean#L73-L78</a></p>\n<p>Is there any way to \"alias\" <code>Nat.zero</code> to <code>0</code>?</p>\n<p>So when declaring a lemma like this</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma zero_add (n : Nat) : 0 + n = n :=\n</code></pre></div>\n\n<p>It really means</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma zero_add (n : Nat) : add zero n = n :=\n</code></pre></div>\n\n<p>?</p>",
        "id": 269204290,
        "sender_full_name": "Guilherme Kunigami",
        "timestamp": 1643080545
    },
    {
        "content": "<p>Thats what declaring <code>has_zero Nat</code> does, it makes lean interpret <code>0 : Nat</code> using <code>Nat.zero</code>, the two should be definitionally equal but displayed differently</p>",
        "id": 269244500,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643110992
    },
    {
        "content": "<p>Yes, induction had the irritating behaviour that it would use <a href=\"http://nat.zero\">nat.zero</a> which was definitionally but not syntactically <a href=\"http://has_zero.zero\">has_zero.zero</a> so I did some hackery with induction to make this not happen</p>",
        "id": 269246588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643112289
    },
    {
        "content": "<p>Do we have a recursor for nat that expresses things in terms of <code>0</code> and <code>+1</code>?</p>",
        "id": 269271092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643123802
    },
    {
        "content": "<p>Then you could use <code>induction n using that_nat_recursor</code></p>",
        "id": 269271155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643123835
    },
    {
        "content": "<p>Another confusing bit is that <code>rw zero_is_nat</code> rewrites both <code>zero</code>s to <code>0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code> -- 0 + zero = zero\n rw zero_is_nat\n -- 0 + 0 = 0\n</code></pre></div>\n\n<p>Whereas in other scenarios <code>rw</code> seems to only re-write the first occurrence. I'm assuming the second <code>zero</code> turned into <code>0</code> via some type inference?</p>",
        "id": 269295949,
        "sender_full_name": "Guilherme Kunigami",
        "timestamp": 1643133200
    },
    {
        "content": "<p>No, it finds the first occurrence to figure out the correct arguments, then rewrites it everywhere.</p>",
        "id": 269296222,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643133296
    },
    {
        "content": "<p>Guilherme, see <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20rw.20tactic\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20rw.20tactic</a></p>",
        "id": 269297132,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643133638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/has_zero/near/269296222\">said</a>:</p>\n<blockquote>\n<p>No, it finds the first occurrence to figure out the correct arguments, then rewrites it everywhere.</p>\n</blockquote>\n<p>ohh! thanks for the clarification :)</p>",
        "id": 269297249,
        "sender_full_name": "Guilherme Kunigami",
        "timestamp": 1643133675
    },
    {
        "content": "<p>Thanks for the link Patrick, Kevin's answer explains the rw in more detail:</p>\n<p><a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20rw.20tactic/near/268984637\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20rw.20tactic/near/268984637</a></p>",
        "id": 269297561,
        "sender_full_name": "Guilherme Kunigami",
        "timestamp": 1643133800
    },
    {
        "content": "<p>I don't know whether we have this explanation somewhere on the community website, but we should. This is a very natural question and people ask about it pretty often.</p>",
        "id": 269297756,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643133866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> could we add this to the FAQ?</p>",
        "id": 269317667,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1643141881
    },
    {
        "content": "<p>done, and also added something about <code>nat.zero</code>. <a href=\"https://github.com/ericrbg/leanFAQ/wiki/Tactics\">https://github.com/ericrbg/leanFAQ/wiki/Tactics</a> if someone can check this would be appreciated as I'm really not sure about my writing here</p>",
        "id": 269406663,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643202288
    }
]