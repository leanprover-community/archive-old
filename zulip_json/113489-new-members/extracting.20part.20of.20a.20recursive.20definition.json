[
    {
        "content": "<p>I'm trying to prove the seemingly definitionally-true statement below, but I can't make any progress.<br>\nEssentially, I want to extract the update rule from <code>nat.rec_on</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">fsum</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n&#39;</span> <span class=\"n\">ihn&#39;</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">ihn&#39;</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fsum_succ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fsum</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">fsum</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Am I missing an obvious trick here?</p>",
        "id": 201194496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592424900
    },
    {
        "content": "<p>Nevermind, <code>library_search</code> solved if for me (usually it consumes too much memory for me)</p>",
        "id": 201194771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592425029
    },
    {
        "content": "<p>I recommend using <code>finset.sum</code> from <code>algebra.big_operators</code></p>",
        "id": 201195400,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592425353
    },
    {
        "content": "<p><code>fsum</code> is a contrived example here.</p>",
        "id": 201195464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592425385
    },
    {
        "content": "<p>But is there an easy way to pull out the recursive definition of a function without repeating it in a theorem as I do above?</p>",
        "id": 201195507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592425408
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fsum</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n&#39;</span> <span class=\"n\">ihn&#39;</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">ihn&#39;</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fsum_succ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fsum</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">fsum</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fsum</span> <span class=\"o\">},</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201195962,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592425623
    },
    {
        "content": "<p>Eric, I think your problem is addition is not written in the same order in your definition and your theorem.</p>",
        "id": 201196170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592425741
    },
    {
        "content": "<p>Indeed, that is my issue</p>",
        "id": 201196188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592425749
    },
    {
        "content": "<p>And after that, I can just use <code>rfl</code></p>",
        "id": 201196203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592425756
    }
]