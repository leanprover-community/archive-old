[
    {
        "content": "<p>I am doing some stuff with sets/finsets/fintypes and was running into this error that I don't understand. mwe:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">find</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">partition</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">minimal</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"err\">∩</span> <span class=\"n\">s2</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"err\">∩</span> <span class=\"n\">s2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"c1\">--fails with:</span>\n    <span class=\"c1\">-- rewrite tactic failed, motive is not type correct</span>\n    <span class=\"c1\">-- λ (_a : set α), (s1 ∩ s2).to_finset = ∅ = (_a.to_finset = ∅)</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Any hints why this happens?</p>",
        "id": 203537195,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594403135
    },
    {
        "content": "<p>Try <code>simp only [h]</code></p>",
        "id": 203538269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594403757
    },
    {
        "content": "<p>It happens because the rewrite tactic is not powerful enough to do the rewrite you want. There is a hidden proof that s1 cap s2 has some property, and the rewrite didn't change it into a proof that the empty set had the property</p>",
        "id": 203538422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594403841
    },
    {
        "content": "<p>you can also probably avoid it by doing whatever you were planning to do next first</p>",
        "id": 203538531,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594403891
    },
    {
        "content": "<p>simp only [h] gives me the goal \"∅.to_finset = ∅\"<br>\nI hoped refl would close this, but somehow doesn't in this situation</p>",
        "id": 203538787,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594404008
    },
    {
        "content": "<p>Maybe <code>simp</code> finishes it, it looks like a good simp lemma</p>",
        "id": 203538913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404073
    },
    {
        "content": "<p>If it does then <code>simp [h]</code> probably does the proof in one line</p>",
        "id": 203538981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404108
    },
    {
        "content": "<p>You can unfold everything to find out why <code>refl</code>doesn't work</p>",
        "id": 203539057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404131
    },
    {
        "content": "<p>seems like a missing lemma</p>",
        "id": 203539104,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594404162
    },
    {
        "content": "<p>no, if I put \"∅.to_finset = ∅\" into its own lemma, then refl proves it. but in the context of  my strange \"minimal\" thing, neither simp nor refl do <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 203539107,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594404165
    },
    {
        "content": "<p>Try congr</p>",
        "id": 203539130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404177
    },
    {
        "content": "<p>but \"ext, simp\" does <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 203539134,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594404178
    },
    {
        "content": "<p>I think finset is subsingleton data</p>",
        "id": 203539235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404232
    },
    {
        "content": "<p>Blame the computer scientists</p>",
        "id": 203539293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404253
    },
    {
        "content": "<p><code>∅.to_finset = ∅</code> needs induction on the <code>fintype</code> I think</p>",
        "id": 203539294,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594404253
    },
    {
        "content": "<p>Does congr or congr' work?</p>",
        "id": 203539336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404284
    },
    {
        "content": "<p>nope</p>",
        "id": 203539393,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594404304
    },
    {
        "content": "<p>Am I right in thinking that finset is subsingleton data?</p>",
        "id": 203539466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404341
    },
    {
        "content": "<p><code>finset x</code> has type Type but is a subsingleton?</p>",
        "id": 203539539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404368
    },
    {
        "content": "<p>I don't know what subsingleton is</p>",
        "id": 203539550,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594404371
    },
    {
        "content": "<p>A type with at most 1 term</p>",
        "id": 203539613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594404413
    },
    {
        "content": "<p>I'm sure I'm trying to ask something but I haven't got it straight yet</p>",
        "id": 203539640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404430
    },
    {
        "content": "<p>Does to_finset use the fintype type class?</p>",
        "id": 203539692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404460
    },
    {
        "content": "<p><code>finset α</code> is not a subsingleton, it's like <code>set α</code> + a subsingleton</p>",
        "id": 203539694,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594404460
    },
    {
        "content": "<p>Right</p>",
        "id": 203539730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> yes, and fintype is subsingleton</p>",
        "id": 203539782,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594404490
    },
    {
        "content": "<p><code>to_finset</code> is basically \"go through the list of everything that exists and keep the ones that belong to this <code>set</code>\"</p>",
        "id": 203539790,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594404495
    },
    {
        "content": "<p>So if you prove the lemma independently and give it a name like <code>empty_to_finset</code> and PR to mathlib</p>",
        "id": 203539860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404550
    },
    {
        "content": "<p>I think it's a <code>decidable</code> instance that causes the original error?</p>",
        "id": 203539897,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594404573
    },
    {
        "content": "<p>Then will <code>convert empty_to_finset</code> do it? Oh -- not if the proof is refl</p>",
        "id": 203539958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404602
    },
    {
        "content": "<p>wait, maybe not?</p>",
        "id": 203539991,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594404606
    },
    {
        "content": "<p>oh it's a <code>fintype</code> on the coerced set</p>",
        "id": 203540024,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594404622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> trying that makes me more confused:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">find</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">partition</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"c1\">--set_option pp.all true</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">empty_to_finset</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">minimal</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"err\">∩</span> <span class=\"n\">s2</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"err\">∩</span> <span class=\"n\">s2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"c1\">-- now the goal is ∅.to_finset = ∅</span>\n    <span class=\"n\">apply</span> <span class=\"n\">empty_to_finset</span><span class=\"o\">,</span> <span class=\"c1\">-- fails to unify :-(</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203540075,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594404652
    },
    {
        "content": "<p>Try convert</p>",
        "id": 203540113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404675
    },
    {
        "content": "<p>you can put it near <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.to_finset_univ/src\">src#set.to_finset_univ</a></p>",
        "id": 203540122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594404683
    },
    {
        "content": "<p>Prove it in term mode with <code>rfl</code> and make a PR. What's your GitHub userid?</p>",
        "id": 203540222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404727
    },
    {
        "content": "<p>cfbolz</p>",
        "id": 203540254,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594404743
    },
    {
        "content": "<p>Because one has the global instance of <code>fintype ∅</code> and the other has the one that comes from being a subset</p>",
        "id": 203540262,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594404747
    },
    {
        "content": "<p>Do you already have write access to non master branches of mathlib?</p>",
        "id": 203540298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404768
    },
    {
        "content": "<p>Is it a simp lemma?</p>",
        "id": 203540299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404768
    },
    {
        "content": "<p>So convert should do it</p>",
        "id": 203540352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404802
    },
    {
        "content": "<p>But then I'm surprised congr didn't work</p>",
        "id": 203540375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404814
    },
    {
        "content": "<p>I don't have write access yet</p>",
        "id": 203540521,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594404879
    },
    {
        "content": "<p>I'm not surprised that Lean needs this kind of help to see what combination of definitional rewriting + subsingleton will do the trick</p>",
        "id": 203540524,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594404880
    },
    {
        "content": "<p>(and nope, I couldn't get convert to do it either)</p>",
        "id": 203540657,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594404953
    },
    {
        "content": "<p><code>simp [h], convert empty_to_finset</code> works for me (as expected)</p>",
        "id": 203540815,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594405041
    },
    {
        "content": "<p>ah! that convert I didn't try, thank you :-)</p>",
        "id": 203540848,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594405064
    },
    {
        "content": "<p>should I pull request it?</p>",
        "id": 203541005,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594405145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306293\">@Carl Friedrich Bolz-Tereick</span> I've sent you an invitation <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 203541041,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594405173
    },
    {
        "content": "<p>thanks a lot</p>",
        "id": 203541069,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594405196
    },
    {
        "content": "<p>also simply <code>convert empty_to_finset</code> works for me too, not as expected</p>",
        "id": 203541156,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594405243
    },
    {
        "content": "<p>does <code>convert</code> try <code>assumption</code> or something?</p>",
        "id": 203541179,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594405259
    },
    {
        "content": "<p>is there a document how to contribute (I am familiar with git/github, but stuff like conventions for commit messages etc?)</p>",
        "id": 203541181,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594405259
    },
    {
        "content": "<p>Yes<br>\n<a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a><br>\n<a href=\"https://github.com/leanprover-community/lean/blob/master/doc/commit_convention.md\">https://github.com/leanprover-community/lean/blob/master/doc/commit_convention.md</a></p>",
        "id": 203541230,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594405298
    },
    {
        "content": "<p>thank you. I might have a few other small finset lemmas later</p>",
        "id": 203541320,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594405339
    },
    {
        "content": "<p>hm, in mathlib <code>rfl</code> doesn't prove the lemma (maybe because of the lack of <code>open_locale classical</code>?). but I can prove it analogously to <code>to_finset_univ</code>. should <code>to_finset_empty</code> be a <code>@[simp]</code> lemma too?</p>",
        "id": 203547683,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594408614
    },
    {
        "content": "<p>I guessed yes and opened a pull request: <a href=\"https://github.com/leanprover-community/mathlib/pull/3361\">https://github.com/leanprover-community/mathlib/pull/3361</a></p>",
        "id": 203548825,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594409372
    }
]