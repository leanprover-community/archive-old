[
    {
        "content": "<p>hi all! absolutely loving the natural number game (kudos <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>). i had a few (largely silly) questions.</p>\n<ol>\n<li>\n<p>for adv proposition world, level 9, is there a way to beat it with only the tactics we know so far other than <code>cc</code> or <code>tauto</code>? in the second case, i spent a few minutes trying to figure out how to capitalize on having <code>P \\land \\lnot P</code> in hand before googling and discovering the <code>contradiction</code> tactic. was i missing a more \"bare-handed\" approach?</p>\n</li>\n<li>\n<p>for adv proposition world, level 8, there's a \"did you spot the import\" comment at the end that's mysterious to me ... what import?</p>\n</li>\n<li>\n<p>is there a github repo where the code for the game lives?</p>\n</li>\n</ol>",
        "id": 184298693,
        "sender_full_name": "Craig Citro",
        "timestamp": 1577421289
    },
    {
        "content": "<p>... and a followup: how does one get inline expansion for latex here? ;)</p>",
        "id": 184298757,
        "sender_full_name": "Craig Citro",
        "timestamp": 1577421397
    },
    {
        "content": "<p>3 -&gt; <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game\">https://github.com/ImperialCollegeLondon/natural_number_game</a></p>",
        "id": 184298866,
        "sender_full_name": "David Renshaw",
        "timestamp": 1577421668
    },
    {
        "content": "<ol>\n<li>You can do it using <code>by_cases hq : Q,</code> and <code>exfalso</code> (I guess that shows up in the next level though...) (<strong>edit</strong>: and you can replace <code>exfalso</code> by either using the term <code>false.elim</code> or by using <code>cases H</code> on a hypothesis <code>H : false</code>.)</li>\n<li>I'm guessing Kevin was thinking of the line <code>import tactic.finish</code> in the source Lean file <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/b83e7ebd56a82351e2fd8a187de543803074818b/src/game/world7/level8.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/b83e7ebd56a82351e2fd8a187de543803074818b/src/game/world7/level8.lean\">here</a> and that paragraph was a subtle hint for you to try the <code>finish</code> tactic. Unfortunately, the import isn't visible in the generated HTML...</li>\n</ol>",
        "id": 184299070,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1577422160
    },
    {
        "content": "<p>awesome, thanks!</p>",
        "id": 184299677,
        "sender_full_name": "Craig Citro",
        "timestamp": 1577423400
    },
    {
        "content": "<p>Inspired by <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I returned to the natural numbers game this weekend and was delighted to see all the new tactics and new levels. I feel like I'm getting somewhere now. Thanks everyone.</p>",
        "id": 188696501,
        "sender_full_name": "Emily Riehl",
        "timestamp": 1582248358
    },
    {
        "content": "<p>Now here's my question: I'm stuck on  mul_left_cancel in the advanced multiplication world. I'd like to prove (a !=0) -&gt; (a b = a c) -&gt; b = c by (strong) double induction on b and c. This should give me four cases, three of which involve the hypothesis that either b or c is zero. Then for the fourth the plan is to use add_left_cancel to conclude from the hypothesis</p>\n<p>a (succ b) =  a (succ c)</p>\n<p>that </p>\n<p>a b = a c.</p>\n<p>Then the inductive hypothesis should give me b = c, whence succ b = succ c.</p>\n<p>But I have no idea how to set up this double induction. The hint says to use revert but I don't see where it would help.</p>",
        "id": 188696615,
        "sender_full_name": "Emily Riehl",
        "timestamp": 1582248552
    },
    {
        "content": "<p>My guess is that you want a <code>forall</code> in the goal at the moment you invoke <code>induction</code>, and to achieve that you need to use <code>revert</code>.</p>",
        "id": 188696818,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582248862
    },
    {
        "content": "<p>Spoiler:</p>\n<div class=\"codehilite\"><pre><span></span>revert c,\ninduction b,\n{ intro c, sorry, },\n{ intro c, induction c,\n  { sorry, },\n  { sorry, } }\n</pre></div>",
        "id": 188696834,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582248894
    },
    {
        "content": "<p>(I haven't actually tried doing the proof after that step, I'm just guessing that's the structure you wanted.)</p>",
        "id": 188696843,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582248916
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> . That did the trick. </p>\n<p>Here's the full gory thing (spoiler below):</p>\n<p>revert c,<br>\ninduction b with x hx,<br>\nintro c,<br>\nrw mul_zero,<br>\nintro hyp,<br>\nsymmetry at hyp,<br>\nhave lem := eq_zero_or_eq_zero_of_mul_eq_zero _ _ hyp,<br>\ncases lem with p q,<br>\nexfalso,<br>\nexact ha p,<br>\nsymmetry,<br>\nassumption,<br>\nintro c,<br>\ninduction c with y hy,<br>\nintro hyp,<br>\nrw mul_zero at hyp,<br>\nhave lem := eq_zero_or_eq_zero_of_mul_eq_zero _ _ hyp,<br>\ncases lem with p q,<br>\nexfalso,<br>\nexact ha p,<br>\nassumption,<br>\nintro hyp,<br>\nrepeat {rw mul_succ at hyp},<br>\nhave lem := add_right_cancel _ _ _ hyp,<br>\nhave step := hx y lem,<br>\napply succ_eq_succ_of_eq,<br>\nassumption,</p>",
        "id": 188697223,
        "sender_full_name": "Emily Riehl",
        "timestamp": 1582249493
    },
    {
        "content": "<p>Next you need some braces and indenting. :-)</p>",
        "id": 188697300,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582249563
    },
    {
        "content": "<p>Haha on point ;)</p>",
        "id": 188697319,
        "sender_full_name": "Emily Riehl",
        "timestamp": 1582249602
    },
    {
        "content": "<p>Ah, earlier I couldn't work out why <code>ex_falso</code> didn't exist... Apparently because it's <code>exfalso</code>, but <code>by_contradiction</code>.</p>",
        "id": 188697320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582249605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, what do you think of adding a @[simp] lemma that says <code>succ n = n + 1</code>? In some of the later levels I find myself writing proofs that want to use this fact often.</p>",
        "id": 188700113,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582254449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246635\">@Emily Riehl</span> Congrats!</p>",
        "id": 188709057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582270458
    },
    {
        "content": "<p>This is a bad level. Without revert it's probably impossible and I do a really bad job of explaining how revert works. This needs to be fixed</p>",
        "id": 188709835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582271633
    },
    {
        "content": "<p>It can be done without revert if you use <code>induction b generalizing c</code> instead (which is the correct way to do inductions like this anyway)</p>",
        "id": 188711611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582273290
    },
    {
        "content": "<p>It's debatable, but I think it is a good teaching moment to explain what it means to generalize an argument in an induction. This came up in discussions at the meeting in bonn</p>",
        "id": 188711680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582273365
    },
    {
        "content": "<p>I will get back to this game in a few weeks and update it. There are several minor changes I want to make</p>",
        "id": 188715440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582277498
    },
    {
        "content": "<p>apologies if I am being useless; on question 8 of advanced addition world, and whenever I try to use succ_inj something goes wrong.  </p>\n<p>b n : mynat,<br>\nan : n + b = n → b = 0,<br>\nh : succ (n + b) = succ n<br>\n⊢ b = 0</p>\n<p>I want to apply succ_inj to h by applying it to h with parameters n+b and b, but this always raises an error. When I've had problems like this on previious levels, I've used the 'have' tactic, but this also won't import because it seems to get confused by the parameter name n+b</p>",
        "id": 188962899,
        "sender_full_name": "Ethan Horsfall",
        "timestamp": 1582576276
    },
    {
        "content": "<p>does <code>have h2 := succ_inj h</code> work?</p>",
        "id": 188966091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582578587
    },
    {
        "content": "<p>I guess you could just go backwards the way the computer scientists want you to do -- <code>apply an</code> and then <code>apply succ_inj</code> will presumably work.</p>",
        "id": 188966213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582578691
    },
    {
        "content": "<p>It looks like the <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world8/level8.lean#L27-L28\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world8/level8.lean#L27-L28\">official solution</a></p>",
        "id": 188967729,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582579545
    },
    {
        "content": "<p>ah thank you that works ! i also hadnt realised there was an official solution set oops so thank you for that also</p>",
        "id": 189007303,
        "sender_full_name": "Ethan Horsfall",
        "timestamp": 1582626562
    },
    {
        "content": "<p>also really enjoying the game, so thanks for making it :)</p>",
        "id": 189007315,
        "sender_full_name": "Ethan Horsfall",
        "timestamp": 1582626577
    },
    {
        "content": "<p>I'm not sure it's officially documented anywhere that there's an official solution set :-)</p>",
        "id": 189008370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582627512
    },
    {
        "content": "<p>when calling a function, such as succ_inj or mul_pos, how do you pass in arguments which themselves are functions? </p>\n<p>For instance,<br>\nhave f := mul_pos a b,</p>\n<p>works but<br>\nhave f := mul_pos succ(a) succ(b), <br>\ndoes not work, with the error message indicating that it expected something of type mynat, whereas it read s succ as a function from mynat to mynat.</p>\n<p>thank you:)</p>",
        "id": 189022609,
        "sender_full_name": "Ethan Horsfall",
        "timestamp": 1582640164
    },
    {
        "content": "<p>You probably need to wrap <code>succ(a)</code> and <code>succ(b)</code> itself in parentheses, like so: <code>have f := mul_pos (succ(a)) (succ(b))</code></p>",
        "id": 189022698,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582640235
    },
    {
        "content": "<p>The parentheses around <code>a</code> and <code>b</code> in <code>succ(a)</code> and <code>succ(b)</code> are unnecessary. Note that you can also take advantage of \"dot notation\" and write <code>have f := mul_pos a.succ b.succ</code>.</p>",
        "id": 189022816,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582640309
    },
    {
        "content": "<p>thank you both:)</p>",
        "id": 189022835,
        "sender_full_name": "Ethan Horsfall",
        "timestamp": 1582640330
    },
    {
        "content": "<p>You're welcome <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 189022863,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582640348
    },
    {
        "content": "<p>I always put the parentheses in <code>succ(a)</code> in the natural number game because I felt it was less intimidating for mathematicians</p>",
        "id": 189023158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582640602
    },
    {
        "content": "<p>yes I find that much more natural</p>",
        "id": 189023248,
        "sender_full_name": "Ethan Horsfall",
        "timestamp": 1582640647
    },
    {
        "content": "<p>However this shows a downside to this idea -- <code>succ(a)</code> looks like an irreducible gadget to a mathematician, but is apparently parsed as <code>succ a</code> and hence <code>succ</code> can fall off and be eaten by an earlier function.</p>",
        "id": 189023250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582640649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266070\">@Ethan Horsfall</span> FYI the notation for function application in (functional) programming differs from that in conventional mathematics, for example <code>f(x)</code> in mathematics could be simply written as <code>f x</code> in Lean</p>",
        "id": 189023291,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582640687
    },
    {
        "content": "<p>on the last level of advanced multiplication world, i have got it to the point where I have the hypothesis<br>\nc : mynat,<br>\nc_ih : ∀ (a : mynat), a ≠ 0 → ∀ (b : mynat), a * b = a * c → b = c, ###<br>\na : mynat,<br>\nha : a ≠ 0, ###<br>\nn : mynat,<br>\ng : a * n + a = a * c + a,<br>\nW : a * n + a = a * c + a → a * n = a * c<br>\n⊢ a * n = a * c → n = c  ###</p>\n<p>I have put ### by the remaining relevant propositions</p>\n<p>which should be very simple as if we only look at c_ih and ha, the goal is just a restatement of this. but i cannot work out how to introduce the right variables into c_ih or revert the goal correctly. The propositions in the middle muddle it up when I use revert</p>",
        "id": 189130994,
        "sender_full_name": "Ethan Horsfall",
        "timestamp": 1582734710
    },
    {
        "content": "<p>Does <code>exact c_ih a ha n</code> work?</p>",
        "id": 189134027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582736717
    },
    {
        "content": "<p>You can think of <code>c_ih</code> as a function, which takes as input a natural number <code>a</code>, a proof that it's not zero, and a natural number <code>b</code>, and returns a proof that <code>ab=ac -&gt; b=c</code>.</p>",
        "id": 189134144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582736783
    },
    {
        "content": "<p>Also you should be able to <code>apply c_ih</code> and let Lean work out what additional arguments are needed.</p>",
        "id": 189134839,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582737178
    },
    {
        "content": "<p>(either supplying them automatically or turning them into new goals)</p>",
        "id": 189134909,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582737205
    },
    {
        "content": "<p>thank you, that seems to have worked. the slightly weird thing is that it now just says 'no goals' instead of proof complete. viewing it as a function makes a lot of sense</p>",
        "id": 189151261,
        "sender_full_name": "Ethan Horsfall",
        "timestamp": 1582746292
    },
    {
        "content": "<p>?? I'm impressed :-) I thought Mohammad had managed to completely banish \"no goals\"!</p>",
        "id": 189160091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582751799
    },
    {
        "content": "<p>Finished the game!!</p>",
        "id": 189206760,
        "sender_full_name": "Ethan Horsfall",
        "timestamp": 1582804517
    },
    {
        "content": "<p>is the official documentation the best place to go next?</p>",
        "id": 189207378,
        "sender_full_name": "Ethan Horsfall",
        "timestamp": 1582804939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266070\">Ethan Horsfall</span> <a href=\"#narrow/stream/113489-new-members/topic/natural.20number.20game.20questions/near/189207378\" title=\"#narrow/stream/113489-new-members/topic/natural.20number.20game.20questions/near/189207378\">said</a>:</p>\n<blockquote>\n<p>is the official documentation the best place to go next?</p>\n</blockquote>\n<p>That, or you could try <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">Theorem Proving in Lean</a> next which teaches you how to define your own functions, mathematical objects, etc. on top of proving theorems with tactics.</p>",
        "id": 189216254,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582812485
    },
    {
        "content": "<p>In addition to TPiL, I found the <a href=\"https://leanprover.github.io/logic_and_proof/\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/\">Logic &amp; Proof</a> book useful when I was learning Lean. I also like the <a href=\"https://lean-forward.github.io/logical-verification/2019/\" target=\"_blank\" title=\"https://lean-forward.github.io/logical-verification/2019/\">Logical Verification notes</a>.</p>",
        "id": 189217158,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582813192
    },
    {
        "content": "<p>If you're a mathematician then one thing you could try is to choose an arbitrary piece of elementary mathematics and try doing it in Lean, and ask when you get stuck. For me the route was: basic 1st year introduction to proof stuff, definition of a scheme, theorems about schemes, definition of a perfectoid space. Because there is no ideal book for mathematicians we have to forge our own path right now. I guess there are always the <a href=\"https://github.com/kbuzzard/xena/blob/master/Maths_Challenges/challenges.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/Maths_Challenges/challenges.md\">maths challenges</a> if they're up your street. What are you looking for?</p>",
        "id": 189228979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582820678
    },
    {
        "content": "<p>PS <span class=\"user-mention\" data-user-id=\"266070\">@Ethan Horsfall</span> Mohammad says that if you can reproduce \"no goals\" then you should tell us how and he'll try and fix it ;-) He's just submitted his PhD thesis so I'm sure he has plenty of time on his hands :-)</p>",
        "id": 189229067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582820743
    },
    {
        "content": "<p>I'm an undergraduate student. (actually, an undergraduate economist, but I just secured my switch to maths recently :) ).  I'm in the fortunate position of mostly pursuing what I find interesting. for the 'no goals' every time I refreshed the page it would lose previous progress, so I may not be able to reproduce it</p>",
        "id": 189232422,
        "sender_full_name": "Ethan Horsfall",
        "timestamp": 1582822717
    },
    {
        "content": "<p>What maths do you know already?</p>",
        "id": 189235868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582825020
    },
    {
        "content": "<p>i've covered <a href=\"https://dec41.user.srcf.net/notes/\" target=\"_blank\" title=\"https://dec41.user.srcf.net/notes/\">https://dec41.user.srcf.net/notes/</a> all of part ia except dynamics and relativity, and ib linear algebra, markov chains, and partway through some others</p>",
        "id": 189236639,
        "sender_full_name": "Ethan Horsfall",
        "timestamp": 1582825488
    },
    {
        "content": "<p>Are you in Cambridge right now? You know they have a Lean meeting on Wednesday evenings?</p>",
        "id": 189237433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582825981
    },
    {
        "content": "<p>If you want to help make the group theory game, the current state of it is <a href=\"https://github.com/kbuzzard/group-theory-game\" target=\"_blank\" title=\"https://github.com/kbuzzard/group-theory-game\">here</a></p>",
        "id": 189237556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582826050
    },
    {
        "content": "<p>I am in cambridge right now, and didn't know there was a lean meeting! i doubt i have enough experience to be much help but would be willing to try :)</p>",
        "id": 189238223,
        "sender_full_name": "Ethan Horsfall",
        "timestamp": 1582826436
    },
    {
        "content": "<p>Believe me, I'm sure you'll be welcome. <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> is perhaps the person to talk to about it. Bring some friends ;-)</p>",
        "id": 189239124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582826961
    },
    {
        "content": "<p>I'm at an Imperial meeting right now.</p>",
        "id": 189239146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582826976
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"266070\">@Ethan Horsfall</span> I've added you to the secret Cambridge group. meetings are 15:00 to 18:00 on Wednesdays somewhere in the CMS room TBC. The meeting is for all skill levels, there are 3 or 4 people learning the natural numbers game. If anyone else wants to be added to the cambridge group then ask me. I think if you are a member of the group you can add new members?</p>",
        "id": 189239778,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1582827357
    },
    {
        "content": "<p>Level 8 of the Advanced Proposition World says</p>\n<blockquote>\n<p>Pro tip<br>\n    Did you spot the import? What do you think it does?</p>\n</blockquote>\n<p>I do not see any import though. What am I missing? Was it a mathlib import?</p>",
        "id": 189523020,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1583175237
    },
    {
        "content": "<p>Let's look in the source code :-)</p>",
        "id": 189523634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583175552
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world7/level8.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world7/level8.lean\">I seem to be importing <code>finish</code></a></p>",
        "id": 189523871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583175677
    },
    {
        "content": "<p>Does <code>finish</code> just finish the level in one move?</p>",
        "id": 189523878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583175686
    },
    {
        "content": "<p>This looks like an outdated comment -- it is impossible to spot the import if you're playing the game because of the <code>--hide</code></p>",
        "id": 189524028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583175762
    },
    {
        "content": "<p>Looks like there was <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/commit/b83e7ebd56a82351e2fd8a187de543803074818b\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/commit/b83e7ebd56a82351e2fd8a187de543803074818b\">a commit</a> where I hid the import, but didn't change the comment.</p>",
        "id": 189524146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583175835
    },
    {
        "content": "<p>Cool. Thanks!</p>",
        "id": 189530583,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1583179393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> ,  I noticed that the statement of pow_succ in the sidebar is wrong. it says that <code>pow_succ (a b : mynat) :\n  a ^ succ(b) = a ^ b * b</code>, but I think it should be <code>a^b*a</code></p>",
        "id": 190035313,
        "sender_full_name": "Simon Liesinger",
        "timestamp": 1583716154
    },
    {
        "content": "<p>Yeah I know, it's on the list of things to fix. Thanks.</p>",
        "id": 190045904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583738599
    },
    {
        "content": "<p>How would one go writing a tactic that will select the first assumption in context that can be <code>apply</code>ed to the goal?</p>",
        "id": 190055296,
        "sender_full_name": "ohhaimark",
        "timestamp": 1583749403
    },
    {
        "content": "<p>and apply it</p>",
        "id": 190055328,
        "sender_full_name": "ohhaimark",
        "timestamp": 1583749437
    },
    {
        "content": "<p>The spoilery way is to look at the implementation of the <code>assumption</code> tactic <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/tactic.lean#L866\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/tactic.lean#L866\">in core Lean</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">assumption</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n     <span class=\"n\">t</span>   <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">H</span>   <span class=\"err\">←</span> <span class=\"n\">find_same_type</span> <span class=\"n\">t</span> <span class=\"n\">ctx</span><span class=\"o\">,</span>\n     <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"o\">}</span>\n<span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"s2\">&quot;assumption tactic failed&quot;</span>\n</pre></div>",
        "id": 190055562,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1583749604
    },
    {
        "content": "<p>Here, <code>local_context</code> gets the list of hypotheses, and <code>target</code> gives the goal type.</p>",
        "id": 190055681,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1583749689
    },
    {
        "content": "<p>So instead of <code>find_same_type</code>, which finds the hypothesis with the exact same type as the goal, we could iterate over the <code>local_context</code> and try to <code>apply</code> each element in turn until it succeeds.</p>",
        "id": 190055869,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1583749840
    },
    {
        "content": "<p>Thanks. It somehow didn't occur to me to look at the definition of the basic tactics.</p>",
        "id": 190056999,
        "sender_full_name": "ohhaimark",
        "timestamp": 1583750824
    },
    {
        "content": "<p>The best introduction we have to learning to write tactics in Lean is <a href=\"https://leanprover.github.io/programming_in_lean/programming_in_lean.pdf\" target=\"_blank\" title=\"https://leanprover.github.io/programming_in_lean/programming_in_lean.pdf\">programming in Lean</a>, which is a bit out of date but which does contain lots of juicy information. After that people just tend to ask in the chat.</p>",
        "id": 190057034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583750871
    },
    {
        "content": "<blockquote>\n<p>The best introduction we have to learning to write tactics in Lean is programming in Lean,</p>\n</blockquote>\n<p>I think the <a href=\"https://lean-forward.github.io/logical-verification/2019/index.html\" target=\"_blank\" title=\"https://lean-forward.github.io/logical-verification/2019/index.html\">Logical Verification notes</a> are also a good source (certainly less out of date).</p>",
        "id": 190064416,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583758072
    },
    {
        "content": "<p>We're working on a 2nd edition. Keep an eye on the same URL, but with 2020 instead of 2019.</p>",
        "id": 190065932,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1583759280
    },
    {
        "content": "<p>Recall we also have <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\">documentation in  mathlib</a>.</p>",
        "id": 190091229,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583772674
    },
    {
        "content": "<p>Do we know why sometimes we get stuck with \"Lean is busy\" in the natural numbers game?</p>",
        "id": 190135853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583804755
    },
    {
        "content": "<p>It's happened to us again.</p>",
        "id": 190135880,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583804763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I was just looking at the natural numbers game repo, and wondering about some a few things.</p>",
        "id": 190137110,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583806804
    },
    {
        "content": "<p>Are the <code>src/my_solutions/</code> and <code>src/solutions/</code> directories obsolete?</p>",
        "id": 190137121,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583806824
    },
    {
        "content": "<p>(The README currently suggests that if you wan to play the game in VSCode to use those directories, but they seem quite out of date relative to the <code>src/game/</code> directory.)</p>",
        "id": 190137136,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583806870
    },
    {
        "content": "<p>It would be fun to be able to hack on this.</p>",
        "id": 190141238,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583813854
    },
    {
        "content": "<p>Yes I can quite believe that those directories are obsolete. I have no idea about any of the web issues. <span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> ?</p>",
        "id": 190147333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583824708
    },
    {
        "content": "<p>Yes, the game maker only looks at the lean files specified in the game_config.toml file, which in this case are all contained in the game folder. The only other things that are needed are the files that are imported which, in this case, are contained in the mynat and tactic folder. The rest aren't needed.</p>",
        "id": 190387591,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1584018898
    },
    {
        "content": "<p>Had a lot of fun with natural number game!  Looking forward to more games.<br>\nThe web game format works amazing.  No setup hassle required at all.<br>\nIs <code>real-number-game</code> available on the web?</p>",
        "id": 191858772,
        "sender_full_name": "Jiekai",
        "timestamp": 1585215412
    },
    {
        "content": "<p>no, there is no real number game. Someone was coming to visit me in May and work on it but unfortunately this is now all up in the air. I should try and get a fan club together.</p>",
        "id": 191868885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585221191
    },
    {
        "content": "<p>Inequality world Level 6</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">cases</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hba</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hab_h</span> <span class=\"n\">at</span> <span class=\"n\">hba_h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span> <span class=\"n\">at</span> <span class=\"n\">hba_h</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span> <span class=\"n\">at</span> <span class=\"n\">hba_h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h00</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hab_w</span> <span class=\"bp\">+</span> <span class=\"n\">hba_w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hba_h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hab_w</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hab_h</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- cursor here shows &#39;no goals&#39;</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n  <span class=\"o\">}</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span></p>",
        "id": 192154729,
        "sender_full_name": "Jiekai",
        "timestamp": 1585453818
    },
    {
        "content": "<p>Since the game does not introduces <code>{ ... }</code>,  I guess it is not an issue.</p>",
        "id": 192154994,
        "sender_full_name": "Jiekai",
        "timestamp": 1585454315
    },
    {
        "content": "<p>No goals is correct with the cursor there because you have finished the goal which you isolated</p>",
        "id": 192164983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585473747
    },
    {
        "content": "<p>Oh -- but the point is that it doesn't say \"proof complete\" or whatever?</p>",
        "id": 192164994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585473795
    },
    {
        "content": "<p>Yeah, guess \"no goals\" is okay</p>",
        "id": 192166626,
        "sender_full_name": "Jiekai",
        "timestamp": 1585476556
    },
    {
        "content": "<p>Concerning the logical verification notes discussed on March 9, be aware that there's a new version now, available under \"material\" below:</p>\n<div class=\"codehilite\"><pre><span></span>https://lean-forward.github.io/logical-verification/2020/index.html#material\n</pre></div>\n\n\n<p>It's much better than the old book. Please tell anybody who's reading the old one to stop! ;)</p>",
        "id": 192797416,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1585917897
    },
    {
        "content": "<p>On \"Advanced addition world\" level 6, the instructions say that there is a three-line solution. I assume this intended solution is the following.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">t</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">add_right_cancel</span> <span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>Using <code>repeat</code>, which has previously been introduced, this can also be done in two lines.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">t</span><span class=\"o\">},</span>\n<span class=\"n\">exact</span> <span class=\"n\">add_right_cancel</span> <span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>Not sure whether this is worth briefly mentioning as an added challenge? Maybe this is trivial to point out, but I think the trick of using <code>rw add_comm t</code> is kind of cute here.</p>",
        "id": 196861262,
        "sender_full_name": "Sara Fish",
        "timestamp": 1588918809
    },
    {
        "content": "<p>does it count as one line if you use <code>;</code>to join the two lines?</p>",
        "id": 196862759,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588920368
    },
    {
        "content": "<p>what is the point?</p>",
        "id": 196862770,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588920384
    },
    {
        "content": "<p>Golf?</p>",
        "id": 196863961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588921654
    },
    {
        "content": "<p>the two versions are essentially the same proof. It isn't like you simplified the proof.</p>",
        "id": 196864047,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588921706
    },
    {
        "content": "<p>Kenny can you beat 25 single rewrites for (a+b)^2?</p>",
        "id": 196864059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588921713
    },
    {
        "content": "<p>what's the setting?</p>",
        "id": 196864074,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588921731
    },
    {
        "content": "<p>I can't remember, I just remember saying I did something in 27 and then someone telling me they could do 25</p>",
        "id": 196864090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588921756
    },
    {
        "content": "<p>Maybe last level of power world?</p>",
        "id": 196864097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588921766
    },
    {
        "content": "<p>The game saves your progress now <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 196864169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588921808
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"n\">two_eq_succ_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 196864644,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588922210
    },
    {
        "content": "<p>19 lines</p>",
        "id": 196864645,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588922213
    },
    {
        "content": "<p>of course there is also the one line <code>rw {insert huge proof term}</code></p>",
        "id": 196864897,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588922409
    },
    {
        "content": "<p>In her paper on <code>ring</code>, Mahboubi claims that it takes 30 rewrites to prove the analogous result for (a+b)^3 but I asked her about it and apparently there's no concrete reference for this</p>",
        "id": 196865446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588922939
    },
    {
        "content": "<p>They just made an estimate</p>",
        "id": 196865458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588922952
    },
    {
        "content": "<p>The exact numbers probably depend on whether x^3=x(xx) or xx(x) etc</p>",
        "id": 196865546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588923021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/natural.20number.20game.20questions/near/196864090\" title=\"#narrow/stream/113489-new-members/topic/natural.20number.20game.20questions/near/196864090\">said</a>:</p>\n<blockquote>\n<p>I can't remember, I just remember saying I did something in 27 and then someone telling me they could do 25</p>\n</blockquote>\n<p>I think it was the last time the NNG was on r/math?</p>\n<p><a href=\"https://old.reddit.com/r/math/comments/fwlgf4/natural_number_game_a_game_where_you_learn_to/fmql2y4/\" title=\"https://old.reddit.com/r/math/comments/fwlgf4/natural_number_game_a_game_where_you_learn_to/fmql2y4/\">https://old.reddit.com/r/math/comments/fwlgf4/natural_number_game_a_game_where_you_learn_to/fmql2y4/</a></p>\n<p>Also they did it in 18, not 25.</p>",
        "id": 196865679,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588923157
    },
    {
        "content": "<p>18 rewrites, so 19 lines</p>",
        "id": 196865715,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588923197
    },
    {
        "content": "<p>so the same as mine</p>",
        "id": 196865718,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588923199
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">add_mul_self_eq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 196865960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588923417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> we're using <code>mynat</code></p>",
        "id": 196865973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588923432
    },
    {
        "content": "<p>in the last level of power world</p>",
        "id": 196865996,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588923460
    },
    {
        "content": "<p>I don't like these floating tactic scripts with no context</p>",
        "id": 196866014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588923481
    },
    {
        "content": "<p>Isn't the topic title enough context?</p>",
        "id": 196866070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588923501
    },
    {
        "content": "<p>not to know what the problem is</p>",
        "id": 196866093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588923516
    },
    {
        "content": "<p>reading a tactic script is hard enough as it is, the type of the theorem is the main clue about what's going on</p>",
        "id": 196866128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588923561
    },
    {
        "content": "<p>these NNG examples are just unreadable</p>",
        "id": 196866135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588923572
    },
    {
        "content": "<p>well if you Ctrl+A and Ctrl+C and Ctrl+V then you don't get the theorem</p>",
        "id": 196866152,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588923594
    },
    {
        "content": "<p>I don't have the page up</p>",
        "id": 196866192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588923604
    },
    {
        "content": "<p>I don't know what the theorem looks like, I just guessed</p>",
        "id": 196866212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588923623
    },
    {
        "content": "<p><a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=4&amp;level=8\" title=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=4&amp;level=8\">https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=4&amp;level=8</a></p>",
        "id": 196866219,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588923629
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">add_squared</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">mynat</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">two_eq_succ_one</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"n\">add_right_comm</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196867894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588924962
    },
    {
        "content": "<p>it would have been even better if I had <code>add_four_comm : (a + b) + (c + d) = (a + c) + (b + d)</code></p>",
        "id": 196868154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588925162
    },
    {
        "content": "<p>or its less used cousin <code>add_four_rotate_right : (a + b) + (c + d) = (a + c) + (d + b)</code>. In a <a href=\"http://us.metamath.org/mpeuni/add42.html\" title=\"http://us.metamath.org/mpeuni/add42.html\">real theorem prover</a> you have all these things proven already</p>",
        "id": 196868284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588925288
    },
    {
        "content": "<p><code>add42</code>? Do you need <code>add4n</code> for 1&lt;=n&lt;=24?</p>",
        "id": 196873205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588929367
    },
    {
        "content": "<p>presumably one of them is <code>rfl</code></p>",
        "id": 196873301,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588929458
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, can we still play the game offline? I would like to have my solutions saved in my machine...</p>",
        "id": 213919703,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1603201088
    },
    {
        "content": "<p>I thought that solutions were saved on your machine now? (but not transferrable between machines). You can clone the repo and edit the lean files directly, but note that they will all have solutions in.</p>",
        "id": 213946110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603212163
    },
    {
        "content": "<p>Hum, I don’t know how to find them. The browser is now showing all worlds as unsolved.</p>",
        "id": 214561804,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1603711707
    },
    {
        "content": "<p>I'm really sorry, this is part of the set-up which I understand nothing about :-( My browser remembers my previous attempts <em>shrug</em>.</p>",
        "id": 214563177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603712866
    },
    {
        "content": "<p>If I remember correctly, the save data is placed in your browser's <a href=\"https://en.wikipedia.org/wiki/Web_storage\">local storage</a>. It will get cleared if you clear your browser's cache for that site.</p>",
        "id": 214575475,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603720313
    },
    {
        "content": "<p>It woudn't be impossible to add a button that would download all the solutions as e.g. a ZIP file containing a bunch of Lean files. <span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> what do you think?</p>",
        "id": 214575700,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603720422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span> what browser are you on?</p>",
        "id": 214581358,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603723001
    },
    {
        "content": "<p>On Firefox for me, if I go to Tools &gt; Web Developer &gt; Toggle Tools, and then click Storage and then Local Storage in the sidebar, I see an entry for <code>https://wwwf.imperial.ac.uk</code>, and if I click on it, I see what's a big blob of JSON but it has all my solutions in it. Do you see something similar?</p>",
        "id": 214581679,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603723129
    },
    {
        "content": "<p>Safari, i will try to find the json</p>",
        "id": 214592247,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1603727479
    },
    {
        "content": "<p>But I am afraid I lost the data in the last update of the system</p>",
        "id": 214592281,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1603727493
    },
    {
        "content": "<p>If you don't want to solve the levels again you can cheat by looking at the internal solutions here <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/tree/master/src/game\">https://github.com/ImperialCollegeLondon/natural_number_game/tree/master/src/game</a></p>",
        "id": 214592572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603727608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/natural.20number.20game.20questions/near/214575700\">said</a>:</p>\n<blockquote>\n<p>It woudn't be impossible to add a button that would download all the solutions as e.g. a ZIP file containing a bunch of Lean files. <span class=\"user-mention silent\" data-user-id=\"132175\">Mohammad Pedramfar</span> what do you think?</p>\n</blockquote>\n<p>It is possible to add a <code>save</code> and <code>load</code> button, so that the users can save their progress on their computer. However, saving the progress as editable lean files is slightly tricky, since the use might change some parts of the lean files that shouldn't be changed and then loading those files could be a bit problematic. I can add the option to save and load a save file that is not meant to be edited by the user though.</p>",
        "id": 214827767,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1603887412
    },
    {
        "content": "<p>You could include comments telling the user to edit only within some part of the file.</p>",
        "id": 214849074,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603897593
    },
    {
        "content": "<p>That's possible, but for it to work, I might need to rewrite a good part of python code in javascript, the parts that handle lean files and turn in into a format that the game can use. Unless it's actually going to be used by a reasonable number of players, I'd rather not go through with it.<br>\nEspecially since what the user can download will not be a single file, it will be a folder, containing several lean files and config files. Basically the repository that Kevin sent the link to.<br>\nAnother point is that it's not straightforward for the player to recognize if they changed some part that they shouldn't have. Even adding a single space to the statement of a lemma can make the game treat it as a different lemma! (The reason for this behaviour is version control. If you're making the game and continuously updating it to fix typos and add/modify levels, you'd prefer the player's saves to not be reset with every single minor update. The way this game tracks problems through minor updates is by remembering the exact statement of lemmas. After a minor update, even if you rearrange levels, the saved data for an unchanged lemma will be remembered.) Of course this could be circumvented, by letting the player change the statement of the lemmas as well. But in that case, the player might as well just clone the Lean-game-maker and play the game on localhost!</p>",
        "id": 214914698,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1603931984
    },
    {
        "content": "<p>Hi! (I've been looking at Lean 2 years ago but honestly forgot everything about it meanwhile)</p>\n<p>I was going through the natural numbers game and encountered something weird: I thought my proof was correct seems to work and ends with \"no goals.\", but simultaneously it says \"Invalid syntax\" for an intermediate line which executes fine when going through with the cursor.</p>\n<p>The line is the following</p>\n<div class=\"codehilite\"><pre><span></span><code>have q1 := eq_zero_or_eq_zero_of_mul_eq_zero a (succ c) (←h),\n</code></pre></div>\n\n<p>I suspect it's that I don't know yet how to properly plug in objects, I have <code>h : 0 = a * succ c</code> and I want to use </p>\n<div class=\"codehilite\"><pre><span></span><code>eq_zero_or_eq_zero_of_mul_eq_zero\n  (a b : mynat) (h : a * b = 0) :\n  a = 0 ∨ b = 0\n</code></pre></div>\n\n<p>to get something like <code>q: a = 0 ∨ succ c = 0</code> (to get a contradiction).</p>\n<p>I had the same problem with feeding <code>a*c</code> (a natural number) into a statement, so I'd really appreachiate an insight on how to do that! Thank you</p>\n<p>This is <strong>Advanced Multiplication World Level 4</strong>, and my full code is</p>\n<div class=\"codehilite\"><pre><span></span><code>revert b,\ninduction c with c hc,\n\nintros b h,\nrw mul_zero at h,\nrw mul_eq_zero_iff at h,\ncases h,\nexfalso, exact ha(h),\nexact h,\n\nintros b h,\ncases b,\nexfalso,\nrw mul_zero at h,\n\nhave q1 := eq_zero_or_eq_zero_of_mul_eq_zero a (succ c) (←h),\ncases q1,\nexact ha(q1),\nexact succ_ne_zero c q1,\n\nrepeat{rw mul_succ at h},\nrw add_right_cancel_iff at h,\nhave q := hc b h,\napply succ_eq_succ_of_eq,\nexact q,\n</code></pre></div>",
        "id": 225052094,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1612374223
    },
    {
        "content": "<p>my advice is to ignore anything else lean says if it also says \"invalid syntax\"</p>",
        "id": 225052228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612374283
    },
    {
        "content": "<p>that means you have invalid syntax and everything else is lean trying to pick up the pieces and probably getting more confused</p>",
        "id": 225052280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612374307
    },
    {
        "content": "<p>in this case the issue is <code>(←h)</code>, that's not an expression</p>",
        "id": 225052318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612374325
    },
    {
        "content": "<p>probably <code>h.symm</code> works in that position</p>",
        "id": 225052332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612374337
    },
    {
        "content": "<p>It does, thank you! so \\l is only used in combination with <code>rw</code>?</p>",
        "id": 225052605,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1612374469
    },
    {
        "content": "<p>And regarding the other part, if I have <code>h: a*c + a = 0</code> and I want to use</p>\n<div class=\"codehilite\"><pre><span></span><code> add_left_eq_zero\n   {{a b : mynat}} (H : a + b = 0) : b = 0\n</code></pre></div>\n\n<p>to get <code>a = 0</code>, how do I do that?</p>\n<p>I tried <code>have h' := add_left_eq_zero (a*c) a h,</code> is it the <code>{{</code> that work differently than I expected?</p>",
        "id": 225052949,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1612374610
    },
    {
        "content": "<p>The {{ }} brackets mean \"Lean will supply these\". Try <code>have h' := add_left_eq_zero h</code>. The point is that Lean can guess the other inputs after it sees the type of <code>h</code> so it doesn't want to bother the user with them.</p>",
        "id": 225053102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612374684
    },
    {
        "content": "<p>Sorry, I don't ever explain {} brackets properly in NNG and this is a common question.</p>",
        "id": 225053147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612374703
    },
    {
        "content": "<p>That makes sense, amazing!</p>\n<p>The problem was again that I supplied either <code>h: 0 = ...</code> or <code>←h</code> instead of <code>h.symm</code>.</p>\n<p>Thank you both for the help!</p>",
        "id": 225053535,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1612374847
    },
    {
        "content": "<p>Ps if you've finished with <code>h</code> then <code>replace h :=  add_left_eq_zero h</code> saves you from having to make a new hypothesis.</p>",
        "id": 225053750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612374926
    },
    {
        "content": "<p>I’m learning about lean through the natural numbers game [1] and have only applied mathematics background from engineering. To gain greater familiarity I’m trying to rewrite proofs to force me to understand the concepts and syntax in different ways.</p>\n<p>For World 9: Advanced Multiplication, level 1, is there a way to prove the first subgoal by contradiction or another strategy when starting with,</p>\n<p>intros ha hb,<br>\ncases (a*b),</p>\n<p>——- gives ——<br>\na b : mynat,<br>\nha : a ≠ 0,<br>\nhb : b ≠ 0<br>\n⊢ 0 ≠ 0</p>\n<p>A lot of proof by contradiction assumes Prop variables but here we have mynat so I am unsure how to manipulate the goal proposition to show that 0 ≠ 0 is absurd. </p>\n<p>[1] <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world9/level1.lean\">https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world9/level1.lean</a></p>",
        "id": 266579403,
        "sender_full_name": "Kwame Porter Robinson",
        "timestamp": 1641076191
    },
    {
        "content": "<p>I don't think you can solve that level after those tactics. Your goal is false and your hypotheses don't give you a contradiction</p>",
        "id": 266581626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641079248
    },
    {
        "content": "<p>Thank you, that was helpful. I'm just learning. Couldn't I create a proposition based on the truthiness of equality, that 0 = 0 --&gt; true, and use that implication as a hypothesis that gives a contradiction?</p>",
        "id": 266715857,
        "sender_full_name": "Kwame Porter Robinson",
        "timestamp": 1641232286
    },
    {
        "content": "<p>You're trying to prove the goal (<code>0 ≠ 0</code>).</p>",
        "id": 266716320,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641232516
    },
    {
        "content": "<p>If you had <code>0 ≠ 0</code> as a hypothesis, then you could use it to prove anything.</p>",
        "id": 266716505,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641232597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462638\">@Kwame Porter Robinson</span> If your question is whether <code>¬A → ¬B</code> can be inferred from <code>A → B</code>, the answer is no.</p>",
        "id": 266717154,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641232903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> I think my question is whether <code>A -&gt; ¬B</code> can be inferred or shown to be false, given <code>A -&gt; B</code>. Here I wondered if taking <code>A</code> as a <code>eq</code> relation could show <code>0 = 0 --&gt; true</code> and used to prove the goal <code>0 ≠ 0</code> to be false.</p>",
        "id": 266721095,
        "sender_full_name": "Kwame Porter Robinson",
        "timestamp": 1641234951
    },
    {
        "content": "<p>You can certainly prove that <code>0 ≠ 0</code> is <em>false</em>, but here you need to prove that it is <em>true</em>.</p>",
        "id": 266721420,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641235150
    },
    {
        "content": "<p>That's what it means to be the goal.</p>",
        "id": 266721446,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641235170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/natural.20number.20game.20questions/near/266581626\">said</a>:</p>\n<blockquote>\n<p>I don't think you can solve that level after those tactics. Your goal is false and your hypotheses don't give you a contradiction</p>\n</blockquote>\n<p>Just to be clear -- what I am saying is that you have made an incorrect move and this level is now impossible to solve.</p>",
        "id": 266722615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641235892
    }
]