[
    {
        "content": "<p>How can I prove the <code>break_into_words_def</code> lemma below? It works if I redefine everything to not use pattern matching, but I would prefer not to do that.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.stream.defs</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- I want to be able to rewrite applications of this function.</span>\n<span class=\"c1\">-- I expect to be able to use `refl` to reduce it.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">break_into_words</span> <span class=\"o\">:</span>\n   <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"c1\">-- word lengths</span>\n   <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"c1\">-- original sequence</span>\n   <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"c1\">-- sequence of words</span>\n <span class=\"o\">:=</span> <span class=\"n\">function.curry</span>\n     <span class=\"o\">(</span><span class=\"n\">stream.corec</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">lengths</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">⟩,</span> <span class=\"n\">stream.take</span> <span class=\"o\">(</span><span class=\"n\">lengths.head</span><span class=\"o\">)</span> <span class=\"n\">a'</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">lengths</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">lengths.tail</span><span class=\"o\">,</span> <span class=\"n\">stream.drop</span> <span class=\"o\">(</span><span class=\"n\">lengths.head</span><span class=\"o\">)</span> <span class=\"n\">a'</span><span class=\"o\">⟩))</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">stream.take</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">break_into_words</span> <span class=\"n\">id</span> <span class=\"n\">id</span><span class=\"o\">))</span>\n<span class=\"c1\">-- [[], [0], [1, 2], [3, 4, 5]]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">break_into_words_def</span>\n    <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n   <span class=\"o\">:</span> <span class=\"n\">break_into_words</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>\n    <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">lengths</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">⟩,</span> <span class=\"n\">stream.take</span> <span class=\"o\">(</span><span class=\"n\">lengths.head</span><span class=\"o\">)</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">stream</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">stream.iterate</span> <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">stream</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">lengths</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">⟩,</span>\n                     <span class=\"o\">⟨</span><span class=\"n\">lengths.tail</span><span class=\"o\">,</span> <span class=\"n\">stream.drop</span> <span class=\"o\">(</span><span class=\"n\">lengths.head</span><span class=\"o\">)</span> <span class=\"n\">a'</span><span class=\"o\">⟩)</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">⟩)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span> <span class=\"c1\">-- I expect this to work, but it does not.</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"c1\">-- If I don't use any pattern matching, then it works as expected:</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">break_into_words'</span> <span class=\"o\">:</span>\n   <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"c1\">-- word lengths</span>\n   <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"c1\">-- original sequence</span>\n   <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"c1\">-- sequence of words</span>\n <span class=\"o\">:=</span> <span class=\"n\">function.curry</span>\n     <span class=\"o\">(</span><span class=\"n\">stream.corec</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">stream.take</span> <span class=\"o\">(</span><span class=\"n\">x.fst.head</span><span class=\"o\">)</span> <span class=\"n\">x.snd</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x.fst.tail</span><span class=\"o\">,</span> <span class=\"n\">stream.drop</span> <span class=\"o\">(</span><span class=\"n\">x.fst.head</span><span class=\"o\">)</span> <span class=\"n\">x.snd</span><span class=\"o\">⟩))</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">stream.take</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">break_into_words'</span> <span class=\"n\">id</span> <span class=\"n\">id</span><span class=\"o\">))</span>\n<span class=\"c1\">-- [[], [0], [1, 2], [3, 4, 5]]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">break_into_words_def'</span>\n    <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n   <span class=\"o\">:</span> <span class=\"n\">break_into_words'</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>\n    <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">stream.take</span> <span class=\"o\">(</span><span class=\"n\">x.fst.head</span><span class=\"o\">)</span> <span class=\"n\">x.snd</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">stream</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">stream.iterate</span> <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">stream</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                     <span class=\"o\">⟨</span><span class=\"n\">x.fst.tail</span><span class=\"o\">,</span> <span class=\"n\">stream.drop</span> <span class=\"o\">(</span><span class=\"n\">x.fst.head</span><span class=\"o\">)</span> <span class=\"n\">x.snd</span><span class=\"o\">⟩)</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">⟩)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span> <span class=\"c1\">-- does work</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266352053,
        "sender_full_name": "David Renshaw",
        "timestamp": 1640790154
    },
    {
        "content": "<p>One trick is to do <code>cases</code> on the arguments that participate in pattern matching first. This can \"unstick\" the reduction involved in a <code>refl</code> proof. (I haven't checked if it works here.)</p>",
        "id": 266353665,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640791393
    },
    {
        "content": "<p>Oh, this doesn't seem to apply here, sorry.</p>",
        "id": 266353833,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640791539
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">break_into_words_def</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">break_into_words</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>\n  <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">lengths</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">⟩,</span> <span class=\"n\">stream.take</span> <span class=\"o\">(</span><span class=\"n\">lengths.head</span><span class=\"o\">)</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">stream</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">stream</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">stream.iterate</span> <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">stream</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">lengths</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">⟨</span><span class=\"n\">lengths.tail</span><span class=\"o\">,</span> <span class=\"n\">stream.drop</span> <span class=\"o\">(</span><span class=\"n\">lengths.head</span><span class=\"o\">)</span> <span class=\"n\">a'</span><span class=\"o\">⟩)</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert_to</span>\n    <span class=\"o\">(</span><span class=\"n\">function.curry</span> <span class=\"o\">(</span><span class=\"n\">stream.corec</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">stream.take</span> <span class=\"o\">(</span><span class=\"n\">x.fst.head</span><span class=\"o\">)</span> <span class=\"n\">x.snd</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x.fst.tail</span><span class=\"o\">,</span> <span class=\"n\">stream.drop</span> <span class=\"o\">(</span><span class=\"n\">x.fst.head</span><span class=\"o\">)</span> <span class=\"n\">x.snd</span><span class=\"o\">⟩))</span> <span class=\"o\">:</span>\n    <span class=\"n\">stream</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">stream</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">stream</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">stream.take</span> <span class=\"o\">(</span><span class=\"n\">x.fst.head</span><span class=\"o\">)</span> <span class=\"n\">x.snd</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">stream</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">stream.iterate</span> <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">stream</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">⟨</span><span class=\"n\">x.fst.tail</span><span class=\"o\">,</span> <span class=\"n\">stream.drop</span> <span class=\"o\">(</span><span class=\"n\">x.fst.head</span><span class=\"o\">)</span> <span class=\"n\">x.snd</span><span class=\"o\">⟩)</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩)</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">break_into_words</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"n\">prod_rec</span> <span class=\"o\">},</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266360334,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1640796598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span>  what is <code>prod_rec</code>? I don't see that anywhere in mathlib or core lean.</p>",
        "id": 266363265,
        "sender_full_name": "David Renshaw",
        "timestamp": 1640799102
    },
    {
        "content": "<p>Sorry, I edited the post, but that lemma somehow disappeared. Fixed.</p>",
        "id": 266363450,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1640799244
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 266363485,
        "sender_full_name": "David Renshaw",
        "timestamp": 1640799295
    },
    {
        "content": "<p>I still don't understand why this isn't a direct definitional equality, though.</p>",
        "id": 266363500,
        "sender_full_name": "David Renshaw",
        "timestamp": 1640799313
    }
]