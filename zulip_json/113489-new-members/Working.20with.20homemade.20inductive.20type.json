[
    {
        "content": "<p>Hi all. I'm trying to prove the correctness of the definition of the union of two ε-NFAs, but I've gotten stuck. This should be an MWE, if you paste it in the middle of <code>src/computability/epsilon_nfa.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">sum</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">union_step</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">start</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">M.start</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">union_step</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">start'</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s'</span> <span class=\"bp\">∈</span> <span class=\"n\">M'.start</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">union_step</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">s'</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M.step</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">union_step</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">step'</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M'.step</span> <span class=\"n\">s'</span> <span class=\"n\">a</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">union_step</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">s'</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">t'</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">union</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">step</span> <span class=\"o\">:=</span> <span class=\"n\">union_step</span> <span class=\"n\">M</span> <span class=\"n\">M'</span><span class=\"o\">,</span>\n  <span class=\"n\">start</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">none</span><span class=\"o\">},</span>\n  <span class=\"n\">accept</span> <span class=\"o\">:=</span> <span class=\"o\">{(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">M.accept</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"o\">{(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">s'</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"n\">s'</span> <span class=\"bp\">∈</span> <span class=\"n\">M'.accept</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">union_step_once</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">M.union</span> <span class=\"n\">M'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"o\">{(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">M.start</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"o\">{(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">s'</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"n\">s'</span> <span class=\"bp\">∈</span> <span class=\"n\">M'.start</span><span class=\"o\">}</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">union</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- cases union_step, -- here?</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Within union_step_once we end up with a state like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n  <span class=\"n\">σ</span> <span class=\"n\">σ'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ</span><span class=\"o\">,</span>\n  <span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ'</span><span class=\"o\">,</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">M.union_step</span> <span class=\"n\">M'</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"bp\">=</span>\n      <span class=\"o\">{</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">M.start</span> <span class=\"bp\">∧</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_x</span><span class=\"o\">}</span> <span class=\"bp\">∪</span>\n        <span class=\"o\">{</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">σ'</span><span class=\"o\">),</span> <span class=\"n\">s'</span> <span class=\"bp\">∈</span> <span class=\"n\">M'.start</span> <span class=\"bp\">∧</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_x</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>The <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> is that I want to obtain the fact that <code>M.union_step M' none none</code> must either be <code>(some (inl s))</code> or <code>(some (inr s'))</code> by the definition of <code>union_step</code>. I would have thought <code>cases</code> or something similar to it would have helped, but no matter what I do, I end up with an error like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">applicable</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">given</span> <span class=\"n\">hypothesis</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">σ</span> <span class=\"n\">σ'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ</span><span class=\"o\">,</span>\n<span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ'</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ'</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span><span class=\"o\">))</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">_x</span> <span class=\"n\">M</span> <span class=\"n\">M'</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"bp\">=</span>\n    <span class=\"o\">{</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">M.start</span> <span class=\"bp\">∧</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_x</span><span class=\"o\">}</span> <span class=\"bp\">∪</span>\n      <span class=\"o\">{</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">σ'</span><span class=\"o\">),</span> <span class=\"n\">s'</span> <span class=\"bp\">∈</span> <span class=\"n\">M'.start</span> <span class=\"bp\">∧</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_x</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and I'm not sure why. The cases tactic is apparently not applicable, but the <code>_x</code> substitution you can see in the state looks reasonable. It looks even more reasonable when you do something like <code>cases M.union_step M' none none</code>, but the same error occurs.</p>\n<p>How do I prove my <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>, and how do I work with this inductive type in general? In fact, have I even defined it correctly? Thanks :)</p>",
        "id": 237753606,
        "sender_full_name": "Matt Kempster",
        "timestamp": 1620349809
    },
    {
        "content": "<p>By the way, <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> means that you should make it work in a free standing file, which imports <code>computability.epsilon_nfa</code> and has the necessary namespace and variable declarations</p>",
        "id": 237755055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620351077
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">computability.epsilon_NFA</span>\n<span class=\"kn\">open</span> <span class=\"n\">sum</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">σ'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ε_NFA</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">union_step</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">start</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">M.start</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">union_step</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">start'</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s'</span> <span class=\"bp\">∈</span> <span class=\"n\">M'.start</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">union_step</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">s'</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M.step</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">union_step</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">step'</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M'.step</span> <span class=\"n\">s'</span> <span class=\"n\">a</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">union_step</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">s'</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">t'</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">union</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">step</span> <span class=\"o\">:=</span> <span class=\"n\">union_step</span> <span class=\"n\">M</span> <span class=\"n\">M'</span><span class=\"o\">,</span>\n  <span class=\"n\">start</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">none</span><span class=\"o\">},</span>\n  <span class=\"n\">accept</span> <span class=\"o\">:=</span> <span class=\"o\">{(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">M.accept</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"o\">{(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">s'</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"n\">s'</span> <span class=\"bp\">∈</span> <span class=\"n\">M'.accept</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">union_step_once</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">M.union</span> <span class=\"n\">M'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"o\">{(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">M.start</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"o\">{(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">s'</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"n\">s'</span> <span class=\"bp\">∈</span> <span class=\"n\">M'.start</span><span class=\"o\">}</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">union</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- cases union_step, -- here?</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ε_NFA</span>\n</code></pre></div>",
        "id": 237755453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620351377
    },
    {
        "content": "<p>You are proving an equality of sets, so you need to apply extensionality and split into the two implication directions. In each case you then get an inductive hypothesis that you can destructure to get the two cases.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">union_step_once</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">M.union</span> <span class=\"n\">M'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"o\">{(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">M.start</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"o\">{(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">s'</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"n\">s'</span> <span class=\"bp\">∈</span> <span class=\"n\">M'.start</span><span class=\"o\">}</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">union</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩),</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237755785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620351716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20homemade.20inductive.20type/near/237755785\">said</a>:</p>\n<blockquote>\n<p>You are proving an equality of sets, so you need to apply extensionality and split into the two implication directions. In each case you then get an inductive hypothesis that you can destructure to get the two cases.</p>\n</blockquote>\n<p>Thank you for the reply! However I'm afraid this leaves me with more questions than it answers.</p>\n<p>The original question still applies. All the sorries still involve <code>union_step</code>, which is the main point of my post; I don't know how to destructure it.</p>\n<p>I spent a bunch of time trying to understand <code>rcases</code> the other day, and although I made some progress, I can't <em>fully</em> claim to understand the line <code>rintro (⟨s, h⟩ | _ | ⟨s, h⟩ | _)</code> here. I hesitate to ask you to explain this, though, because I think I <em>partially</em> understand it, and can generally fake it until I make it when it comes to rcases nowadays.</p>",
        "id": 237757112,
        "sender_full_name": "Matt Kempster",
        "timestamp": 1620352808
    },
    {
        "content": "<blockquote>\n<p>The original question still applies. All the sorries still involve union_step, which is the main point of my post; I don't know how to destructure it.</p>\n</blockquote>\n<p>The version of <code>cases union_step</code> in my code is <code>rintro (⟨s, h⟩ | _ | ⟨s, h⟩ | _),</code>, which you can also write <code>intro h, cases h</code></p>",
        "id": 237757699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620353279
    },
    {
        "content": "<p>the point being that you don't case on the <em>type</em> <code>union_step</code> but rather a variable whose type is <code>union_step</code>, in this case <code>h</code></p>",
        "id": 237757763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620353311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"401024\">Matt Kempster</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20homemade.20inductive.20type/near/237757112\">said</a>:</p>\n<blockquote>\n<p>I spent a bunch of time trying to understand <code>rcases</code> the other day, and although I made some progress, I can't <em>fully</em> claim to understand the line <code>rintro (⟨s, h⟩ | _ | ⟨s, h⟩ | _)</code> here. I hesitate to ask you to explain this, though, because I think I <em>partially</em> understand it, and can generally fake it until I make it when it comes to rcases nowadays.</p>\n</blockquote>\n<p>The <code>rintro</code> line can be expanded as I said to <code>intro H, rcases H with ⟨s, h⟩ | _ | ⟨s, h⟩ | _</code>. The contents of the pattern there correspond to the four constructors of the inductive type <code>union_step</code>. Two of them are impossible due to the parameters, but <code>rcases</code> requires that you put something there anyway so that's the <code>_</code> cases. The other two need names for the arguments to the constructors, which we are calling <code>s, h</code> here. We are left with two goals for the two non-impossible cases, and <code>s, h</code> are new variables introduced in each of them.</p>\n<p>You can do the same thing with plain <code>cases</code>, but the bindings are less structured so it looks like <code>intro H, cases H with s h _ _ s h _ _</code> or something like that.</p>",
        "id": 237758101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620353621
    },
    {
        "content": "<p>Actually there is a typo, the two impossible cases are cases 3 and 4, not 2 and 4, so it should actually read <code>rintro (⟨s, h⟩ | ⟨s, h⟩ | _ | _),</code></p>",
        "id": 237758196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620353699
    },
    {
        "content": "<p>by the way, I think your NFA has one more state than necessary:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">union_step</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">left</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M.step</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">union_step</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M'.step</span> <span class=\"n\">s'</span> <span class=\"n\">a</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">union_step</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">t'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">union</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">step</span> <span class=\"o\">:=</span> <span class=\"n\">union_step</span> <span class=\"n\">M</span> <span class=\"n\">M'</span><span class=\"o\">,</span>\n  <span class=\"n\">start</span> <span class=\"o\">:=</span> <span class=\"n\">sum.elim</span> <span class=\"n\">M.start</span> <span class=\"n\">M'.start</span><span class=\"o\">,</span>\n  <span class=\"n\">accept</span> <span class=\"o\">:=</span> <span class=\"n\">sum.elim</span> <span class=\"n\">M.accept</span> <span class=\"n\">M'.accept</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 237759112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620354470
    },
    {
        "content": "<p>Aha! With the typo explained, I think I am starting to understand this now.</p>\n<p>However I still require some hand-holding <span aria-label=\"persevere\" class=\"emoji emoji-1f623\" role=\"img\" title=\"persevere\">:persevere:</span> I'm not at all sure how to proceed here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">union_step_once</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">M.union</span> <span class=\"n\">M'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"o\">{(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">M.start</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"o\">{(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">s'</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"n\">s'</span> <span class=\"bp\">∈</span> <span class=\"n\">M'.start</span><span class=\"o\">}</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩),</span>\n    <span class=\"o\">{</span>\n      <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">        α : Type u,</span>\n<span class=\"cm\">        σ σ' : Type v,</span>\n<span class=\"cm\">        M : ε_NFA α σ,</span>\n<span class=\"cm\">        M' : ε_NFA α σ',</span>\n<span class=\"cm\">        x : list α,</span>\n<span class=\"cm\">        s : σ,</span>\n<span class=\"cm\">        h : s ∈ M.start</span>\n<span class=\"cm\">        ⊢ some (inl s) ∈ (M.union M').step none none</span>\n<span class=\"cm\">      -/</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Once again it is the union_step that is causing me pain. I have tried doing things like <code>let S :=  (M.union M').step none none</code> and <code>cases S...</code> but I'm hitting the same issue as before. This means I have some sort of conceptual misunderstanding.</p>\n<p>Where do I begin on this side of the proof?</p>",
        "id": 237759162,
        "sender_full_name": "Matt Kempster",
        "timestamp": 1620354498
    },
    {
        "content": "<p>what you want there is <code>apply union_step.start,</code>, although <code>constructor</code> will magically pick the right constructor to use</p>",
        "id": 237759286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620354620
    },
    {
        "content": "<p>In order to construct elements of an inductive type we use the constructors</p>",
        "id": 237759309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620354640
    },
    {
        "content": "<p>In this case we want to prove  <code>(M.union M').step none none (some (inl s))</code> and that's literally the statement of <code>union_step.start</code>, except it needs <code>s ∈ M.start</code> which we have in the context</p>",
        "id": 237759365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620354690
    },
    {
        "content": "<p>so <code>exact union_step.start _ h</code> works</p>",
        "id": 237759376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620354708
    },
    {
        "content": "<p>Ahhh! This is all starting to make sense here. I don't have much else to add for now other than \"it makes sense I think\", so thank you!!</p>",
        "id": 237760068,
        "sender_full_name": "Matt Kempster",
        "timestamp": 1620355322
    }
]