[
    {
        "content": "<p>I've a type defined as <code>def Gᵣ (r : ℕ) := add_subgroup.closure (Bᵣ r)</code></p>\n<p>I have a function <code>smul (k : G₀) (b : Bᵣ r) : Bᵣ r</code>, and would like to derive from it a function <code>smul (k : G₀) (v : Gᵣ r) : Gᵣ r</code>.<br>\nThere seems to be an intuitive meaning of \"deconstruct v to the elements of Bᵣ it was constructed from, apply smul to those elements, and then pick the result from Gᵣ\".</p>\n<p>I can't really work out how to deconstruct my closure to implement this.</p>",
        "id": 202293124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593426790
    },
    {
        "content": "<p>It's not meaningful in general.</p>",
        "id": 202293589,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593427152
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_subgroup.closure_induction\">docs#add_subgroup.closure_induction</a> is in general what you would be looking for to deconstruct the elements.</p>",
        "id": 202293610,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1593427166
    },
    {
        "content": "<p>Is there an example of how to use closure_induction anywhere? Can it be used as a tactic?</p>",
        "id": 202293742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593427268
    },
    {
        "content": "<p>You can't use it to make a definition.</p>",
        "id": 202293851,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593427343
    },
    {
        "content": "<p>Indeed, the return type <code>p</code> has to be a <code>Prop</code></p>",
        "id": 202293862,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1593427355
    },
    {
        "content": "<p>I think I can work with that</p>",
        "id": 202293893,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593427387
    },
    {
        "content": "<p>Your intuitive explanation is not precise because there could be more than one way to do the deconstruction.</p>",
        "id": 202293905,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593427401
    },
    {
        "content": "<p>Presumably, you know some reason why this is actually not possible or not a problem.</p>",
        "id": 202293924,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593427425
    },
    {
        "content": "<p>In my case all the deconstructions are equivalent</p>",
        "id": 202293929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593427440
    },
    {
        "content": "<p>Aha, then your <code>p x</code> would be something like <code>x ∈ G\\_r</code></p>",
        "id": 202294008,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1593427490
    },
    {
        "content": "<p>Indeed</p>",
        "id": 202294033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593427507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20add_subgroup.2Eclosure/near/202293742\">said</a>:</p>\n<blockquote>\n<p>Is there an example of how to use closure_induction anywhere? Can it be used as a tactic?</p>\n</blockquote>\n<p>To use it in a tactic proof, with an assumption <code>hx : x ∈ G\\_r</code>, you can write <code>apply add_subgroup.closure_induction hx</code>, and you would get goals corresponding to the possible destructurings of elements of a closure</p>",
        "id": 202294266,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1593427724
    },
    {
        "content": "<p>I think I'm getting lost in stale lean annotations in vs-code... Is there any way to clear all old errors after killing the lean server?</p>",
        "id": 202294491,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593427897
    },
    {
        "content": "<p>Oh I think I misunderstood your problem.</p>",
        "id": 202294589,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593427992
    },
    {
        "content": "<p>Your naming and syntax is a bit weird. Normally we write <code>r ∈ Gᵣ</code>, etc.</p>",
        "id": 202294626,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593428031
    },
    {
        "content": "<p>You'd write that instead of what?</p>",
        "id": 202294700,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593428063
    },
    {
        "content": "<p><code>Gᵣ r</code></p>",
        "id": 202294732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593428095
    },
    {
        "content": "<p>As a type?</p>",
        "id": 202294750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593428107
    },
    {
        "content": "<p>Oh I don't even know. What is <code>add_subgroup.closure</code>? A bundled subgroup?</p>",
        "id": 202294770,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593428121
    },
    {
        "content": "<p>The closure of all elements produced under addition of the set <code>(Br r)</code></p>",
        "id": 202294801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593428148
    },
    {
        "content": "<p>I mean what is the Lean type.</p>",
        "id": 202294808,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593428155
    },
    {
        "content": "<p>The lean type of what?</p>",
        "id": 202294857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593428166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> yes, it's bundled (<code>is_add_subgroup</code> is the unbundled class)</p>",
        "id": 202294862,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1593428169
    },
    {
        "content": "<p>What's the missing type annotation on <code>Gᵣ</code>.</p>",
        "id": 202294866,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593428172
    },
    {
        "content": "<p><code>Gᵣ : ℕ → add_subgroup G</code></p>",
        "id": 202294880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593428190
    },
    {
        "content": "<p>The <code>r</code> here is really just a distraction, since it's unchanged through all the types</p>",
        "id": 202294896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593428217
    },
    {
        "content": "<p>Okay, then I still don't understand how you could use closure_induction</p>",
        "id": 202294941,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593428271
    },
    {
        "content": "<p>I think I see the path forward, but I'm getting bitten by aliases for the same thing</p>",
        "id": 202295024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593428344
    },
    {
        "content": "<p>IUIC, <code>v : Gr r</code> is interpreted as <code>v : coe_sort (Gr r)</code>, i.e. <code>v : {v : G // v ∈ Gr r}</code>. So we're using syntax sugar for <code>subtype</code></p>",
        "id": 202295034,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1593428357
    },
    {
        "content": "<p>If I have <code>def Bᵣ (r : ℕ) := set_of (is_rblade r)</code>, is it better to write lemmas in terms of <code>is_rblade r b</code> or <code>b \\in Bᵣ r</code>?</p>",
        "id": 202295059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593428384
    },
    {
        "content": "<p>Because lean doesn't seem to be very helpful when it comes to accepting the former where it expects the latter</p>",
        "id": 202295139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593428431
    },
    {
        "content": "<p>I expect <code>is_rblade</code>, unless you want to do set operations with them</p>",
        "id": 202295170,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1593428461
    },
    {
        "content": "<p>If you hide it behind definition <code>Br</code>, many tactics will not recognize that it's defined in terms of <code>is_rblade</code> until you <code>unfold Br</code></p>",
        "id": 202295310,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1593428560
    },
    {
        "content": "<p>If you really want to write <code>Bᵣ</code> and not have to unfold it, you can also use a notation instead of a <code>def</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">B</span><span class=\"err\">ᵣ</span><span class=\"bp\">`</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">set_of</span> <span class=\"o\">(</span><span class=\"n\">is_rblade</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Notations are processed before tactics, so they don't confuse the tactics.</p>",
        "id": 202295617,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1593428791
    },
    {
        "content": "<p>Would it be better to eliminate <code>is_rblade</code>, and inline the defintion into <code>B_r</code>?</p>",
        "id": 202295646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593428819
    },
    {
        "content": "<p>With regards to the original question, I'm guessing the formalization is not optimal.</p>",
        "id": 202295668,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593428840
    },
    {
        "content": "<p>There is a mathematical issue here, namely you have to check that whatever relations the elements of <code>B_r</code> satisfy as a subgroup of (something??) are preserved by <code>smul</code>. Since <code>smul</code> takes values again in <code>B_r</code> I'm guessing this is not so trivial to check.</p>",
        "id": 202295745,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593428885
    },
    {
        "content": "<p>I'm stuck on the trivial goal:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_rblade</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">fₛ</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"err\">⇑</span><span class=\"n\">fₛ</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">geometric_algebra</span><span class=\"bp\">.</span><span class=\"n\">is_rblade</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 202295898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593429033
    },
    {
        "content": "<p>if it's trivial, then <code>exact h1</code></p>",
        "id": 202295938,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593429073
    },
    {
        "content": "<p>It can't convert between the types</p>",
        "id": 202295963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593429098
    },
    {
        "content": "<p>Can I unfold <code>∈ </code> somehow?</p>",
        "id": 202296013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593429123
    },
    {
        "content": "<p>I'm suspicious about the fact that one is displayed with <code>geometric_algebra.</code> and the other is not.</p>",
        "id": 202296014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593429123
    },
    {
        "content": "<p>I am too</p>",
        "id": 202296021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593429129
    },
    {
        "content": "<p>This is not your issue.</p>",
        "id": 202296022,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593429132
    },
    {
        "content": "<p>Well, I guess it could be your issue (maybe the type is something else?) but it seems unlikely</p>",
        "id": 202296058,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593429177
    },
    {
        "content": "<p><code>apply set.mem_def.mpr</code> does the trick, according to <code>suggest</code> (before the expected <code>exact h1</code>)</p>",
        "id": 202296087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593429206
    },
    {
        "content": "<p>But I have no idea what that means</p>",
        "id": 202296098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593429218
    },
    {
        "content": "<p>Also, what is the error message!</p>",
        "id": 202296114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593429229
    },
    {
        "content": "<p>Those are helpful.</p>",
        "id": 202296120,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593429232
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">is_rblade</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">fₛ</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"err\">⇑</span><span class=\"n\">fₛ</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">geometric_algebra</span><span class=\"bp\">.</span><span class=\"n\">is_rblade</span> <span class=\"n\">r</span>\n</code></pre></div>\n\n\n<p>if I skip the <code>mem_def</code> thing</p>",
        "id": 202296195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593429269
    },
    {
        "content": "<p>Ah, <code>rw set.mem_def</code> seems more idiomatic</p>",
        "id": 202296252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593429326
    },
    {
        "content": "<p><code>set.mem_def</code> is basically by rfl, so none of this makes sense</p>",
        "id": 202296291,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593429359
    },
    {
        "content": "<p>Well, I can tell you that without it,  I get that error. The snippet causing the trouble is:</p>\n<div class=\"codehilite\"><pre><span></span><code>      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_rblade</span> <span class=\"n\">r</span> <span class=\"o\">((</span><span class=\"n\">fₛ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">fₛ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"err\">ᵣ</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_def</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n      <span class=\"kn\">end</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 202296390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593429429
    },
    {
        "content": "<p>Hmm, this seems impossible.</p>",
        "id": 202296412,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593429450
    },
    {
        "content": "<p><del>Except, now that I try again I don't...</del></p>",
        "id": 202296414,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593429454
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 202296437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593429475
    },
    {
        "content": "<p>Jumped to conclusions, my lean server is running quite slowly</p>",
        "id": 202296534,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593429552
    },
    {
        "content": "<p>I can confirm that removing <code>rw set.mem_def</code> _does_ cause it to give the type error above</p>",
        "id": 202296550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593429566
    },
    {
        "content": "<p>I guess this is barely possible if the type of <code>h1</code> secretly contains some metavariables, <em>and</em> Lean somehow fails to hit upon the obvious idea of unfolding the definition of <code>∈</code>, but it still seems implausible.</p>",
        "id": 202296916,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593429898
    },
    {
        "content": "<p>Maybe this is more likely with this \"forward reasoning\" style. (Whatever you put as a proof of <code>h1</code>, you could just put for <code>h2</code> directly.)</p>",
        "id": 202297071,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593430052
    },
    {
        "content": "<p>Yeah, I was able to simplify it all by doing basically that, and then set.mem_def wasn't needed</p>",
        "id": 202297150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593430083
    }
]