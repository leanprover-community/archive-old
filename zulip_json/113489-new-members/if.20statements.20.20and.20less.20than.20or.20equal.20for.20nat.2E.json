[
    {
        "content": "<p>I am not using lean as a programming language, but I'm proving things about functions that look like the sort of functions that you would write in a programming language (if that confuses you then ignore it). I'm quite happy doing things with lists, trees etc, but I realise that there is something fundamental that I don't understand.</p>\n<p>What is going on with the following piece of code?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">blug</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">42</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">blug</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span>  <span class=\"o\">:=</span>  <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">blug</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>\n<p><code>blug</code> is the sort of function that a programmer might write. So how come the two proofs just work? I found <code>dec_trivial</code> by using library search.  Looking at the definition it is something to do with decidable propositions, which is something that I don't really understand yet. <br>\nIs there some magic that is going provides the required proofs with you use if (or ite)? </p>\n<p>I'm sorry if my question is vague, it is difficult for me to understand what I don't understand.</p>",
        "id": 252424851,
        "sender_full_name": "Justin Pearson",
        "timestamp": 1631090073
    },
    {
        "content": "<p>A proposition is decidable if there is an algorithm that can be run to find out whether it's true or not.</p>",
        "id": 252425930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631090650
    },
    {
        "content": "<p>So the things that programmers write in their <code>if .. then .. else</code> statements had better be decidable. And indeed this is the case for (in)equalities of natural numbers.</p>",
        "id": 252425991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631090684
    },
    {
        "content": "<p><code>dec_trivial</code> signals to Lean that it should run that algorithm. Along the way, <code>if P then a else b</code> gets reduced to <code>a</code> or <code>b</code>, as Lean figures out whether <code>P</code> is true or not.</p>",
        "id": 252426082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631090729
    },
    {
        "content": "<p>reading the implementation of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ite/src\">src#ite</a> might explain why the <code>rfl</code> proof works</p>",
        "id": 252426179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631090768
    },
    {
        "content": "<p>However, if you cheat, and you use <code>classical.decidable_*</code> stuff, then you can make it look like propositions are decidable, even though they are not. In such cases <code>ite</code> will not reduce nicely. So for programming purposes all the <code>classical</code> stuff is best avoided.</p>",
        "id": 252426232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631090806
    },
    {
        "content": "<p>It would be nice to have some mechanism that lets you mark something as classical free with some sort of check.</p>",
        "id": 252428027,
        "sender_full_name": "Justin Pearson",
        "timestamp": 1631091805
    },
    {
        "content": "<p>for programming purposes, the mechanism already exists, it is the <code>noncomputable</code> modifier</p>",
        "id": 252428158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631091860
    },
    {
        "content": "<p>for axiom hawks there is no mechanism available yet, although it's a relatively simple attribute to write</p>",
        "id": 252428224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631091897
    },
    {
        "content": "<p>For the next person that gets here, stepping through the tactic states </p>\n<div class=\"codehilite\" data-code-language=\"example\"><pre><span></span><code>begin\n unfold blug , unfold ite  ,\n rw  [nat.decidable_lt] ,\n dsimp [nat.decidable_le] , refl\nend\n</code></pre></div>\n<p>and looking at the definition of nat.decidable  was really helpful.</p>",
        "id": 252429854,
        "sender_full_name": "Justin Pearson",
        "timestamp": 1631092838
    },
    {
        "content": "<p>Regarding decidability and what it is, here's a CS-inclined mathematician's understanding. Mathematical truth is represented by propositions in <code>Prop</code>.  As we know, every proposition is equal to <code>true : Prop</code> or <code>false : Prop</code>, but there's no general algorithm that evaluates a proposition to one of these values -- usually you've got to write a proof.</p>\n<p>There's also <code>bool</code> truth, represented by <code>tt</code> or <code>ff</code>. In Lean, every function that returns a <code>bool</code> (unless it's marked <code>noncomputable</code>) will eventually evaluate to one of these values.  This is more restrictive that <code>Prop</code> truth, but you can count on getting an answer.</p>\n<p>It would be inconvenient having parallel <code>Prop</code>-valued and <code>bool</code>-valued theories.  For example, having both a <code>&lt;</code> that evaluates to a <code>bool</code> when things are computable (like for <code>ℕ</code>) and a <code>&lt;</code> that evaluates to a <code>Prop</code> when things aren't necessarily computable.  <code>Prop</code> is the more general one, and the one we'd like to have well-developed since everything (or so it seems) we'd want to prove can be encoded as a proposition, but, again, its limitation is that propositions can't be evaluated in general.</p>\n<p>A solution to this is <code>decidable</code> and the typeclass system.  When you ask for a <code>decidable p</code> instance, what is essentially happening is that <code>p</code> is being recompiled into a <code>bool</code> expression.  Well, a variant of a <code>bool</code> where the values remember a proof of the proposition they're translating, since that's a convenient piece of extra information for things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dite\">docs#dite</a>.  This lets you write (certain) propositions in contexts that need to be able to evaluate a <code>Prop</code> to <code>true</code> or <code>false</code>.</p>\n<p>The sub-language of <code>Prop</code> that's recompilable to these <code>bool</code>-like expressions is ad hoc, underspecified, and constantly changing, but at least it's all in the open -- every decidable instance is listed in the dropdown under <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable\">docs#decidable</a>.</p>\n<p>What <code>dec_trivial</code> does is invoke this recompiler (by asking for the <code>Prop</code>'s decidable instance) and then extract its proof if it could be recompiled.</p>\n<p>(Disclaimer: I write these messages to consolidate my understanding as I learn Lean. The above seems to be a workable model, but it could be incorrect.)</p>",
        "id": 252486916,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631117001
    }
]