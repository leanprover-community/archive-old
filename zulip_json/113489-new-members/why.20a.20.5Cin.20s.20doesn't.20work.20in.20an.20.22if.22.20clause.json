[
    {
        "content": "<p>This fails with \"failed to synthesize class instance\":</p>\n<p>def one_iff_member (a : ℕ) (s : set ℕ) := if (a ∈ s) then 1 else 0</p>\n<p>It seems like a \\in s can't be used in this position, but a clause like \"a &lt; b\" can be. What's the difference?</p>",
        "id": 200779449,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1592073603
    },
    {
        "content": "<p>You don't say the crucial thing -- you don't say which instance it fails to synthesize.</p>",
        "id": 200779466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592073661
    },
    {
        "content": "<p><code>⊢ decidable (a ∈ s)</code></p>",
        "id": 200779473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592073689
    },
    {
        "content": "<p>Lean by default uses constructive logic, and because there is no algorithm for figuring out whether a is in your set, which could be for example nat if the Riemann Hypothesis is true and the empty set if it's false, Lean can't handle the if statement.</p>",
        "id": 200779522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592073739
    },
    {
        "content": "<p>hmm, that is strange to me, but ok. isn't the function one_iff_member definable regardless? i guess not</p>",
        "id": 200779542,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1592073792
    },
    {
        "content": "<p>I'm a mathematician and I start most of my lean files with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n</code></pre></div>\n\n\n<p>and now Lean will ignore the fact that there's no algorithm.</p>",
        "id": 200779547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592073798
    },
    {
        "content": "<p><code>if</code> needs an algorithm for decidability, by default. It's as simple as that.</p>",
        "id": 200779551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592073826
    },
    {
        "content": "<p>ah, ok. this is similar to not being able to use em(something) by default then</p>",
        "id": 200779555,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1592073830
    },
    {
        "content": "<p>Right.</p>",
        "id": 200779560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592073837
    },
    {
        "content": "<p>how does open_locale classical differ from open classical? i am already doing the latter</p>",
        "id": 200779598,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1592073849
    },
    {
        "content": "<p><code>open_locale classical</code> makes all propositions decidable.</p>",
        "id": 200779603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592073873
    },
    {
        "content": "<p><code>open classical</code> just gives you access to the functions in the classical namespace</p>",
        "id": 200779608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592073885
    },
    {
        "content": "<p>If you have a maths background and don't know anything about decidability and computability (like me) then you just basically learn the tricks mathematicians use to switch all this constructive/computational stuff off, because to do normal maths as presented to undergraduate mathematicians it needs to be off sometimes.</p>",
        "id": 200779643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592073962
    },
    {
        "content": "<p>it still errors with \"one_iff_member is noncomputable, it depends on classical.prop_decidable\"</p>",
        "id": 200779677,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1592073969
    },
    {
        "content": "<p>Yes, that's your next problem. So you have to mark the function <code>noncomputable def one_iff_member...</code></p>",
        "id": 200779680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592073995
    },
    {
        "content": "<p>or alternatively, if you get sick of writing <code>noncomputable</code> in front of half your functions, you can just write <code>noncomputable theory</code> at the top of your file.</p>",
        "id": 200779686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592074019
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"c1\">-- you have now gone full classical mathematician</span>\n\n<span class=\"n\">def</span> <span class=\"n\">one_iff_member</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- no errors</span>\n</code></pre></div>",
        "id": 200779695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592074049
    },
    {
        "content": "<p>ok thanks. i am aware of decidability and computability, i just dont think I care about them in this context</p>",
        "id": 200779745,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1592074100
    },
    {
        "content": "<p>Now you can't \"run your function\", because you are doing classical mathematics so you're in a domain where the \"proofs = programs\" paradigm doesn't hold.</p>",
        "id": 200779748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592074106
    },
    {
        "content": "<p>is there some alternative where I can demonstrate that \"a \\in s\" is computable</p>",
        "id": 200779754,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1592074128
    },
    {
        "content": "<p>Yes, you can tell Lean that <code>s</code> is decidable, hang on, I'll try to remember how to do it</p>",
        "id": 200779767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592074149
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">one_iff_member</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 200779780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592074178
    },
    {
        "content": "<p>thanks!</p>",
        "id": 200779851,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1592074264
    }
]