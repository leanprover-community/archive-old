[
    {
        "content": "<p>This is probably still not optimal ... e.g. there might be a quicker way to prove that there are finitely many cases.</p>",
        "id": 272725567,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1645470611
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#interval_cases\">tactic#interval_cases</a> works, but it's somewhat slow:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mod8_odd</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hlo</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hhi</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">int.odd_iff</span> <span class=\"n\">at</span> <span class=\"n\">hodd</span><span class=\"o\">,</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">using</span> <span class=\"n\">hlo</span> <span class=\"n\">hhi</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hodd</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272725787,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645470741
    },
    {
        "content": "<p>I guess <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_num\">tactic#norm_num</a> doesn't know how to evaluate <code>odd</code> expressions, but it's fine with modulo, so that's what <code>rw int.odd_iff</code> is for.</p>",
        "id": 272725872,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645470795
    },
    {
        "content": "<p>Thanks to both of you! It looks like Heather's proof is slightly faster, so I'll stick with it.</p>",
        "id": 272726445,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645471192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> has marked this topic as resolved.</p>",
        "id": 272726454,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645471200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I tried a proof using <code>interval_cases</code> with 50 cases over the weekend and couldn't get it to compile: it timed out. Is this expected?</p>",
        "id": 272727293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645471777
    },
    {
        "content": "<p>I think <code>interval_cases</code> is much slower than needed. If some tactician could speed it up, that would be awesome. I think Mario might have had some ideas.</p>",
        "id": 272727672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645472023
    },
    {
        "content": "<p>I wonder what the slow part is, since there's not that much to it. It looks for lower and upper bounds to create an interval, gets a <code>fintype</code> instance for it, then does <code>fin_cases</code>.</p>",
        "id": 272727795,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645472106
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">24</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">24</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- (deterministic) timeout</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272729062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645473035
    },
    {
        "content": "<p>ooh we don't have <code>finset.comap</code> for injections (but we have <code>finset.map</code>)</p>",
        "id": 272730045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645473699
    },
    {
        "content": "<p>Generating the fintype on the fly is slow because afaiu it has to first enumerate the whole univ, then prove that it is enumerative, and then prove that it is all nodup, and I think the default way to decide that is at least N^3</p>",
        "id": 272730909,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645474308
    },
    {
        "content": "<p>yeah this is where I got stuck when doing it manually. Presumably it needs to be done constructively :-/</p>",
        "id": 272731163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645474465
    },
    {
        "content": "<p>Whatever the exponent is, you can probably decrease your proof runtime by 2^2 or 2^3 by using that odd n, for n natural, means that there is a k such that n = bit1 k = 2 * k + 1. Use that through an obtain rfl step, and you only have to now check between 0 and 3 inclusive, and k is one of 0 to 3.</p>",
        "id": 272731837,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645474993
    },
    {
        "content": "<p>Is there a way of increasing the time before a timeout?<br>\nSay, I have a proof that amounts to treating a lot of separate cases and I know the proof is correct, but it just takes too long to be processed.</p>",
        "id": 272733571,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645476388
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/tips_and_tricks.html#memory-and-deterministic-timeout\">https://leanprover-community.github.io/tips_and_tricks.html#memory-and-deterministic-timeout</a></p>",
        "id": 272735319,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645477796
    },
    {
        "content": "<p>In general it should be possible to speed 99.9% of proofs up so that they fit within the default timeout though</p>",
        "id": 272735411,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645477873
    },
    {
        "content": "<p>Doing more-or-less what I understand <code>interval_cases</code> to be doing by hand runs in about 1/3 to 1/2 the time:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- 9.5s</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mod8_odd</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hlo</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hhi</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">int.odd_iff</span> <span class=\"n\">at</span> <span class=\"n\">hodd</span><span class=\"o\">,</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">using</span> <span class=\"n\">hlo</span> <span class=\"n\">hhi</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hodd</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- 3.81s</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mod8_odd'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hlo</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hhi</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">int.odd_iff</span> <span class=\"n\">at</span> <span class=\"n\">hodd</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">set.Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">],</span>\n  <span class=\"n\">set</span> <span class=\"n\">b'</span> <span class=\"o\">:=</span> <span class=\"o\">(⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">set.Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hb'</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">b'</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb'</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">hb'</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hodd</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272736298,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645478578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  Yes, I guess a timeout is a sign that there is a better proof...</p>",
        "id": 272736341,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645478620
    },
    {
        "content": "<p>eh, not really, Lean3 just isn't designed for this. lean4 should be, though</p>",
        "id": 272736585,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645478770
    },
    {
        "content": "<p>BTW isn't there a <code>dec_trivial</code> approach to this as well? Or did I miss it or is it the same as using <code>interval_cases</code>?</p>",
        "id": 272736894,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645479049
    },
    {
        "content": "<p>maybe if you want to wait till the heat death of the universe ;b</p>",
        "id": 272737289,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645479369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Yeah, I guess there is one (for nats, but not Z), and it's significantly faster.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mod8_odd'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hhi</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272737299,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645479379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> Hmm, I guess heat death came sooner than anyone had ever anticipated. No one tells you that these are the sorts of insights you might get by working with proof assistants.</p>",
        "id": 272737492,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645479572
    },
    {
        "content": "<p>Yeah I thought I'd seen it used for bigger problems than this--though the \"size\" is dependent on definitions and can be hard to predict</p>",
        "id": 272737583,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645479627
    },
    {
        "content": "<p>I assume there is no reason we couldn't add an instance for <code>int</code> that handles the original problem too</p>",
        "id": 272737612,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645479651
    },
    {
        "content": "<p>Note that <code>fin_cases</code> and <code>interval_cases</code> are really unnecessarily slow right now. I started working on a speedup reimplementation but got distracted</p>",
        "id": 272740296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645482055
    },
    {
        "content": "<p>in other slow tactics like <code>ac_refl</code> and <code>wlog</code>, is the problem less avoidable?</p>",
        "id": 272740448,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645482226
    },
    {
        "content": "<p>for <code>wlog</code>, probably, for <code>ac_refl</code> I don't know much about how it is implemented but the answer is usually yes it can be improved</p>",
        "id": 272740639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645482397
    },
    {
        "content": "<p>I think it's a problem that <code>wlog</code> is apparently slow enough that it is no longer usable for the original purpose it was designed for before it got generalized beyond all recognition</p>",
        "id": 272740760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645482518
    },
    {
        "content": "<p>it's barely useable for <code>wlog : a ≤ b</code> :(</p>",
        "id": 272740905,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645482652
    },
    {
        "content": "<p>I haven't tried it yet, but a fresh new lightweight tactic that can be used for some applications of wlog is <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#swap_var\">tactic#swap_var</a></p>",
        "id": 272741141,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645482885
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#swap_var\">tactic#swap_var</a></p>",
        "id": 272741183,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645482935
    },
    {
        "content": "<p>that's interesting!</p>",
        "id": 272741243,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645482966
    },
    {
        "content": "<p>Yeah, that tactic was what got me thinking that people are avoiding <code>wlog</code> at its main job</p>",
        "id": 272741690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645483345
    },
    {
        "content": "<p>from a tactic language perspective I want people to just use <code>wlog</code> but if it's too slow then I don't blame them</p>",
        "id": 272741754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645483426
    },
    {
        "content": "<p>I wrote <code>swap_var</code> for this use case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mul_le</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient.lift₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">q.2</span> <span class=\"bp\">≤</span> <span class=\"n\">q.1</span> <span class=\"bp\">*</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c'</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d'</span><span class=\"o\">⟩</span> <span class=\"n\">hac</span> <span class=\"n\">hbd</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_pair_equiv_iff</span><span class=\"o\">,</span> <span class=\"n\">eq_iff_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hac</span> <span class=\"n\">hbd</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">rename</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a'</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">b'</span> <span class=\"n\">y'</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c'</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">d'</span> <span class=\"n\">b'</span><span class=\"o\">],</span>\n                   <span class=\"n\">rename</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">x'</span> <span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">y'</span> <span class=\"n\">d'</span><span class=\"o\">],</span>\n                   <span class=\"n\">rw</span> <span class=\"n\">eq_comm</span> <span class=\"n\">at</span> <span class=\"n\">hac</span> <span class=\"n\">hbd</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">homogeneity</span> <span class=\"n\">h</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">homogeneity</span> <span class=\"o\">(</span><span class=\"n\">strong</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hbd</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">strong</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272741758,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645483433
    },
    {
        "content": "<p>All those <code>rename</code> use dummy <code>name</code>s, instead I should be able to just say <code>swap_var [a c, a' c', b d, b' d']</code></p>",
        "id": 272741844,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645483496
    },
    {
        "content": "<p>One thing I don't like about <code>swap_var</code> is that the following tactic is run twice</p>",
        "id": 272741852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645483502
    },
    {
        "content": "<p>I think the docstring for <code>wlog</code> is also very daunting, it's hard to understand how to properly invoke it.</p>",
        "id": 272741883,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645483552
    },
    {
        "content": "<p>I think that's also a consequence of the over-generality</p>",
        "id": 272741934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645483581
    },
    {
        "content": "<p>to be fair, I love <code>wlog</code> but I don't see how <code>wlog</code> could do this as concisely regardless of the slowdown:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal_ordinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.swap_var</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}}</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">omega_le_mul_iff</span> <span class=\"o\">:</span> <span class=\"n\">ω</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">ω</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_eq_max'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ω</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">omega_le_mul_iff.mp</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">max_comm</span><span class=\"o\">],</span> <span class=\"n\">swap_var</span> <span class=\"o\">[</span><span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">cardinal.mul_eq_max_of_omega_le_left</span> <span class=\"n\">h</span> <span class=\"n\">hb</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272741937,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645483592
    },
    {
        "content": "<p>we should find out how people use it and trim it down if possible</p>",
        "id": 272741941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645483596
    },
    {
        "content": "<p>(this came up naturally!)</p>",
        "id": 272741942,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645483599
    },
    {
        "content": "<p>I think we also need some version of <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> 's <code>may_assume</code> from flt-regular, I really like it and also is how mathematicians would write (we may assume a, b, and c are coprime, else divide through blah blah)</p>",
        "id": 272741978,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645483651
    },
    {
        "content": "<p>(my code is in <a href=\"https://github.com/leanprover-community/mathlib/tree/pechersky/nakada\">branch#pechersky/nakada</a> if people want to try <code>wlog</code> with it)</p>",
        "id": 272741979,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645483652
    },
    {
        "content": "<p>what are the types there? Is that in mathlib somewhere?</p>",
        "id": 272741994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645483673
    },
    {
        "content": "<p>still not working <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> , you need some open locales</p>",
        "id": 272742098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645483773
    },
    {
        "content": "<p>there we are, sorry, I'm getting this stuff ready for pr</p>",
        "id": 272742190,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645483826
    },
    {
        "content": "<p>looks like it worked \"out of the box\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_eq_max'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ω</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">omega_le_mul_iff.mp</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ω</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">cardinal.mul_eq_max_of_omega_le_left</span> <span class=\"n\">h</span> <span class=\"n\">hb</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It's stupidly slow for this goal though</p>",
        "id": 272742329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645483962
    },
    {
        "content": "<p>oh, I did not know you could pass it the disjunction explicitly. that would be amazing if it wasn't so incredibly slow</p>",
        "id": 272742433,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645484072
    },
    {
        "content": "<p>I can only surmise that it's spending that time proving the symmetry lemma</p>",
        "id": 272742464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645484112
    },
    {
        "content": "<p>ahh, and it uses the smt solver for that</p>",
        "id": 272742576,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645484200
    },
    {
        "content": "<p>it uses <em>what</em>?</p>",
        "id": 272742583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645484211
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/wCfE8PbJEi7usGxHc06XrAsx/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/wCfE8PbJEi7usGxHc06XrAsx/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/wCfE8PbJEi7usGxHc06XrAsx/image.png\"></a></div>",
        "id": 272742598,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645484237
    },
    {
        "content": "<p>well... that explains things</p>",
        "id": 272742613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645484250
    },
    {
        "content": "<p>it should just be <code>simp [foo_comm]</code></p>",
        "id": 272742628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645484269
    },
    {
        "content": "<p>we have commutativity typeclasses that we could use</p>",
        "id": 272742699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645484312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Odd.20residues.20mod.208/near/272737299\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> Yeah, I guess there is one (for nats, but not Z), and it's significantly faster.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mod8_odd'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hhi</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>There is an int version (which I just found after writing my own lol), so this works fairly fast</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.range</span>\n\n<span class=\"c1\">-- set_option trace.class_instances true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mod8_odd</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hlo</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hhi</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272745663,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645487245
    },
    {
        "content": "<p>Sorry, I didn't spend really any time playing guess-the-import!</p>",
        "id": 272745918,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645487555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Great!</p>",
        "id": 272812588,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645541312
    }
]