[
    {
        "content": "<p>Can anyone provide an example of how to properly define an instance of the state monad in Lean? I'm having trouble figuring out how exactly Lean wants it. The examples in Programming in Lean seem to have outdated definitions of read/write and no longer work.</p>",
        "id": 159607175,
        "sender_full_name": "cbailey",
        "timestamp": 1551354096
    },
    {
        "content": "<p>What do you mean \"define an instance\"? <code>state</code> is not a class</p>",
        "id": 159608048,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551354998
    },
    {
        "content": "<p>What do you actually want to do?</p>",
        "id": 159608055,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551355009
    },
    {
        "content": "<p>For instance, what is the part of PIL (which is indeed outdated) that you'd like to get to work?</p>",
        "id": 159608182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551355159
    },
    {
        "content": "<p>I just had a quick look at section 7.3 of PIL called \"The state monad\" and I'm confused because it doesn't seem to use anything, it builds everything from scratch. The equivalent of the example at the end using Lean core library is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">read_x</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">read_y</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">read_z</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"n\">def</span> <span class=\"n\">write_x</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n   <span class=\"n\">put</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n   <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"n\">def</span> <span class=\"n\">write_y</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n   <span class=\"n\">put</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n   <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"n\">def</span> <span class=\"n\">write_z</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n   <span class=\"n\">put</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n   <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">ℕ</span><span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">write_x</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n   <span class=\"n\">write_y</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n   <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">read_x</span><span class=\"o\">,</span>\n   <span class=\"n\">write_z</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n   <span class=\"n\">y</span> <span class=\"err\">←</span> <span class=\"n\">read_y</span><span class=\"o\">,</span>\n   <span class=\"n\">z</span> <span class=\"err\">←</span> <span class=\"n\">read_z</span><span class=\"o\">,</span>\n   <span class=\"n\">write_y</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n   <span class=\"n\">y</span> <span class=\"err\">←</span> <span class=\"n\">read_y</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 159609231,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551356230
    },
    {
        "content": "<p>No I'm wrong, it does hide a use of the library <code>state</code> in the middle</p>",
        "id": 159609341,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551356337
    },
    {
        "content": "<p>Hold on, I'll update my update</p>",
        "id": 159609450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551356420
    },
    {
        "content": "<p>For any type <code>σ</code>, <code>state σ</code> is the state monad where the state is of type <code>σ</code>. If <code>m</code> is a monad, <code>state_t σ m</code> is the monad that augments <code>m</code> with additional state. If you define <code>my_monad := state (ℕ × ℕ × ℕ)</code>, you should either make it reducible or explicitly define the monad instance (using <code>state_t.monad</code>).</p>",
        "id": 159609502,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551356499
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">registers</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">init_reg</span> <span class=\"o\">:</span> <span class=\"n\">registers</span> <span class=\"o\">:=</span> <span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">reg_state</span> <span class=\"o\">:=</span> <span class=\"n\">state</span> <span class=\"n\">registers</span>\n\n<span class=\"n\">def</span> <span class=\"n\">read_x</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">read_y</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">read_z</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">z</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">write_x</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n   <span class=\"n\">put</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">z</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">write_y</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n   <span class=\"n\">put</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">z</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">write_z</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n   <span class=\"n\">put</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"bp\">ℕ</span><span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">write_x</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n   <span class=\"n\">write_y</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n   <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">read_x</span><span class=\"o\">,</span>\n   <span class=\"n\">write_z</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n   <span class=\"n\">y</span> <span class=\"err\">←</span> <span class=\"n\">read_y</span><span class=\"o\">,</span>\n   <span class=\"n\">z</span> <span class=\"err\">←</span> <span class=\"n\">read_z</span><span class=\"o\">,</span>\n   <span class=\"n\">write_y</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n   <span class=\"n\">y</span> <span class=\"err\">←</span> <span class=\"n\">read_y</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">(</span> <span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 159609618,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551356603
    },
    {
        "content": "<p>This is the updated example. Basically <code>read</code> was renamed <code>get</code> and <code>write</code> was renamed <code>put</code></p>",
        "id": 159609694,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551356656
    },
    {
        "content": "<p>Note that you can also replace all those explicit calls to <code>register.mk</code> by the angle bracket anonymous constructor notation</p>",
        "id": 159609739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551356714
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">registers</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">init_reg</span> <span class=\"o\">:</span> <span class=\"n\">registers</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">reg_state</span> <span class=\"o\">:=</span> <span class=\"n\">state</span> <span class=\"n\">registers</span>\n\n<span class=\"n\">def</span> <span class=\"n\">read_x</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">read_y</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">read_z</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">z</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">write_x</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n   <span class=\"n\">put</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">z</span> <span class=\"n\">s</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">write_y</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n   <span class=\"n\">put</span> <span class=\"bp\">⟨</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">z</span> <span class=\"n\">s</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">write_z</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n   <span class=\"n\">put</span> <span class=\"bp\">⟨</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">⟩</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"bp\">ℕ</span><span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">write_x</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n   <span class=\"n\">write_y</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n   <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">read_x</span><span class=\"o\">,</span>\n   <span class=\"n\">write_z</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n   <span class=\"n\">y</span> <span class=\"err\">←</span> <span class=\"n\">read_y</span><span class=\"o\">,</span>\n   <span class=\"n\">z</span> <span class=\"err\">←</span> <span class=\"n\">read_z</span><span class=\"o\">,</span>\n   <span class=\"n\">write_y</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n   <span class=\"n\">y</span> <span class=\"err\">←</span> <span class=\"n\">read_y</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">init_reg</span>\n</pre></div>",
        "id": 159609859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551356817
    },
    {
        "content": "<p>Ah, that's a huge help, thank you. I guess 'the idiomatic way of defining a monad for (s -&gt; (a x s))' is the goal. I spent a bunch of time trying to create a state_t instance and when I eventually satisfied it, I got 'state_t is not a class' which was unfortunate.</p>",
        "id": 159609951,
        "sender_full_name": "cbailey",
        "timestamp": 1551356895
    },
    {
        "content": "<p>The error from the renaming of 'read' and 'get' is what originally sent me down the rabbit hole.</p>",
        "id": 159610014,
        "sender_full_name": "cbailey",
        "timestamp": 1551356988
    },
    {
        "content": "<p>Yes, unfortunately Programming In Lean needs a major update so that the code actually runs in Lean 3.4.2. I would imagine that PR's fixing chunks of it would be welcome! (but I can't remember where the repo is :-/ )</p>",
        "id": 159610866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551357846
    },
    {
        "content": "<p>Simon and Jerery are working on it</p>",
        "id": 159611116,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551358099
    },
    {
        "content": "<p>The github page for PIL 404s and it's not listed on the lean website anymore <span aria-label=\"working on it\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"working on it\">:working_on_it:</span></p>",
        "id": 159611308,
        "sender_full_name": "cbailey",
        "timestamp": 1551358279
    },
    {
        "content": "<p><a href=\"https://github.com/avigad/programming_in_lean\" target=\"_blank\" title=\"https://github.com/avigad/programming_in_lean\">https://github.com/avigad/programming_in_lean</a></p>",
        "id": 159622765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551367290
    },
    {
        "content": "<p>it got relocated approximately the same time as mathlib's relocation</p>",
        "id": 159622859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551367343
    },
    {
        "content": "<p>Thanks! I made a pull request with the changes suggested by <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 159654663,
        "sender_full_name": "cbailey",
        "timestamp": 1551389938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126632\">@cbailey</span>  could you link your PR? I am interested in seeing this</p>",
        "id": 159655053,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1551390231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span>  <a href=\"https://github.com/avigad/programming_in_lean/pull/1#issue-257237337\" target=\"_blank\" title=\"https://github.com/avigad/programming_in_lean/pull/1#issue-257237337\">https://github.com/avigad/programming_in_lean/pull/1#issue-257237337</a></p>",
        "id": 159687305,
        "sender_full_name": "cbailey",
        "timestamp": 1551428277
    },
    {
        "content": "<p>Sorry to resurrect this, but is there any particular reason why the registers example fails to evaluate when nat is replaced with string or char? Reduced example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">registers</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">init_reg</span> <span class=\"o\">:</span> <span class=\"n\">registers</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"s2\">&quot;a&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;c&quot;</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">reg_state</span> <span class=\"o\">:=</span> <span class=\"n\">state</span> <span class=\"n\">registers</span>\n\n<span class=\"n\">def</span> <span class=\"n\">read_x</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">read_x</span><span class=\"o\">,</span>\n       <span class=\"n\">return</span> <span class=\"n\">s</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">init_reg</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">excessive memory consumption detected at &#39;replace&#39; (potential solution: increase memory consumption threshold)</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 159700829,
        "sender_full_name": "cbailey",
        "timestamp": 1551438126
    },
    {
        "content": "<p>Yes, <code>#reduce</code> means kernel normalization. Chars (and thus strings) include proofs of inequalities over <code>nat</code>, reducing them produces huge proof terms. You should use <code>#eval</code> instead (and you'll need to make a <code>has_repr</code> instance for <code>registers</code>).</p>",
        "id": 159704392,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551440799
    },
    {
        "content": "<p>I see, thank you. Is that because of the field on character structs showing that their value is in the correct character id range? I still had quite a struggle getting it to work; I had to import <a href=\"http://system.io\" target=\"_blank\" title=\"http://system.io\">system.io</a> and define a reader from id (string × registers) to io unit to finally get #eval to display it properly. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">rho</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">registers</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">io</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">put_str</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">reg_reader</span> <span class=\"o\">:=</span> <span class=\"n\">reader_t</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">rho</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">reg_reader</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">init_reg</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 159720169,
        "sender_full_name": "cbailey",
        "timestamp": 1551452132
    },
    {
        "content": "<p>Yes, that's why. If you reduce <code>char.val a</code>, you're asking Lean to normalize a proof that <code>97 &lt; 55296</code>, which is approximately 55200 nested applications.</p>",
        "id": 159723456,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551454404
    },
    {
        "content": "<p>There's definitely no need to touch io. In this case, there's an annoying hiccup with <code>id</code> not reducing, but it's not bad.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">registers</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">registers</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"s2\">&quot;⟨&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;, &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;, &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">z</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;⟩&quot;</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"n\">def</span> <span class=\"n\">init_reg</span> <span class=\"o\">:</span> <span class=\"n\">registers</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"s2\">&quot;a&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;c&quot;</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">reg_state</span> <span class=\"o\">:=</span> <span class=\"n\">state</span> <span class=\"n\">registers</span>\n\n<span class=\"n\">def</span> <span class=\"n\">read_x</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">registers</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">reg_state</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">read_x</span><span class=\"o\">,</span>\n       <span class=\"n\">return</span> <span class=\"n\">s</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">init_reg</span>\n</pre></div>",
        "id": 159723567,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551454474
    },
    {
        "content": "<p>Ah yeah, that's definitely a better way of doing it. Is there any reason for using Type* instead of just Type in the instance declaration?</p>",
        "id": 159725437,
        "sender_full_name": "cbailey",
        "timestamp": 1551456059
    },
    {
        "content": "<p>It's more general and it doesn't hurt, that's all.</p>",
        "id": 159725955,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551456510
    }
]