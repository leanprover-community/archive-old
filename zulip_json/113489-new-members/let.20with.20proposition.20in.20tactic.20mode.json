[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">result</span><span class=\"o\">,</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">e</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">cantor_surjective</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">Hf</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">D</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">result</span>\n  <span class=\"c1\">-- ⊢ (let H : ∃ (a : X), f a = {x : X | x ∉ f x} := Hf {x : X | x ∉ f x} in false) (Exists.intro D e)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">let H : ∃ (a : X), f a = {x : X | x ∉ f x} := _,</span>\n<span class=\"cm\">    H_1 : ∃ (a : X), f a = {x : X | x ∉ f x} := _</span>\n<span class=\"cm\">in Exists.dcases_on H_1 (λ (D : X) (e : f D = {x : X | x ∉ f x}), ?m_1[H, H_1, D, e])</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 151616438,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544715908
    },
    {
        "content": "<p>somehow there's a strange goal if we use <code>let</code> instead of <code>have</code> with a proposition in tactic mode</p>",
        "id": 151616481,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544715945
    },
    {
        "content": "<p>compare this:</p>",
        "id": 151616542,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544715970
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">result</span><span class=\"o\">,</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">e</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">cantor_surjective</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">Hf</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">D</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">result</span>\n  <span class=\"c1\">-- ⊢ false</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Exists.dcases_on (Hf {x : X | x ∉ f x})</span>\n<span class=\"cm\">  (λ (D : X) (e : f D = {x : X | x ∉ f x}), ?m_1[Hf {x : X | x ∉ f x}, Hf {x : X | x ∉ f x}, D, e])</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 151616547,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544715973
    },
    {
        "content": "<p>Moral: don't use <code>let</code> with propositions?</p>",
        "id": 151618247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544717307
    },
    {
        "content": "<p>Background: Kenny just watched me giving a live Lean talk and I used <code>let</code> with a proposition :P</p>",
        "id": 151618280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544717330
    }
]