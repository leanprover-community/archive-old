[
    {
        "content": "<p>I'm still in the process of trying to understand induction and recursion in Lean. <br>\nI came accross this definition of well-foundedness:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">well_founded</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span>\n</code></pre></div>\n\n\n<p>I would have guessed that instead, this would be defined as:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">well_founded</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"bp\">=</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"n\">r</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>Why is the first one chosen rather than the second one, and how are they different ?</p>",
        "id": 204876918,
        "sender_full_name": "Chris M",
        "timestamp": 1595562448
    },
    {
        "content": "<p>I don't think there is a good reason for this definition. The one constructor inductive is pretty similar to a <code>structure</code> with one field, which is sometimes used when you want to avoid accidental definitional reduction from <code>well_founded r</code> to <code>∀ a, acc r a</code>, but other than that it is basically the same thing</p>",
        "id": 204877796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595563870
    },
    {
        "content": "<p>The <code>structure</code> has the advantage that you get the projection for free; in this case it was defined manually using <code>well_founded.apply</code></p>",
        "id": 204877851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595563927
    },
    {
        "content": "<p>One reason it might have been written that way is that <code>well_founded</code> occurs very early in lean core, before the tactic framework and parts of the equation compiler are working properly because many of the required definitions (like <code>well_founded</code>!) don't exist yet. So it's possible that <code>structure</code> doesn't actually work at this part of the prelude</p>",
        "id": 204877879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595564004
    },
    {
        "content": "<p>I see. that clarifies, thanks :)</p>",
        "id": 204877953,
        "sender_full_name": "Chris M",
        "timestamp": 1595564106
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/408\">lean#408</a></p>",
        "id": 204878116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595564357
    }
]