[
    {
        "content": "<p>I'm getting the error <code>rewrite tactic failed, motive is not type correct</code>, and I can't figure out why...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"kn\">check</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">elems</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">card_fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">q</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The \"additional details\" from the trace says: <br>\n<code>[check] application type mismatch at\n  card a\nargument type\n  finset (fin n)\nexpected type\n  finset (fin _a)</code></p>",
        "id": 182893861,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1575813363
    },
    {
        "content": "<p>The backward rewrite is replacing <code>n</code> inside the expression <code>@card (fin n) a</code>, turning it into <code>@card (fin (finset.card (elems (fin n)))) a</code> which is no longer well typed because <code>a</code> still has the original type <code>finset (fin n)</code></p>",
        "id": 182893976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575813548
    },
    {
        "content": "<p>I see... Is there a way to avoid this, or do I just restructure the proof?</p>",
        "id": 182894053,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1575813679
    },
    {
        "content": "<p>you can use conv to focus on the RHS</p>",
        "id": 182894060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575813696
    },
    {
        "content": "<p>I would try to avoid rewriting with <code>n = ...</code> because there are too many triggers around</p>",
        "id": 182894108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575813724
    },
    {
        "content": "<p>you can often just stick to rewrites in the other direction to simplify composite terms</p>",
        "id": 182894122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575813778
    },
    {
        "content": "<p><code>conv</code> looks super useful, thanks!</p>",
        "id": 182894187,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1575813870
    },
    {
        "content": "<p>(I changed imports/open)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"kn\">check</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">elems</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">card_fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"o\">],</span> <span class=\"c1\">-- ⊢ card a ≤ n</span>\n  <span class=\"n\">conv</span> <span class=\"k\">begin</span>\n    <span class=\"n\">to_rhs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>See <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\">conv docs</a> (and feel free to add stuff to them). This stuff is not covered in TPIL but is occasionally a lifesaver.</p>",
        "id": 182897996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575820604
    },
    {
        "content": "<p>Yeah that makes sense, I just rewrote it like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"o\">],</span>\n  <span class=\"k\">by</span> <span class=\"k\">calc</span> <span class=\"n\">card</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">card_le_of_subset</span> <span class=\"o\">(</span><span class=\"n\">subset_univ</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">card_fin</span> <span class=\"n\">n</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 182898117,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1575820803
    },
    {
        "content": "<p>When you run into an issue like this you can either make your argument work or restructure your argument. I guess my instinct is usually to make my argument work, which might mean why I sometimes write lousy code.</p>",
        "id": 182898655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575821690
    }
]