[
    {
        "content": "<p>I'm writing a function <code>def concat {m n : ℕ} (s : fin m → α) (t : fin n → α) : fin (m + n) → α</code> and I start by splitting on the case that <code>m = 0</code>. Is there a good way for me to get it to accept <code>t</code> as the result? Ultimately what I'm trying to do is make it simpler to work with the definition when trying to prove things about it. Currently when I do <code>split_ifs</code> I get a value of <code>_.mpr t ⟨i, _⟩</code> which I'm not sure how to deal with.</p>",
        "id": 222533706,
        "sender_full_name": "Devon Richards",
        "timestamp": 1610513744
    },
    {
        "content": "<p>You can do <code>cases n</code>, which does induction by splitting into a base case <code>m = 0</code> and the inductive step.</p>",
        "id": 222534989,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1610514988
    },
    {
        "content": "<p>I ended up being able to refactor concat so that I only have to check if m is zero since I can usually get a contradiction there, and instead of checking if n=0 I introduce an element of <code>⟨i, hi⟩ : fin (m + n)</code> and have an if/else on whether <code>h : i &lt; m</code> in which case it  case it can just return <code>s ⟨i, h⟩</code> which simplified much more usefully.</p>",
        "id": 222536079,
        "sender_full_name": "Devon Richards",
        "timestamp": 1610516134
    },
    {
        "content": "<p>And I could actually go further and completely remove the equal to zero checks for both variables so the only if expression is on <code>i &lt; m</code>. Guess this makes a good lesson on making sure my definitions are correct.</p>",
        "id": 222536509,
        "sender_full_name": "Devon Richards",
        "timestamp": 1610516584
    },
    {
        "content": "<p>There's a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum_fin_sum_equiv\">docs#sum_fin_sum_equiv</a> or similar that mostly implements your concat</p>",
        "id": 222548439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610526268
    },
    {
        "content": "<p><code>sum.cases s t \\comp sum_fin_sum_equiv.symm</code> is your function I think</p>",
        "id": 222548653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610526401
    }
]