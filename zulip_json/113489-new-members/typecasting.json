[
    {
        "content": "<p>At this point in the proof, the goal is an inequality between <code>ints</code>, all of which are explicitly <code>int.of_nat n</code> for some <code>n</code>. I feel like I should be able to say <code>norm_cast</code> or <code>push_cast</code> in order to get a goal that's just about natural numbers. Why am I wrong?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197483357,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589407470
    },
    {
        "content": "<p>I feel like I want a tactic <code>work_in</code> which takes a type as an argument and tries to coerce or lift things in your goal to that type</p>",
        "id": 197483506,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589407567
    },
    {
        "content": "<p><code>work_in (zmod 24)</code> would be nice for some number theory kata</p>",
        "id": 197483528,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589407595
    },
    {
        "content": "<p>(of course, I don't know how to implement this without magic, the tactic has to break up the goal into \"atoms\" and \"glue\" --- you don't want to lift (+) to a nat, you want it to stay <code>has_add.add</code> for whatever you're changing the stuff around it to)</p>",
        "id": 197483684,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589407751
    },
    {
        "content": "<p>The canonical map from nat to int is probably <code>coe</code> rather than int.of_nat</p>",
        "id": 197488350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589411158
    },
    {
        "content": "<p>Does linarith do it?</p>",
        "id": 197488435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589411215
    },
    {
        "content": "<p>(away from lean right now)</p>",
        "id": 197488451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589411226
    },
    {
        "content": "<p>You should rewrite <code>int.of_nat</code> to <code>coe</code>, then use <code>norm_cast</code> as normal</p>",
        "id": 197488470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589411258
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat_eq_coe</span><span class=\"o\">],</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>works great</p>",
        "id": 197488588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589411339
    },
    {
        "content": "<p>i see. the <code>int.of_nat</code> came from <code>cases</code> on integers</p>",
        "id": 197488967,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589411594
    },
    {
        "content": "<p>protip: if you use the equation compiler to write a proof by cases, you can give the case as <code>| (n : nat) :=</code> and then you won't see <code>of_nat</code></p>",
        "id": 197489032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589411641
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 197489140,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589411709
    },
    {
        "content": "<p>okay, the last several times i attempted to use the equation compiler i got errors I didn't understand. I guess I can go out and find some examples</p>",
        "id": 197489299,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589411809
    },
    {
        "content": "<p>today I learned that if you delete all of the text in a post, it gets <em>auto-replaced</em> by <code>(deleted)</code>, but I have been manually entering that string a bunch</p>",
        "id": 197489776,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589412169
    },
    {
        "content": "<p>why?</p>",
        "id": 197489802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589412192
    },
    {
        "content": "<p>isn't there a button to delete your post? I think that does the auto-replace to (deleted)</p>",
        "id": 197489831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589412220
    },
    {
        "content": "<p>where's the delete post button? I have been clicking edit and then selecting all  the text and deleting</p>",
        "id": 197490186,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589412482
    },
    {
        "content": "<p>maybe it's just me (i'm an admin)</p>",
        "id": 197490240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589412512
    },
    {
        "content": "<p>if <code>int.coe_nat_eq</code> were tagged with <code>norm_cast</code> then the OP would go through... don't know if there's a case to be made for doing or not doing so</p>",
        "id": 197490408,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1589412643
    },
    {
        "content": "<p>it's plausibly better to tag it with <code>simp</code>?</p>",
        "id": 197490992,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589413113
    }
]