[
    {
        "content": "<p>Is there any way to actually compute a thing in Lean? I was trying to write a quick example of a measure to make sure my definitions made sense, and I first wasn't able to figure out how to specify that I was describing a measure over the borel space over the reals, and then I realized I couldn't even figure out how to tell it to compute the Lebesgue measure of an interval.</p>\n<p>How would I get Lean to tell me what the Lebesgue measure of the interval [0, 7] is? Also, less serious, but how do I say \"α is this specific measurable space\" instead of hypothesizing \"α is some measurable space\"? Thank you!</p>",
        "id": 275189664,
        "sender_full_name": "Torey Hilbert",
        "timestamp": 1647226971
    },
    {
        "content": "<p>I guess in general my question is how do I deal with specific objects instead of variable</p>",
        "id": 275189684,
        "sender_full_name": "Torey Hilbert",
        "timestamp": 1647227033
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure.lebesgue</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory.measure</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 275191595,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647229943
    },
    {
        "content": "<p>Let me plug a new mathlib command, which lets us avoid writing <code>example</code> and the expected answer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">7</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ennreal.of_real 7</span>\n</code></pre></div>",
        "id": 275192090,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647230588
    },
    {
        "content": "<p>Nice!  So why doesn't it take the final step from <code>ennreal.of_real 7</code> to 7, and could it be made to?</p>",
        "id": 275192324,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647230930
    },
    {
        "content": "<p>We would need theorems about <code>ennreal.of_real (bit0 n) = bit0 (ennreal.of_real n)</code> and so on</p>",
        "id": 275192793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647231660
    },
    {
        "content": "<p>norm_num doesn't know anything about <code>ennreal</code></p>",
        "id": 275192797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647231669
    },
    {
        "content": "<p>in fact I don't think it's doing anything at all in this example except possibly a subtraction</p>",
        "id": 275192806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647231697
    },
    {
        "content": "<p>this is all <code>simp</code></p>",
        "id": 275192807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647231703
    },
    {
        "content": "<p>It seems like <code>norm_num</code> is helping <code>simp</code> add in non-negativity hypotheses?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ennreal.of_real 7 = 7</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">ennreal.of_real_bit1</span><span class=\"o\">,</span> <span class=\"n\">zero_le_one</span><span class=\"o\">,</span> <span class=\"n\">ennreal.of_real_one</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275192863,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647231734
    },
    {
        "content": "<p>I'd basing that on the fact that <code>norm_num</code> calls <code>simp</code> with itself as the discharger.</p>",
        "id": 275192890,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647231788
    },
    {
        "content": "<p>This has been very helpful - Thank you!</p>",
        "id": 275194899,
        "sender_full_name": "Torey Hilbert",
        "timestamp": 1647234856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I was finding this to be very puzzling, and I've realized that there were a number of ways I'd implemented <code>#norm_num</code> incorrectly. What <code>norm_num</code> is supposed to do is repeatedly do <code>norm_num1</code> and <code>simp</code> with <code>norm_num1</code> as the discharger, but instead it just did <code>simp</code> and then <code>norm_num1</code>.  <a href=\"https://github.com/leanprover-community/mathlib/pull/12667\">#12667</a> is an attempt to fix it, and it evaluates <code>volume (Icc (0:ℝ) 7)</code> all the way to <code>7</code>.</p>",
        "id": 275204926,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647246257
    }
]