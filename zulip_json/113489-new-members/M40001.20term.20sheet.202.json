[
    {
        "content": "<p>How do I look for the fact \"the inclusion \\N \\r \\R is a homomorphism of ordered rings\"? In particular I am trying to kill the following tactic state<br>\nx : ℝ,<br>\nhx_w : ℤ,<br>\nhx_h : x = ↑hx_w ∧ x ^ 2 &lt; 3<br>\n⊢ 3 &gt; hx_w ^ 2</p>",
        "id": 183008748,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1575931882
    },
    {
        "content": "<p>There's a tactic which does this I think</p>",
        "id": 183009792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575932488
    },
    {
        "content": "<p>You could split hx_h into h1 and h2, and then do cases on h1 and then try norm_cast</p>",
        "id": 183009888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575932546
    },
    {
        "content": "<p>These exercises really make one feel like one is learning math for the first time :)</p>",
        "id": 183011827,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1575934013
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx_w</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hx_h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">hx_w</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"mi\">3</span> <span class=\"bp\">&gt;</span> <span class=\"n\">hx_w</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hx_h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 183011829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575934018
    },
    {
        "content": "<p>yeah, this stuff really opened my eyes and I was the teacher at the time.</p>",
        "id": 183011852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575934046
    },
    {
        "content": "<p>is assumption kind of like exact _?<br>\nedit: answer, yes, see <a href=\"https://leanprover.github.io/reference/tactics.html\" target=\"_blank\" title=\"https://leanprover.github.io/reference/tactics.html\">https://leanprover.github.io/reference/tactics.html</a></p>",
        "id": 183011862,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1575934062
    }
]