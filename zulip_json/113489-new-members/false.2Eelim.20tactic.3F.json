[
    {
        "content": "<p>What is the <code>false.elim</code> equivalent in tactic mode? I have the following proof state: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">anat</span> <span class=\"o\">:</span> <span class=\"n\">AP</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">apply</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n <span class=\"n\">intro</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h13</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>with <code>h15 h </code> I have <code>false</code>. From that I should be able to proof anything.</p>\n<div class=\"codehilite\"><pre><span></span>AA AB AP : Prop,\nh1 : AA ∨ AB ∨ AP,\nh13 : AA → AB,\nh15 : ¬AB,\na : AA,\nh : AB\n⊢ AP\n</pre></div>\n\n\n<p>The complete proof without tactics is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">ana</span> <span class=\"o\">:</span> <span class=\"n\">AP</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h1</span>\n <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">AA</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">AP</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">AA</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">h13</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"n\">h15</span><span class=\"o\">))))</span>\n <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">AB</span> <span class=\"bp\">∨</span> <span class=\"n\">AP</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">AP</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h₂</span>\n   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">AB</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">AP</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"n\">h₃</span> <span class=\"n\">h15</span><span class=\"o\">))</span>\n   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">AP</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>TPiL says nothing about in the chapter 5.</p>",
        "id": 176690052,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569526730
    },
    {
        "content": "<p><code>exfalso</code> will change the goal to <code>false</code></p>",
        "id": 176690213,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1569526847
    },
    {
        "content": "<p>the \"contradiction\" tactic is probably what you're looking for, and it's mentioned briefly in 5.3 ;)</p>",
        "id": 176690244,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1569526871
    },
    {
        "content": "<p>you could also probably write something like <code>exact (h15 h).elim</code></p>",
        "id": 176690355,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1569526943
    },
    {
        "content": "<p>or <code>cases h15 h</code></p>",
        "id": 176690388,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569526971
    },
    {
        "content": "<p>What a shame! I missed the. <code>contradiction</code>! ;-) The <code>exact (h15 h).elim</code> didnt' work but <code>cases h15 h</code> works! OK, I have to study <code>cases</code>, very useful.</p>",
        "id": 176690736,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569527215
    },
    {
        "content": "<p>It was not clear how to deal with the result of <code>exfalso</code>!</p>",
        "id": 176690845,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569527285
    },
    {
        "content": "<p><code>exfalso</code> is just <code>apply false.elim</code></p>",
        "id": 176691134,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1569527488
    },
    {
        "content": "<p>Maybe I am also missing something, but in TPiL I didn't find how to use previous lemmas during a proof of a new lemma. The <code>include</code> works only for variables?</p>",
        "id": 176691815,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569527922
    },
    {
        "content": "<p>I promisse, last question for this week! ;-)</p>",
        "id": 176691855,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569527956
    },
    {
        "content": "<p>You can apply them, construct new terms using them.</p>",
        "id": 176692868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569528565
    },
    {
        "content": "<p>Do you have a specific example where I could show you how to do that?</p>",
        "id": 176692889,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569528578
    },
    {
        "content": "<p>You could also open a random Lean file found on the internet and see how lemmas are used.</p>",
        "id": 176692910,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569528598
    },
    {
        "content": "<p>But it's indeed striking that explanation in TPIL are so local (as opposed to theory building) that this is maybe not explained at all.</p>",
        "id": 176692990,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569528632
    },
    {
        "content": "<p>It is a simple puzzle formalized in propositional logic that I am trying to rewrite the proofs with tactics. From the previous lemma <code>ana</code> we can prove the second <code>claudia</code>: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">ana</span> <span class=\"o\">:</span> <span class=\"n\">AP</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h1</span>\n <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">AA</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">AP</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">AA</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">h13</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"n\">h15</span><span class=\"o\">))))</span>\n <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">AB</span> <span class=\"bp\">∨</span> <span class=\"n\">AP</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">AP</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h₂</span>\n   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">AB</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">AP</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"n\">h₃</span> <span class=\"n\">h15</span><span class=\"o\">))</span>\n   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">AP</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">claudia</span> <span class=\"o\">:</span> <span class=\"n\">CB</span> <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"n\">h18</span> <span class=\"o\">(</span><span class=\"n\">ana</span> <span class=\"n\">h1</span> <span class=\"n\">h13</span> <span class=\"n\">h15</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>Above I was able to prove <code>ana</code> with tactics: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">include</span> <span class=\"n\">h1</span> <span class=\"n\">h13</span> <span class=\"n\">h15</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">anat</span> <span class=\"o\">:</span> <span class=\"n\">AP</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">apply</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n <span class=\"n\">intro</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h13</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">h15</span> <span class=\"n\">h₁</span><span class=\"o\">),</span>\n <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n <span class=\"n\">intro</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n <span class=\"n\">intro</span> <span class=\"n\">h₄</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h₄</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">claudiat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">AP</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CB</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">exact</span> <span class=\"n\">h18</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But I don't want to insert the hypothesis <code>a : AP</code> in the <code>claudiat</code> lemma, it could be dependent of the previous lemma. Complete code <a href=\"https://github.com/emap-md/main/blob/master/vestidos.lean\" target=\"_blank\" title=\"https://github.com/emap-md/main/blob/master/vestidos.lean\">here</a>.</p>",
        "id": 176693180,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569528776
    },
    {
        "content": "<p>You can write <code>exact h18 anat</code>, although there is no point writing that in tactic mode.</p>",
        "id": 176693573,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569529102
    },
    {
        "content": "<p>oh wait</p>",
        "id": 176693587,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569529119
    },
    {
        "content": "<p><code>anat</code> depends on a bunch of variable assumptions, right?</p>",
        "id": 176693600,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569529137
    },
    {
        "content": "<p>Yes. They are declared as parameters.</p>",
        "id": 176693661,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569529200
    },
    {
        "content": "<p>You can write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">claudiat</span> <span class=\"o\">:</span> <span class=\"n\">CB</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h18</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ana</span> <span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176693772,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569529255
    },
    {
        "content": "<p>after <code>include h1 h13 h15 h18</code> of course</p>",
        "id": 176693800,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569529280
    },
    {
        "content": "<p>Those includes are not necessary in term mode, because Lean can inspect the proof term and figure out it uses those variables.</p>",
        "id": 176693843,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569529322
    },
    {
        "content": "<p>Of course you can also import mathlib's tactic, skip the <code>anat</code> lemma entirely and write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">claudiat</span> <span class=\"o\">:</span> <span class=\"n\">CB</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">finish</span>\n</pre></div>",
        "id": 176693943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569529387
    },
    {
        "content": "<p>Oh, thank you. I will study mathlib the the solution above. It seems more succinct than the one I obtained:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">claudiat1</span> <span class=\"o\">:</span> <span class=\"n\">CB</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">exact</span> <span class=\"n\">h18</span> <span class=\"o\">(</span><span class=\"n\">anat</span> <span class=\"n\">h1</span> <span class=\"n\">h13</span> <span class=\"n\">h15</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176694079,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569529490
    },
    {
        "content": "<p>The <code>by finish</code> solution is cheating, it's calling automation to do all the work for you.</p>",
        "id": 176694135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569529530
    },
    {
        "content": "<p>This is clearly a problem you would expect a computer to solve.</p>",
        "id": 176694162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569529557
    },
    {
        "content": "<p>And really there is no point at all in writing</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">stuff</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>it's exactly the same as writing <code>stuff</code> (hence the name of the <code>exact</code> tactic).</p>",
        "id": 176694290,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569529632
    },
    {
        "content": "<p>Yes, but I really prefer to understand better the tactics before relying on the automation...</p>",
        "id": 176694303,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569529639
    },
    {
        "content": "<p>but if I remove <code>exact</code> in <code>begin exact h18 (anat h1 h13 h15), end</code> above, I got an error.</p>",
        "id": 176694451,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569529735
    },
    {
        "content": "<p>you need to remove begin/end as well</p>",
        "id": 176694529,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1569529792
    },
    {
        "content": "<p>Oh, I got your point now. Yes, in that particular case tactic mode does make sense at all. I agree, just forcing myself to learn tactics and comparing with the other approach for construct proofs.</p>",
        "id": 176695050,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569530172
    },
    {
        "content": "<p>[edit: saw the code link]</p>",
        "id": 176699067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569533558
    },
    {
        "content": "<p><code>lemma ana : AP := or.elim h1 (λ h₂, false.elim $ h15 $ h13 h₂) (λ h₂, or.elim h₂ (λ h₃, false.elim $ h15 h₃) id)</code> would be a term mode way to write it. This would be more the mathlib style I guess.</p>",
        "id": 176699667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569534168
    },
    {
        "content": "<p>if we're golfing term mode:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">ana</span> <span class=\"o\">{</span><span class=\"n\">AA</span> <span class=\"n\">AB</span> <span class=\"n\">AP</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">AA</span> <span class=\"bp\">∨</span> <span class=\"n\">AB</span> <span class=\"bp\">∨</span> <span class=\"n\">AP</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h13</span> <span class=\"o\">:</span> <span class=\"n\">AA</span> <span class=\"bp\">→</span> <span class=\"n\">AB</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h15</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">AB</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AP</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">h13</span> <span class=\"n\">h15</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"n\">h15</span>\n</pre></div>",
        "id": 176703428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569537871
    }
]