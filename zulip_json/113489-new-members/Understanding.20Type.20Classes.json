[
    {
        "content": "<p>Hi <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I've been having problems understanding type classes and how to use them.<br>\nI need to implement a digraph type which is generic over the type of its edges. My plan was to do something along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The type returned by `ε` is the actual edge-type, which depends on the `nodes`.</span>\n<span class=\"c1\">-- The digraph's nodes (of type `α`) need to be accessible by index, which is why `nodes : ι → α`.</span>\n<span class=\"kd\">structure</span> <span class=\"n\">digraph</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">nodes</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">nodes</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Since it's supposed to be a <strong>di</strong>graph, I then wanted to enforce the edge-type to have a <code>src : α</code> and <code>dst : α</code> field. So I added this type class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Type `ε` is a `digraph.edge`-type over `α`, if any instance of it can produce a `src` and `dst` element of type `α`.</span>\n<span class=\"kd\">class</span> <span class=\"n\">digraph.edge</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">dst</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What I can't figure out now, is how to combine this with the <code>digraph</code> type.<br>\nI want to constrain the type that is returned by <code>(ε : (ι → α) → Type*)</code> to be a <code>digraph.edge</code>.</p>\n<p>How is this possible? Am I approaching this all wrong?<br>\nThanks <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 221006708,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609071597
    },
    {
        "content": "<p>I'm not sure it's a good idea, but you can achieve that with <code>structure digraph (ι α : Type*) (ε : (ι → α) → Type*) [∀ f, digraph.edge (ε f) α] :=</code></p>",
        "id": 221006760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609071717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20Type.20Classes/near/221006760\">said</a>:</p>\n<blockquote>\n<p>I'm not sure it's a good idea, but you can achieve that with <code>structure digraph (ι α : Type*) (ε : (ι → α) → Type*) [∀ f, digraph.edge (ε f) α] :=</code></p>\n</blockquote>\n<p>Would that mean that I require that for any instance of underlying nodes (called <code>f</code> here), it has to be possible to create an instance of type <code>digraph.edge (ε f) α</code>?</p>\n<hr>\n<p>And now if I wanted to use this fact that <code>ε nodes</code> is \"<code>digraph.edge</code>-able\", how would I go about that? E.g. if I wanted to define the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">digraph.has_edge_from_to</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">digraph.edge</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">g.edges</span> <span class=\"o\">,</span> <span class=\"n\">e.src</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">e.dst</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span>\n</code></pre></div>\n<p>... then I get errors on the terms <code>e.src</code> and <code>e.dst</code>, because:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n   <span class=\"n\">e</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>\n<p>How would I state this proposition \"there exists and edge in the graph where the <code>src</code> is <code>a</code> and the <code>dst</code> is <code>a'</code>\"?</p>",
        "id": 221006853,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609071908
    },
    {
        "content": "<p>You need to use <code>digraph.edge.src e</code> instead of <code>e.src</code>. <code>e.src</code> works if <code>e</code> has type <code>foo</code> and there is a definition <code>foo.src</code>. In your case, <code>e</code> is an unspecified type, so this does not work.</p>",
        "id": 221008094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609074161
    },
    {
        "content": "<p>What is a digraph mathematically? All I know so far is that <code>ε</code> seems to be being used for two things. One should set it up properly first. Eric saying \"this is probably a bad idea but here's a way to do it\" doesn't strike me as being the best foundations for making a new type.</p>",
        "id": 221008096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609074162
    },
    {
        "content": "<p>Worth also mentioning there is a <a class=\"stream\" data-stream-id=\"252551\" href=\"/#narrow/stream/252551-graph-theory\">#graph theory</a> stream</p>",
        "id": 221008122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609074226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20Type.20Classes/near/221006853\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20Type.20Classes/near/221006760\">said</a>:</p>\n<blockquote>\n<p>I'm not sure it's a good idea, but you can achieve that with <code>structure digraph (ι α : Type*) (ε : (ι → α) → Type*) [∀ f, digraph.edge (ε f) α] :=</code></p>\n</blockquote>\n<p>Would that mean that I require that for any instance of underlying nodes (called <code>f</code> here), it has to be possible to create an instance of type <code>digraph.edge (ε f) α</code>?</p>\n</blockquote>\n<p>Yes, that's exactly how to read that.</p>",
        "id": 221008176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609074330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20Type.20Classes/near/221008094\">said</a>:</p>\n<blockquote>\n<p>You need to use <code>digraph.edge.src e</code> instead of <code>e.src</code>. <code>e.src</code> works if <code>e</code> has type <code>foo</code> and there is a definition <code>foo.src</code>. In your case, <code>e</code> is an unspecified type, so this does not work.</p>\n</blockquote>\n<p>Thanks that works :)<br>\nHow is it that one can just write <code>digraph.edge.src e</code> without needing to specify <code>digraph.edge</code>'s <code>ε</code> and <code>α </code> explicitly?</p>",
        "id": 221009034,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609076065
    },
    {
        "content": "<p><code>α </code> is deduced from the <code>a</code> on the RHS of <code>=</code> in your theorem, while <code>ε</code> is deduced from the argument <code>e</code></p>",
        "id": 221009052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609076138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20Type.20Classes/near/221008096\">said</a>:</p>\n<blockquote>\n<p>What is a digraph mathematically? All I know so far is that <code>ε</code> seems to be being used for two things. One should set it up properly first. Eric saying \"this is probably a bad idea but here's a way to do it\" doesn't strike me as being the best foundations for making a new type.</p>\n</blockquote>\n<p>Yes exactly, <code>ε</code> is being used for multiple things here. The reason (in my specific use case) is that I need to be able to attach some additional information to the edges, so I can't just have them be of type <code>α × α</code>. And the type of information that I can attach needs to be flexible. That's why I tried to define <code>digraph</code> in a way that allows the user to specify an own edge-type (with the constraint that it still needs to have a <code>src</code> and <code>dst</code>).<br>\nI'm not sure if this is approach is perhaps too computer science-ish (because that is my background) and doesn't fare well in the realm of mathematical definitions.</p>",
        "id": 221009207,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609076450
    },
    {
        "content": "<p>In your specific use case, can there be multiple edges between nodes A and B with distinct values of \"additional information\"?</p>",
        "id": 221009324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609076688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Understanding.20Type.20Classes/near/221009324\">said</a>:</p>\n<blockquote>\n<p>In your specific use case, can there be multiple edges between nodes A and B with distinct values of \"additional information\"?</p>\n</blockquote>\n<p>Yes, precisely.</p>",
        "id": 221009330,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609076718
    },
    {
        "content": "<p>I think a more typical formulation would be <code>α × α → set your_extra_data</code>, but I understand why you're trying the approach you are</p>",
        "id": 221009376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609076814
    }
]