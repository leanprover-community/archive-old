[
    {
        "content": "<p>I get the following error that I do not quite understand:</p>\n<p>Code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">id_prod_maps</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">sieve</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Œ†</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">X</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">op</span>\n</pre></div>\n\n\n<p>Error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">has_hom</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">f</span><span class=\"o\">))</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">Y</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>I dont quite understand this error, terms of type <code> F.obj (op.{u+1} X) ‚ü∂ F.obj (op.{u+1} (k.Y)) </code> is exactly what I want my function to return! Or is this error F.map complaining?</p>",
        "id": 182348851,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1575296092
    },
    {
        "content": "<p>I should note that F.map is defined as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">v‚ÇÇ</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">obj</span>       <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map</span>       <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">((</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">map_id&#39;</span>   <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_comp&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"err\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>And considering the type in the error, <code> F.obj (op.{u+1} X) ‚ü∂ F.obj (op.{u+1} (k.Y)) </code> it seems (to me) that functor.map does indeed return what it is supposed to</p>",
        "id": 182349074,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1575296235
    },
    {
        "content": "<p>Lean complains <code>F.map k.f.op</code> is a function instead of being a type.</p>",
        "id": 182349173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575296290
    },
    {
        "content": "<p>What is the type you hope <code>id_prod_maps (X : C) (S : sieve X)</code> will have?</p>",
        "id": 182349209,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575296323
    },
    {
        "content": "<p>Maybe you wrote Pi where you wanted lambda</p>",
        "id": 182349237,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575296353
    },
    {
        "content": "<p>Yes, that seems to be the problem. Thank you!</p>",
        "id": 182349282,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1575296385
    },
    {
        "content": "<p>It's hard to tell without knowing what is the maths you want to formalize.</p>",
        "id": 182349294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575296392
    },
    {
        "content": "<p>Ok, good.</p>",
        "id": 182349355,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575296411
    },
    {
        "content": "<p>Pi makes the types and lambda makes the terms</p>",
        "id": 182349359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575296413
    },
    {
        "content": "<p>So Pi returns types? I thought it returned a term of a type that depends on input</p>",
        "id": 182349384,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1575296449
    },
    {
        "content": "<p>Pi is definitely a type maker.</p>",
        "id": 182349412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575296471
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">Y</span> <span class=\"c1\">-- X ‚Üí Y : Type</span>\n</pre></div>",
        "id": 182349449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575296497
    },
    {
        "content": "<blockquote>\n<p>I thought it returned a term of a type that depends on input</p>\n</blockquote>\n<p>That's what elements of Pi types do</p>",
        "id": 182349486,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1575296522
    },
    {
        "content": "<p>Pi is like \"forall\".</p>",
        "id": 182349546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575296547
    },
    {
        "content": "<p>and lambda gives you the proof of \"forall ...\"</p>",
        "id": 182349601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575296582
    }
]