[
    {
        "content": "<p>I'm trying to PR the following lemmas: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">ring_equiv.subsemiring_equiv_map</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃+*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">subsemiring</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R.map</span> <span class=\"n\">e.to_ring_hom</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">e.to_add_equiv.add_submonoid_equiv_map</span> <span class=\"n\">R.to_add_submonoid</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">e.to_mul_equiv.submonoid_equiv_map</span> <span class=\"n\">R.to_submonoid</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ring_equiv.subring_equiv_map</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃+*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R.map</span> <span class=\"n\">e.to_ring_hom</span> <span class=\"o\">:=</span>\n<span class=\"n\">e.subsemiring_equiv_map</span> <span class=\"n\">R.to_subsemiring</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">alg_equiv.subalgebra_equiv_map</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">S</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S.map</span> <span class=\"n\">e.to_alg_hom</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"bp\">..</span><span class=\"n\">e.to_ring_equiv.subsemiring_equiv_map</span> <span class=\"n\">S.to_subsemiring</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">alg_equiv.intermediate_field_equiv_map</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E.map</span> <span class=\"n\">e.to_alg_hom</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">e.subalgebra_equiv_map</span> <span class=\"n\">E.to_subalgebra</span>\n</code></pre></div>\n<p>I got a clean copy of mathlib with <code>leanproject get mathlib</code>, and pasted the first lemma into <code>ring_theory.subsemiring.basic.lean</code>, removing <code>ring_equiv</code> from the name since I put it in the <code>ring_equiv</code> namespace. This worked fine and <code>ring_theory.subsemiring.basic.lean</code> still compiled. Without changing anything else, I then opened <code>field_theory.intermediate_field.lean</code>, and Lean immediately crashed with lots of errors of the <code>excessive memory consumption detected at </code> variety. </p>\n<p>I've done this a few times with clean copies of mathlib, and the same thing happens every time. Does anyone have any idea what's going on?</p>",
        "id": 266512712,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640968603
    },
    {
        "content": "<p>Try getting cached <code>olean</code> files with <code>leanproject get-cache</code> inside the mathlib directory. Building everything on your machine is very likely to consume all the memory you have available and still fail because you didn't have enough</p>",
        "id": 266512797,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640968693
    },
    {
        "content": "<p>yeah, i'd just push to CI and see where it fails. otherwise you can build locally but outside vscode with <code>leanproject build</code>, or you can increase your memory threshold in VSCode (although this is a bandaid)</p>",
        "id": 266512903,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640968837
    },
    {
        "content": "<p><code>leanproject get-cache</code> doesn't seem to help. Is this a normal error? Alright, I'll just try making a PR anyway and hope for the best</p>",
        "id": 266513528,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640969736
    },
    {
        "content": "<p>If you edit a file near the root of the heirarchy then Lean can become unusable very quickly, because any olean files which you have lying around which depend in some way on this file are instantly irrelevant and all need to be recompiled. So the trick is to add the lemmas from the leaves up, although hmm that's not going to work in your case because each one needs the ones before!</p>",
        "id": 266513602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640969852
    },
    {
        "content": "<p>If you're editing a file near the root of the hierarchy, then make sure you don't have other (higher) files open because that would most likely trigger the recompilation Kevin mentioned</p>",
        "id": 266513784,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640970019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"460212\">@Sebastian Monnet</span> I'll teach you advanced <code>leanproject</code> magic so that you can see how gentle you are with your CPU: </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>leanproject import-graph --from ring_theory.subsemiring.basic --to field_theory.intermediate_field gra.pdf\n</code></pre></div>",
        "id": 266513918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640970184
    },
    {
        "content": "<p>The result is <a href=\"/user_uploads/3121/QS6fQq6cG_oQ94OuMSksCsUg/gra.pdf\">gra.pdf</a></p>",
        "id": 266513924,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640970198
    },
    {
        "content": "<p>That's everything Lean needs to compile when you access <code>field_theory.intermediate_field</code> after modifying <code>ring_theory.subsemiring.basic</code></p>",
        "id": 266513942,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640970239
    },
    {
        "content": "<p>I was in a similar situation just yesterday because I added three lemmas <a href=\"https://github.com/leanprover-community/mathlib/blob/3756caa18362e6610a4ac13c7474fa97343d8510/src/data/fintype/basic.lean#L145-L151\">here</a> (and modified one slightly).</p>\n<p>My computer could handle it if I didn't open any other lean file, but then I wasn't able to see the impact of my changes on other files I was working on. So I ended up just pushing it and watching what the CI tests said <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 266514089,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640970404
    },
    {
        "content": "<p>And <code>leanproject get-cache</code> isn't doing magic, it's trying to fetch some compiled file that have been compiled elsewhere, by someone else's CPU. It doesn't instantly compile your stuff on your machine. You can indeed use it, but it won't save time. You can commit your change to the first file in some new git branch, push the branch to the mathlib repo (the official one, not a fork) and then wait for some other machine to compile. Then you'll be able to get the cache.</p>",
        "id": 266514091,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640970408
    },
    {
        "content": "<p>You can also call lean with the \"--old\" flag to help in these situations, though it does come with some caveats.<br>\nYou can enable it by opening the vscode settings and searching for \"Lean: extra options\" then add the flag \"--old\".<br>\nThis causes lean not to recompile oleans for unedited files and just assume everything worked, so in this situation it is helpful to avoid recompilation, but you do then run the risk that your change broke /changed the meaning of some file inbetween. Thus it most applicable when you are adding a new lemma/def early in the hierarchy that you are sure won't break things in between, rather than changing existing defs.<br>\nI normally run lean with this flag enabled and then disable it if I start getting weird error messages I don't understand.<br>\nIndeed I just checked and it is possible to \"prove false\" running lean with the old flag on, so really you should use with care.</p>",
        "id": 266516383,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640973725
    }
]