[
    {
        "content": "<p>How do I make Lean compute 5/2 = 2.5?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>  <span class=\"c1\">-- Lean says this is 2 because of integer division</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>  <span class=\"c1\">-- still 2.</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>  <span class=\"c1\">-- Lean says this is 5/2 because of rational division</span>\n</pre></div>",
        "id": 193505590,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1586464345
    },
    {
        "content": "<p>What's your definition of 2.5? Lean's job is not really to compute.</p>",
        "id": 193506176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586464662
    },
    {
        "content": "<p>What is the type of <code>2.5</code>?</p>",
        "id": 193506188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586464672
    },
    {
        "content": "<p>\"Floating point\"? Whatever that means.</p>",
        "id": 193506391,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1586464781
    },
    {
        "content": "<p>I was just expecting that there is an inbuilt floating point type. Just like <code>int</code> is the inbuilt integer type.</p>",
        "id": 193506496,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1586464822
    },
    {
        "content": "<p>You understand that <code>int</code> is nothing like a C integer, right?</p>",
        "id": 193506529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586464841
    },
    {
        "content": "<p>There are some things in <code>data.fp.basic</code> but its not used particularly much, so I doubt it is advanced as  you'd like!</p>",
        "id": 193506591,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586464881
    },
    {
        "content": "<p>Can you precisely define which type you are talking about? Because if not then your question is meaningless.</p>",
        "id": 193506602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586464886
    },
    {
        "content": "<p>There's a builtin <code>native.float</code>, but it's a meta type implemented in C++. (This is likely not what you're looking for.)</p>",
        "id": 193506737,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586464957
    },
    {
        "content": "<p>My point is simply that there are many answers to the question \"what does 2.5 mean\" and if we don't know precisely what we're talking about then the question is ill-formed.</p>",
        "id": 193506791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586464988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193506529\" title=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193506529\">said</a>:</p>\n<blockquote>\n<p>You understand that <code>int</code> is nothing like a C integer, right?</p>\n</blockquote>\n<p>No! So far I was under the impression that <code>int</code> is like C (CS) integer and <code>nat</code> more like Peano (math) numbers.<br>\nSo I was expecting a similar kind of analogue for <code>floating point</code> and <code>real</code>.</p>",
        "id": 193506819,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1586465015
    },
    {
        "content": "<p>Lean knows exactly what 2.5 means. It means 5/2 :)</p>",
        "id": 193506830,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586465023
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fp</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">my_cfg</span> <span class=\"o\">:</span> <span class=\"n\">fp</span><span class=\"bp\">.</span><span class=\"n\">float_cfg</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">prec</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">emax</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">prec_pos</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">prec_max</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">fp</span><span class=\"bp\">.</span><span class=\"n\">of_rat_dn</span> <span class=\"n\">my_cfg</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"c1\">--(#2 #0 #2147483646 #1)</span>\n</pre></div>",
        "id": 193506915,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586465065
    },
    {
        "content": "<p><code>int</code> is just like <code>nat</code>, it's arbitrary precision and designed for proving, not computing.</p>",
        "id": 193506916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586465067
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.real.basic\n\nnoncomputable def x : ℝ := 2.5\n</pre></div>\n\n\n<p>There's a 2.5, but you're going to have real trouble computing with it ;-)</p>",
        "id": 193506949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586465098
    },
    {
        "content": "<p><code>nat</code> is Peano math naturals, i.e. naturals defined by axioms, <code>int</code> is integers defined by axioms, <code>rat</code> is rationals defined by axioms, <code>real</code> is reals defined by axioms. The last one involves a noncomputable construction so <code>#eval</code> and <code>#reduce</code> are unlikely to be able to do anything.</p>",
        "id": 193507102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586465191
    },
    {
        "content": "<p>Okay. All these answers make sense to me now.</p>\n<p>Having said that, should Lean have the ability to do floating point calculations for the sake of it? I can do it in Haskell and Python. So I want to do it in Lean too.</p>",
        "id": 193507130,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1586465215
    },
    {
        "content": "<p>Lean is not designed for computing.</p>",
        "id": 193507153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586465227
    },
    {
        "content": "<p>Then should we call it a programming language?</p>",
        "id": 193507176,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1586465242
    },
    {
        "content": "<p>You can do all the fp calculations you want(*) with <code>native.float</code>.</p>",
        "id": 193507178,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586465246
    },
    {
        "content": "<p>You just can't prove anything about them.</p>",
        "id": 193507180,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586465251
    },
    {
        "content": "<p>The reals are intrinsically noncomputable.</p>",
        "id": 193507192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586465257
    },
    {
        "content": "<p>You could say Lean is designed for computing proofs</p>",
        "id": 193507257,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586465287
    },
    {
        "content": "<p>you can prove lots of things  with them but can't compute anything. You can do this though:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</pre></div>\n\n\n<p>but I didn't compute anything there, I proved a theorem.</p>",
        "id": 193507258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586465287
    },
    {
        "content": "<p>You _can_ program with lean, but the types you use to do so are (often) different to those you prove things about.</p>",
        "id": 193507279,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586465304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193507178\" title=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193507178\">said</a>:</p>\n<blockquote>\n<p>You can do all the fp calculations you want(*) with <code>native.float</code>.</p>\n</blockquote>\n<p>Got it! I think that is what I wanted. I want the choice to compute. I understand proving things about floating points would be worthless <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193507283,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1586465305
    },
    {
        "content": "<p>It's certainly not worthless, just hard!</p>",
        "id": 193507348,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586465347
    },
    {
        "content": "<p>Stuff like associativity is true for <code>ℝ</code> but is false for <code>native.float</code> :-)</p>",
        "id": 193507351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586465348
    },
    {
        "content": "<p><a href=\"https://www.lri.fr/~sboldo/\" title=\"https://www.lri.fr/~sboldo/\">Sylvie Boldo</a> and others have done a lot of work in Coq on this.</p>",
        "id": 193507538,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586465418
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">buzzard</span><span class=\"nd\">@bob</span><span class=\"p\">:</span><span class=\"o\">~</span><span class=\"err\">$</span> <span class=\"n\">python</span>\n<span class=\"n\">Python</span> <span class=\"mf\">2.7</span><span class=\"o\">.</span><span class=\"mi\">17</span> <span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"n\">Nov</span>  <span class=\"mi\">7</span> <span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mo\">07</span><span class=\"p\">:</span><span class=\"mi\">09</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">GCC</span> <span class=\"mf\">7.4</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"n\">on</span> <span class=\"n\">linux2</span>\n<span class=\"n\">Type</span> <span class=\"s2\">&quot;help&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;copyright&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;credits&quot;</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;license&quot;</span> <span class=\"k\">for</span> <span class=\"n\">more</span> <span class=\"n\">information</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">N</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">10.0</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">20</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">e</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">10.0</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">M</span><span class=\"o\">=-</span><span class=\"n\">N</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">M</span><span class=\"o\">+</span><span class=\"n\">N</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">e</span><span class=\"o\">==</span><span class=\"n\">M</span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">+</span><span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"bp\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre></div>",
        "id": 193507646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586465491
    },
    {
        "content": "<p>I remember reading something about a property weaker than associativity that floating point does have</p>",
        "id": 193507795,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586465562
    },
    {
        "content": "<p>non-associativity</p>",
        "id": 193507825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586465576
    },
    {
        "content": "<p>I think addition and multiplication are commutative, ignoring NaNs for a moment.</p>",
        "id": 193507897,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586465617
    },
    {
        "content": "<p>You can check this with <code>dec_trivial</code></p>",
        "id": 193507919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586465636
    },
    {
        "content": "<p>stackexchange seems to suggest that even <code>a + b == a + b</code> is not 100% guaranteed</p>",
        "id": 193508034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586465700
    },
    {
        "content": "<p>Maybe there's some property weaker than equality that floating point does have</p>",
        "id": 193508062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586465718
    },
    {
        "content": "<p><code>a + b == a + b</code> can be false if a or b are NaN</p>",
        "id": 193508116,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586465752
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&gt;&gt;&gt; 100*(0.1+0.2)==100*0.1+100*0.2\nFalse\n</pre></div>\n\n\n<p>rofl it's not even a <code>distrib</code>. How you guys can work with this object is beyond me.</p>",
        "id": 193508212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586465792
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">100</span><span class=\"o\">*</span><span class=\"mf\">0.1</span><span class=\"o\">+</span><span class=\"mi\">100</span><span class=\"o\">*</span><span class=\"mf\">0.2</span>\n<span class=\"mf\">30.0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">100</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"o\">+</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n<span class=\"mf\">30.000000000000004</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre></div>",
        "id": 193508250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586465822
    },
    {
        "content": "<p>It's good for things that don't need exact results. Definitely not a good fit for a theorem prover though</p>",
        "id": 193508273,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586465842
    },
    {
        "content": "<p>lean4 has a float type: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/Float.lean\" title=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/Float.lean\">https://github.com/leanprover/lean4/blob/master/src/Init/Data/Float.lean</a></p>",
        "id": 193508318,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586465879
    },
    {
        "content": "<p>I just wish I'd remember what the property/equality I saw before was</p>",
        "id": 193508363,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586465888
    },
    {
        "content": "<p>It's very interesting to verify error bounds in fp computations though.</p>",
        "id": 193508412,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586465922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284527\">Filip Szczepański</span> <a href=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193508363\" title=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193508363\">said</a>:</p>\n<blockquote>\n<p>I just wish I'd remember what the property/equality I saw before was</p>\n</blockquote>\n<p>Hopefully it is <a href=\"https://en.wikipedia.org/wiki/Power_associativity\" title=\"https://en.wikipedia.org/wiki/Power_associativity\">https://en.wikipedia.org/wiki/Power_associativity</a> at least</p>",
        "id": 193508536,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586465991
    },
    {
        "content": "<p>I haven't checked, but I'd actually bet that floating point isn't power associative</p>",
        "id": 193508638,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586466032
    },
    {
        "content": "<p>Yeah, it isn't.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">pi</span>\n<span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>This returns false</p>",
        "id": 193508891,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586466170
    },
    {
        "content": "<p>Yeah, \"in which order should I sum numbers\" is like numerics 101.</p>",
        "id": 193508952,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586466204
    },
    {
        "content": "<p>Add them forwards and then backwards, and average the results. I mean it was good enough for Gauss</p>",
        "id": 193510122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586466863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193508318\" title=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193508318\">said</a>:</p>\n<blockquote>\n<p>lean4 has a float type: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/Float.lean\" title=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/Float.lean\">https://github.com/leanprover/lean4/blob/master/src/Init/Data/Float.lean</a></p>\n</blockquote>\n<p>Looks interesting. But still looks like it is meant for proving theorems, not for pure number crunching.</p>",
        "id": 193510234,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1586466945
    },
    {
        "content": "<p>Quite the opposite. I think that's roughly equivalent to <code>native.float</code> in Lean 3. It's just exposing C++ floats.</p>",
        "id": 193510339,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586467000
    },
    {
        "content": "<p>(i should probably read the topics i reply to so i don't constantly repeat things other people just said <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)</p>",
        "id": 193511417,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586467604
    },
    {
        "content": "<p>I guess all those lean constants in that code just mean \"Lean doesn't actually know anything about this function\" and then the extern tags must mean \"...but if you want me to evaluate it in some way then I'll use this C++ function\"</p>",
        "id": 193515772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586470127
    },
    {
        "content": "<p>I know this is a very naive question, but can one guarantee that these external function calls will always return the same answer? They don't depend on some other parameters which might change depending on what you're doing?</p>",
        "id": 193515955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586470237
    },
    {
        "content": "<p>Oh -- judging by the commit message these are C floats not C++ floats</p>",
        "id": 193516006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586470270
    },
    {
        "content": "<p>So how will that code work? Will I be able to do <code>#eval Float.sin (3.141)</code>?</p>",
        "id": 193516174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586470397
    },
    {
        "content": "<p>there seems to be a small test file here:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/tests/compiler/float.lean\" title=\"https://github.com/leanprover/lean4/blob/master/tests/compiler/float.lean\">https://github.com/leanprover/lean4/blob/master/tests/compiler/float.lean</a></p>",
        "id": 193517213,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586471108
    },
    {
        "content": "<p>That file was last edited with a commit which removed decidable equality. Could this be because if you use C &lt; to decide &lt; and C = to decide = then you can deduce a contradiction?</p>",
        "id": 193517553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586471321
    },
    {
        "content": "<p>my guess is that it's because float equality is really badly behaved. after all, nan is not equal to nan</p>",
        "id": 193517774,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586471456
    },
    {
        "content": "<p>ah yes, the commit message confirms it: <a href=\"https://github.com/leanprover/lean4/commit/705530b62bc23b47c0ba9baa8e199ab376b8fd7b\" title=\"https://github.com/leanprover/lean4/commit/705530b62bc23b47c0ba9baa8e199ab376b8fd7b\">https://github.com/leanprover/lean4/commit/705530b62bc23b47c0ba9baa8e199ab376b8fd7b</a></p>",
        "id": 193518133,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586471704
    },
    {
        "content": "<p>do we know what <code>beq</code> is supposed to mean?</p>",
        "id": 193518466,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586471938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193518466\" title=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193518466\">said</a>:</p>\n<blockquote>\n<p>do we know what <code>beq</code> is supposed to mean?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/blob/360cebf68002c0c56902cefe658401851e64b59e/src/Init/Core.lean#L346\" title=\"https://github.com/leanprover/lean4/blob/360cebf68002c0c56902cefe658401851e64b59e/src/Init/Core.lean#L346\">https://github.com/leanprover/lean4/blob/360cebf68002c0c56902cefe658401851e64b59e/src/Init/Core.lean#L346</a></p>",
        "id": 193518717,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586472116
    },
    {
        "content": "<p>Ah okay, I guess <code>b</code> means <code>bool</code> here too then (like in <code>band</code> etc.)</p>",
        "id": 193519220,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586472439
    },
    {
        "content": "<p>Ha ha you computer scientists shouldn't be allowed to use the sacred terms + and = on your silly floats</p>",
        "id": 193520173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586473149
    },
    {
        "content": "<p>You should choose your favourite emojis and use those instead to remind us all about what you're really doing with your code</p>",
        "id": 193520208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586473184
    },
    {
        "content": "<p>You should switch to the p-adic numbers, the error bounds are far better behaved</p>",
        "id": 193520328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586473236
    },
    {
        "content": "<p>That is one of the funniest commit messages I've ever seen</p>",
        "id": 193520407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586473304
    },
    {
        "content": "<p>You should just let NaN be zero like in Lean. It works fine!</p>",
        "id": 193521427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586473927
    },
    {
        "content": "<p>0/0 = 0 in Lean?</p>",
        "id": 193521503,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586473980
    },
    {
        "content": "<p>Sure</p>",
        "id": 193521511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586473986
    },
    {
        "content": "<p>Mathematicians took an oath never to divide by zero so the computer scientists just defined it to be something convenient</p>",
        "id": 193521610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586474045
    },
    {
        "content": "<p>Actually for all I know 0/0=37</p>",
        "id": 193521629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586474063
    },
    {
        "content": "<p>All I know is that it's a number</p>",
        "id": 193521639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586474073
    },
    {
        "content": "<p>Because the type of <code>/</code> is a-&gt;a-&gt;a</p>",
        "id": 193521670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586474101
    },
    {
        "content": "<p>Maybe it should be <code>a-&gt;a-&gt;Maybe a</code></p>",
        "id": 193521711,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586474133
    },
    {
        "content": "<p>Or <code>a-&gt;NonZero a-&gt;a</code></p>",
        "id": 193521784,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586474172
    },
    {
        "content": "<p>That would be a nightmare to work with</p>",
        "id": 193521785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586474173
    },
    {
        "content": "<p>Both would</p>",
        "id": 193521795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586474180
    },
    {
        "content": "<p>What we have is the best solution, convenient and simple</p>",
        "id": 193521808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586474198
    },
    {
        "content": "<p>The nonzero assumptions are in the theorems not the definition</p>",
        "id": 193521852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586474231
    },
    {
        "content": "<p>there's that famous javascript WAT talk (<a href=\"https://www.destroyallsoftware.com/talks/wat\" title=\"https://www.destroyallsoftware.com/talks/wat\">https://www.destroyallsoftware.com/talks/wat</a>), i'm sure kevin would be able to hold a talk like this about theorem prover langs</p>",
        "id": 193521865,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586474242
    },
    {
        "content": "<p>How does it avoid contradictions like 0=1?</p>",
        "id": 193522249,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586474542
    },
    {
        "content": "<p>What's an example derivation of <code>0=1</code> that you have in mind?</p>",
        "id": 193522462,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586474696
    },
    {
        "content": "<p>Note that you won't be able to prove anything like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>  <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 193522885,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586475024
    },
    {
        "content": "<p>Right, not with flooring division. I was thinking about rationals</p>",
        "id": 193523127,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586475212
    },
    {
        "content": "<p>The same statement with <code>rat</code> is also unprovable without a <code>c ≠ 0</code> hypothesis.</p>",
        "id": 193523260,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586475313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193521610\" title=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193521610\">said</a>:</p>\n<blockquote>\n<p>Mathematicians took an oath never to divide by zero so the computer scientists just defined it to be something convenient</p>\n</blockquote>\n<p>I think this is one instance where your conflation of \"computer scientists\" and \"non-number theorists\" might be misleading. The actual computer scientists, the ones who write programming languages and computer architectures, have almost universally decreed that x/0 = exception</p>",
        "id": 193526121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586477935
    },
    {
        "content": "<p>however this plays absolute havoc in a theorem prover</p>",
        "id": 193526131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586477949
    },
    {
        "content": "<p>it's even a problem in compilers, where there is abstract semantics of the language and x/y has to be considered a \"side effecting\" operation, which means that <code>x/y + z/w</code> might not have the same behavior as <code>z/w + x/y</code>, that is, they are not extensionally equal as programs</p>",
        "id": 193526263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586478067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193516174\" title=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193516174\">said</a>:</p>\n<blockquote>\n<p>So how will that code work? Will I be able to do <code>#eval Float.sin (3.141)</code>?</p>\n</blockquote>\n<p>I tried it but I got <code>result type does not have an instance of type class 'HasRepr' or 'Lean.HasEval'</code></p>",
        "id": 193531124,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586483175
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasRepr</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">repr</span> <span class=\"o\">:=</span> <span class=\"n\">Float</span><span class=\"bp\">.</span><span class=\"n\">toString</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">Float</span><span class=\"bp\">.</span><span class=\"n\">sin</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">14</span><span class=\"o\">)</span>     <span class=\"c1\">-- 0.001593</span>\n</pre></div>",
        "id": 193531170,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586483267
    },
    {
        "content": "<p>What is <code>HasEval</code>?</p>",
        "id": 193531336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586483483
    },
    {
        "content": "<p>it looks like mainly a convenience thing</p>",
        "id": 193532885,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586485648
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/System/IO.lean#L319\" title=\"https://github.com/leanprover/lean4/blob/master/src/Init/System/IO.lean#L319\">https://github.com/leanprover/lean4/blob/master/src/Init/System/IO.lean#L319</a></p>",
        "id": 193532937,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586485683
    },
    {
        "content": "<p>so that <code>#eval</code> more or less matches the behavior of the ghci repl for example, where you can give it either a plain expression or an IO action</p>",
        "id": 193533145,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586485997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193520328\" title=\"#narrow/stream/113489-new-members/topic/Float.20division.20in.20Lean.3F/near/193520328\">said</a>:</p>\n<blockquote>\n<p>You should switch to the p-adic numbers, the error bounds are far better behaved</p>\n</blockquote>\n<p>We've got a better representation, but IEEE floats are pretty entrenched. I'd bet on posits or some variation becoming the new standard, though. They're already being used in custom FPGA work.</p>",
        "id": 193979087,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586917889
    },
    {
        "content": "<p><a href=\"https://www.johndcook.com/blog/2018/04/11/anatomy-of-a-posit-number/\" title=\"https://www.johndcook.com/blog/2018/04/11/anatomy-of-a-posit-number/\">https://www.johndcook.com/blog/2018/04/11/anatomy-of-a-posit-number/</a></p>",
        "id": 193979095,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586917898
    },
    {
        "content": "<p>well, standard.. maybe... in 30 years. The x86 and IEEE 754 mafia is strong</p>",
        "id": 193979254,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586918147
    },
    {
        "content": "<p>I guess the billions of dollars sunk in existing FPU designs might have something to do with it too.</p>",
        "id": 193979387,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586918384
    },
    {
        "content": "<p>One of the original scientists who specified floating point numbers has a hot take on posits. Spittin' fire! Would recommend reading if you're absolutely bored from staying indoors all day: <a href=\"https://people.eecs.berkeley.edu/~wkahan/EndErErs.pdf\" title=\"https://people.eecs.berkeley.edu/~wkahan/EndErErs.pdf\">https://people.eecs.berkeley.edu/~wkahan/EndErErs.pdf</a></p>",
        "id": 193980888,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586920439
    }
]