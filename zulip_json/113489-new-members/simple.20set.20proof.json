[
    {
        "content": "<p>Hi everyone. </p>\n<p>I'm reading the fantastic <a href=\"https://leanprover.github.io/logic_and_proof/index.html\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/index.html\">\"Logic and Proof\"</a> guide. My first attempt to explore <em>outside</em> the guide was to try prove the simple example pasted below. <br>\nI have two questions: </p>\n<ul>\n<li>\n<p>is there a more efficient way to set up the problem statement? The worded description<br>\n    of the problem is so simple, yet I use an additional 4 propositions in Lean.</p>\n</li>\n<li>\n<p>how to replace the single 'sorry'? </p>\n</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"c1\">-- unused, but I think I need it to replace the &#39;sorry&#39; below.</span>\n\n<span class=\"c1\">-- Problem Statement</span>\n<span class=\"c1\">-- Let a, b, c, d be objects such that {a, b} = {c, d}. Show that at least one</span>\n<span class=\"c1\">-- of the two statements &quot;a = c and b = d&quot; and &quot;a = d and b = c&quot; hold.</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variable</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"c1\">-- There are 4 objects: a, b, c and d.</span>\n<span class=\"kn\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">U</span>\n<span class=\"c1\">-- There are two sets.</span>\n<span class=\"c1\">--   s₁ = {a, b}</span>\n<span class=\"c1\">--   s₂ = {c, d}</span>\n<span class=\"c1\">-- This seems to require 2 variables and 4 hypotheses. Is there a better way of</span>\n<span class=\"c1\">-- constructing the sets?</span>\n<span class=\"kn\">variables</span> <span class=\"n\">s₁</span>  <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"c1\">-- 1. a and b are in s₁.</span>\n<span class=\"c1\">-- 2. c and d are in s₂.</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s₁</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">s₂</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"n\">s₂</span><span class=\"o\">)</span>\n<span class=\"c1\">-- 3. Nothing other than a and b are in s₁.</span>\n<span class=\"c1\">-- 4. Nothing other than c and d are in s₂.</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Proof outline:</span>\n<span class=\"c1\">-- a = c or a = d</span>\n<span class=\"c1\">-- case 1: if a = c, we have b = d</span>\n<span class=\"c1\">-- case 2: if a = d, we have b = c</span>\n<span class=\"c1\">-- Thus, (a = c ∧ b = d) ∨ (a = d ∧ b = c).</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"c1\">-- 1. Somehow use s₁ = s₂ to get h6. Can I use the reverse of set.ext somehow?</span>\n    <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s₁</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- using h5</span>\n    <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"o\">(</span><span class=\"n\">h6</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"o\">(</span><span class=\"n\">h6</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h7</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">‹</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s₂</span><span class=\"err\">›</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h8</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">‹</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s₂</span><span class=\"err\">›</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n        <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h7</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n         <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h8</span>\n            <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n             <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">‹</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"err\">›</span><span class=\"o\">),</span>\n             <span class=\"k\">have</span> <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">elim_right</span> <span class=\"o\">(</span><span class=\"n\">h6</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n             <span class=\"k\">have</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n             <span class=\"k\">have</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">this</span>\n                <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"err\">‹</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"err\">›</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n             <span class=\"k\">show</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">‹</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"err\">›</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">‹</span><span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"err\">›</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n         <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"err\">‹</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"err\">›</span> <span class=\"err\">‹</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"err\">›</span><span class=\"o\">,</span>\n         <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n        <span class=\"c1\">-- A bit of duplication follows. A theorem might be a good fit to remove</span>\n        <span class=\"c1\">-- the duplication.</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n         <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h8</span>\n            <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n             <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">‹</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"err\">›</span><span class=\"o\">),</span>\n             <span class=\"k\">have</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">elim_right</span> <span class=\"o\">(</span><span class=\"n\">h6</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n             <span class=\"k\">have</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n             <span class=\"k\">show</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">this</span>\n                <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n                 <span class=\"k\">show</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">‹</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"err\">›</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">this</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n            <span class=\"o\">),</span>\n         <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span>  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"err\">‹</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"err\">›</span> <span class=\"err\">‹</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"err\">›</span><span class=\"o\">,</span>\n         <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I'm excited to join this community!</p>",
        "id": 183896800,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1576799311
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 183897186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576799690
    },
    {
        "content": "<p>Course, this breaks everything ;-)</p>",
        "id": 183897244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576799751
    },
    {
        "content": "<p>Thanks for the speedy reply, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>! Using that notation, what propositions become available? Is there docs/source on that syntax?</p>",
        "id": 183897463,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1576799915
    },
    {
        "content": "<p>erm, does Theorem Proving In Lean talk about it?</p>",
        "id": 183897491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576799949
    },
    {
        "content": "<p>Sticking with what you did, <code>have h6 : ∀ x, x ∈ s₁ ↔ x ∈ s₂, by intros; rw h5,</code></p>",
        "id": 183897608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576800015
    },
    {
        "content": "<p>I don't know how many theorems there are about sets with two elements in the library! Here's a place to look: <a href=\"https://leanprover-community.github.io/mathlib_docs/data/set/basic.html\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/data/set/basic.html\">https://leanprover-community.github.io/mathlib_docs/data/set/basic.html</a></p>",
        "id": 183897729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576800123
    },
    {
        "content": "<p><code>by</code> puts you into tactic mode (like <code>begin ... end</code>) and <code>rw</code> is a tactic which is hard to emulate in term mode (the mode you're writing in).</p>",
        "id": 183897804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576800206
    },
    {
        "content": "<p>I can't find <code>example (a b x : U) : x ∈ ({a, b} : set U) ↔ x = a ∨ x = b </code> in mathlib :-/</p>",
        "id": 183897937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576800346
    },
    {
        "content": "<p>Regarding the syntax:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">s₁</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I did a search for 'set' on the \"Theorem Proving in Lean\" guide, but I didn't recognize anything related to that syntax. But quite likely I might need some more background knowledge before I can make that call. </p>\n<p>I checked out the mathlib docs on set/basic. It looked like I could use <code>set.ext_iff</code>, but the IDE reports unknown identifier for <code>set.ext_iff</code>.</p>",
        "id": 183898124,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1576800513
    },
    {
        "content": "<p>Did you import <code>data.set.basic</code> or <code>data.set</code>?</p>",
        "id": 183898157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576800574
    },
    {
        "content": "<p>Just <code>data.set</code>, and tried referencing<code>ext_iff</code>with <code>set.basic.ext_iff</code> and <code>set.ext_iff</code>.<br>\nShould it be <code>import data.set.basic</code>?</p>",
        "id": 183898338,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1576800731
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_doubleton_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">}</span> <span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>I'm sure there will be a much better proof of that.</p>",
        "id": 183898347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576800746
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span> <span class=\"c1\">-- set.ext_iff : ∀ (s t : set ?M_1), s = t ↔ ∀ (x : ?M_1), x ∈ s ↔ x ∈ t</span>\n</pre></div>\n\n\n<p>Is your mathlib over a year old? That might also explain it</p>",
        "id": 183898394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576800801
    },
    {
        "content": "<p>I remember the definition of <code>{a, b}</code> is this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>and so</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">or_false</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 183898418,
        "sender_full_name": "Joe",
        "timestamp": 1576800839
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_doubleton_iff</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">comm</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 183898447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1576800843
    },
    {
        "content": "<p>Just using the live env <code>https://leanprover.github.io/live/3.4.1</code></p>",
        "id": 183898458,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1576800844
    },
    {
        "content": "<p>eew your mathlib is very old, use the more modern live env</p>",
        "id": 183898479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576800873
    },
    {
        "content": "<p>Try a challenge here: <a href=\"https://github.com/kbuzzard/xena/blob/master/Maths_Challenges/challenges.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/Maths_Challenges/challenges.md\">https://github.com/kbuzzard/xena/blob/master/Maths_Challenges/challenges.md</a> . That'll take you to a modern mathlib</p>",
        "id": 183898519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576800921
    },
    {
        "content": "<p>Then delete the challenge and bookmark ;-)</p>",
        "id": 183898527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576800943
    },
    {
        "content": "<p>Okay! That explains a lot. I thought there was some special syntax to use <code>ext_iff</code> from <code>ext</code>, but it's just an old version!</p>",
        "id": 183898530,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1576800948
    },
    {
        "content": "<p>One final question: if I see some other unknown syntax, like the set notation <code>{a , b}</code>, is there a method of searching Lean code or mathlib for the definition?</p>",
        "id": 183898636,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1576801045
    },
    {
        "content": "<p>If you see some unknown notation, then you can search for it with <code>#print notation</code>. This does not work with the following very small amount of Lean inbuilt syntax: </p>\n<div class=\"codehilite\"><pre><span></span>[a, b]\n{a, b, c}\n∀\n∃\n</pre></div>\n\n\n<p>and the ones I've forgotten</p>",
        "id": 183898740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576801142
    },
    {
        "content": "<p>okay, noted. Thanks a million!</p>",
        "id": 183898824,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1576801206
    },
    {
        "content": "<p>Most of the time Lean is very good at being able to tell you absolutely everything about an object which you can't understand. But there are just a few edge cases which you have to know.</p>",
        "id": 183898834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576801216
    },
    {
        "content": "<p>This might change in Lean 4.</p>",
        "id": 183898842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576801234
    },
    {
        "content": "<p>Or you can shut down notations entirely and see what they really are</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- iff (has_mem.mem x (has_insert.insert b (singleton a))) (or (eq x b) (or (eq x a) false))</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 183898979,
        "sender_full_name": "Joe",
        "timestamp": 1576801364
    },
    {
        "content": "<p>So <code>{a, b}</code> is <code>has_insert.insert b (singleton a)</code> (<code>set.insert b (singleton a)</code>).</p>",
        "id": 183899046,
        "sender_full_name": "Joe",
        "timestamp": 1576801439
    },
    {
        "content": "<p>oh wow I thought that this would just give you junk.</p>",
        "id": 183899123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576801494
    },
    {
        "content": "<p>That trick works for <code>∃</code> too, but not for <code>∀</code></p>",
        "id": 183899216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576801581
    }
]