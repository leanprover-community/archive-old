[
    {
        "content": "<p>How do I turn</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">w'</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">∧</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w'</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">w'</span>\n</code></pre></div>\n<p>into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">V</span>\n<span class=\"n\">w'</span><span class=\"o\">:</span> <span class=\"n\">V</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">∧</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w'</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">w'</span>\n</code></pre></div>\n<p>?</p>",
        "id": 260593351,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636316087
    },
    {
        "content": "<p>You can't unless you happen to have two vertices <code>w</code> and <code>w'</code> on hand.  If you do have them, you could do <code>specialize h w w'</code>.</p>",
        "id": 260593374,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636316143
    },
    {
        "content": "<p>If h is a hypothesis you can't do this, for instance if <code>V</code> was <code>false</code> you'd be able to turn <code>false -&gt; true</code> into a proof of false.</p>",
        "id": 260593427,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636316177
    },
    {
        "content": "<p>Can I use <code>hu: rel.dom M.adj = set.univ</code> to make this possible?</p>",
        "id": 260593586,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636316468
    },
    {
        "content": "<p>Can you share a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 260593804,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1636316819
    },
    {
        "content": "<p>Sure</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.subgraph</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">simple_graph</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">subgraph</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_matching</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">w'</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">∧</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w'</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">w'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_perfect</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">is_matching</span> <span class=\"n\">M</span> <span class=\"bp\">∧</span> <span class=\"n\">M.support</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_perfect_iff</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_perfect</span> <span class=\"n\">M</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_matching</span><span class=\"o\">,</span> <span class=\"n\">is_perfect</span><span class=\"o\">,</span> <span class=\"n\">subgraph.support</span><span class=\"o\">,</span> <span class=\"n\">exists_unique</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">w'</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hv</span> <span class=\"k\">with</span> <span class=\"n\">hw</span> <span class=\"n\">hw'</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hxw</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hxw'</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span> <span class=\"n\">w'</span> <span class=\"n\">hw'</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hxw</span><span class=\"o\">,</span> <span class=\"n\">hxw'</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">simple_graph</span>\n</code></pre></div>\n<p>I'm trying to clear that first <code>sorry</code></p>",
        "id": 260593969,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636317044
    },
    {
        "content": "<p>Both <code>h</code> and <code>hu</code> that I mentioned will be available after the line <code>specialize h v,</code> (right before <code>sorry</code>)</p>",
        "id": 260594062,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636317221
    },
    {
        "content": "<p>Did you define <code>subgraph.support</code>?</p>",
        "id": 260594850,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636318187
    },
    {
        "content": "<p>I'm guessing it's this (for <code>M : G.subgraph</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subgraph.support</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">rel.dom</span> <span class=\"n\">M.adj</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subgraph.mem_support</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">M.support</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n</code></pre></div>\n<p>In that case, here's the first sorry:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_perfect_iff</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_perfect</span> <span class=\"n\">M</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_matching</span><span class=\"o\">,</span> <span class=\"n\">is_perfect</span><span class=\"o\">,</span> <span class=\"n\">exists_unique</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hu'</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_univ</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">subgraph.mem_support</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hu'</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hu'</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hw</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">hw</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260595086,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636318547
    },
    {
        "content": "<p>and I would suggest this for <code>is_matching</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_matching</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">w'</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w'</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">w'</span>\n</code></pre></div>",
        "id": 260595134,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636318599
    }
]