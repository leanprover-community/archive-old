[
    {
        "content": "<p>If I have a type which is an instance of lattice, how can I pattern match or do induction on it?<br>\nFor example,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 148769128,
        "sender_full_name": "AHan",
        "timestamp": 1543473912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133545\">@AHan</span> Why are you trying to do?</p>",
        "id": 148770964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543477565
    },
    {
        "content": "<p>Pattern matching doesn't work on any odd type. (This has nothing to do with lattices.) You need <code>α</code> to be inductive.</p>",
        "id": 148770966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543477595
    },
    {
        "content": "<p>I want to prove something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lex_acc_of_bot</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">ra</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">lex</span> <span class=\"n\">ra</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 148771305,
        "sender_full_name": "AHan",
        "timestamp": 1543478255
    },
    {
        "content": "<p>Ok, I don't know enough about this... (I don't know what <code>ra</code> and <code>lex</code> are). But what had you hoped to pattern match on? Whether <code>a</code> was the bottom element, or something like that?</p>",
        "id": 148771643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543478706
    },
    {
        "content": "<p>For your lemma, you could do induction on the list; maybe that helps?</p>",
        "id": 148771654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543478752
    },
    {
        "content": "<p>Oh sorry I should say it clearer</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">lex</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">rel</span> <span class=\"o\">{</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"n\">l₂</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₂</span> <span class=\"bp\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">lex</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>and <code>ra</code> is actually <code>lt</code></p>",
        "id": 148771977,
        "sender_full_name": "AHan",
        "timestamp": 1543479304
    },
    {
        "content": "<p>I found Chris' notes on well founded recursion very useful for this sort of thing.</p>",
        "id": 148771981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543479307
    },
    {
        "content": "<p>To get the equation compiler to match on a random thing, you need to explicitly trigger it with the <code>match</code> command. Hang on I'll get to a PC and send some links</p>",
        "id": 148772038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543479382
    },
    {
        "content": "<p>I have tried to do induction on list<br>\nBut the lex order I defined doesn't necessarily decrease on the length of the list... I can't apply the induction hypothesis...</p>",
        "id": 148772043,
        "sender_full_name": "AHan",
        "timestamp": 1543479411
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#match-expressions\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#match-expressions\">https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#match-expressions</a> for pattern matching</p>\n<p><a href=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/well_founded_recursion.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/well_founded_recursion.md\">https://github.com/leanprover/mathlib/blob/master/docs/extras/well_founded_recursion.md</a> for well-founded recursion</p>",
        "id": 148772103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543479506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Thanks a lot for the sharing!<br>\nSo I think the main problem here is, I have to prove that something will decrease....<br>\nAnd I have no idea how to prove this.... lol</p>",
        "id": 148772752,
        "sender_full_name": "AHan",
        "timestamp": 1543480593
    }
]