[
    {
        "content": "<p>I understand I can say <code>linear_independent ℝ ![![1,2,3], ![4,5,6]]</code> when I have a hardcoded matrix like this, but I can't figure out how to say a list of vectors of length <code>m</code> are linearly independent. I'm trying to prove the following:</p>\n<p>If v1,v2,...,vm is linearly independent in V, then 5v1-4v2, v2,...,vm then is also linearly independent.</p>\n<p>I tried using a set with <code>insert</code> as follows, but <code>linear_independent</code> seems like it needs a matrix and not a set of vectors.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">remainingV</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n    <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">v1</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">v2</span> <span class=\"n\">remainingV</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">•</span> <span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span>\n    <span class=\"bp\">•</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">v2</span> <span class=\"n\">remainingV</span><span class=\"o\">))</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a way to specify a matrix that's a set of vectors of  length <code>m</code> without hardcoding specific vectors into a matrix?</p>",
        "id": 290742663,
        "sender_full_name": "David Chanin",
        "timestamp": 1658745511
    },
    {
        "content": "<p>Perhaps what you're missing is that <code>![a, b, c]</code> is notation for <code>matrix.vec_cons a ![b, c]</code></p>",
        "id": 290747956,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658749098
    },
    {
        "content": "<p><code>insert</code> is used for <code>{a, b, c}</code> notation</p>",
        "id": 290747971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658749108
    },
    {
        "content": "<p>However, there's another way out here; while with <code>![a, b, c]</code> you're using <code>fin 3</code> as the index type, you can work with <code>{a, b, c}</code> if you use <code>coe_sort {a, b, c}</code> as the index type and <code>coe</code> as the function!</p>",
        "id": 290748035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658749174
    },
    {
        "content": "<p>Indeed, that's how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent_insert\">docs#linear_independent_insert</a> is stated</p>",
        "id": 290748104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658749205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479618\">David Chanin</span> <a href=\"#narrow/stream/113489-new-members/topic/linear.20independent.20with.20a.20non-hardcoded.20list.20of.20vectors/near/290742663\">said</a>:</p>\n<blockquote>\n<p>I tried using a set with <code>insert</code> as follows, but <code>linear_independent</code> seems like it needs a matrix and not a set of vectors.</p>\n</blockquote>\n<p>Strictly speaking, <code>![![1,2,3], ![4,5,6]]</code> is a tuple of tuples (or vector of vectors); a matrix would be <code>!![1,2,3; 4,5,6]</code>.</p>",
        "id": 290748172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658749268
    },
    {
        "content": "<p>aah ok, I think I understand what you mean (at least with vec_cons). I can write the following and it doesn't error! Now just need to figure how to actually prove it...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">baseV</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n    <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">vec_cons</span> <span class=\"n\">v1</span> <span class=\"o\">(</span><span class=\"n\">vec_cons</span> <span class=\"n\">v2</span> <span class=\"n\">baseV</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">vec_cons</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">•</span> <span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span>\n    <span class=\"bp\">•</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vec_cons</span> <span class=\"n\">v2</span> <span class=\"n\">baseV</span><span class=\"o\">))</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"bp\">...</span> <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290809047,
        "sender_full_name": "David Chanin",
        "timestamp": 1658778353
    },
    {
        "content": "<p>Thank you so much for the tips!</p>",
        "id": 290810257,
        "sender_full_name": "David Chanin",
        "timestamp": 1658778984
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent_fin_cons\">docs#linear_independent_fin_cons</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent.fin_cons'\">docs#linear_independent.fin_cons'</a></p>",
        "id": 290812529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658780163
    },
    {
        "content": "<p><code>matrix.vec_cons</code> is defined as equal to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.cons\">docs#fin.cons</a>, because the latter often elaborates badly due to dependent types</p>",
        "id": 290812619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658780220
    }
]