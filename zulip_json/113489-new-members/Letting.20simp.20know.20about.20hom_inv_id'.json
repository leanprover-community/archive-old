[
    {
        "content": "<p>I made an equiv, and I want <code>simp</code> to know about <code>hom_inv_id'</code> and <code>inv_hom_id'</code>. How do I do that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">punit_UP</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">punit</span> <span class=\"bp\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">punit.star</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">hom_inv_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 246584967,
        "sender_full_name": "Ken Lee",
        "timestamp": 1626788363
    },
    {
        "content": "<p>There should probably already be <code>simp</code> lemmas called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.iso.hom_inv_id\">docs#category_theory.iso.hom_inv_id</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.iso.inv_hom_id\">docs#category_theory.iso.inv_hom_id</a>.</p>",
        "id": 246585331,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626788536
    },
    {
        "content": "<p><code>@[simps]</code> on the definition will automatically generate lemmas about the projections and mark them as <code>@[simp]</code></p>",
        "id": 246585382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626788558
    },
    {
        "content": "<p>oh but anne is right - the lemmas you want are not actually about your definition, they are true for all isos</p>",
        "id": 246585476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626788608
    },
    {
        "content": "<p><code>@[simps]</code> will generate theorems like <code>punit_UP.hom a = a punit.star</code></p>",
        "id": 246585559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626788643
    },
    {
        "content": "<p>What do you want to do with the map? If you're planning on applying this to actual elements, it might be neater to work with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv\">docs#equiv</a> instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.iso\">docs#category_theory.iso</a>.</p>",
        "id": 246585728,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626788720
    },
    {
        "content": "<p>I have a monoid instance on <code>punit -&gt; A</code>, and used <code>tactic.transport</code> to get a monoid instance on <code>A</code>, and now I want to upgrade the <code>punit_UP</code> to an equiv between monoids.</p>",
        "id": 246586667,
        "sender_full_name": "Ken Lee",
        "timestamp": 1626789158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132893\">@Ken Lee</span> can you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with what you're actually trying to do?</p>",
        "id": 246589746,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626790200
    },
    {
        "content": "<p>This should work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.transport</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Mon.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">transp_monoid</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">B</span><span class=\"o\">):</span> <span class=\"n\">monoid</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">transport</span> <span class=\"n\">using</span> <span class=\"n\">e</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Maths proof.</span>\n\n<span class=\"cm\">multiplication on B is...</span>\n<span class=\"cm\">b * b1 = e.to_fun (e.inv_fun b * e.inv_fun b1)</span>\n<span class=\"cm\">So we have,</span>\n\n<span class=\"cm\">e.to_fun (a * a1)</span>\n<span class=\"cm\">= e.to_fun ((e.inv_fun (e.to_fun a)) * (e.inv_fun (e.to_fun a1)))</span>\n<span class=\"cm\">= (e.to_fun a) * (e.to_fun a1)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">upgrade</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">Mon.of</span> <span class=\"n\">A</span> <span class=\"bp\">≅</span> <span class=\"bp\">@</span><span class=\"n\">Mon.of</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">transp_monoid</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_equiv_iso_Mon_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">transp_monoid</span> <span class=\"n\">e</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hom</span>\n<span class=\"o\">{</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">..</span> <span class=\"n\">e</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 246603486,
        "sender_full_name": "Ken Lee",
        "timestamp": 1626793452
    },
    {
        "content": "<p>my specific case was between <code>punit -&gt; A</code> and <code>A</code></p>",
        "id": 246603625,
        "sender_full_name": "Ken Lee",
        "timestamp": 1626793524
    },
    {
        "content": "<p>The issue is not a missing simp lemma (or lemmas), it's the fact that you need to somehow unfold the multiplication on <code>B</code>. E.g. this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.transport</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Mon.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">transp_monoid</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">transport</span> <span class=\"n\">using</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upgrade</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">Mon.of</span> <span class=\"n\">A</span> <span class=\"bp\">≅</span> <span class=\"bp\">@</span><span class=\"n\">Mon.of</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">transp_monoid</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_equiv_iso_Mon_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">transp_monoid</span> <span class=\"n\">e</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hom</span>\n<span class=\"o\">{</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">y</span><span class=\"o\">)),</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"bp\">..</span> <span class=\"n\">e</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 246605148,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626794107
    },
    {
        "content": "<p>I see! thanks so much</p>",
        "id": 246606683,
        "sender_full_name": "Ken Lee",
        "timestamp": 1626794821
    }
]