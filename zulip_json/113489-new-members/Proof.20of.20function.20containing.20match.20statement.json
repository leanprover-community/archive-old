[
    {
        "content": "<p>I'm working on a proof of a function containing <code>match</code> statements (see <a href=\"https://github.com/minhnhdo/programming-language-foundations-in-lean/blob/lean-3.4.2/src/type_checking.lean#L76\" target=\"_blank\" title=\"https://github.com/minhnhdo/programming-language-foundations-in-lean/blob/lean-3.4.2/src/type_checking.lean#L76\">here</a>). I cannot get Lean to unfold the definitions for the implicit <code>match</code> statements (e.g., one at line <a href=\"https://github.com/minhnhdo/programming-language-foundations-in-lean/blob/lean-3.4.2/src/type_checking.lean#L10\" target=\"_blank\" title=\"https://github.com/minhnhdo/programming-language-foundations-in-lean/blob/lean-3.4.2/src/type_checking.lean#L10\">10</a>). Could anyone please give me some tips on how to proceed?</p>",
        "id": 169177629,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1561671307
    },
    {
        "content": "<p>have you tried <code>change</code>?</p>",
        "id": 169177783,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561671442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, could you give an example of how to use it?</p>",
        "id": 169178303,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1561671846
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169178439,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561671952
    },
    {
        "content": "<p>sorry to bother you again, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> , but I can't get it to work...  In your example, Lean changes <code>f 0 = 2</code> to <code>1 = 2</code> in the type of <code>hf</code>. But in my case, the input to the implicit <code>match</code> is not a concrete value, but a recursive function call (<code>type_check gamma t_a_1</code>) and <code>h_w</code>. How can I use <code>change</code> in this case?</p>",
        "id": 169182104,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1561674911
    },
    {
        "content": "<p>Not sure if I understand what you are trying to do, but if you match on your recursive function call, say <code>f t</code>, then you might wanna do something like <code>cases (f t)</code> in your proof.</p>",
        "id": 169182800,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1561675727
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">generalize_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169183002,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561675979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224162\">@Do Nhat Minh</span></p>",
        "id": 169183004,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561675982
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> and <span class=\"user-mention\" data-user-id=\"198376\">@Kevin Kappelmann</span>  . I got a little bit further thanks to <span class=\"user-mention\" data-user-id=\"198376\">@Kevin Kappelmann</span>'s advice.</p>",
        "id": 169185646,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1561679211
    }
]