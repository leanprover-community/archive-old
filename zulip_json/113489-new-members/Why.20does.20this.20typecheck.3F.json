[
    {
        "content": "<p>Hey all, I'm a hobbyist playing with Lean :) I'm trying to understand some fundamentals, working my way through Logic and Proof right now. Random question: why does the following code typecheck?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">rfl</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span> <span class=\"c1\">-- rfl: 0 = 0</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">rfl</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>It seems to me that <code>0 + 0 = 0</code> should be a different <code>Prop</code> from <code>0 = 0</code>, but this works. Is there some sort of reduction happening in the background?</p>",
        "id": 197811381,
        "sender_full_name": "James G",
        "timestamp": 1589658114
    },
    {
        "content": "<p><code>0 + 0</code> is equal to <code>0</code> <em>by definition</em>.</p>",
        "id": 197811604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589658447
    },
    {
        "content": "<p>And because the two are <em>defeq</em> you can still prove your prop using <code>rfl</code>.</p>",
        "id": 197811619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589658473
    },
    {
        "content": "<p>Lean will take both sides of the equation, and try to figure out if they are the same. Here \"the same\" means up to definitional equality.</p>",
        "id": 197811669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589658506
    },
    {
        "content": "<p>For example, this doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 197811690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589658551
    },
    {
        "content": "<p>Oh, I see, that makes more sense</p>",
        "id": 197811757,
        "sender_full_name": "James G",
        "timestamp": 1589658603
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 197811789,
        "sender_full_name": "James G",
        "timestamp": 1589658683
    },
    {
        "content": "<p>Is the exact algorithm it's using specified somewhere, or is that something that's, like, really fundamental to the system?</p>",
        "id": 197811791,
        "sender_full_name": "James G",
        "timestamp": 1589658687
    },
    {
        "content": "<p>See Mario's master thesis. It's somewhere on his github account</p>",
        "id": 197811841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589658753
    },
    {
        "content": "<p>Mario = digama0</p>",
        "id": 197811843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589658760
    },
    {
        "content": "<p><a href=\"https://github.com/digama0/lean-type-theory/releases/download/v1.0/main.pdf\">https://github.com/digama0/lean-type-theory/releases/download/v1.0/main.pdf</a></p>",
        "id": 197811851,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589658777
    },
    {
        "content": "<p>Neat, thanks</p>",
        "id": 197811857,
        "sender_full_name": "James G",
        "timestamp": 1589658785
    },
    {
        "content": "<p>Maybe this can become #mariosthesis (-;</p>",
        "id": 197811862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589658797
    },
    {
        "content": "<p>But the specification of the algorithm is a rather easier read</p>",
        "id": 197812012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589659030
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/expressions.html#computation\">https://leanprover.github.io/reference/expressions.html#computation</a></p>",
        "id": 197812033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589659070
    },
    {
        "content": "<p>What is going on here <span class=\"user-mention\" data-user-id=\"302971\">@James G</span> is simply that when <code>a + b</code> is defined, the actual definition goes like this: either <code>b=0</code> or <code>b=succ c</code>, and a different definition is made in each case. The definition of <code>a + 0</code> is <code>a</code>. By definition. So <code>0+0=0</code> is true by definition and more generally <code>n+0=n</code> can also be proved with <code>rfl</code>. On the other hand <code>0 + n = n</code> cannot.</p>",
        "id": 197812124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589659172
    },
    {
        "content": "<p>James, you need to know that referring to Mario's paper is a running joke. It's written for specialists in type theory. Neither Johan nor Kevin can read that and, since you asked that question, I can guarantee you won't be able to read it.</p>",
        "id": 197812528,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589659668
    },
    {
        "content": "<p>It also doesn't actually describe the algorithm for reduction, except in very abstract terms. It's more like a set of constraints on what the algorithm needs to do</p>",
        "id": 197812684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589659807
    },
    {
        "content": "<p>Am I right in thinking that it should mention the quotient theorem whose proof is rfl?</p>",
        "id": 197812704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589659851
    },
    {
        "content": "<p>yes</p>",
        "id": 197812706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589659857
    },
    {
        "content": "<p>I never understood why this was not mentioned</p>",
        "id": 197812708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589659860
    },
    {
        "content": "<p>it is mentioned?</p>",
        "id": 197812716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589659870
    },
    {
        "content": "<p>I can see the sentence \"The reduction relation is believed to be strongly normalizing\". Is it still up to date?</p>",
        "id": 197812776,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589659924
    },
    {
        "content": "<p>I can't see quotients mentioned in section 3.7 of the reference manual</p>",
        "id": 197812779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589659927
    },
    {
        "content": "<p>where is that sentence?</p>",
        "id": 197812787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589659944
    },
    {
        "content": "<p>There are two possible interpretations of that sentence, one is now known to be false and the other is still open</p>",
        "id": 197812799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589659972
    },
    {
        "content": "<p>Sebastien and I are looking at section 3.7 of the reference manual</p>",
        "id": 197812802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589659982
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/expressions.html#computation\">https://leanprover.github.io/reference/expressions.html#computation</a></p>",
        "id": 197812809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589659991
    },
    {
        "content": "<p>I forget that this section existed. It's pretty readable actually (or maybe I'm finally getting used to this stuff)</p>",
        "id": 197812818,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589660010
    },
    {
        "content": "<p>the computation rule for the quotient is mentioned at the end of the quotient section</p>",
        "id": 197812826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589660025
    },
    {
        "content": "<p>The sentence I'm not happy with is \"Definitional equality is defined to be the smallest equivalence relation that satisfies...\" and no quotients are mentioned.</p>",
        "id": 197812827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589660027
    },
    {
        "content": "<p>Yes, it's amazing how this book becomes more readable with time. The authors make a really good job improving it ! :)</p>",
        "id": 197812869,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589660049
    },
    {
        "content": "<p>in section 3.8 of the refman</p>",
        "id": 197812870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589660052
    },
    {
        "content": "<p>For me, this contradicts the <code>rfl</code> proof in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#quotients\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#quotients</a></p>",
        "id": 197812873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589660054
    },
    {
        "content": "<p>I came back to the reference manual just a week or so ago after someone mentioned it here and it was amazing how much better it had got.</p>",
        "id": 197812892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589660086
    },
    {
        "content": "<p>It's now much more comprehensible</p>",
        "id": 197812900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589660098
    },
    {
        "content": "<p>I understand quotients are mentioned in 3.8, but this does not change the fact that for me the definition of definitional equality in 3.7 is wrong, indeed, by my reading 3.8 contradicts 3.7.</p>",
        "id": 197812972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589660177
    },
    {
        "content": "<p>Mario, the next sentence is also problematic, right?</p>\n<blockquote>\n<p>The reduction relation is believed to be strongly normalizing, which is to say, every sequence of reductions applied to a term will eventually terminate. The property guarantees that Lean’s type-checking algorithm terminates, at least in principle. </p>\n</blockquote>",
        "id": 197812977,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589660190
    },
    {
        "content": "<p>yes, in context that's the version of the statement that has been disproved</p>",
        "id": 197813012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589660229
    },
    {
        "content": "<p>the version of the statement that is still open is whether VM evaluation is terminating</p>",
        "id": 197813022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589660249
    },
    {
        "content": "<p>Actually the issue is mentioned a couple of paragraph later</p>",
        "id": 197813032,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589660266
    },
    {
        "content": "<p>or (roughly) equivalently, reduction on closed terms</p>",
        "id": 197813037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589660274
    },
    {
        "content": "<blockquote>\n<p>Note: the combination of proof irrelevance and singleton Prop elimination in ι-reduction renders the ideal version of definitional equality, as described above, undecidable. Lean’s procedure for checking definitional equality is only an approximation to the ideal. It is not transitive, as illustrated by the example below. Once again, this does not compromise the consistency or soundness of Lean; it only means that Lean is more conservative in the terms it recognizes as well typed, and this does not cause problems in practice.</p>\n</blockquote>",
        "id": 197813076,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589660284
    },
    {
        "content": "<p>This is the thing that makes some Coq people think that Lean is a terrible idea, but people like me who like living on the edge think it makes it better, right?</p>",
        "id": 197813077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589660291
    },
    {
        "content": "<p>Yes</p>",
        "id": 197813088,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589660312
    },
    {
        "content": "<p>Is checking definitional equality different to \"Lean's type-checking algorithm\" though?</p>",
        "id": 197813102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589660348
    },
    {
        "content": "<p>At least in principle?</p>",
        "id": 197813109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589660360
    },
    {
        "content": "<p>The issue mentioned in that paragraph is nontransitivity of defeq, which has been known for a while and appears prominently in my thesis. The issue with nontermination of reduction is more recent, the Abel and Coquand paper</p>",
        "id": 197813183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589660409
    },
    {
        "content": "<p>Oh yes, I forgot</p>",
        "id": 197813196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589660445
    },
    {
        "content": "<p>at the time I wrote my thesis I thought that <code>#reduce T</code> for any term <code>T</code> would always halt in finite time</p>",
        "id": 197813213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589660480
    },
    {
        "content": "<p>this is now known to be false but the related question of whether <code>#eval T</code> always halts in finite time is still open</p>",
        "id": 197813275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589660529
    },
    {
        "content": "<p>Given that I don't know the difference between <code>#reduce</code> and <code>#eval</code>, I suspect I am not too bothered by this</p>",
        "id": 197813374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589660660
    },
    {
        "content": "<p>Kevin, you should read Section 3.7 of the reference manual. It got much better, and explains this.</p>",
        "id": 197813387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589660692
    },
    {
        "content": "<p>one works it out a bit more rigorously than the other one, IIRC</p>",
        "id": 197813393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589660702
    },
    {
        "content": "<p>Section 3.7 contains several lies</p>",
        "id": 197813476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589660783
    },
    {
        "content": "<p>The key difference is whether you are allowed to reduce open terms. For example in lean <code>a + 0 = a</code> by rfl because lean is doing reduction on the lhs even though there is a variable <code>a</code> in the statement. Python or something wouldn't be able to prove this</p>",
        "id": 197813485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589660814
    },
    {
        "content": "<p>The consistency of Lean and its soundness with respect to set-theoretic semantics do not depend on either of these properties. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 197813487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589660816
    },
    {
        "content": "<p>That is true though</p>",
        "id": 197813492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589660827
    },
    {
        "content": "<p>Us boring old mathematicians, only concerned with soundness and consistency</p>",
        "id": 197813513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589660863
    },
    {
        "content": "<p>I learned type theory so that I can say it's a bad idea from a position of authority ;)</p>",
        "id": 197813584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589660954
    },
    {
        "content": "<p>Soundness and consistency on the other hand...</p>",
        "id": 197813597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589660985
    },
    {
        "content": "<p>I must confess I don't know what they mean either</p>",
        "id": 197813665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589661014
    },
    {
        "content": "<p>but I know they will mean something like \"you can only prove true things\"</p>",
        "id": 197813675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589661035
    },
    {
        "content": "<p>I think what \"really matters\" is arithmetic consistency, i.e. you can't prove false things about natural numbers</p>",
        "id": 197813680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589661049
    },
    {
        "content": "<p>Yes I'd definitely consider that one to be important</p>",
        "id": 197813684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589661065
    },
    {
        "content": "<p>For everything else we are \"working on instruments\" to some extent, and can't really say what's supposed to be true or not. Is CH true? Martin's axiom? the axiom of determinacy? They all look reasonable to me</p>",
        "id": 197813704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589661122
    },
    {
        "content": "<p>Strongly normalising reduction relations, I can take it or leave it. I think that \"expecting to be able to compute stuff\" flies in the face of what mathematics has become.</p>",
        "id": 197813722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589661122
    },
    {
        "content": "<p>I think it's a cool property but not really relevant to foundations</p>",
        "id": 197813745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589661154
    },
    {
        "content": "<p>CH, MA and AD are all pathological statements and are not of interest to \"real mathematicians\" like my colleagues</p>",
        "id": 197813749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589661165
    },
    {
        "content": "<p>it's like you proved a property about some computer algorithm</p>",
        "id": 197813752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589661171
    },
    {
        "content": "<p>Note that they only became pathological once Goedel and Cohen had started proving theorems about them which \"real mathematicians\" don't really understand</p>",
        "id": 197813761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589661198
    },
    {
        "content": "<p>they are \"pathologically interesting to logicians\"</p>",
        "id": 197813772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589661222
    },
    {
        "content": "<p>Right</p>",
        "id": 197813776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589661230
    },
    {
        "content": "<p>Give it a few years and there will be nobody left in the University of Cambridge maths department to teach the logic course. That says a lot about how logic is thought of right now in my country.</p>",
        "id": 197813834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589661281
    },
    {
        "content": "<p>I gave a lecture yesterday and there were logicians in the audience, indeed someone asked about Borel determinacy and it turned into <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Borel.20determinacy/near/197785223\">a really interesting topic</a> in the \"is there code for\" stream. But it was a lecture in a computer science department.</p>",
        "id": 197813918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589661366
    },
    {
        "content": "<p>A lot of the stuff I mentioned is actually the domain of \"set theory\". It's not clear to me where these folks congregate but they are somewhat distinct from foundational logic folks</p>",
        "id": 197813919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589661369
    },
    {
        "content": "<p>borel determinacy is \"descriptive set theory\" which I understand even less</p>",
        "id": 197813941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589661405
    },
    {
        "content": "<p>but I suspect there are a lot of common ideas here from those you see in constructive mathematics, just from a different angle</p>",
        "id": 197813974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589661456
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/fcwJ8784vna0o7KqF5wy22cz/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/fcwJ8784vna0o7KqF5wy22cz/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/fcwJ8784vna0o7KqF5wy22cz/image.png\"></a></div><p><a href=\"https://github.com/blanchette/logical_verification_2020/raw/master/hitchhikers_guide.pdf\">The Hitchhiker’s Guide to Logical Verification</a> explained it quite well actually(compared to <a href=\"https://leanprover.github.io/reference/expressions.html#computation\">https://leanprover.github.io/reference/expressions.html#computation</a> )</p>",
        "id": 197825539,
        "sender_full_name": "Utensil Song",
        "timestamp": 1589681576
    }
]