[
    {
        "content": "<p>Hi. I'm again having troubles with my set-theoretic view.  I've defined a function <code>f : ordinal → set C</code>. I would like<br>\nto argue that there must be <code>α,β ∈ ordinal</code> such that <code>f(α) = f(β)</code>. Mathematically I'd do this by actually defining <code>f</code> with<br>\ndomain <code>ν</code> where <code>ν</code> is any ordinal that does not inject to <code>℘(C)</code>. <br>\nAny Idea how this should be done here? I've skimmed through <code>set_theory.ordinal</code>, <code>set_theory.cardinal</code> (and others) and have not had any success.</p>",
        "id": 253595578,
        "sender_full_name": "Lucas Polymeris",
        "timestamp": 1631804288
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of the statement you want to prove?</p>",
        "id": 253604250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631807668
    },
    {
        "content": "<p>I guess something like this should be close enough:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span> <span class=\"n\">set_theory.ordinal</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">ordinal</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">C</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ξ</span> <span class=\"o\">:=</span> <span class=\"bp\">⋃</span> <span class=\"n\">η</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ξ</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">η</span><span class=\"o\">)</span>\n  <span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">some_lemma</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But keep in mind that so far, defining <code>f</code> from <code>ordinal</code> is the only thing that I've managed to accomplish, If the way to go is to define f some other way, that would be ok too. I'v also tried to define it on the well order of something like <code>cardinal.ord (cardinal.succ (cardinal.mk (set C))))</code>, which should be an ordinal that does not inject to <code>set C</code>, but I did not manage to pull it of.</p>",
        "id": 253607055,
        "sender_full_name": "Lucas Polymeris",
        "timestamp": 1631808735
    },
    {
        "content": "<p>I assume you're missing an <code>α ≠ β</code> component somewhere, else that statement is trivially true</p>",
        "id": 253608302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631809215
    },
    {
        "content": "<p>You probably want to write explicit universe variables like <code>def f : ordinal.{u} → set C</code>, and maybe use <code>set_option pp.universes true</code> to check that your universe levels are what you expect.</p>",
        "id": 253609635,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631809746
    },
    {
        "content": "<p>I'm very surprised this doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">some_lemma</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 253609748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631809798
    },
    {
        "content": "<p>Ah, <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>'s comment reveals the issue with that attempt; your statement is actually <code>∃ {α : ordinal.{u}} {b : ordinal.{v}}</code></p>",
        "id": 253610075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631809903
    },
    {
        "content": "<p>This is ugly (I wrote it in the online Lean editor), but it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span> <span class=\"n\">set_theory.ordinal</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">ordinal</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">lemma</span> <span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">up_injective</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">ulift.up.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ulift</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">some_lemma</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ulift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">ulift.up</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">function.injective</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">up_injective.comp</span> <span class=\"n\">hf</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hg</span> <span class=\"o\">:=</span> <span class=\"n\">cardinal.mk_le_of_injective</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">cardinal.lift_mk</span> <span class=\"n\">at</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hg</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">cardinal.lift_lt_univ</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cardinal.univ_id</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 253614140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631811490
    },
    {
        "content": "<p>Basically <code>cardinal.lift_lt_univ</code> is the key fact, and the rest is shuffling which I probably didn't do very efficiently.</p>",
        "id": 253615095,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631811816
    },
    {
        "content": "<p><code>up_injective</code> already exists as <code>equiv.ulift.symm.injective</code></p>",
        "id": 253616746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631812529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Transfinite.20recursion/near/253608302\">said</a>:</p>\n<blockquote>\n<p>I assume you're missing an <code>α ≠ β</code> component somewhere, else that statement is trivially true</p>\n</blockquote>\n<p>Yes of course, my bad.</p>",
        "id": 253617014,
        "sender_full_name": "Lucas Polymeris",
        "timestamp": 1631812645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Transfinite.20recursion/near/253615095\">said</a>:</p>\n<blockquote>\n<p>Basically <code>cardinal.lift_lt_univ</code> is the key fact, and the rest is shuffling which I probably didn't do very efficiently.</p>\n</blockquote>\n<p>I'll have a look at <code>cardinal.lift_lt_univ</code>. Thanks.</p>",
        "id": 253617352,
        "sender_full_name": "Lucas Polymeris",
        "timestamp": 1631812797
    },
    {
        "content": "<p>It worked nicely thanks. Shouldn't something like this or similar be in mathlib? It is quite a common thing to do, I believe.</p>",
        "id": 253748887,
        "sender_full_name": "Lucas Polymeris",
        "timestamp": 1631888225
    },
    {
        "content": "<p>I actually meant to ask what you were using this for--a lot of the time you can use an inductive predicate (or impredicative-style definition) for a subset that you might define by transfinite induction in a set-theoretic setting.</p>",
        "id": 253762963,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631893804
    },
    {
        "content": "<p>By impredicative-style definition I mean something like \"the intersection of all sets <code>s</code> such that <code>s</code> contains <code>g s</code>\"</p>",
        "id": 253763035,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631893832
    },
    {
        "content": "<p>I guess I should say that I'm more familiar with transfinite constructions in category theory where you're building a sequence of objects so you can't conclude that the sequence stabilizes for size reasons, and have to use some accessibility of <code>g</code> instead (and so you know in advance when to stop).</p>",
        "id": 253763650,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631894077
    },
    {
        "content": "<p>But anyways this statement about <code>¬ function.injective f</code> does seem useful for mathlib, and maybe some lemmas that would simplify the proof are missing too.</p>",
        "id": 253763953,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631894199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I'm doing something similar to <a href=\"https://core.ac.uk/download/pdf/4886291.pdf\">https://core.ac.uk/download/pdf/4886291.pdf</a> (lemma 1). I'm not familiar with category theory, but what you describe sounds similar to what I'm doing.</p>",
        "id": 253778747,
        "sender_full_name": "Lucas Polymeris",
        "timestamp": 1631900125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433869\">Lucas Polymeris</span> <a href=\"#narrow/stream/113489-new-members/topic/Transfinite.20recursion/near/253778747\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> I'm doing something similar to <a href=\"https://core.ac.uk/download/pdf/4886291.pdf\">https://core.ac.uk/download/pdf/4886291.pdf</a> (lemma 1). I'm not familiar with category theory, but what you describe sounds similar to what I'm doing.</p>\n</blockquote>\n<p>Awesome, I just started Christopher Allen, Julie Moronuki - Haskell Programming from first principles (2016), I can share my notes if you are interested.</p>",
        "id": 253781299,
        "sender_full_name": "M.G.",
        "timestamp": 1631901143
    }
]