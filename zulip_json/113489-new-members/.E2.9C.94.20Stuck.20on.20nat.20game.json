[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Stuck.20on.20nat.20game/near/269046341\">said</a>:</p>\n<blockquote>\n<p>notice that <code>hd</code> matches the left side</p>\n</blockquote>\n<p>I tried <code>rw hd,</code> but that gave errors</p>",
        "id": 269054293,
        "sender_full_name": "J. O.",
        "timestamp": 1642991956
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Stuck.20on.20nat.20game/near/269046352\">said</a>:</p>\n<blockquote>\n<p>Do you know what induction is and how it works? Did you see this in class yet?</p>\n<p>The way induction works is that you get an inductive hypothesis which almost always is an essential part of the proof.</p>\n<p>The game is designed for people who are already familiar with mathematical induction (in fact it's designed for maths undergraduates at my university), so I don't explain the ins and outs of how it works -- apologies if this is not a good fit for you.</p>\n</blockquote>\n<p>Ah ok, i see. Perhaps it isn’t the best for me. I heard how great people said it was, and I wanted to give it a try. I will look at the <code>Theorem Proving in Lean 4</code> manual though</p>",
        "id": 269054373,
        "sender_full_name": "J. O.",
        "timestamp": 1642992086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">J. O.</span> has marked this topic as resolved.</p>",
        "id": 269054940,
        "sender_full_name": "Notification Bot",
        "timestamp": 1642992952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">J. O.</span> has marked this topic as unresolved.</p>",
        "id": 269054943,
        "sender_full_name": "Notification Bot",
        "timestamp": 1642992957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">J. O.</span> has marked this topic as resolved.</p>",
        "id": 269054944,
        "sender_full_name": "Notification Bot",
        "timestamp": 1642992960
    },
    {
        "content": "<p>Hi, i am just going through the levels and I don't quite understand how to be precise when I want to rewrite add_comm.<br>\nmy goal is ⊢ succ (a * d + d + a) = succ (a * d + a + d)<br>\nso once I change  d + a   -&gt;   a + d, I just need to refl,.<br>\nbut Ive tried using <br>\nrw add_comm a d <br>\nor<br>\nrw add_comm d a<br>\nand it doesn't work.<br>\n thanks.</p>",
        "id": 272874021,
        "sender_full_name": "Oscar Martin",
        "timestamp": 1645568068
    },
    {
        "content": "<p>First, it's easier to read the bits of code you write in Zulip if you surround it in <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 272874294,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1645568246
    },
    {
        "content": "<p>This is beacuse in Lean <code>a + b + c </code> means <code>(a + b) + c </code> so you need to use associativity is you want to echange <code>d</code> and <code>a</code> in your example.</p>",
        "id": 272874314,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645568258
    },
    {
        "content": "<p>And you can make you message more readable using <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 272874387,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645568284
    },
    {
        "content": "<p>Too late :)</p>",
        "id": 272874394,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645568288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Stuck.20on.20nat.20game/near/272874387\">said</a>:</p>\n<blockquote>\n<p>And you can make you message more readable using <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>\n</blockquote>\n<p>like so?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">succ_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n\n\n<span class=\"kd\">begin</span>\n\n<span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">had</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272876860,
        "sender_full_name": "Oscar Martin",
        "timestamp": 1645569577
    }
]