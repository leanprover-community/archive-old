[
    {
        "content": "<p>Why do these two examples exhibit different behavior (iterative application of a tactic vs repeat)? The definitions of repeat and repeat_aux don't seem to suggest they would do anything different.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_left</span><span class=\"o\">,</span>  <span class=\"c1\">-- 5 &lt; 1 + 6</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_left</span><span class=\"o\">,</span>  <span class=\"c1\">-- 5 &lt; 6</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">base</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_left</span><span class=\"o\">},</span> <span class=\"c1\">-- 5 &lt; 1</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160729787,
        "sender_full_name": "cbailey",
        "timestamp": 1552513265
    },
    {
        "content": "<p>What happens if you <code>apply nat.lt_add_left</code> once more in the first example?</p>",
        "id": 160730056,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1552513445
    },
    {
        "content": "<p>I think you think <code>repeat</code> means <code>iterate 2</code></p>",
        "id": 160730289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552513676
    },
    {
        "content": "<p>Well that explains that.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_left</span><span class=\"o\">,</span> <span class=\"c1\">-- 5 &lt; 1 + 6</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_left</span><span class=\"o\">,</span> <span class=\"c1\">-- 5 &lt; 6</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_left</span><span class=\"o\">,</span> <span class=\"c1\">-- 5 &lt; 3</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_left</span><span class=\"o\">,</span> <span class=\"c1\">-- 5 &lt; 1</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160730290,
        "sender_full_name": "cbailey",
        "timestamp": 1552513679
    },
    {
        "content": "<p>Lean's definition of 6 is 3 + 3</p>",
        "id": 160730344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552513702
    },
    {
        "content": "<p>numerals are defined by binary: 7 := 3 + 3 + 1 and 8 := 4 + 4 etc etc</p>",
        "id": 160730370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552513729
    },
    {
        "content": "<p><code>set_option pp.numerals false</code>.</p>",
        "id": 160730453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552513803
    },
    {
        "content": "<p>Ah okay. I didn't know it used a binary representation internally but that makes sense. Thank you.</p>",
        "id": 160730535,
        "sender_full_name": "cbailey",
        "timestamp": 1552513844
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">s</span>  <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span>  <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>                 <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n<span class=\"n\">def</span> <span class=\"n\">bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>This is what Lean uses when it sees numeric characters.</p>",
        "id": 160730536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552513847
    },
    {
        "content": "<p>Obviously nat is represented as succ (succ (succ ...))) -- that's the definition.</p>",
        "id": 160730563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552513870
    },
    {
        "content": "<p>It's the digits <code>[0-9]+</code> that get turned into binary.</p>",
        "id": 160730576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552513889
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">bit1</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">unfold</span> <span class=\"n\">bit0</span><span class=\"o\">},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_left</span><span class=\"o\">,</span>  <span class=\"c1\">-- 5 &lt; 7</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_left</span><span class=\"o\">,</span>  <span class=\"c1\">-- 5 &lt; 6</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_left</span><span class=\"o\">,</span>  <span class=\"c1\">-- 5 &lt; 5</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_left</span><span class=\"o\">,</span>  <span class=\"c1\">-- 5 &lt; 4</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_left</span><span class=\"o\">,</span>  <span class=\"c1\">-- 5 &lt; 3</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_left</span><span class=\"o\">,</span>  <span class=\"c1\">-- 5 &lt; 2</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_left</span><span class=\"o\">,</span>  <span class=\"c1\">-- 5 &lt; 1</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160730849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552514082
    },
    {
        "content": "<p>or more precisely, <code>⊢ 1 + (1 + (1 + (1 + 1))) &lt; 1 + (1 + (1 + (1 + (1 + (1 + 1)))))</code> etc</p>",
        "id": 160730884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552514128
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">bit1</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">unfold</span> <span class=\"n\">bit0</span><span class=\"o\">},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_left</span><span class=\"o\">,</span>  <span class=\"c1\">-- 1 + 1 + 1 + 1 + 1 &lt; 1</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160730961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552514178
    },
    {
        "content": "<p>The actual behaviour of the code depends exactly on how the numerals are being stored. I am messing around with them with the unfolding code and can get repeat {apply nat.lt_add_left} to display different behaviour.</p>",
        "id": 160731019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552514246
    },
    {
        "content": "<p>Sorry, furiously tabbing back and forth between these definitions. So when you have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>The 5 is always just an element of nat, but it's constructed as <code> bit1 S (S (0)) S (S (0)) </code>?</p>",
        "id": 160731907,
        "sender_full_name": "cbailey",
        "timestamp": 1552514983
    },
    {
        "content": "<p><code>5 = bit1 (bit0 1)</code></p>",
        "id": 160732393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552515425
    },
    {
        "content": "<p><code>= (1 + 1) + (1 + 1) + 1</code></p>",
        "id": 160732427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552515451
    },
    {
        "content": "<p>Oops. That's what I meant...</p>",
        "id": 160733447,
        "sender_full_name": "cbailey",
        "timestamp": 1552516224
    }
]