[
    {
        "content": "<p>Hello, I'm starting to learn Lean and I'm working through the book \"Theorem Proving in Lean 4\", but it seems I've run into a snag when I hit a section in Chapter 3, subheading \"Propositions as Types\" - Lean4 doesn't seem to have \"Implies\". What can I do to fix this issue? <a href=\"/user_uploads/3121/6YgJMTEzoj2DjosY4xtcdscs/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/6YgJMTEzoj2DjosY4xtcdscs/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/6YgJMTEzoj2DjosY4xtcdscs/image.png\"></a></div>",
        "id": 303107371,
        "sender_full_name": "Kris Dabrowski",
        "timestamp": 1665305915
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 303124738,
        "sender_full_name": "Jason Rute",
        "timestamp": 1665316929
    },
    {
        "content": "<p>That section is a hypothetical.  Those don’t exist.  Read on to see how implies is actually implemented.</p>",
        "id": 303125076,
        "sender_full_name": "Jason Rute",
        "timestamp": 1665317134
    },
    {
        "content": "<p>If you click on the <span aria-label=\"eye\" class=\"emoji emoji-1f441\" role=\"img\" title=\"eye\">:eye:</span> symbol it will reveal some of the hidden code.  Note, to make this example compile they added a temporary definition for <code>Implies</code>.</p>",
        "id": 303125271,
        "sender_full_name": "Jason Rute",
        "timestamp": 1665317253
    },
    {
        "content": "<p>But again, the point of that piece of code and the surrounding text is to talk about how it could have been done but isn’t, because in DTT there is a more beautiful way.</p>",
        "id": 303125387,
        "sender_full_name": "Jason Rute",
        "timestamp": 1665317316
    },
    {
        "content": "<p>For others: this is referring to the first code block in <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html#propositions-as-types\">https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html#propositions-as-types</a>.</p>",
        "id": 303125641,
        "sender_full_name": "Jason Rute",
        "timestamp": 1665317439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113489-new-members/topic/.22Implies.22.20is.20missing/near/303125271\">said</a>:</p>\n<blockquote>\n<p>If you click on the <span aria-label=\"eye\" class=\"emoji emoji-1f441\" role=\"img\" title=\"eye\">:eye:</span> symbol it will reveal some of the hidden code.  Note, to make this example compile they added a temporary definition for <code>Implies</code>.</p>\n</blockquote>\n<p>Thank you for clearing this up. I was quite confused, since the section is also is implying that the type <code>Prop</code> is hypothetical, but it seems to exist just fine in Lean already - I can <code>#check And</code> by itself and it will tell me its type is Prop -&gt; Prop -&gt; Prop</p>",
        "id": 303169294,
        "sender_full_name": "Kris Dabrowski",
        "timestamp": 1665346896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"552336\">@Kris Dabrowski</span>  <code>Prop</code> exists, but not exactly in the hypothetical form mentioned there.  In particular, there is no <code>Proof</code> type that goes along with <code>Prop</code>.  Instead the elements of <code>p : Prop</code>, are (in some sense) it’s proofs.  The reason <code>And</code> exists, but <code>Implies</code> doesn’t is the former is defined while the latter is built into the system as <code>-&gt;</code>, namely the same <code>-&gt;</code> used to build function types like <code>Nat -&gt; Nat</code>.</p>",
        "id": 303179973,
        "sender_full_name": "Jason Rute",
        "timestamp": 1665358805
    },
    {
        "content": "<p>Note: <code>p : Prop</code> isn't a proof, it's a proposition. A term <code>hp : p</code> is a proof of the proposition <code>p</code>. I think this was an accidental misstatement above</p>",
        "id": 303201422,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665381837
    },
    {
        "content": "<p>I agree it is confusing, but I would argue “elements of <code>p : Prop</code>”, means “elements of <code>p</code> (where <code>p</code> is in <code>Prop</code>). <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 303238876,
        "sender_full_name": "Jason Rute",
        "timestamp": 1665400065
    },
    {
        "content": "<p>But it is could to clarify that.</p>",
        "id": 303239073,
        "sender_full_name": "Jason Rute",
        "timestamp": 1665400136
    }
]