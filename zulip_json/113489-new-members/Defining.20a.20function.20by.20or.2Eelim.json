[
    {
        "content": "<p>I'm trying to define a function which has the hypothesis <code>r ‚â§ n</code>, and it's defined differently if <code>r = n</code> compared to <code>r &lt; n</code>, but <code>or.elim</code> doesn't work since the result isn't a Prop, any help appreciated. (Simplified example - the definition of <code>rset</code> shouldn't matter at all, but it has type <code>rset : ‚Ñï ‚Üí Œ† (X : Type u_2) [_inst_3 : fintype X], Type u_2</code>):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">f1</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kn\">constant</span> <span class=\"n\">f2</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">decompose</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"err\">ùíú</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">hr2</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"c1\">-- I want decompose A n _ = f1 n A</span>\n<span class=\"c1\">--    and decompose A r _ = (f1 r A) ‚à™ f2 (decompose A (r+1) _)</span>\n</pre></div>",
        "id": 181608982,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574396368
    },
    {
        "content": "<p><code>If then else</code> doesn't work for me, since in the <code>then</code> part I lose the proof that <code>r = n</code>, which I need to make it typecheck</p>",
        "id": 181609042,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574396421
    },
    {
        "content": "<p>Ooh <code>dite</code> looks about right...</p>",
        "id": 181609058,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574396495
    },
    {
        "content": "<p>Indeed <code>dite</code> is or elimination into type. I remember the day this dawned on me :-)</p>",
        "id": 181614581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574406101
    },
    {
        "content": "<p>Let's also repeat that you can write if ... then ... else... also keeping the assumption, using <code>if h : ... then ... else ...</code>.</p>",
        "id": 181619685,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574413097
    },
    {
        "content": "<p>I'm struggling with this definition still - there seems to be a couple of factors making this awkward... It's kind of defined inductively downward, starting from r=n and going down to r=0. So I'm trying first to define a flipped version, with <code>k = n-r</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">decompose&#39;</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">f1</span> <span class=\"n\">n</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hk</span> <span class=\"o\">:=</span> <span class=\"n\">f1</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"err\">‚à™</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">(</span><span class=\"n\">decompose&#39;</span> <span class=\"n\">k</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>but I'm getting the error </p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  f2 (decompose&#39; k ?m_1)\nterm\n  decompose&#39; k ?m_1\nhas type\n  finset (rset (n - k) X)\nbut is expected to have type\n  finset (rset (n - (k + 1) + 1) X)\n</pre></div>\n\n\n<p>Now I'd usually just use <code>rw</code> to sort this out - but I'd have to go into tactic mode for that first and it might be awkward to prove things about this definition then. I can't get <code>‚ñ∏</code> to work either, it gives some confusing messages about motives. </p>\n<p>Alternatively I'd be interested if this definition could be given downwards instead - the things I tried didn't work...</p>",
        "id": 181630190,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574422988
    },
    {
        "content": "<p>I feel like doing a cast in the above definition is unavoidable since <code>(n-k) != (n - (k+1) + 1) </code> when <code>n=k</code>, which is fine because <code>hk : k+1 &lt;= n</code> but still requires reasoning.</p>",
        "id": 181633786,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1574426841
    },
    {
        "content": "<p>That's true and that suggests to me that your types are overly dependent. You might want to separate them into types that you don't have to rewrite so much and a proposition on those types that adds the nuances that you now encode with dependent types.</p>",
        "id": 181633894,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1574426945
    },
    {
        "content": "<p>It's pretty disheartening that dependent types seem to cause more problems than they solve in situations like this.</p>",
        "id": 181634006,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1574427033
    },
    {
        "content": "<p>You might be able to write it out as upward induction by using wf induction with the size being <code>n - r</code>.</p>",
        "id": 181634228,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1574427238
    },
    {
        "content": "<p>is this really an issue with dependent types, though?<br>\ni feel like carrying around an invariant everywhere you go like <code>rset</code> seems to do is rarely the right thing to do anyways because you always need to ensure that it is maintained.</p>",
        "id": 181634342,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1574427307
    },
    {
        "content": "<p>this is usually easy when you already have a full interface that maintains the invariant for you (e.g. as is the case for <code>finset</code>) but even then it can be cumbersome if you need to work harder in order to use the interface (e.g. mapping over a finset requires injectivity)</p>",
        "id": 181634582,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1574427502
    },
    {
        "content": "<blockquote>\n<p>this is usually easy when you already have a full interface that maintains the invariant for you (e.g. as is the case for <code>finset</code>) </p>\n</blockquote>\n<p>Even in this case, a lot of the reasoning is encapsulated in the <code>multiset</code> module. This api is carefully layered, separating invariants and maintaining them when it is convenient and relevant.</p>\n<blockquote>\n<p>but even then it can be cumbersome if you need to work harder in order to use the interface (e.g. mapping over a finset requires injectivity)</p>\n</blockquote>\n<p>welll ... <code>finset</code> has <code>image</code> which does not require infectivity. Some apis aren't great to work with but I think this one does a great job.</p>",
        "id": 181634814,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1574427684
    },
    {
        "content": "<p>I would attempt to show you how to fix the issue in this case but there are so many undefined variables that I can't cut and paste easily :-/</p>",
        "id": 181635212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574427972
    },
    {
        "content": "<blockquote>\n<p>welll ... <code>finset</code> has <code>image</code> which does not require infectivity. Some apis aren't great to work with but I think this one does a great job.</p>\n</blockquote>\n<p>i agree!</p>",
        "id": 181635234,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1574427990
    },
    {
        "content": "<p>i did not know about <code>image</code>. <code>finset</code> is definitely not a good example to choose (edit: for me quibbling about it being hard to maintain invariants).</p>",
        "id": 181635334,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1574428080
    },
    {
        "content": "<blockquote>\n<p>You might be able to write it out as upward induction by using wf induction with the size being <code>n - r</code>.</p>\n</blockquote>\n<p>Yeah, this was the idea of the flipped version with <code>k = n-r</code></p>",
        "id": 181635814,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574428430
    },
    {
        "content": "<blockquote>\n<p>I would attempt to show you how to fix the issue in this case but there are so many undefined variables that I can't cut and paste easily :-/</p>\n</blockquote>\n<p>I hoped giving <code>f1</code> and <code>f2</code> as constants would help copy-pasting, but I'll abstract a bit more</p>",
        "id": 181635890,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574428465
    },
    {
        "content": "<blockquote>\n<p>i did not know about <code>image</code>. <code>finset</code> is definetly not a good example to choose.</p>\n</blockquote>\n<p>I actually really like the examples of <code>finset</code> and <code>finmap</code> for API designed because of how carefully layered they are. They also show two different directions. <code>finset</code> is an invariant layered on top of a quotient. In a way, <code>finmap</code> is also an invariant on top of a quotient also because it's defined in terms of <code>multimap</code> but most useful lemmas relate <code>finmap</code> to <code>alist</code> and makes the design upside down: a quotient on top of an invariant.</p>",
        "id": 181635896,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1574428470
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">constant</span> <span class=\"n\">f1</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kn\">constant</span> <span class=\"n\">f2</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">decompose&#39;</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">f1</span> <span class=\"n\">n</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hk</span> <span class=\"o\">:=</span> <span class=\"n\">f1</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"err\">‚à™</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">(</span><span class=\"n\">decompose&#39;</span> <span class=\"n\">k</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- I want decompose A n _ = f1 n A</span>\n<span class=\"c1\">--    and decompose A r _ = (f1 r A) ‚à™ f2 (decompose A (r+1) _)</span>\n<span class=\"c1\">-- so I&#39;m using decompose A r = decompose&#39; A (n-r)</span>\n</pre></div>\n\n\n<p>This should be copy-paste-able</p>",
        "id": 181636171,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574428676
    },
    {
        "content": "<p>What is the definition of <code>rset</code>?</p>",
        "id": 181636472,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1574428847
    },
    {
        "content": "<p>Other attempt which also doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">decompose</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">A</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">=</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">f1</span> <span class=\"n\">r</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n  <span class=\"k\">assume</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">k2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"err\">‚Äπ</span><span class=\"n\">r</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span><span class=\"err\">‚Ä∫</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"n\">r</span> <span class=\"err\">ùíú</span><span class=\"o\">)</span> <span class=\"err\">‚à™</span> <span class=\"n\">f2</span> <span class=\"o\">(</span><span class=\"n\">decompose</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 181636504,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574428873
    },
    {
        "content": "<p>I don't believe it should matter for this, but </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">powerset_len</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">elems</span> <span class=\"n\">X</span><span class=\"o\">)}</span>\n</pre></div>\n\n\n<p>I've got ~300 lines of other stuff using this definition which work nicely together</p>",
        "id": 181636534,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574428909
    },
    {
        "content": "<p>oh sorry! I missed the earlier part of the discussion</p>",
        "id": 181637206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574429413
    },
    {
        "content": "<p>What if you broke down this definition into two parts:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">f1</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kn\">constant</span> <span class=\"n\">f2</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">decompose&#39;</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">f1</span> <span class=\"n\">n</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hk</span> <span class=\"o\">:=</span> <span class=\"n\">f1</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"err\">‚à™</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">(</span><span class=\"n\">decompose&#39;</span> <span class=\"n\">k</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">decompose_powerset_len</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">decompose</span> <span class=\"n\">A</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">powerset_len</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">elems</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c\">/-</span><span class=\"cm\"> put proof here -/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">decompose</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">decompose&#39;</span> <span class=\"n\">A</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">attach</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"err\">$</span> <span class=\"bp\">Œª</span> <span class=\"bp\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">hx</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">decompose_powerset_len</span> <span class=\"n\">A</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"bp\">‚ü©</span>\n</pre></div>",
        "id": 181638141,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1574430195
    },
    {
        "content": "<p>The alternative, as <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> noted is to use cast but this is only pushing the problem further down the line. When you use your definition for rewriting, you're going to find that you have <code>cast</code> popping up in inconvenient locations.</p>",
        "id": 181638300,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1574430313
    },
    {
        "content": "<p>So you're suggesting to change the types of <code>f1</code> and <code>f2</code> as well?</p>",
        "id": 181638333,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574430338
    },
    {
        "content": "<p>If possible I'd really prefer not to change the type of <code>f2</code>, it's kind of fundamental to the problem at hand</p>",
        "id": 181638404,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574430373
    },
    {
        "content": "<p>Yes or at least provide a version without the <code>rset</code>.</p>",
        "id": 181638410,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1574430379
    },
    {
        "content": "<p>Oh!</p>",
        "id": 181638414,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574430388
    },
    {
        "content": "<p>I see, and provide a lemma saying that if the source has the restricted type then the target does too</p>",
        "id": 181638437,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574430411
    },
    {
        "content": "<p><code>f2</code> looks a bit more challenging to change than <code>f1</code> but I can't say for sure. I don't have the definition</p>",
        "id": 181638469,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1574430435
    },
    {
        "content": "<p>That's right</p>",
        "id": 181638477,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1574430443
    },
    {
        "content": "<p>Changing this is gonna mean changing a lot of stuff :(</p>",
        "id": 181638636,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574430572
    },
    {
        "content": "<p>(the details are here: <a href=\"https://github.com/b-mehta/lean-experiments/blob/master/src/kruskal_katona.lean#L155\" target=\"_blank\" title=\"https://github.com/b-mehta/lean-experiments/blob/master/src/kruskal_katona.lean#L155\">https://github.com/b-mehta/lean-experiments/blob/master/src/kruskal_katona.lean#L155</a>. <code>f2</code> is the same as <code>shadow</code>)</p>",
        "id": 181638661,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574430599
    },
    {
        "content": "<p>But I think I see the general design principle here: definitions and functions shouldn't have restricted types, and we instead move the restrictions to the lemmas about our definitions and functions. Is this about right?</p>",
        "id": 181638812,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574430689
    },
    {
        "content": "<p>That's a bit oversimplified. One time the restrictions are helpful is when the constraints don't change much throughout your formula. A take away lesson I'd rather give is: understand the ups and down of intrinsic invariant (dependent types and subtypes) versus extrinsic constraints and consider using one when the other is leading to painful proofs</p>",
        "id": 181639141,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1574430896
    },
    {
        "content": "<p>I think the restrictions are helpful in my case, then - the proofs using <code>f2</code> weren't particularly painful</p>",
        "id": 181639490,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574431096
    },
    {
        "content": "<blockquote>\n<p>I would attempt to show you how to fix the issue in this case but there are so many undefined variables that I can't cut and paste easily :-/</p>\n</blockquote>\n<p>I can't do it :-/. Here are my efforts:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">omega</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">constant</span> <span class=\"n\">f1</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kn\">constant</span> <span class=\"n\">f2</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_union</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">stupid</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">t</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">decompose&#39;</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">f1</span> <span class=\"n\">n</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hk</span> <span class=\"o\">:=</span> <span class=\"n\">f1</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"err\">‚à™</span> <span class=\"o\">(</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">clear</span> <span class=\"n\">decompose&#39;</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">omega</span><span class=\"o\">,</span> <span class=\"kn\">end</span><span class=\"o\">,</span> <span class=\"c1\">-- ??</span>\n<span class=\"c1\">--    (f2 (stupid _ _ h (decompose&#39; k (le_trans (nat.le_succ k) hk) : finset (rset (n - k) X)) : finset (rset (n - (k + 1) + 1) X))))</span>\n    <span class=\"k\">let</span> <span class=\"n\">temp</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">decompose&#39;</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">hk</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n    <span class=\"bp\">@</span><span class=\"n\">f2</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">temp</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">))))</span>\n</pre></div>\n\n\n<p>The commented out line works fine but involves a stupid function. Without it I'm surprised I can't get the stupid triangle to work and I'm also surprised that <code>omega</code> wouldn't work without a lot of coaxing. I still have a lot to learn :-/</p>",
        "id": 181639558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574431162
    },
    {
        "content": "<p><code>noncomputable</code>! But this thing should be computable</p>",
        "id": 181639722,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574431251
    },
    {
        "content": "<p>Is that because of the instance I added? I couldn't get union to work</p>",
        "id": 181639783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574431290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Are you using a recent mathlib? Seul fixed some of the issues with coaxing omega last month.</p>",
        "id": 181639786,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574431291
    },
    {
        "content": "<p>I hope so because I just submitted a PR</p>",
        "id": 181639861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574431324
    },
    {
        "content": "<p>Oh the union should work without an instance I think</p>",
        "id": 181639868,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574431340
    },
    {
        "content": "<p>Sorry I think that's my fault</p>",
        "id": 181639937,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574431392
    },
    {
        "content": "<p>Okay yeah that was my fault, since I abstracted away what <code>rset</code> was, it couldn't automatically derive <code>decidable_eq</code> for it, and so <code>finset (rset _ _)</code> didn't have <code>has_union</code></p>",
        "id": 181640400,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574431639
    },
    {
        "content": "<p>Changing the <code>constant rset</code> line to:<br>\n<code>def rset (r : ‚Ñï) (X) [fintype X] := {x : finset X // x ‚àà finset.powerset_len r (fintype.elems X)}</code> should make <code>has_union</code> work</p>",
        "id": 181640443,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574431678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> The stupid triangle only works to rewrite inside a Prop</p>",
        "id": 181645928,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574435264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I think the easiest approach is to define something along the lines of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">rset</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">r&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rset</span> <span class=\"n\">r&#39;</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚ü®</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"bp\">‚ü©</span>\n</pre></div>\n\n\n<p>and use it where you need to \"fix\" the size of an <code>rset</code></p>",
        "id": 181646524,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574435651
    },
    {
        "content": "<p>If you use <code>rw</code>, or equivalently <code>cast</code>/<code>eq.rec</code>, you'll be in for a world of pain later when you want to get out the actual <code>finset</code>.</p>",
        "id": 181646619,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574435725
    },
    {
        "content": "<p>By the way, writing <code>x ‚àà finset.powerset_len r (fintype.elems X)</code> as the property rather than <code>x.card = r</code> looks rather awkward to me.</p>",
        "id": 181646636,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574435741
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> I think the easiest approach is to define something along the lines of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">rset</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">r&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rset</span> <span class=\"n\">r&#39;</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚ü®</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"bp\">‚ü©</span>\n</pre></div>\n\n\n<p>and use it where you need to \"fix\" the size of an <code>rset</code></p>\n</blockquote>\n<p>Oh, this is what Kevin called a \"stupid function\"--but sometimes the stupid approach is the best?</p>",
        "id": 181646923,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574435924
    },
    {
        "content": "<p>I think Reid's definition looks better than mine because he's only using eq.rec in Prop land</p>",
        "id": 181647111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574436061
    },
    {
        "content": "<p>Oh yes, the definition is different</p>",
        "id": 181647969,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574436557
    },
    {
        "content": "<p>This is not the first time I've seen this issue and I should perhaps have been wise enough by now to come up with Reid's definition. <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I once wrote such a function when working with quotient groups -- I needed a map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi mathvariant=\"normal\">/</mi><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">G/H</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">G/K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> when I had a proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo>=</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">H=K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> and I did it in the same way that Reid suggested above.</p>",
        "id": 181648187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574436680
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> I think the easiest approach is to define something along the lines of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">rset</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">r&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rset</span> <span class=\"n\">r&#39;</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚ü®</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"bp\">‚ü©</span>\n</pre></div>\n\n\n<p>and use it where you need to \"fix\" the size of an <code>rset</code></p>\n</blockquote>\n<p>I like this, thanks!</p>",
        "id": 181716660,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574517055
    },
    {
        "content": "<blockquote>\n<p>By the way, writing <code>x ‚àà finset.powerset_len r (fintype.elems X)</code> as the property rather than <code>x.card = r</code> looks rather awkward to me.</p>\n</blockquote>\n<p>Ah this is a good point...</p>",
        "id": 181716670,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574517068
    },
    {
        "content": "<p>I'd made <code>rset_mk (A : finset X) (H : finset.card A = r) : rset r X </code> instead to get around this, but your way is a lot cleaner</p>",
        "id": 181716717,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574517135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I finally got around to rewriting everything with your suggestions, and managed to finish the main proof this was for! This was very instructive, thanks both</p>",
        "id": 182571191,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1575476413
    }
]