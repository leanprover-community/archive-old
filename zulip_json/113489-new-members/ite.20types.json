[
    {
        "content": "<p>To make this work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">my_zero</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)}</span>\n</code></pre></div>\n<p>I guess I have to supply a proof that <code>¬ (2 ≤ 1)</code>, but where?</p>",
        "id": 220282964,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608229917
    },
    {
        "content": "<p><code>by rw if_neg; [exact (0:int), norm_num]</code></p>",
        "id": 220283058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608229956
    },
    {
        "content": "<p>Hmm... this doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">my_zero</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">if_neg</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 220283407,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608230116
    },
    {
        "content": "<p>I think it should be <code>[exact (0:int), norm_num]</code></p>",
        "id": 220283651,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608230221
    },
    {
        "content": "<p><code>exact (0:int); norm_num</code> works. Thanks!</p>",
        "id": 220283987,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608230372
    },
    {
        "content": "<p>You also don't have to do it this way, you could use the definition <code>by exact {zero := (0 : ℤ)}</code> or <code>show has_zero ℤ, by apply_instance</code></p>",
        "id": 220284226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608230490
    },
    {
        "content": "<p>but this relies on definitional equality, so in some general situation, if you only have a proof of the condition of the <code>ite</code>, then these won't work</p>",
        "id": 220284464,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608230602
    },
    {
        "content": "<p><code>ite (2 ≤ 1) ℕ ℤ</code> is <em>definitionally</em> <code>ℤ</code>?</p>",
        "id": 220284587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608230648
    },
    {
        "content": "<p>So it is!</p>",
        "id": 220284623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608230668
    },
    {
        "content": "<p>as long as you're using the constructive <code>decidable</code> instance</p>",
        "id": 220284652,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608230680
    },
    {
        "content": "<p>Ah... I actually do want something more complicated than <code>2 ≤ 1</code>, more like this: <code>2^k ≤ 2^(2^(4-k)) - 1</code>.</p>",
        "id": 220284916,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608230790
    },
    {
        "content": "<p>I mean, it was always pretty unlikely someone would intentionally write <code>ite (2 ≤ 1) ℕ ℤ</code>.</p>",
        "id": 220285022,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608230845
    },
    {
        "content": "<p>I think you'll find the system fighting you at every step if you go down this path</p>",
        "id": 220285059,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608230870
    },
    {
        "content": "<p>probably a better approach is something like <code>{x : \\Z // 2^k ≤ 2^(2^(4-k)) - 1 -&gt; x &gt;= 0}</code></p>",
        "id": 220285163,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608230909
    },
    {
        "content": "<p>Oh... so the <code>x &gt;= 0</code> is to choose between <code>\\N</code> and <code>\\Z</code>? How about choosing between arbitrary types there?</p>",
        "id": 220285460,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608231070
    },
    {
        "content": "<p>well, I might be extracting the wrong assumptions from your choice of <code>N</code> and <code>Z</code> then</p>",
        "id": 220285506,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608231102
    },
    {
        "content": "<p>like I'm assuming you're next going to ask how to define <code>has_add</code>, and then how to prove that <code>x + 0 = x</code></p>",
        "id": 220285528,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608231115
    },
    {
        "content": "<p>another option is to use an inductive type with constructors for <code>N</code> and <code>Z</code></p>",
        "id": 220285612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608231137
    },
    {
        "content": "<p>I actually want more complicated types than N and Z, it was just a minimal (not) working example</p>",
        "id": 220285646,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608231155
    },
    {
        "content": "<p>or other types</p>",
        "id": 220285674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608231172
    },
    {
        "content": "<p>or maybe an inductive family that bakes this <code>2^k ≤ 2^(2^(4-k)) - 1</code> condition in somehow</p>",
        "id": 220285689,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608231177
    },
    {
        "content": "<p>yeah that's what I mean</p>",
        "id": 220285728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608231197
    },
    {
        "content": "<p>in fact, you might find that the assumption isn't necessary in some situations</p>",
        "id": 220285761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608231212
    },
    {
        "content": "<p>which means that the inductive type is actually a union of several different types in general, which may or may not be a problem</p>",
        "id": 220285809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608231237
    },
    {
        "content": "<p>Say, if we replace N and Z by arbitrary types U and V, what becomes of the <code>x &gt;= 0</code> condition in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">Z</span> <span class=\"bp\">//</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>?</p>",
        "id": 220286046,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608231362
    },
    {
        "content": "<p>this is an obviously useful condition which I don't think we have a way to express other than <code>\\ex (q : \\Q), x = q</code></p>",
        "id": 220286187,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608231419
    },
    {
        "content": "<p>apparently we have a definition <code>irrational</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 220286263,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608231474
    },
    {
        "content": "<p>oh with the new version you can't do it this way, of course</p>",
        "id": 220286485,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608231576
    },
    {
        "content": "<p>this is a danger of \"minimal\", it encourages answerable questions, which is good, but they might not have too much relevance to the real question</p>",
        "id": 220286530,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608231600
    },
    {
        "content": "<p>How about <code>ite (2^k ≤ 2^(2^(4-k)) - 1) U V</code> where <code>U</code> and <code>V</code> are types... is it bad to use <code>ite</code> here?<br>\n(Sorry for all the edits.)</p>",
        "id": 220286652,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608231647
    },
    {
        "content": "<p>And of course the person with the question can't be expected to preserve exactly the relevant aspects of the question, otherwise they would probably be able to answer it themselves</p>",
        "id": 220286679,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608231664
    },
    {
        "content": "<p>It's probably never a good idea to use <code>ite</code> on types</p>",
        "id": 220286935,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608231798
    },
    {
        "content": "<p>This sounds similar to my topic about using <code>sum.elim U V</code> as a type...</p>",
        "id": 220287196,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608231941
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 220287201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608231943
    },
    {
        "content": "<p>How about this: how to implement types U_1, ... U_n where if <code>(2^k ≤ 2^(2^(n-k)) - 1)</code> then <code>U_k= fin k</code>(say) and otherwise <code>U_k = finset (fin k)</code> (say)</p>",
        "id": 220287450,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608232082
    },
    {
        "content": "<p>well, hopefully you don't care about actual equality of types</p>",
        "id": 220288384,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608232517
    },
    {
        "content": "<p>one possibility is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"n\">n</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"n\">n</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 220288544,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608232586
    },
    {
        "content": "<p>but really, the question can't be answered from this perspective</p>",
        "id": 220288576,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608232605
    },
    {
        "content": "<p>Types describe what you can do with something, and we have no idea what you want to do with these U_k</p>",
        "id": 220288629,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608232631
    },
    {
        "content": "<p>It's hard enough to figure out the right definitions when you know what you're doing (literally)</p>",
        "id": 220288823,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608232723
    },
    {
        "content": "<p>That looks promising, although I get <code>invalid return type</code></p>",
        "id": 220289033,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608232820
    },
    {
        "content": "<p>It should just be <code>U</code> there, not <code>U n k</code></p>",
        "id": 220289086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608232842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  well briefly, I want to prove things about elements of the type <code>Σ k, U k</code>. Maybe your solution will do the trick!</p>",
        "id": 220289641,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608233086
    },
    {
        "content": "<p>You can adapt the type reid gave to incorporate the sigma too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk₁</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">U</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk₂</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">U</span>\n</code></pre></div>",
        "id": 220290102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608233293
    },
    {
        "content": "<p>if you only need this sigma type then you can just use off-the-shelf types</p>",
        "id": 220290130,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608233306
    },
    {
        "content": "<p><code>(Σ k (H : 2^k ≤ 2^(2^(n-k)) - 1), fin k) ⊕ (Σ k (H : ¬ 2^k ≤ 2^(2^(n-k)) - 1), finset (fin k))</code></p>",
        "id": 220290206,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608233351
    },
    {
        "content": "<p>That said, in a particular application you might want to use a custom type to get more meaningful names than <code>sum.inr</code></p>",
        "id": 220290403,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608233448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> that looks good although is there some typo?</p>",
        "id": 220300994,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608238469
    },
    {
        "content": "<p>Do you mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>?</p>",
        "id": 220301219,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608238575
    },
    {
        "content": "<p>You want to write your own definition that takes an <code>x</code> and returns the <code>k</code>. Here are some examples on how to do this, depending on how you choose to define the type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"c1\">-- Reid's example (fixed)</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_type</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_k</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">my_type</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">k</span>\n\n<span class=\"c1\">-- another way to define `k`</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_k_alternate</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">my_type</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">sum.elim</span> <span class=\"n\">psigma.fst</span> <span class=\"n\">psigma.fst</span> <span class=\"n\">x</span>\n\n\n<span class=\"c1\">-- maybe more convenient?</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_type'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">//</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">⊕</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_k'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">my_type'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">x.1</span>\n\n<span class=\"c1\">-- Mario's example</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk₁</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">U</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk₂</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">U</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">U_k</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk₁</span> <span class=\"n\">k</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk₂</span> <span class=\"n\">k</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 220412442,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608317042
    },
    {
        "content": "<p>Awesome <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  . Had not heard of the modified Σ type <code>Σ'</code> before.</p>",
        "id": 220424135,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608323144
    },
    {
        "content": "<p>That syntax is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/psigma\">docs#psigma</a>, right?</p>",
        "id": 220430993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608327454
    }
]