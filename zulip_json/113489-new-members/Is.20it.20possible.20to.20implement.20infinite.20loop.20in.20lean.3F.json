[
    {
        "content": "<p>Is it possible to define such a function: <code>def find_first_true: (N -&gt; bool) -&gt; N</code>, which will find the first value of natural number that's true for a function?</p>",
        "id": 219361310,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607531465
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a> might be related</p>",
        "id": 219361394,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607531499
    },
    {
        "content": "<p>This is <code>nat.find</code>, but note the precondition: it needs to be not always false!</p>",
        "id": 219361523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607531546
    },
    {
        "content": "<p>Is it possible that this call runs forever?</p>",
        "id": 219361599,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607531581
    },
    {
        "content": "<p>all lean programs terminate</p>",
        "id": 219361655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607531600
    },
    {
        "content": "<p>halting problem solved :)</p>",
        "id": 219361690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607531621
    },
    {
        "content": "<p>so in lean, it's not possible to have infinite loop? lean cannot be used as general programming language?</p>",
        "id": 219361822,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607531667
    },
    {
        "content": "<p>you can write meta code and then it's just like Haskell</p>",
        "id": 219361875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607531689
    },
    {
        "content": "<p>but if it's not meta, the kernel checks that it terminates</p>",
        "id": 219361911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607531705
    },
    {
        "content": "<p>there are caveats, of course. But for non-<code>meta</code> functions it would break the logic (make it inconsistent) to have nonterminating functions</p>",
        "id": 219361929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607531713
    },
    {
        "content": "<p>OK...</p>",
        "id": 219362133,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607531783
    },
    {
        "content": "<p>consider that if you could write <code>find_first_true</code> in lean, you should be able to refine it to the signature <code>\\all f : N -&gt; bool, {n | f n = tt}</code>, and this is plainly false</p>",
        "id": 219362242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607531838
    },
    {
        "content": "<p>however if you don't care about computation or garbage values and just want a function with that signature, you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">nat.maybe_find</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"k\">then</span> <span class=\"n\">nat.find</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"mi\">37</span>\n</code></pre></div>",
        "id": 219362605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607531990
    }
]