[
    {
        "content": "<p>Currently, when I want to prove a lemma that deals indices in <code>fin (n + 2)</code>, I'm often relying on induction. However, it looks like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">matrix</span>\n\n<span class=\"n\">def</span> <span class=\"n\">swap_row</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">A</span> <span class=\"err\">∘</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n\n<span class=\"n\">def</span> <span class=\"n\">drop</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">minor</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">det&#39;</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">i</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">det&#39;</span> <span class=\"o\">(</span><span class=\"n\">drop</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">det&#39;</span> <span class=\"o\">(</span><span class=\"n\">drop</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">det_swap_match_eq_neg_det&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">det&#39;</span> <span class=\"o\">(</span><span class=\"n\">swap_row</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">det&#39;</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n      <span class=\"n\">wlog</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">H</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">H</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">H</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">HI</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">not_le_of_lt</span> <span class=\"n\">hl</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"n\">j</span> <span class=\"n\">HJ</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207271034,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597763187
    },
    {
        "content": "<p>I have to deconstruct the <code>fin n</code> into <code>obtain ⟨i, hi⟩ := i</code> and then induct on that. That makes dealing with existing lemmas about <code>fin n</code> much harder because of constantly having to convert back and forth between the <code>⟨i, hi⟩</code> syntax and the term itself.</p>",
        "id": 207271163,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597763255
    },
    {
        "content": "<p>Is there some <code>induction i using ...</code> that I don't know about? Or should I write one?</p>",
        "id": 207271220,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597763279
    },
    {
        "content": "<p>I've had some instances where I was able to invoke <code>induction i.val</code> but it didn't reduce the <code>i</code> to <code>0</code> and <code>_</code>. Not sure what it would have reduced it to.</p>",
        "id": 207271332,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597763336
    },
    {
        "content": "<p>Can you either give a simpler example or explanation of what you want to do or translate your Lean code into English?</p>",
        "id": 207271601,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597763463
    },
    {
        "content": "<p>You want to prove something for all <code>i : fin n</code> by induction on <code>i</code> I guess? What's the form of the argument?</p>",
        "id": 207271698,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597763510
    },
    {
        "content": "<p>I am trying to prove that the determinant of a matrix with two rows swapped is the negative of the determinant of the original matrix.</p>",
        "id": 207271765,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597763523
    },
    {
        "content": "<p>What's <code>det'</code>?</p>",
        "id": 207271827,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597763533
    },
    {
        "content": "<p><code>det'</code> is the Laplace expansion of the determinant</p>",
        "id": 207271888,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597763545
    },
    {
        "content": "<p>That expansion requires a row index to evaluate the determinant.</p>",
        "id": 207272010,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597763571
    },
    {
        "content": "<p>The argument is, either the rows that are swapped are (0, greater than 0), or (1 or greater, greater than 1)</p>",
        "id": 207272200,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597763634
    },
    {
        "content": "<p>off-topic, but don't we already basically have this theorem in the form of <code>det_permute</code>?</p>",
        "id": 207272269,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597763650
    },
    {
        "content": "<p>That's totally right. But this is a necessary proof on the way that <code>example : ∀ i, det' A i = det A := sorry</code></p>",
        "id": 207272463,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597763730
    },
    {
        "content": "<p>I want to prove that the Laplace expansion is a valid way of expressing <code>det</code>, that is the big picture.</p>",
        "id": 207272517,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597763760
    },
    {
        "content": "<p>So, I induct on the size of the matrix. The base case (which is dim 2) is just (0, 1) swap. That's easy and I have that.</p>",
        "id": 207272634,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597763797
    },
    {
        "content": "<p>I'm still confused by <code>det'</code>, the extra argument is which row to expand along? Why not always use the top row?</p>",
        "id": 207272766,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597763864
    },
    {
        "content": "<p>Then for (n + 2), the cases are (0, 1), (0, j + 1), (i + 1, j + 1). The (i + 1, j + 1) case is dealt with by the induction hypotheses for submatrices (from the n-induction) and the base cases.</p>",
        "id": 207272790,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597763876
    },
    {
        "content": "<p>Sure, one could always use the top row, and there would be a separate proof saying it does not matter which row you choose.</p>",
        "id": 207272896,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597763913
    },
    {
        "content": "<p>But to be able to prove that, <code>det'</code> has to be formulated to allow any row.</p>",
        "id": 207272938,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597763931
    },
    {
        "content": "<p>That might be useful if one had an explicit matrix with a very sparse row -- use that row.</p>",
        "id": 207272999,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597763953
    },
    {
        "content": "<p>Wouldn't it be easier to use <code>det</code> in the definition of <code>det'</code>?</p>",
        "id": 207273020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597763965
    },
    {
        "content": "<p>I guess I don't see the big picture</p>",
        "id": 207273218,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597764038
    },
    {
        "content": "<p>We also have <code>adjugate_mul : adjugate A ⬝ A = A.det • 1</code>which seems like roughly the statement you want to prove</p>",
        "id": 207273291,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597764079
    },
    {
        "content": "<p>If you calculate the <code>(i, i)</code> entry of <code>adjugate A ⬝ A</code> it's something like your <code>det' A i</code></p>",
        "id": 207273722,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597764257
    },
    {
        "content": "<p>You're right that they are very related definitions, that's part of what I want to try proving.</p>",
        "id": 207273881,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597764348
    },
    {
        "content": "<p>The Laplace expansion is a slow but sure way of actually calculating the <code>det</code>. The kernel knows:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`+`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`*`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`-`</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"n\">a</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">one</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">det&#39;</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]]</span> <span class=\"mi\">0</span> <span class=\"c\">/-</span><span class=\"cm\"> a * 1 * d + (b * (-1 * 1) * c + 0) -/</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]]</span> <span class=\"c\">/-</span><span class=\"cm\"> (0 + 1) * (a * (d * 1)) + (-(0 + 1) * (c * (b * 1)) + 0) -/</span>\n</code></pre></div>",
        "id": 207273991,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597764394
    },
    {
        "content": "<p>For those interested in computation, statements about speed or bounds of matrix calculation would need different examples. So, in this case, Laplace expansion versus anything more common.</p>",
        "id": 207274268,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597764510
    },
    {
        "content": "<p>In any case, is there a way to induction on terms of <code>fin n</code> without first destructing them?</p>",
        "id": 207274368,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597764552
    },
    {
        "content": "<p>isn't there a recursor for fin?</p>",
        "id": 207274793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597764747
    },
    {
        "content": "<p>How about this strategy for proving your overall result:</p>\n<ul>\n<li>Prove that <code>det</code> satisfies the same recursions as <code>det'</code>: you can evaluate <code>det</code> by expanding along any row. You can prove it using <code>adjugate_mul</code> (but check the proof of that first to see if it uses another version of this fact).</li>\n<li>Conclude that <code>det' = det</code> by induction on <code>n</code>.</li>\n</ul>",
        "id": 207275293,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597764979
    },
    {
        "content": "<p>you can also skip step 2</p>",
        "id": 207275361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597765026
    },
    {
        "content": "<p>Yes, but if you specifically want to do this computation with <code>#reduce</code> or <code>#eval</code> for some reason then you can also not skip it</p>",
        "id": 207275727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597765207
    },
    {
        "content": "<p>but you also shouldn't use exponential algorithms for that</p>",
        "id": 207275815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597765265
    },
    {
        "content": "<p>Let's say someone was writing a <code>Linear Algebra Game</code> without all of mathlib around.</p>",
        "id": 207275979,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597765350
    },
    {
        "content": "<p>then you wouldn't have <code>det</code></p>",
        "id": 207276251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597765487
    },
    {
        "content": "<p>so the theorem couldn't be stated</p>",
        "id": 207276264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597765494
    },
    {
        "content": "<p>Sorry, I wasn't being clear. If in the game, the definition of <code>det</code> is the Laplace expansion, I'd still like to show the statement about how swapping rows negates the determinant value.</p>",
        "id": 207276544,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597765631
    },
    {
        "content": "<p>Without any reference to <code>det = sum over permutations of products of ...</code></p>",
        "id": 207276596,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597765656
    },
    {
        "content": "<p>Is <del>recursion</del> induction over <code>fin n</code> in general not suggested?</p>",
        "id": 207276692,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597765696
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.succ_rec\">docs#fin.succ_rec</a></p>",
        "id": 207276845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597765785
    },
    {
        "content": "<p>How is that used with the <code>induction</code> tactic? I've had difficulty understanding how <code>induction ... using ...</code> works.</p>",
        "id": 207277289,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597765985
    },
    {
        "content": "<p>Specifically, here are the errors I get:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">det&#39;</span> <span class=\"o\">(</span><span class=\"n\">swap_row</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">det&#39;</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"kn\">using</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_rec</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">induction tactic failed, argument #1 of major premise type</span>\n<span class=\"cm\">  fin (nat.succ n + 2)</span>\n<span class=\"cm\">is not a variable</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">R : Type u_1,</span>\n<span class=\"cm\">_inst_1 : field R,</span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">hn :</span>\n<span class=\"cm\">  ∀ (A : matrix (fin (n + 2)) (fin (n + 2)) R) (i j : fin (n + 2)), i ≠ j → det&#39; (swap_row A i j) i = -det&#39; A 0,</span>\n<span class=\"cm\">A : matrix (fin (n.succ + 2)) (fin (n.succ + 2)) R,</span>\n<span class=\"cm\">i j : fin (n.succ + 2),</span>\n<span class=\"cm\">h : i ≠ j</span>\n<span class=\"cm\">⊢ det&#39; (swap_row A i j) i = -det&#39; A 0</span>\n<span class=\"cm\">-/</span>\n\n    <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">det&#39;</span> <span class=\"o\">(</span><span class=\"n\">swap_row</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">det&#39;</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"kn\">using</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_rec_on</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid user defined recursor, type of the major premise &#39;i&#39; does not contain the recursor parameter &#39;i&#39;</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">R : Type u_1,</span>\n<span class=\"cm\">_inst_1 : field R,</span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">hn :</span>\n<span class=\"cm\">  ∀ (A : matrix (fin (n + 2)) (fin (n + 2)) R) (i j : fin (n + 2)), i ≠ j → det&#39; (swap_row A i j) i = -det&#39; A 0,</span>\n<span class=\"cm\">A : matrix (fin (n.succ + 2)) (fin (n.succ + 2)) R,</span>\n<span class=\"cm\">i j : fin (n.succ + 2),</span>\n<span class=\"cm\">h : i ≠ j</span>\n<span class=\"cm\">⊢ det&#39; (swap_row A i j) i = -det&#39; A 0</span>\n<span class=\"cm\">-/</span>\n\n    <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207286489,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597770481
    },
    {
        "content": "<p>Oh, I don't use <code>induction using</code> much because it's a little flaky. You can just use <code>refine fin.succ_rec_on i _ _ </code></p>",
        "id": 207287061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597770741
    },
    {
        "content": "<p>For the zero case, it does not provide the hypothesis that <code>i = 0</code>. Is there a way to do that?</p>",
        "id": 207287844,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597771071
    },
    {
        "content": "<p>I'm trying to emulate the hypothesis <code>i = 0</code> by reverting the hypotheses that mention <code>i</code>. But I get a type mismatch, because the newly introduced <code>N</code> does not match with the existing <code>n</code> if I don't also revert <code>j</code>. Is there a way to show that <code>N.succ = n.succ + 2</code> and replace occurrences of <code>N</code> with <code>n.succ + 1</code>? Because the introduced <code>hl</code> hypothesis isn't well-typed if that isn't the case.</p>",
        "id": 207299625,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597776779
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">wlog</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">wlog</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">],</span>\n      <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">H</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">H</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">H</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">revert</span> <span class=\"n\">hl</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_rec_on</span> <span class=\"n\">i</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">N</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">not_le_of_lt</span> <span class=\"n\">hl</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n        <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  not_le_of_lt hl</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  hl</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  @has_lt.lt (fin N.succ) (@fin.has_lt N.succ) j 0</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  @has_lt.lt (fin (@has_add.add nat nat.has_add (@has_add.add nat nat.has_add n.succ 1) 1))</span>\n<span class=\"cm\">    (@preorder.to_has_lt (fin (@has_add.add nat nat.has_add (@has_add.add nat nat.has_add n.succ 1) 1))</span>\n<span class=\"cm\">       (@partial_order.to_preorder (fin (@has_add.add nat nat.has_add (@has_add.add nat nat.has_add n.succ 1) 1))</span>\n<span class=\"cm\">          (@semilattice_inf.to_partial_order</span>\n<span class=\"cm\">             (fin (@has_add.add nat nat.has_add (@has_add.add nat nat.has_add n.succ 1) 1))</span>\n<span class=\"cm\">             (@lattice.to_semilattice_inf (fin (@has_add.add nat nat.has_add (@has_add.add nat nat.has_add n.succ 1) 1))</span>\n<span class=\"cm\">                (@lattice_of_decidable_linear_order</span>\n<span class=\"cm\">                   (fin (@has_add.add nat nat.has_add (@has_add.add nat nat.has_add n.succ 1) 1))</span>\n<span class=\"cm\">                   (@fin.decidable_linear_order</span>\n<span class=\"cm\">                      (@has_add.add nat nat.has_add (@has_add.add nat nat.has_add n.succ 1) 1)))))))</span>\n<span class=\"cm\">    j</span>\n<span class=\"cm\">    0</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">hn : ∀ (i j : fin (n + 2)), i ≠ j → true,</span>\n<span class=\"cm\">i j : fin (n.succ + 2),</span>\n<span class=\"cm\">N : ℕ,</span>\n<span class=\"cm\">hl : j &lt; 0</span>\n<span class=\"cm\">⊢ 0 ≠ j → true</span>\n<span class=\"cm\">-/</span>\n\n        <span class=\"o\">{</span>  <span class=\"o\">},</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207299797,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597776851
    },
    {
        "content": "<p>Here's how reverting <code>j</code> makes it work.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">wlog</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">],</span>\n      <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">H</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">H</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">H</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">revert</span> <span class=\"n\">hl</span> <span class=\"n\">h</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_rec_on</span> <span class=\"n\">i</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">N</span> <span class=\"n\">j</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">not_le_of_lt</span> <span class=\"n\">hl</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">sorry</span>  <span class=\"o\">},</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207299832,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597776873
    },
    {
        "content": "<p>I guess this is what <code>induction ... generalizing ...</code> does?</p>",
        "id": 207299857,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597776891
    },
    {
        "content": "<p>wait, you are doing two inductions over <code>n</code> here? is that deliberate?</p>",
        "id": 207300213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597777075
    },
    {
        "content": "<p>I wanted to induct over <code>i : fin (n + 2)</code></p>",
        "id": 207300288,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597777095
    },
    {
        "content": "<p>yeah but what does that mean</p>",
        "id": 207300305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597777104
    },
    {
        "content": "<p>And use a hypothesis that is valid for <code>fin (n + 1)</code></p>",
        "id": 207300345,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597777127
    },
    {
        "content": "<p><code>fin.succ_rec</code> is doing simultaneous induction over <code>i</code> and <code>n</code> in <code>i : fin n</code></p>",
        "id": 207300353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597777133
    },
    {
        "content": "<p>which you have to do in order to make something type correct</p>",
        "id": 207300389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597777151
    },
    {
        "content": "<p>Okay, so I will try to rearrange the <code>fin.succ_rec_on</code> to be the outermost layer, and induct on <code>n</code> inside.</p>",
        "id": 207300433,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597777178
    },
    {
        "content": "<p>the inner one can probably be a <code>cases</code></p>",
        "id": 207300474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597777200
    },
    {
        "content": "<p>Oh! Your code is broken because a previous tactic gave you a bad state</p>",
        "id": 207303654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597778555
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">wlog</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">revert</span> <span class=\"n\">hl</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_rec_on</span> <span class=\"n\">i</span> <span class=\"n\">sorry</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This gives an error on the <code>wlog</code> line only if the refine line is there</p>",
        "id": 207304220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597778885
    },
    {
        "content": "<p>the tactic state coming out of <code>wlog</code> is actually malformed</p>",
        "id": 207304264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597778910
    },
    {
        "content": "<p>so, avoid <code>wlog</code>?</p>",
        "id": 207305632,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597779593
    },
    {
        "content": "<p>I think it might be having trouble with the dependent type?</p>",
        "id": 207305737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597779623
    },
    {
        "content": "<p>Or do <code>wlog</code> only after all my induction steps?</p>",
        "id": 207305750,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597779630
    },
    {
        "content": "<p>it could also be a bug in <code>refine</code> i.e. the elaborator, but that seems less likely given how much use it gets</p>",
        "id": 207305849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597779692
    },
    {
        "content": "<p>actually that's exactly the case:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_rec_on</span> <span class=\"n\">i</span> <span class=\"n\">sorry</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 207306180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597779866
    },
    {
        "content": "<p>In fact I've seen this issue before, it is the same thing that <code>rw</code> says next to <code>motive is not type correct</code>. It attempted to generalize the goal and got something type incorrect, although it reports the error in a really weird way here</p>",
        "id": 207306446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597779979
    },
    {
        "content": "<p>More examples of weirdness:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  0</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  @fin.has_zero (n + 1)</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  has_zero (fin (n + 1).succ)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  has_zero (fin _x)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_rec_on</span> <span class=\"n\">i</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">N</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)))</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_rec_on</span> <span class=\"n\">i</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">N</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  absurd h (lt_irrefl 0)</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  lt_irrefl 0</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  not (@has_lt.lt ?m_1 (@preorder.to_has_lt ?m_1 ?m_2) 0 0)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  not (@has_lt.lt (fin N.succ) (@fin.has_lt N.succ) 0 0)</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">i : fin (n + 2),</span>\n<span class=\"cm\">N : ℕ,</span>\n<span class=\"cm\">h : 0 &lt; 0</span>\n<span class=\"cm\">⊢ true</span>\n<span class=\"cm\">-/</span>\n\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207306576,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597780045
    },
    {
        "content": "<p>My first example is your example, but the error is deferred if I don't specify the type of 0 on the <code>absurd</code> line.</p>",
        "id": 207306888,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597780190
    },
    {
        "content": "<p>Should this be a separate thread? I guess I'll go back to </p>\n<div class=\"codehilite\"><pre><span></span><code>      <span class=\"o\">{</span> <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n        <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n        <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"n\">j</span> <span class=\"n\">JH</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 207307125,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597780279
    },
    {
        "content": "<p>You basically should not call <code>fin.succ_rec_on</code> unless the object has type <code>i : fin n</code> where <code>n</code> is a variable. You should <code>generalize e : n + 2 = m</code> beforehand to ensure this if you have to put <code>n+2</code> in the theorem statement, but it would be even better if you avoided that</p>",
        "id": 207307131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597780280
    },
    {
        "content": "<p>Can't refer to <code>0</code> if it's of type <code>fin n</code>, only <code>fin (n + 1)</code> at best.</p>",
        "id": 207307248,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597780324
    },
    {
        "content": "<p>Just use a variable instead of <code>0</code></p>",
        "id": 207307318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597780360
    },
    {
        "content": "<p>you wanted to generalize that anyway, right?</p>",
        "id": 207307341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597780371
    },
    {
        "content": "<p>True. Thanks!</p>",
        "id": 207307350,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597780376
    },
    {
        "content": "<p>Doesn't your</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_rec_on</span> <span class=\"n\">i</span> <span class=\"n\">sorry</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>have <code>n</code> as a variable?</p>",
        "id": 207308007,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597780665
    },
    {
        "content": "<p>it does, but it did not revert <code>j</code></p>",
        "id": 207308498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597780875
    },
    {
        "content": "<p>the correct way to set up the induction is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_rec_on</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">IH</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">)</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 207308639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597780933
    },
    {
        "content": "<p>So something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i&#39;</span> <span class=\"n\">j&#39;</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A&#39;</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">det&#39;</span> <span class=\"o\">(</span><span class=\"n\">swap_row</span> <span class=\"n\">A&#39;</span> <span class=\"n\">i&#39;</span> <span class=\"n\">j&#39;</span><span class=\"o\">)</span> <span class=\"n\">j&#39;</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">det&#39;</span> <span class=\"n\">A&#39;</span> <span class=\"n\">i&#39;</span> <span class=\"o\">:=</span>\n<span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_rec_on</span> <span class=\"n\">i&#39;</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">j</span> <span class=\"n\">A</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">})</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">IH</span> <span class=\"n\">j</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">})</span> <span class=\"n\">j&#39;</span> <span class=\"n\">A&#39;</span>\n</code></pre></div>",
        "id": 207310038,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597781594
    },
    {
        "content": "<p>But basically, that also means that I can't also induct on <code>j</code> within.</p>",
        "id": 207310812,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597781987
    },
    {
        "content": "<p>you can case on <code>j</code></p>",
        "id": 207314832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597783978
    },
    {
        "content": "<p>One thing that's not clear to me is what the overall structure of your induction is. Suppose the theorem you want to prove is <code>P n i j</code>. What are the relations between the <code>P</code>'s at different arguments that you want to prove? Is it <code>i &lt; j -&gt; P n i j -&gt; P (n+1) (i+1) (j+1)</code> and <code>P (n+1) 0 0</code> or something else?</p>",
        "id": 207315092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597784114
    },
    {
        "content": "<p>Roughly following the proof here:<br>\n<a href=\"https://www.quora.com/What-is-the-proof-for-the-Laplace-expansion-for-calculating-determinants\">https://www.quora.com/What-is-the-proof-for-the-Laplace-expansion-for-calculating-determinants</a><br>\nbut I think this proof they outline has a circular argument.</p>",
        "id": 207316919,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597785031
    },
    {
        "content": "<p>Does <a href=\"https://github.com/leanprover-community/mathlib/issues/3869\">#3869</a> help at all for fin comparisons? Relatedly, can one use <code>\\bot</code> to refer to <code>0</code> and <code>\\top</code> for <code>fin.last _</code>?</p>",
        "id": 207557880,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597948488
    }
]