[
    {
        "content": "<p>Hi again,<br>\nStill playing around with various ways to define non-empty lists, this time following advice and using <code>V \\times list V</code> to be able to use library functions. I still would like to make inductive definitions using pattern matching (if only for practice), but I am getting complaints about well-founded relations,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">llist</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">V</span>\n\n<span class=\"n\">def</span> <span class=\"n\">simple</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,[]</span><span class=\"bp\">⟩</span>   <span class=\"o\">:=</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">w</span><span class=\"bp\">::</span><span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">simple</span> <span class=\"bp\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">l</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>What would be the proper way to do what I want? It would be very nice to avoid auxiliary functions and piling to_list and from_list, because that would push me towards defining an inductive type and having to reinvent the wheel...</p>",
        "id": 179092989,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1572041066
    },
    {
        "content": "<p>Unfortunately I haven't been able to solve your issue but <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\">this</a> is the doc page that's usually suggested when Lean has trouble proving something well-founded. Apologies if you've already seen it.</p>",
        "id": 179095308,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572043378
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">llist</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">V</span>\n\n<span class=\"n\">def</span> <span class=\"n\">simple</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,[])</span>   <span class=\"o\">:=</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">w</span><span class=\"bp\">::</span><span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">simple</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"err\">∘</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">]}</span>\n</pre></div>",
        "id": 179113664,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572074249
    },
    {
        "content": "<p>Thanks for the working version! Still the version with an auxiliary function,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">simple_l</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">∧</span> <span class=\"n\">simple_l</span> <span class=\"n\">xs</span>\n\n<span class=\"n\">def</span> <span class=\"n\">simple</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">simple_l</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>feels much simpler.  I'm ok with incantations about <code>measure_wf</code> that I don't understand (yet?) but I really would prefer not having to put them near the definition of <code>simple</code> because there are a lot of other things that I am defining in a similar way.</p>",
        "id": 179139487,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1572120364
    },
    {
        "content": "<p>Ah, in fact I still get an error with your version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span> <span class=\"n\">is</span> <span class=\"n\">decreasing</span><span class=\"o\">,</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_well_founded</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">llist</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_well_founded</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">llist</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"n\">llist</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">length</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)))</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"n\">The</span> <span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">contains</span> <span class=\"n\">the</span> <span class=\"n\">failure</span> <span class=\"n\">state</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">no</span> <span class=\"n\">goals</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">solved</span>\n</pre></div>",
        "id": 179140335,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1572121795
    },
    {
        "content": "<p>But this does:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">simple</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,[])</span>   <span class=\"o\">:=</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span> <span class=\"bp\">¬</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">w</span><span class=\"bp\">::</span><span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">simple</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"n\">using_well_founded</span> <span class=\"n\">wf_tacs</span>\n</pre></div>",
        "id": 179140424,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1572121919
    },
    {
        "content": "<p>Bryan's version works for me. Which version of Lean are you using?</p>",
        "id": 179140472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572121938
    },
    {
        "content": "<p>Ah, my version fails if I add <code>import data.list.basic</code>...</p>",
        "id": 179140493,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572122001
    },
    {
        "content": "<p>because <code>simp</code> gets too good.</p>",
        "id": 179140498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572122021
    },
    {
        "content": "<p>All right, explanation is in <code>mathlib/src/tactic/well_founded_tactics.lean</code></p>",
        "id": 179140563,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1572122070
    },
    {
        "content": "<p>Yep, you need to add a <code>dec_tac</code> line from that file:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">well_founded_tactics</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">llist</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">V</span>\n\n<span class=\"n\">def</span> <span class=\"n\">simple</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,[])</span>   <span class=\"o\">:=</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">w</span><span class=\"bp\">::</span><span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">simple</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"err\">∘</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">],</span>\n    <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">well_founded_tactics</span><span class=\"bp\">.</span><span class=\"n\">default_dec_tac&#39;</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 179140568,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572122097
    },
    {
        "content": "<p>I wonder if this issue with <code>default_dec_tac</code> described in <code>tactic/well_founded_tactics.lean</code> is something which ought to be addressed in 3.5? <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span></p>",
        "id": 179140892,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572122655
    },
    {
        "content": "<p>In the meantime, is there any way to attach the information to use <code>wf_tacs</code> to the type <code>llist V</code> rather than having to mention it with every inductive definition?</p>",
        "id": 179141035,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1572122892
    },
    {
        "content": "<p>Or to cheat by using a slightly more complicated measure instead of <code>list.length</code> so that the default tactic works again, but that would feel a little dirty ...</p>",
        "id": 179141046,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1572122954
    },
    {
        "content": "<p>I would be curious to know the answers to those questions too.</p>",
        "id": 179141056,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572123001
    },
    {
        "content": "<p>Like so:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">llist</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">V</span>\n<span class=\"kn\">instance</span> <span class=\"n\">llist_wf</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_well_founded</span> <span class=\"o\">(</span><span class=\"n\">llist</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"err\">∘</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">simple</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">llist</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,[])</span>   <span class=\"o\">:=</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">w</span><span class=\"bp\">::</span><span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">simple</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">l</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 179141121,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1572123093
    },
    {
        "content": "<p>What's the reason for <code>(λ n, n+n) </code>? I removed it and it still works for me.</p>",
        "id": 179141193,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572123223
    },
    {
        "content": "<p>Ah, that's the dirty trick to answer my second question, if I leave it out then it fails again with the \"no goals to be solved\" error</p>",
        "id": 179141247,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1572123294
    },
    {
        "content": "<p>Yes, you're right. I had some interfering definitions that confused me.</p>",
        "id": 179141255,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572123331
    },
    {
        "content": "<p><code>(\\lambda n, 2*n)</code> apparently is too transparent though</p>",
        "id": 179141305,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1572123373
    },
    {
        "content": "<p>I think <code>simple_l</code> is <code>list.nodup</code></p>",
        "id": 179142173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572124997
    },
    {
        "content": "<p>Yes it is! Hadn't grepped for that ...</p>",
        "id": 179142971,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1572126712
    }
]