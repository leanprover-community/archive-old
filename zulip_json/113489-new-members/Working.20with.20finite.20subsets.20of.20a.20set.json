[
    {
        "content": "<p>Hi everyone. I'm trying to figure out whether there is a \"standard\" way to work with finite sets using what already exists in mathlib.</p>\n<p>Specifically, I want to do some things with finite subsets of a given arbitrary subset of a type, and (eventually) to be able to prove lemmas by induction on the elements of a given finite subset.</p>\n<p>I can think of at least three ways to define this in lean. See the code below for the three possible definitions of the set of finite subsets <code>U</code> of a given set <code>S</code>. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finite_subsets_1</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span> <span class=\"bp\">|</span> <span class=\"n\">U</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">U</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finite_subsets_2</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span> <span class=\"bp\">|</span> <span class=\"n\">U</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"err\">↑</span><span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finite_subsets_3</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span> <span class=\"bp\">|</span> <span class=\"n\">U</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">L</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I'm sure there are some benefits and/or pitfalls with using one definition over another, and I hope someone with more experience with lean and mathlib can point be in the right direction! </p>\n<p>My initial guess is to use definition 3, since it allows to immediately access a list which enumerates the elements of the finite subset (possibly with repetition). I know that <code>finset</code> is defined as a subtype of <code>multiset</code> which is a quotient of <code>list T</code> so definition 2 is not far off from 3, and mathlib might have a better api for finsets. But I suspect that producing a finite subset with definition 2 would be more annoying due to the overhead necessary in defining <code>finset</code> from <code>list</code>.</p>",
        "id": 199943927,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591398776
    },
    {
        "content": "<p>I would suggest <code>finite_subsets_2</code>, except that you should forget about <code>U</code> and only use <code>V</code> (and <code>S</code> if you must)</p>",
        "id": 199946576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591401687
    },
    {
        "content": "<p>Using either <code>set.finite</code> or <code>finset</code> there is a recursion principle that allows you to prove theorems by induction by adding elements one at a time to the empty list. For <code>list</code> this is built in.</p>",
        "id": 199946680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591401800
    },
    {
        "content": "<blockquote>\n<p>would be more annoying due to the overhead necessary in defining finset from list</p>\n</blockquote>\n<p>This is the wrong way to think about it. The overhead has nothing to do with the stack of definitions that bring the target API down to the axioms, because these proofs are not \"run\" when you use them, they were proved once and now you reuse them. The overhead instead depends on how closely the provided API matches your use case</p>",
        "id": 199946796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591401955
    },
    {
        "content": "<p>(or, to turn it around, how easily you can adapt your use case to fit the provided API)</p>",
        "id": 199946881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591402032
    },
    {
        "content": "<p>Thanks Mario. I should mention that, unfortunately, in my use I don't think I can avoid the coersion from <code>finset T</code> to <code>set T</code>, since I have a function, say <code>f</code> which must be defined for all of <code>set T</code>, and I need to write down an axiom roughly similar to the shape of <code>my_axiom</code> in the code below:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">T&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">T&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">T&#39;</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T&#39;</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finite_subsets</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span> <span class=\"bp\">|</span> <span class=\"n\">U</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"err\">↑</span><span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">my_axiom</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">},</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">finite_subsets</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Anyway, I'll try to look through the finset api in mathlib. I did notice the <code>to_finset</code> function which which probably be enough for what I need anyway :)</p>",
        "id": 199948325,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591404049
    },
    {
        "content": "<p>I didn't mean avoid the coercion, I mean to avoid having a variable of type set</p>",
        "id": 199949382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591405669
    },
    {
        "content": "<p>like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">my_axiom</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">},</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"err\">↑</span><span class=\"n\">U</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">↑</span><span class=\"n\">U</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 199949444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591405759
    },
    {
        "content": "<p>Ah. Yes, I completely agree. Thanks!</p>",
        "id": 199950772,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591408088
    }
]