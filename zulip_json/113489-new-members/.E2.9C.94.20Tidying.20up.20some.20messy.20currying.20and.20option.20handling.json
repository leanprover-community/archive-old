[
    {
        "content": "<p>Further, if you want to avoid <code>get_or_else</code> for some reason (though it's probably fine):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">overlap_is_some</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l₁.tails.find</span> <span class=\"o\">(</span><span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">l₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l₁</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list.find</span><span class=\"o\">,</span> <span class=\"n\">list.nil_prefix</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list.find</span><span class=\"o\">],</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">overlap</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">option.get</span> <span class=\"o\">(</span><span class=\"n\">overlap_is_some</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 292190303,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659723546
    },
    {
        "content": "<p>Oh that's interesting! As a newb, I've not seen a definition structured quite like that before. It feels strange that the <code>def</code> itself doesn't actually \"do the work\" as it were, because the definition is part of the lemma. I'll give that a go and see if it feels more intuitive to manipulate, thanks!</p>",
        "id": 292190810,
        "sender_full_name": "Sam",
        "timestamp": 1659723829
    },
    {
        "content": "<p>What's going on is that the actual definition ends up in an implicit argument to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.get\">docs#option.get</a></p>",
        "id": 292191226,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659724039
    },
    {
        "content": "<p>Here's it with an auxiliary definition split out and the implicit argument made explicit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">overlap_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">l₁.tails.find</span> <span class=\"o\">(</span><span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">overlap_aux_is_some</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">overlap_aux</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">overlap_aux</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l₁</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list.find</span><span class=\"o\">,</span> <span class=\"n\">list.nil_prefix</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list.find</span><span class=\"o\">],</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">overlap</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">option.get</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">overlap_aux</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">overlap_aux_is_some</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 292191332,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659724087
    },
    {
        "content": "<p>I was just in the process of doing a similar <code>overlap_aux</code> version. I think I prefer that for readability, but I expect the style guide / experienced users would prefer the other version, right?</p>",
        "id": 292191617,
        "sender_full_name": "Sam",
        "timestamp": 1659724252
    },
    {
        "content": "<p>Don't let people who are allergic to keystrokes keep you from writing the more expanded version <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 292191665,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659724290
    },
    {
        "content": "<p>The main reason I folded it in was because I was avoiding <code>rw overlap_aux</code>, which isn't really something you need to avoid.</p>",
        "id": 292191766,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659724343
    },
    {
        "content": "<p>Hah, yeah I think I'm going to choose verbose clarity over \"nice\" brevity, at least until I get more comfortable with Lean.</p>",
        "id": 292192008,
        "sender_full_name": "Sam",
        "timestamp": 1659724486
    },
    {
        "content": "<p>Just one more thing - could you explain the <code>@option</code>? I think that use of <code>@</code> is a new concept for me, and I don't fully understand why that line doesn't work without it.</p>",
        "id": 292192101,
        "sender_full_name": "Sam",
        "timestamp": 1659724547
    },
    {
        "content": "<p>It simply means \"make all arguments explicit\". That function takes two implicit arguments and an explicit argument, so the <code>@</code> version takes three explicit arguments.</p>",
        "id": 292192697,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659724845
    },
    {
        "content": "<p>It's not necessary here since it's able to infer that the second argument must be <code>overlap_aux l₁ l₂</code> from the third argument, hence why <code>option.get (overlap_is_some l₁ l₂)</code> worked.</p>",
        "id": 292192765,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659724901
    },
    {
        "content": "<p>Ah, very nice! Thanks for all of your help <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> and <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>, you probably saved me an hour of blind tinkering there.</p>",
        "id": 292192911,
        "sender_full_name": "Sam",
        "timestamp": 1659724992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"428422\">Sam</span> has marked this topic as resolved.</p>",
        "id": 292193267,
        "sender_full_name": "Notification Bot",
        "timestamp": 1659725002
    }
]