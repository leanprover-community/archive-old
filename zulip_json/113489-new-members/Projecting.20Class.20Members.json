[
    {
        "content": "<p>Hello, I defined a class with two members, a binary operation and a unit. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">PMClass</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>Now, when defining the homomorphism between two instances of the class, I find that a difference in accessing <code>e</code> versus <code>op</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">pclasshom</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">p1.e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p2.e</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">PMClass.op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">PMClass.op</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>\n\n<p>where qualifying <code>e</code> with the class name does not type check, and qualifying <code>op</code> with the instance name does not type check. <br>\nWorth saying, that when changing <code>class</code> into <code>structure</code>, they can both be qualified by the instance name. <br>\nSo why do they behave differently?</p>",
        "id": 214636790,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1603748426
    },
    {
        "content": "<p>Can you give an example of some statement that doesn't type check with the definitions as you have them?</p>",
        "id": 214637062,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603748598
    },
    {
        "content": "<p>Since <code>e</code> does not have any explicit arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">PMClass.e</span>\n<span class=\"c1\">-- @[reducible] def PMClass.e : Π {m : Type} [c : PMClass m], m := ...</span>\n</code></pre></div>\n\n<p><code>p1.e</code> does not typecheck</p>",
        "id": 214637413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603748829
    },
    {
        "content": "<p>One of the main points of using classes is so that you don't need to manually write things like <code>p1.e</code>.  E.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">PMClass</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">PMClass</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">pclasshom</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PMClass</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PMClass</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 214637547,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603748903
    },
    {
        "content": "<p>Sure.. the following definition is not accepted</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">pclasshom</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">p1.e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p2.e</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">p1.op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p2.op</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>\n\n<p>And the following one too </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">pclasshom</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">PMClass.e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">PMClass.e</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">PMClass.op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">PMClass.op</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 214638168,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1603749280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Projecting.20Class.20Members/near/214637413\">said</a>:</p>\n<blockquote>\n<p>Since <code>e</code> does not have any explicit arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">PMClass.e</span>\n<span class=\"c1\">-- @[reducible] def PMClass.e : Π {m : Type} [c : PMClass m], m := ...</span>\n</code></pre></div>\n\n<p><code>p1.e</code> does not typecheck</p>\n</blockquote>\n<p>But <code>p1.e</code> actually typechecks, as in the <code>pres</code> axiom. <code>p1.op</code> is the one that doesn't.</p>",
        "id": 214638418,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1603749439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Projecting.20Class.20Members/near/214637547\">said</a>:</p>\n<blockquote>\n<p>One of the main points of using classes is so that you don't need to manually write things like <code>p1.e</code>.  E.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">PMClass</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">PMClass</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">pclasshom</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PMClass</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PMClass</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>\n\n</blockquote>\n<p>Are there any more strong reasons to use one of them over the other?</p>",
        "id": 214638480,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1603749480
    },
    {
        "content": "<p>If you don't use <code>[PMClass a]</code> you will always need to manually feed in the <code>PMClass</code> instance whenever you want to use <code>pclasshom</code>.</p>",
        "id": 214638562,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603749525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Projecting.20Class.20Members/near/214638562\">said</a>:</p>\n<blockquote>\n<p>If you don't use <code>[PMClass a]</code> you will always need to manually feed in the <code>PMClass</code> instance whenever you want to use <code>pclasshom</code>.</p>\n</blockquote>\n<p>like you would normally do with other theorem provers? I am just asking as my scope is more of uniformity across different systems.</p>",
        "id": 214638975,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1603749759
    },
    {
        "content": "<p>Actually, I'm a little surprised that this is okay:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PMClass</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">PMClass</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">pclasshom'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">p1.e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p2.e</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">p1.op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p2.op</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>\n\n<p>But this is not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">PMClass</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">pclasshom'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">p1.e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p2.e</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">p1.op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p2.op</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 214639014,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603749782
    },
    {
        "content": "<p>I always thought that <code>class foo ...</code> was equivalent to <code>structure foo ....</code> + <code>attribute [class] foo</code>, but I guess there are some subtle differences.</p>",
        "id": 214639072,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603749823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Projecting.20Class.20Members/near/214639014\">said</a>:</p>\n<blockquote>\n<p>Actually, I'm a little surprised that this is okay:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PMClass</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">PMClass</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">pclasshom'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">p1.e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p2.e</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">p1.op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p2.op</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>\n\n<p>But this is not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">PMClass</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">pclasshom'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">p1.e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p2.e</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">pres2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">p1.op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p2.op</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>\n\n</blockquote>\n<p>Absolutely, there is something that needs investigation here.</p>",
        "id": 214639182,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1603749890
    },
    {
        "content": "<blockquote>\n<p>I always thought that class foo ... was equivalent to structure foo .... + attribute [class] foo, but I guess there are some subtle differences.</p>\n</blockquote>\n<p><code>class foo</code> is equivalent to <code>@[class] structure foo</code>, not <code>structure foo ... attribute [class] foo</code>. The difference is that the former has the opportunity to change the definitions of the fields</p>",
        "id": 214645134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603754554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"358884\">Yasmine Sharoda</span> <a href=\"#narrow/stream/113489-new-members/topic/Projecting.20Class.20Members/near/214638418\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Projecting.20Class.20Members/near/214637413\">said</a>:</p>\n<blockquote>\n<p>Since <code>e</code> does not have any explicit arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">PMClass.e</span>\n<span class=\"c1\">-- @[reducible] def PMClass.e : Π {m : Type} [c : PMClass m], m := ...</span>\n</code></pre></div>\n\n<p><code>p1.e</code> does not typecheck</p>\n</blockquote>\n<p>But <code>p1.e</code> actually typechecks, as in the <code>pres</code> axiom. <code>p1.op</code> is the one that doesn't.</p>\n</blockquote>\n<p>It's not supposed to</p>",
        "id": 214645178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603754607
    },
    {
        "content": "<p>but there are some funny behaviors when projection notation is used on structure fields, I think lean gets confused and supplies it even though it makes no sense to</p>",
        "id": 214645261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603754678
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">PMClass</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">PMClass.e'</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">PMClass.e</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">PMClass.e</span>  <span class=\"c1\">-- def PMClass.e : Π {m : Type} [c : PMClass m], m</span>\n<span class=\"k\">#print</span> <span class=\"n\">PMClass.e'</span> <span class=\"c1\">-- def PMClass.e' : Π {m : Type} [c : PMClass m], m</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">c.e</span>  <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"n\">c.e'</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 214645426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603754848
    },
    {
        "content": "<p>The square brackets means that you are not supposed to supply the value. If you want to supply the value, mark it as a <code>structure</code>, and then the projections will have <code>c</code> as an explicit argument</p>",
        "id": 214645651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603755024
    },
    {
        "content": "<p>or to supply the value at a particular application, use <code>@</code>, as in <code>@PMClass.e _ c</code></p>",
        "id": 214645682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603755065
    },
    {
        "content": "<p>Context: <span class=\"user-mention\" data-user-id=\"358884\">@Yasmine Sharoda</span> and I work together - she's looking to have our theory generator produce Lean as well as Agda. The underlying question is \"class or structure or both?\"  In a generative context, it's just as cheap to generate both than choosing (unlike in a human context, where such redundancy is quite painful).  But to generate these, we need to know exactly what we should be generating!</p>\n<p>So <code>PMClass</code> is really a short-hand for \"the class version of Pointed Magma\", whose homomorphisms are the same as monoid homomorphisms, and so a good test case for questions.  Especially when oddities such as the ones documented above arise, making a proper exporter harder to write.</p>\n<p>It might be worth starting a separate thread (where?) to discuss the general design, i.e what should (for example)</p>\n<ul>\n<li>a Monoid</li>\n<li>a Monoid homomorphism</li>\n<li>the 'term language' induced by a Monoid? [There are a host of variants of this]</li>\n<li>a product Monoid</li>\n</ul>\n<p>all look like?</p>",
        "id": 214654360,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1603764349
    },
    {
        "content": "<p>a monoid should be a class, a monoid hom a structure, and a product monoid should be an instance</p>",
        "id": 214656089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603766715
    },
    {
        "content": "<p>the term language is probably an inductive</p>",
        "id": 214656108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603766743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Projecting.20Class.20Members/near/214645426\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">PMClass</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">PMClass.e'</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">PMClass.e</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">PMClass.e</span>  <span class=\"c1\">-- def PMClass.e : Π {m : Type} [c : PMClass m], m</span>\n<span class=\"k\">#print</span> <span class=\"n\">PMClass.e'</span> <span class=\"c1\">-- def PMClass.e' : Π {m : Type} [c : PMClass m], m</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">c.e</span>  <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"n\">c.e'</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>\n\n</blockquote>\n<p>Actually I tried this code on the web interface and it did not accept it. It was accepted when the body of <code>PMClass.e'</code> became <code>c.e</code>.  <br>\nThere really is something different about instance resolution of constants versus unary and binary operations.. As I am looking to automatically generate code, I want to have a better understanding on how this work. <br>\nMaybe referring me to material on classes versus structures would be helpful.</p>",
        "id": 214728586,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1603817317
    },
    {
        "content": "<p>Note that <code>PMClass.e</code> and <code>c.e</code> are using the dot in two different ways. The first one is a namespaced name, and the second one is projection notation (once upon a time this was written <code>c^.e</code> and I think that still works, but <code>.</code> is overloaded for both meanings now).</p>",
        "id": 214729040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603817482
    },
    {
        "content": "<p>The difference is not about unary vs binary, it's about whether the field takes an argument of type <code>m</code></p>",
        "id": 214729249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603817556
    },
    {
        "content": "<p>Do you have a link for the failed test? You might be running an old version of lean</p>",
        "id": 214729310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603817585
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/lean-web-editor/#code=class%20PMClass%20%28m%20%3A%20Type%29%20%3A%20Type%20%3A%3D%20%28e%20%3A%20m%29%0A%0A%40%5Breducible%5D%0Adef%20PMClass.e'%20%7Bm%20%3A%20Type%7D%20%5Bc%20%3A%20PMClass%20m%5D%20%3A%20m%20%3A%3D%20PMClass.e%0A%0A%23print%20PMClass.e%20%20--%20def%20PMClass.e%20%3A%20%CE%A0%20%7Bm%20%3A%20Type%7D%20%5Bc%20%3A%20PMClass%20m%5D%2C%20m%0A%23print%20PMClass.e'%20--%20def%20PMClass.e'%20%3A%20%CE%A0%20%7Bm%20%3A%20Type%7D%20%5Bc%20%3A%20PMClass%20m%5D%2C%20m%0A%0Avariables%20%7Bm%20%3A%20Type%7D%20%5Bc%20%3A%20PMClass%20m%5D%0A%23check%20c.e%20%20--%20ok%0A%23check%20c.e'%20--%20fail\">test</a></p>",
        "id": 214729401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603817629
    },
    {
        "content": "<p>Oh right, thanks to zulip you can also click \"View in Lean community playground\" in the top right of the code block</p>",
        "id": 214729638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603817734
    },
    {
        "content": "<p>With the original lean playground (the link scheme doesn't mix with markdown, but copy paste the below), which runs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">lean.version</span> <span class=\"c1\">-- (3,4,1)</span>\n</code></pre></div>\n\n<p>you get a <em>different</em> bug relating to how lean treats elaborates structure fields differently. Here's a better test showing the difference on lean 3.4.1:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">PMClass</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">PMClass.e'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">m</span><span class=\"o\">],</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">PMClass.e</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">PMClass.e</span>  <span class=\"c1\">-- def PMClass.e : Π {m : Type} [c : PMClass m], m</span>\n<span class=\"k\">#print</span> <span class=\"n\">PMClass.e'</span> <span class=\"c1\">-- def PMClass.e' : Π {m : Type} [c : PMClass m], m</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">c.e</span>  <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"n\">c.e'</span> <span class=\"c1\">-- fail</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">PMClass.e</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span>  <span class=\"c1\">-- fail</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">PMClass.e</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">PMClass</span> <span class=\"n\">m</span><span class=\"o\">],</span> <span class=\"n\">m</span><span class=\"o\">)</span>  <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">PMClass.e'</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 214730566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603818100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Projecting.20Class.20Members/near/214729310\">said</a>:</p>\n<blockquote>\n<p>Do you have a link for the failed test? You might be running an old version of lean</p>\n</blockquote>\n<p>Here is the <a href=\"https://leanprover.github.io/live/latest/#code=--%20Live%20javascript%20version%20of%20Lean%0A%0Aclass%20PMClass%20(m%20:%20Type)%20:%20Type%20:=%20(e%20:%20m)%0A%0A@%5Breducible%5D%0Adef%20PMClass.e'%20%7Bm%20:%20Type%7D%20%5Bc%20:%20PMClass%20m%5D%20:%20m%20:=%20PMClass.e%0A%0A#print%20PMClass.e%20%20--%20def%20PMClass.e%20:%20%CE%A0%20%7Bm%20:%20Type%7D%20%5Bc%20:%20PMClass%20m%5D,%20m%0A#print%20PMClass.e'%20--%20def%20PMClass.e'%20:%20%CE%A0%20%7Bm%20:%20Type%7D%20%5Bc%20:%20PMClass%20m%5D,%20m%0A%0Avariables%20%7Bm%20:%20Type%7D%20%5Bc%20:%20PMClass%20m%5D%0A#check%20c.e%20%20--%20ok%0A#check%20c.e'%20--%20fail\">code that fails</a>. Indeed it is version 3.4.1.. thanks for noticing that</p>",
        "id": 214730750,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1603818165
    },
    {
        "content": "<p>The lean community editor runs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">lean.version</span> <span class=\"c1\">-- (3,21,0)</span>\n</code></pre></div>\n\n<p>btw</p>",
        "id": 214731114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603818287
    },
    {
        "content": "<p>3.4.1 is about 2 years old now</p>",
        "id": 214731195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603818311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Projecting.20Class.20Members/near/214731195\">said</a>:</p>\n<blockquote>\n<p>3.4.1 is about 2 years old now</p>\n</blockquote>\n<p>Thanks for this clue.. as google takes one to the older interface.</p>",
        "id": 214731528,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1603818455
    },
    {
        "content": "<p>Just to be clear, what you are witnessing are (long-standing) bugs in lean, this isn't how implicit arguments are supposed to work</p>",
        "id": 214731633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603818486
    },
    {
        "content": "<p>One simple fix we often do is to restate axioms outside a structure, just like <code>PMClass.e'</code> here</p>",
        "id": 214731715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603818520
    },
    {
        "content": "<p>because the bug only occurs when you are referring to one of the fields themselves, not a wrapper definition around it</p>",
        "id": 214731831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603818578
    },
    {
        "content": "<p>But with the modern version, you only hit the bug if you do something you shouldn't be doing in the first place, which is to use projection notation on a variable of class type</p>",
        "id": 214732065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603818665
    },
    {
        "content": "<p>so it shouldn't cause problems for your code generation</p>",
        "id": 214732114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603818684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Projecting.20Class.20Members/near/214732065\">said</a>:</p>\n<blockquote>\n<p>But with the modern version, you only hit the bug if you do something you shouldn't be doing in the first place, which is to use projection notation on a variable of class type</p>\n</blockquote>\n<p>Yes, now that I shifted to the right version, things make more sense.. projecting from a class uses namespace, while from a structure uses the instance name.. <br>\nAre there any references comparing classes and structures that I can read to get more depth on that?</p>",
        "id": 214733276,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1603819192
    },
    {
        "content": "<p>Related to the same topic.. I get an error when projecting a class member in a function definition. I tried having a definition for <code>op</code> as suggested above but didn't help. Here is the <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20init.data.nat.basic%0Aimport%20init.data.fin.basic%0Aimport%20data.vector%0A%0Aclass%20monoidTh%20%28m%20%3A%20Type%29%20%3A%20Type%20%3A%3D%20%0A%20%20%28e%20%3A%20m%29%20%0A%20%20%28op%20%3A%20m%20-%3E%20m%20-%3E%20m%29%20%0A%20%20%28assoc%3A%20%E2%88%80%20%20x%20y%20z%20%3A%20m%2C%20op%20x%20%28op%20y%20z%29%20%3D%20op%20%28op%20x%20y%29%20z%29%20%0A%20%20%28lunit%20%3A%20%E2%88%80%20x%20%3A%20m%2C%20op%20e%20x%20%3D%20x%29%20%0A%20%20%28runit%20%3A%20%E2%88%80%20x%20%3A%20m%2C%20op%20x%20e%20%3D%20x%29%20%0A%0Aopen%20monoidTh%20%0A%0Ainductive%20OpenTermLang%20%28n%20%3A%20nat%29%20%28A%20%3A%20Type%29%20%3A%20Type%0A%7C%20var%20%3A%20fin%20n%20-%3E%20OpenTermLang%0A%7C%20singleton%20%3A%20A%20-%3E%20OpenTermLang%0A%7C%20e'%20%20%3A%20OpenTermLang%20%0A%7C%20op'%20%3A%20OpenTermLang%20-%3E%20OpenTermLang%20-%3E%20OpenTermLang%20%20%0A%0Aopen%20vector%20%28nth%29%0Aopen%20OpenTermLang%0A%0Adef%20monoidTh.opp%20%7Ba%20%3A%20Type%7D%20%7Bx%20%3A%20a%7D%20%7By%20%3A%20a%7D%20%5BmonoidTh%20a%5D%20%3A%20a%20%3A%3D%20monoidTh.op%20x%20y%0A%0Adef%20eval%20%7Bn%20%3A%20nat%7D%20%7Ba%20%3A%20Type%7D%20%3A%20monoidTh%20a%20-%3E%20vector%20a%20n%20-%3E%20OpenTermLang%20n%20a%20-%3E%20a%20%0A%7C%20_%20_%20%28singleton%20x%29%20%3A%3D%20x%20%0A%7C%20m%20_%20e'%20%3A%3D%20m.e%0A%7C%20m%20v%20%28op'%20x%20y%29%20%3A%3D%20m.op%20%28eval%20m%20v%20x%29%20%28eval%20m%20v%20y%29%20%0A%7C%20m%20v%20%28var%20x%29%20%3A%3D%20nth%20v%20x%20%0A%0A%20\">code</a></p>",
        "id": 214856146,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1603900279
    }
]