[
    {
        "content": "<p>Hello, Lean masters. </p>\n<p>I'm struggling to see how to complete the below term-style proof. My main issue is that <code>exists.intro</code> is expecting something like  <code>exists (x : A) (y : B),  &lt;expression&gt;</code>, whereas I have only seen examples of how to work with <code>exists (x : A), &lt;expression&gt;</code>.  </p>\n<p>The problem areas are marked as ① and ② in the below snipped.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`|`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">is_adherent</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"n\">def</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">is_adherent</span> <span class=\"n\">x</span> <span class=\"n\">X</span> <span class=\"o\">}</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">self_adherence1</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n   <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h₁</span> <span class=\"n\">ε</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n   <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n   <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n   <span class=\"n\">apply</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"c1\">-- Question: what to do at ① and ② below?</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">self_adherence2</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n   <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n   <span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n   <span class=\"k\">have</span> <span class=\"n\">adh</span><span class=\"o\">:</span> <span class=\"n\">is_adherent</span> <span class=\"n\">x</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n       <span class=\"k\">assume</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n       <span class=\"k\">assume</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n       <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span>  <span class=\"c1\">-- ①</span>\n       <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span><span class=\"n\">what</span> <span class=\"n\">goes</span> <span class=\"n\">here</span><span class=\"err\">?</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span>  <span class=\"c1\">-- ②</span>\n   <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">adh</span>\n</pre></div>\n\n\n<p>Any other tips or comments greatly welcomed.</p>",
        "id": 191837588,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585194151
    },
    {
        "content": "<p><code> exists (x : A) (y : B),  &lt;expression&gt;</code> is shorthand for <code> exists (x : A), exists (y : B),  &lt;expression&gt;</code></p>",
        "id": 191838024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585194790
    },
    {
        "content": "<p>Ah, perfect, thanks!</p>",
        "id": 191838130,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585194950
    },
    {
        "content": "<p>My confidence was premature. How would I apply that to this situation. My attempt: <code>have h2 : exists.intro x (exists.intro h₁ h₃),</code><br>\nMy confusion possibly lies in the fact that in <code>exists (x : A), exists (y : B), &lt;expression&gt;</code>, <code>y:B</code> is a function <code>λy. y∈X</code>.</p>",
        "id": 191839299,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585196845
    },
    {
        "content": "<p><code>∃y ∈ X</code> is shorthand for <code>∃ (y : _), ∃ (H: y ∈ X)</code></p>",
        "id": 191839412,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585197035
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`|`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">is_adherent</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"n\">def</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">is_adherent</span> <span class=\"n\">x</span> <span class=\"n\">X</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">self_adherence1</span> <span class=\"o\">(</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h₁</span> <span class=\"n\">ε</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">convert</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"bp\">⟩</span>\n\n<span class=\"c1\">-- Question: what to do at ① and ② below?</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">self_adherence2</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">adh</span><span class=\"o\">:</span> <span class=\"n\">is_adherent</span> <span class=\"n\">x</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"k\">assume</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">convert</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>  <span class=\"c1\">-- ①</span>\n  <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h₁</span> <span class=\"n\">h₃</span><span class=\"o\">),</span>  <span class=\"c1\">-- ②</span>\n<span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">adh</span>\n</pre></div>",
        "id": 191839505,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585197211
    },
    {
        "content": "<p>Working now! Thanks.</p>",
        "id": 191839832,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585197710
    },
    {
        "content": "<p>it is vexing to me that you use <code>norm_num</code> when there are no numbers involved</p>",
        "id": 191840318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585198468
    },
    {
        "content": "<p>I'm quite surprised that <code>convert</code> worked</p>",
        "id": 191840476,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585198759
    },
    {
        "content": "<p>Is it because <code>gt</code> is reducible?</p>",
        "id": 191884016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585229465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/exists.2Eintro.20with.20two.20'arguments'/near/191840318\" title=\"#narrow/stream/113489-new-members/topic/exists.2Eintro.20with.20two.20'arguments'/near/191840318\">said</a>:</p>\n<blockquote>\n<p>it is vexing to me that you use <code>norm_num</code> when there are no numbers involved</p>\n</blockquote>\n<p>You should just be using a simpset which doesn't mention <code>abs</code>, if <code>abs 0 = 0</code> is not part of your remit.</p>",
        "id": 191884386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585229638
    },
    {
        "content": "<p>Or is that current research? :-/</p>",
        "id": 191884506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585229679
    },
    {
        "content": "<p>Continuing with the same example, I had two queries related to the updated snippet (no more <code>norm_num</code> <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> ):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">self_adherence</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">closure</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h₁</span> <span class=\"n\">ε</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>  <span class=\"c1\">-- where h₂ : ε &gt; 0</span>\n <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>   <span class=\"c1\">-- ⊢|x - x| &lt; ε</span>\n <span class=\"n\">simp</span><span class=\"o\">,</span>  <span class=\"c1\">-- ⊢ 0 &lt;  ε</span>\n <span class=\"n\">exact</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>  <span class=\"c1\">-- ⊢ true</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<ol>\n<li>The <code>simp</code> tactic utilizes properties of the reals.  Where can one find this property? How could I use it manually without using <code>simp</code>? </li>\n<li><code>exact h₂</code> works without having to specify how  <code>&gt;</code> relates to <code>&lt;</code>. Where can one find the details of this?</li>\n</ol>",
        "id": 191970642,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585275229
    },
    {
        "content": "<ol>\n<li>You can use <code>squeeze_simp</code> to see (most of) the lemmas that <code>simp</code> used. For an even more detailed look, try putting <code>set_option trace.simplify.rewrite true</code> before the lemma. There's lots of info on <code>simp</code> and how it works <a href=\"https://leanprover-community.github.io/mathlib_docs/simp.html\" title=\"https://leanprover-community.github.io/mathlib_docs/simp.html\">here</a>.</li>\n</ol>",
        "id": 191970938,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585275625
    },
    {
        "content": "<ol start=\"2\">\n<li><a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/core.lean#L384\" title=\"https://github.com/leanprover-community/lean/blob/master/library/init/core.lean#L384\">Here's</a> where <code>&gt;</code> is defined in the core library. Note that it's defined in terms of <code>has_lt.lt</code>, and <code>&lt;</code> is just notation for that. Generally, Lean does a decent job of identifying when terms are identical up to unfolding definitions so it's not a huge surprise that <code>exact</code> works. In this case, the fact that <code>gt</code> is marked <code>reducible</code> makes the definition even more transparent, see <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#elaboration-hints\" title=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#elaboration-hints\">6.1 in TPiL</a>. Sometimes you have to explicitly use <code>change</code> first to turn one term into a more convenient form. I'm not really sure precisely what causes Lean not to recognize two terms as \"the same\" in those cases (and it's probably different things in different situations).</li>\n</ol>",
        "id": 191971380,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585276345
    },
    {
        "content": "<p>Those are the revelations I needed, thanks!</p>",
        "id": 191972494,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585278191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> This reminds me of our conversation about when it would make a difference if <code>&gt;</code> was a notation. This is a simplified version of the example here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- ok</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 191974183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585280856
    },
    {
        "content": "<p>Here's a variant using <code>rw</code>, with the same results:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_true_intro</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_true_intro</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- ok</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_true_intro</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 191974270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585280998
    },
    {
        "content": "<p>As noted by kenny, because of head symbol matching this is a bit different if the <code>gt</code> is not at the head:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- ok</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_true_intro</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- ok</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_true_intro</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- ok</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_true_intro</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- ok</span>\n</pre></div>",
        "id": 191974495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585281270
    },
    {
        "content": "<p>interesting!</p>",
        "id": 191974555,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585281361
    },
    {
        "content": "<p>one more for good measure:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">gt</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">gt</span><span class=\"o\">]</span> <span class=\"c1\">-- ok</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">gt</span><span class=\"o\">]</span> <span class=\"c1\">-- ok</span>\n</pre></div>",
        "id": 191974663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585281483
    },
    {
        "content": "<p>still, the point is that we don't want to explicitly be unfolding <code>gt</code></p>",
        "id": 191974674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585281511
    }
]