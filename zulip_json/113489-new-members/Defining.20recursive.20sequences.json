[
    {
        "content": "<p>Hi. I need help defining sequences in Lean like a_n = n *a_{n-1}  and a_1=1. How do I do this? <br>\nAnd for future references, where do I learn such things on my own. Like, for instance how do I see how the successor function (natural numbers) is defined?</p>",
        "id": 201076741,
        "sender_full_name": "Ben Nale",
        "timestamp": 1592343029
    },
    {
        "content": "<p>Have you looked at a tutorial? maybe <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> or the natural number game?</p>",
        "id": 201076993,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592343213
    },
    {
        "content": "<p>Section 7.4 here for the natural numbers<br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html</a></p>",
        "id": 201077013,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1592343230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20recursive.20sequences/near/201076993\">said</a>:</p>\n<blockquote>\n<p>Have you looked at a tutorial? maybe <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> or the natural number game?</p>\n</blockquote>\n<p>I finished the natural number game. And also couldn't find it in the tutorial :/</p>",
        "id": 201077100,
        "sender_full_name": "Ben Nale",
        "timestamp": 1592343263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"259857\">Dan Stanescu</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20recursive.20sequences/near/201077013\">said</a>:</p>\n<blockquote>\n<p>Section 7.4 here for the natural numbers<br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html</a></p>\n</blockquote>\n<p>Thank you</p>",
        "id": 201077122,
        "sender_full_name": "Ben Nale",
        "timestamp": 1592343282
    },
    {
        "content": "<p>You can make this definition using the equation compiler. Maybe chapter 8 of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> ?</p>",
        "id": 201077390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592343424
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/declarations.html#the-equation-compiler\">https://leanprover.github.io/reference/declarations.html#the-equation-compiler</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 201077525,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592343487
    },
    {
        "content": "<p>To answer your original question, a sequence of natural numbers is just a function from natural numbers to the natural numbers. Chapter 8 of \"Theorem Proving in Lean\" will explain how to write recursive definitions by pattern matching, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"c1\">-- junk value</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"c1\">-- base case</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">n</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">a</span> <span class=\"mi\">40</span>\n</code></pre></div>",
        "id": 201077557,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592343509
    },
    {
        "content": "<p>Nice! Thanks</p>",
        "id": 201077614,
        "sender_full_name": "Ben Nale",
        "timestamp": 1592343549
    },
    {
        "content": "<p>Is there any intuition for the difference between:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n\n<p>and </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">fib2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib2</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib2</span> <span class=\"n\">n</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>fib works, but fib2 is not in scope.</p>",
        "id": 202851480,
        "sender_full_name": "Ethan",
        "timestamp": 1593828841
    },
    {
        "content": "<p>You can't define recursive functions using a regular definition, you have to use the equation compiler form (like <code>fib</code>)</p>",
        "id": 202851543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593828912
    },
    {
        "content": "<p>If you write <code>def foo : type := ...</code> then <code>foo</code> is not in scope in <code>...</code></p>",
        "id": 202851548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593828952
    },
    {
        "content": "<p>but with <code>def foo : type | case := ...</code> then <code>foo</code> is in scope (although it is fake), and the equation compiler figures out how to turn it into a definition using recursors</p>",
        "id": 202851600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593829002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20recursive.20sequences/near/202851543\">said</a>:</p>\n<blockquote>\n<p>You can't define recursive functions using a regular definition, you have to use the equation compiler form (like <code>fib</code>)</p>\n</blockquote>\n<p>\"Equation compiler form\" is rather suggestive, but I will ask anyways: why is that so? What does it facilitate not permitting <code>fib2</code>?</p>",
        "id": 202853500,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1593832507
    },
    {
        "content": "<p>The \"equation compiler\" is a part of Lean's elaborator that is able to generate certain types of recursive functions automatically from some special \"pattern-matching\" syntax. Match expressions also use pattern-matching syntax, but just don't have access to the equation compiler. The equation compiler / pattern-matching syntax is discussed in most of chapter 8 of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> and match expressions are discussed in 8.8.</p>",
        "id": 202854091,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593833708
    },
    {
        "content": "<p>Oh, I see that I already mentioned that chapter of TPIL a few times above. Apologies if you already read it. Maybe I misunderstood your question?</p>",
        "id": 202854141,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593833780
    }
]