[
    {
        "content": "<p>Can I explicitly give a name to types of <code>x</code> and <code>y</code> in the recursive definition instead of the autogenerated <code>__mlocal__fresh...</code> in order to use them later in the equation? (Like <code>case</code> can do in tactic mode)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ty</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">ty</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ty</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">ty</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ty.comp</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 226992669,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1613753526
    },
    {
        "content": "<p>You can use <code>@</code> to make the types explicit and match on them</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ty</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">ty</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ty</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">ty</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">ty</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comp</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 226995766,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1613754699
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 226998651,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1613755940
    }
]