[
    {
        "content": "<p>Hi, I am Diana Kalinichenko, a CS undergrad from HSE Moscow interested in formal verification, type theory and related areas. I've done some simple stuff in Lean (natural numbers game and some tutorials) and I'm joining here to ask questions about more complicated stuff. I'm mainly interested in the \"verified programming\" aspect of Lean, but I think formalization of mathematics is also a cool thing. Also, I'd like to contribute to mathlib some day if there's anything that I can do!</p>",
        "id": 225017191,
        "sender_full_name": "Diana Kalinichenko",
        "timestamp": 1612360283
    },
    {
        "content": "<p>So, I'm having trouble proving a lemma. I've decided to implement a grow-only counter CRDT in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">GCounter</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inc</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">GCounter</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">GCounter</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">g.write</span> <span class=\"n\">index</span> <span class=\"bp\">$</span> <span class=\"n\">g.read</span> <span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"n\">value</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g₁</span><span class=\"o\">:</span> <span class=\"n\">GCounter</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span><span class=\"o\">:</span> <span class=\"n\">GCounter</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">GCounter</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">array.map₂</span> <span class=\"n\">max</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">value</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">GCounter</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">array.foldl</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Proving that (GCounter, merge) is a semilattice was easy, however I'm stuck on the following seemingly simple property:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inc_value_increasing</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">GCounter</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">value</span> <span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">value</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>When I try to rewrite everything by definition and then go on, I run into complicated expressions involving <code>d_array.iterate_aux</code> and other stuff. Could someone suggest a way to proceed here?</p>\n<p>I could also change the representation of GCounter to a vector and prove everything by induction, but then it would be a less computationally efficient, so I'd like to try keeping it an array.</p>",
        "id": 225020840,
        "sender_full_name": "Diana Kalinichenko",
        "timestamp": 1612361806
    },
    {
        "content": "<p>We don't have many lemmas about <code>array</code>, so you might have to develop some API to prove things about them.</p>",
        "id": 225024327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612363371
    },
    {
        "content": "<p>Looking at <code>list</code>, it has a bunch of lemmas about <code>foldl</code>, particularly <code>list.foldl_nil</code> and <code>list.foldl_cons</code>. Perhaps I should try proving analogous lemmas for <code>array</code> with respect to <code>push_back</code>.</p>",
        "id": 225026917,
        "sender_full_name": "Diana Kalinichenko",
        "timestamp": 1612364497
    },
    {
        "content": "<p>Since the lemmas aren't being used for computation, I would try to convert any <code>g.write</code> or <code>g.read</code> to the equivalent <code>list</code> op. Then you can use the oodles of list API we have</p>",
        "id": 225027318,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612364632
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/array.to_list_foldl\">docs#array.to_list_foldl</a></p>",
        "id": 225027951,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612364868
    },
    {
        "content": "<p>Thanks! Also, is there a tactic in Lean that could introduce <code>(array.to_list g)</code> as a separate variable so goals would be nicer?</p>",
        "id": 225029260,
        "sender_full_name": "Diana Kalinichenko",
        "timestamp": 1612365350
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#generalize\">tactic#generalize</a> work?</p>",
        "id": 225029867,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612365567
    },
    {
        "content": "<p>It introduces the variable, but it doesn't replace the expression with the new variable and <code>rw</code> fails with <code>rewrite tactic failed, motive is not type correct</code></p>",
        "id": 225030833,
        "sender_full_name": "Diana Kalinichenko",
        "timestamp": 1612365955
    },
    {
        "content": "<p>There are some annoyances here about <code>heq</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/array.to_list_to_array\">docs#array.to_list_to_array</a></p>",
        "id": 225035135,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612367685
    },
    {
        "content": "<p>Managed to rewrite everything using <code>conv</code></p>",
        "id": 225041127,
        "sender_full_name": "Diana Kalinichenko",
        "timestamp": 1612369941
    },
    {
        "content": "<p>There should be theorems about <code>read</code>-of-<code>write</code> on array</p>",
        "id": 225048740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612372918
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/array.read_write\">docs#array.read_write</a></p>",
        "id": 225048857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612372965
    }
]