[
    {
        "content": "<p>Hi !<br>\nI'm trying to write the image of a linear map.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.submodule</span>\n\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span>  <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">R</span> <span class=\"n\">E</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n<span class=\"n\">f</span>  <span class=\"bp\">''</span> <span class=\"n\">E</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span>  <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">R</span> <span class=\"n\">E</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n<span class=\"n\">f</span>  <span class=\"bp\">''</span> <span class=\"bp\">\\</span><span class=\"n\">top</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In the second case it works but the results is not a submodule. How can I get Im f as a submodule ?</p>\n<p>Thanks for the help!</p>",
        "id": 241627147,
        "sender_full_name": "Maxime Darrin",
        "timestamp": 1622886258
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span>  <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 241627242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622886458
    },
    {
        "content": "<p><code>E →ₗ[R] E</code> is notation for <code>linear_map R E E</code>, <code>submodule.map</code> is pushforward of submodules along a linear map, and <code>⊤</code> (top, not T) is the biggest submodule. I am rather surprised that there is no <code>submodule.range</code>.</p>",
        "id": 241627307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622886571
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.range\">docs#linear_map.range</a></p>",
        "id": 241628827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622888754
    },
    {
        "content": "<p>But <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.map\">docs#submodule.map</a> ?</p>",
        "id": 241635036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622897465
    },
    {
        "content": "<p>I guess it makes sense</p>",
        "id": 241635040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622897490
    }
]