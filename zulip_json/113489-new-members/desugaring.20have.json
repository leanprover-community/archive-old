[
    {
        "content": "<p><a href=\"https://gist.github.com/luxbock/f0c19afd8d88fef9c13814ba072b9eb5\" target=\"_blank\" title=\"https://gist.github.com/luxbock/f0c19afd8d88fef9c13814ba072b9eb5\">https://gist.github.com/luxbock/f0c19afd8d88fef9c13814ba072b9eb5</a></p>\n<p>Can anyone explain what I'm doing wrong? I tried adding parentheses in different places but couldn't make it work</p>",
        "id": 133226383,
        "sender_full_name": "Olli",
        "timestamp": 1535917773
    },
    {
        "content": "<p>I think you need to add parenthesis around <code>(and.right h)</code> and  <code>(and.left h)</code></p>",
        "id": 133226658,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1535918395
    },
    {
        "content": "<p>In this case around and.left h</p>",
        "id": 133226707,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535918433
    },
    {
        "content": "<p>You need parentheses around the argument of a function. <code>f x y</code> means <code>(f x) y</code></p>",
        "id": 133226708,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535918433
    },
    {
        "content": "<p>thanks, yeah that did it</p>",
        "id": 133226719,
        "sender_full_name": "Olli",
        "timestamp": 1535918506
    },
    {
        "content": "<p><a href=\"https://gist.github.com/luxbock/0e19b04aaca49ccf18e5df060d2d3e8e\" target=\"_blank\" title=\"https://gist.github.com/luxbock/0e19b04aaca49ccf18e5df060d2d3e8e\">https://gist.github.com/luxbock/0e19b04aaca49ccf18e5df060d2d3e8e</a></p>\n<p>same as last time, except now I feel fairly confident that I should have got this right, but I don't understand why it's not able to infer the right types for the disjunction. I realize this is probably not how you'd ever write things, but nevertheless am I doing something wrong here?</p>",
        "id": 133333637,
        "sender_full_name": "Olli",
        "timestamp": 1536091904
    },
    {
        "content": "<p>I get a gazillion errors when I copy paste</p>",
        "id": 133336029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536094545
    },
    {
        "content": "<p>but apart from that, as I'm sure you know, the problem is that <code>or.inl hq</code> doesn't have enough information to know it's a proof of <code>q or r</code>.</p>",
        "id": 133336459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536094990
    },
    {
        "content": "<p>Here are two ways to fix it: for the first error, replace the offending line with <code>and.intro hp (@or.inl q r hq))</code> i.e. use the <code>@</code> trick and tell Lean the implicit variables yourself</p>",
        "id": 133336492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536095032
    },
    {
        "content": "<p>For the second line, you could write <code>and.intro hp (or.inr hr : q âˆ¨ r))</code> , i.e. tell Lean the type you want it to be.</p>",
        "id": 133336556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536095079
    },
    {
        "content": "<p>thanks, that does indeed work.</p>\n<p>The reason I find this confusing is because based on reading the tutorial, I thought that <code>have</code> would desugar as I wrote it. It should have all the same information compared writing it with <code>have</code>.</p>",
        "id": 133358915,
        "sender_full_name": "Olli",
        "timestamp": 1536130798
    },
    {
        "content": "<p>My non-expert guess as to what is going on is this. Lean sometimes doesn't have enough information to work out what the type of something is (e.g. when you type <code>or.inr hr</code>). When this happens it inserts a metavariable instead (e.g. <code>?m_1[hpr, _, _]</code>). You talk about desugaring, but I think the process which is behaving differently in the two cases is the elaboration process, when these metavariables get solved. Elaboration is a complicated thing and depends on a lot of stuff going on in the background, for example whether various terms are tagged <code>elab_simple</code> or <code>elab_as_eliminator</code> or whatever -- even changing the way you apply a function <code>f {a} b</code> from <code>f b</code> to <code>@f _ b</code> can (and often does) change the elaboration strategy. In short, I don't think this is about desugaring, it's about the complex elaboration process which goes on behind the scenes after that.</p>",
        "id": 133360074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536132692
    },
    {
        "content": "<p>yeah it was a good exercise to do, because I learned something from it</p>",
        "id": 133365624,
        "sender_full_name": "Olli",
        "timestamp": 1536141257
    }
]