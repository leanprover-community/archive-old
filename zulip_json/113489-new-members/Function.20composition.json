[
    {
        "content": "<p>So I wondered if one could just prove Guillermo's <code>for_all_not_all</code> using function composition. In some sense this is one of the disadvantages of the currying approach: if a mathematician has functions <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>A</mi><mo>×</mo><mi>B</mi><mo>)</mo><mo>→</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">(A\\times B)\\to C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\">A</span><span class=\"mbin\">×</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">C</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi><mo>→</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">C\\to D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">C</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span></span></span></span> they can just compose them and get a function <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>A</mi><mo>×</mo><mi>B</mi><mo>)</mo><mo>→</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">(A\\times B)\\to D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\">A</span><span class=\"mbin\">×</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span></span></span></span>. This is a bit harder in the curried approach, because <code>A -&gt; B -&gt; C</code> is <code>A -&gt; (B -&gt; C)</code> and <code>C</code> is a bit more embedded than function composition would like. I wrote a blog post about it once: <a href=\"https://xenaproject.wordpress.com/2018/05/19/function-composition/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/05/19/function-composition/\">https://xenaproject.wordpress.com/2018/05/19/function-composition/</a>  containing Sebastian's cool <code>((∘) ∘ (∘))</code> trick. But to apply this trick in Guillermo's situation one needs to get this working for pi types. Here's a formalisation of the situation:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">AA</span> <span class=\"n\">BB</span> <span class=\"n\">CC</span> <span class=\"n\">DD</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">AA</span> <span class=\"bp\">→</span> <span class=\"n\">BB</span> <span class=\"bp\">→</span> <span class=\"n\">CC</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gg</span> <span class=\"o\">:</span> <span class=\"n\">CC</span> <span class=\"bp\">→</span> <span class=\"n\">DD</span><span class=\"o\">)</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">AA</span> <span class=\"bp\">→</span> <span class=\"n\">BB</span> <span class=\"bp\">→</span> <span class=\"n\">DD</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">gg</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">comp&#39;</span> <span class=\"o\">:</span> <span class=\"n\">AA</span> <span class=\"bp\">→</span> <span class=\"n\">BB</span> <span class=\"bp\">→</span> <span class=\"n\">DD</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"err\">∘</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"err\">∘</span><span class=\"o\">))</span> <span class=\"n\">gg</span> <span class=\"n\">ff</span> <span class=\"c1\">-- cool thing Sebastian showed me</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">comp</span> <span class=\"bp\">=</span> <span class=\"n\">comp&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">picomp</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">picomp&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"c1\">-- Is there a cool thing which can go here?</span>\n\n<span class=\"n\">def</span> <span class=\"n\">boring</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">picomp&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">boring</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"c1\">-- not cool</span>\n</pre></div>\n\n\n<p>I want to \"compose f and g\". Function <code>picomp</code> does this explicitly, but it really looks like <code>g $ f</code> is the composition and that I should be able to remove <code>a</code> and <code>b</code> completely. Basically I want to define the function <code>boring</code> just using <code>function.comp</code>. Is this possible? <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> is there a trick?</p>",
        "id": 134102575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537193193
    },
    {
        "content": "<p>Close, but not so close: <code>example : Π (a : A), (B a → D) := λ _, g ∘ f _</code></p>",
        "id": 134103193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537193795
    },
    {
        "content": "<p>The question isn't really even well-posed. I want no lambdas, but in some sense the boring answer does this -- and function.comp's definition uses lambdas...</p>",
        "id": 134103346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537193914
    }
]