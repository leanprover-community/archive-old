[
    {
        "content": "<p>Hello, I'm a new member. I've recently started learning lean, and so far have mostly been able to solve my own problems. However, here is something that has me stumped:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℤ</span>  <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">a</span>  <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">T.map_smul</span> <span class=\"mi\">2</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Lean says <code>rewrite tactic failed, did not find instance of the pattern in the target expression ⇑T (2 • a)</code>.</p>\n<p>Why does this not work?</p>\n<p>Christopher</p>",
        "id": 220708719,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1608654984
    },
    {
        "content": "<p>When you write 2 lean treats it as the natural number 2, rather than the integer 2, which is ok as A is an add_comm_monoid, so multiplication by a nat is well defined even without the semimodule structure.</p>",
        "id": 220709294,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608655306
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℤ</span>  <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">a</span>  <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">T.map_smul</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220709303,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608655311
    },
    {
        "content": "<p>If we use <code>(2 : ℤ)</code> instead everything works as expected</p>",
        "id": 220709386,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608655340
    },
    {
        "content": "<p>When you see something like <code>rewrite tactic failed, did not find instance of the pattern in the target expression</code> one debugging tool is to turn off all pretty printing (notation, implicit arguments etc) so you an see what lean thinks is really going on. Thats the line <code>set_option pp.all true</code> I added.</p>",
        "id": 220709531,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608655423
    },
    {
        "content": "<p>You'll see that everything is almost unreadable with pretty printing turned off but when two things look the same in the pretty printer (like integer 2 and natural number 2) this really helps you notice.</p>",
        "id": 220709695,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608655490
    },
    {
        "content": "<p>The original lemma you stated is still true of course, and <code>simp</code> proves it for you btw</p>",
        "id": 220709738,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608655521
    },
    {
        "content": "<p>Using <code>pp.all true</code> is the last desperate move to try though. Using widget inspection is much cheaper.</p>",
        "id": 220709929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608655630
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/yk7K9Hzs2prreMTFrhIQ2PRI/nat_vs_int.gif\">nat_vs_int.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yk7K9Hzs2prreMTFrhIQ2PRI/nat_vs_int.gif\" title=\"nat_vs_int.gif\"><img src=\"/user_uploads/3121/yk7K9Hzs2prreMTFrhIQ2PRI/nat_vs_int.gif\"></a></div>",
        "id": 220710143,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608655753
    },
    {
        "content": "<p>Thanks - if this was a step in a longer proof, is there a way to cast to integers before doing the rewrite? A somewhat artificial example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">two_nsmul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw_mod_cast</span> <span class=\"n\">T.map_smul</span> <span class=\"mi\">2</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I was hoping something like <code>rw_mod_cast</code> would work here, but it seems not.</p>",
        "id": 220715886,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1608659358
    },
    {
        "content": "<p>I think <code>simp</code>  alone worked for your first example, if you do <code>squeeze_simp</code> you can see what simp used to rewrite, it may be that <code>map_smul</code> just isnt the right lemma when naturals are involved</p>",
        "id": 220719919,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608661824
    },
    {
        "content": "<p>Thanks again. It looks like simp was using <code>linear_map.map_smul_of_tower</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">a</span>  <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">linear_map.map_smul_of_tower</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>simp isn't able to convert the \\N scalar product to the \\Z one though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">testn</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">a</span>  <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">two_nsmul</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>My work around is to introduce a new result <code>two_gsmul </code> instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">two_gsmul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">pow_two</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">two_gsmul</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Christopher</p>",
        "id": 220722940,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1608663768
    }
]