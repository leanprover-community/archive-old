[
    {
        "content": "<p>I'm going through Mathematics in Lean and I came across an exercise where the environment is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">monof</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n\n\n<p>and I want to make a term of the form <code>1 \\leq 0</code> as follows<br>\n<code>have h1 : 1 ≤ 0 := h monof h'</code>.<br>\nHowever, I get the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>I don't really understand, why I don't get <code>1 ≤ 0</code>.</p>",
        "id": 204995216,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1595666911
    },
    {
        "content": "<p>I doubt your 1 is the 1 you want. If you don't say (1 : \\R) then it defaults to nat. The error means \"I'm looking for two real numbers but all I see is naturals\"</p>",
        "id": 204995298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595667095
    },
    {
        "content": "<p>Thanks, indeed, declaring that I want 1 and 0 to be reals does the trick. Is there anything in the error message that hints that this was the problem?</p>",
        "id": 204995434,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1595667292
    },
    {
        "content": "<p>You could probably turn on <code>set_option pp.all true</code> (or some intermediate pretty printer setings, e.g. <code>pp.notation false</code> + <code>pp.implicits true</code>.</p>",
        "id": 204995770,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595667821
    },
    {
        "content": "<p>That would show you what type the <code>le</code> was in.</p>",
        "id": 204995775,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595667833
    },
    {
        "content": "<p>Thanks, it makes the errors to complicated to turn on all the time, but it could help when digging deeper.</p>",
        "id": 204995993,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1595668155
    },
    {
        "content": "<p>I just know that when the user types 1 it means the natural 1 unless specified otherwise. It's an issue which comes up all the time on this chat</p>",
        "id": 205000915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595677943
    },
    {
        "content": "<p>There's even an issue about it on the natural number game. To fix it you need to hack core lean</p>",
        "id": 205000921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595677976
    },
    {
        "content": "<p>Usually Lean tries to expand whatever part of the expressions don't agree in an error like this--if the two expressions still appear to agree (e.g. here it looks like we could set <code>?m_1 = 1</code> and <code>?m_2 = 0</code>) then usually the reason is that the types are wrong or there is a type class or universe issue.</p>",
        "id": 205001803,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595679496
    },
    {
        "content": "<p>I wonder whether it would be sensible for <code>have h : T := e</code> to use <code>e</code> to elaborate <code>T</code>, like <code>def</code> does</p>",
        "id": 205001837,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595679588
    }
]