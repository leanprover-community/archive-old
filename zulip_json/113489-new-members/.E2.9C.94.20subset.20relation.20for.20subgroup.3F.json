[
    {
        "content": "<p>I'm trying to state that one subgroup is a subset of another:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.coset</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.sylow</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>  <span class=\"n\">fin</span> <span class=\"n\">function</span> <span class=\"n\">subgroup</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- | H stabilizes the interval `[0..i]` iff H is a subset of the stabilizer of</span>\n<span class=\"c1\">-- each `k ∈ fin i`</span>\n<span class=\"kd\">def</span> <span class=\"n\">interval_stab</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">act</span><span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">i</span><span class=\"o\">)}</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">H</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">mul_action.stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">act</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">i</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_subset</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Admittedly, I'm jumping into the deep end, and hoping prior experience with Coq will save me ;) How do I express what I describe in the comment?</p>",
        "id": 270745728,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1643995452
    },
    {
        "content": "<p>Have you tried <code>≤</code>?</p>",
        "id": 270746032,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643995621
    },
    {
        "content": "<p>Interesting, that does work! I presume it orders based on the subgroup lattice?</p>",
        "id": 270746079,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1643995652
    },
    {
        "content": "<p>It's an order relation on <code>subgroup G</code>, and it means \"it's contained\".</p>",
        "id": 270746083,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643995656
    },
    {
        "content": "<p>Thank you! A mild extension to the above question: Suppose I want <code>H</code> to be a <em>subset</em> of <code>G</code>. What would I write then?</p>",
        "id": 270746184,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1643995699
    },
    {
        "content": "<p>I would try the same. It's possible that Lean understand that it has to coerc the subgroup to a subset.</p>",
        "id": 270746331,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643995780
    },
    {
        "content": "<p>In any case if <code>H : subgroup G</code> then <code>H.carrier : set G</code> is the subset</p>",
        "id": 270746452,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643995838
    },
    {
        "content": "<p>Thank you, that works splendidly :)</p>",
        "id": 270746546,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1643995892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> has marked this topic as resolved.</p>",
        "id": 270746552,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643995894
    },
    {
        "content": "<p>In general we prefer to use <code>≤</code> because very often the collection of subthings (subgroups, subalgebras...) is a complete lattice or whatever. So one has to provide the strongest instance, and then can use the general theory.</p>",
        "id": 270746787,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643995997
    },
    {
        "content": "<p>Probably <code>H : set G</code> is better than <code>H.carrier</code> (even if the two are definitionally equal), since I think we already have a good API for the coercion.</p>",
        "id": 270747123,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643996154
    }
]