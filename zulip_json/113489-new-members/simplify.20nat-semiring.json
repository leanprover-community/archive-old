[
    {
        "content": "<p>Another beginners question: what is the incantation to tell the simplifier that nat is a smearing but if possible nothing else.</p>",
        "id": 209119232,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599239812
    },
    {
        "content": "<p>basically I need that 2<em>(x+1) = 2</em>x+2</p>",
        "id": 209119387,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599239911
    },
    {
        "content": "<p>but because I am going to use this in my course I don't want any additional cleverness.</p>",
        "id": 209119415,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599239931
    },
    {
        "content": "<p>We gave up trying to make the simplifier prove things about semirings and someone wrote a <code>ring</code> tactic instead.</p>",
        "id": 209120695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599240664
    },
    {
        "content": "<p>(BTW you can quote equations involving multiplication by enclosing them in <code> ` </code> quotes, like <code>2*(x+1)=2*x+2</code>; then Zulip doesn't think it's <em>emphasis</em>). (You can look at the source of what other people post too)</p>",
        "id": 209120817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599240733
    },
    {
        "content": "<p>Distributivity is apparently what is missing in the simplifier:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 209121047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599240878
    },
    {
        "content": "<p>Import-free: <code>example (x : ℕ) : 2*(x+1)=2*x+2 := by simp [nat.left_distrib, nat.mul_one]</code></p>",
        "id": 209121291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599241030
    },
    {
        "content": "<p>For more control over what lemmas the simplifier uses, it's possible to create a custom simp attribute <code>semiring_simps</code> and then tag all the lemmas you want to use with it.  Then you could write <code>simp only with semiring_simps</code> (or define a new tactic <code>semiring_simp</code> that does the same). See <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#mk_simp_attribute\">mk_simp_attribute</a>.</p>",
        "id": 209122040,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599241520
    },
    {
        "content": "<p>file 'tactic' not found in the LEAN_PATH</p>",
        "id": 209129315,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599245831
    },
    {
        "content": "<p>I accuse you of not following the community installation instructions ;-)</p>",
        "id": 209129340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599245853
    },
    {
        "content": "<p>Dare I ask how you installed Lean and how you're using it?</p>",
        "id": 209129366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599245880
    },
    {
        "content": "<p>yes ring is easier - no problem with this. But you can still use it to solve equations over nat.</p>",
        "id": 209129459,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599245929
    },
    {
        "content": "<p>brew install lean. I didn't see any installation instructions. Where are they?</p>",
        "id": 209129538,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599245980
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/\">https://leanprover-community.github.io/</a></p>",
        "id": 209129611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599246008
    },
    {
        "content": "<p>This is the only entry point you need.</p>",
        "id": 209129623,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599246017
    },
    {
        "content": "<p>Everything else is an unfortunate historical accident.</p>",
        "id": 209129641,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599246034
    },
    {
        "content": "<p>I think that after <code>brew install lean</code> you might have an old lean and no mathlib. Mathlib is not just a maths library -- it also has a bunch of tactics.</p>",
        "id": 209129711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599246084
    },
    {
        "content": "<p>I ended up on <a href=\"https://leanprover.github.io/download/\">https://leanprover.github.io/download/</a> which is useless.</p>",
        "id": 209129757,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599246108
    },
    {
        "content": "<p>No, it isn't. The first link on that page is the one I just gave you.</p>",
        "id": 209129872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599246152
    },
    {
        "content": "<p>And now? It is no installer.</p>",
        "id": 209129902,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599246170
    },
    {
        "content": "<p>I guess I have to run trylean?</p>",
        "id": 209130008,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599246236
    },
    {
        "content": "<p>Unter Darwin. It doesn't say OS X.</p>",
        "id": 209130080,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599246262
    },
    {
        "content": "<p>Do you mean a web page is not an installer? Yes, you need to read a couple of sentences. There are various options, with descriptions of target audiences.</p>",
        "id": 209130094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599246275
    },
    {
        "content": "<p>I am not used to reading when installing... Actually that is not true I just know how to install Agda now. :-)</p>",
        "id": 209130220,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599246362
    },
    {
        "content": "<p>And now. Ok I had to convince OSX to run trylean and then vscodium and now I have a vscodium window and I am not sure what to do next.</p>",
        "id": 209130505,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599246503
    },
    {
        "content": "<p>I am using emacs.</p>",
        "id": 209130550,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599246534
    },
    {
        "content": "<p>Ah, since (I'm guessing) you've committed to using Lean for more than a few days, I think this link under \"regular install\" is more suitable than the \"trylean\" bundle: <a href=\"https://leanprover-community.github.io/install/macos.html\">https://leanprover-community.github.io/install/macos.html</a></p>",
        "id": 209130783,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599246659
    },
    {
        "content": "<p>I don't think the trylean bundle can be used easily with emacs, unfortunately. Probably we should add a warning.</p>",
        "id": 209130838,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599246708
    },
    {
        "content": "<p>Thank you - actually trylean seems to be broken on OSX. You end up starting VSCodium interactively but even if I open a .lean file it says \"plain text\".</p>",
        "id": 209131017,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599246806
    },
    {
        "content": "<p>macOS 10.15.5 (19F101</p>",
        "id": 209131068,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599246835
    },
    {
        "content": "<p>Thanks! I'll try to look into it later this weekend. Let us know if you have any trouble with elan and / or leanproject.</p>",
        "id": 209131919,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599247344
    },
    {
        "content": "<p>(I wonder if we should just ditch the \"trylean\" bundles...?)</p>",
        "id": 209156096,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599271287
    },
    {
        "content": "<p>This might fix the issue with the macOS bundle: <a href=\"https://github.com/leanprover-community/azure-scripts/pull/5\">https://github.com/leanprover-community/azure-scripts/pull/5</a></p>",
        "id": 209159102,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599276349
    }
]