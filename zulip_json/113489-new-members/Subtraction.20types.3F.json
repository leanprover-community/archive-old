[
    {
        "content": "<p>I'm working on a theorem that postulates <code>x \\in \\R - \\Z</code>. Does lean have a notion of subtraction types? Or do I need to kludge this together with <code>x \\in R</code> and by showing <code>\\not \\exists (k : \\N), coe k = x</code>?</p>",
        "id": 222439666,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610462561
    },
    {
        "content": "<p>What is \\R - \\Z? Is it a subtype or a subset? There are I guess different ways you can formalise this. If <code>x : \\R</code> then you could just say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 222444711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610464584
    },
    {
        "content": "<p>Is <code>ℝ</code> a <code>floor_ring</code>? You could use things that aren't equal to their own floor.</p>",
        "id": 222445675,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610464957
    },
    {
        "content": "<p>It is a floor_ring but this is kind of clunky</p>",
        "id": 222445748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610464983
    },
    {
        "content": "<p>Aww the thumbs up went away.</p>",
        "id": 222445763,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610464986
    },
    {
        "content": "<p>I wanted to indicate \"yes it's a floor ring\" but then I decided I didn't want to promote the idea of using this fact ;-)</p>",
        "id": 222445839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610465014
    },
    {
        "content": "<p>Right, because it'd be equiv to the \"not in range of coe\", and one would have to show anyway that the things that _are_ equal to their own <code>floor</code> are  exactly those that are in the range of <code>coe</code>.</p>",
        "id": 222445880,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610465029
    },
    {
        "content": "<p>It might all depend on how one is going to use this in the proof.</p>",
        "id": 222445978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610465052
    },
    {
        "content": "<p>Sorry --- forgot about this thread. The example is:</p>\n<p>Suppose <code>x∈R − Z</code> and <code>m∈Z</code> such that <code>x &lt; m &lt; x+ 1</code>.  Show that <code>m</code> is unique.</p>",
        "id": 222737286,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610639848
    },
    {
        "content": "<p>By \"m is unique\" you mean <code>x &lt; m &lt; x + 1 -&gt; x &lt; n &lt; x + 1 -&gt; m = n</code> right? In which case you don't need to assume that x is not an integer, this is true even in that case (for trivial reasons).</p>",
        "id": 222737797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640008
    },
    {
        "content": "<p>Yes, that's what i mean by unique! But is this true for non-integers with lt rather than le?</p>",
        "id": 222738097,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610640116
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span>\n  <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>should be provable.</p>",
        "id": 222738103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640119
    },
    {
        "content": "<p>It's also true if you change <code>x &lt; m</code> to <code>x &lt;= m</code> and <code>x &lt; n</code> to <code>x &lt;= n</code> yes.</p>",
        "id": 222738250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640164
    },
    {
        "content": "<p>You don't ever need to assume something is a non-integer.</p>",
        "id": 222738285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640185
    },
    {
        "content": "<p>Where you need a non-integer is when you prove \"exists m : Z, x &lt; m &lt; x + 1`. You don't need it for uniqueness.</p>",
        "id": 222738378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640220
    },
    {
        "content": "<p>maybe i'm slow this morning (before coffee), but if <code>x</code> is an integer, then there are no integers for <code>m, n</code> to be between <code>x</code> and <code>x + 1</code>, right?</p>",
        "id": 222738386,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610640222
    },
    {
        "content": "<p>That's right, and that's why you can prove it, because you have a false assumption so you can prove anything.</p>",
        "id": 222738476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640244
    },
    {
        "content": "<p>oh i see, thanks</p>",
        "id": 222738500,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610640254
    },
    {
        "content": "<p>I'm never saying \"there exists an m for which this works\", I'm only saying \"if we have an m for which this works, then ...\"</p>",
        "id": 222738553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640280
    },
    {
        "content": "<p>that's more trivial than i was expecting :)</p>",
        "id": 222738562,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610640283
    },
    {
        "content": "<p>In Lean, trivial is the new hard...</p>",
        "id": 222738644,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610640324
    },
    {
        "content": "<p>And there will be a very elegant proof using <code>le_floor</code> or <code>floor_le</code> or <code>floor_lt</code> or whatever there is.</p>",
        "id": 222738653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640328
    },
    {
        "content": "<p>out of personal curiosity (i'm a type guy first and foremost), is there some way to show <code>x \\in \\R - \\Z</code>?</p>",
        "id": 222738670,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610640340
    },
    {
        "content": "<p>The floor function is a great example of an adjoint functor, I found to my surprise a while ago.</p>",
        "id": 222738688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"375678\">Sandy Maguire</span> <a href=\"#narrow/stream/113489-new-members/topic/Subtraction.20types.3F/near/222738670\">said</a>:</p>\n<blockquote>\n<p>out of personal curiosity (i'm a type guy first and foremost), is there some way to show <code>x \\in \\R - \\Z</code>?</p>\n</blockquote>\n<p>Under what assumptions? Of course this is false in general (take x = 37)</p>",
        "id": 222738766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640368
    },
    {
        "content": "<p>sorry, show is the wrong word. subtract <code>Z</code> from the <code>R</code> type</p>",
        "id": 222738812,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610640392
    },
    {
        "content": "<p><code>(m : \\R) &lt;= x</code> iff <code>m &lt;= floor(x)</code></p>",
        "id": 222738820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640398
    },
    {
        "content": "<p>You have to decide what the type of x is going to be. x can only have one type.</p>",
        "id": 222738868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640423
    },
    {
        "content": "<p>If x is going to have type <code>real</code> then you can just say that x is not an element of the subset of real consisting of integers.</p>",
        "id": 222738920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640446
    },
    {
        "content": "<p>i think what you're saying is \"just show it with a witness\" rather than construct a new type which excludes the values</p>",
        "id": 222738937,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610640451
    },
    {
        "content": "<p>If however you want to make a completely new type R - Z, then you can make this type, and then if x is a term of that type then x will represent a real which isn't an integer, but x itself will not be a real number, which might have some annoying consequences down the line.</p>",
        "id": 222739052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640488
    },
    {
        "content": "<p>You can put a predicate on <code>real</code> saying \"I am not in the range of the map from the integers\"  and then you can make a subtype corresponding to that predicate.</p>",
        "id": 222739130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640524
    },
    {
        "content": "<p>i haven't yet wrapped my mind around lean's type system, and this question is just me trying to suss out where the edges are</p>",
        "id": 222739147,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610640533
    },
    {
        "content": "<p>that's helpful, thanks</p>",
        "id": 222739163,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610640542
    },
    {
        "content": "<p>But then you will have a map from that subtype to the reals, and that map will not be \"the identity map\".</p>",
        "id": 222739188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640555
    },
    {
        "content": "<p>while i have you, i'm trying to write a function <code>biggest : \\forall {alpha : Type}, (alpha -&gt; \\nat) -&gt; \\alpha</code></p>",
        "id": 222739285,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610640597
    },
    {
        "content": "<p>It will of course morally be the inclusion, but do you really want to make a new definition and then constantly apply that inclusion, prove lemmas about the definition? It is typically easier in a system like Lean to just use the definitions which are already there.</p>",
        "id": 222739337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640606
    },
    {
        "content": "<p>which is not computable in general but probably lean can handle this?</p>",
        "id": 222739344,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610640610
    },
    {
        "content": "<p>computability isn't an issue, that's right</p>",
        "id": 222739365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640623
    },
    {
        "content": "<p>i'm happy to restrict alpha to finite, enumerable types</p>",
        "id": 222739369,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610640625
    },
    {
        "content": "<p>Then it's <code>nat.find</code> on the image.</p>",
        "id": 222739393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640638
    },
    {
        "content": "<p>i'll dig in. i really appreciate how helpful you are, kevin!</p>",
        "id": 222739639,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610640740
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RminusZ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">RminusZ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"c1\">-- fails because x is not a real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">RminusZ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">x.val</span> <span class=\"c1\">-- works because val : RminusZ -&gt; R</span>\n</code></pre></div>",
        "id": 222739655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640745
    },
    {
        "content": "<p>Wait, it's a bit trickier than nat.find because what happens if the map from alpha to nat isn't injective? Then you have to choose a random element whose image is the max.</p>",
        "id": 222739765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640799
    },
    {
        "content": "<p>i.e. you have \"joint biggest\" elements.</p>",
        "id": 222739791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640811
    },
    {
        "content": "<p>What's annoying about the new type is that it's not closed under addition.</p>",
        "id": 222739831,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610640833
    },
    {
        "content": "<p>Can one even define addition on it?</p>",
        "id": 222739905,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610640849
    },
    {
        "content": "<p>Every definition you make is annoying until you have made the API for that definition.</p>",
        "id": 222739911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640853
    },
    {
        "content": "<p>You can define an action of the integers on it, <code>Z -&gt; RminusZ -&gt; RminusZ</code> using addition.</p>",
        "id": 222739959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640875
    },
    {
        "content": "<p>But every new definition comes with a certain amount of pain, and this is why it's easier to just add in assumptions to your <em>theorems</em> like <code>(hx : ¬ ∃ n : ℤ, x = n)</code>.</p>",
        "id": 222740097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610640940
    },
    {
        "content": "<p>this is an extremely fruitful discussion. i'm coming from haskell where the answer is ALWAYS \"define a new type\"</p>",
        "id": 222740262,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610641010
    },
    {
        "content": "<p>Because what are you going to do with <code>x : RminusZ</code> anyway? You'll try and compare it with other real numbers or integers, so you will never be talking about x, you'll always be talking about <code>x.val</code>. And then eventually you'll need the proof that x isn't an integer, which is <code>x.property</code> I think (I just call it <code>x.2</code>), and then you realise that actually all you ever needed was <code>x.val</code> and <code>x.2</code> and you could have just started with these anyway.</p>",
        "id": 222740512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610641071
    },
    {
        "content": "<p>I don't know anything about Haskell I'm afraid, I'm a mathematician with very little programming experience.</p>",
        "id": 222740643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610641091
    },
    {
        "content": "<p>I've just learnt the hard way how to say things in Lean in the way which makes them easiest to prove.</p>",
        "id": 222740762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610641113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> mind pushing me a bit further on the \"<code>nat.find</code> on the image\" thread? is the predicate i want that <code>x | \\forall (y : \\alpha), f x &gt; f y </code>?</p>",
        "id": 222740876,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610641134
    },
    {
        "content": "<p>That predicate will never hold because y can be x</p>",
        "id": 222740987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610641165
    },
    {
        "content": "<p>fair. if i restrict that part away? :)</p>",
        "id": 222741020,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610641177
    },
    {
        "content": "<p>If f isn't injective you still have problems.</p>",
        "id": 222741235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610641266
    },
    {
        "content": "<p>okay, i'll think about what i actually want</p>",
        "id": 222741313,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610641302
    },
    {
        "content": "<p>thanks again</p>",
        "id": 222741325,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610641305
    }
]