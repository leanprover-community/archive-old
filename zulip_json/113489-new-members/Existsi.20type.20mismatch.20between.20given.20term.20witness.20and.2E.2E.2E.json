[
    {
        "content": "<p>Extremely basic question. In this simple example </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divides</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a_div_a</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">divides</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">divides</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">existsi</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">between</span> <span class=\"n\">given</span> <span class=\"n\">term</span> <span class=\"n\">witness</span> <span class=\"n\">and</span> <span class=\"n\">expected</span> <span class=\"n\">type</span>\n</code></pre></div>\n<p>and I am not sure why. Why doesn't the goal turn into this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>After all, the \"expected type\" should be in ℤ and 1 is in ℤ.</p>",
        "id": 246026647,
        "sender_full_name": "Sara Fish",
        "timestamp": 1626299536
    },
    {
        "content": "<p>Not positive if it will solve your problem, but Lean is finicky about 1's and 0's. I think by default Lean'll assume 1 or 0 is a natural number.  You'll have to cast 1 to the type you're expecting (i.e., (1 : Q)). Lifting may also work.  It can be misleading as it's just written as 1 or 0 in the goal state, and you'd hope Lean can just figure out which type you're referring to.</p>",
        "id": 246028275,
        "sender_full_name": "Andrew Elsey",
        "timestamp": 1626300483
    },
    {
        "content": "<p><code>existsi</code> is quite a primitive tactic in core Lean which doesn't take any clues from the context about what kind of 1 it needs. If Lean sees a 1 with no extra clues it assumes it's a natural 1. The <code>use</code> tactic is a more sophisticated tactic available in mathlib so if you add <code>import tactic</code> to the top of your file then <code>use 1</code> will work fine. <code>refl</code> won't work though :-)</p>",
        "id": 246029589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626301303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"299025\">@Sara Fish</span> Elaborating what <span class=\"user-mention\" data-user-id=\"301362\">@Andrew Elsey</span> said, here's how you can fix the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">a_div_a</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">divides</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">divides</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Here's <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s suggestion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a_div_a</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">divides</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246030148,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626301656
    },
    {
        "content": "<p>By the way, if a proof starts with <code>intro</code>, it's common practice to put the argument before the colon:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">a_div_a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">divides</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246030305,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626301732
    },
    {
        "content": "<p>And if you want to compress it even more, you can use the constructor for <code>Exists</code> directly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">a_div_a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">divides</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Angle brackets are a way to use a constructor without specifying its name.  Lean will try to figure out which one you mean.</p>",
        "id": 246030487,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626301869
    },
    {
        "content": "<p>Thanks all! This was helpful.</p>",
        "id": 246033778,
        "sender_full_name": "Sara Fish",
        "timestamp": 1626304342
    }
]