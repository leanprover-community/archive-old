[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">rw</span> <span class=\"n\">successor_members</span> <span class=\"n\">M</span> <span class=\"n\">at</span> <span class=\"n\">h10</span><span class=\"o\">,</span>\n</code></pre></div>\n\n<p>works fine although I thought it should have to be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">successor_members</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h10</span><span class=\"o\">,</span>\n</code></pre></div>\n\n<p>My question is,  how in the world can the first version possibly actually work?</p>\n<p>I guess it's related to the fact that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">rw</span> <span class=\"n\">successor_members</span>  <span class=\"n\">at</span> <span class=\"n\">h10</span><span class=\"o\">,</span>\n</code></pre></div>\n\n<p>also works.  I guess the \"elaborator\" is able to supply the argument M in that case,  because it needs an <br>\nelement of class Model and there is only one such in the environment, namely M.    But that still <br>\ndoesn't explain the first example.</p>",
        "id": 211258087,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1601040947
    },
    {
        "content": "<p>I'm assuming it reads until it finds \"at\"</p>",
        "id": 211260248,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1601042002
    },
    {
        "content": "<p><code>rw</code> is not a function like a usual lean term, but rather, a tactic. For example, the following also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">successor_members</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h10</span><span class=\"o\">,</span>\n</code></pre></div>\n\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">successor_members</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h10</span>\n</code></pre></div>\n\n<p>This is because <code>rewrite</code> is a tactic that takes an expression or a list of expressions. It parses the expression until some token it is aware of, like <code>at</code>. So <code>successor_members M</code> is such an expression. That's my understanding of how this tactic works, but could be mistaken.</p>",
        "id": 211261605,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601042546
    },
    {
        "content": "<p>Right, tactics have their own parsing logic and in this context <code>at</code> is a keyword. It's not as though <code>rw</code> is a function and <code>at</code> is one of its arguments.</p>",
        "id": 211261608,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601042548
    }
]