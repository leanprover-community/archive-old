[
    {
        "content": "<p>Hi guys! I was trying out this 'Structured' proof from hitchhikers_guide_Lean book.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fst_of_two_props</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">fix</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"n\">ha</span>\n</code></pre></div>\n<p>But it is not able to recognize fix. Which library should I import to make it work? Thanks in advance!</p>",
        "id": 256317528,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1633467330
    },
    {
        "content": "<p><code>fix</code> is not a thing in Lean AFAIK. Maybe it's something specific to the Hitchhiker's guide book?</p>",
        "id": 256317703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633467409
    },
    {
        "content": "<p>Just  change it to <code>assume</code> or <code>λ</code></p>",
        "id": 256317820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633467468
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> for the info! I thought that the book is purely based on Lean.</p>",
        "id": 256317963,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1633467529
    },
    {
        "content": "<p><a href=\"https://raw.githubusercontent.com/blanchette/logical_verification_2020/master/hitchhikers_guide.pdf\">https://raw.githubusercontent.com/blanchette/logical_verification_2020/master/hitchhikers_guide.pdf</a> page 33 (43)</p>",
        "id": 256317984,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633467543
    },
    {
        "content": "<p>aha <a href=\"https://raw.githubusercontent.com/blanchette/logical_verification_2020/master/lean/lovelib.lean\">https://raw.githubusercontent.com/blanchette/logical_verification_2020/master/lean/lovelib.lean</a></p>",
        "id": 256318075,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633467589
    },
    {
        "content": "<p>So basically <code>fix</code> is a lambda--I guess they wanted a better name than \"lambda\" without the propositional connotations of \"assume\"</p>",
        "id": 256318353,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633467690
    },
    {
        "content": "<p>Oh! now getting it. Thanks <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span></p>",
        "id": 256318601,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1633467798
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/113488-general/topic/Proposal.3A.20.60fix.20x.60.20for.20.60assume.20x.60\">this discussion on introducing <code>fix</code></a></p>",
        "id": 256373186,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633507399
    }
]