[
    {
        "content": "<p>Maybe this is a version issue, but <code> induction k generalizing ...</code> results in a syntax error : <code>invalid 'begin-end' expression, ',' expected</code><br>\nI'm on lean community 3.35</p>",
        "id": 262018459,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1637287056
    },
    {
        "content": "<p>The <code>...</code> is meant to be the the list of variables you're generalizing (space-separated), sorry</p>",
        "id": 262018530,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637287100
    },
    {
        "content": "<p>Ah, yep, I'm dumb<br>\nThought that ... meant generalize all</p>",
        "id": 262018555,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1637287126
    },
    {
        "content": "<p>That said, it doesn't work with using (as far as I can tell)<br>\nGetting syntax error with <code>  induction n generalizing f using nat.strong_induction_on with n ih</code></p>",
        "id": 262018665,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1637287210
    },
    {
        "content": "<p>It's sensitive to the order of the clauses</p>",
        "id": 262018720,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637287239
    },
    {
        "content": "<p>(I can't tell you off the top of my head which it is -- it's usually trial-and-error for me)</p>",
        "id": 262018745,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637287274
    },
    {
        "content": "<p>I think I've tried them all... (puting it at the end syntax checks, but doesn't actually generalize <code>f</code>)</p>",
        "id": 262018776,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1637287298
    },
    {
        "content": "<p>Nvm</p>",
        "id": 262018787,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1637287308
    },
    {
        "content": "<p>end works</p>",
        "id": 262018790,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1637287310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457807\">Ryan Greenblatt</span> has marked this topic as resolved.</p>",
        "id": 262018838,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637287327
    },
    {
        "content": "<p>One way to tell is to follow the definition of <code>induction</code> itself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">induction</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cases_arg_p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rec_name</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">using_ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">revert</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"generalizing\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ident</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>You can follow definitions of each of the arguments to see what they're trying to parse, but we can see <code>generalizing</code> comes at the end without having to do that.</p>",
        "id": 262018847,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637287348
    },
    {
        "content": "<p>I'd never really thought about inducting on a definition itself before.  It seems like it would be nice if Lean could generate the inductive type I wrote automatically and show it characterizes definition.  Especially if it would use the equations as you write them, vs the ones that the equation compiler might generate.</p>",
        "id": 262019063,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637287608
    }
]