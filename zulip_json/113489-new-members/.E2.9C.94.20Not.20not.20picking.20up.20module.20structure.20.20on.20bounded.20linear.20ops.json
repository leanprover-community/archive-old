[
    {
        "content": "<p>Oh, your problem is that you have both <code>[module ℂ A] </code> and <code>[normed_space ℂ A] </code></p>",
        "id": 282489514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652705289
    },
    {
        "content": "<p>Which means \"There are two different module structures on A, and only the second respects the norm\"</p>",
        "id": 282489539,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652705306
    },
    {
        "content": "<p>Lean is unable to find the proof that the first one is a continuous scalar multiplication, because there is no such proof</p>",
        "id": 282489609,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652705357
    },
    {
        "content": "<p>This works fine (replace <code>module</code> with <code>normed_space</code> and remove the later <code>normed_space</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.operator_norm</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.prod</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.continuous_function.algebra</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">ennreal</span>\n<span class=\"kn\">local</span> <span class=\"kd\">postfix</span> <span class=\"bp\">`⋆`</span><span class=\"o\">:</span><span class=\"n\">std.prec.max_plus</span> <span class=\"o\">:=</span> <span class=\"n\">star</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_unital_normed_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_module</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">cstar_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 282489646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652705376
    },
    {
        "content": "<p>Thank you</p>",
        "id": 282489992,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1652705533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267705\">Cameron Torrance</span> has marked this topic as resolved.</p>",
        "id": 282490043,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652705563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Not.20not.20picking.20up.20module.20structure.20.20on.20bounded.20linear.20ops/near/282489539\">said</a>:</p>\n<blockquote>\n<p>Which means \"There are two different module structures on A, and only the second respects the norm\"</p>\n</blockquote>\n<p>Lean needs a Clippy to pop up and say \"are you sure you want to do that?\" for cases like that</p>",
        "id": 282491160,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1652706060
    },
    {
        "content": "<p>I tried to make it clear in my answer that I was not endorsing the <code>variable</code> choices, and that was where the problem was.  It makes me a bit sad that there is no easy way of checking these, short of being a person who has already written code in this exact area and knows what extends what and what doesn't, or just carefully checking all the definitions of the structures in question.</p>",
        "id": 282495720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652708238
    },
    {
        "content": "<p>Is it feasible to have a linter which does what Ruben suggests? e.g. checks only one &lt;= on a type, only one smul_action etc</p>",
        "id": 282495902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652708305
    },
    {
        "content": "<p>In order for the linter to even help, you'd need to have made a mwe along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">why_is_this_broken</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</code></pre></div>\n<p>since I don't think <code>example</code>s can be linted</p>",
        "id": 282497353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652708920
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> has suggested this before also. While it should be possible using some of the generalization linter code (assuming it is fixed up a bit first to remove the obvious bugs) as Eric says its not clear a linter is really an effective way of helping new members who keep running into this as they probably aren't used to checking it, it would be nice to be sure that we don't accidentally have this in the library though of course.</p>",
        "id": 282497630,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652709041
    },
    {
        "content": "<p>The best thing would probably be an integration within the Lean infoview, with an option to turn it off.</p>",
        "id": 282497728,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652709094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Not.20not.20picking.20up.20module.20structure.20.20on.20bounded.20linear.20ops/near/282495720\">said</a>:</p>\n<blockquote>\n<p>I tried to make it clear in my answer that I was not endorsing the <code>variable</code> choices, and that was where the problem was.  It makes me a bit sad that there is no easy way of checking these, short of being a person who has already written code in this exact area and knows what extends what and what doesn't, or just carefully checking all the definitions of the structures in question.</p>\n</blockquote>\n<p>I think I read you not endorsing them as the absence of approval rather than tentative disapproval.</p>",
        "id": 282498624,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1652709475
    },
    {
        "content": "<p>Unfortunately, it was saying \"I am well aware of the pitfalls here and know how to avoid putting two multiplications on a type when doing ring theory because I know which typeclasses put multiplication on types, but am too lazy to go through the definitions of all that stuff to find out if you'd made a similar error\".</p>\n<p>A completely different approach to solving this problem, and one I've entertained before, is just to put up a bunch of examples somewhere e.g. on the community website, saying \"here is how you say \"let X be a compact topological space\", here is how you say \"let R be an integral domain\", here is how you say \"let M be an R-module\" etc etc\"</p>",
        "id": 282522642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652719246
    },
    {
        "content": "<p>Maybe just something like \"Note that since this extends <code>module</code>, you do not need both <code>normed_space K V</code> and <code>module K V</code>\" in the docstring for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_space\">docs#normed_space</a>?</p>",
        "id": 282523494,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652719615
    },
    {
        "content": "<p>Although given Cameron knew to use <code>[non_unital_normed_ring A] </code> and not <code>[non_unital_ring A] [non_unital_normed_ring A]</code> that probably wouldn't  help much - it's easy to make this mistake by accident when combining together typeclasses you need for things.</p>",
        "id": 282523678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652719690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Not.20not.20picking.20up.20module.20structure.20.20on.20bounded.20linear.20ops/near/282522642\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, it was saying \"I am well aware of the pitfalls here and know how to avoid putting two multiplications on a type when doing ring theory because I know which typeclasses put multiplication on types, but am too lazy to go through the definitions of all that stuff to find out if you'd made a similar error\".</p>\n<p>A completely different approach to solving this problem, and one I've entertained before, is just to put up a bunch of examples somewhere e.g. on the community website, saying \"here is how you say \"let X be a compact topological space\", here is how you say \"let R be an integral domain\", here is how you say \"let M be an R-module\" etc etc\"</p>\n</blockquote>\n<p>For non-unital/normed alg-structures there are comments in the code that do this (it would be nice if they where somewhere more visible) but sadly I couldn't comments that did both at the same time.</p>",
        "id": 282523984,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1652719826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Not.20not.20picking.20up.20module.20structure.20.20on.20bounded.20linear.20ops/near/282523678\">said</a>:</p>\n<blockquote>\n<p>Although given Cameron knew to use <code>[non_unital_normed_ring A] </code> and not <code>[non_unital_ring A] [non_unital_normed_ring A]</code> that probably wouldn't  help much - it's easy to make this mistake by accident when combining together typeclasses you need for things.</p>\n</blockquote>\n<p>The problem for me was that star_module doesn't define a module structure and I assumed normed_space was doing something similar.</p>",
        "id": 282524373,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1652720001
    },
    {
        "content": "<p>Yeah, I'm really sorry. This is clearly something we have to work on. If you're an experienced user then you can just look at the definitions and see what <code>extend</code>s what and whether there are <code>old_structure_cmd</code>s involved etc, but this is not something that one can reasonably expect a relative newcomer to do: in maths we just say \"let R be an integral domain\" or \"let M be a module over a C^* algebra with all the obvious assumptions\" and it seems to be a lot harder to do this sort of thing in Lean unless someone who knows what they're doing sets everything up first. When I'm teaching Lean the vast majority of the exercises I give the students involve filling in <code>sorry</code>s in proofs, so they don't have to define anything at all themselves.</p>",
        "id": 282524645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652720110
    },
    {
        "content": "<p>The fact that <code>star</code> and <code>norm</code> use very different approaches despite having similar names is certainly confusing here</p>",
        "id": 282527471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652720447
    }
]