[
    {
        "content": "<p>Is there a tactic to go from the goal <code>⊢ P → Q</code> to <code>h : myThm P ⊢ Q</code> in a single step?</p>",
        "id": 311922724,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669247011
    },
    {
        "content": "<p>Can you write that as a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? Right now what you've written is false if <code>myThm = λ _, false</code>, so I suspect you meant something different to what you wrote</p>",
        "id": 311926344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669250129
    },
    {
        "content": "<p>Oh <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> I meant <code>h : _ := myThm (hP : P) ⊢ Q</code>.</p>",
        "id": 311931326,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669255398
    },
    {
        "content": "<p>In other words, a shorthand for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">myThm</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hP</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">myThm</span> <span class=\"n\">hP</span>\n  <span class=\"n\">clear</span> <span class=\"n\">hP</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 311931403,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669255476
    },
    {
        "content": "<p>well, it's still two tactics, but <code>intro h; replace h := myThm h</code> works (if <code>replace</code> has been ported, I'm not sure).</p>",
        "id": 311935183,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669258931
    },
    {
        "content": "<p>Of course, you could just do it with <code>refine</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">myThm</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">myThm</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 311955557,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669274230
    },
    {
        "content": "<p>There is a thread proposing an <code>apply at</code> tactic such that you could write <code>apply myThm at hP</code>, but you'd still need a separate <code>intro</code> tactic</p>",
        "id": 311972155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669281597
    }
]