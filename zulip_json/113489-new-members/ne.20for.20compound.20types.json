[
    {
        "content": "<p>How am I managing to break lean's ability to differentiate between instances of my composite type? I have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span>\n<span class=\"bp\">|</span> <span class=\"n\">blue</span>\n<span class=\"bp\">|</span> <span class=\"n\">green</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">day</span>\n<span class=\"bp\">|</span> <span class=\"n\">today</span>\n<span class=\"bp\">|</span> <span class=\"n\">tomorrow</span>\n\n<span class=\"n\">class</span> <span class=\"n\">colored_day</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">color</span> <span class=\"o\">:</span> <span class=\"n\">color</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">day</span> <span class=\"o\">:</span> <span class=\"n\">day</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>but <code>simp</code> will not prove</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">colored_day</span> <span class=\"bp\">.</span> <span class=\"n\">color</span> <span class=\"o\">:=</span> <span class=\"n\">color</span><span class=\"bp\">.</span><span class=\"n\">red</span><span class=\"o\">,</span> <span class=\"n\">day</span> <span class=\"o\">:=</span> <span class=\"n\">day</span><span class=\"bp\">.</span><span class=\"n\">today</span><span class=\"o\">}</span> <span class=\"bp\">≠</span> <span class=\"o\">{</span><span class=\"n\">colored_day</span> <span class=\"bp\">.</span> <span class=\"n\">color</span> <span class=\"o\">:=</span> <span class=\"n\">color</span><span class=\"bp\">.</span><span class=\"n\">blue</span><span class=\"o\">,</span> <span class=\"n\">day</span> <span class=\"o\">:=</span> <span class=\"n\">day</span><span class=\"bp\">.</span><span class=\"n\">tomorrow</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>and <code>suggest</code> doesn't seem to tell me anything interesting. I see there's something called <code>no_confusion</code> -- and that ≠ works fine on the pure inductive type. What do I need to do to make the composite one work too?</p>",
        "id": 210646653,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600571448
    },
    {
        "content": "<p>Does <code>dec_trivial</code> work here?</p>",
        "id": 210647736,
        "sender_full_name": "Chris Wong",
        "timestamp": 1600573732
    },
    {
        "content": "<p>No, I tried that too, it complains that the ne is not decidable</p>",
        "id": 210647858,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600574010
    },
    {
        "content": "<p>So I was trying to figure out what I was doing that lost decidability</p>",
        "id": 210647861,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600574036
    },
    {
        "content": "<p>There's some incantation you need to add to mark something as decidable</p>",
        "id": 210647904,
        "sender_full_name": "Chris Wong",
        "timestamp": 1600574074
    },
    {
        "content": "<p>Is it <code>@[derive decidable_eq]</code></p>",
        "id": 210647910,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600574128
    },
    {
        "content": "<p>Probably</p>",
        "id": 210647911,
        "sender_full_name": "Chris Wong",
        "timestamp": 1600574148
    },
    {
        "content": "<p>Because that tells me...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">lean</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"n\">mk_dec_eq_instance</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">color</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 210647912,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600574150
    },
    {
        "content": "<p>oh interesting... I need it on all 3 types</p>",
        "id": 210647953,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600574181
    },
    {
        "content": "<p>Did you add it to all three types?</p>",
        "id": 210647955,
        "sender_full_name": "Chris Wong",
        "timestamp": 1600574183
    },
    {
        "content": "<p>at which point that works. I did not initially</p>",
        "id": 210647956,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600574192
    },
    {
        "content": "<p>Does <code>intro h, cases h</code> work?</p>",
        "id": 210647959,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1600574199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> interesting! That works too (without the annotation)</p>",
        "id": 210647966,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600574245
    },
    {
        "content": "<p>thanks (both)</p>",
        "id": 210648013,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600574330
    },
    {
        "content": "<ol>\n<li>it's a structure not a class</li>\n<li>try <code>colored_day.no_confusion</code></li>\n</ol>",
        "id": 210652603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600584191
    },
    {
        "content": "<p>You can also do it with <code>intro, cc</code></p>",
        "id": 210661247,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600599764
    },
    {
        "content": "<p>(Leaving this here on the incredibly off chance someone finds this thread searching for similar things, but this post was super helpful to read on this topic as well:</p>\n<p><a href=\"#narrow/stream/113489-new-members/topic/rewrite.20goal/near/210758613\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/rewrite.20goal/near/210758613</a></p>",
        "id": 210770982,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600708212
    }
]