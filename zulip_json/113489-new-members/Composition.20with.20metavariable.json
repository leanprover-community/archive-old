[
    {
        "content": "<p>I have two functions <code>F : setoid ?M_1 → partition ?M_1</code> and <code>G : partition ?M_1 → setoid ?M_1</code> and I want to prove <code>function.left_inverse G F</code> or that <code>(G ∘ F) = id</code> . If I do <code>#check function.left_inverse G F</code> I get <code>Prop</code> which is what I expect, but if I try to prove this e.g. <code>example :  function.left_inverse G F</code> I get an error <code>don't know how to synthesize placeholder.</code> Which I think is due to the metavariables since setoid and partition are not referring to particular types yet. What is the proper way to do this with these kind of functions?</p>",
        "id": 199331351,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1590978034
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 199331412,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590978124
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">setoid</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">setoid</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cover</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">F</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">partition</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"o\">(</span>\n     <span class=\"n\">classes</span> <span class=\"n\">S</span>\n<span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"c1\">-- ⊢ (disjoint : ∀ A B ∈ ℱ, A ≠ B → A ∩ B = ∅)</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq_of_subset_of_subset</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_empty_eq</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n      <span class=\"c1\">--have F : set (set X), from classes S,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">eq_of_mem_classes</span><span class=\"o\">,</span>\n      <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">empty_subset</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"c1\">-- ⊢ (cover : ∀ x : X, ∃ A ∈ ℱ, x ∈ A)</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"c1\">-- ⊢ (nonempty : ∀ A ∈ ℱ, A ≠ ∅)</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">aqn</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">empty_not_mem_classes</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"err\">←</span> <span class=\"n\">aqn</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">F</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Q3 : now define a map the other way</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">G</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">setoid_of_disjoint_union</span><span class=\"o\">,</span>\n    <span class=\"n\">swap</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">F</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq_of_subset_of_subset</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">p1</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">p1</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">cover</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">pairwise_disjoint</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">pairwise_on</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">disjoint</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∩</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">disjoint</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">},</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse</span> <span class=\"n\">G</span> <span class=\"n\">F</span> <span class=\"c1\">-- Prop</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse</span> <span class=\"n\">G</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">--error</span>\n</code></pre></div>",
        "id": 199331491,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1590978288
    },
    {
        "content": "<p>You need to explicitly provide one of the types: <code>function.left_inverse (G : partition X → setoid X) F</code>.</p>",
        "id": 199331706,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590978702
    },
    {
        "content": "<p>Otherwise Lean doesn't know that <code>G</code> takes <code>partition X</code> and not <code>partition Y</code> or <code>partition nat</code>.</p>",
        "id": 199331747,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590978729
    },
    {
        "content": "<p>BTW, we have this equivalence in <code>mathlib</code>, see <code>data/setoid/partition</code>.</p>",
        "id": 199331752,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590978759
    },
    {
        "content": "<p>You may have to update mathlib first, since I see from the code you posted that you're importing <code>data.setoid</code> which was split up a few days ago.</p>",
        "id": 199331773,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590978838
    },
    {
        "content": "<p>partitions were in <code>data.setoid</code>.</p>",
        "id": 199331836,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590978889
    },
    {
        "content": "<p>Yeah, I guess the code was just moved, not changed.</p>",
        "id": 199331896,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590978998
    },
    {
        "content": "<p>As <code>{s // is_partition s}</code>.</p>",
        "id": 199331899,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590979009
    },
    {
        "content": "<p>There were a few minor changes, see <a href=\"https://github.com/leanprover-community/mathlib/issues/2853\">#2853</a></p>",
        "id": 199331986,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590979197
    },
    {
        "content": "<p>I see, thanks!  And I'm just doing this for practice which is why I'm not just using the mathlib version.</p>",
        "id": 199356433,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1591009419
    }
]