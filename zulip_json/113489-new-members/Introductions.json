[
    {
        "content": "<p>Hello, I have never asked a public question on Zulip before, and in order for me to get used to doing so, I have been ordered by <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  to state the following in order to introduce myself: </p>\n<p>\"I am a proud student of Kevin Buzzard.\"</p>\n<p>I look forward to learning much more about Lean through Zulip. </p>\n<p>Thanks.</p>",
        "id": 133439634,
        "sender_full_name": "Xita Meyers",
        "timestamp": 1536238098
    },
    {
        "content": "<p>Welcome!</p>",
        "id": 133439648,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536238127
    },
    {
        "content": "<p>Thanks for welcoming me! This is my first time navigating Zulip, nice to meet you!</p>",
        "id": 133439666,
        "sender_full_name": "Xita Meyers",
        "timestamp": 1536238166
    },
    {
        "content": "<p>Welcome Xita! Nice to meet you.</p>",
        "id": 133439730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536238223
    },
    {
        "content": "<p>What kind of stuff have you been looking at lately? Were you involved in UROP?</p>",
        "id": 133439735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536238249
    },
    {
        "content": "<p>I've been involved in the UROP, but didn't learn very much by reading Theorem Proving in Lean; It was hard to understand to some extent. Currently I'm trying to prove a lemma in number theory that if p is a prime of form 4K + 3, then it cannot divide an integer of form x^2 + 1.</p>",
        "id": 133439876,
        "sender_full_name": "Xita Meyers",
        "timestamp": 1536238435
    },
    {
        "content": "<p>Ok, nice. Whenever you have questions, just ask! That's how we are all learning. (Most of us don't find the documentation sufficient, but we lack the time, energy, or courage to improve it.)</p>",
        "id": 133440201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536238753
    },
    {
        "content": "<p>or motivation</p>",
        "id": 133440214,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536238783
    },
    {
        "content": "<p>Hey Su. Here would be a cheap way of doing this. If x^2=-1 mod p (p=4K+3) then x^{4K+2}=-1 mod p as well, contradicting Fermat's Little Theorem.</p>",
        "id": 133440757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536239361
    },
    {
        "content": "<p>Yeah, that's how I've been trying to do it. It's taking longer than I expected.</p>",
        "id": 133450178,
        "sender_full_name": "Xita Meyers",
        "timestamp": 1536247934
    },
    {
        "content": "<p>Hi, I'm Harald, and I'm one of the devs behind CoCalc ... I've just worked on improving its syntax highlighter and well, I should also learn one or another detail about lean itself :-)</p>",
        "id": 133450780,
        "sender_full_name": "Harald Schilly",
        "timestamp": 1536248625
    },
    {
        "content": "<p>Welcome Harald!</p>",
        "id": 133451632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536249410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128565\">@Harald Schilly</span> here would be a good place to get information about where Lean is looking for files to import. At the minute I couldn't get mathlib imports working in CoCalc. This and the current inability to see the goal in tactic mode are in my mind the last two problems which need to be solved before lean is really usable. In particular, you guys are nearly there. I am hoping Gabriel Ebner gave you some hints about the latter goal, and the former goal can't be hard. I can't believe I'm saying this but actually just dumping the mathlib files into the lean core directory would probably work, although it's a horrible idea.</p>",
        "id": 133455563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536253612
    },
    {
        "content": "<p>So, I know there is an env variable <code>LEAN_PATH</code> and we could set it to something. There is also a precompiled (but months old) mathlib in <code>/ext/lean/lean/mathlib/</code>. I bet it just depends on setting that lean path correctly to make it work. Should we discuss this in <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a> ?</p>",
        "id": 133457088,
        "sender_full_name": "Harald Schilly",
        "timestamp": 1536255270
    },
    {
        "content": "<p>Sure, I think we could move this discussion to the CoCalc thread.</p>",
        "id": 133457128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536255345
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/CoCalc\" title=\"#narrow/stream/113488-general/topic/CoCalc\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/CoCalc</a></p>",
        "id": 133457191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536255381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128565\">@Harald Schilly</span> Don't use <code>LEAN_PATH</code>, it is deprecated since the <code>leanpkg</code> tool</p>",
        "id": 133457207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536255404
    },
    {
        "content": "<p>There's something I don't understand about the set-up. At some point Lean will have to be told \"look at <code>leanpkg.path</code>, that's where you should import stuff\". How does that bit work? Aah, presumably this depends on the IDE. And because Harald is involved with writing a new IDE...maybe he needs to be told to look at <code>leanpkg.path</code>.</p>",
        "id": 133457458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536255703
    },
    {
        "content": "<p>Hey guys, just wanted to introduce myself as it seems to be a common habit here. Some of you may already have seen that I started to ask some smaller questions and also organize a theorem proving sozial at ETH.</p>",
        "id": 133490898,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536298554
    },
    {
        "content": "<p>My background is mostly compilation, static analysis, loop transformations, often using Presburger arithmetic to get where I want to be.</p>",
        "id": 133490940,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536298592
    },
    {
        "content": "<p>Since a year I look into theorem proving, and recently started to use lean.</p>",
        "id": 133490942,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536298612
    },
    {
        "content": "<p>I work since maybe 10 years on LLVM and developed there the Polly loop optimizer</p>",
        "id": 133490957,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536298648
    },
    {
        "content": "<p>I am interested in using lean eventually for teaching and for some of my day-to-day work.</p>",
        "id": 133491006,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536298736
    },
    {
        "content": "<p>Welcome to the Lean community! I hope it lives up to your expectations :)</p>",
        "id": 133491016,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536298775
    },
    {
        "content": "<p>Thanks. Until now everybody is very helpful. Looking forward to meet the first members in person next week.</p>",
        "id": 133491062,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536298813
    },
    {
        "content": "<p>I wish I could attend. I'm no longer in Zurich but I'm sending a representative</p>",
        "id": 133491140,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536298968
    },
    {
        "content": "<p>My friend Malte is a lecturer at ETH and I think he wants to attend</p>",
        "id": 133491150,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536299024
    },
    {
        "content": "<p>That's great.</p>",
        "id": 133491315,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536299286
    },
    {
        "content": "<p>Let me know when you are back in Zurich</p>",
        "id": 133491317,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536299300
    },
    {
        "content": "<p>I haven't been back in years but I think I'm due for a visit soon :)</p>",
        "id": 133491337,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536299360
    },
    {
        "content": "<p>hi :) I'm coming back around to using Lean. previously I was an intern working on the seL4 verification, and a student doing research for cryptographic protocol analysis ATPs. good to see such a community has sprung up around lean!</p>",
        "id": 133555206,
        "sender_full_name": "Corey Richardson",
        "timestamp": 1536383756
    },
    {
        "content": "<p>Hi, I'm completely new to Lean. I come from an algebra and number theory background, and don't have much experience with formal logic beyond a course taken in undergrad a lot of years ago.</p>",
        "id": 134356472,
        "sender_full_name": "Ryan Smith",
        "timestamp": 1537505780
    },
    {
        "content": "<p>Cool, welcome! Where are you based?</p>",
        "id": 134356476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537505804
    },
    {
        "content": "<p>I'm a postdoc in Freiburg, working in algebraic geometry.</p>",
        "id": 134356480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537505821
    },
    {
        "content": "<p>Welcome Ryan.</p>",
        "id": 134358790,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537510110
    },
    {
        "content": "<p>Researcher at ETH Zurich here!</p>",
        "id": 134358793,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537510122
    },
    {
        "content": "<p>Hi Ryan! I'm a French mathematician working in Orsay. Would you care to tell us how you heard about Lean?</p>",
        "id": 134361010,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537513585
    },
    {
        "content": "<p>Hi, I'm a PhD student in Karlsruhe with strong interest in functional programming. Although I'm mostly into GHC middle-end stuff, I really like type systems and would spend more time (well, if I had more time to spend) formalizing things, preferrably in Lean :)</p>",
        "id": 134365477,
        "sender_full_name": "Sebastian Graf",
        "timestamp": 1537519987
    },
    {
        "content": "<p>Welcome! Karlsruhe is not too far from Freiburg (-; Have you seen <a href=\"#narrow/stream/113488-general/subject/LUG.20Freiburg.202018\" title=\"#narrow/stream/113488-general/subject/LUG.20Freiburg.202018\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/LUG.20Freiburg.202018</a> ?</p>",
        "id": 134365877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537520563
    },
    {
        "content": "<p>Sounds interesting! I'm afraid I won't be able to make it due to the usual busy stuff during semester.</p>",
        "id": 134374044,
        "sender_full_name": "Sebastian Graf",
        "timestamp": 1537532237
    },
    {
        "content": "<p>Hi;</p>\n<p>I am Agnishom. I am an undergraduate student of Mathematics and Computer Science. I am interested in Logic in general.</p>\n<p>Can somebody help me figure out how to install lean and configure emacs on my system?</p>",
        "id": 134380063,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1537538904
    },
    {
        "content": "<p>I suggest homebrew if you are on a mac</p>",
        "id": 134380466,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1537539304
    },
    {
        "content": "<p>I am on linux mint</p>",
        "id": 134380797,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1537539610
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2017/12/02/how-to-install-mathlib-and-keep-it-up-to-date/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2017/12/02/how-to-install-mathlib-and-keep-it-up-to-date/\">https://xenaproject.wordpress.com/2017/12/02/how-to-install-mathlib-and-keep-it-up-to-date/</a></p>",
        "id": 134392224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537551119
    },
    {
        "content": "<p>Does that help? Are there some instructions somewhere on github? I forget.</p>",
        "id": 134392286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537551163
    },
    {
        "content": "<p>Hi there, I've just started going through Theorem Proving In Lean and I've got to say I've really been enjoying using it. I come from a functional programming background, and when I tried out Idris earlier this year I really got a pull into the dependent type world. Lean has been a joy to use thus far in comparison to Idris for the very small reason that it's impeccably fast for displaying goals &amp; holes making the whole process feel really smooth rather than a little clunky (though I do enjoy Idris' ability to name holes). Out of curiosity, does anyone know of any performance comparisons of Lean vs Idris, would be neat to know.</p>",
        "id": 134396506,
        "sender_full_name": "Robert Kornacki",
        "timestamp": 1537555360
    },
    {
        "content": "<p>Seeing as how Idris allows for code extraction to C, and is a language very much more focused on programming, I can't imagine the comparison being very favorable. When Lean 4 rolls around, that'll be a more interesting comparison since there will be easy interop with C++</p>",
        "id": 134400827,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1537560007
    },
    {
        "content": "<p>And ordinary lean programs will be compiled/JITted, as I understand it, rather than run in a VM like today</p>",
        "id": 134403093,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537562153
    },
    {
        "content": "<p>Hi All, I am a research engineer at Galois.  I am mainly used to Isabelle, and less-so Coq.  I am mainly interested in program verification, but also am keen on theorem proving in general.</p>",
        "id": 134559792,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1537826606
    },
    {
        "content": "<p>Hi Simon! Welcome to Lean! I was an intern at Galois last year and that's actually where I first started using Lean. I got hooked.</p>",
        "id": 134566178,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537835756
    },
    {
        "content": "<p>Ah, I thought I recognised your name,</p>",
        "id": 134572150,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1537847177
    },
    {
        "content": "<p>Hello all. I've been following UF/HoTT/proof assistants as a lurker since the special year at the IAS. I'm in category theory/differential geometry/topos theory. I have some non-commutative algebra constructions (groupoid/category algebras) that I'd like to have a crack at formalising, as I warm up to learning about serious C*-algebra stuff (don't think I'd formalise that, but who knows...)</p>",
        "id": 134737991,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1538047397
    },
    {
        "content": "<p>By far the best way to learn how to use the software is to just decide that you're going to try formalising X (rather than X and Y and Z and W) and then ask on the forum with a precise reference of what you're aiming at, and you'll get comments either of the form \"this is done\" or \"this is feasible, start like this\" or \"this is way too hard, you'll first need to do X' so if you're still interested in then start there\".</p>",
        "id": 134739330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538049289
    },
    {
        "content": "<p>OK, thanks. :-)</p>",
        "id": 134740913,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1538051385
    },
    {
        "content": "<p>...although probably reading Theorem Proving In Lean might help too. I was planning on writing docs for mathematicians over the summer, but my mathematicians didn't really seem to need docs, they asked each other questions (or me) and got stuck on things which wouldn't necessarily be covered in the docs I was planning on writing, so I didn't write them. I might have to write them next month when I have far more students than I can talk to individually.</p>",
        "id": 134754218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538063459
    },
    {
        "content": "<p>I guess even if you don't plan on formalising something, you could still state more precisely what you might be interested in formalising and the community might offer comments.</p>",
        "id": 134754259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538063521
    },
    {
        "content": "<p>Welcome, David! It's fun here. :-)</p>",
        "id": 134776123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538085302
    },
    {
        "content": "<p>Well, given a small groupoid and a field, I want to construct the convolution algebra on the vector space with basis the arrows of that groupoid, and also construct the multiplier algebra of such a beast. I guess I would need:</p>\n<p>fields<br>\nvector spaces<br>\nalgebras<br>\nsmall groupoids<br>\nmodules and their maps</p>\n<p>I'll have to have a dig through mathlib to see what's there already, but I imagine a bunch of those (if not small groupoids) have been done.</p>",
        "id": 134778506,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1538088306
    },
    {
        "content": "<p>We have all of those except algebras and groupoids, although we have categories so it's not hard to state what a groupoid is.</p>",
        "id": 134778666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538088495
    },
    {
        "content": "<p>I have (small) groupoids in another project already which I could PR</p>",
        "id": 134778683,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538088518
    },
    {
        "content": "<p>It's the most basic possible thing, but should get you started</p>",
        "id": 134778701,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538088539
    },
    {
        "content": "<p>what is the convolution algebra?</p>",
        "id": 134778720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538088560
    },
    {
        "content": "<p>I guess the elements of the algebra are linear combinations of arrows of the groupoid, and multiplication involves the composition of arrows somehow?</p>",
        "id": 134778791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538088637
    },
    {
        "content": "<p>what is an <code>algebra</code> in this context? The word is used in so many ways. In commutative ring theory \"A is a B-algebra\" is simply a long-winded say of saying <code>f : B -&gt; A</code></p>",
        "id": 134808586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538122134
    },
    {
        "content": "<p>Mario: Correct. Multiplication is the bilinear extension of f*g = f\\circ g (if composable), 0 (if not)</p>",
        "id": 134809225,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1538123019
    },
    {
        "content": "<p>Kevin:  a vector space with an associative bilinear multiplication—and I'm not going to assume unital.</p>",
        "id": 134809282,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1538123082
    },
    {
        "content": "<p>Well making this definition is trivial, but Lean doesn't quite work like that; one also has to make a basic API for the definition, which means proving 20 trivial lemmas about it</p>",
        "id": 134809370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538123247
    },
    {
        "content": "<p>and giving them names which computer scientists find acceptable</p>",
        "id": 134809379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538123279
    },
    {
        "content": "<p>(something which I was initially skeptical about but now have very much come around to)</p>",
        "id": 134809429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538123307
    },
    {
        "content": "<p><del>computer scientists</del> Mario and Johannes</p>",
        "id": 134809430,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538123308
    },
    {
        "content": "<p>Apologies for bad-mouthing the CS community in general :-)</p>",
        "id": 134809443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538123322
    },
    {
        "content": "<p>Here a question that I don't know how to answer: are Lie algebras algebras?</p>",
        "id": 134809452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538123341
    },
    {
        "content": "<p>Bourbaki says: yes</p>",
        "id": 134809460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538123351
    },
    {
        "content": "<p>not in general I guess</p>",
        "id": 134809461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538123352
    },
    {
        "content": "<p>But I think Lean will run into trouble with notation...</p>",
        "id": 134809465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538123368
    },
    {
        "content": "<p>But it's completely consistent that Bourbaki have a different definition of algebra</p>",
        "id": 134809466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538123369
    },
    {
        "content": "<p>I think if we want to use <code>has_mul</code> then the multiplication must be associative.</p>",
        "id": 134809544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538123462
    },
    {
        "content": "<p>the word is used in so many ways. I think I once checked explicitly that the Lie bracket was not associative in general, even though there's a meta-proof of the form \"if it were associative in general then someone would have pointed this out by now\".</p>",
        "id": 134809550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538123464
    },
    {
        "content": "<p>Otherwise brains will explode</p>",
        "id": 134809559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538123469
    },
    {
        "content": "<p><code>has_mul</code> is just notation, it doesn't have to be associative by definition</p>",
        "id": 134809563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538123483
    },
    {
        "content": "<p>associative Lie brackets are trivial, right? So you get abelian Lie algebras</p>",
        "id": 134809568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538123504
    },
    {
        "content": "<p>Notation is a minefield and it's now my opinion that this is to a large extent the fault of mathematics.</p>",
        "id": 134809613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538123524
    },
    {
        "content": "<p>Sure, but non-associative <code>has_mul</code> might even create more problems then your <code>int</code> vs <code>nat</code> woes</p>",
        "id": 134809619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538123545
    },
    {
        "content": "<p>We invented notation over the last few hundred years and some of it is awful. Quadratic Reciprocity is a statement about fractions in brackets.</p>",
        "id": 134809628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538123578
    },
    {
        "content": "<p>Somehow even Lean depends on notation. When I first understood that the simplifier relied on notation I was really disturbed.</p>",
        "id": 134809704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538123670
    },
    {
        "content": "<p>But notation seems to be more than just syntactic sugar</p>",
        "id": 134809707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538123683
    },
    {
        "content": "<p>Unfolding is an art, this is my understanding of it. If you unfold everything then you have a complete mess which you cannot work with. But <em>notation</em>? Doesn't that just get unfolded by the parser right at square 1 so <code>simp</code> can't even notice it is there?</p>",
        "id": 134809815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538123831
    },
    {
        "content": "<p>there might be a terminological clash here - <code>has_mul</code> and such are often called \"notation typeclasses\" since they have a notation associated to them, but obviously <code>simp</code> knows about <code>has_mul</code>, even if it doesn't know that <code>*</code> is used to draw it</p>",
        "id": 134809871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538123937
    },
    {
        "content": "<p>Aaah, so we can drop the associativity condition</p>",
        "id": 134809884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538123974
    },
    {
        "content": "<p>And make <code>[X,Y]</code> notation for <code>Lie_algebra.mul X Y</code></p>",
        "id": 134809890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124000
    },
    {
        "content": "<p>It's really sad that we can't bind notation to namespaces...</p>",
        "id": 134809940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you think this is a viable strategy? To have <code>algebra</code> and then <code>is_unital</code>, <code>is_assoc</code>, <code>is_comm</code>, etc...</p>",
        "id": 134810105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124316
    },
    {
        "content": "<p>Where <code>algebra</code> just means bilinear multiplication on a module.</p>",
        "id": 134810107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124344
    },
    {
        "content": "<p>ironically, there is already <code>is_comm</code>, <code>is_assoc</code> etc in <code>@[algebra]</code></p>",
        "id": 134810151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538124366
    },
    {
        "content": "<p>but I think that means something different</p>",
        "id": 134810156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538124374
    },
    {
        "content": "<p>What do they mean?</p>",
        "id": 134810158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124384
    },
    {
        "content": "<p>it is not bound to a notation</p>",
        "id": 134810160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538124397
    },
    {
        "content": "<p>Ok, but we could have <code>has_mul.is_assoc</code> etc, right?</p>",
        "id": 134810162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124411
    },
    {
        "content": "<p>what's the use case?</p>",
        "id": 134810169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538124423
    },
    {
        "content": "<p>Well, there are entire fields of mathematics that work with associative algebras</p>",
        "id": 134810175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124444
    },
    {
        "content": "<p>But there are also entire books about non-associative algebras</p>",
        "id": 134810181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124459
    },
    {
        "content": "<p>but you don't want to use <code>*</code> for them, right?</p>",
        "id": 134810182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538124460
    },
    {
        "content": "<p>Sometimes the associative algebras are unital, and/or commutative</p>",
        "id": 134810191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124474
    },
    {
        "content": "<p>Why not use <code>*</code>?</p>",
        "id": 134810194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124481
    },
    {
        "content": "<p>that's whatever</p>",
        "id": 134810195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538124481
    },
    {
        "content": "<p>My proposal is to use <code>has_mul</code> for all of them</p>",
        "id": 134810239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124505
    },
    {
        "content": "<p>If you want to use <code>*</code>, go ahead and define your typeclass based on <code>has_mul</code></p>",
        "id": 134810240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538124506
    },
    {
        "content": "<p>And then only for Lie algebras introduce a second notation, namely <code>[X,Y]</code> instead of <code>X * Y</code></p>",
        "id": 134810250,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124529
    },
    {
        "content": "<p>the danger is if you need a conventional mul and also a lie bracket thing at the same time</p>",
        "id": 134810251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538124530
    },
    {
        "content": "<p>I have never heard of that before</p>",
        "id": 134810256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124546
    },
    {
        "content": "<p>Ah, I do</p>",
        "id": 134810260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124552
    },
    {
        "content": "<p>Hmmm... that's nasty</p>",
        "id": 134810263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124561
    },
    {
        "content": "<p>Every ring gives a Lie algebra, via the commutator bracket</p>",
        "id": 134810271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124578
    },
    {
        "content": "<p>yeah you probably don't want to confuse those</p>",
        "id": 134810278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538124595
    },
    {
        "content": "<p>Hmmm... so we have <code>algebra</code> without notation. Just the <code>op</code>. And then <code>assoc_algebra</code> gets <code>has_mul</code>, and <code>Lie_algebra</code> gets <code>has_bracket</code>. Could that work?</p>",
        "id": 134810340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124638
    },
    {
        "content": "<p>Hmm... but then there would still be two instances of <code>algebra</code> on every <code>ring</code>.</p>",
        "id": 134810358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124675
    },
    {
        "content": "<p>And they aren't even equal.</p>",
        "id": 134810363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124689
    },
    {
        "content": "<p>What about a translation wrapper like <code>multiplicative</code>?</p>",
        "id": 134810370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538124703
    },
    {
        "content": "<p>What would that do?</p>",
        "id": 134810414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124732
    },
    {
        "content": "<p>change the notation</p>",
        "id": 134810431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538124768
    },
    {
        "content": "<p>so you could develop the theory on <code>has_mul</code>, and then transfer any results to the <code>has_bracket</code> version</p>",
        "id": 134810447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538124791
    },
    {
        "content": "<p>Ok, but then, suppose we have <code>[ring R]</code>, this would give <code>[algebra R]</code>. And then? Something like <code>[Lie_algebra (commutator R)]</code>?</p>",
        "id": 134810512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538124845
    },
    {
        "content": "<p>Isn't semigroup has_mul.assoc?</p>",
        "id": 134811201,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538125637
    },
    {
        "content": "<p>Yeah but the Lie algebra associated to a ring is a second \"multiplication\", defined as <code>[a,b] = a*b-b*a</code>. This is not associative.</p>",
        "id": 134811280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538125736
    },
    {
        "content": "<p>It's not even a multiplication really, this conversation was started by the observation that Bourbaki apparently claims that Lie algebras are \"algebras\", whatever that word means.</p>",
        "id": 134811302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538125781
    },
    {
        "content": "<p>I think this is the wrong thread</p>",
        "id": 134812486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538127283
    },
    {
        "content": "<p>Sorry for the slow response, went on vacation right after learning about Lean :). I read about the verification of Feit-Thompson and I was really impressed that compute checked proofs have come so far that such a thing was possible. That lead to doing a survey of proof checkers, and it seemed that Lean was a much more dynamic community than Coq and some of the others. If I needed any more proof that Lean is legit, seeing Kevin Buzzard here is a pretty strong endorsement.</p>\n<p>I actually left academia a couple years ago for industry, and I've been thinking about find project that would allow me to be more involved with math and work on something that would useful to the community.</p>",
        "id": 134948015,
        "sender_full_name": "Ryan Smith",
        "timestamp": 1538365616
    },
    {
        "content": "<p>Hi everyone. My name is Matthew Ballard. Currently I am based in South Carolina. I am teaching an intro to proofs course here in the fall which is following Jeremy's lead. I am also working on a proposal for an REU based whose theme formal verification in Lean of results on Noether's Problem (given G acting on k(x_1,...,x_d) is k(x_1,...,x_d)^G purely transcendental). The hope is to develop enough over the course of 3 years to produce a formal verification of Saltman's counterexample(s) over \\C. I have been looking through mathlib to help plot a feasible course for this. I welcome any and all advice.</p>",
        "id": 203109968,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1594132322
    },
    {
        "content": "<p>Welcome! Do you already know how to use Lean, or do you intend to learn now?</p>",
        "id": 203110327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594132474
    },
    {
        "content": "<p>In case you need to learn or have colleagues who'd like to learn, have you heard of <a href=\"https://leanprover-community.github.io/lftcm2020/\">https://leanprover-community.github.io/lftcm2020/</a>?</p>",
        "id": 203110443,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594132523
    },
    {
        "content": "<p>Thanks. My level: the tutorials, the natural number game, and the exercises in Jeremy's online text. I've 'registered' for the conference myself also. Not helpless but still a novice.</p>",
        "id": 203110679,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1594132642
    },
    {
        "content": "<p>Which one do you call Jeremy's online text? He is a rather prolific author of useful texts.</p>",
        "id": 203110798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594132692
    },
    {
        "content": "<p>Good point. <a href=\"https://leanprover.github.io/logic_and_proof/\">https://leanprover.github.io/logic_and_proof/</a></p>",
        "id": 203110860,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1594132737
    },
    {
        "content": "<p>The community as a whole seems quite inviting and committed to supporting learning - which is greatly appreciated.</p>",
        "id": 203111000,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1594132802
    },
    {
        "content": "<p>Ok, I thought you meant that one, but there are others.</p>",
        "id": 203111126,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594132847
    },
    {
        "content": "<p>Yeah. I've encountered and browsed some.</p>",
        "id": 203111235,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1594132907
    },
    {
        "content": "<p>One precise question: what other repositories exist that might not yet (or never) be merged into mathlib?</p>",
        "id": 203111462,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1594133030
    },
    {
        "content": "<p>Do you mind helping to evaluate the workshop communication? Could you please tell us whether the following was clear to you when reading the website: </p>\n<ul>\n<li>given what you just wrote, you can probably skip Monday and Tuesday and still enjoy Wednesday to Friday</li>\n<li>if you feel like helping others, you could come on Monday and Tuesday and help </li>\n<li>you could try to follow the alternative Monday afternoon about meta-programming, it would probably be quite tough but it wouldn't be a problem for the rest of the week.</li>\n</ul>",
        "id": 203111567,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594133066
    },
    {
        "content": "<p>I would say those were clear.</p>",
        "id": 203111920,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1594133231
    },
    {
        "content": "<p>About other repositories, you can get some answers by browsing <a href=\"https://leanprover-community.github.io/papers.html\">https://leanprover-community.github.io/papers.html</a> (or even the excerpt at the bottom of the home page). For instance that would tell you about the cap set repo, perfectoid spaces repo, continuum hypothesis repo.</p>",
        "id": 203111957,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594133254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113489-new-members/topic/Introductions/near/203111462\">said</a>:</p>\n<blockquote>\n<p>One precise question: what other repositories exist that might not yet (or never) be merged into mathlib?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's Xena repo is one, I don't have the link handy. The published projects are mostly covered by Patrick's links.</p>",
        "id": 203112094,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594133312
    },
    {
        "content": "<p>Great, thanks Matthew.</p>",
        "id": 203112117,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594133325
    },
    {
        "content": "<p>Reid probably also has hidden treasures.</p>",
        "id": 203112153,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594133348
    },
    {
        "content": "<p><a href=\"https://github.com/rwbarton/lean-homotopy-theory\">https://github.com/rwbarton/lean-homotopy-theory</a></p>",
        "id": 203112197,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594133372
    },
    {
        "content": "<p>Thanks. I know from <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> blog and locating the subsequent papers that group cohomology exists. Would anyone care to comment on the development of Galois theory?</p>",
        "id": 203112799,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1594133657
    },
    {
        "content": "<p>This discussion happened recently:<br>\n<a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20there.20code.20for.20Galois.20theory.3F\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20there.20code.20for.20Galois.20theory.3F</a></p>",
        "id": 203113092,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594133779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113489-new-members/topic/Introductions/near/203111462\">said</a>:</p>\n<blockquote>\n<p>One precise question: what other repositories exist that might not yet (or never) be merged into mathlib?</p>\n</blockquote>\n<p>A couple more things here - there's my combinatorics and topos theory repos which are very slowly being merged, and also Neil Strickland has a nontrivial maths repo too (which might be out of date)</p>",
        "id": 203113725,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594134064
    },
    {
        "content": "<p>One of my jobs this summer is to work on the schemes repository again</p>",
        "id": 203138708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594145331
    }
]