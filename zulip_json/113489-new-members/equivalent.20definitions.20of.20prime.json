[
    {
        "content": "<p>I have another definition for prime and I want to prove that it's equivalent to the definition in mathlib. My definition is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">divisors_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n           <span class=\"k\">then</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">h</span>\n           <span class=\"k\">else</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">h</span>\n\n<span class=\"n\">def</span> <span class=\"n\">divisors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">myprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">divisors</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">p</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>The <code>divisors</code> function gives a list of divisors, and <code>myprime p</code> says a number is primes if the divisor are <code>1</code> and <code>p</code>.</p>\n<p>Here's my attempt at the first direction</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">my_prime_good</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">myprime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">two_le</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s₄</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">dvd_prime</span> <span class=\"n\">pp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">divisors</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">p</span><span class=\"o\">],</span> <span class=\"k\">from</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">divisors</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"bp\">→</span> <span class=\"n\">myprime</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"k\">begin</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">myprime</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">myprime</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"k\">begin</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">s₃</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">s₁</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">s₂</span> <span class=\"o\">(</span><span class=\"n\">s₄</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I'm totally stuck at the <code>sorry</code>. I think I need to break <code>divisors</code> into cases somehow. How can I prove this?</p>",
        "id": 179198552,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572231170
    },
    {
        "content": "<p>Since you defined <code>divisors_aux</code> by recursion you will need to prove things about it by induction. By the way, you should test your functions using <code>#eval (divisors 5)</code> to see if it really behaves how you expect.</p>",
        "id": 179199260,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572232373
    },
    {
        "content": "<p>You can prove something like if <code>p</code> is prime and <code>1 &lt;= a &lt;= p</code> then <code>divisors_aux p a = [1]</code> by induction on <code>a</code>, and then compute <code>divisors p</code>.</p>",
        "id": 179199271,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572232423
    },
    {
        "content": "<p>I had a go at proving that if <code>p</code> is prime and <code>1 &lt;= a &lt;= p</code> then <code>divisors_aux p a = [1]</code>, but I don't know how to break apart <code>divisors_aux</code>. When I run <code>unfold divisors_aux</code> I get the error \"simplify tactic failed to simplify.\" Is there some other way to unfold these definitions, or is there a way around this problem?</p>",
        "id": 179390595,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572394088
    },
    {
        "content": "<p><code>divisors_aux n 0</code> and <code>divisors_aux n (h+1)</code> can be simplified, but not <code>divisors_aux</code></p>",
        "id": 179391306,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572394571
    },
    {
        "content": "<p>so you need to do (strong) induction on the input</p>",
        "id": 179391316,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572394582
    },
    {
        "content": "<p>also you might want to try <code>#eval divisors_aux [some number] [some number]</code> to see if you got the function right</p>",
        "id": 179391417,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572394666
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">divisors_aux</span> <span class=\"mi\">12</span> <span class=\"mi\">13</span> <span class=\"c1\">-- [12, 6, 4, 3, 2, 1, 1]</span>\n</pre></div>",
        "id": 179391508,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572394733
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">divisors_aux</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">divisors_aux : ℕ → ℕ → list ℕ</span>\n<span class=\"cm\">divisors_aux._main : ℕ → ℕ → list ℕ</span>\n<span class=\"cm\">divisors_aux._main._meta_aux : ℕ → ℕ → list ℕ</span>\n<span class=\"cm\">divisors_aux._main.equations._eqn_1 : ∀ (n : ℕ), divisors_aux._main n 0 = list.nil</span>\n<span class=\"cm\">divisors_aux._main.equations._eqn_2 : ∀ (n : ℕ), divisors_aux._main n 1 = [1]</span>\n<span class=\"cm\">divisors_aux._main.equations._eqn_3 : ∀ (n n_1 : ℕ),</span>\n<span class=\"cm\">  divisors_aux._main n (nat.succ n_1 + 1) =</span>\n<span class=\"cm\">    ite (n % nat.succ n_1 = 0) ([nat.succ n_1] ++ divisors_aux._main n (nat.succ n_1))</span>\n<span class=\"cm\">      (divisors_aux._main n (nat.succ n_1))</span>\n<span class=\"cm\">divisors_aux._sunfold : ℕ → ℕ → list ℕ</span>\n<span class=\"cm\">divisors_aux.equations._eqn_1 : ∀ (n : ℕ), divisors_aux n 0 = list.nil</span>\n<span class=\"cm\">divisors_aux.equations._eqn_2 : ∀ (n : ℕ), divisors_aux n 1 = [1]</span>\n<span class=\"cm\">divisors_aux.equations._eqn_3 : ∀ (n n_1 : ℕ),</span>\n<span class=\"cm\">  divisors_aux n (nat.succ n_1 + 1) =</span>\n<span class=\"cm\">    ite (n % nat.succ n_1 = 0) ([nat.succ n_1] ++ divisors_aux n (nat.succ n_1)) (divisors_aux n (nat.succ n_1))</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 179391566,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572394793
    },
    {
        "content": "<p><code>h+1</code> and <code>1</code> are overlapping cases</p>",
        "id": 179391626,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572394810
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">divisors_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n           <span class=\"k\">then</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">h</span>\n           <span class=\"k\">else</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">h</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">divisors_aux</span> <span class=\"mi\">12</span> <span class=\"mi\">100</span> <span class=\"c1\">-- [12, 6, 4, 3, 2, 1]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">divisors_aux</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">divisors_aux : ℕ → ℕ → list ℕ</span>\n<span class=\"cm\">divisors_aux._main : ℕ → ℕ → list ℕ</span>\n<span class=\"cm\">divisors_aux._main._meta_aux : ℕ → ℕ → list ℕ</span>\n<span class=\"cm\">divisors_aux._main.equations._eqn_1 : ∀ (n : ℕ), divisors_aux._main n 0 = list.nil</span>\n<span class=\"cm\">divisors_aux._main.equations._eqn_2 : ∀ (n h : ℕ), divisors_aux._main n (h + 1) = ite (n % h = 0) ([h] ++ divisors_aux._main n h) (divisors_aux._main n h)</span>\n<span class=\"cm\">divisors_aux._sunfold : ℕ → ℕ → list ℕ</span>\n<span class=\"cm\">divisors_aux.equations._eqn_1 : ∀ (n : ℕ), divisors_aux n 0 = list.nil</span>\n<span class=\"cm\">divisors_aux.equations._eqn_2 : ∀ (n h : ℕ), divisors_aux n (h + 1) = ite (n % h = 0) ([h] ++ divisors_aux n h) (divisors_aux n h)</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 179391667,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572394860
    },
    {
        "content": "<p>maybe this is what you want</p>",
        "id": 179391675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572394864
    },
    {
        "content": "<p>also beware of the edge case:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">divisors_aux</span> <span class=\"mi\">0</span> <span class=\"mi\">10</span> <span class=\"c1\">-- [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</span>\n</pre></div>",
        "id": 179391708,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572394898
    },
    {
        "content": "<p>Ok, I fixed the function so that it doesn't give two ones in the divisors list. But I'm still stuck with simplifying <code>divisors_aux</code>. When I try <code>unfold [divisors_aux p (p+1)]</code> I get the error \"unknown identifier 'p'\", <code>unfold (divisors_aux p (p+1)),</code> gives the same error. I'm not sure what I'm doing wrong.</p>",
        "id": 179394396,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572397775
    },
    {
        "content": "<p>What are you trying to do? Mathematically?</p>",
        "id": 179394578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572398073
    },
    {
        "content": "<p>Can you formalise an intermediate step which you'd like to prove?</p>",
        "id": 179394591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572398118
    },
    {
        "content": "<p>There are two questions -- first what exactly you're trying to do in maths, and then how best to do it in Lean</p>",
        "id": 179394601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572398153
    },
    {
        "content": "<p>Ultimately, what I want to do is show that the definition</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">myprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">divisors</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">p</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>is equivalent to the definition for <code>prime</code> in mathlib.</p>\n<p>To prove the first direction <code>prime p → myprime p</code>, I want to prove</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">divisors</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">p</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>But I'm stuck. I want to break <code>divisors</code> down into <code>divisors_aux</code> and then break <code>divisors_aux</code> into something I can work with. I'm not sure how to unfold <code>divisors_aux p (p+1)</code>, both <code>unfold</code> and <code>dsimp</code> don't seem to work. I don't know if it's a syntax issue or what.</p>",
        "id": 179395892,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572400248
    },
    {
        "content": "<p>Maybe this addresses your question about unfolding. Note that Lean already automatically \"sees through\" <code>divisors_aux</code> to its definition, no unfolding is required:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>If you have a goal involving <code>divisors_aux</code>, you can use <code>show</code> to change the goal to a definitionally equivalent expression:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ⊢ divisors_aux m 0 = l</span>\n    <span class=\"k\">show</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- ⊢ list.nil = l</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ⊢ divisors_aux m (nat.succ n) = l</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"bp\">_</span> <span class=\"k\">then</span> <span class=\"bp\">_</span> <span class=\"k\">else</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- ⊢ ite (m % nat.add n 0 = 0) ([nat.add n 0] ++ divisors_aux m (nat.add n 0)) (divisors_aux m (nat.add n 0)) = l</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This is sometimes useful for making proofs easier to follow, though in most cases you can delete <code>show</code> without changing the result.</p>",
        "id": 179395923,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572400322
    },
    {
        "content": "<p>So to address your most recent message, you can either just work with <code>divisors_aux p (p+1)</code> as if it were already in the form <code>if _ then _ else _</code> or you can use the <code>show</code> tactic to make that explicit in the tactic state first.</p>",
        "id": 179396123,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572400593
    },
    {
        "content": "<p>The example</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>doesn't work for me. I get a red squiggle under the <code>rfl</code> with the error </p>\n<div class=\"codehilite\"><pre><span></span>type mismatch, term  rfl\nhas type\n  ?m_2 = ?m_2\nbut is expected to have type\n  divisors_aux n (h + 1) = ite (n % h = 0) ([h] ++ divisors_aux n h) (divisors_aux n h)&quot;\n</pre></div>\n\n\n<p>Is my lean out of date or something?</p>",
        "id": 179396446,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572401116
    },
    {
        "content": "<p>Oh hmm, maybe I'm using a different definition for <code>divisors_aux</code>. Here's the full file:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">divisors_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n           <span class=\"k\">then</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">h</span>\n           <span class=\"k\">else</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 179396579,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572401338
    },
    {
        "content": "<p>If you post your new definition of <code>divisors_aux</code> I can update my examples above, but basically if you replace the stuff on the right hand side of the equation with a suitable version of whatever's in the <code>(h+1)</code> case of your new definition, <code>rfl</code> should work. (I say \"a suitable version\" because you may have to do things like replace <code>divisors_aux h</code> with <code>divisors_aux m n</code> as I did in my example.)</p>",
        "id": 179397028,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572402030
    },
    {
        "content": "<p>The problem was that my definition for <code>divisors_aux</code> had an unnecessary case <code>| 1     := []</code> in it. It now works. I'm gonna mess around with this for a while. Thanks for the help :).</p>",
        "id": 179397165,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572402249
    },
    {
        "content": "<p>Is it possible to start <code>induction a</code> at <code>2</code> instead of <code>0</code> if we have the hypothesis <code>a &gt;= 2</code>?</p>",
        "id": 179680736,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572661718
    },
    {
        "content": "<p>If I want a quick and dirty solution to this I just do cases a couple of times before I start. Hang on I'll knock something up.</p>",
        "id": 179680749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572661771
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">induction_from_2</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"c1\">-- no longer of any use to us</span>\n  <span class=\"c1\">-- induction starts here on c=0 with a=c+2</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">],</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 179681107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572662437
    },
    {
        "content": "<p>You can just apply that function now</p>",
        "id": 179681112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572662473
    },
    {
        "content": "<p>if you can't be bothered to fill in an input, just use _ and Lean will try and figure it out.</p>",
        "id": 179681114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572662496
    },
    {
        "content": "<p>Ok, thanks.</p>",
        "id": 179681162,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572662561
    },
    {
        "content": "<p>If you want more hints about how to steer that function, just post some code and I'll show you how to drop it in.</p>",
        "id": 179681216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572662657
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">solve_by_elim</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">induction_from</span> <span class=\"o\">{</span><span class=\"n\">proposition</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">proposition_start</span> <span class=\"o\">:</span> <span class=\"n\">proposition</span> <span class=\"n\">start</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">induction_hypothesis</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">start</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">proposition</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">proposition</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">current</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">start_le_current</span> <span class=\"o\">:</span> <span class=\"n\">start</span> <span class=\"bp\">≤</span> <span class=\"n\">current</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">proposition</span> <span class=\"n\">current</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">start_le_current</span><span class=\"bp\">;</span> <span class=\"n\">solve_by_elim</span>\n</pre></div>",
        "id": 179681217,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572662658
    },
    {
        "content": "<p>Go Kenny</p>",
        "id": 179681219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572662665
    },
    {
        "content": "<p>the trick is to actually do induction on the inequality</p>",
        "id": 179681220,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572662669
    },
    {
        "content": "<p>Kenny has proved the general case by induction on the starting point.</p>",
        "id": 179681223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572662690
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">solve_by_elim</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">induction_from</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsn</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">hsn</span><span class=\"bp\">;</span> <span class=\"n\">solve_by_elim</span>\n</pre></div>",
        "id": 179681234,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572662716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209436\">@Lucas Allen</span> they are making better and better tools to do this job. They can even turn them into tactics for you.</p>",
        "id": 179681278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572662774
    },
    {
        "content": "<p>(I don't know how to do that)</p>",
        "id": 179681280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572662786
    },
    {
        "content": "<p>why are condensed variable names preferred?</p>",
        "id": 179681288,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572662839
    },
    {
        "content": "<p>Oh... so the induction tactic can already handle this problem?</p>",
        "id": 179681652,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572663417
    },
    {
        "content": "<p>yes because <code>\\le</code> for <code>nat</code> is defined inductively</p>",
        "id": 179681709,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572663490
    },
    {
        "content": "<p>Cool, thanks.</p>",
        "id": 179681712,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572663522
    },
    {
        "content": "<p>I have the goal</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">k</span> <span class=\"err\">∈</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">%</span> <span class=\"n\">h₁_b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">([</span><span class=\"n\">h₁_b</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">divisors_aux</span> <span class=\"n\">p</span> <span class=\"n\">h₁_b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">divisors_aux</span> <span class=\"n\">p</span> <span class=\"n\">h₁_b</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>and the hypothesis <code>h₁_ih : k ∈ divisors_aux p h₁_b</code>. Is there some way to split the goal into two goals, one where <code>p % h₁_b = 0</code> is true and one where it's false?</p>\n<p>Another problem I have is the goal</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"err\">∣</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n</pre></div>\n\n\n<p>with the hypthoses <code>s₄ : k ∣ p → k = 1 ∨ k = p</code>, and <code>k : ℕ</code>, I tried using <code>revert</code> but it reverts all the hypotheses between <code>k</code> and <code>s₄ </code>. Now I'm wondering if this theorem is even true.</p>",
        "id": 179899689,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572926078
    },
    {
        "content": "<p>You could try the <code>split_ifs</code> tactic, or <code>by_cases h : p % h₁_b = 0</code></p>",
        "id": 179899751,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1572926258
    },
    {
        "content": "<p>That works, thanks.</p>",
        "id": 179899793,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572926297
    },
    {
        "content": "<p>I just figured out the second problem as well. I'm finished with this problem now. :)</p>",
        "id": 179899953,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572926608
    },
    {
        "content": "<p>The \"goals accomplished\" buzz :D Very addictive!</p>",
        "id": 179907176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572938294
    }
]