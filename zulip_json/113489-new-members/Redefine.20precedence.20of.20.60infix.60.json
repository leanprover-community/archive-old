[
    {
        "content": "<p>How can I redefine the precedence of <code>infixr</code> declarations? I want to make <code>A ⇒ B :: Γ</code> parse as <code>(A ⇒ B) :: Γ</code> in a file where <code>logic.relator</code> is imported (via other imports).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">relator</span>\n\n<span class=\"c1\">-- _ `⇒`:40 _:39 := relator.lift_fun #1 #0</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">notation</span> <span class=\"err\">⇒</span>\n\n<span class=\"c1\">-- Works, but parenthesis are needed.</span>\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span><span class=\"err\">⇒</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">notation</span> <span class=\"err\">⇒</span> <span class=\"c1\">-- _ `⇒`:40 _:39</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"err\">⇒</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">[]</span>\n\n<span class=\"c1\">-- Doesn&#39;t work.</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">notation</span> <span class=\"err\">⇒</span> <span class=\"c1\">-- _ `⇒`:40 _:39</span>\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span><span class=\"err\">⇒</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Works, but parenthesis are still needed</span>\n<span class=\"kn\">notation</span> <span class=\"n\">A</span> <span class=\"bp\">`</span><span class=\"err\">⇒</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">notation</span> <span class=\"err\">⇒</span> <span class=\"c1\">-- _ `⇒`:80 _:39</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"err\">⇒</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 205195058,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1595906768
    },
    {
        "content": "<p>As far as I understand (I may be wrong) once the precedence is defined, you can't redefine it.</p>",
        "id": 205195273,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595907238
    },
    {
        "content": "<p>But you can use another symbol.</p>",
        "id": 205195311,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595907247
    },
    {
        "content": "<p>I have a related issue,  <code>∧</code> (<code>\\wedge</code>) is reserved in  <code>init.core</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">reserve</span> <span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">∧</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">35</span>\n</code></pre></div>\n\n\n<p>I need it as wedge product (in exterior algebra), and I don't understand why it's right-associative, and I want a similar precedence to <code>*</code>.</p>",
        "id": 205195930,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595908293
    },
    {
        "content": "<p>I got the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> working but I don't know if it's idiomatic or if there would be consequences:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">localized</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">domain</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_wedge</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">wedge</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;infix ∧:70 := has_wedge.wedge&quot;</span> <span class=\"k\">in</span> <span class=\"n\">domain</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">domain</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">userland</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">domain</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">domain</span>\n\n<span class=\"c1\">-- I&#39;m being lazy here to define a dummy wedge</span>\n<span class=\"kn\">instance</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">to_has_wedge</span> <span class=\"o\">:</span> <span class=\"n\">has_wedge</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">wedge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"mi\">3</span> <span class=\"c1\">-- 6</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">userland</span>\n</code></pre></div>",
        "id": 205195983,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595908351
    },
    {
        "content": "<p>A direct consequence is that I can't use \"logical and\" in <code>userland</code> anymore.</p>",
        "id": 205196053,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595908540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/Redefine.20precedence.20of.20.60infix.60/near/205195273\">said</a>:</p>\n<blockquote>\n<p>As far as I understand (I may be wrong) once the precedence is defined, you can't redefine it.</p>\n</blockquote>\n<p>Precedence can be redefined. I have improved the example a little, to show what Lean thinks the precedence is in each stage.</p>",
        "id": 205196119,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1595908647
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/Substitution.20notation/near/202767176\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Substitution.20notation/near/202767176</a></p>",
        "id": 205196173,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1595908692
    },
    {
        "content": "<p>If you can't get it to work maybe using a slightly different symbol like curly logical and <code>⋏</code> would be a workaround? (or of course my favourite, U+1F9C0 <span aria-label=\"cheese\" class=\"emoji emoji-1f9c0\" role=\"img\" title=\"cheese\">:cheese:</span> CHEESE WEDGE)</p>",
        "id": 205196183,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595908739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> Then I was wrong.</p>",
        "id": 205196266,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595908833
    },
    {
        "content": "<p>I don't think that reusing a symbol for two different operations is a good idea.</p>",
        "id": 205196278,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595908876
    },
    {
        "content": "<p>I mean, we have lots of this in mathematics but I think that in Lean we should try to come up with different notation each time.</p>",
        "id": 205196353,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595909013
    },
    {
        "content": "<p>Or at least with a notation that does not conflict with core notation.</p>",
        "id": 205196356,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595909033
    },
    {
        "content": "<p>I mean, it's possibly OK to have two conflicting <code>localized notation</code>s in different areas of mathematics but reusing core notation is probably a bad idea.</p>",
        "id": 205196424,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595909116
    },
    {
        "content": "<p>OK, I can live with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- \\curlywedge ⋏</span>\n<span class=\"c1\">-- \\curlyvee ⋎</span>\n</code></pre></div>\n\n\n<p>but I wonder if the situation is changed in Lean 4</p>",
        "id": 205196607,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595909414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/Redefine.20precedence.20of.20.60infix.60/near/205196278\">said</a>:</p>\n<blockquote>\n<p>I don't think that reusing a symbol for two different operations is a good idea.</p>\n</blockquote>\n<p>I agree with that. The thing is, I am never using <code>relator.lift_fun</code> in my current project, so the <code>⇒</code> notation being taken is just an undesirable side-effect of using mathlib.</p>",
        "id": 205197258,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1595910574
    },
    {
        "content": "<p>Possibly <code>⇒</code> should be made a <code>localized notation</code> in <code>mathlib</code>.</p>",
        "id": 205198081,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595911966
    },
    {
        "content": "<p>In <span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span>'s case, the two operator uses could be distinguished by type alone - is this something lean could handle, where if it fails to find <code>has_and</code>, it tries a new operator precedence / associativity and tries <code>has_wedge</code>?</p>",
        "id": 205202919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595919153
    },
    {
        "content": "<p>My experiment shows that Lean is not smart enough to do \"notation polymorphism\".</p>",
        "id": 205203572,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595920013
    },
    {
        "content": "<p>Of course, we can misuse <code>has_and</code> for wedge but this seems strange.</p>",
        "id": 205203774,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595920319
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">dummy</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">⊢ has_wedge Prop</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">dummy&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"mi\">9</span> <span class=\"bp\">=</span> <span class=\"mi\">18</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 205204068,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595920652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/Redefine.20precedence.20of.20.60infix.60/near/205203774\">said</a>:</p>\n<blockquote>\n<p>Of course, we can misuse <code>has_and</code> for wedge but this seems strange.</p>\n</blockquote>\n<p>We can't since we need another bunch of structures on <code>has_wedge</code> and should not apply to <code>has_and</code>......</p>",
        "id": 205204221,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595920802
    },
    {
        "content": "<p>I'm inclined to agree with Yury - if we're willing to accept weird precedence and associativity, aliasing <code>has_wedge</code> to <code>has_and</code> would work just fine - the structure isn't attached to the operators anyway, just like <code>add_monoid</code> contains the structure you'd expect to associate with <code>has_add</code>.</p>",
        "id": 205204446,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595921034
    },
    {
        "content": "<p>Maybe we should rename the class to <code>has_wedge</code> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 205205031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595921624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Unfortunately we can't accept weird precedence and associativity, they would cause much more problem than a clean slate like using<code>⋏</code> and <code>⋎</code>.</p>",
        "id": 205205720,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595922238
    },
    {
        "content": "<p>Of course, we can experiment to see how far it can go, the above is just an intuition, and it's better to avoid the problems for now and focus on what matters.</p>",
        "id": 205205862,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595922342
    }
]