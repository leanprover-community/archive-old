[
    {
        "content": "<p>My goal is to write some of model theory in Lean to get practice with the language.  I am stuck trying to define a term assignment function, which is supposed to convert a term in a language into an element of some universe that is picked out by a structure. Here is what I've tried which does not compile and I'm not sure why.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>           <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span>          <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">rel</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L.relations</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span>         <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>          <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span>         <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">iA</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- An L-structure -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Structure</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">L.relations</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"bp\">𝔸</span> <span class=\"o\">:</span> <span class=\"n\">Structure</span> <span class=\"n\">L</span> <span class=\"n\">A</span>\n\n<span class=\"sd\">/-- Variable assignment function into A -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">var_assign</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n\n<span class=\"sd\">/-- Term assignment function -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">term_assign</span> <span class=\"o\">:=</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.eqn_compiler.elim_match</span> <span class=\"n\">true</span>\n\n<span class=\"sd\">/-- Term assignment function induced by s -/</span>\n<span class=\"sd\">/-- Doesn't compile -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">term_assign_of_s</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">var_assign</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">)</span>               <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">n</span> <span class=\"n\">fsymb</span> <span class=\"n\">args</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">𝔸.</span><span class=\"n\">functions</span> <span class=\"n\">n</span> <span class=\"n\">fsymb</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">term_assign_of_s</span> <span class=\"bp\">∘</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 255471292,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632948315
    },
    {
        "content": "<p>I got  a compiling version, but couldn't get it non-meta (ie. lean doesn't see why this terminates without help/rearanging)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>           <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span>    <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span>          <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">rel</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L.relations</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span>         <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>          <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span>         <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">iA</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- An L-structure -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Structure</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">L.relations</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"bp\">𝔸</span> <span class=\"o\">:</span> <span class=\"n\">Structure</span> <span class=\"n\">L</span> <span class=\"n\">A</span>\n\n<span class=\"sd\">/-- Variable assignment function into A -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">var_assign</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n\n<span class=\"sd\">/-- Term assignment function -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">term_assign</span> <span class=\"o\">:=</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.eqn_compiler.elim_match</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">term_assign_of_s</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">var_assign</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">term.var</span> <span class=\"n\">n</span><span class=\"o\">)</span>               <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">term.func</span> <span class=\"n\">fsymb</span> <span class=\"n\">args</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"bp\">𝔸.</span><span class=\"n\">functions</span> <span class=\"n\">fsymb</span> <span class=\"o\">(</span><span class=\"n\">term_assign_of_s</span> <span class=\"bp\">∘</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 255479170,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632951424
    },
    {
        "content": "<p>What is meta doing here?</p>",
        "id": 255479740,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632951693
    },
    {
        "content": "<p>Its telling lean not to try and check that the recursion halts.</p>",
        "id": 255480469,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632952013
    },
    {
        "content": "<p>So its not really ideal to prove things about, but hopefully you can see the syntax changes to get the function defined at least</p>",
        "id": 255480626,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632952084
    },
    {
        "content": "<p>If you remove it you'll see the error message, maybe check out <a href=\"#narrow/stream/113488-general/topic/Unexpected.20occurence.20of.20recursive.20function/near/243769927\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Unexpected.20occurence.20of.20recursive.20function/near/243769927</a></p>",
        "id": 255480792,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632952170
    },
    {
        "content": "<p>This works without <code>meta</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">term_assign_of_s</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">var_assign</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">term.var</span> <span class=\"n\">n</span><span class=\"o\">)</span>               <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">term.func</span> <span class=\"n\">fsymb</span> <span class=\"n\">args</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"bp\">𝔸.</span><span class=\"n\">functions</span> <span class=\"n\">fsymb</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">term_assign_of_s</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 255481653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632952555
    },
    {
        "content": "<p>The equation compiler can't see through <code>∘</code></p>",
        "id": 255481719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632952566
    },
    {
        "content": "<p>Or phrased in terms of the error message, it does not expect to see recursive functions without their full argument list</p>",
        "id": 255481780,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632952606
    },
    {
        "content": "<p>Thank you. What is the reason you don't need to write a lambda function for matching on the term?</p>",
        "id": 255482712,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632952969
    },
    {
        "content": "<p>The rule is just that you're not allowed to have <code>term_assign_of_s</code> in the RHS unless it's of the form <code>term_assign_of_s x</code></p>",
        "id": 255482807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632953017
    },
    {
        "content": "<p>I don't understand your question</p>",
        "id": 255482835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632953024
    },
    {
        "content": "<p>I'm asking why don't I need to do this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">term_assign_of_s</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">var_assign</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">term.var</span> <span class=\"n\">n</span><span class=\"o\">)</span>               <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">term.func</span> <span class=\"n\">fsymb</span> <span class=\"n\">args</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"bp\">𝔸.</span><span class=\"n\">functions</span> <span class=\"n\">fsymb</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">term_assign_of_s</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 255491358,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632957603
    },
    {
        "content": "<p>the syntax for def-match acts like a lambda followed by a match. What you wrote is mostly equivalent, except that for writing recursive functions the def-match syntax is mandatory</p>",
        "id": 255491964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632957978
    },
    {
        "content": "<p>by def-match I mean <code>def foo (params...) : type | ...</code> instead of <code>def foo (params...) : type := ...</code></p>",
        "id": 255492043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632958033
    },
    {
        "content": "<p>Got it thanks</p>",
        "id": 255494788,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632959821
    },
    {
        "content": "<p>I have another question. How can I overload syntax for formula without Lean getting confused with Prop. For example here I have overloaded <code> = </code> and Lean thinks that I have formula even though I want to be a Prop</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>           <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span>          <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">rel</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L.relations</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span>         <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>          <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span>         <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">88</span>   <span class=\"o\">:=</span> <span class=\"n\">formula.eq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n<span class=\"kn\">open</span> <span class=\"n\">formula</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">occurs_in_term</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">m</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"sd\">/-- Lean thinks this is a formula when it should be a Prop -/</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">to_bool</span> <span class=\"bp\">$</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">occurs_in_term</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 255495454,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632960189
    },
    {
        "content": "<p>The general recommendation is to not do this. Use local notations and don't overload notations you want to use normally</p>",
        "id": 255495654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632960292
    },
    {
        "content": "<p>Lean 4 is much better at this kind of thing</p>",
        "id": 255495725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632960334
    },
    {
        "content": "<p>So just come up with different notation is what you're saying?</p>",
        "id": 255495759,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632960352
    },
    {
        "content": "<p>yes</p>",
        "id": 255495769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632960355
    },
    {
        "content": "<p>Another notation related question</p>",
        "id": 255495777,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632960360
    },
    {
        "content": "<p>Let's say I want to have something like v₁ recognized as the term var 1. Is there a way to do this with notation?</p>",
        "id": 255495902,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632960413
    },
    {
        "content": "<p><code>notation `v` := var 1</code></p>",
        "id": 255496184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632960582
    },
    {
        "content": "<p>or even just <code>def v := var 1</code></p>",
        "id": 255496201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632960593
    },
    {
        "content": "<p>you will probably want to scope it</p>",
        "id": 255496247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632960604
    },
    {
        "content": "<p>Is there any way to make it so that 1 is in the subscript?</p>",
        "id": 255496403,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632960720
    },
    {
        "content": "<p>I'm guessing probably not</p>",
        "id": 255496448,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632960727
    },
    {
        "content": "<p>you can make <code>def v₁ := var 1</code> or <code>notation `v₁` := var 1</code> just the same</p>",
        "id": 255497421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632961426
    },
    {
        "content": "<p>you will have to repeat this for any other subscripts you want to use but generally you won't need more than 0-3 or so</p>",
        "id": 255497499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632961475
    },
    {
        "content": "<p>Oh that makes sense</p>",
        "id": 255497709,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632961629
    },
    {
        "content": "<p>Thanks once again</p>",
        "id": 255497717,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632961635
    },
    {
        "content": "<p>How would one define an example of a Structure with this definition? Here I am trying to give an interpretation to the language of number theory and I have defined the meaning of functions with a specific number of arguments but I am having trouble putting it together at the end</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The language of number theory -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">NT_func</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">NT_func</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">NT_func</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">NT_func</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">NT_func</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">NT_rel</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">NT_rel</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NT</span> <span class=\"o\">:</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">NT_func</span><span class=\"o\">,</span> <span class=\"n\">NT_rel</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Structure</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">L.relations</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NT_func_zero</span> <span class=\"o\">:</span> <span class=\"n\">NT.functions</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">NT_func.zero</span> <span class=\"n\">n</span>   <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NT_func_one</span> <span class=\"o\">:</span> <span class=\"n\">NT.functions</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">NT_func.succ</span> <span class=\"n\">n</span>   <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NT_func_two</span> <span class=\"o\">:</span> <span class=\"n\">NT.functions</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">NT_func.add</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">NT_func.mul</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NT_struct_func</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">NT.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 255508920,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632970161
    },
    {
        "content": "<p>I would get rid of <code>NT_func_zero</code>, <code>NT_func_one</code> and <code>NT_func_two</code> and structure it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">NT_struct_func</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">NT.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">NT_func.zero</span> <span class=\"n\">n</span>   <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">NT_func.succ</span> <span class=\"n\">n</span>   <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">NT_func.add</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">NT_func.mul</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 255509066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632970271
    },
    {
        "content": "<p>I was trying something like that originally but I was having trouble getting it to work. So the purpose of the first _ is to pattern match on the int part? Does that determine the value of the implicit parameter n?</p>",
        "id": 255509142,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632970343
    },
    {
        "content": "<p>Also is there a reason Lean can't seem to find an exponentiation operator for Nat?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The language of number theory -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">NT_func</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">NT_func</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">NT_func</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">NT_func</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">NT_func</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">exp</span> <span class=\"o\">:</span> <span class=\"n\">NT_func</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">NT_rel</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">NT_rel</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NT</span> <span class=\"o\">:</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">NT_func</span><span class=\"o\">,</span> <span class=\"n\">NT_rel</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Structure</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">L.relations</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NT_struct_func</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">NT.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">NT_func.zero</span> <span class=\"n\">n</span>   <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">NT_func.succ</span> <span class=\"n\">n</span>   <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">NT_func.add</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">NT_func.mul</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">NT_func.exp</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 255509234,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632970443
    },
    {
        "content": "<p>It's not pattern matching on the int exactly; it's an \"inaccessible parameter\"</p>",
        "id": 255509282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632970493
    },
    {
        "content": "<p>which means it has to be in the pattern match but its value is determined by the other parameters</p>",
        "id": 255509299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632970511
    },
    {
        "content": "<p>You need to import <code>algebra.group_power</code> to get exponentiation</p>",
        "id": 255509403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632970596
    },
    {
        "content": "<p>So without marking the existence of an inaccessible parameter with _ Lean will just assume that n is still just a variable?</p>",
        "id": 255509466,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632970664
    },
    {
        "content": "<p>You need to put something there since the pattern match has three arguments</p>",
        "id": 255509537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632970710
    },
    {
        "content": "<p>you can also put <code>.(0)</code> in the first case if you want to be specific about the value that lean is inferring it to</p>",
        "id": 255509593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632970768
    },
    {
        "content": "<p>Ok got it, thanks</p>",
        "id": 255509601,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632970780
    },
    {
        "content": "<p>the <code>.</code> is to say that we aren't pattern matching on the nat</p>",
        "id": 255509611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632970792
    },
    {
        "content": "<p>but you will almost never see that syntax used because <code>_</code> always works in its place</p>",
        "id": 255509687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632970817
    },
    {
        "content": "<p>What is the reason for this type error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group_power</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The language of number theory -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">NT_func</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">NT_func</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">NT_func</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">NT_func</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">NT_func</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">exp</span> <span class=\"o\">:</span> <span class=\"n\">NT_func</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">NT_rel</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">NT_rel</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NT</span> <span class=\"o\">:</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">NT_func</span><span class=\"o\">,</span> <span class=\"n\">NT_rel</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Structure</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">L.relations</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The usual intepretation of Number Theory -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">NT_struct_func</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">NT.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">NT_func.zero</span> <span class=\"n\">n</span>   <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">NT_func.succ</span> <span class=\"n\">n</span>   <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">NT_func.add</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">NT_func.mul</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">NT_func.exp</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NT_struct_rel</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">NT.relations</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">NT_rel.lt</span> <span class=\"n\">args</span>   <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NT_struct</span> <span class=\"o\">:</span> <span class=\"n\">Structure</span> <span class=\"n\">NT</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">NT_struct_func</span><span class=\"o\">,</span> <span class=\"n\">NT_struct_rel</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 255510710,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632971661
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">Structure.mk</span> <span class=\"n\">NT_struct_func</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">NT_struct_func</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">NT.functions</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">NT.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕLean</span>\n</code></pre></div>",
        "id": 255510723,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632971687
    },
    {
        "content": "<p>I would have thought there was no difference between these two types</p>",
        "id": 255510746,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632971709
    },
    {
        "content": "<p>If I make n explicit it goes away</p>",
        "id": 255510762,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632971730
    },
    {
        "content": "<p>This is how implicit arguments work. When you write <code>NT_struct_func</code> lean automatically inserts a <code>_</code> for the implicit argument <code>n</code> here, resulting in <code>@NT_struct_func _</code> which doesn't match the type expected by <code>NT_struct</code>.</p>",
        "id": 255510999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632971937
    },
    {
        "content": "<p>You can fix this by making the argument explicit like you did, or by using a \"semi-implicit\" binder <code>{{n : nat}}</code>, which acts like an implicit argument only if you supply the argument coming after <code>n</code> (here the relation), or by writing <code>@NT_struct_func</code> in <code>NT_struct</code></p>",
        "id": 255511111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632972021
    },
    {
        "content": "<p>How would write an instance of has_repr for this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>           <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">)</span>             <span class=\"o\">:=</span> <span class=\"s2\">\"v\"</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">fsymb</span> <span class=\"n\">args</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"n\">fsymb</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 255621583,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1633025443
    }
]