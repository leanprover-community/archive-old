[
    {
        "content": "<p>Hi,<br>\nI have proved that the product of two metric spaces is also a metric space:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The metric of any two elements of a metric space is non-negative -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">metric_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">dist_triangle</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The product of two metric spaces is also a metric space -/</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>   <span class=\"n\">dist</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">y₀</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">y₁</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x₀</span> <span class=\"n\">x₁</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">y₀</span> <span class=\"n\">y₁</span><span class=\"o\">,</span>\n    <span class=\"n\">dist_self</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:=</span> <span class=\"c1\">-- Why can&#39;t I use λ ⟨x₀, y₀⟩ ⟨x₁, y₁⟩ here?</span>\n        <span class=\"k\">begin</span>\n            <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">y₀</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">y₁</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n            <span class=\"k\">show</span> <span class=\"n\">dist</span> <span class=\"n\">x₀</span> <span class=\"n\">x₁</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">y₀</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">y₀</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">y₁</span><span class=\"o\">),</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">x₀</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">dist</span> <span class=\"n\">y₀</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">],</span>\n            <span class=\"n\">split</span><span class=\"o\">,</span>\n            <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">metric_nonneg</span> <span class=\"n\">x₀</span> <span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">metric_nonneg</span> <span class=\"n\">y₀</span> <span class=\"n\">y₁</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]}</span>\n        <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">dist_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">y₀</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">y₁</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"k\">show</span> <span class=\"n\">dist</span> <span class=\"n\">x₀</span> <span class=\"n\">x₁</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">y₀</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">x₁</span> <span class=\"n\">x₀</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">y₁</span> <span class=\"n\">y₀</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist_comm</span><span class=\"o\">],</span>\n    <span class=\"n\">dist_triangle</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">y₀</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">y₁</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">y₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"k\">show</span> <span class=\"n\">dist</span> <span class=\"n\">x₀</span> <span class=\"n\">x₂</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">y₀</span> <span class=\"n\">y₂</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">x₀</span> <span class=\"n\">x₁</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">y₀</span> <span class=\"n\">y₁</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">y₁</span> <span class=\"n\">y₂</span><span class=\"o\">),</span>\n        <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">dist_triangle</span> <span class=\"n\">x₀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">dist_triangle</span> <span class=\"n\">y₀</span> <span class=\"n\">y₁</span> <span class=\"n\">y₂</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>but as you can see in my proof that the product of two metric spaces is also a metric space, I wasn't able to use <code>λ ⟨x₀, y₀⟩ ⟨x₁, y₁⟩</code> when proving <code>eq_of_dist_eq_zero</code>. Why might this be?</p>",
        "id": 191891270,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585232592
    },
    {
        "content": "<p>What happens when you try?</p>",
        "id": 191905653,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585238011
    },
    {
        "content": "<p>It gives me</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">__</span><span class=\"n\">mlocal__fresh_2827_71439</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">y₀</span><span class=\"o\">)</span> <span class=\"bp\">__</span><span class=\"n\">mlocal__fresh_2827_71439</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">fun_match</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">y₀</span><span class=\"o\">)</span> <span class=\"bp\">__</span><span class=\"n\">mlocal__fresh_2827_71439</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">y₀</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">__</span><span class=\"n\">mlocal__fresh_2827_71439</span>\n</pre></div>\n\n\n<p>when I want</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">y₀</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">y₁</span> <span class=\"o\">:</span> <span class=\"n\">Y</span>\n</pre></div>\n\n\n<p>which is what <code>rintro</code> gives me</p>",
        "id": 191909841,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585239571
    },
    {
        "content": "<p>Weird. I have no idea.</p>",
        "id": 191911796,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585240218
    },
    {
        "content": "<p>I'm currently trying to define a category of metric spaces but I've gotten stuck when trying to define a mapping between two metric spaces.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">concrete_category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">definition</span> <span class=\"n\">Metric_space</span> <span class=\"o\">:=</span> <span class=\"n\">bundled</span> <span class=\"n\">metric_space</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Metric_space</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"c1\">-- invalid universe declaration, &#39;u_1&#39; shadows a local universe</span>\n</pre></div>\n\n\n<p>As you can see, I received the error <code>invalid universe declaration, 'u_1' shadows a local universe</code> when trying to define a mapping. What does this mean and how can I fix this?</p>",
        "id": 192023093,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585318640
    },
    {
        "content": "<p>I don't really know why this happens, but it's better to be explicit with universe levels (just like you would write <code>Type u</code>)</p>",
        "id": 192023349,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585318743
    },
    {
        "content": "<p>How would I be explicit with universe levels in this case? Sorry I don't normally use universes :/</p>",
        "id": 192023567,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585318830
    },
    {
        "content": "<p>probably something like (untested)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">concrete_category</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">definition</span> <span class=\"n\">Metric_space</span> <span class=\"o\">:=</span> <span class=\"n\">bundled</span> <span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Metric_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 192024131,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585319041
    },
    {
        "content": "<p>Ah! That works perfectly! Thanks</p>",
        "id": 192024276,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585319086
    },
    {
        "content": "<p>Hi again!<br>\nI'm currently proving that the finite union of bounded sets is also bounded</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> The union of finitely many bounded subsets is also bounded -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">bounded_union</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">is_bounded</span> <span class=\"err\">$</span> <span class=\"n\">S</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">is_bounded</span> <span class=\"err\">$</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bounded_union_two</span><span class=\"o\">,</span> <span class=\"n\">bounded_union</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>And I'm receiving this error</p>\n<div class=\"codehilite\"><pre><span></span>failed to prove recursive application is decreasing, well founded relation\n  @has_well_founded.r ℕ (@has_well_founded_of_has_sizeof ℕ nat.has_sizeof)\nPossible solutions:\n  - Use &#39;using_well_founded&#39; keyword in the end of your definition to specify tactics for synthesizing well founded relations and decreasing proofs.\n  - The default decreasing tactic uses the &#39;assumption&#39; tactic, thus hints (aka local proofs) can be provided using &#39;have&#39;-expressions.\nThe nested exception contains the failure state for the decreasing tactic.\nnested exception message:\nfailed\n</pre></div>\n\n\n<p>I don't really understand what the possible solutions mean, any help would be appreciated!</p>",
        "id": 192123045,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585401990
    },
    {
        "content": "<p>if you include <code>bounded_union</code> then I suspect it will just use <code>bounded_union</code> on <code>n+1</code></p>",
        "id": 192123133,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585402120
    },
    {
        "content": "<p>Right, that's probably it</p>",
        "id": 192123200,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585402261
    },
    {
        "content": "<p>Actually I'm not sure,  I have<code>bounded_union : ∀ (n : ℕ), is_bounded (⋃ (i : ℕ) (H : i ∈ finset.range n), S i)</code> as a hypothesis. Will <code>simp</code> not use this instead?</p>",
        "id": 192123272,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585402387
    },
    {
        "content": "<p>Is there a way to manually name this inductive hypothesis so it's less confusing?</p>",
        "id": 192123328,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585402447
    },
    {
        "content": "<p>it would be easier for me to help you if you would produce an MWE</p>",
        "id": 192123348,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585402506
    },
    {
        "content": "<p>Alright, will do!</p>",
        "id": 192123408,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585402603
    },
    {
        "content": "<p>This should work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Notion of boundedness on metric spaces -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_bounded</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">x₀</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x₀</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The union of two bounded subsets is also bounded -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">bounded_union_two</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_bounded</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">is_bounded</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">is_bounded</span> <span class=\"err\">$</span> <span class=\"n\">S</span> <span class=\"err\">∪</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The union of finitely many bounded subsets is also bounded -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">bounded_union</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">is_bounded</span> <span class=\"err\">$</span> <span class=\"n\">S</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">is_bounded</span> <span class=\"err\">$</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bounded_union_two</span><span class=\"o\">,</span> <span class=\"n\">bounded_union</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 192123471,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585402706
    },
    {
        "content": "<p>I don't think <code>⋃ i ∈ finset.range n</code> is idiomatic</p>",
        "id": 192123539,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585402842
    },
    {
        "content": "<p>Since <code>n</code> is an explicit argument, does it help if you just put <code>bounded_union n</code> in simp?</p>",
        "id": 192123561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585402897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123539\" title=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123539\">said</a>:</p>\n<blockquote>\n<p>I don't think <code>⋃ i ∈ finset.range n</code> is idiomatic</p>\n</blockquote>\n<p>Sorry but what does idiomatic mean?</p>",
        "id": 192123572,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585402919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123561\" title=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123561\">said</a>:</p>\n<blockquote>\n<p>Since <code>n</code> is an explicit argument, does it help if you just put <code>bounded_union n</code> in simp?</p>\n</blockquote>\n<p>Emm, then <code>simp</code> doesn't solve the goal, but maybe it's working as intended then?</p>",
        "id": 192123637,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585402988
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Notion of boundedness on metric spaces -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_bounded</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">x₀</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x₀</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The union of two bounded subsets is also bounded -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">bounded_union_two</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_bounded</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">is_bounded</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">is_bounded</span> <span class=\"err\">$</span> <span class=\"n\">S</span> <span class=\"err\">∪</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The union of finitely many bounded subsets is also bounded -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">bounded_union</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">is_bounded</span> <span class=\"err\">$</span> <span class=\"n\">S</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">is_bounded</span> <span class=\"err\">$</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range_succ</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">bounded_union_two</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bounded_union</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 192123660,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585403022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> <a href=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123572\" title=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123572\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123539\" title=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123539\">said</a>:</p>\n<blockquote>\n<p>I don't think <code>⋃ i ∈ finset.range n</code> is idiomatic</p>\n</blockquote>\n<p>Sorry but what does idiomatic mean?</p>\n</blockquote>\n<p>The normal way to write something. Consider <code>⋃ i &lt; n</code>.</p>",
        "id": 192123662,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585403030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> <a href=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123572\" title=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123572\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123539\" title=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123539\">said</a>:</p>\n<blockquote>\n<p>I don't think <code>⋃ i ∈ finset.range n</code> is idiomatic</p>\n</blockquote>\n<p>Sorry but what does idiomatic mean?</p>\n</blockquote>\n<p>idiomatic means the same in English as in here: how people would say it</p>",
        "id": 192123706,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585403044
    },
    {
        "content": "<p>Ah, alright!</p>",
        "id": 192123714,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585403073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123662\" title=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123662\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> <a href=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123572\" title=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123572\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123539\" title=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192123539\">said</a>:</p>\n<blockquote>\n<p>I don't think <code>⋃ i ∈ finset.range n</code> is idiomatic</p>\n</blockquote>\n<p>Sorry but what does idiomatic mean?</p>\n</blockquote>\n<p>The normal way to write something. Consider <code>⋃ i &lt; n</code>.</p>\n</blockquote>\n<p>I... don't think that's idiomatic either</p>",
        "id": 192123716,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585403075
    },
    {
        "content": "<p>because there's not enough lemmas to reduce from n+1 to n</p>",
        "id": 192123720,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585403089
    },
    {
        "content": "<p>Right, I'll try to use <code>finset.sup</code> in the future then, thanks for the help!</p>",
        "id": 192123801,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585403205
    },
    {
        "content": "<p>I don't know what's idiomatic actually. When do we use a finite union?</p>",
        "id": 192123818,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585403229
    },
    {
        "content": "<p>I mean, this lemma has nothing to do with <code>is_bounded</code>: it's just induction from <code>bounded_union_two</code></p>",
        "id": 192123824,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585403243
    },
    {
        "content": "<p>ok yes</p>",
        "id": 192123834,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585403269
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">compact_bUnion</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">compact</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">compact</span> <span class=\"o\">(</span><span class=\"err\">⋃</span><span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 192123880,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585403305
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">compact_Union</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">compact</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"o\">(</span><span class=\"err\">⋃</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 192123886,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585403319
    },
    {
        "content": "<p>huh</p>",
        "id": 192123889,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585403326
    },
    {
        "content": "<p>I didn't really pay attention to the whole statement of Jason's lemma.</p>",
        "id": 192123891,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585403334
    },
    {
        "content": "<p>Emm, I'm a bit confused. When should we use what?</p>",
        "id": 192123906,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585403380
    },
    {
        "content": "<p>I was able to get it working by introducing a temp lemma</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">temp</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The union of finitely many bounded subsets is also bounded -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">bounded_union</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">is_bounded</span> <span class=\"err\">$</span> <span class=\"n\">S</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">is_bounded</span> <span class=\"err\">$</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">temp</span><span class=\"o\">,</span> <span class=\"n\">bounded_union_two</span><span class=\"o\">,</span> <span class=\"n\">bounded_union</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h₀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n</pre></div>\n\n\n<p>Is there something like <code>temp</code> in mathlib?</p>",
        "id": 192124267,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585403676
    },
    {
        "content": "<p>I would suggest imitating the statement of <code>set.finite.compact_bUnion</code> and using <code>finset.induction_on</code> in the proof</p>",
        "id": 192124340,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585403759
    },
    {
        "content": "<p>Your statement is not going to be very convenient to use anyways so why bother proving it?</p>",
        "id": 192124380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585403771
    },
    {
        "content": "<p>Unless it happens to be exactly what you need for some application</p>",
        "id": 192124384,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585403779
    },
    {
        "content": "<p>Oh, I'm just learning metric spaces myself so I thought to prove all the theorems in my lecture notes in LEAN</p>",
        "id": 192124395,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585403822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192124340\" title=\"#narrow/stream/113489-new-members/topic/Metric.20space.20question/near/192124340\">said</a>:</p>\n<blockquote>\n<p>I would suggest imitating the statement of <code>set.finite.compact_bUnion</code> and using <code>finset.induction_on</code> in the proof</p>\n</blockquote>\n<p>Right, I'll try to do this</p>",
        "id": 192124533,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585403858
    },
    {
        "content": "<p>Normally the finite set indexing your sets won't happen to be of the form <code>finset.range n</code> and then you would have to do a lot of work to massage things into a situation in which you can apply your <code>bounded_union</code>.</p>",
        "id": 192124573,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585403886
    },
    {
        "content": "<p>Hi,<br>\nI would now like to define the notion of open in LEAN however I've gotten a bit stuck.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> Definition of an open ball -/</span>\n<span class=\"n\">def</span> <span class=\"n\">open_ball</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Definition of being open -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_open&#39;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">open_ball</span> <span class=\"n\">s</span> <span class=\"n\">ε</span> <span class=\"n\">H</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span>\n</pre></div>\n\n\n<p>As you can see, my definition of an open ball requires the radius to be positive but this makes things rather awkward as then I would need to refer to a proof that <code>r &gt; 0</code> whenever I would like to create an open ball.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> Definition of being open -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_open&#39;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"n\">open_ball</span> <span class=\"n\">s</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span>\n</pre></div>\n\n\n<p>I was hoping something like this would work but unfortunately, it does not. Is there an easy way of doing this? (Or even better, perhaps a type called<code>ℝ⁺</code> which is the positive reals?)</p>",
        "id": 192182423,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585499399
    },
    {
        "content": "<p>I think you have too many commas.</p>",
        "id": 192182512,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585499518
    },
    {
        "content": "<p>But I can't be sure because you didn't provide a MWE.</p>",
        "id": 192182563,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585499557
    },
    {
        "content": "<p><code>∀ s ∈ S, ∃ (ε : ℝ) (hε : 0 &lt; ε), open_ball s ε hε ⊆ S</code></p>",
        "id": 192182567,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585499562
    },
    {
        "content": "<p>is at least syntactically correct</p>",
        "id": 192182574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585499577
    },
    {
        "content": "<p>Ah, I see! thanks!</p>",
        "id": 192182592,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585499605
    },
    {
        "content": "<p>But it's still a bad idea to include the positivity constraint in the definition of open_ball.</p>",
        "id": 192182650,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585499654
    },
    {
        "content": "<p>is it? It's what my lecture notes said atleast</p>",
        "id": 192182697,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585499752
    },
    {
        "content": "<p>Your lecture notes don't include type theoretic convenience constraints.</p>",
        "id": 192182765,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585499806
    },
    {
        "content": "<p>Why would it be a bad idea with these constraints?</p>",
        "id": 192182798,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585499860
    },
    {
        "content": "<p>You saw why putting this in the definition of balls is a bad idea.</p>",
        "id": 192182932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585500010
    },
    {
        "content": "<p>Right... But I don't see a better solution if I would like to use the definition presented in my lecture notes so I guess I just have to deal with it :D</p>",
        "id": 192183051,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585500189
    },
    {
        "content": "<p>I think your lecturer wouldn't notice this difference in the definition of balls. Of course the definition of open subsets must include a positive radius condition.</p>",
        "id": 192183142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585500314
    },
    {
        "content": "<p>Okay, I'll try to do without this restriction and just apply the positive radius and see if I run into trouble. Thanks again!</p>",
        "id": 192183295,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585500456
    },
    {
        "content": "<p>I mean you can change your code to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> Definition of an open ball -/</span>\n<span class=\"n\">def</span> <span class=\"n\">open_ball</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Definition of being open -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_open&#39;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">open_ball</span> <span class=\"n\">s</span> <span class=\"n\">ε</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span>\n</pre></div>",
        "id": 192183365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585500517
    },
    {
        "content": "<p>I've changed it to this because I've heard you should always use <code>&lt;</code> rather than <code>&gt;</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> Definition of being open -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_open&#39;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"n\">open_ball</span> <span class=\"n\">s</span> <span class=\"n\">ε</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span>\n</pre></div>",
        "id": 192183385,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585500592
    },
    {
        "content": "<p>But I guess it doesn't really matter either way</p>",
        "id": 192183432,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585500611
    },
    {
        "content": "<p>I would keep the natural writing order here.</p>",
        "id": 192183452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585500645
    },
    {
        "content": "<p>Oh! There are cases when <code>&gt;</code>is OK?</p>",
        "id": 192184561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585502263
    },
    {
        "content": "<p>I'm lobbying that it should be allowed precisely in this case (when appearing in a quantifier).</p>",
        "id": 192184607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585502306
    },
    {
        "content": "<p>That's interesting because appearing in a quantifier of this form is the only time I ever miss <code>&gt;</code> but I tell Xenaites to use <code>&lt;</code> or else they'll get linted.</p>",
        "id": 192184950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585502839
    },
    {
        "content": "<p>You can always plea the linter's indulgence.</p>",
        "id": 192185004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585502902
    },
    {
        "content": "<p>with <code>@[nolint ge_or_gt]</code></p>",
        "id": 192185022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585502946
    },
    {
        "content": "<p>Following <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> 's suggestion, I've been trying to use <code>set.finite.induction_on</code> but I'm not sure if the way I'm using it is correct.<br>\nBelow is a MWE of my current problem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Definition of an open ball -/</span>\n<span class=\"n\">def</span> <span class=\"n\">open_ball</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Definition of being open -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_open&#39;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"n\">open_ball</span> <span class=\"n\">s</span> <span class=\"n\">ε</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The intersect of open sets is open -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">inter_open_is_open</span> <span class=\"o\">(</span><span class=\"n\">U₀</span> <span class=\"n\">U₁</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">is_open&#39;</span> <span class=\"n\">U₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">is_open&#39;</span> <span class=\"n\">U₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_open&#39;</span> <span class=\"o\">(</span><span class=\"n\">U₀</span> <span class=\"err\">∩</span> <span class=\"n\">U₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inter_finite_open_is_open</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">I</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">is_open&#39;</span> <span class=\"err\">$</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_open&#39;</span> <span class=\"err\">$</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">hI</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">S</span> <span class=\"n\">hi</span> <span class=\"n\">hS</span> <span class=\"n\">hopen</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">bInter_insert</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">inter_open_is_open</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">h₀</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">},</span>\n        <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I feel that after applying induction, there should be a term like <code>is_open' (U i)</code>but there is not. What have I done wrong here?</p>",
        "id": 192429373,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585678845
    },
    {
        "content": "<p>If you move <code>h₀</code> into the statement you can make it work, caveat lector: I didn't think too hard about the best way to do it, just followed my nose at every subgoal.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">inter_finite_open_is_open</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">I</span><span class=\"o\">}</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">is_open&#39;</span> <span class=\"err\">$</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">is_open&#39;</span> <span class=\"err\">$</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">hI</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">begin</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span><span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span> <span class=\"o\">(</span><span class=\"n\">open_ball</span> <span class=\"n\">s</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"kn\">end</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">S</span> <span class=\"n\">hi</span> <span class=\"n\">hS</span> <span class=\"n\">hopen</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">bInter_insert</span><span class=\"o\">,</span><span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">inter_open_is_open</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_insert</span> <span class=\"n\">i</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n        <span class=\"n\">apply</span> <span class=\"n\">hopen</span><span class=\"o\">,</span><span class=\"n\">intros</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_union_right</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192431027,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1585679592
    },
    {
        "content": "<p>Thank you so much Alex!</p>",
        "id": 192431383,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585679754
    },
    {
        "content": "<p>I'll try to put such predicates in the statement in the future. Don't think it would hurt right?</p>",
        "id": 192431552,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585679820
    },
    {
        "content": "<p>Well normally its annoying to have to explicitly intro them and name them at the start of the proof, but for induction type proofs, its sometimes needed.</p>",
        "id": 192432142,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1585680121
    },
    {
        "content": "<p>Hi!<br>\nI'm slightly stuck on trying to manipulate the following intersect</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Definition of an open ball -/</span>\n<span class=\"n\">def</span> <span class=\"n\">open_ball</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Definition of being open -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_open&#39;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"n\">open_ball</span> <span class=\"n\">s</span> <span class=\"n\">ε</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Definition of being closed -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_closed&#39;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_open&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">-</span><span class=\"n\">S</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Definition of closure -/</span>\n<span class=\"n\">def</span> <span class=\"n\">closure&#39;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"err\">⊆</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">is_closed&#39;</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">T</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">open_ball</span> <span class=\"n\">is_open&#39;</span> <span class=\"n\">is_closed&#39;</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">closure_closed</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_closed&#39;</span> <span class=\"err\">$</span> <span class=\"n\">closure&#39;</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">closure&#39;</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ is_closed&#39; (⋂ (T : set X) (h₀ : S ⊆ T) (h₁ : is_closed&#39; T), T)</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I would like to use a lemma I've proved which it that the intersect of closed sets is closed :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Inter_closed_is_closed</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">is_closed&#39;</span> <span class=\"err\">$</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_closed&#39;</span> <span class=\"err\">$</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>How should I go about doing this?</p>",
        "id": 192918384,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586021462
    },
    {
        "content": "<p>The statement of your lemma is not good. Compare <code>is_open_bUnion</code>.</p>",
        "id": 192918601,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586021813
    },
    {
        "content": "<p>Is the statement bad because of the squiggly brackets or because of the <code>Type*</code>s?</p>",
        "id": 192918787,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586022010
    },
    {
        "content": "<p>The <code>Type*</code>s</p>",
        "id": 192918822,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586022086
    },
    {
        "content": "<p>You should replace those with an arbitrary type</p>",
        "id": 192918827,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586022096
    },
    {
        "content": "<p>Like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Inter_closed_is_closed</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">is_closed&#39;</span> <span class=\"err\">$</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_closed&#39;</span> <span class=\"err\">$</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 192918894,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586022157
    },
    {
        "content": "<p>No, what is <code>set Type</code> for? I think you are confusing <code>Type</code> with the concept of \"some type\". Study what happens near the start of <code>topology.basic</code>.</p>",
        "id": 192919384,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586022847
    },
    {
        "content": "<p>Ah, I see. So it should be like this? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">Inter_closed_is_closed</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">is_closed&#39;</span> <span class=\"err\">$</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_closed&#39;</span> <span class=\"err\">$</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 192919480,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586023014
    },
    {
        "content": "<p>Yes. you might find you need additional lemmas though, I'm not sure.</p>",
        "id": 192919499,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586023047
    },
    {
        "content": "<p>I think it works, let me try to finish the proof</p>",
        "id": 192919583,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586023131
    },
    {
        "content": "<p>I couldn't get it working :/ But if I change the definition of my closure then it works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> Definition of closure -/</span>\n<span class=\"n\">def</span> <span class=\"n\">closure&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"err\">⊆</span> <span class=\"n\">T</span> <span class=\"bp\">∧</span> <span class=\"n\">is_closed&#39;</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">T</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The closure of a set is also closed -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">closure_closed</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_closed&#39;</span> <span class=\"err\">$</span> <span class=\"n\">closure&#39;&#39;</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">Inter_closed_is_closed</span> <span class=\"err\">$</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">T</span> <span class=\"n\">hT</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">hT</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>It there a way to change <code>⋂ (T : set X) (h₀ : S ⊆ T) (h₁ : is_closed' T), T</code> to <code> ⋂ (T : set X) (h₀ : S ⊆ T ∧ is_closed' T), T</code>. <br>\nThey are the same right?</p>",
        "id": 192920206,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586023893
    },
    {
        "content": "<p>did you try simp?</p>",
        "id": 192920255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586023928
    },
    {
        "content": "<p>that's the sort of thing that <code>simp</code> is likely to know</p>",
        "id": 192920260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586023942
    },
    {
        "content": "<p>Just tried it, doesn't work :/</p>",
        "id": 192920296,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586024024
    },
    {
        "content": "<p>The lemma you need is <code>infi_and</code>, not sure if that has a set version but it's defeq to it</p>",
        "id": 192920298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586024028
    },
    {
        "content": "<p>Alright, I'll try it out!</p>",
        "id": 192920369,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586024133
    },
    {
        "content": "<p>You should prove the version without the set, because it is more general</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Inter_closed_is_closed</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_closed&#39;</span> <span class=\"err\">$</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_closed&#39;</span> <span class=\"err\">$</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">bInter_closed_is_closed</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">is_closed&#39;</span> <span class=\"err\">$</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_closed&#39;</span> <span class=\"err\">$</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">Inter_closed_is_closed</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Inter_closed_is_closed</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">h&#39;</span>\n</pre></div>",
        "id": 192920535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586024354
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">closure&#39;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"err\">⊆</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">is_closed&#39;</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">T</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The closure of a set is also closed -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">closure_closed</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_closed&#39;</span> <span class=\"err\">$</span> <span class=\"n\">closure&#39;</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">Inter_closed_is_closed</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">Inter_closed_is_closed</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"n\">Inter_closed_is_closed</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₂</span>\n</pre></div>",
        "id": 192920619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586024459
    },
    {
        "content": "<p>Note that <code>Inter_closed_is_closed</code> has its own version of <code>{α}</code>, which is actually <code>{α : Sort*}</code>, so that it can also apply when the index type is a prop</p>",
        "id": 192920690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586024538
    },
    {
        "content": "<p>if you reuse the variable it will be <code>{α : Type*}</code> which doesn't apply to Prop</p>",
        "id": 192920701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586024570
    },
    {
        "content": "<p>So <code>{α}</code> is just short for <code>{α : Sort*}</code>?</p>",
        "id": 192920778,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586024700
    },
    {
        "content": "<p>Yes. Note that <code>Sort*</code> is actually <code>Sort _</code>, a metavariable that will be instantiated depending on the rest of the statement. So for example if you use this in the second statement:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">bInter_closed_is_closed</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">is_closed&#39;</span> <span class=\"err\">$</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_closed&#39;</span> <span class=\"err\">$</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>then <code>{α}</code> will get type <code>{α : Type u_1}</code> because that's what is needed to make <code>set α</code> typecheck</p>",
        "id": 192920862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586024860
    },
    {
        "content": "<p>Ah, I see. Thank you!</p>",
        "id": 192921019,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586025047
    }
]