[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n <span class=\"bp\">|</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>thanks,</p>",
        "id": 222411354,
        "sender_full_name": "Michael Werman",
        "timestamp": 1610445975
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 222415032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610448526
    },
    {
        "content": "<p>Perhaps the docs for <code>fin</code> should provide an example of case-matching</p>",
        "id": 222415047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610448539
    },
    {
        "content": "<p>Or the linarith-free version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">false.elim</span> <span class=\"bp\">$</span> <span class=\"n\">n.not_lt_zero</span> <span class=\"bp\">$</span> <span class=\"n\">add_lt_iff_neg_right.mp</span> <span class=\"n\">h</span>\n<span class=\"c1\">-- or          (not_lt_of_ge (nat.le_add_left 2 n) h).elim</span>\n</code></pre></div>\n<p>Is there any way to teach the equation compiler to insert this case automatically?</p>",
        "id": 222415315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610448685
    },
    {
        "content": "<p>One can define it by sending 0 to 1 and _ (that is, everything else) to 2</p>",
        "id": 222434946,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610460503
    }
]