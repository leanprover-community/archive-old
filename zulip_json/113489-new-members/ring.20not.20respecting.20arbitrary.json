[
    {
        "content": "<p>Is it expected that <code>ring</code> will think that separate <code>arbitrary _</code> values are equal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"c1\">-- 5 * a = 0</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228464853,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614711243
    },
    {
        "content": "<p>is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/arbitrary/src\">src#arbitrary</a> irreducible? Edit: yes</p>",
        "id": 228465350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614711432
    },
    {
        "content": "<p>I think by definition any terms constructed with the same function application must be equal to each other</p>",
        "id": 228465645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614711546
    },
    {
        "content": "<p>Then I am not sure what <code>arbitrary</code> is supposed to do.</p>",
        "id": 228465702,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614711567
    },
    {
        "content": "<p>Well, it prevented you from replacing <code>a</code> with zero at least</p>",
        "id": 228465752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614711596
    },
    {
        "content": "<p>Right --here a=b right? This is nothing to do with <code>ring</code></p>",
        "id": 228467191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614712131
    },
    {
        "content": "<p>Yes</p>",
        "id": 228467256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614712157
    },
    {
        "content": "<p>I guess you could make a tactic that emits new definitions each time you invoke it?</p>",
        "id": 228467272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614712168
    },
    {
        "content": "<p>And then you'd have things that are still defeq under the <code>irreducible</code> veil, but are no longer syntactically equal to each other</p>",
        "id": 228467315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614712192
    },
    {
        "content": "<p>Or even:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[irreducible]</span> <span class=\"kd\">def</span> <span class=\"n\">arbitrary'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">default</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary'</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary'</span> <span class=\"bp\">`</span><span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary'</span> <span class=\"bp\">`</span><span class=\"n\">c</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"c1\">-- 2 * a + (b + 2 * c) = 0</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228467647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614712290
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span> <span class=\"c1\">-- this fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228467982,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614712421
    },
    {
        "content": "<p>That'll teach you to sorry data</p>",
        "id": 228481636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614717592
    },
    {
        "content": "<p>Then you'll be even more horrified at this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[irreducible]</span> <span class=\"kd\">def</span> <span class=\"n\">arbitrary'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">default</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- 1.1.17</span>\n<span class=\"c1\">-- (a) Find infinitely many matrices `B` such that `BA = I₂` when</span>\n<span class=\"c1\">-- `A = ![![2, 3], ![1, 2], ![2, 5]]`</span>\n<span class=\"c1\">-- (b) Prove that there is no matrix `C` such that `AC =  I₃`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]])</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">B.mul</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">A.mul</span> <span class=\"n\">C</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary'</span> <span class=\"bp\">`</span><span class=\"n\">c</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"k\">with</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"k\">with</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary'</span> <span class=\"bp\">`</span><span class=\"n\">d</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">]]</span> <span class=\"k\">with</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hA</span><span class=\"o\">],</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span>\n    <span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228483390,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614718274
    },
    {
        "content": "<p>What's the punchline, for those of us on mobile?</p>",
        "id": 228484616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614718805
    },
    {
        "content": "<p>That I'm doing symbolic calculations on explicit matrices using mathlib</p>",
        "id": 228484806,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614718866
    },
    {
        "content": "<p>Are you trying to use <code>arbitrary'</code> as a crutch for \"infinitely many\"?</p>",
        "id": 228491707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614721553
    },
    {
        "content": "<p>I guess the statement would be something like <code>∃ (s : set $ matrix (fin 2) (fin 3) ℚ) (hs : s.infinite), ∀ B ∈ s, B.mul A = 1)</code></p>",
        "id": 228492385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614721805
    },
    {
        "content": "<p>And then you use <code>set.range f</code> where <code>f</code> is a function from <code>prod ℚ ℚ</code> to a matrix</p>",
        "id": 228492458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614721829
    },
    {
        "content": "<p>For your example though, I don't think you need <code>arbirary' `name</code> at all - using <code>have c : ℚ := arbitrary _,</code> instead of <code>let</code> does the job</p>",
        "id": 228495556,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614723025
    },
    {
        "content": "<p>You could also introduce variables in the statement and prove the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">]]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Binj</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">matrix.ext_iff.mpr</span> <span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- 1.1.17</span>\n<span class=\"c1\">-- (a) Find infinitely many matrices `B` such that `BA = I₂` when</span>\n<span class=\"c1\">-- `A = ![![2, 3], ![1, 2], ![2, 5]]`</span>\n<span class=\"c1\">-- (b) Prove that there is no matrix `C` such that `AC =  I₃`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]])</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">ℚ</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">A.mul</span> <span class=\"n\">C</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span>\n    <span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>at this point, all that you are missing is that <code>ℚ</code> is infinite.</p>",
        "id": 228528903,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614741909
    },
    {
        "content": "<p>Should <a href=\"https://leanprover-community.github.io/mathlib_docs/find/infinite\">docs#infinite</a> have more instances?</p>",
        "id": 228545545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614754396
    },
    {
        "content": "<p>For instance, instances for prod, sum, sigma, and pi would all be good starts</p>",
        "id": 228545620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614754463
    },
    {
        "content": "<p>It seems like there will be a lot of proof search in those instances</p>",
        "id": 228546173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614754922
    },
    {
        "content": "<p>Is it morally any different to instance searches for fintype?</p>",
        "id": 228546940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614755495
    },
    {
        "content": "<p>Yes, because fintype is a conjunctive property in most cases, which means that you can prove or disprove in linear time wrt the type expression</p>",
        "id": 228547666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614756120
    },
    {
        "content": "<p>Ah right, we end up with a similar problem to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.nontrivial\">docs#pi.nontrivial</a></p>",
        "id": 228547864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614756252
    },
    {
        "content": "<p>Although we could probably solve it in the same way?</p>",
        "id": 228547954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614756328
    },
    {
        "content": "<p>In this specific case, you could either use the natural numbers, instead of \\Q, in the matrix <code>B</code>, or use <code>char_zero</code>, right?</p>",
        "id": 228548979,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614757016
    },
    {
        "content": "<p>Probably, but I didn't want to deal with nat division</p>",
        "id": 228595708,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614780109
    },
    {
        "content": "<p>Ah, actually, I meant to say that replacing \\Q by ℤ worked:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]])</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">ℤ</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228596697,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614780449
    }
]