[
    {
        "content": "<p>Hi. Suppose I want to calculate a 2nd derivative like <code>deriv^[2] log x</code> when <code>x&gt;0</code>, that is, of a function whose first derivative is only partially defined.</p>\n<p>I know how to prove that <code>x&gt;0 -&gt; deriv log x = 1/x</code> using <code>deriv_log'</code>. But I can't <code>rw</code> this for calculating the 2nd derivative <code>deriv (deriv $ λ y, log y) x</code>, since I don't have the \"inner\" hypothesis <code>y&gt;0</code>. How I should proceed?</p>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp_log</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">definition</span> <span class=\"n\">ϕ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">deriv_log</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">deriv_log'</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"n\">differentiable_at_id</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">deriv_id'</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ϕ'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"n\">ϕ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">deriv</span> <span class=\"n\">ϕ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">deriv</span> <span class=\"n\">has_neg.neg</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">deriv</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">deriv_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">deriv</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">deriv_neg</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_log</span> <span class=\"n\">hx</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">finish</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ϕ''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">ϕ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219129360,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1607370624
    },
    {
        "content": "<p>Maybe I should ask in <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a> ?</p>",
        "id": 219154761,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1607385095
    },
    {
        "content": "<p>I don't know anything about analysis in Lean, but how is the derivative of log any more or less partially defined than log itself?</p>",
        "id": 219155594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607385729
    },
    {
        "content": "<p>Is the problem that somehow you need to know that the derivative away from zero only depends on the function away from zero?</p>",
        "id": 219155789,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607385906
    },
    {
        "content": "<p>Yes, the second derivative to be precise. The API has theorems that give the formula for the first derivative in points where it is defined; but I want the second derivative, and the way the API is built does not make it clear to me how to use those theorems in succession to calculate higher derivatives, when the first derivative itself is partially defined</p>",
        "id": 219156377,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1607386388
    },
    {
        "content": "<p>I guess you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.eventually_eq.deriv_eq\">docs#filter.eventually_eq.deriv_eq</a> or one of the preceding functions</p>",
        "id": 219156820,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607386760
    },
    {
        "content": "<p>Oh I see. Yes I think Yury explicitly mentioned this as a problem at LFTCM when talking about differentiating tan</p>",
        "id": 219157483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607387368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> should I use <code>deriv_within_congr</code> to prove that if <code>x ≠ 0 → f x = g x</code> then <code>x ≠ 0 → deriv f x = deriv g x</code> ? Or is there an easier way?</p>",
        "id": 219159008,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1607388718
    },
    {
        "content": "<p>I'm not familiar with this area of the library so I don't know whether there is an easier way, but this should work (using the fact that <code>{x | x ≠ 0}</code> is open, hence a neighborhood of any of its elements)</p>",
        "id": 219159119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607388787
    },
    {
        "content": "<p>Ok, thanks! I will try</p>",
        "id": 219159148,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1607388817
    },
    {
        "content": "<p>I can add iterated derivatives of <code>log</code> to <a href=\"https://github.com/leanprover-community/mathlib/issues/5116\">#5116</a>.</p>",
        "id": 219171107,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607402696
    },
    {
        "content": "<p>(both as <code>deriv^[n]</code> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/iterated_deriv\">docs#iterated_deriv</a></p>",
        "id": 219171119,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607402720
    },
    {
        "content": "<p>BTW, <code>deriv log x = 1 / x</code> everywhere</p>",
        "id": 219171179,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607402812
    },
    {
        "content": "<p>This is a part of <a href=\"https://github.com/leanprover-community/mathlib/issues/5116\">#5116</a></p>",
        "id": 219171197,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607402854
    },
    {
        "content": "<p>At zero it is equal to <code>1 / 0 = 0</code> because <code>log</code> is not differentiable.</p>",
        "id": 219171923,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607403835
    }
]