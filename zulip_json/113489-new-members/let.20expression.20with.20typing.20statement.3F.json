[
    {
        "content": "<p>In the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">qimpE</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">FinT</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"bp\">∀</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">t</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">zero</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">sumpred</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"n\">T</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">assum</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">deflt</span> <span class=\"n\">assum</span> <span class=\"k\">in</span>\n</code></pre></div>\n<p>It would be helpful to add type annotations to <code>c</code> and <code>h</code>, and write <code>\\&lt; c:nat, h:a+c=b\\&gt;</code>. Apparently, this gives an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">⟩</span><span class=\"bp\">`</span> <span class=\"n\">expected</span>\n<span class=\"n\">main.lean</span><span class=\"o\">:</span><span class=\"mi\">40</span><span class=\"o\">:</span><span class=\"mi\">20</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">FinT</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n<span class=\"n\">assum</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sumpred</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>Is there a way to fix this?</p>",
        "id": 215481875,
        "sender_full_name": "Chris M",
        "timestamp": 1604422928
    },
    {
        "content": "<p>The <code>obtain</code> tactic supports this syntax</p>",
        "id": 215483828,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604423846
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">assum</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"bp\">\\&lt;</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"bp\">\\&gt;</span> <span class=\"o\">:=</span> <span class=\"n\">deflt</span> <span class=\"n\">assum</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215483863,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604423868
    },
    {
        "content": "<p>It's part of the <code>rcases</code> pattern language</p>",
        "id": 215483953,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604423892
    },
    {
        "content": "<p><code>rcases</code> is basically strictly better than lean's built in destructuring lam/let at this point</p>",
        "id": 215492097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604427627
    }
]