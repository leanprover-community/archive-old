[
    {
        "content": "<p>(I hope somewhat silly questions are ok here—if I'm off topic please just say!)</p>\n<p>I wanted to play around with Lean to contrast with Coq (which I also don't really know). As an experiment, I tried to define a Decidable instance for propositions ∀ (x : Fin 256), f x)—since the domain of Fin is finite, one can just do proof by computation. With some sorry'ing of things that I think I could prove, that seems doable (<a href=\"https://pastebin.com/raw/ixKU7J31\">https://pastebin.com/raw/ixKU7J31</a>). Then I define a couple of test predicates and their <code>DecideablePred</code> instances and <code>#eval decide (∀ (x : Fin 256), test_p_true x)</code> says <code>true</code>, which sounds promising. But then using <code>by decide</code> fails(*) and <code>apply of_decide_eq_true ; rfl</code> seems to hang Lean (or at least VS Code). Trying to <code>#eval</code> around with <code>Decidable.rec</code> only says <code>failed to elaborate eliminator, expected type is not available</code>.</p>\n<p>Have I done something dumb? Perhaps I need to fill out all the sorrys when needing to evaluate an expression rather than just inhabit a Prop?</p>\n<p>(*) <code>failed to reduce to 'true':  Decidable.rec (fun h =&gt; (fun x =&gt; false) h) (fun h =&gt; (fun x =&gt; true) h) instDecidableForAllFinOfNatNatInstOfNatNat</code></p>",
        "id": 309516739,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668387257
    },
    {
        "content": "<p>Here's a version that seems to perform fairly well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">all</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">all_iff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">decidable_of_decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">all_iff</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test_p_true</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">256</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test_p_false</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">256</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">test_p_true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">test_p_true</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">decEq</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">test_p_false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">test_p_false</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">decEq</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">256</span><span class=\"o\">),</span> <span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">))</span>\n<span class=\"k\">#eval</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">256</span><span class=\"o\">),</span> <span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 309517755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668387992
    },
    {
        "content": "<p>Gosh, <code>decidable_of_decidable_of_iff</code> does indeed work much better than my mess! Thank you!</p>\n<p><code>example : ∀ (x : Fin 256), test_p_true x := by decide</code> still fails, however. Although <code>apply of_decide_eq_true ; rfl</code> _does_ work.</p>",
        "id": 309519924,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668389688
    },
    {
        "content": "<p>Oh, that's interesting. I guess it's because this is a fairly linear computation it's blowing the stack. The recommended suggestion of <code>set_option maxRecDepth 1000</code> does seem to work</p>",
        "id": 309520428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668390206
    },
    {
        "content": "<p>Does writing this in a tail-recursive way help at all? Or does lean 4 only handle that in the VM / not optimize it at all?</p>",
        "id": 309520527,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668390327
    },
    {
        "content": "<p>Note that we don't usually use kernel computation like this in lean, unlike coq which leans heavily on it. The preferred way is to construct a proof term</p>",
        "id": 309520533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668390333
    },
    {
        "content": "<p>I was thinking about that, but the tail recursion of interest would be in the kernel whnf computation</p>",
        "id": 309520587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668390368
    },
    {
        "content": "<p>Ah, I hadn't considered that the default depth limit might legitimately be too small but it's in the prelude, and it's only 512.</p>",
        "id": 309520588,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668390370
    },
    {
        "content": "<p>There isn't really any room for \"optimization\" when it comes to kernel computation, that would entail replacing the expr by a different one</p>",
        "id": 309520629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668390439
    },
    {
        "content": "<p>and it's not obvious how to do that without changing defeqs</p>",
        "id": 309520639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668390465
    },
    {
        "content": "<p>Could the kernel not unify for tall-recursive cases in an order that requires constant rather than linear stack space?</p>",
        "id": 309520698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668390498
    },
    {
        "content": "<p>it's a reasonable question. I don't know that much about how it unfolds specifically seeing as it has basically been untouched for as long as I have been around</p>",
        "id": 309520736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668390564
    },
    {
        "content": "<p>I'm sure you know more than me</p>",
        "id": 309520743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668390584
    },
    {
        "content": "<p>I suppose even if it did use constant space, <code>maxDepth</code> could end up counting the syntactic recursion</p>",
        "id": 309520809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668390631
    },
    {
        "content": "<p>Actually, I recall gabriel mentioning that there is a way to get <code>whnf</code> to evaluate one step at a time; I want to make a user command to display the evaluation sequence now</p>",
        "id": 309520831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668390672
    },
    {
        "content": "<p>although that's the elaborator and not the kernel so there could be some discrepancies</p>",
        "id": 309520837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668390692
    },
    {
        "content": "<p>Actually, this kind of works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">whnf1</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">whnfEasyCases</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">whnfCore</span> <span class=\"n\">e</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">reduceNat</span><span class=\"bp\">?</span> <span class=\"n\">e'</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">v</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">reduceNative</span><span class=\"bp\">?</span> <span class=\"n\">e'</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">v</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">unfoldDefinition</span><span class=\"bp\">?</span> <span class=\"n\">e'</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">v</span>\n    <span class=\"n\">return</span> <span class=\"n\">e'</span>\n\n<span class=\"n\">elab</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"s2\">\"#whnf_seq\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">depth</span><span class=\"o\">:((</span><span class=\"s2\">\":\"</span> <span class=\"n\">num</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Command.runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTermAndSynthesize</span> <span class=\"n\">e</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">depth</span> <span class=\"o\">:=</span> <span class=\"n\">depth.raw</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">isNatLit</span><span class=\"bp\">?.</span><span class=\"n\">getD</span> <span class=\"mi\">1000</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">msg</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"\"</span>\n    <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">depth</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"n\">msg</span> <span class=\"o\">:=</span> <span class=\"n\">msg</span> <span class=\"bp\">++</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"• {MessageData.nest 2 e}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">whnf1</span> <span class=\"n\">e</span>\n      <span class=\"k\">if</span> <span class=\"n\">e'</span> <span class=\"bp\">==</span> <span class=\"n\">e</span> <span class=\"k\">then</span> <span class=\"n\">logInfoAt</span> <span class=\"n\">tk</span> <span class=\"n\">msg</span><span class=\"bp\">;</span> <span class=\"n\">return</span>\n      <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e'</span>\n    <span class=\"n\">logInfoAt</span> <span class=\"n\">tk</span> <span class=\"o\">(</span><span class=\"n\">msg</span> <span class=\"bp\">++</span> <span class=\"s2\">\"...\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 309522583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668392590
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">whnf_seq</span> <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">•</span> <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"mi\">256</span><span class=\"o\">)</span>\n<span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">&amp;&amp;</span>\n    <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">256</span><span class=\"o\">)</span>\n<span class=\"bp\">•</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">256</span><span class=\"o\">)</span>\n<span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">&amp;&amp;</span>\n    <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">256</span><span class=\"o\">)</span>\n<span class=\"bp\">•</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">256</span><span class=\"o\">)</span>\n<span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">&amp;&amp;</span>\n    <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">256</span><span class=\"o\">)</span>\n<span class=\"bp\">•</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">256</span><span class=\"o\">)</span>\n<span class=\"bp\">•</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 309522588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668392592
    },
    {
        "content": "<p>This one doesn't though, it seems to do the whole subcomputation in one step:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">whnf_seq</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">))</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">•</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n<span class=\"bp\">•</span> <span class=\"n\">Decidable.casesOn</span> <span class=\"o\">(</span><span class=\"n\">instDecidableEqBool</span> <span class=\"o\">(</span><span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"mi\">256</span><span class=\"o\">))</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n    <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">•</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 309522650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668392660
    },
    {
        "content": "<p>I did manage to reproduce the original issue, even with the better code. Changing the valid test function from <code>x = x</code> to <code>x &amp;&amp;&amp; 1 &lt; 2</code> causes the <code>by decide</code> to fail again with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">reduce</span> <span class=\"n\">to</span> <span class=\"bp\">'</span><span class=\"n\">true'</span>\n  <span class=\"n\">Decidable.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">instDecidableForAllFin</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>... even though the evals are both still happy.</p>\n<p>Here's the tweaked, failing code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">all</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">all_iff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">decidable_of_decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">all_iff</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test_p_true</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">256</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">test_p_true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">test_p_true</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.decLt</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">256</span><span class=\"o\">),</span> <span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">))</span>\n<span class=\"k\">#eval</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">256</span><span class=\"o\">),</span> <span class=\"n\">test_p_true</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">256</span><span class=\"o\">),</span> <span class=\"n\">test_p_true</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 310541905,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668657928
    },
    {
        "content": "<p><code>x &amp;&amp;&amp; 0 &lt; 2</code> is happy though.</p>",
        "id": 310542163,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668658145
    },
    {
        "content": "<p><code>&amp;&amp;&amp;</code> is bitwise and, you don't need it for <code>Bool</code></p>",
        "id": 310543910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668659463
    },
    {
        "content": "<p>Indeed, but <code>x &amp;&amp;&amp; 1 &lt; 2</code> is _true_ for all Fin 256 though (just as a dummy example). I had expected that if <code>decide</code> returns true then <code>by decide</code> would produce a proof.</p>",
        "id": 310544154,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668659640
    },
    {
        "content": "<p>I'm guessing that it's just too expensive to compute this in the kernel currently. If you use <code>#reduce</code> instead of <code>#eval</code> (which is what this code amounts to), it hits both the <code>maxRecDepth</code> limit and the <code>maxHeartbeats</code> limit</p>",
        "id": 310544269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668659748
    },
    {
        "content": "<p><code>by decide</code> doesn't produce a proof, it just asserts that the statement is true and the kernel has to work out why</p>",
        "id": 310544332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668659789
    },
    {
        "content": "<p>and the kernel isn't particularly good at that job, comparatively</p>",
        "id": 310544345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668659817
    },
    {
        "content": "<p>Ah, I see. Thanks!</p>",
        "id": 310544358,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668659836
    },
    {
        "content": "<p>using <code>by native_decide</code> uses <code>#eval</code> instead, which scales much better but is also \"cheating\" in some sense</p>",
        "id": 310544360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668659841
    },
    {
        "content": "<p><code>native_decide</code> brings a lot more into the set of trusted code, I assume?</p>",
        "id": 310544438,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668659919
    },
    {
        "content": "<p>quite so</p>",
        "id": 310544441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668659924
    },
    {
        "content": "<p>The tools for doing this with proofs are still under construction in mathlib4 but hopefully we will have something soon that can do this</p>",
        "id": 310544481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668659966
    },
    {
        "content": "<p>It was fun to play around with, thank you!</p>",
        "id": 310544670,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668660128
    }
]