[
    {
        "content": "<p>I'd appreciate it if someone could break down this bit from eq_of_heq in core a little bit; in the context, (α : Sort u) (a : α). I understand the idea being conveyed, but I'm not sure how <code>(eq.rec_on (eq.refl α) a : α)</code> can be of type <code>α</code>. I think my main confusion is what constitutes the (C : α -&gt; Sort l) part in this use eq.rec_on. The whole thing for context is :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">eq_of_heq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">heq</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">α&#39;</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α&#39;</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h₂</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">heq</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">α&#39;</span> <span class=\"n\">a&#39;</span><span class=\"o\">),</span> <span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"n\">this</span> <span class=\"n\">α</span> <span class=\"n\">a&#39;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 169834492,
        "sender_full_name": "garySebastian",
        "timestamp": 1562549553
    },
    {
        "content": "<p><code>eq.rec_on (eq.refl α) a</code> is defeq to <code>a</code> by the reduction rule for inductive types</p>",
        "id": 169835907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562552447
    },
    {
        "content": "<p>If you use </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">eq_of_heq</span>\n</pre></div>\n\n\n<p>to view the implicit stuff, you will see that the motive in this case is just <code>(λ (_x : Sort u), _x)</code></p>",
        "id": 169835977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562552641
    },
    {
        "content": "<p>In other words, it is using the fact that <code>α = α</code> to transfer <code>a : α</code> to <code>α</code>. Because the proof is reflexivity (and it always is because of proof irrelevance), this is just an identity cast and the result is defeq to <code>a</code>.</p>",
        "id": 169836090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562552808
    },
    {
        "content": "<blockquote>\n<p>it is using the fact that <code>α = α</code> to transfer <code>a : α</code> to <code>α</code>.</p>\n</blockquote>\n<p>Sorry I'm really struggling with this one. Isn't <code>a</code> already of type <code>α</code>, or is the point that you can use that for <code>(α = α')</code> to transfer <code>a : α</code> to <code>a : α'</code>? This might be part of my problem, but the variable names are going over my head. If the signature of eq.rec_on is :</p>\n<div class=\"codehilite\"><pre><span></span>eq.rec_on : Π {β : Sort u} {b : β} {C : β → Sort l} {b_1 : β}, b = b_1 → C b → C b_1\n</pre></div>\n\n\n<p>then in line two, <code>(eq.rec_on (h2 : α = α') a : α') = a'</code>, is b |-&gt; α or b |-&gt; a?</p>\n<p>I think I understand the idea that the inferred family { C : α -&gt; Sort l } is <code>id</code> in this case, since the type checker seems to be okay with <code>show a = a'</code> instead of <code>show (eq.rec_on (eq.refl α) a : α) = a'</code> in line 4.</p>",
        "id": 169846401,
        "sender_full_name": "garySebastian",
        "timestamp": 1562570478
    },
    {
        "content": "<p><code>(eq.rec_on (h2 : α = α') a : α')</code> means \"make the term <code>eq.rec_on (h2 : α = α') a</code> and make sure it has type <code>α'</code> while you're at it\". This sort of information (\"what type is this thing supposed to have?\") is helpful for Lean's elaborator because <code>eq.rec_on</code> has got all these inputs in <code>{ }</code> brackets, which Lean is supposed to guess.</p>",
        "id": 169846654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562570830
    },
    {
        "content": "<p>So now Lean looks at <code>eq.rec_on</code> and says \"OK, the <code>{ }</code> stuff I'll have to deal with later, so I don't know beta or b or C or b_1, but I know that the next input is supposed to have type <code>b = b_1</code> and it actually has type <code>α = α'</code> so I'd best set <code>b = α</code> and <code>b_1 = α'</code>\"</p>",
        "id": 169846768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562570958
    },
    {
        "content": "<p>Oh, perhaps this is the trick you're missing: if <code>a</code> has type <code>alpha</code> and then I explicitly refer to <code>a</code> whilst assuring Lean it has type <code>beta</code> by writing <code>(a : beta)</code> then Lean will accept this, as long as it can convince itself that <code>alpha = beta</code> by definition.</p>",
        "id": 169846935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562571153
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fakebool</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span> <span class=\"c1\">-- true by definition</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fakebool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 169847080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562571335
    },
    {
        "content": "<p>Here's the same proof in tactic mode (which I find far easier to use)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_of_heq&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- intermediate lemma, called `this` in original.</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">heq</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">α&#39;</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α&#39;</span><span class=\"o\">),</span>\n             <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h₂</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- proof of intermediate lemma.</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">heq</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">α&#39;</span> <span class=\"n\">a&#39;</span><span class=\"o\">),</span>\n          <span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- back to one goal now.</span>\n  <span class=\"c1\">-- now change the goal to something definitionally equal</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now prove it using H</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">α</span> <span class=\"n\">a&#39;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169847373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562571668
    },
    {
        "content": "<p>I feel much more comfortable reading this after spending a few evenings with it. Thanks a lot for pointing me in the right direction <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>.</p>",
        "id": 170517642,
        "sender_full_name": "garySebastian",
        "timestamp": 1562742358
    }
]