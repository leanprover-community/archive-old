[
    {
        "content": "<p>Is there a paper that describes the simplifier?</p>\n<p>I recently read the ICFP paper <a href=\"https://leanprover.github.io/papers/tactic.pdf\">https://leanprover.github.io/papers/tactic.pdf</a> on the metaprogramming/tactic framework, and it was very informative. I'd love to read something similar about the simplifier.</p>",
        "id": 233373413,
        "sender_full_name": "Greg Price",
        "timestamp": 1617736654
    },
    {
        "content": "<p>Lean's simplifier is modeled after Isabelle's. You can read about Isabelle's simplifier here:<br>\n<a href=\"https://isabelle.in.tum.de/dist/Isabelle2021/doc/prog-prove.pdf\">https://isabelle.in.tum.de/dist/Isabelle2021/doc/prog-prove.pdf</a> (page 20)<br>\nThere is more information here:<br>\n<a href=\"https://isabelle.in.tum.de/dist/Isabelle2021/doc/tutorial.pdf\">https://isabelle.in.tum.de/dist/Isabelle2021/doc/tutorial.pdf</a> (page 27, page 175)<br>\nSome of the issues that are specific to dependent type theory are described here:<br>\n<a href=\"https://leanprover.github.io/papers/congr.pdf\">https://leanprover.github.io/papers/congr.pdf</a><br>\nI hope that helps. (This is where my knowledge trails off.)</p>",
        "id": 233376348,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1617737928
    },
    {
        "content": "<p>Very informative, thanks!</p>",
        "id": 233378488,
        "sender_full_name": "Greg Price",
        "timestamp": 1617738835
    },
    {
        "content": "<p>The discussion about <code>safe_log</code> in the <code>congr</code> paper is interesting. Do you know if there's anything else to read on the \"e-matcher\", or any lean examples demonstrating it?</p>",
        "id": 233380167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617739503
    },
    {
        "content": "<p>An area I'd especially like to read more about is how the simplifier determines which simp lemmas have a LHS that matches the current expression.</p>\n<p>IIUC that's where \"e-matching\" comes in. But I'm still working out what that means.</p>\n<p>Are there papers people can recommend on e-matching as it's thought of in Lean?</p>",
        "id": 233606429,
        "sender_full_name": "Greg Price",
        "timestamp": 1617862297
    },
    {
        "content": "<p>One result I find from Google is a paper with Leo as an author, but that doesn't mention Lean:<br>\n<a href=\"http://leodemoura.github.io/files/ematching.pdf\">http://leodemoura.github.io/files/ematching.pdf</a><br>\nbecause it's from 2007.</p>\n<p>I'll certainly take a look at that but would be grateful if anyone knows of another helpful reference.</p>",
        "id": 233606529,
        "sender_full_name": "Greg Price",
        "timestamp": 1617862393
    },
    {
        "content": "<p>The simplifier doesn't use e-matching</p>",
        "id": 233607115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617862947
    },
    {
        "content": "<p>The way the simplifier matches terms is just plain unification (modulo reducible definitions)</p>",
        "id": 233607129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617862976
    },
    {
        "content": "<p>Ah OK, thanks!</p>\n<p>Can you explain what \"modulo reducible definitions\" means? I've seen <code>@[reducible]</code> on definitions, but haven't quite put together what it means.</p>",
        "id": 233608550,
        "sender_full_name": "Greg Price",
        "timestamp": 1617864191
    },
    {
        "content": "<p>It means that <code>simp</code> will unfold reducible definitions when they appear in the term to match, rather than attempting to find lemmas containing the reducible definition. (I think it does this with the simp lemmas themselves, so there won't be a mismatch even if both the goal and the lemma use the reducible definition.)</p>",
        "id": 233610207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617865311
    },
    {
        "content": "<p>Does this mean that adding both <code>@[reducible, simp]</code> attributes to a definition is superfluous?</p>",
        "id": 233610820,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1617865655
    },
    {
        "content": "<p>No, you might still want to simp the definition away rather than just matching other lemmas modulo the definition</p>",
        "id": 233611157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617865829
    },
    {
        "content": "<p>(also I just tested it and I can't seem to get the matching modulo reducibles to work either)</p>",
        "id": 233611209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617865879
    },
    {
        "content": "<p>Since <code>simp</code> uses keyed matching, it will fail if the reducible definition is the head of the term to be matched:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- abbreviation F (a b : ℕ) := a + b</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"o\">]</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 233611440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617866038
    },
    {
        "content": "<p>Here's a demonstration of the difference between <code>@[reducible]</code> and <code>@[reducible, simp]</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">id</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- f (F a b) = 1</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- 0 = 1</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">F</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- f (a + b) = 1</span>\n</code></pre></div>",
        "id": 233611804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617866281
    },
    {
        "content": "<p>Notice that in the first one, <code>F</code> was not unfolded, but in the second one it nevertheless was not an obstacle to matching the <code>f (a + a)</code> term against <code>f (F a a)</code>. In the third one, since <code>F</code> is now <code>@[simp]</code>, it is unfolded away in the goal</p>",
        "id": 233612041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617866415
    },
    {
        "content": "<p>Ok, I get it, thank you for laying out all the different situations</p>",
        "id": 233620288,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1617871430
    },
    {
        "content": "<p>That's very helpful, thanks!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/simplifier/near/233612041\">said</a>:</p>\n<blockquote>\n<p>Notice that in the first one, <code>F</code> was not unfolded, but in the second one it nevertheless was not an obstacle to matching the <code>f (a + a)</code> term against <code>f (F a a)</code>.</p>\n</blockquote>\n<p>Do I understand right that this is a demo of getting the matching modulo reducibles to work? Or did you have something else in mind for what that meant?</p>",
        "id": 233769647,
        "sender_full_name": "Greg Price",
        "timestamp": 1617945408
    },
    {
        "content": "<p>yes, this is showing how matching modulo reducibles works</p>",
        "id": 233769743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617945520
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 251388166,
        "sender_full_name": "AnduinHS",
        "timestamp": 1630417942
    }
]