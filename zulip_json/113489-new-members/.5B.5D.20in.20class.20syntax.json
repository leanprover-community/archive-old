[
    {
        "content": "<p>What's this weird syntax?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">is_principal</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">principal</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">})</span>\n</pre></div>",
        "id": 195494762,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588038811
    },
    {
        "content": "<p>Weird. It changes the brackets around <code>S : ideal α</code> from <code>{}</code> to <code>()</code></p>",
        "id": 195494965,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588039064
    },
    {
        "content": "<p>This is a recent change</p>",
        "id": 195495016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039111
    },
    {
        "content": "<p>it used to be that this was the default and the new default was denoted <code>{}</code></p>",
        "id": 195495024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039132
    },
    {
        "content": "<p>Oh, this line was changed when mathlib moved to 3.8.0, I see yes</p>",
        "id": 195495025,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588039135
    },
    {
        "content": "<p>I'm not really sure how I feel about this syntax (I assumed it would make something an instance argument, if anything?) but I will say I could never predict which variables would be implicit in the field extractors!</p>",
        "id": 195495052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588039194
    },
    {
        "content": "<p>with the <code>[]</code> mode you get parameters being explicit if they cannot be inferred from the arguments, as in regular theorems</p>",
        "id": 195495096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039206
    },
    {
        "content": "<p>with <code>{}</code> (default) mode all parameters are implicit</p>",
        "id": 195495100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039224
    },
    {
        "content": "<p>I'm not a big fan of the <code>[]</code> notation but I don't really have a better suggestion</p>",
        "id": 195495113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039269
    },
    {
        "content": "<p>maybe <code>{{}}</code>?</p>",
        "id": 195495119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039285
    },
    {
        "content": "<p><code>()</code>?</p>",
        "id": 195495121,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588039296
    },
    {
        "content": "<p>that's a third mode</p>",
        "id": 195495125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039304
    },
    {
        "content": "<p>I see</p>",
        "id": 195495131,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588039313
    },
    {
        "content": "<p>that makes everything explicit IIRC</p>",
        "id": 195495132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039313
    },
    {
        "content": "<p>Maybe make it the default behaviour?</p>",
        "id": 195495135,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588039319
    },
    {
        "content": "<p>did that always exist?</p>",
        "id": 195495155,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588039322
    },
    {
        "content": "<p>it was the default behavior</p>",
        "id": 195495174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039329
    },
    {
        "content": "<p>yes, it's always been there</p>",
        "id": 195495180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039339
    },
    {
        "content": "<p>Here's the PR: <a href=\"https://github.com/leanprover-community/lean/issues/175\" title=\"https://github.com/leanprover-community/lean/issues/175\">lean#175</a></p>",
        "id": 195495181,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588039339
    },
    {
        "content": "<p>You can't write <code>()</code> because of parser shenanigans, it has to be <code>( )</code></p>",
        "id": 195495191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/.5B.5D.20in.20class.20syntax/near/195495174\" title=\"#narrow/stream/113489-new-members/topic/.5B.5D.20in.20class.20syntax/near/195495174\">said</a>:</p>\n<blockquote>\n<p>it was the default behavior</p>\n</blockquote>\n<p>Actually, there was no explicit way to use the default behavior.  Both <code>( )</code> and <code>{}</code> are different from the old default (please read the PR for a full description). Writing <code>[]</code> uses the old default.  I used <code>[]</code> because it doesn't clash with <code>{}</code> or <code>( )</code>, and frankly, none of them work like implicit arguments.</p>",
        "id": 195528852,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588059914
    }
]