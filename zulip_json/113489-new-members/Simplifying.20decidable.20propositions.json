[
    {
        "content": "<p>How do I simplify decidable propositions?</p>",
        "id": 200795524,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592100380
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">ff</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200795526,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592100394
    },
    {
        "content": "<p>On <code>sorry</code> the goal is <code>ite (1 = 0) tt (ite (1 = 1) tt ff) = tt</code>. I know that <code>0 ≠ 1</code>, so how do I simplify past the first <code>ite</code>.</p>",
        "id": 200795532,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592100444
    },
    {
        "content": "<p>I know that <code>comp_val</code> can close this particular goal, but it wouldn't be able to if the whole expression wasn't computable.</p>",
        "id": 200795595,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592100576
    },
    {
        "content": "<p><code>norm_num</code> closes the goal</p>",
        "id": 200795649,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592100676
    },
    {
        "content": "<p><code>split_ifs</code> does something useful</p>",
        "id": 200795656,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592100709
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200795693,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592100748
    },
    {
        "content": "<p>I think this is closer to the answer you were looking for,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">ff</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">if_neg</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">if_pos</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200795706,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592100838
    },
    {
        "content": "<p>Thank you! <code>if_pos</code>/<code>if_neg</code> work perfectly!</p>",
        "id": 200795755,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592100915
    },
    {
        "content": "<p><code>split_ifs</code> does something like \"<code>rw</code> with <code>if_pos</code> or <code>if_neg</code> at all the <code>ite</code>s in the goal\"</p>",
        "id": 200795866,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592101160
    },
    {
        "content": "<p>well, that's my mental model of it, <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#split_ifs\">tactic#split_ifs</a> can say something more accurate</p>",
        "id": 200795896,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592101184
    },
    {
        "content": "<p>Is there a tactic that does something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">ff</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">not_lt_bot</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">irrefl</span> <span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">],</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">cc</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 200796709,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592102749
    },
    {
        "content": "<p>I'd like to have a convenient <code>cases</code> on <code>ℕ</code>, without having to apply <code>cases</code>multiple times or <code>refine</code> a monstrous <code>λ x, match x with ... end</code>.</p>",
        "id": 200796768,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592102852
    },
    {
        "content": "<p>For this example, you don't need to pattern match at all:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">ff</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span>\n <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">],</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 200797077,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592103502
    },
    {
        "content": "<p>Yes, I am aware. It is just a toy example for demonstration.</p>",
        "id": 200797199,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592103770
    },
    {
        "content": "<p>For a small number of cases you could write <code>rcases n with _|_|_|_</code>... otherwise it depends on what you want to do.</p>",
        "id": 200797368,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592104131
    },
    {
        "content": "<p>Thanks that works perfectly.</p>",
        "id": 200797780,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592104997
    },
    {
        "content": "<p>I had tried <code>rcases n with ⟨_|_|_⟩</code> with no success. Good to know <code>rcases</code> can handle it.</p>",
        "id": 200797789,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592105040
    },
    {
        "content": "<p>Occasionally it's useful to do something like <code>by_cases h : x &lt; 5</code> and then in the \"true\" branch, <code>interval_cases h</code>, which explodes into individual cases.</p>",
        "id": 200799154,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592108027
    }
]