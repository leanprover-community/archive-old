[
    {
        "content": "<p>I want to play with parts of the mathlib, try to follow some proofs in there. I have lean mode in emacs installed and the mathlib cloned. Can I somehow open all of mathlib and evaluate things there?<br>\nJust opening the files doesn't seem to work too well.</p>",
        "id": 178053423,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570998207
    },
    {
        "content": "<p>Hi, can I somehow load mathlib in lean and evaluate expressions in there / follow some proof? I have leanpkg / lean mode installed for emacs. But not sure how to open the source dir of mathlib after cloning.</p>",
        "id": 178053473,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570998267
    },
    {
        "content": "<p>It should work; make sure to compile everything before starting browsing them: <code>leanpkg build</code>.<br>\nAfterwards, you should be able to browse the files in emacs and play with them.</p>",
        "id": 178053710,
        "sender_full_name": "Nicolás Ojeda Bär",
        "timestamp": 1570998673
    },
    {
        "content": "<p>Ok I'll try that. Do you also know how to let emacs 'expand' #print commands etc? Now I keep having to move the cursor on them</p>",
        "id": 178053770,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570998775
    },
    {
        "content": "<p>I think you can try with C-c C-b</p>",
        "id": 178053849,
        "sender_full_name": "Nicolás Ojeda Bär",
        "timestamp": 1570998869
    },
    {
        "content": "<p><code>M-x lean-message-boxes-toggle</code></p>",
        "id": 178053858,
        "sender_full_name": "Nicolás Ojeda Bär",
        "timestamp": 1570998897
    },
    {
        "content": "<p>Building mathlib takes some time! Is the default build of lean in release? Can I optimize it some more?</p>",
        "id": 178054214,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570999537
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib-nightly/releases\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-nightly/releases\">https://github.com/leanprover-community/mathlib-nightly/releases</a></p>",
        "id": 178054261,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570999568
    },
    {
        "content": "<p>Note that if you followed mathlib installation instructions at <a href=\"https://github.com/leanprover/mathlib\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib\">https://github.com/leanprover/mathlib</a> then you got the <code>update-mathlib</code> script whose job is to download those pre-compiled mathlib in your projects</p>",
        "id": 178054278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570999637
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib-nightly/releases\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-nightly/releases\">https://github.com/leanprover-community/mathlib-nightly/releases</a></p>\n</blockquote>\n<p>Thanks! I was wondering for a local build though! Right now I just cmake - G Ninja the lean/src dir and that seems to work. But I wonder if there are some optimizations</p>",
        "id": 178054286,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570999665
    },
    {
        "content": "<p>Oh, you mean compiling Lean, not mathlib!</p>",
        "id": 178054333,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570999705
    },
    {
        "content": "<blockquote>\n<p>Note that if you followed mathlib installation instructions at <a href=\"https://github.com/leanprover/mathlib\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib\">https://github.com/leanprover/mathlib</a> then you got the <code>update-mathlib</code> script whose job is to download those pre-compiled mathlib in your projects</p>\n</blockquote>\n<p>Hmm, I did that so I might have the prebuild ones. Still it seems to take lean quite some time to start evaluating expressions. Like it needs some bootup time</p>",
        "id": 178054342,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570999719
    },
    {
        "content": "<p>mathlib is the math library, compiled by Lean.</p>",
        "id": 178054345,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570999732
    },
    {
        "content": "<p>Did you create a project using leanpkg as described in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md</a>?</p>",
        "id": 178054366,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570999771
    },
    {
        "content": "<blockquote>\n<p>Oh, you mean compiling Lean, not mathlib!</p>\n</blockquote>\n<p>Yeah I built lean, but also have mathlib and am building it now. I just wanna run through some proofs, see if it helps me make sense of them.</p>",
        "id": 178054370,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570999776
    },
    {
        "content": "<p>You are really choosing the hard way if you build Lean.</p>",
        "id": 178054424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570999807
    },
    {
        "content": "<p>Maybe we already had that conversation, there are so many new people those days...</p>",
        "id": 178054428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570999822
    },
    {
        "content": "<p>The supported way described in mathlib install docs does <em>not</em> involve building Lean from source (neither mathlib for that matter).</p>",
        "id": 178054458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570999890
    },
    {
        "content": "<blockquote>\n<p>The supported way described in mathlib install docs does <em>not</em> involve building Lean from source (neither mathlib for that matter).</p>\n</blockquote>\n<p>Yeah I tried that first, but it didn't seem to setup lean for my system. No lean / leanpkg anywhere.</p>",
        "id": 178054506,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570999927
    },
    {
        "content": "<p>OS?</p>",
        "id": 178054509,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570999937
    },
    {
        "content": "<blockquote>\n<p>OS?</p>\n</blockquote>\n<p>OpenSuse. The mathlib building is done and it seems to work! I can evaluate expressions. Do you know an interesting proof to start with in the mathlib?</p>",
        "id": 178054579,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1571000062
    },
    {
        "content": "<p>There shouldn't be any issue with OpenSuse. Do you have anything like <code>$HOME/.elan</code> and <code>$HOME/.mathlib</code>?</p>",
        "id": 178054602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571000142
    },
    {
        "content": "<p>About interesting parts of mathlib, it depends on things you like. Do you come from maths or computer science?</p>",
        "id": 178054644,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571000171
    },
    {
        "content": "<blockquote>\n<p>About interesting parts of mathlib, it depends on things you like. Do you come from maths or computer science?</p>\n</blockquote>\n<p>Computer science more, but have some slight math background. Maybe the fundamental theory of arithmetic?</p>",
        "id": 178054666,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1571000255
    },
    {
        "content": "<p>Maybe <a href=\"https://github.com/leanprover-community/mathlib/tree/master/src/data/int\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/master/src/data/int\">https://github.com/leanprover-community/mathlib/tree/master/src/data/int</a> then?</p>",
        "id": 178054737,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571000345
    },
    {
        "content": "<p>Thanks, will have a look. So it seems easiest to set C-c C-g to see the goals and step through them. Though some proofs seem to be complex single line constructions, in which case you can't really go through the steps? Any tips there?</p>",
        "id": 178054920,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1571000642
    },
    {
        "content": "<p>Very simple proofs are directly given as proof terms, so there is nothing to step through.</p>",
        "id": 178055096,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571000921
    },
    {
        "content": "<p>And I know nothing about emacs.</p>",
        "id": 178055102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571000937
    },
    {
        "content": "<blockquote>\n<p>Very simple proofs are directly given as proof terms, so there is nothing to step through.</p>\n</blockquote>\n<p>Ah makes sense</p>",
        "id": 178055119,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1571000978
    },
    {
        "content": "<p>Note: the recommended path is to read <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">https://leanprover.github.io/theorem_proving_in_lean/</a>, but that's a lot of reading. If you prefer to see code first, and don't fear maths I recommend cloning <a href=\"https://github.com/PatrickMassot/lean-tutorials\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-tutorials\">https://github.com/PatrickMassot/lean-tutorials</a> and stepping through proofs there.</p>",
        "id": 178055207,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571001113
    },
    {
        "content": "<p>This story of proof terms vs stepable proofs is explained there.</p>",
        "id": 178055252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571001130
    },
    {
        "content": "<blockquote>\n<p>Note: the recommended path is to read <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">https://leanprover.github.io/theorem_proving_in_lean/</a>, but that's a lot of reading. If you prefer to see code first, and don't fear maths I recommend cloning <a href=\"https://github.com/PatrickMassot/lean-tutorials\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-tutorials\">https://github.com/PatrickMassot/lean-tutorials</a> and stepping through proofs there.</p>\n</blockquote>\n<p>Thanks! Good pointers.</p>",
        "id": 178055274,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1571001196
    },
    {
        "content": "<p>I think the idea is that if something is a small lemma that is not-so-interesting proof wise it's often given as a term-mode 1-liner sort of thing (but thats not so much of a rule). You can always declare the assumptions of such a lemma/theorem as variables, and then take subterms starting from the innermost and <code>#check</code> them and build up the main term to get a sense of what is happening within the proof. But probably looking through the longer tactic proofs is better to get a sense of things.</p>",
        "id": 178055551,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1571001613
    },
    {
        "content": "<blockquote>\n<p>I think the idea is that if something is a small lemma that is not-so-interesting proof wise it's often given as a term-mode 1-liner sort of thing (but thats not so much of a rule). You can always declare the assumptions of such a lemma/theorem as variables, and then take subterms starting from the innermost and <code>#check</code> them and build up the main term to get a sense of what is happening within the proof. But probably looking through the longer tactic proofs is better to get a sense of things.</p>\n</blockquote>\n<p>You can also enclose subterms in <code>{!  !}</code> and use the hole command that displays the type of a subterm. Afraid I don't know the key to trigger a hole command in emacs though.</p>",
        "id": 178055635,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571001773
    },
    {
        "content": "<p>Wow, didn't know this, this is much easier, thanks!</p>",
        "id": 178055692,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1571001869
    },
    {
        "content": "<p>hole command in emacs is C-c SPC</p>",
        "id": 178055821,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1571002149
    },
    {
        "content": "<blockquote>\n<p>Do you know an interesting proof to start with in the mathlib?</p>\n</blockquote>\n<p>This list has some pointers of nice theorems: <a href=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md\">https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md</a></p>",
        "id": 178060790,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1571011057
    },
    {
        "content": "<p>It might be interesting to keep a sort of wish list for projects that contributors don't have time to start but that undergraduates, new grad students or simply newcomers could undertake</p>",
        "id": 178062388,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571013894
    },
    {
        "content": "<p>Yes, I think this would be really great. Partly we can do this via the issues list. I think it would also be pretty reasonable to record these in the code itself, for example in comments marked with <code>TODO</code> and <code>PROJECT</code>.</p>",
        "id": 178063059,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571015204
    },
    {
        "content": "<p>Yeah, that would work! We would need to make them easy to find.</p>",
        "id": 178063413,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571015716
    },
    {
        "content": "<p>I thought we were already doing this?</p>",
        "id": 178063720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571016160
    },
    {
        "content": "<p>Not inline <code>PROJECT</code> tags, but a page of potential project ideas has been proposed (and I think implemented) before</p>",
        "id": 178063735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571016192
    },
    {
        "content": "<p>I can't find it in the mathlib docs any more. Were they removed because they got out of date? <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 178063821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571016300
    },
    {
        "content": "<p>There's <a href=\"https://github.com/leanprover-community/mathlib/wiki/Potential-projects\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/wiki/Potential-projects\">this</a> on the Github wiki.</p>",
        "id": 178063901,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571016375
    },
    {
        "content": "<p>The page on the wiki is pretty out of date, which I think is the inevitable fate of any standalone “projects” page.</p>",
        "id": 178066154,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571019203
    },
    {
        "content": "<p>This was why I suggested that embedding them in mathlib itself might be possible.</p>",
        "id": 178066167,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571019233
    },
    {
        "content": "<p>Most new projects will need to be located in their own files though, so they may not fit well with inline comments. Issues seems like a better way to track projects, although it's a bit open ended - there is a near-infinite list of things that have not yet been done in mathlib.</p>",
        "id": 178066258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571019359
    },
    {
        "content": "<p>How does one find that page?</p>",
        "id": 178066394,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571019527
    },
    {
        "content": "<p>we don't use the wiki much, so I didn't think to look there</p>",
        "id": 178066438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571019581
    },
    {
        "content": "<p>We could reference it in the README.md file or move it to the docs directory</p>",
        "id": 178066506,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571019635
    },
    {
        "content": "<p>I did manage to sneak some <code>TODO</code>s in the file on surreal numbers: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/set_theory/surreal.lean#L346\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/set_theory/surreal.lean#L346\">https://github.com/leanprover-community/mathlib/blob/master/src/set_theory/surreal.lean#L346</a></p>",
        "id": 178067091,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571020393
    },
    {
        "content": "<p>I think these are actually pretty good: someone filling them in would probably be editing that same file, and the TODOs in some sense form part of the documentation.</p>",
        "id": 178067186,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571020546
    },
    {
        "content": "<p>I think that wiki page should basically be given up for dead; lots has been done!</p>",
        "id": 178067231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571020570
    }
]