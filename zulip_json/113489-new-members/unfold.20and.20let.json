[
    {
        "content": "<p>I'm unclear how the <code>let</code> operator works especially in regards to unfolding a definition that uses it. I tried unfolding the definition of a recursive function called <code>anno</code> that uses <code>let</code> and I get something like <code>anno._match_1 ...</code> which I have no clue what to do with. Any ideas? I can provide some code if need be, but it's embedded in a bunch of dependencies so I may have to extract a MWE.</p>",
        "id": 197342745,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1589319223
    },
    {
        "content": "<p>Is this <code>let</code> in term mode or tactic mode?</p>",
        "id": 197342818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589319254
    },
    {
        "content": "<p>It's used as part of the recursive definition in term mode.</p>",
        "id": 197342886,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1589319294
    },
    {
        "content": "<p>If you get things compiling with <code>sorry</code> then you can just #check <code>anno._match_1</code> to see what it is. It will be part of the recursive definition.</p>",
        "id": 197343000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589319358
    },
    {
        "content": "<p>Hmm... I'm not sure what to do with that information now that I have it. Here's a excerpt of the definition (there are more cases):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">anno</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">AnnoTerm</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">asp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">aasp</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">att</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">anno</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">aatt</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lseq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">anno</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">anno</span> <span class=\"n\">y</span> <span class=\"n\">j</span> <span class=\"k\">in</span>\n    <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">alseq</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bseq</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">anno</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">anno</span> <span class=\"n\">y</span> <span class=\"n\">j</span> <span class=\"k\">in</span>\n    <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">abseq</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bpar</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">anno</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">anno</span> <span class=\"n\">y</span> <span class=\"n\">j</span> <span class=\"k\">in</span>\n    <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">abpar</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>#check <code>anno._match_1</code> tells me its type is Plc → ℕ → ℕ × AnnoTerm → ℕ × AnnoTerm. </p>\n<p>Basically, I'm trying to prove a property about <code>anno</code> by induction. The unfolding gives me a goal with <code>anno._match_1</code>which can't be unfolded further to reduce it to the inductive hypothesis.</p>",
        "id": 197343819,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1589319811
    },
    {
        "content": "<p>triple backticks give you nicer code blocks, like this </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">anno</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">AnnoTerm</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">asp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">aasp</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">att</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">anno</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">aatt</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197344337,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320113
    },
    {
        "content": "<p>(also full definitions are usually more useful than excerpts)</p>",
        "id": 197344349,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320124
    },
    {
        "content": "<p>as in:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">```</span>\n<span class=\"o\">[</span><span class=\"n\">code</span> <span class=\"n\">goes</span> <span class=\"n\">here</span><span class=\"o\">]</span>\n<span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 197344393,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320158
    },
    {
        "content": "<p>Haha. Yeah. I was trying to do that but messed it up. It's formatted better now, and I added the rest of the definition.</p>",
        "id": 197344574,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1589320259
    },
    {
        "content": "<p>my advice is to avoid <code>let</code> unless necessary</p>",
        "id": 197344711,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320324
    },
    {
        "content": "<p>actually maybe it is necessary in this case</p>",
        "id": 197344735,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320347
    },
    {
        "content": "<p>can you also post the code where your induction proof is failing?</p>",
        "id": 197344819,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320422
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">fib2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib2</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fib2</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fib_add_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 197345022,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320538
    },
    {
        "content": "<p>I actually don't know how to solve this myself</p>",
        "id": 197345027,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320542
    },
    {
        "content": "<p>Here's the code. I'm doing things <strong>very</strong> explicitly for learning purposes.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">anno_range</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">(</span><span class=\"n\">anno</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"n\">anno</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">anno</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">range</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">anno</span><span class=\"o\">,}</span>\n</code></pre></div>\n\n\n<p>I end up with the following goal: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">x_a</span> <span class=\"o\">:</span> <span class=\"n\">Plc</span><span class=\"o\">,</span>\n<span class=\"n\">x_a_1</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">,</span>\n<span class=\"n\">x_ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">anno</span> <span class=\"n\">x_a_1</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">anno</span> <span class=\"n\">x_a_1</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">),</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">anno</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"n\">x_a</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">anno</span> <span class=\"n\">x_a_1</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">anno</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"n\">x_a</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">anno</span> <span class=\"n\">x_a_1</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197345042,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1589320551
    },
    {
        "content": "<p><code>unfold</code> and <code>rw</code> and <code>dsimp only</code> all give me <code>._match_1</code></p>",
        "id": 197345043,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320551
    },
    {
        "content": "<p>I remember being told that <code>let</code> works fine with other things</p>",
        "id": 197345097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300396\">@Paul Rowe</span>  <code>anno._match_1</code> is probably the function <code>\\lam (j, a), (j+1, aatt (i, j+1) p a)</code> representing the remainder of the <code>att</code> case after the <code>let</code></p>",
        "id": 197345099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320566
    },
    {
        "content": "<p>but my experience tells me to avoid it</p>",
        "id": 197345105,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what tactic would you use for my theorem?</p>",
        "id": 197345172,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320604
    },
    {
        "content": "<p>In order to unfold it, the last argument to the auxiliary function must be a pair</p>",
        "id": 197345176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320609
    },
    {
        "content": "<p>because you pattern matched on it being a pair</p>",
        "id": 197345186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320625
    },
    {
        "content": "<p>aha</p>",
        "id": 197345361,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320716
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">fib2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib2</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fib2</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fib_add_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fib</span> <span class=\"n\">fib2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">fib2</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ (fib2._match_1 (fib2._match_1 (a, b))).fst = (fib2._match_1 (a, b)).fst + (a, b).fst</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fib2</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ (a + b, b + (a + b)).fst = (b, a + b).fst + (a, b).fst</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197345365,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300396\">@Paul Rowe</span> after you make the input a pair you can actually use <code>unfold fib2</code></p>",
        "id": 197345407,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320748
    },
    {
        "content": "<p>I just discovered this today</p>",
        "id": 197345418,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320753
    },
    {
        "content": "<p>as in, instead of <code>unfold fib2._match_1</code> or something like that</p>",
        "id": 197345441,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320766
    },
    {
        "content": "<p>Oh neat, it made an equational lemma for matching on the let:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">fib2</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">fib2</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197345654,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589320863
    },
    {
        "content": "<p>And indeed <code>unfold</code> is</p>\n<blockquote>\n<p>Given defined constants <code>e₁ ... eₙ</code>, <code>unfold e₁ ... eₙ</code> iteratively unfolds all occurrences in the target of the main goal, using <strong>equational lemmas</strong> associated with the definitions.</p>\n</blockquote>",
        "id": 197345701,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589320904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300396\">@Paul Rowe</span> you might want to try <code>#print prefix anno</code> just to find out all the things which Lean has created under the hood</p>",
        "id": 197345763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589320928
    },
    {
        "content": "<p>Maybe I'm just being slow at the end of long day. What do I need to do to get the pair as an argument to further unfold?</p>",
        "id": 197346207,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1589321166
    },
    {
        "content": "<p>Whatever is necessary to know that it is a pair</p>",
        "id": 197346237,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589321188
    },
    {
        "content": "<p>Like, what do you expect it to unfold to?</p>",
        "id": 197346252,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589321197
    },
    {
        "content": "<p>oh I see your example now</p>",
        "id": 197346290,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589321224
    },
    {
        "content": "<p>oh but I can't run it</p>",
        "id": 197346324,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589321255
    },
    {
        "content": "<p>Ah ok! I got it.</p>",
        "id": 197346346,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1589321274
    },
    {
        "content": "<p>I used <code>cases (anno x_a_1 (i+1)) with a b</code> and that allowed me to further unfold the definition to produce the inductive hypothesis</p>",
        "id": 197346476,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1589321362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Yeah, I'm trying to port another project over from Coq as a learning method, so there are just too many dependencies to create a working example out of the real code. Thanks, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> for posting a more self-contained example! And thanks to everyone who chimed in! You saved from finishing my work day in a bad mood :)</p>",
        "id": 197346735,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1589321514
    },
    {
        "content": "<p>I'm glad what was at best a very vague answer of mine helped you <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 197346818,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589321563
    },
    {
        "content": "<p>Not sure if this is the easiest proof, but this works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">fib2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib2</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fib2</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fib_add_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fib2</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">,</span> <span class=\"n\">fib</span><span class=\"o\">,</span> <span class=\"n\">fib2</span><span class=\"o\">],</span> <span class=\"n\">cases</span> <span class=\"n\">fib2</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fib2</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fib2</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">fib2</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">injection</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197347232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589321821
    },
    {
        "content": "<p>the interesting step is <code>rw [fib2]</code> on the second line, which could also be <code>unfold fib2</code>, <code>simp [fib2]</code> or <code>refl</code></p>",
        "id": 197347303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589321872
    }
]