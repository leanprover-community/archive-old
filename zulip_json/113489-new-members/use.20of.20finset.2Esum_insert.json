[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_of_squares_nonneg</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.induction_on</span> <span class=\"n\">s</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,},</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">j</span> <span class=\"n\">s</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">pow_two_nonneg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">),},</span>\n  <span class=\"c1\">--have h:=finset.sum_insert h1,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I wanted to use finset.sum_insert h1 to close the goal, but <code>have h:=finset.sum_insert h1</code>gives me four new goals.<br>\nWhat can I do next to solve the goal?</p>",
        "id": 240442104,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622109096
    },
    {
        "content": "<p>just <code>rw</code> it; <code>have</code> is confused about some of the implicit arguments, which could be anything. if you <code>rw</code>, it'll be unified with what's in the goal, and then <code>linarith</code> should probably finish it</p>",
        "id": 240442923,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622109631
    },
    {
        "content": "<p>Cool! The goal is sovled. What <code>have</code> gave me confused me at the beginning...</p>",
        "id": 240443552,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622110004
    },
    {
        "content": "<p>Could you explain why I need to use <code>classical</code> at the beginning?</p>",
        "id": 240443740,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622110136
    },
    {
        "content": "<p><code>classical</code> makes all propositions \"have an answer\"/be <em>decidable</em>; to us mathematicians, this is self-evident, but as Lean is designed as a programming language it isn't obvious <em>what</em> the decision procedure is, which it needs to \"decide\" it</p>",
        "id": 240444455,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622110566
    },
    {
        "content": "<p>in this case, the induction needs a <code>[decidable_eq ι]</code> argument, which you could've used instead</p>",
        "id": 240444528,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622110610
    }
]