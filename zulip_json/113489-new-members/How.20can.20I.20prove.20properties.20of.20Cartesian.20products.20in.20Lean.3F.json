[
    {
        "content": "<p>I'm trying to prove the below goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n\n  <span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n  <span class=\"c1\">-- Proof Designer Suggested Problems - 46</span>\n\n  <span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>When I type this goal into Lean, it gives me the below error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">⁇</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"bp\">↥</span><span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">↥</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"bp\">↥</span><span class=\"n\">C</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>I've looked in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">Theorem Proving in Lean</a>, <a href=\"https://leanprover.github.io/logic_and_proof/\">Logic and Proof in Lean</a>,  and the mathlib docs, but I wasn't able to find anything that would allow me to prove properties of Cartesian products. Can someone point me in the right direction?</p>",
        "id": 269945810,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643564812
    },
    {
        "content": "<p>You are using the wrong kind of product, that's the problem.</p>",
        "id": 269945829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643564850
    },
    {
        "content": "<p><code>×</code> is product of types, not product of subsets. I'm pretty sure that there are products of subsets somewhere; let's try <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.prod\">docs#set.prod</a></p>",
        "id": 269945882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643564895
    },
    {
        "content": "<p>Aah, according to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_prod\">docs#set.mem_prod</a> you should be using <code>×ˢ</code></p>",
        "id": 269945911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643564958
    },
    {
        "content": "<p>Awesome, thanks for the reply. When I type if I replace all my \\times by \\x, I'm still getting an error. How do I type the x with the small s above?</p>",
        "id": 269946594,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643565693
    },
    {
        "content": "<p>I got it and it's working. Thank you!</p>",
        "id": 269946665,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643565780
    },
    {
        "content": "<p>Type <code>\\tim\\^s</code></p>",
        "id": 269946696,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643565840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466607\">Andrew Lubrino</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20can.20I.20prove.20properties.20of.20Cartesian.20products.20in.20Lean.3F/near/269946594\">said</a>:</p>\n<blockquote>\n<p>Awesome, thanks for the reply. When I type if I replace all my \\times by \\x, I'm still getting an error. How do I type the x with the small s above?</p>\n</blockquote>\n<p>It's also helpful to know VSCode will tell you what Yaël shared -- if you paste the symbol into your file and then hold your mouse over it it will say: <code>Type × using \\x or \\times or \\multiplication</code> and <code>Type ˢ using \\^s</code></p>",
        "id": 269946956,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643566118
    },
    {
        "content": "<p>Note however that VScode won't tell you the smallest number of characters to get away with.</p>",
        "id": 269946999,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643566201
    },
    {
        "content": "<p><del>I learned them through sweat and blood</del> I tried <code>\\t</code>, <code>\\ti</code>, <code>\\tim</code> and oh! it works</p>",
        "id": 269947048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643566231
    },
    {
        "content": "<p>oh man, I've been using Lean in the web editor this entire time and just downloading and uploading files back when I want to stop or continue working. Maybe I should really switch to using VS code if there really is some benefit to doing so.</p>",
        "id": 269947077,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643566315
    },
    {
        "content": "<p>Yes please, for your own sake!</p>",
        "id": 269947372,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643566669
    },
    {
        "content": "<p>There are many many benefits to doing so! Not least that you can just do stuff like <code>#check set.mem_prod</code> and then right click on it and jump to definition and then you're right there in mathlib and can see all the API for set products. Follow instructions here <a href=\"https://leanprover-community.github.io/get_started.html\">https://leanprover-community.github.io/get_started.html</a> to install Lean and the community tools, and then make a new project and open it with VS Code.</p>",
        "id": 269947373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643566672
    },
    {
        "content": "<p>Haha, I'm sold. I'm going to switch over this morning. Thanks!</p>",
        "id": 269947700,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643567043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20can.20I.20prove.20properties.20of.20Cartesian.20products.20in.20Lean.3F/near/270830463\">said</a>:</p>\n<blockquote>\n<p>Furthermore you didn't need to start a new thread to discuss this -- it's just as easy to resurrect an old thread, and more convenient too.</p>\n</blockquote>\n<p>I merged together the three threads</p>",
        "id": 270881040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644140842
    }
]