[
    {
        "content": "<p>Hello all, <br>\nMy name is Martin, I'm an undergraduate cs student at hu berlin, I'm new to lean and I'm trying to write a proof that has to do with list operations.<br>\nI am stuck and was wondering if anyone could help:<br>\nGiven <code>  (a b :  ℕ) (as bs : list ℕ) </code> I am trying to prove the following:<br>\n<code> ((bs.erase a).diff as).erase b) = (((bs.erase a).erase b).diff as) </code></p>\n<p>I am under the impression that this proposition is true, because of the following lemmas in mathlib:<br>\n<code>list.diff_cons</code> tells me that I should be able to expand out both sides of the equality into a long chain of erase operations:<br>\nsomething like<br>\n<code> (((bs.erase a).erase a').erase a'' ... .erase b) = (((bs.erase a).erase b).erase a' ... .erase a'') </code><br>\nand <code>list.erase_comm</code> tells me that I'm free to change the order of the erase operations. </p>\n<p>However, I don't know how to express this in lean.</p>",
        "id": 224361665,
        "sender_full_name": "Martin Trifonov",
        "timestamp": 1611854801
    },
    {
        "content": "<p>Hi Martin - would you mind adjusting your message to use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to make it easier to read?</p>",
        "id": 224362269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611855016
    },
    {
        "content": "<p>Sure! I hope this helps</p>",
        "id": 224362648,
        "sender_full_name": "Martin Trifonov",
        "timestamp": 1611855162
    },
    {
        "content": "<p>Are you using <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> or lean 3? <code>Nat</code> makes it look like lean4, which probably won't have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.erase_comm\">docs#list.erase_comm</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.diff_cons\">docs#list.diff_cons</a> yet...</p>",
        "id": 224362765,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611855208
    },
    {
        "content": "<p>I'm using lean 3, I just wrote nat because I didn't know about the backticks ^^</p>",
        "id": 224362891,
        "sender_full_name": "Martin Trifonov",
        "timestamp": 1611855255
    },
    {
        "content": "<p>This seems to be a missing lemma about <code>list.diff</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">diff_cons_right</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l₁.diff</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l₁.diff</span> <span class=\"n\">l₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l₂</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">l₂</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">l₁</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">diff_cons</span><span class=\"o\">,</span> <span class=\"n\">diff_nil</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">diff_cons</span><span class=\"o\">,</span> <span class=\"n\">diff_cons</span><span class=\"o\">,</span> <span class=\"n\">erase_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">diff_cons</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">diff_cons</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">list</span>\n</code></pre></div>",
        "id": 224371611,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611858793
    },
    {
        "content": "<p>This lemma gives you what you want, when combined with <code>list.diff_cons</code></p>",
        "id": 224371820,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611858864
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5941\">#5941</a></p>",
        "id": 224372923,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611859345
    },
    {
        "content": "<p>amazing, thank you!</p>",
        "id": 224379459,
        "sender_full_name": "Martin Trifonov",
        "timestamp": 1611861943
    }
]