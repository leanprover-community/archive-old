[
    {
        "content": "<p>What's the motivation for having Prop be at the bottom of the universe hierarchy??</p>",
        "id": 252330980,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631031596
    },
    {
        "content": "<p>Is it that so we cannot create a type who's type is Prop?? Would a type who's type is Prop undermine  the proposition as type idea??</p>",
        "id": 252332296,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631032090
    },
    {
        "content": "<p>Are you talking about creating a term <code>x</code> such that <code>x : Prop</code> or something else?</p>",
        "id": 252332774,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631032290
    },
    {
        "content": "<p>As for <code>Prop</code>, it is a type and thus a term — it must have a type. It is <code>Prop : Type</code> in fact.</p>",
        "id": 252332925,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631032337
    },
    {
        "content": "<p>Afaik the last thing can be translated as <code>Sort 0 : Type 0</code> but I never worked with Lean on such an abstract level, so please, wait for others' response.</p>",
        "id": 252333044,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631032388
    },
    {
        "content": "<p>It would seem to me that since Prop is at the bottom of the hiearchy, any <code>x : Prop</code> cannot themselves be a type to something</p>",
        "id": 252333241,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631032466
    },
    {
        "content": "<p>I can do <code>def a := false</code> and the Lean Infoview shows me <code>a : Prop</code> so it seems legit.</p>",
        "id": 252333561,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631032585
    },
    {
        "content": "<p>I think there is no paradox. We have <code>false : Prop</code> and <code>Prop : Type</code> as well as we have e.g. <code>3 : int</code> and <code>int : Type</code> which seems perfectly natural.</p>",
        "id": 252333787,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631032677
    },
    {
        "content": "<p>I think the motivation is to have <code>Prop</code> be in the universe hierarchy at all (and of course <code>Prop</code> needs a type as well -- may as well be <code>Type</code>).  Long ago, it used to be that <code>Type 0 = Prop</code> to make it convenient to have universe-polymorphic definitions, but that had the wrinkle that inductive data types used the universe <code>max 1 u</code>.  There was a proposal to split off <code>Prop</code> from the universe hierarchy because this was apparently annoying (all of this happened before I started learning Lean), but then Floris suggested introducing <code>Sort (u + 1) = Type u</code> with <code>Sort 0 = Prop</code>.  That way we can still have universe-polymorphic definitions that allow things to be either a <code>Type u</code> or a <code>Prop</code>. <a href=\"https://github.com/leanprover/lean/issues/1341\">https://github.com/leanprover/lean/issues/1341</a></p>",
        "id": 252333968,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631032747
    },
    {
        "content": "<p>I'm not fully understanding your question, though. <code>Prop</code> is a universe of types, each type is called a proposition, and the terms of those types are called proofs.</p>",
        "id": 252334209,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631032848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span><br>\nBut given a: Prop can you have a y s.t. y: a??</p>\n<p>It would seem to me that if x : Prop there does not exist a y : x<br>\nsince that would imply that there exists u that Sort(u + 1) = Sort 0</p>",
        "id": 252334515,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631032999
    },
    {
        "content": "<p>You can have <code>h : P</code> and <code>P : Prop</code>. Then <code>h</code> is a witness that <code>P</code> is a true proposition.</p>",
        "id": 252334688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631033076
    },
    {
        "content": "<p>There is a <code>u</code> such that <code>Type 0 = Sort (u+1)</code>.</p>",
        "id": 252334738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631033101
    },
    {
        "content": "<p><code>Prop = Sort 0</code>, and <code>Type = Type 0 = Sort 1</code>.</p>",
        "id": 252334782,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631033120
    },
    {
        "content": "<p>Not all types have the same type. Does that observation help?</p>",
        "id": 252334909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631033179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> It's helping, but I'm not quite there yet.<br>\n So my understanding is that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">=</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"kt\">Sort</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Let's assume there's a proof called P of type Prop (or in other words, that P inhabits Prop)<br>\nNow let's say that P was itself a proposition (or in other words an inhabitable type), and for the sake of demonstration there was an x which inhabited that type, it seems like that would imply that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Prop</span> <span class=\"bp\">=</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span>  <span class=\"bp\">=</span> <span class=\"kt\">Sort</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which to my (limited) understanding  isn't a thing</p>",
        "id": 252337498,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631034159
    },
    {
        "content": "<p>My intuition struggles with that concept that we have <code>false : Prop</code> and also <code>P : Prop</code> however they feel fundamentally different.</p>",
        "id": 252337631,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631034215
    },
    {
        "content": "<p>Does this help? <a href=\"https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/\">https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/</a></p>",
        "id": 252337793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631034276
    },
    {
        "content": "<p>Of course, both <code>false</code> and <code>P</code> are terms; however, only <code>P</code> is a type, and so, we can have <code>h : P</code> but <code>f : false</code> would be a nonsense.</p>",
        "id": 252337831,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631034294
    },
    {
        "content": "<p>It should be <code>Type : Type 1</code> not <code>Type : Type 0</code>. But the error is that just because <code>Prop : Type</code>, it doesn't mean there aren't other things of type <code>Type</code>, like <code>nat : Type</code>. Likewise, <code>Sort (-1) : (Sort 0 = Prop)</code> doesn't exist but there are still other things of type <code>Prop</code>, like <code>true : Prop</code>.</p>",
        "id": 252338136,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631034398
    },
    {
        "content": "<p>What if we go higher? Is there any <code>x : Type 2</code> apart from <code>x = Type 1</code> of course?</p>",
        "id": 252338352,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631034490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435815\">Lucas Teixeira</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252337498\">said</a>:</p>\n<blockquote>\n<p>So my understanding is that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">=</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which to my (limited) understanding  isn't a thing</p>\n</blockquote>\n<p>Nope, <code>Type = Sort 1</code></p>",
        "id": 252338444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631034544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> sure, stuff like <code>x = {T : Type | nonempty T}</code></p>",
        "id": 252338536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631034597
    },
    {
        "content": "<p>and many other constructions that quantify over <code>Type</code></p>",
        "id": 252338611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631034610
    },
    {
        "content": "<p>Oh I see. We can also have <code>f := Type → Type</code> and then <code>f : Type 2</code> which is the same level as in your example.</p>",
        "id": 252339235,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631034886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span></p>\n<p>Okay so </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"kt\">Prop</span> <span class=\"bp\">=</span> <span class=\"kt\">Sort</span>  <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">=</span> <span class=\"kt\">Sort</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Doesn't that leave the whole inhabitants of Sort 0 being of type Sort -1 conundrum unresolved??</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Prop</span> <span class=\"bp\">=</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span>  <span class=\"bp\">=</span> <span class=\"kt\">Sort</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 252339331,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631034932
    },
    {
        "content": "<p>Why don't you check your work before posting Martin?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 252339335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631034934
    },
    {
        "content": "<p>@Lucas there is no such thng as Sort -1. Does this help?</p>",
        "id": 252339481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631034984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252339335\">said</a>:</p>\n<blockquote>\n<p>Why don't you check your work before posting Martin?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I did. Exactly this. I just wanted to post for clarification if others read it after us.</p>",
        "id": 252339579,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631035035
    },
    {
        "content": "<p>So it's <code>Type 1</code> not <code>Type 2</code>, right?</p>",
        "id": 252339619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631035052
    },
    {
        "content": "<p>[this comment is no longer relevant]</p>",
        "id": 252339734,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631035089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"435815\">@Lucas Teixeira</span> In type theory, everything has a single type.  For example, <code>5</code> has the type <code>ℕ</code>, and <code>ℕ</code> has the type <code>Type 0</code>.  There are two synonyms for <code>Type 0</code>: <code>Type</code> and <code>Sort 1</code>.  (In general, the type of a type is <code>Sort 0</code>, or <code>Sort 1</code>, or <code>Sort 2</code>, or ...)</p>\n<p>We don't say that <code>5 : Type -1</code> -- the type of <code>5</code> is <code>ℕ</code>.  Similarly, if <code>x : P</code> and <code>P : Sort 0</code>, we don't say <code>x : Sort -1</code>, since <code>x : P</code> and that's that.</p>",
        "id": 252340750,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631035536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435815\">Lucas Teixeira</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252337498\">said</a>:</p>\n<blockquote>\n<p>Let's assume there's a proof called P of type Prop (or in other words, that P inhabits Prop)<br>\nNow let's say that P was itself a proposition (or in other words an inhabitable type)</p>\n</blockquote>\n<p>\"a proof called P of type Prop\" doesn't make sense.  If <code>P</code> has type <code>Prop</code>, it's called a proposition, not a proof.</p>\n<p>\"or in other words an inhabitable type\": all propositions are inhabitable (they are types).  If a proposition is inhabited, a term that inhabits it is called a proof of that proposition.</p>\n<p>Here's what characterizes these <code>Sort u</code> universes: they are the type of the type of something.  A proposition is not the type of the type of something -- at most it's the type of something (a proof).</p>",
        "id": 252341588,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631035869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"435815\">@Lucas Teixeira</span> With types it is turtles all the way <em>up</em>. So <code>3 : int</code> and <code>int : Type</code> and <code>Type : Type 1</code> and <code>Type n : Type (n+1)</code>.<br>\nSimilarly <code>trivial : true</code> and <code>true : Prop</code> and <code>Prop : Type</code> and <code>Type : Type 1</code> etc...</p>\n<p>But it is not turtles all the way <em>down</em>! Just because <code>Type : Type 1</code> and <code>Prop : Type</code> and <code>P : Prop</code> and possibly <code>h : P</code> (which is a proof witness of the proposition <code>P</code>), this doesn't mean that you can sensibly treat <code>h</code> as a type, and ask for <code>x : h</code>.</p>",
        "id": 252341669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631035913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252339481\">said</a>:</p>\n<blockquote>\n<p>@Lucas there is no such thng as Sort -1. Does this help?</p>\n</blockquote>\n<p>Yes, that was my intuition. If I were to reformulate my original question I would ask:  Is the reason <code>Prop := Sort 0</code> rather then <code>Prop := Sort 1</code> is because <code>Prop:= Sort 1</code> would lead to a situation where the inhabitants of Prop would themselves have inhabitants and that suggest a non-sensical heuristic of proofs (inhabitants of Prop) are themselves propositions (types) which can be proved (inhabited)</p>\n<p>It was more of a questions regarding the design motivations behind the Prop syntactic sugaring than type theory itself</p>",
        "id": 252341736,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631035929
    },
    {
        "content": "<p>To continue with the turtles. If you have some random <code>X : Type 5</code>, then you can talk about <code>x : X</code>. But you cannot talk about <code>y : x</code>.<br>\nExcept in the very special case where <code>X = Type 4</code>. Because then <code>x</code> would be a type, and so you can talk about its terms.</p>",
        "id": 252341961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631036029
    },
    {
        "content": "<p>So even if you start with <code>X : Type 5</code>, this does <em>not</em> mean that you can go 5 turtles down. Almost always, you can only go 2 turtles down: from <code>Type 5</code> to <code>X</code>, and from <code>X</code> to <code>x</code>.</p>",
        "id": 252342086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631036067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435815\">Lucas Teixeira</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252341736\">said</a>:</p>\n<blockquote>\n<p><code>Prop:= Sort 1</code> would lead to a situation where the inhabitants of Prop would themselves have inhabitants</p>\n</blockquote>\n<p>A reason you're getting answers about type theory is because statements like this suggest a misunderstanding -- <code>true</code> is an inhabitant of <code>Prop</code> that itself has an inhabitant (<code>trivial</code>), so this is already the case.</p>",
        "id": 252342410,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631036215
    },
    {
        "content": "<blockquote>\n<p>a situation where the inhabitants of Prop would themselves have inhabitants and that suggest a non-sensical heuristic of proofs (inhabitants of Prop) are themselves propositions (types) which can be proved (inhabited)</p>\n</blockquote>\n<p>The inhabitants of Prop are propositions, and they do have inhabitants (proofs).</p>",
        "id": 252342532,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631036268
    },
    {
        "content": "<p>That's the reason to consider Prop as belonging to the same family as Type (and Type 1, etc.) at all.</p>",
        "id": 252342711,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631036331
    },
    {
        "content": "<p>(I do wonder how <code>propext</code> and proof irrelevance would work if there were a \"<code>Sort -1</code>\".  Maybe <code>trivial</code> would have to be a type?)</p>",
        "id": 252343034,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631036470
    },
    {
        "content": "<p>One could imagine a different (and much easier to understand for beginners) set-up where there were three classes of things: terms (which are not types), types (which are not universes) and Universes (which have no type). Then <code>Sort 0 = Prop</code>, <code>Sort 1 = Type</code>, <code>Sort 2</code>, <code>Sort 3</code> ... are your universes, types have type a Sort, and terms have type a type. The only reason that it is not like this is because that everything has to have a type in type theory, so we arbitrarily let Sort n have type Sort (n+1) just to satisfy this condition. The fact that it is true does not make it useful or helpful, indeed it can make it confusing as we're seeing.</p>",
        "id": 252343212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631036537
    },
    {
        "content": "<p>The blog post I linked to above tries to stress this point of view, term : type and type : universe, without going into this irrelevant universe : (another universe) issue.</p>",
        "id": 252343533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631036678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I believe this is how (at least one version of) Automath is set up, but it only has <code>Prop</code> and <code>Type</code>.</p>\n<p>(It has some support for higher-order theorems, but the theorems don't have types themselves.  They're too big.  It's like axiom schema not being axioms themselves.)</p>",
        "id": 252343805,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631036785
    },
    {
        "content": "<p>Isn't Isabelle/HOL like this?</p>",
        "id": 252343864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631036811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252342410\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"435815\">Lucas Teixeira</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252341736\">said</a>:</p>\n<blockquote>\n<p><code>Prop:= Sort 1</code> would lead to a situation where the inhabitants of Prop would themselves have inhabitants</p>\n</blockquote>\n<p>A reason you're getting answers about type theory is because statements like this suggest a misunderstanding -- <code>true</code> is an inhabitant of <code>Prop</code> that itself has an inhabitant (<code>trivial</code>), so this is already the case.</p>\n</blockquote>\n<p>You're right actually, I do have a misunderstanding.</p>\n<p><code> trivial : true</code> and <code>true: (Prop = Sort 0)</code> but it is not the case that <code>true = Sort -1</code> even though it has an inhabitant.</p>\n<p>I think my confusion comes from the difference between universes and types. Is <code>true</code> then a type without being a universe???</p>",
        "id": 252343993,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631036872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252343533\">said</a>:</p>\n<blockquote>\n<p>The blog post I linked to above tries to stress this point of view, term : type and type : universe, without going into this irrelevant universe : (another universe) issue.</p>\n</blockquote>\n<p>I really like how it is written. If I understand it correctly, your simplified view contains only two universes <code>Type</code> and <code>Prop</code> neither of which can stand on the left side of the colon, right?</p>",
        "id": 252344069,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631036897
    },
    {
        "content": "<p>Right -- to do a lot of mathematics (note that I am speaking to mathematicians) one only needs these two universes.</p>",
        "id": 252344186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631036970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435815\">Lucas Teixeira</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252343993\">said</a>:</p>\n<blockquote>\n<p>I think my confusion comes from the difference between universes and types. Is <code>true</code> then a type without being a universe???</p>\n</blockquote>\n<p>Yes</p>",
        "id": 252344191,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631036974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"435815\">@Lucas Teixeira</span> <code>true</code> is a true-false statement, so it's a proposition (a true one, like 2+2=4 is a true proposition). In particular it is at the \"type\" level of the three-level heirarchy (term/type/universe) which I'm urging you to take on board, so it is a type but not a universe, yes. Its type is <code>Prop</code>, which is a universe. It has a term <code>trivial</code>, which is its proof.</p>",
        "id": 252344466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631037085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435815\">Lucas Teixeira</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252343993\">said</a>:</p>\n<blockquote>\n<p>You're right actually, I do have a misunderstanding.</p>\n<p><code> trivial : true</code> and <code>true: (Prop = Sort 0)</code> but it is not the case that <code>true = Sort -1</code> even though it has an inhabitant.</p>\n<p>I think my confusion comes from the difference between universes and types. Is <code>true</code> then a type without being a universe???</p>\n</blockquote>\n<p><code>0 : nat</code> and <code>nat : Type</code> but it isn't the case that <code>nat = Prop</code> either.</p>",
        "id": 252344581,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631037123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435815\">Lucas Teixeira</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252343993\">said</a>:</p>\n<blockquote>\n<p>You're right actually, I do have a misunderstanding.</p>\n<p><code> trivial : true</code> and <code>true: (Prop = Sort 0)</code> but it is not the case that <code>true = Sort -1</code> even though it has an inhabitant.<br>\n</p>\n</blockquote>\n<p>Well, you see, we have <code>trivial : true</code> and <code>true : Prop</code> where <code>Prop = Sort 0</code> without having <code>true = Sort -1</code>. In a similar manner, we have <code>3 : int</code> and <code>int : Type</code> where <code>Type = Sort 1</code> without having <code>int = Sort 0</code>.</p>",
        "id": 252344691,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631037163
    },
    {
        "content": "<p>(noting again that <code>Sort -1</code> doesn't exist)</p>",
        "id": 252344809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631037205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252343533\">said</a>:</p>\n<blockquote>\n<p>The blog post I linked to above tries to stress this point of view, term : type and type : universe, without going into this irrelevant universe : (another universe) issue.</p>\n</blockquote>\n<p>Noted, I'll check it out. Thanks everyone for being so helpful!</p>\n<p>Here's my understanding so far</p>\n<ol>\n<li>All terms have a type</li>\n<li>Not all types are universes</li>\n<li>Universes are expressed in Sort u (or some syntactic sugaring of it, such as Prop or Type u)</li>\n</ol>\n<p>And what I feel to be true but still not 100% on</p>\n<ol start=\"4\">\n<li>All types have a universe</li>\n<li>All Universes are types</li>\n</ol>",
        "id": 252345478,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631037469
    },
    {
        "content": "<p>If \"all types have a universe\" means \"the type of a type is a universe\", then looks good to me.</p>",
        "id": 252345712,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631037561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435815\">Lucas Teixeira</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252345478\">said</a>:</p>\n<blockquote>\n<ol start=\"4\">\n<li>All types have a universe</li>\n<li>All Universes are types</li>\n</ol>\n</blockquote>\n<p>I read (4) as \"all types belong to a universe\".</p>",
        "id": 252346363,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631037792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252344466\">said</a>:</p>\n<blockquote>\n<p>In particular it is at the \"type\" level of the three-level hierarchy (term/type/universe) which I'm urging you to take on board</p>\n</blockquote>\n<p>I just dug up the terminology for this from an automath paper, to support this viewpoint (and if it worked for de Bruijn and the automath project, it's probably good pedagogically!).</p>\n<p>Every expression has a <em>degree</em>, which is 1, 2, or 3.  Their meanings (translated to Lean):</p>\n<ol>\n<li><code>Type</code> and <code>Prop</code> (universes)</li>\n<li>types and propositions</li>\n<li>terms and proofs</li>\n</ol>\n<p>The type of something of degree 3 is something of degree 2, and the type of something of degree 2 is something of degree 1.</p>",
        "id": 252347807,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631038400
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"435815\">@Lucas Teixeira</span> Maybe a way to say what's going on (using this terminology) is that you were thinking the <code>u</code> in <code>Sort u</code> had to do with the degree of an expression, but degree and universe level end up being orthogonal concepts.  Each <code>Sort u</code> is of degree 1.)</p>",
        "id": 252348310,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631038606
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 252349326,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631039016
    },
    {
        "content": "<blockquote>\n<p>\"all types belong to a universe\"</p>\n</blockquote>\n<p>This is not set theory, so there is no \"belong\" or \"element of\" here. The type of each type is a universe.</p>",
        "id": 252351812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631040037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252351812\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>\"all types belong to a universe\"</p>\n</blockquote>\n<p>This is not set theory, so there is no \"belong\" or \"element of\" here. The type of each type is a universe.</p>\n</blockquote>\n<p>Oh yes. However, reading \"type of each type\" brings a risk of developing a headache, and so, I decided to overload the word \"belongs\" for <code>:</code> in addiction to the standard meaning of expressing <code>∈</code> in plain English. Can we agree on that? Or is my word use misleading?</p>",
        "id": 252352886,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631040461
    },
    {
        "content": "<p>Unfortunately Lean has <code>∈</code>, too, so it can be confusing.</p>",
        "id": 252353154,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631040559
    },
    {
        "content": "<p>The concept of degrees (1, 2, 3) is pretty neat.  Thank you <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> ! We can also observe that <code>bool</code> and <code>Prop</code> occupy different degrees in your hierarchy (2 and 1, respectively).</p>\n<p>So informally, we have <code>tt : bool : Type</code> and <code>trivial : true : Prop</code>. Specifically, note that <code>tt</code> and <code>true</code> are on different degrees (3 and 2, respectively). This explains why we can speak of <code>true</code> being inhabited (by the term <code>trivial</code> as a matter of fact), whereäs speaking of <code>tt</code> being inhabited would be a nonsense. Also, apart from <code>true</code> and <code>false</code> many other terms can be of the type <code>Prop</code> which also confirms the well-known rule of thumb that we cannot do <code>by_cases</code> on <code>P : Prop</code> while we could happily do <code>by_cases</code> on <code>b : bool</code> as it can have only the two expected values (<code>tt : bool</code> or <code>ff : bool</code>).</p>\n<p>This is in contrast to Lean's typesystem, where both <code>tt</code> and <code>true</code> are outside of the <code>Sort u</code> hierarchy, and moreover, both the grandfather of <code>tt</code> and the grandfather of <code>true</code> are precisely <code>Sort 1</code>. From this point of view, they might seem to be equivalent, which they aren't. </p>\n<p>So, for these purposes (and for thinking inside my head, generally), your concept of degrees is more useful than the concept of levels. Did I put everything right?</p>",
        "id": 252355228,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631041229
    },
    {
        "content": "<p>To be clear, this is not my hierarchy in any way -- it's what Kevin was talking about and I just pulled out de Bruijn's terminology of \"degree.\" It seems to make it easier to help keep the degree hierarchy and the universe level hierarchy straight.</p>\n<p>Here's a diagram that's come to mind due to this discussion, illustrating the types you mention and also a type up in <code>Type 1</code>:</p>\n<p><a href=\"/user_uploads/3121/rBbBgwYWZk10_r4Tt1zBSIG-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/rBbBgwYWZk10_r4Tt1zBSIG-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/rBbBgwYWZk10_r4Tt1zBSIG-/image.png\"></a></div>",
        "id": 252362723,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631044499
    },
    {
        "content": "<p>Degree does seem to be the fundamental notion.  Universe levels are, as I understand it, a particular solution to some technical problems (making sure everything, including universes, has a type, doing so without introducing paradoxes, being able to give universe-polymorphic definitions, and having a practical universe inference system).</p>",
        "id": 252363076,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631044647
    },
    {
        "content": "<p>Very nice, thanks!</p>",
        "id": 252364214,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631045048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20.3A.3D.20Sort.200.20Motivation/near/252348310\">said</a>:</p>\n<blockquote>\n<p>(<span class=\"user-mention silent\" data-user-id=\"435815\">Lucas Teixeira</span> Maybe a way to say what's going on (using this terminology) is that you were thinking the <code>u</code> in <code>Sort u</code> had to do with the degree of an expression, but degree and universe level end up being orthogonal concepts.  Each <code>Sort u</code> is of degree 1.)</p>\n</blockquote>\n<p>Yes! That sums up my confusion pretty well</p>",
        "id": 252507934,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631125016
    }
]