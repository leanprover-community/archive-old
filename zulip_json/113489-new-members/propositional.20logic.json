[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">lemma11helper2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"kt\">Prop</span><span class=\"o\">),(</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">))):=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">or_and_distrib_right</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">or_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">and_or_distrib_right</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n\n  <span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>produces</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">and_or_distrib_right</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">∧</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">∨</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">∨</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">∨</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">r</span>\n<span class=\"err\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">r</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">r</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">r</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span>\n</code></pre></div>\n\n\n<p>If I don't give arguments to and_or_distrib_right then it works on a different place, not the <br>\nplace I desire it to work.   But if I do give it arguments I get the exhibited error. <br>\nSince ifinish won't do this problem (at least in my version of lean) I want to do it by hand.<br>\nHow can I get this to work?  Remember that I need to have an  intuitionistic proof, not a classical one.</p>",
        "id": 209869521,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599896550
    },
    {
        "content": "<p>Seems like the arguments to <code>and_or_distrib_right</code> are implicit; you can try <code>@and_or_distrib_right q ... </code></p>",
        "id": 209869533,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599896610
    },
    {
        "content": "<p><code>@</code> turns the implicit arguments into explicit ones</p>",
        "id": 209869539,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599896639
    },
    {
        "content": "<p>Thank you Ruben,  that worked!    I love this Zulip room!</p>",
        "id": 209869584,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599896686
    },
    {
        "content": "<p>suppose I have    some hypothesis    h:p     where p is some formula.   In my goal or some other hypothesis I have a lot of occurrences of p.<br>\nI want to rewrite them all as \"true\"  and automatically simplify   p or q  to true  and  p and q  to q  and p implies q to q and q  implies p to true.<br>\nHow can that be done?</p>\n<p>Example:   in the following,  use h6 to erase all the occurrences of z \\in X.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h6</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span>\n<span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span>  <span class=\"err\">‹</span> <span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">z</span> <span class=\"err\">›</span>  <span class=\"err\">∈</span> <span class=\"n\">R</span>\n<span class=\"n\">h7</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span>  <span class=\"err\">‹</span> <span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">z</span> <span class=\"err\">›</span>  <span class=\"err\">∈</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span>  <span class=\"err\">‹</span> <span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">z</span> <span class=\"err\">›</span>  <span class=\"err\">∈</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"n\">h8</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span>  <span class=\"err\">‹</span> <span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">z</span> <span class=\"err\">›</span>  <span class=\"err\">∈</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span>  <span class=\"err\">‹</span> <span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">z</span> <span class=\"err\">›</span>  <span class=\"err\">∈</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span>\n<span class=\"n\">h9</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span>  <span class=\"err\">‹</span> <span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">z</span> <span class=\"err\">›</span>  <span class=\"err\">∈</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span>  <span class=\"err\">‹</span> <span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">z</span> <span class=\"err\">›</span>  <span class=\"err\">∈</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span>  <span class=\"err\">‹</span> <span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">z</span> <span class=\"err\">›</span>  <span class=\"err\">∈</span> <span class=\"n\">R</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span>  <span class=\"err\">‹</span> <span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">z</span> <span class=\"err\">›</span>  <span class=\"err\">∈</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 210090428,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1600145622
    },
    {
        "content": "<p>Something that comes to mind is that you can <code>simp [iff_of_true h6 trivial] at *</code></p>",
        "id": 210091036,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600146548
    },
    {
        "content": "<p>That worked beautifully!  Thank you.   Guess I'd better go read up about simp.   I've been using rw  and simp_rw but I've never used<br>\nplain simp  yet, and obviously it's a Good Thing.</p>",
        "id": 210093226,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1600149876
    },
    {
        "content": "<p>I haven't really used <code>simp_rw</code> yet, but it seems like <code>simp_rw [a, b, c, ...]</code> is defined to be <code>simp only [a], simp only [b], simp only [c], ...</code></p>",
        "id": 210093690,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600150520
    },
    {
        "content": "<p>The <code>only</code> indicates to <code>simp</code> that it should only use the lemma in the square brackets, rather than making use of all of mathlib's <code>@[simp]</code>-tagged lemmas.</p>",
        "id": 210093771,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600150589
    },
    {
        "content": "<p>Making effective use of <code>simp</code>, and indeed constructing appropriate <code>@[simp]</code> annotated lemmas so <code>simp</code> works well, is an important part of library design!</p>\n<p>In some sense it's ideal if <code>simp</code> confluently rewrites expressions into a normal form. But, since \"perfect is the enemy of good\", often it's best to trade a bit of idealism for practical power, and just have <code>simp</code> do as much \"as feels natural\", and let the linter warn you if you do something dangerous!</p>",
        "id": 210094027,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600150961
    }
]