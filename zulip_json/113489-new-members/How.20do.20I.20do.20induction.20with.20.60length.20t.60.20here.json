[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>variables {A : Type} {x : A} {s t : list A}\n\nlemma ex : length (reverse t) = length t :=\nbegin\ninduction (length t) with n hn,\nsorry,\nsorry,\nend\n</pre></div>\n\n\n<p>in this lemma I want to write <code>induction (length t) with n hn</code> but then the goals are like</p>\n<div class=\"codehilite\"><pre><span></span>2 goals\ncase nat.zero\nA : Type,\nt : list A\n⊢ length (reverse t) = 0\n\ncase nat.succ\nA : Type,\nt : list A,\nn : ℕ,\nhn : length (reverse t) = n\n⊢ length (reverse t) = nat.succ n\n</pre></div>\n\n\n<p>which is not what I wanted.</p>",
        "id": 183704774,
        "sender_full_name": "YH",
        "timestamp": 1576626460
    },
    {
        "content": "<p>But it is what the tactic is expected to do</p>",
        "id": 183705101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576626796
    },
    {
        "content": "<p>you probably want to induct on <code>t</code></p>",
        "id": 183705107,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1576626812
    },
    {
        "content": "<p>Did try induction on <code>t</code>.</p>",
        "id": 183705121,
        "sender_full_name": "YH",
        "timestamp": 1576626834
    },
    {
        "content": "<p>You'll need some intermediate lemmas but this is the way to do it</p>",
        "id": 183705176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576626855
    },
    {
        "content": "<p>if you want to see a oneliner-solution i can post it, but it's a nice small exercise</p>",
        "id": 183705583,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1576627317
    },
    {
        "content": "<p>I just finished my 23-liner. Show me the oneliner please.</p>",
        "id": 183705714,
        "sender_full_name": "YH",
        "timestamp": 1576627421
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma ex2 {t : list A} : length (reverse t) = length t :=\nbegin\ninduction t with x xs hs,\nunfold reverse,\nunfold reverse_core,\nunfold reverse,\nunfold reverse_core,\nunfold length,\nhave l : ∀ s t : list A, length (reverse_core s t) = length s + length t,\n  intro s,\n  induction s with y ys h1,\n  unfold reverse_core,\n  unfold length,\n  intro t,\n  rw zero_add,\nunfold reverse_core,\nintro t,\nrw h1 (y :: t),\nunfold length,\nsimp,\nrw l _ _,\nunfold length,\nsimp,\nend\n</pre></div>",
        "id": 183705722,
        "sender_full_name": "YH",
        "timestamp": 1576627439
    },
    {
        "content": "<p>it does use some basic intermediate list lemmas.</p>\n<div class=\"codehilite\"><pre><span></span>lemma ex : length (reverse t) = length t :=\nby induction t; simpa only [list.reverse_cons, list.length_append, list.length, add_right_inj]\n</pre></div>",
        "id": 183705782,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1576627474
    },
    {
        "content": "<p>OK. <code>reverse_cons</code> is the one I didn't know.</p>",
        "id": 183705802,
        "sender_full_name": "YH",
        "timestamp": 1576627501
    },
    {
        "content": "<p>what is <code>simpa</code>, lean cannot find it.</p>",
        "id": 183705937,
        "sender_full_name": "YH",
        "timestamp": 1576627626
    },
    {
        "content": "<p>you can find a description of most mathlib tactics here: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md</a></p>",
        "id": 183705951,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1576627652
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>⊢ length (reverse (t_hd :: t_tl)) = length (t_hd :: t_tl)\n</pre></div>\n\n\n<p>Still have this goal.</p>",
        "id": 183706084,
        "sender_full_name": "YH",
        "timestamp": 1576627780
    },
    {
        "content": "<p>did you import <code>data.list</code>?</p>",
        "id": 183706382,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1576628067
    },
    {
        "content": "<p><code>import data.list.basic</code></p>",
        "id": 183706427,
        "sender_full_name": "YH",
        "timestamp": 1576628145
    },
    {
        "content": "<p>works for me <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 183706487,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1576628184
    },
    {
        "content": "<p>Oh my bad, I defined my own length in this hidden name space. facepalm.</p>",
        "id": 183706818,
        "sender_full_name": "YH",
        "timestamp": 1576628568
    }
]