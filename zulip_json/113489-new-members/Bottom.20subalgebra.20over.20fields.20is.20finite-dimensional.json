[
    {
        "content": "<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">L/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> be a field extension. I'm trying to show that <code>⊥</code> is finite-dimensional over $K$. Here's my attempt: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fin_dim_bot</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">finite_dimensional_of_dim_eq_one</span> <span class=\"o\">(</span><span class=\"n\">subalgebra.dim_bot</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The problem is that the <code>subalgebra.dim_bot</code> has type <code>module.rank ?m_1 ↥⊥ = 1</code>, and I need it to have type <code>module.rank K ↥⊥ = 1</code>. I've seen this <code>?m_1</code> notation before, and I think it means that the result is true for any type, but I don't know how to insert the type I want (namely <code>K</code>). I've tried things like <code>subalgebra.dim_bot K</code> and <code>subalgebra.dim_bot K L</code>, but none of it has worked. </p>\n<p>I'd appreciate any guidance or explanation of what I need to do.</p>",
        "id": 265474107,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1639910902
    },
    {
        "content": "<p><code>set_option pp.implicit true</code> will give a clearer message</p>",
        "id": 265474298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639911295
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finite_dimensional_of_dim_eq_one</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">subalgebra.dim_bot</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Might help you understand what's going wrong</p>",
        "id": 265474354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639911388
    },
    {
        "content": "<p>(untested)</p>",
        "id": 265474358,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639911395
    },
    {
        "content": "<p>Hmm, well I solved the problem by using your refine tactic and then just whacking it with simp. I still have no idea what the original problem was, or what simp actually did in this instance. </p>\n<p>Using <code>convert subalgebra.dim_bot</code> creates six goals, some of which are really weird. The first one is <code>module.rank K ↥⊥ = module.rank ?m_1 ↥⊥</code>,  which seems to be exactly the same as the original problem, since I don't know what this <code>?m_1</code> is or how to interact with it.</p>",
        "id": 265475053,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1639912498
    },
    {
        "content": "<p><code>?m_1</code> means \" I can't work out what to put here\"</p>",
        "id": 265475622,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639913328
    },
    {
        "content": "<p>Probably because the bits you can't see without <code>pp.implicit true</code> don't match at all</p>",
        "id": 265475630,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639913348
    },
    {
        "content": "<p><code>simp?</code> will tell you what simp did</p>",
        "id": 265475641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639913370
    },
    {
        "content": "<p>This might be a way to see more clearly what's going on: <br>\n<a href=\"#narrow/stream/113488-general/topic/Tips.20and.20tricks/near/265410441\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Tips.20and.20tricks/near/265410441</a></p>",
        "id": 265476676,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639915099
    }
]