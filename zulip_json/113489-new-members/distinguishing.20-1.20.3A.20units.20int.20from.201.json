[
    {
        "content": "<p>In the course of proving the simplicity of the alternating group, see <br>\n(The alternating group is simple!)[https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/The.20alternating.20group.20is.20simple!/near/266008041], I had to use a bunch of simple results which did not look automatic. I probably wrote more than necessary, but before I make a proper PR, the question is now to decide what to do with them.<br>\nSo should the following be done at hand when needed (possibly simplified), or are they worth of inclusion into mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">neg_one_ne_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">units.eq_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">even_pow_of_neg_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">units.eq_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">units.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">units.coe_neg_one</span><span class=\"o\">,</span> <span class=\"n\">units.coe_one</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.neg_one_pow_of_even</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">odd_pow_of_neg_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">units.eq_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">units.coe_one</span><span class=\"o\">,</span> <span class=\"n\">units.coe_neg_one</span><span class=\"o\">,</span> <span class=\"n\">units.coe_pow</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.neg_one_pow_of_odd</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_of_neg_one_is_one_of_even_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">even_pow_of_neg_one</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span>  <span class=\"n\">nat.even_iff_not_odd</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">neg_one_ne_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">odd_pow_of_neg_one</span> <span class=\"n\">n</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_of_neg_one_is_neg_one_of_odd_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">odd_pow_of_neg_one</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span>  <span class=\"n\">nat.odd_iff_not_even</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">even_pow_of_neg_one</span> <span class=\"n\">n</span> <span class=\"n\">h'</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">neg_one_ne_one</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.symm</span><span class=\"o\">,</span>\n <span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">neq_one_is_neg_one</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">finset.mem_of_mem_insert_of_ne</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_univ</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266253491,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640692486
    },
    {
        "content": "<p>The first one would be helped by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.ne_iff\">docs#units.ne_iff</a>, which is maybe worth having if it doesn't already exist</p>",
        "id": 266258631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640697572
    },
    {
        "content": "<p>The first one should be <code>dec_trivial</code>, right?</p>",
        "id": 266258809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640697727
    },
    {
        "content": "<p>Indeed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">neg_one_ne_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">dec_trivial</span>\n</code></pre></div>\n<p>works</p>",
        "id": 266258848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640697788
    },
    {
        "content": "<p>How many of the lemmas above are true if you replace <code> ℤ</code> with some arbitrary ring?</p>",
        "id": 266258945,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640697892
    },
    {
        "content": "<p>Most of them. And most of them only depend on -1 being an element of order 2 in a multiplicative group.</p>",
        "id": 266258975,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640697934
    },
    {
        "content": "<p>There are a few lemmas in mathlib already about units of int, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.units_eq_one_or\">docs#int.units_eq_one_or</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.units_pow_eq_pow_mod_two\">docs#int.units_pow_eq_pow_mod_two</a></p>",
        "id": 266259081,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640698030
    },
    {
        "content": "<p>So hopefully they can be used to give some short proofs here, the odd/even things seem useful and I don't think I've seen them in mathlib</p>",
        "id": 266259156,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640698117
    },
    {
        "content": "<p>I've deal with the odd/even ones by destructing them into <code>2 * k + 1</code> or <code>2 * k</code></p>",
        "id": 266259357,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640698318
    },
    {
        "content": "<p>These are lemmas that work in a general ring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">general_ring</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">odd_pow_of_neg_one</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">units.eq_iff.mp</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">nat.neg_one_pow_of_odd</span> <span class=\"n\">hn</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">even_pow_of_neg_one</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">units.eq_iff.mp</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">nat.neg_one_pow_of_even</span> <span class=\"n\">hn</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">general_ring</span>\n</code></pre></div>",
        "id": 266259448,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1640698381
    },
    {
        "content": "<p>and the last lemma also works with <code>dec_trivial!</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">neq_one_is_neg_one</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 266259588,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1640698512
    },
    {
        "content": "<p>I also needed some <code>-1 ^ n</code> stuff recently, and I have these in a branch of mine.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.parity</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">int</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">neg_one_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_pow.pow</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">neg_one_pow</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">neg_one_pow</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">neg_one_pow</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">neg_one_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">neg_one_pow</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">neg_one_pow</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">neg_one_pow</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">neg_one_pow</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n.nat_abs</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">neg_one_pow</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">neg_one_pow</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">neg_one_pow</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">neg_one_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">neg_one_pow</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">neg_one_pow</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">neg_one_pow</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">neg_one_pow</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">neg_one_pow</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">neg_one_pow</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">int</span>\n</code></pre></div>\n<p>If someone is making a pr about this, it would be great if these stuff are included <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 266259693,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640698567
    },
    {
        "content": "<p>I also understood from <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> that he had needed some (-1)^n stuff as well.</p>",
        "id": 266259728,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640698623
    },
    {
        "content": "<p>Additional stylistic question: is it useful to make <code>n</code> as much implicit as possible ?</p>",
        "id": 266259836,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640698704
    },
    {
        "content": "<p><code>n</code> should be implicit for your iffs. in the case of implications, if <code>n</code> is mentioned in a different hypothesis, you may make it implicit. but i find that it is often more clunky to have it implicit, I might say <code>rw &lt;-odd_pow_of_neg_one 3</code> which then leaves me with a nice side goal of <code>odd 3</code>. I like that more than trying to prove <code>odd 3</code> first.</p>",
        "id": 266260012,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640698868
    },
    {
        "content": "<p>I had some proof that (-1) has order 2 iff not char 2 or trivial somewhere if that's helpful</p>",
        "id": 266263911,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640701924
    },
    {
        "content": "<p>I think algebra/char_two/basic</p>",
        "id": 266263927,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640701938
    },
    {
        "content": "<p>I think we're also missing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The general problem is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.has_neg\">docs#units.has_neg</a> satisfies no stronger typeclasses, so every neg lemma has to be restated about it</p>",
        "id": 266266258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640703977
    },
    {
        "content": "<p>In flt-regular we had to work with something like <code>(-1)^(n*(n-1)/2)</code> and the problem was rather integer division if I remember correctly</p>",
        "id": 266267519,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640704733
    },
    {
        "content": "<p>I think it makes sense to have a dedicated function <code>ℤ → R</code> that maps even integers to <code>1</code> and odd integers to <code>-1</code>.</p>",
        "id": 266267989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640705138
    },
    {
        "content": "<p>Writing <code>(-1)^n</code> is common notation in informal maths, but it's maybe not the optimal way of encoding it in Lean.</p>",
        "id": 266268042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640705169
    },
    {
        "content": "<p>Such a function would make sense in standard math — look at how quadratic reciprocity is usually stated : $(-1)^{(p-1)(q-1)/2}$ is only natural once people have digested it as “if $p$ and $q$ are both 3 mod 4, then $-1$, else $1$”.</p>",
        "id": 266268227,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640705339
    },
    {
        "content": "<p>Yep, I agree.</p>",
        "id": 266268246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640705375
    },
    {
        "content": "<p>Well, but would <code>foo ((p-1)*(q-1)/2)</code> be easier to parse?</p>",
        "id": 266268319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640705404
    },
    {
        "content": "<p>Not much, I agree. One even needs more…</p>",
        "id": 266268635,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640705696
    },
    {
        "content": "<p>Note that in mathlib you can write <code>(-1)^(p*q/2)</code> and get the same answer. The joys of integer division...</p>",
        "id": 266268780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640705785
    },
    {
        "content": "<p>I totally agree, I've never understood why people state quadratic reciprocity in that way.</p>",
        "id": 266271047,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640707591
    },
    {
        "content": "<p>Yes! The (p-1)(q-1)/2 is a fabulous obfuscation, as is (p^2-1)/8 for the case of (2/p)</p>",
        "id": 266300933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640733452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> would you mind PRing your <code>(-1)^n</code> stuff?</p>",
        "id": 266680827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641213194
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11204\">#11204</a></p>",
        "id": 266690323,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641219529
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 266690610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641219677
    }
]