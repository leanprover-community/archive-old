[
    {
        "content": "<p>I'm defining a <code>representation k A V (...) := A →ₐ[k] V →ₗ[k] V</code>, and I'm trying to define a <code>to_has_scalar</code>, so it would be convenient to write <code>a • v</code> and define a module structure. However, when I define an <code>instance to_has_scalar (r : representation k A V) : has_scalar A V</code>, subsequent use of the notation <code>a • v</code> results in the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">maximum</span> <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">depth</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"n\">limit</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">increased</span> <span class=\"kd\">by</span> <span class=\"n\">setting</span> <span class=\"n\">option</span>\n<span class=\"bp\">'</span><span class=\"kd\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">trace</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">visualized</span> <span class=\"kd\">by</span> <span class=\"n\">setting</span> <span class=\"n\">option</span>\n<span class=\"bp\">'</span><span class=\"n\">trace.class_instances'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 241695411,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622991202
    },
    {
        "content": "<p>What am I doing wrong?</p>",
        "id": 241695483,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622991337
    },
    {
        "content": "<p>Lean has no way to figure out <code>k</code></p>",
        "id": 241695786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622991790
    },
    {
        "content": "<p>Or for that matter <code>r</code></p>",
        "id": 241695793,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622991827
    },
    {
        "content": "<p><code>#lint</code> would probably tell you that</p>",
        "id": 241695804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622991839
    },
    {
        "content": "<p>You mean the <code>•</code> itself doesn't have enough info about <code>r</code> and <code>k</code>?</p>",
        "id": 241696146,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622992308
    }
]