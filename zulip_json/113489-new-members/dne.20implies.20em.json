[
    {
        "content": "<p>TPiL 3.5 suggests proving em (excluded middle) using dne (double-negation elimination).  I found this trickier than expected (as a Lean noob) and was wondering what tricks I'm missing. Below is my attempt. Some concrete questions include: Did I really need to define <code>demorgan_nor</code>? Do I need to use the inference symbol (<code>_</code>) so much? Is my attempt too long?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">demorgan_nor</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span> <span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">this</span> <span class=\"bp\">⟩</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">dne</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">this</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nnem</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">hpnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">demorgan_nor</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hnpp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">hpnp</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"o\">(</span><span class=\"n\">dne</span> <span class=\"bp\">_</span> <span class=\"n\">hpnp</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">),</span>\n<span class=\"n\">hnpp</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hnpp</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">em_alt</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">dne</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">nnem</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 178614962,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1571613654
    },
    {
        "content": "<p>you shouldn't use <code>classical</code> because that is the point, I think.</p>",
        "id": 178615355,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571614484
    },
    {
        "content": "<p>you don't need <code>_</code> if you make the variables implicit</p>",
        "id": 178615365,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571614538
    },
    {
        "content": "<blockquote>\n<p>you shouldn't use <code>classical</code> because that is the point, I think.</p>\n</blockquote>\n<p>I only used <code>classical</code> to prove <code>dne</code></p>",
        "id": 178615366,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1571614544
    },
    {
        "content": "<p>you should be able to prove <code>nnem</code> without dne or any classical stuff</p>",
        "id": 178615408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571614593
    },
    {
        "content": "<p>Spoilers:<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">axiom</span> <span class=\"n\">dne</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">em</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">dne</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hnp</span>\n</pre></div>",
        "id": 178615458,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571614695
    },
    {
        "content": "<blockquote>\n<p>you should be able to prove <code>nnem</code> without dne or any classical stuff</p>\n</blockquote>\n<p>Duh! Yes:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">nnem</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">hpnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">demorgan_nor</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">hpnp</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">hpnp</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n</pre></div>",
        "id": 178615467,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1571614765
    },
    {
        "content": "<p>Golfed version:<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">axiom</span> <span class=\"n\">dne</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">em</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">dne</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span>\n</pre></div>",
        "id": 178615468,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571614775
    },
    {
        "content": "<p>Thanks! So regarding  avoiding <code>_</code>s, is it generally preferable to write <code>variable {p : Prop}</code> rather than <code>variable p : Prop</code>? (Or if not when is one preferred over the other?)</p>",
        "id": 178615701,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1571615192
    },
    {
        "content": "<p>The braces mean \"let lean figure it out\", i.e. always put a <code>_</code> in that slot. The convention is to make the variable implicit if it can be deduced from the type of later assumptions (not counting the conclusion). So that means <code>dne</code> should have <code>p</code> implicit but <code>em</code> should have it explicit</p>",
        "id": 178615773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571615356
    }
]