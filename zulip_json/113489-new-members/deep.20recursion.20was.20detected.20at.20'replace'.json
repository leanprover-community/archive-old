[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"mi\">599976</span> <span class=\"bp\">=</span> <span class=\"mi\">39</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n\n<p>when i try to compile this i get an error saying \"deep recursion was detected at 'replace'. potential solution: increase stack space\". for other expressions of this form but with smaller numbers, it works fine. is this just, the numbers are too large to handle? any suggestion for what to do about it?</p>",
        "id": 212331185,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601919005
    },
    {
        "content": "<p>No, this should be fine. Somehow <code>ring</code> must be triggering kernel reduction on natural number arithmetic (cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">39</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"mi\">599976</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- deep recursion detected</span>\n</code></pre></div>",
        "id": 212331908,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601919367
    },
    {
        "content": "<p>It works if you make <code>c</code> an integer (or anything other than a nat pobably).</p>",
        "id": 212331963,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601919396
    },
    {
        "content": "<p>is there a way to jump from, statement x is true about the natural number c, to statement x is true in the integers about c</p>",
        "id": 212332403,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601919638
    },
    {
        "content": "<p>The <code>zify</code> tactic.</p>",
        "id": 212333536,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601920213
    },
    {
        "content": "<p>aha that's exactly what i wanted! thanks</p>",
        "id": 212334287,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601920637
    },
    {
        "content": "<p>hmm, I'm still getting these deep recursion errors sometimes with integers. for example, this line gets a deep recursion error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">153846</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 212342608,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601924487
    },
    {
        "content": "<p>But maybe you can help it with a little bit of rewriting, <code>le_trans</code> and <code>norm_num</code>?</p>",
        "id": 212343011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601924676
    },
    {
        "content": "<p>i'm trying, it's just a lot of rewriting. even this fails: <code>lemma helper (n : ℕ) (h : 1000000 ≤ n) : n ≥ 153846 := by linarith</code></p>",
        "id": 212343125,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601924745
    },
    {
        "content": "<p>First <code>rw h1</code> and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">\\</span><span class=\"n\">ge</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"bp\">...</span> <span class=\"bp\">\\</span><span class=\"n\">ge</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">h2</span>\n<span class=\"bp\">...</span> <span class=\"bp\">\\</span><span class=\"n\">ge</span> <span class=\"mi\">153846</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 212343331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601924852
    },
    {
        "content": "<p>you can prove <code>153846 \\le 10 ^ 6</code> by norm_num?</p>",
        "id": 212343607,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601924998
    },
    {
        "content": "<p>well, looks like that works. success</p>",
        "id": 212343738,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601925070
    },
    {
        "content": "<p>Wait, how is <code>ring</code> supposed to prove Rob's goal? It uses nat subtraction</p>",
        "id": 212347415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601927156
    },
    {
        "content": "<p>Oh, good point -- that makes this more curious.</p>",
        "id": 212347686,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601927308
    },
    {
        "content": "<p>Kevin's original goal doesn't use subtraction, so presumably <code>linarith</code> wouldn't have introduced it</p>",
        "id": 212348745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601927904
    },
    {
        "content": "<p>It would have, after zifying. I copied that goal from somewhere in the trace output but it should have had casts in it.</p>",
        "id": 212349041,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601928044
    },
    {
        "content": "<p>In the middle of something else, I'll look again in a bit</p>",
        "id": 212349062,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601928058
    },
    {
        "content": "<p>the simplest example of something that I expected to work but did not is: <code>example : 123456 &lt; 1000000 := by linarith</code></p>",
        "id": 212349784,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601928396
    },
    {
        "content": "<p><code>norm_num</code> does solve that</p>",
        "id": 212349795,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601928401
    },
    {
        "content": "<p>Huh.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">39</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">599976</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">id_rhs</span> <span class=\"o\">(</span><span class=\"mi\">39</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">599976</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"c1\">-- deep recursion</span>\n</code></pre></div>",
        "id": 212351028,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601929035
    },
    {
        "content": "<p>Who is doing that?</p>",
        "id": 212353241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601930141
    },
    {
        "content": "<p>I've learned the hard way that you can't rely on definitional unfolding like that going the way you want. If you need to do that unfolding you should apply a lemma that says so</p>",
        "id": 212353870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601930471
    },
    {
        "content": "<p>It's done in linarith, but even applying the lemma seems to cause the same error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">39</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">599976</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">int.add_one_le_iff.mpr</span> <span class=\"n\">h</span> <span class=\"c1\">-- deep recursion</span>\n</code></pre></div>",
        "id": 212354090,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601930583
    },
    {
        "content": "<p>There should be no unfolding at all there, or am I missing something?</p>",
        "id": 212354138,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601930612
    },
    {
        "content": "<p><code>attribute [irreducible] int.le</code> fixes it</p>",
        "id": 212354310,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601930702
    },
    {
        "content": "<p>Curiouser:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">iff.mpr</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">int.add_one_le_iff</span> <span class=\"o\">(</span><span class=\"mi\">39</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"mi\">599976</span><span class=\"o\">)</span> <span class=\"c1\">-- deep recursion</span>\n</code></pre></div>",
        "id": 212359684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601933600
    },
    {
        "content": "<p>we haven't even applied <code>h</code> yet</p>",
        "id": 212359705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601933611
    },
    {
        "content": "<p>This is fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">iff.mpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">int.add_one_le_iff</span> <span class=\"o\">(</span><span class=\"mi\">39</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"mi\">599976</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212359736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601933637
    },
    {
        "content": "<p>wait, what?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">h</span> <span class=\"c1\">-- deep recursion</span>\n</code></pre></div>",
        "id": 212360087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601933878
    },
    {
        "content": "<p>ah, crap, I know what this is</p>",
        "id": 212360578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601934207
    },
    {
        "content": "<p>I just remembered that <code>int.lt</code> is defined to be either <code>true</code> or <code>false</code> depending on the result of recursion</p>",
        "id": 212360605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601934237
    },
    {
        "content": "<p>which means that when you have something of type <code>int.lt something something</code>, it's not immediately obvious that this is even well typed, because it might evaluate to something other than a proposition</p>",
        "id": 212360710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601934313
    },
    {
        "content": "<p>Basically this is a term for which <code>infer_type</code> blows up</p>",
        "id": 212360955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601934489
    },
    {
        "content": "<p>No, that's not right. <code>infer_type</code> is fine but <code>to_expr</code> blows up</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span> <span class=\"n\">_</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5999</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"k\">do</span>\n  <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.local_context</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.infer_type</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_app</span> <span class=\"bp\">`</span><span class=\"n\">id</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">tactic.infer_type</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"c1\">-- boom</span>\n  <span class=\"n\">tactic.admit</span>\n</code></pre></div>",
        "id": 212361535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601934940
    },
    {
        "content": "<p>IIRC <code>linarith</code> uses a lot of pexpr quotations to construct its terms. Maybe it should switch to using <code>instance_cache.mk_app</code> like <code>ring</code> does?</p>",
        "id": 212361680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601935043
    },
    {
        "content": "<p>Arguably it should, but that seems like a heavy change for this weird issue. With Gabriel's type class caching improvements <code>linarith</code> doesn't spend a huge amount of time in type class search, and <code>instance_cache</code> is kind of an inconvenient workaround for things that should be faster natively.</p>",
        "id": 212408435,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601979958
    },
    {
        "content": "<p>I'm trying to make <code>int.le</code> irreducible, it's going alright so far.</p>",
        "id": 212408484,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601979977
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4474\">#4474</a></p>",
        "id": 212416458,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601985512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> returning to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">876544</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1000000</span> <span class=\"bp\">-</span> <span class=\"mi\">123456</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- deep recursion detected</span>\n</code></pre></div>\n\n<p>The problem is at type checking time. <code>ring</code> succeeds and produces a proof that <code>infer_type</code> thinks is right, but the kernel doesn't like it. Neither does <code>tactic.type_check</code>. The proof comes mostly from <code>norm_num</code> as you would expect, and using <code>norm_num</code> directly works fine, so I'm a little confused.</p>",
        "id": 212541868,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1602068226
    },
    {
        "content": "<p>Aha: If I use this to get the proof that was sent:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">9477</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">10000</span> <span class=\"bp\">-</span> <span class=\"mi\">523</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"k\">do</span>\n  <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_goals</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">ring</span><span class=\"o\">],</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">g</span>\n</code></pre></div>\n\n<p>and remove parts to get a MWE, I get this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">9477</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">10000</span> <span class=\"bp\">-</span> <span class=\"mi\">523</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">norm_num.subst_into_add</span> <span class=\"o\">(</span><span class=\"mi\">9477</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">10000</span> <span class=\"bp\">-</span> <span class=\"mi\">523</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">9477</span><span class=\"o\">)</span> <span class=\"mi\">9477</span> <span class=\"mi\">0</span>\n  <span class=\"n\">sorry</span>\n  <span class=\"o\">(</span><span class=\"n\">tactic.ring.unfold_sub</span> <span class=\"mi\">10000</span> <span class=\"mi\">523</span> <span class=\"mi\">9477</span>\n     <span class=\"n\">sorry</span><span class=\"o\">)</span>\n  <span class=\"n\">sorry</span>\n</code></pre></div>\n\n<p>Here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic.ring.unfold_sub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n</code></pre></div>\n\n<p>is used to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"mi\">10000</span> <span class=\"bp\">-</span> <span class=\"mi\">523</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">9477</span>\n</code></pre></div>",
        "id": 212543183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602069123
    },
    {
        "content": "<p>And sure enough, if I look at the <code>norm_num</code> proof there is a suspicious application of a theorem called</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">norm_num.int_sub_hack</span> <span class=\"mi\">10000</span> <span class=\"mi\">523</span> <span class=\"mi\">9477</span>\n              <span class=\"o\">(</span><span class=\"n\">norm_num.sub_pos</span> <span class=\"mi\">10000</span> <span class=\"mi\">523</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">523</span><span class=\"o\">)</span> <span class=\"mi\">9477</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">523</span><span class=\"o\">))</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- This is needed because when `a` and `b` are numerals lean is more likely to unfold them</span>\n<span class=\"sd\">than unfold the instances in order to prove that `add_group_has_sub = int.has_sub`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">int_sub_hack</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">has_sub.sub</span> <span class=\"n\">ℤ</span> <span class=\"n\">add_group_has_sub</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 212543362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602069249
    },
    {
        "content": "<p>That does look suspicious!</p>",
        "id": 212543605,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1602069435
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4503\">#4503</a></p>",
        "id": 212544071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602069779
    }
]