[
    {
        "content": "<p>I'm trying to get started with the different mathematical structures in mathlib. I'm at the very beginning and I can't figure out some probably very basic stuff. In the following example, I want to prove that the distance in an inner product space is convex. Mathematically, this should be straightforward from the axioms of the norm or the inner product and the definition of the distance in terms of it, but I can't figure out how to do it. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">θ</span> <span class=\"bp\">→</span> <span class=\"n\">θ</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span>\n<span class=\"n\">dist</span> <span class=\"n\">z</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">θ</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">z</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">θ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>More specifically, how do I move from <code>dist</code> to its concrete definition for normed or inner product spaces? And second, is this in mathlib?</p>",
        "id": 239963289,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1621788478
    },
    {
        "content": "<p>One lemma that's useful here is <code>dist_eq_norm</code>, which converts the <code>dist</code>s into <code>norm</code>s. With that, the rest follows from triangle inequality and some algebra. Whether the specific result you posted is in mathlib I'm not sure.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">θ</span> <span class=\"bp\">→</span> <span class=\"n\">θ</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span>\n<span class=\"n\">dist</span> <span class=\"n\">z</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">θ</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">z</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">θ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hθ₀</span> <span class=\"n\">hθ₁</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_eq_norm</span><span class=\"o\">,</span><span class=\"n\">dist_eq_norm</span><span class=\"o\">,</span><span class=\"n\">dist_eq_norm</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">θ</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">θ</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sub_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_add_eq_sub_sub</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">],</span> <span class=\"n\">abel</span> <span class=\"o\">},</span>\n  <span class=\"n\">convert</span> <span class=\"n\">norm_add_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_smul</span><span class=\"o\">,</span> <span class=\"n\">real.norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonneg</span><span class=\"o\">],</span> <span class=\"n\">linarith</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 239964250,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1621789377
    },
    {
        "content": "<p>Thank you for all details! <code>dist_eq_norm</code> is the lemma I was looking for</p>",
        "id": 239965932,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1621791039
    },
    {
        "content": "<p>I think your statement can maybe  be expressed somehow with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/segment\">docs#segment</a>?</p>",
        "id": 239970765,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621795906
    },
    {
        "content": "<p>The main entry point here should be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_on\">docs#convex_on</a></p>",
        "id": 239971743,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621796947
    },
    {
        "content": "<p>Thank you all for the suggestions</p>",
        "id": 240007753,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1621834027
    }
]