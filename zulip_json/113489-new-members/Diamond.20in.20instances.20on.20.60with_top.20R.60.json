[
    {
        "content": "<p>I'm hitting a diamond trying to define and use reasonable instances on <code>with_top R</code>. Can diamond/mul_action experts chime in possibly?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">concave_on'</span> <span class=\"n\">R</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">with_top.distrib_mul_action</span> <span class=\"n\">R</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_monoid</span> <span class=\"n\">R</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_semiring.to_ordered_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.add_monoid</span> <span class=\"n\">R</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"n\">R</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_semiring.to_ordered_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))))))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_monoid</span> <span class=\"n\">R</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_semiring.to_ordered_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_monoid.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.ordered_add_comm_monoid</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_ordered_cancel_add_comm_monoid</span> <span class=\"n\">R</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_semiring.to_ordered_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">))))))</span>\n</code></pre></div>",
        "id": 251236018,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630332978
    },
    {
        "content": "<p>I'll include a mwe in a minute.</p>",
        "id": 251236059,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630332993
    },
    {
        "content": "<p>On <a href=\"https://github.com/leanprover-community/mathlib/tree/pechersky/tropical-semiring\">branch#pechersky/tropical-semiring</a>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.tropical.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">with_top.smul_def</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">with_top.smul_coe</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">with_top.zero_smul</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">with_top.smul_zero</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">with_top.smul_top_of_ne_zero</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">if_neg</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hk</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">with_top.smul_def</span><span class=\"o\">],</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">with_top.smul_def</span><span class=\"o\">,</span> <span class=\"n\">with_top.coe_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span><span class=\"n\">with_top.has_scalar</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">r</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">with_top.rec_top_coe</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">with_top.smul_top_of_ne_zero</span> <span class=\"n\">hr</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"n\">using</span> <span class=\"n\">with_top.rec_top_coe</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">with_top.smul_top_of_ne_zero</span> <span class=\"n\">hr</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">with_top.coe_add</span><span class=\"o\">,</span> <span class=\"n\">with_top.smul_coe</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">with_top.coe_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">with_top.coe_mul</span><span class=\"o\">,</span> <span class=\"n\">with_top.coe_add</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">with_top.mul_action</span> <span class=\"n\">R</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">concave</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"n\">S</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">convex'</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">S</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span>\n  <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"sd\">/-- Concavity of functions -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">concave_on'</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">S</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">S</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">convex'</span> <span class=\"n\">S</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span>\n    <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">S</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">S</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">convex'_univ</span> <span class=\"o\">:</span> <span class=\"n\">convex'</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">concave</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">linear_ordered_semiring.to_linear_ordered_add_comm_monoid</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_add_comm_monoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">with_top.distrib_mul_action</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">polynomial.eval_tropical'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">tropical</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">concave_on_eval_tropical'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">tropical</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">concave_on'</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">with_top.distrib_mul_action</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">set.univ</span> <span class=\"n\">p.eval_tropical'</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 251236673,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630333209
    },
    {
        "content": "<p>Looking at the erro message only, it looks like there are two different add_comm_monoid structures on <code>with_top R</code>.</p>\n<p>What's <code>_inst_2</code> in that context?</p>",
        "id": 251237024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630333369
    },
    {
        "content": "<p><code>linear_ordered_semiring R</code></p>",
        "id": 251237484,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630333544
    },
    {
        "content": "<p>Reduced just a little bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fails</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.add_comm_monoid</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"n\">R</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_semiring</span> <span class=\"n\">R</span> <span class=\"n\">h</span><span class=\"o\">)))))</span>\n        <span class=\"bp\">=</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_monoid.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.ordered_add_comm_monoid</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_ordered_cancel_add_comm_monoid</span> <span class=\"n\">R</span>\n                   <span class=\"n\">h</span><span class=\"o\">))))</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 251241154,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1630335064
    },
    {
        "content": "<p>Is that on master?</p>",
        "id": 251241720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630335278
    },
    {
        "content": "<p>Perhaps the nsmul actions are not defeq?</p>",
        "id": 251241871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630335354
    },
    {
        "content": "<p>Yes, it's on master.</p>",
        "id": 251242700,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1630335693
    },
    {
        "content": "<p>The <code>nsmul</code> structures are the same:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">works</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.nsmul</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.add_comm_monoid</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"n\">R</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_semiring</span> <span class=\"n\">R</span> <span class=\"n\">h</span><span class=\"o\">)))))</span>\n        <span class=\"bp\">=</span>\n       <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.nsmul</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_monoid.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.ordered_add_comm_monoid</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_ordered_cancel_add_comm_monoid</span> <span class=\"n\">R</span>\n                   <span class=\"n\">h</span><span class=\"o\">))))</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>So are the <code>add</code> fields and the <code>zero</code> fields...</p>",
        "id": 251243703,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1630336077
    },
    {
        "content": "<p>But the <code>nsmul_zero'</code> is not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fails</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.nsmul_zero'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.add_comm_monoid</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"n\">R</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_semiring</span> <span class=\"n\">R</span> <span class=\"n\">h</span><span class=\"o\">)))))</span>\n        <span class=\"bp\">=</span>\n       <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.nsmul_zero'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_monoid.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.ordered_add_comm_monoid</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_ordered_cancel_add_comm_monoid</span> <span class=\"n\">R</span>\n                   <span class=\"n\">h</span><span class=\"o\">))))</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Since <code>nsmul_zero'</code> is <code>∀ x, nsmul 0 x = 0 . try_refl_tac</code>, this looks like our old problem with pi types, or <code>try_refl_tac</code> is confusing Lean somewhere.</p>",
        "id": 251244397,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1630336350
    },
    {
        "content": "<p>Do we need to have definitional equality of propositions to have defeq of structures?</p>",
        "id": 251244898,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630336537
    },
    {
        "content": "<p>Or is it that the <code>. try_refl_tac</code> is somehow preventing <code>proof_irrel</code> from firing?</p>",
        "id": 251244971,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630336564
    },
    {
        "content": "<p>This is a question for lean4 experts then as well -- would we hit this diamond in current lean4? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 251246501,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630337219
    },
    {
        "content": "<p>Unclear, can you make a smaller example?</p>",
        "id": 251246807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630337339
    },
    {
        "content": "<p>it sounds like a bug</p>",
        "id": 251246849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630337353
    },
    {
        "content": "<p>We have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"bp\">..@</span><span class=\"n\">additive.add_comm_monoid</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"bp\">@</span><span class=\"n\">comm_monoid_with_zero.to_comm_monoid</span> <span class=\"n\">_</span> <span class=\"bp\">$</span>\n    <span class=\"bp\">@</span><span class=\"n\">with_zero.comm_monoid_with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Maybe this issue has to do with the defeq abuse around using <code>with_zero</code>. Checking that.</p>",
        "id": 251247505,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630337573
    },
    {
        "content": "<p>a mathlib free example would be good</p>",
        "id": 251247897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630337705
    },
    {
        "content": "<p>Working on making that. In the meantime, I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">add_comm_monoid.nsmul_zero'</span> <span class=\"bp\">=</span> <span class=\"n\">add_comm_monoid.nsmul_zero'</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">add_comm_monoid.nsmul_zero'</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">auto_param</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n       <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.nsmul</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_monoid.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.ordered_add_comm_monoid</span> <span class=\"n\">R</span>\n                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid</span> <span class=\"n\">R</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_ordered_cancel_add_comm_monoid</span> <span class=\"n\">R</span> <span class=\"n\">h</span><span class=\"o\">))))</span>\n           <span class=\"mi\">0</span>\n           <span class=\"n\">x</span> <span class=\"bp\">=</span>\n         <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"try_refl_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">auto_param</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n       <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.nsmul</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.add_comm_monoid'</span> <span class=\"n\">R</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"n\">R</span>\n                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"n\">R</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_semiring</span> <span class=\"n\">R</span> <span class=\"n\">h</span><span class=\"o\">)))))</span>\n           <span class=\"mi\">0</span>\n           <span class=\"n\">x</span> <span class=\"bp\">=</span>\n         <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"try_refl_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 251248969,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630338106
    },
    {
        "content": "<p>Oh, I assumed from the message above that simply <code>rfl</code> could not prove the result, not that the statement was ill-formed</p>",
        "id": 251249207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630338200
    },
    {
        "content": "<p>This is from me trying to undo the definition of the algebraic instances from <code>additive (with_zero ...)</code> but manually.</p>",
        "id": 251249465,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630338304
    },
    {
        "content": "<p>Elaborating on Sebastien's post:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">with_irrel</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.nsmul_zero'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.add_comm_monoid</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"n\">R</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_semiring</span> <span class=\"n\">R</span> <span class=\"n\">h</span><span class=\"o\">)))))</span>\n        <span class=\"bp\">=</span>\n       <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.nsmul_zero'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_monoid.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.ordered_add_comm_monoid</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_ordered_cancel_add_comm_monoid</span> <span class=\"n\">R</span>\n                   <span class=\"n\">h</span><span class=\"o\">))))</span> <span class=\"o\">:=</span>\n<span class=\"n\">proof_irrel</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">with_rfl</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.nsmul_zero'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.add_comm_monoid</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"n\">R</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_semiring</span> <span class=\"n\">R</span> <span class=\"n\">h</span><span class=\"o\">)))))</span>\n        <span class=\"bp\">=</span>\n       <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.nsmul_zero'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_monoid.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.ordered_add_comm_monoid</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_ordered_cancel_add_comm_monoid</span> <span class=\"n\">R</span>\n                   <span class=\"n\">h</span><span class=\"o\">))))</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>  <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 251250268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630338689
    },
    {
        "content": "<p><code>(λ (h₁ h₂ : (_ : Prop)), show h₁ = h₂, from rfl) _ _</code> works as a proof too</p>",
        "id": 251252973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630339872
    },
    {
        "content": "<p>Yes, I think this is due to the (ab)use of defeq via with_zero:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">with_top.add_semigroup</span> <span class=\"n\">with_top.add_comm_semigroup</span> <span class=\"n\">with_top.add_monoid</span>\n  <span class=\"n\">with_top.add_comm_monoid</span> <span class=\"n\">with_top.ordered_add_comm_monoid</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">with_top.add_semigroup'</span> <span class=\"o\">[</span><span class=\"n\">add_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_semigroup</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">with_top.rec_top_coe</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">with_top.coe_add</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">with_top.rec_top_coe</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">with_top.coe_add</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">with_top.rec_top_coe</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">with_top.coe_add</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">with_top.has_add</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">with_top.add_comm_semigroup'</span> <span class=\"o\">[</span><span class=\"n\">add_comm_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_semigroup</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_comm</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">with_top.rec_top_coe</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">with_top.coe_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">],</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">with_top.rec_top_coe</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">with_top.coe_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">with_top.add_semigroup'</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">with_top.add_monoid'</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero_add</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">with_top.rec_top_coe</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">with_top.coe_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">with_top.coe_add</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">with_top.rec_top_coe</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">with_top.coe_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">with_top.coe_add</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">with_top.has_zero</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">with_top.add_semigroup'</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"n\">with_top.add_comm_monoid'</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">with_top.add_monoid'</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">with_top.add_comm_semigroup'</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">with_top.ordered_add_comm_monoid'</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ordered_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_le_add_left</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">with_top.none_eq_top</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">with_top.none_eq_top</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">with_top.le_coe_iff.1</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">with_top.some_eq_coe</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">with_top.coe_add</span><span class=\"o\">,</span> <span class=\"n\">with_top.coe_le_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">add_le_add_left</span> <span class=\"n\">h</span> <span class=\"n\">c</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">lt_of_add_lt_add_left</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">with_top.lt_iff_exists_coe.1</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">hlt</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">with_top.add_eq_coe.1</span> <span class=\"n\">hab</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">with_top.coe_lt_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">c</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">lt_of_add_lt_add_left</span> <span class=\"o\">(</span><span class=\"n\">with_top.coe_lt_coe.1</span> <span class=\"n\">hlt</span><span class=\"o\">)</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">with_top.partial_order</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">with_top.add_comm_monoid'</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">no_longer_fails</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.add_comm_monoid'</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"n\">R</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_semiring</span> <span class=\"n\">R</span> <span class=\"n\">h</span><span class=\"o\">)))))</span>\n        <span class=\"bp\">=</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_monoid.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.ordered_add_comm_monoid'</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_ordered_cancel_add_comm_monoid</span> <span class=\"n\">R</span>\n                   <span class=\"n\">h</span><span class=\"o\">))))</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 251255786,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630341175
    },
    {
        "content": "<p>Adding <code>attribute [semireducible] with_zero</code> to the mwe fixes it (<code>with_zero</code> is irreducible)</p>",
        "id": 251256607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630341573
    },
    {
        "content": "<p>So this is the <code>tensor_algebra.ring</code> problem resurfacing</p>",
        "id": 251256650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630341598
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8926\">#8926</a></p>",
        "id": 251256975,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630341744
    },
    {
        "content": "<p>Link for the <code>tensor_algebra.ring</code> issue tracker?</p>",
        "id": 251257019,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630341770
    },
    {
        "content": "<p>No issue, but we have these comments:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/blob/1e89df22bbce32e6f6fea2c95d6aa52dfadef012/src/algebra/free_algebra.lean#L287-L289\">https://github.com/leanprover-community/mathlib/blob/1e89df22bbce32e6f6fea2c95d6aa52dfadef012/src/algebra/free_algebra.lean#L287-L289</a></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/linear_algebra/tensor_algebra.lean#L106-L109\">https://github.com/leanprover-community/mathlib/blob/master/src/linear_algebra/tensor_algebra.lean#L106-L109</a></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/blob/1e89df22bbce32e6f6fea2c95d6aa52dfadef012/src/linear_algebra/exterior_algebra.lean#L140-L142\">https://github.com/leanprover-community/mathlib/blob/1e89df22bbce32e6f6fea2c95d6aa52dfadef012/src/linear_algebra/exterior_algebra.lean#L140-L142</a></li>\n</ul>\n<p>which link to <a href=\"#narrow/stream/113488-general/topic/algebra.2Esemiring_to_ring.20breaks.20semimodule.20typeclass.20lookup/near/212580241\">this Zulip thread</a></p>",
        "id": 251257274,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630341865
    }
]