[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">fsimp3</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">a</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fsimp4</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">e</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">fsimp3</span><span class=\"o\">,</span> <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>How do I get the \"rewrite fsimp3\" tactic to work in the \"fsimp4\" proof?</p>",
        "id": 130950190,
        "sender_full_name": "Ken Roe",
        "timestamp": 1533515798
    },
    {
        "content": "<p>Probably use <code>conv</code>. Do you want to post an MWE?</p>",
        "id": 130950208,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533515870
    },
    {
        "content": "<p>Go ahead and post</p>",
        "id": 130950318,
        "sender_full_name": "Ken Roe",
        "timestamp": 1533516007
    },
    {
        "content": "<p>No, I was suggesting that _you_ post a minimal example that shows the problem --- in particular you haven't included the definition of <code>f</code>!</p>",
        "id": 130950372,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533516138
    },
    {
        "content": "<p>I think <code>def f (x : ℕ) := x + 1</code> probably serves your purpose.</p>",
        "id": 130950374,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533516155
    },
    {
        "content": "<p><code>rw</code> does not work under a binder. You can either use <code>simp</code> instead, or use <code>conv</code> or <code>funext</code> to enter the binder</p>",
        "id": 130950425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533516279
    },
    {
        "content": "<p>For conv, see <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/conv.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/conv.md\">https://github.com/leanprover/mathlib/blob/master/docs/extras/conv.md</a></p>",
        "id": 130950432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533516311
    },
    {
        "content": "<p>Oops--Missed that def</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fsimp3</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">a</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fsimp4</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">e</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">fsimp3</span><span class=\"o\">,</span> <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 130950433,
        "sender_full_name": "Ken Roe",
        "timestamp": 1533516312
    },
    {
        "content": "<p>I'm pretty confused how you intend to do anything using <code>rw fsimp3</code>, even under the binder.</p>",
        "id": 130950482,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533516406
    },
    {
        "content": "<p>You've only got <code>e=0</code>, but now want to say something about all <code>x</code>?</p>",
        "id": 130950491,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533516447
    },
    {
        "content": "<p>It looks like conv fails:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">fsimp4</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">e</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">conv</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">to_lhs</span><span class=\"o\">,</span>\n        <span class=\"n\">funext</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">fsimp3</span><span class=\"o\">,</span> <span class=\"n\">reflexivity</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I get the error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">convert</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 130950780,
        "sender_full_name": "Ken Roe",
        "timestamp": 1533517009
    },
    {
        "content": "<p>That's because, as Scott pointed out, what you're trying to prove is not true</p>",
        "id": 130950786,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533517045
    },
    {
        "content": "<p>Actually, I found the error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">fsimp4</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">e</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">conv</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">to_lhs</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n        <span class=\"n\">funext</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">fsimp3</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">reflexivity</span>\n    <span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>However, the error I got is confusing.  The \"x=0\" got changed to \"x\" on the screen in the message.</p>",
        "id": 130950908,
        "sender_full_name": "Ken Roe",
        "timestamp": 1533517261
    },
    {
        "content": "<p>this proof attempt is not valid for the same reason as before. You can't try to prove the functions are equal because they aren't. You can only prove that the functions <em>evaluated at <code>e</code></em> are equal, so you need to do beta reduction first (using <code>dsimp</code>) and then try to prove it</p>",
        "id": 130951440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533518311
    }
]