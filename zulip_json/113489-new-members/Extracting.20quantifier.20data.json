[
    {
        "content": "<p>Hello! I am a new user and I am trying to understand how to obtain data from propositions like the following: </p>\n<p>def is_polynomial (f: ℤ → ℂ) : Prop := <br>\n  ∃ z : ℤ, (z &gt; 0 ) ∧ (∀ j : ℤ, z ≤ |j| → f j = 0)</p>\n<p>I want to be able to define a function which uses the z given by an assumption hf : is_polynomial f  for some f: Z -&gt; C but I am not sure how to obtain the z given by the proposition hf : is_polynomial f. Is there an easy way to obtain the values given by an existential quantifier from a proposition? </p>\n<p>Thank you!</p>",
        "id": 299751112,
        "sender_full_name": "THEODORE GONZALES",
        "timestamp": 1663681118
    },
    {
        "content": "<p>Can you write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of what you're trying to do?</p>",
        "id": 299751468,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663681253
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.some\">docs#classical.some</a> is the standard way to \"extract\" data from an existential, using choice.<br>\nYou can then use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.some_spec\">docs#classical.some_spec</a> to have a proof that the extracted value satisfies the inner part of the existential</p>",
        "id": 299751539,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663681281
    },
    {
        "content": "<p>You can also use the tactic <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#obtain\">obtain</a></p>",
        "id": 299751791,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663681366
    },
    {
        "content": "<p>import data.real.basic<br>\nimport data.complex.basic</p>\n<p>def is_polynomial (f: ℤ → ℂ) : Prop := <br>\n  ∃ z : ℤ, (z &gt; 0 ) ∧ (∀ j : ℤ, z ≤ |j| → f j = 0)</p>\n<p>def fin_sup_poly := λ (f: ℤ → ℂ) (hf : is_polynomial f), <br>\n    \"here I want to use the value z given by hf\"</p>",
        "id": 299751823,
        "sender_full_name": "THEODORE GONZALES",
        "timestamp": 1663681376
    },
    {
        "content": "<p>Ah okay I will have to read up on these tactics. Thank you.</p>",
        "id": 299752646,
        "sender_full_name": "THEODORE GONZALES",
        "timestamp": 1663681596
    },
    {
        "content": "<p>You should also read <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 299752850,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663681654
    },
    {
        "content": "<p>Ah okay will do thank you.</p>",
        "id": 299752914,
        "sender_full_name": "THEODORE GONZALES",
        "timestamp": 1663681678
    },
    {
        "content": "<p>No problem, everybody needs to go through those stages of learning!</p>",
        "id": 299753213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663681778
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/expand_exists.html\">https://leanprover-community.github.io/mathlib_docs/tactic/expand_exists.html</a> now the recommended way to do such things?<br>\nBy the way, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/laurent_polynomial\">docs#laurent_polynomial</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp\">docs#finsupp</a> already exists.</p>",
        "id": 299783228,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663686364
    },
    {
        "content": "<p>Ah I figured someone had already done this. Do y'all know if anyone has done Vertex Operator Algebras quite yet ?</p>",
        "id": 299797175,
        "sender_full_name": "THEODORE GONZALES",
        "timestamp": 1663690318
    },
    {
        "content": "<p>I think vertex operator algebras are still not there but you'll have to wait for someone else to tell you how far away they are.</p>",
        "id": 299797772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663690465
    },
    {
        "content": "<p>I am currently taking a course on VOA's and was hoping to formalize props in it in lean while in the course, but I guess I should probably know how to use lean first lol</p>",
        "id": 299798709,
        "sender_full_name": "THEODORE GONZALES",
        "timestamp": 1663690709
    },
    {
        "content": "<p>To be honest a great way to learn Lean is to actually try to do stuff in Lean and ask here if you get stuck (although you might want to start a new topic, right now we're apparently still talking about extracting quantifier data).</p>",
        "id": 299802340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663691896
    },
    {
        "content": "<p>Yeah ill just try to do whatever I can and hopefully that will teach me how to use lean haha</p>",
        "id": 299803156,
        "sender_full_name": "THEODORE GONZALES",
        "timestamp": 1663692192
    },
    {
        "content": "<p>that's what I said 5 years ago</p>",
        "id": 299804513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663692646
    }
]