[
    {
        "content": "<p>The following is true, right? I am a little bit lost since the lattice structure of <code>subalgebra R A</code> is done via Galois insertions, and I am not very familiar with them...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.subalgebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊓</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 240936901,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622552192
    },
    {
        "content": "<p>Yes it's true :-)</p>",
        "id": 240936941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622552215
    },
    {
        "content": "<p>I mean, for me <code>⊓</code> <em>is</em> the intersection (and for example for all other structures I checked it is defined this way). But for subalgebras everything is defined differently. For example we have explicitly  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subring.has_Inf\">docs#subring.has_Inf</a>, but not for <code>subalgebra</code> (<code>apply_instance</code> find it, essentially going through  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.subalgebra.complete_lattice\">docs#algebra.subalgebra.complete_lattice</a> that uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.gi\">docs#algebra.gi</a>).</p>",
        "id": 240937406,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622552457
    },
    {
        "content": "<p>Yes, so the question becomes how <code>galois_insertion.lift_complete_lattice</code> makes the <code>inf</code>.</p>",
        "id": 240937870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622552641
    },
    {
        "content": "<p>I think this is the definition being used:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lift_semilattice_inf</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"n\">galois_insertion</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_inf</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">gi.choice</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">u</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n    <span class=\"o\">(</span><span class=\"n\">le_inf</span> <span class=\"o\">(</span><span class=\"n\">gi.gc.monotone_u</span> <span class=\"bp\">$</span> <span class=\"n\">gi.gc.l_le</span> <span class=\"bp\">$</span> <span class=\"n\">inf_le_left</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">gi.gc.monotone_u</span> <span class=\"bp\">$</span> <span class=\"n\">gi.gc.l_le</span> <span class=\"bp\">$</span> <span class=\"n\">inf_le_right</span><span class=\"o\">)),</span>\n</code></pre></div>",
        "id": 240938052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622552711
    },
    {
        "content": "<p>I think it's easier just to redefine inf as the inter and use the axioms :-(</p>",
        "id": 240940449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622553755
    },
    {
        "content": "<p>Unless you can figure out exactly what <code>S ⊓ T : set A</code> is</p>",
        "id": 240940530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622553794
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.subalgebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊓</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">∩</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">hxS</span><span class=\"o\">,</span> <span class=\"n\">hxT</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">hyS</span><span class=\"o\">,</span> <span class=\"n\">hyT</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">S.add_mem'</span> <span class=\"n\">hxS</span> <span class=\"n\">hyS</span><span class=\"o\">,</span> <span class=\"n\">T.add_mem'</span> <span class=\"n\">hxT</span> <span class=\"n\">hyT</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">hxS</span><span class=\"o\">,</span> <span class=\"n\">hxT</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">hyS</span><span class=\"o\">,</span> <span class=\"n\">hyT</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">S.mul_mem'</span> <span class=\"n\">hxS</span> <span class=\"n\">hyS</span><span class=\"o\">,</span> <span class=\"n\">T.mul_mem'</span> <span class=\"n\">hxT</span> <span class=\"n\">hyT</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">algebra_map_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">S.algebra_map_mem'</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">T.algebra_map_mem'</span> <span class=\"n\">r</span><span class=\"o\">⟩</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊓</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨(</span><span class=\"n\">inf_le_left</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊓</span> <span class=\"n\">T</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">inf_le_right</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊓</span> <span class=\"n\">T</span> <span class=\"bp\">≤</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_inf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>bleurgh</p>",
        "id": 240941610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622554271
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.subalgebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">S</span> <span class=\"bp\">⊓</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 240944100,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622555265
    },
    {
        "content": "<p>I am a little bit confused, but if you look at the infoview of your lemma, at the very beginning, it says <code>↑S ⊓ ↑T = ↑S ∩ ↑T</code>. And indeed <code>refl</code> proves it.</p>",
        "id": 240944750,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622555571
    },
    {
        "content": "<p>In my lemma it says <code>↑(S ⊓ T) = ↑S ∩ ↑T</code></p>",
        "id": 240944804,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622555589
    },
    {
        "content": "<p>For some reasons when you say <code>(S ⊓ T) : set A</code> Lean understand <code>↑S ⊓ ↑T</code>, so it is obvious.</p>",
        "id": 240944920,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622555636
    },
    {
        "content": "<p>The issue is type ascription working outside-in; lean thinks you want the ⊓ that produces a <code>set A</code>, which is one that takes two <code>set A</code>'s</p>",
        "id": 240945002,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1622555660
    },
    {
        "content": "<p>You're right, apologies.</p>",
        "id": 240945223,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622555758
    },
    {
        "content": "<p>Too bad :)</p>",
        "id": 240945274,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1622555770
    },
    {
        "content": "<p>Don't worry, I quickly realized it because I did the same mistake :D</p>",
        "id": 240945317,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622555792
    },
    {
        "content": "<p>OK, this should work and it's less disgusting (the first two lemms should go there anyway).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.adjoin.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">adjoin_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">adjoin</span> <span class=\"n\">R</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">adjoin_le</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"n\">h₂</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">adjoin_eq</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">R</span> <span class=\"bp\">↑</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">adjoin_eq_of_le</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">set.subset.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">subset_adjoin</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_inf</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊓</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hx</span> <span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inf_le_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">set_like.mem_coe.1</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inf_le_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">set_like.mem_coe.1</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">subset_adjoin</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"n\">T</span><span class=\"o\">),</span>\n    <span class=\"n\">replace</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">S</span> <span class=\"bp\">⊓</span> <span class=\"bp\">↑</span><span class=\"n\">T</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">galois_insertion.l_inf_u</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.gi</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 240950506,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622557877
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.adjoin.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_inf</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊓</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">galois_insertion.l_inf_u</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.gi</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">algebra.subset_adjoin</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 240952151,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622558564
    },
    {
        "content": "<p>Nice!!</p>",
        "id": 240952443,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622558688
    },
    {
        "content": "<p>I try to avoid <code>change</code>, because it can hide expensive <code>refl</code>s. If the underlying definitions change, then <code>change</code> can easily break or become much slower.</p>",
        "id": 240952755,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622558811
    },
    {
        "content": "<p>Instead, doing the appropriate <code>rw</code> will always work</p>",
        "id": 240953004,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622558914
    },
    {
        "content": "<p>It seems to me that it might still be worth redefining <code>inf</code> as the version defeq to set intersection</p>",
        "id": 240981624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622570977
    },
    {
        "content": "<p>Especially since we do it everwhere else</p>",
        "id": 240981646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622570989
    },
    {
        "content": "<p>I think this is the canonical problem with this clever \"make subwidgets into a complete lattice by using the Galois insertion into <code>set</code>\" approach -- <code>Sup</code> is defined to be \"intersection of subwidgets containing your given subwidget\" but somehow everything else ends up out of control.</p>",
        "id": 240984872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622572356
    },
    {
        "content": "<p>I will try to do this. I agree that it's not clear which one is the better approach... in any case not <em>everything</em> is the same for (say) submodules and subalgebras: for example  <code>⊥.prod ⊥ = ⊥</code> is trivially true for submodules but false for subalgebras.</p>",
        "id": 241070261,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622579058
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7812\">#7812</a> makes <code>foo</code> (aka <code>coe_inf</code>) true by rfl</p>",
        "id": 241419925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622739531
    }
]