[
    {
        "content": "<p>Hola amigos. I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">remove_leading_zeros</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">remove_leading_zeros</span> <span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span>\n</code></pre></div>\n\n<p>This function is supposed to take a <code>list α</code> and remove all the leading zeros, and if the list is all zeros then return <code>[0]</code>. However, I get a red squiggle under the <code>if</code> saying \"failed to synthesize type class instance for\" <code>decidable (h = 0)</code>. I tried adding <code>[decidable eq α α]</code> to the def but no luck. Is there something I can add to get this to work? I only really want it for when <code>α</code> is the integers or rationals.</p>",
        "id": 212152952,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601699769
    },
    {
        "content": "<p>Do you care about computability?</p>",
        "id": 212153067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601700024
    },
    {
        "content": "<p>Aah, you probably do</p>",
        "id": 212153070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601700042
    },
    {
        "content": "<p>I think it should be <code>[decidable_eq \\a]</code></p>",
        "id": 212153075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601700059
    },
    {
        "content": "<p>Ah, gracias amigo.</p>",
        "id": 212153134,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601700197
    },
    {
        "content": "<p>Is Lean particularly bad for computability? It seems to me that it'd be possible to build a CAS on top of mathlib one day.</p>",
        "id": 212153178,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601700278
    },
    {
        "content": "<p>it's okay</p>",
        "id": 212153179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601700289
    },
    {
        "content": "<p>the reason Johan asks is because the optimal implementation for mathematics is usually not the optimal implementation for computing with</p>",
        "id": 212153234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601700377
    },
    {
        "content": "<p>I see. Lean is fun though IMO. What's the point of computing things if you're not enjoying yourself?</p>",
        "id": 212153290,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601700527
    },
    {
        "content": "<p>Right, if you just wanted to prove some properties... the put <code>open_locale classical</code> at the top of your file. But if you want lean to compute something, then put <code>variables [decidable_eq foobar]</code> at the top of your file.</p>",
        "id": 212153396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601700816
    },
    {
        "content": "<p>Now I have something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">q</span>\n</code></pre></div>\n\n<p>I get a red squiggle under the equals in the first equation with the error \"invalid function application in pattern, it cannot be reduced to a constructor (possible solution, mark term as inaccessible using '.( )')     0\".  I don't understand what this means. Is there again something I can add to get this to work?</p>",
        "id": 212160406,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601713525
    },
    {
        "content": "<p>You are treating <code>\\a</code> as an inductive type, but it isn't</p>",
        "id": 212160467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601713605
    },
    {
        "content": "<p>Oh</p>",
        "id": 212160481,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601713633
    },
    {
        "content": "<p>Probably you want to something like <code>if q = 0 then p else q</code></p>",
        "id": 212160487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601713649
    },
    {
        "content": "<p>And just use a normal lambda term, or put <code>p</code> and <code>q</code> left of the <code>:</code> in the statement</p>",
        "id": 212160502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601713672
    },
    {
        "content": "<p>Ok, what if I want something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">test</span> <span class=\"n\">q</span>\n</code></pre></div>\n\n<p>If I try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">test</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n<p>I get \"unknown identifier 'test'\". Is something like this possible?</p>",
        "id": 212160664,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601713885
    },
    {
        "content": "<p>Well, did you define <code>test</code>?</p>",
        "id": 212160802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601714142
    },
    {
        "content": "<p>Yeah, test can't see itself. I have a solution I'm happy with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"n\">test</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n</code></pre></div>\n\n<p>This compiles.</p>",
        "id": 212160854,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601714208
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 212160873,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601714247
    },
    {
        "content": "<p>Ok, if you're happy, that's fine (-;</p>",
        "id": 212160875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601714256
    },
    {
        "content": "<p>Sorry, I didn't realise you were trying to define <code>test</code> recursively</p>",
        "id": 212160878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601714275
    },
    {
        "content": "<p>But what is your new definition doing...</p>",
        "id": 212160921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601714308
    },
    {
        "content": "<p>If you call it with <code>n &gt; 0</code>, then it will test if <code>q</code> is zero. If it isn't, then it will run the same test again for <code>n - 1</code>, until you reach <code>n = 0</code> and just return <code>p</code> anyways.</p>",
        "id": 212160934,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601714362
    },
    {
        "content": "<p>So I don't see what the recursion brings you</p>",
        "id": 212160935,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601714373
    },
    {
        "content": "<p>Basically, you are just always returning <code>p</code></p>",
        "id": 212160939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601714390
    }
]