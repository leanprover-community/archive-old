[
    {
        "content": "<p>I am trying to introduce a new variable and its definition in tactic mode in a proof,  for example  if c:M is already in the environment then</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>(which is wrong);   it's wrong because it doesn't mention any hypothesis.   After the correct line of code, which I want to know,<br>\nI should see</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n</code></pre></div>\n\n\n<p>in my environment.  I don't find an example of how to do this.</p>",
        "id": 209573564,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599688555
    },
    {
        "content": "<p><code>set f : M := c with h,</code></p>",
        "id": 209573658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599688603
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 209573680,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599688621
    },
    {
        "content": "<p>Note that after <code>let f : M := c,</code>, <code>f = c</code> is true by definition (so it can be proved with <code>refl</code>).</p>",
        "id": 209573707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599688636
    },
    {
        "content": "<p>That command is nowhere mentioned in the Lean Reference Manual Release 3.3.0, by the way.</p>",
        "id": 209573934,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599688777
    },
    {
        "content": "<p>I tried  a let command and then my environment contains f:M  but I don't have a way to rewrite f as c.   I guess set will do what I want.</p>",
        "id": 209574160,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599688915
    },
    {
        "content": "<p><code>set</code>? Oh -- it might be a mathlib tactic. Mathlib is nowhere mentioned in the Lean Reference Manual</p>",
        "id": 209574203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599688923
    },
    {
        "content": "<p>If you use <code>let</code> then <code>f = c</code> is true by definition so you can change between f's and c's using the <code>change</code> tactic.</p>",
        "id": 209574233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599688953
    },
    {
        "content": "<p>Is there a document that I can read,  of the same level of detail as the Lean Reference Manual,  that does describe mathlib and all its useful tactics?</p>",
        "id": 209574305,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599689013
    },
    {
        "content": "<p>It's nice of you to explain set and change and let to me here,  but it's surely not the most efficient use of your time.</p>",
        "id": 209574393,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599689060
    },
    {
        "content": "<p>Not really. Mathlib is too new. When I was learning Lean I used to occasionally look through the 2018/19 analogue of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">this page which lists all mathlib tactics</a>.</p>",
        "id": 209574425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599689088
    },
    {
        "content": "<p>OK,  well then, thanks for that link and for your time and energy and especially quick response here on Zulip.</p>",
        "id": 209574473,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599689127
    }
]