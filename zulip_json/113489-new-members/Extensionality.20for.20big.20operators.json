[
    {
        "content": "<p>So I'm in a situation where I want to prove that two sums are equal, knowing that for each index, the summands are equal. Like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Seems like a pretty trivial task, however I can't seem to find the right lemma to prove this... Initially this felt like some kind of extensionality lemma, but<code>ext</code> gives the error message: <code>only constants and Pi types are supported: β</code>. Using <code>congr</code> makes progress, but it would require me to prove <code>f x = g x</code> for <em>all</em> values <code>x : α</code>, but I only know it for elements of <code>s</code>.</p>\n<p>I've been stuck here for quite some time now, any help is much appreciated!</p>",
        "id": 235874561,
        "sender_full_name": "Justus Springer",
        "timestamp": 1619197285
    },
    {
        "content": "<p><code>finset.sum_congr rfl h</code></p>",
        "id": 235875104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619197477
    },
    {
        "content": "<p>Johan is wrong, he wanted to write <code>library_search</code>.</p>",
        "id": 235875267,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619197546
    },
    {
        "content": "<p>That's really important to know.</p>",
        "id": 235875349,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619197565
    },
    {
        "content": "<p>I'm amazed that I didn't find this!<br>\nThanks</p>",
        "id": 235882504,
        "sender_full_name": "Justus Springer",
        "timestamp": 1619200474
    },
    {
        "content": "<p>Or congr' 1</p>",
        "id": 235882535,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619200487
    },
    {
        "content": "<p>To prevent congr from doing too much</p>",
        "id": 235882581,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619200503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Extensionality.20for.20big.20operators/near/235882535\">said</a>:</p>\n<blockquote>\n<p>Or congr' 1</p>\n</blockquote>\n<p>That one doesn't work for me, it produces the goal <code>(λ (x : α), f x) = λ (x : α), g x</code></p>",
        "id": 235882953,
        "sender_full_name": "Justus Springer",
        "timestamp": 1619200668
    },
    {
        "content": "<p>I only know <code>f x = g x</code> for <code>x ∈ s</code></p>",
        "id": 235883033,
        "sender_full_name": "Justus Springer",
        "timestamp": 1619200688
    },
    {
        "content": "<p>Then apologies for being misleading</p>",
        "id": 235883059,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619200696
    },
    {
        "content": "<p>No problem :)</p>",
        "id": 235883143,
        "sender_full_name": "Justus Springer",
        "timestamp": 1619200734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"384542\">Justus Springer</span> <a href=\"#narrow/stream/113489-new-members/topic/Extensionality.20for.20big.20operators/near/235882504\">said</a>:</p>\n<blockquote>\n<p>I'm amazed that I didn't find this!<br>\nThanks</p>\n</blockquote>\n<p><code>library_search</code> is really a fundamental tactic, especially after you made the effort of stating a clean general lemma as you did.</p>",
        "id": 235883242,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619200780
    },
    {
        "content": "<p><code>finset.sum_congr rfl</code> is such a common idiom, and it's really hard to find: it's like one of those secrets which gets passed around. It took me a while to understand what a <code>congr</code> lemma was, but once I'd got the hang of it it really started opening doors for me, e.g. I could guess what the logic lemmas <code>and_congr</code> and <code>forall_congr</code> were going to say and use them without having to trouble <code>library_search</code>.</p>",
        "id": 235883698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619200929
    },
    {
        "content": "<p>The nice thing about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsum\">docs#finsum</a> is <code>congr</code> just works!</p>",
        "id": 235885800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619201805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Extensionality.20for.20big.20operators/near/235883242\">said</a>:</p>\n<blockquote>\n<p><code>library_search</code> is really a fundamental tactic, especially after you made the effort of stating a clean general lemma as you did.</p>\n</blockquote>\n<p>Good tip! Extracting the general statement I'm looking for and then throwing <code>library_search</code> at it seems like a great strategy</p>",
        "id": 235891723,
        "sender_full_name": "Justus Springer",
        "timestamp": 1619204274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Extensionality.20for.20big.20operators/near/235883698\">said</a>:</p>\n<blockquote>\n<p><code>finset.sum_congr rfl</code> is such a common idiom, and it's really hard to find: it's like one of those secrets which gets passed around. It took me a while to understand what a <code>congr</code> lemma was, but once I'd got the hang of it it really started opening doors for me, e.g. I could guess what the logic lemmas <code>and_congr</code> and <code>forall_congr</code> were going to say and use them without having to trouble <code>library_search</code>.</p>\n</blockquote>\n<p>I guess haven't internalized yet what a <code>congr</code> lemma is, I was thinking <code>ext</code> for some reason</p>",
        "id": 235891909,
        "sender_full_name": "Justus Springer",
        "timestamp": 1619204364
    },
    {
        "content": "<p><code>ext</code> gets you from <code>\\forall x, f x = g x</code> to <code>f = g</code>. But <code>congr</code> gets you from <code>\\forall x, f x = g x</code> to [some stuff I make with some <code>f x</code> values] = [some stuff I make with some <code>g x</code> values].</p>",
        "id": 235894310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619205386
    },
    {
        "content": "<p>Where \"from X to Y\" there means \"your goal was Y and is now X\"</p>",
        "id": 235895097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619205725
    },
    {
        "content": "<p><code>congr</code> turns <code>foo x1 y1 = foo x2 y2</code> into two goals, <code>x1 = x2</code> and <code>y1 = y2</code></p>",
        "id": 235895266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619205811
    },
    {
        "content": "<p>We mathematicians go forwards :-)</p>",
        "id": 235899961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619207880
    },
    {
        "content": "<p>There's also the little used <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_congr\">tactic#apply_congr</a>, which was designed for rewriting inside big operators when you need the membership hypothesis.</p>",
        "id": 235924692,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619221809
    }
]