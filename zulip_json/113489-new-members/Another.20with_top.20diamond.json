[
    {
        "content": "<p>For the mathlib sleuths:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.bounded_lattice</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LHS</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_inf</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">lattice.to_semilattice_inf</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">lattice_of_linear_order</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">with_top.linear_order</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">RHS</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_inf</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">semilattice_inf_top.to_semilattice_inf</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">with_top.semilattice_inf</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">LHS</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">RHS</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span> <span class=\"c1\">-- nope</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 251631914,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630531503
    },
    {
        "content": "<p>In particular, it seems like a lower priority instance is appearing when it shouldn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.convex.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tropical</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[pp_nodot]</span> <span class=\"kd\">def</span> <span class=\"n\">trop</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">tropical</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"kd\">@[pp_nodot]</span> <span class=\"kd\">def</span> <span class=\"n\">untrop</span> <span class=\"o\">:</span> <span class=\"n\">tropical</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">add</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">tropical</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tropical</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">trop</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">untrop</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">untrop</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">add_inst</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_semigroup</span> <span class=\"o\">(</span><span class=\"n\">tropical</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">untrop_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">tropical</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">untrop</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">untrop</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">untrop</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">add</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_monoid_with_top</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">tropical</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">trop</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">trop</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">trop</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">add_inst</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">shortcut</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_add_comm_monoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">infer_instance</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">polynomial.eval_tropical_aux</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">tropical</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tropical</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">trop</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">polynomial.eval_tropical'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">tropical</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">with_top</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">untrop</span> <span class=\"o\">(</span><span class=\"n\">p.eval_tropical_aux</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eval_tropical'_add</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">tropical</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval_tropical'</span> <span class=\"bp\">=</span> <span class=\"n\">p.eval_tropical'</span> <span class=\"bp\">⊓</span> <span class=\"n\">q.eval_tropical'</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">polynomial.eval_tropical'</span><span class=\"o\">,</span> <span class=\"n\">untrop_add</span><span class=\"o\">,</span>\n  <span class=\"n\">inf_apply</span><span class=\"o\">,</span> <span class=\"n\">untrop_add</span><span class=\"o\">,</span> <span class=\"n\">eval_add</span><span class=\"o\">,</span> <span class=\"n\">polynomial.eval_tropical_aux</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- why is this necessary, where is the lower-prio instance coming from</span>\n  <span class=\"n\">convert</span> <span class=\"n\">inf_eq_min.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">semilattice_inf.ext</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 251640891,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630536574
    },
    {
        "content": "<p>Does making with_top semireducible fix this one?</p>",
        "id": 251664302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630556719
    },
    {
        "content": "<p>No, there are truly incompatible <code>inf</code> definitions as far as I understand. I just don't know why in my bigger example, it is choosing to use the lower prio instance.</p>",
        "id": 251666931,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630559514
    },
    {
        "content": "<p>Of course one can get past this by using <code>semilattice_inf.ext</code>, and in another case, doing <code>attribute [ext] has_inf</code> and doing a </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">lattice.ext</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span>\n</code></pre></div>\n<p>but I still don't know why it's using the other instance.</p>",
        "id": 251667036,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630559622
    },
    {
        "content": "<p>Instance priority isn't an appropriate tool for diamonds, because the instance that ends up in an expression varies according to the way in which intermediate definitions weaken stronger typeclasses</p>",
        "id": 251667157,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630559723
    },
    {
        "content": "<p>What are the conflicting inf definitions?</p>",
        "id": 251667244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630559776
    },
    {
        "content": "<p>You can probably find out by applying <code>@semilattice_inf.inf _</code> to either side of your original mwe, and then using dsimp with some steering</p>",
        "id": 251667315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630559864
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">semilattice_inf</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_inf_top</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inf</span>          <span class=\"o\">:=</span> <span class=\"n\">option.lift_or_get</span> <span class=\"o\">(</span><span class=\"bp\">⊓</span><span class=\"o\">),</span>\n  <span class=\"n\">inf_le_left</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">ha</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">o₂</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">option.lift_or_get</span><span class=\"o\">],</span>\n  <span class=\"n\">inf_le_right</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">ha</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">o₁</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">option.lift_or_get</span><span class=\"o\">],</span>\n  <span class=\"n\">le_inf</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"n\">o₃</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">o₂</span> <span class=\"k\">with</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">o₃</span> <span class=\"k\">with</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">h₁</span> <span class=\"n\">b</span> <span class=\"n\">rfl</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩,</span> <span class=\"n\">h₁'</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">le_inf</span> <span class=\"n\">h₁'</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">with_top.order_top</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[priority 100]</span> <span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">lattice_of_linear_order</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">lattice</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sup</span>          <span class=\"o\">:=</span> <span class=\"n\">max</span><span class=\"o\">,</span>\n  <span class=\"n\">le_sup_left</span>  <span class=\"o\">:=</span> <span class=\"n\">le_max_left</span><span class=\"o\">,</span>\n  <span class=\"n\">le_sup_right</span> <span class=\"o\">:=</span> <span class=\"n\">le_max_right</span><span class=\"o\">,</span>\n  <span class=\"n\">sup_le</span>       <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">max_le</span><span class=\"o\">,</span>\n\n  <span class=\"n\">inf</span>          <span class=\"o\">:=</span> <span class=\"n\">min</span><span class=\"o\">,</span>\n  <span class=\"n\">inf_le_left</span>  <span class=\"o\">:=</span> <span class=\"n\">min_le_left</span><span class=\"o\">,</span>\n  <span class=\"n\">inf_le_right</span> <span class=\"o\">:=</span> <span class=\"n\">min_le_right</span><span class=\"o\">,</span>\n  <span class=\"n\">le_inf</span>       <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">le_min</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">o</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 251667326,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630559875
    },
    {
        "content": "<p>where the <code>le</code> that is used for <code>min</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span>          <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">o₂</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">o₁</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">lt</span>          <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">),</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n                           <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">&lt;</span><span class=\"o\">),(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"n\">le_refl</span>     <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">o</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">le_trans</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"n\">o₃</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">bc</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ab</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"k\">in</span>\n    <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">ab</span> <span class=\"n\">bc</span><span class=\"o\">⟩,</span>\n <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 251667385,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630559922
    },
    {
        "content": "<p>Can you do the dsimp I suggest and see what things unfold to?</p>",
        "id": 251667406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630559952
    },
    {
        "content": "<p>I'm pretty sure <code>lattice_of_linear_order</code> is to blame here, and the resolution would be to make sup and inf fields of linear_order</p>",
        "id": 251667494,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630560043
    },
    {
        "content": "<p>There might already be a PR about that instance</p>",
        "id": 251667510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630560064
    },
    {
        "content": "<p>Sorry, I won't be able to get to running the experiment for several hours.</p>",
        "id": 251667532,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630560090
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/609\">lean#609</a> fixed this diamond, we just need to wait for a lean release.</p>",
        "id": 251691270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630576442
    },
    {
        "content": "<p>I've got some light work on this in <a href=\"https://github.com/leanprover-community/mathlib/tree/max-min-fix\">branch#max-min-fix</a>, but currently as there's no release you'll need to build locally to work on it</p>",
        "id": 251782198,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630614875
    }
]