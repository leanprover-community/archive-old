[
    {
        "content": "<p>In the following script I get the error \"linarith failed to find a contradiction\" even though <code>k1</code> asserts that the same thing times 2 is positive. I don't understand what is going on.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">k1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.one_div_pos_of_nat</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">k2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 253312821,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1631649040
    },
    {
        "content": "<p><code>linarith</code> doesn't know about multiplication.</p>",
        "id": 253313092,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631649140
    },
    {
        "content": "<p>I would have expected <code>nlinarith</code> to solve this, but it doesn't <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>. Just <code>apply mul_pos</code>, I guess.</p>",
        "id": 253313239,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631649188
    },
    {
        "content": "<p>But this works just fine. So <code>linarith</code> must know about multiplication.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 253313552,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1631649297
    },
    {
        "content": "<p>Actually, you didn't really write what you meant.</p>",
        "id": 253313778,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631649404
    },
    {
        "content": "<p><code>linarith</code> does know about multiplication, but only handles constants well.</p>",
        "id": 253313836,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631649432
    },
    {
        "content": "<p>This works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">k1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.one_div_pos_of_nat</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">k2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)),</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 253313875,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631649452
    },
    {
        "content": "<p>The difference being the brackets, <code>1/2 * 1 / n</code> is treated as  <code>(1/2 * 1) / n</code> and not <code>(1/2)*(1/n)</code>.</p>",
        "id": 253314139,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1631649552
    },
    {
        "content": "<p>Oh. My. God. Okay... Thanks</p>",
        "id": 253314175,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1631649568
    },
    {
        "content": "<p>The Infoview is your friend! Click on the operators and see what gets selected.</p>",
        "id": 253314225,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631649591
    },
    {
        "content": "<p>Clicking on the second <code>/</code> in <code>1/2 * 1/(n+1 : ℝ)</code> selects everything. That's how I spotted it.</p>",
        "id": 253314415,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631649632
    },
    {
        "content": "<p>What do you mean <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> ? Click on <code>*</code>? Nothing happens for me.</p>",
        "id": 253314477,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1631649657
    },
    {
        "content": "<p>Are you using vscode?</p>",
        "id": 253314528,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1631649679
    },
    {
        "content": "<p>in the Infoview, I mean. Are you not using VScode?</p>",
        "id": 253314541,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631649685
    },
    {
        "content": "<p>Yes</p>",
        "id": 253314546,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1631649685
    },
    {
        "content": "<p>No, I use VScode. I just don't know what is infoview</p>",
        "id": 253314608,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1631649703
    },
    {
        "content": "<p>This is how it looks like. <a href=\"/user_uploads/3121/_sC4yD2o6YGDA9bFzEy2YZ7u/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_sC4yD2o6YGDA9bFzEy2YZ7u/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/_sC4yD2o6YGDA9bFzEy2YZ7u/image.png\"></a></div>",
        "id": 253314643,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631649711
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/Christopher.20Hoskin/near/220710143\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Christopher.20Hoskin/near/220710143</a></p>",
        "id": 253314783,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1631649749
    },
    {
        "content": "<p>Ohhh, very cool! I did not know about this functionality. Thank you!</p>",
        "id": 253314800,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1631649756
    },
    {
        "content": "<p>This is THE functionality <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 253314862,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631649782
    },
    {
        "content": "<p>where <em>interactive</em> theorem proving comes true.</p>",
        "id": 253314889,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631649792
    }
]