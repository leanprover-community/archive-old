[
    {
        "content": "<p>Hi,</p>\n<p>I'm trying to read through <em>Mathematics in Lean</em> and got stuck trying to prove</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">neg_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>Here's what I attempted:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">neg_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">sub_self</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">sub_self</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span>  <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h₁</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_right_cancel</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I thought that since h₁ and h₂ are both equations that are equal to zero, that I could (after commuting the addition in h₁ get the equation:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>and then use <code>add_right_cancel</code> to get <code>-(-a) = a</code>.</p>\n<p>I'd appreciate it if someone could let me know whether this a valid approach to proving this theorem. If it is, could you help me see what I'm doing wrong.</p>\n<p>Thanks!</p>",
        "id": 208156906,
        "sender_full_name": "Mike",
        "timestamp": 1598480729
    },
    {
        "content": "<p>Assuming that h2 says <code>-(-a) + -a = a + -a</code>, to get from that to <code>-(-a) = a</code> using <code>add_right_cancel</code> is a forward reasoning step, so you should use <code>have</code> instead of <code>apply</code></p>",
        "id": 208157848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598481321
    },
    {
        "content": "<p>If you work backward from the goal using <code>apply add_right_cancel</code> you will get the goal <code>-(-a) + ?m_1 =  a + ?m_1</code>, which is usable (you can finish with <code>exact h2</code>) but a little confusing to work with</p>",
        "id": 208157998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598481395
    },
    {
        "content": "<p>because from this line alone it's not clear what you are cancelling (you are basically un-cancelling when you work backwards using this theorem)</p>",
        "id": 208158058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598481442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> FYI the goal state here prints <code>--a</code>. Should the pretty printer be taught that this is a bad idea?</p>",
        "id": 208158211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598481537
    },
    {
        "content": "<p>actually correction, the goal view correctly prints <code>- -a</code> but the widget view prints <code>--a</code>, so I guess I should ping <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> instead</p>",
        "id": 208158353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598481611
    },
    {
        "content": "<p>Here's a corrected version of the proof using <code>apply</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">neg_neg&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">sub_self</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">sub_self</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h₂</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_right_cancel</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208158420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598481690
    },
    {
        "content": "<p>note the somewhat weird state before the <code>exact</code></p>",
        "id": 208158442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598481711
    },
    {
        "content": "<p>and here's a version using a forward reasoning step instead:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">neg_neg&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">sub_self</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">sub_self</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h₂</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">add_right_cancel</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208158519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598481759
    },
    {
        "content": "<p>Thank you for explaining the difference between <code>apply</code> using backward reasoning and <code>have</code> using forward reasoning.</p>",
        "id": 208217375,
        "sender_full_name": "Mike",
        "timestamp": 1598535485
    }
]