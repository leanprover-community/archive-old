[
    {
        "content": "<p>I have the following theorem with m and n defined existentially (I defined relatively_prime as coprime already):</p>\n<div class=\"codehilite\"><pre><span></span>theorem relatively_prime_sum_to_one (a b : ℤ) (h : relatively_prime a b) :\n∃ m n : ℤ, m * a + n * b = 1 := sorry\n</pre></div>\n\n\n<p>I want to use and manipulate the expression ma + nb = 1 in the proof of another theorem, but how can I pull out this expression?</p>",
        "id": 191279620,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584727246
    },
    {
        "content": "<p>Use <code>cases</code> to destruct an existential</p>",
        "id": 191279882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584727340
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">cases</span> <span class=\"n\">relatively_prime_sum_to_one</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">manb_eq_one</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 191279986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584727387
    },
    {
        "content": "<p>Or maybe that's to advanced for <code>cases</code>... then you need <code>rcases</code> (recursive <code>cases</code>), with a slightly different syntax.</p>",
        "id": 191280048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584727416
    },
    {
        "content": "<p>The cool thing is</p>\n<div class=\"codehilite\"><pre><span></span>rcases? relatively_prime_sum_to_one a b h,\n</pre></div>\n\n\n<p>will print a message telling you what to do</p>",
        "id": 191280149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584727455
    },
    {
        "content": "<p>So far I have the following theorem I've been trying to prove and applied what you suggested with cases: </p>\n<div class=\"codehilite\"><pre><span></span>theorem divides_product_coprime_and_not_coprime (a b n:ℤ) (c: divides n (a*b))\n(d: relatively_prime a n):\ndivides n b:=\n\nbegin\ncases relatively_prime_sum_to_one a n d with m n manb_eq_one,\n\nend\n</pre></div>",
        "id": 191324925,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584759399
    },
    {
        "content": "<p>what does manb_eq_one do?</p>",
        "id": 191324986,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584759516
    },
    {
        "content": "<p>and can someone show me how to multiply both sides of the resulting expression by a value (b)?</p>",
        "id": 191324992,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584759539
    },
    {
        "content": "<p>In your code, <code>manb_eq_one</code> isn't doing anything. If you want to use <code>cases</code> here, you'll have to use it twice:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">relatively_prime</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">relatively_prime_sum_to_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">relatively_prime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">divides</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">divides_product_coprime_and_not_coprime</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">divides</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">relatively_prime</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">):</span>\n<span class=\"n\">divides</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">relatively_prime_sum_to_one</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n&#39;</span> <span class=\"n\">manb_eq_one</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- m n : ℤ,</span>\n  <span class=\"c1\">-- manb_eq_one : m * a + n&#39; * n = 1</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">manb_eq_one</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- this : b * (m * a + n&#39; * n) = b * 1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- this : b * (m * a + n&#39; * n) = b</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>As Johan hinted, it's easier to use <code>rcases</code> than <code>cases</code> here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">relatively_prime</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">relatively_prime_sum_to_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">relatively_prime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">divides</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">divides_product_coprime_and_not_coprime</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">divides</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">relatively_prime</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">):</span>\n<span class=\"n\">divides</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">relatively_prime_sum_to_one</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n&#39;</span><span class=\"o\">,</span> <span class=\"n\">manb_eq_one</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- m n : ℤ,</span>\n  <span class=\"c1\">-- manb_eq_one : m * a + n&#39; * n = 1</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">manb_eq_one</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- this : b * (m * a + n&#39; * n) = b * 1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- this : b * (m * a + n&#39; * n) = b</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191326552,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584762208
    }
]