[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>This doesn't work... <code>the following cases are missing:\nτ ⟨(succ _).succ, _⟩ ⟨_, _⟩</code>.</p>\n<p>What's a better way to define a finite function? (The other way I know would be using nested <code>ite</code>...)</p>",
        "id": 220049307,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608069881
    },
    {
        "content": "<p>You can just add a final case which would never be matched</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 220049896,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608070200
    },
    {
        "content": "<p>Thanks! Why do we need the<code>⟨0,_⟩</code> as opposed to just <code>0</code>?</p>",
        "id": 220050324,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608070334
    },
    {
        "content": "<p><code>by linarith</code> also works for the final case, usually</p>",
        "id": 220050337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608070341
    },
    {
        "content": "<p>Since the hypotheses at that point are a contradiction</p>",
        "id": 220050373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608070363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347475\">@Bjørn Kjos-Hanssen</span>, the <code>_</code> matches the proof that <code>0 &lt; 2</code></p>",
        "id": 220050446,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608070407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> thanks ---</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>doesn't seem to work in this case</p>",
        "id": 220050927,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608070648
    },
    {
        "content": "<p>I meant replace the <code>1</code> with <code>by linarith</code></p>",
        "id": 220051033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608070692
    },
    {
        "content": "<p>Not the whole line</p>",
        "id": 220051044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608070700
    },
    {
        "content": "<p>But using that instead of <code>1</code> only really matters for the case when you don't have any default value available, which this isn't</p>",
        "id": 220051125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608070739
    },
    {
        "content": "<p>Why not just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>?</p>",
        "id": 220051155,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608070764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>  okay, in this specific case yes</p>",
        "id": 220051309,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608070838
    },
    {
        "content": "<p>okay I'll look into how to import <code>linarith</code> ...</p>",
        "id": 220051360,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608070868
    },
    {
        "content": "<p>I think to use linarith to not give a value for the impossible cases you need two matches</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 220051491,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608070933
    },
    {
        "content": "<p>Or, to avoid linarith and see what's going on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_le</span> <span class=\"n\">n.zero_le</span> <span class=\"o\">(</span><span class=\"n\">add_lt_iff_neg_right.mp</span> <span class=\"n\">hn</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_le</span> <span class=\"n\">m.zero_le</span> <span class=\"o\">(</span><span class=\"n\">add_lt_iff_neg_right.mp</span> <span class=\"n\">hm</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 220052394,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608071442
    },
    {
        "content": "<p>There might be a cleaner term-mode proof, but that's how I thought about it</p>",
        "id": 220052442,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608071464
    },
    {
        "content": "<p><code>absurd hn dec_trivial</code> works as a term mode replacement of <code>by linarith</code></p>",
        "id": 220053335,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608071878
    },
    {
        "content": "<p>Maybe dec_trivial counts as a tactic <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 220053509,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608071955
    },
    {
        "content": "<p>Thanks all for the at least four different solutions! Maybe this is a different topic but is there a way to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"n\">q_ε</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">q_ε</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- omitting the rest</span>\n</code></pre></div>\n<p>?</p>",
        "id": 220054772,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608072714
    },
    {
        "content": "<p>What will you be doing with this tau definition? <code>let ... in ... </code> might not have the best structure for proving things about it.</p>",
        "id": 220055073,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608072869
    },
    {
        "content": "<p>Do you want to have this sort of structure to easily make the variants where you change the <code>q_eps</code>?</p>",
        "id": 220055112,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608072889
    },
    {
        "content": "<p>and what would the <code>rest</code> be?</p>",
        "id": 220055158,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608072915
    },
    {
        "content": "<p>I want to do something with say <code>fin 6</code> instead of <code>fin 2</code>, and then have each element of <code>fin 6</code> have a descriptive name... or maybe replace <code>fin 6</code> by a set or type defined in a different way, like <code>{apple, banana, orange, grape, plum, berry}</code></p>",
        "id": 220055511,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608073091
    },
    {
        "content": "<p>Using the numbers 0 through 5 does not give enough intuition in my intended use case</p>",
        "id": 220055590,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608073152
    },
    {
        "content": "<p>Yes, I also noticed that <code>let..in</code> is cumbersome for proofs.</p>",
        "id": 220055686,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608073204
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.derive_fintype</span>\n\n<span class=\"kd\">@[derive [fintype, decidable_eq]</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">bjorntype</span>\n<span class=\"bp\">|</span> <span class=\"n\">apple</span>\n<span class=\"bp\">|</span> <span class=\"n\">banana</span>\n<span class=\"bp\">|</span> <span class=\"n\">orange</span>\n<span class=\"bp\">|</span> <span class=\"n\">grape</span>\n<span class=\"bp\">|</span> <span class=\"n\">plum</span>\n<span class=\"bp\">|</span> <span class=\"n\">berry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">bjorntype</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">bjorntype</span> <span class=\"bp\">→</span> <span class=\"n\">bjorntype</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">berry</span> <span class=\"n\">plum</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">τ</span> <span class=\"n\">berry</span> <span class=\"n\">plum</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">τ</span> <span class=\"n\">berry</span> <span class=\"n\">berry</span>\n</code></pre></div>",
        "id": 220055953,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608073344
    },
    {
        "content": "<p>I'm not sure what you mean by <code>descriptive name</code></p>",
        "id": 220056044,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608073396
    },
    {
        "content": "<p>This looks great... yes by descriptive name I mean just something like this, <code>apple</code></p>",
        "id": 220056190,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608073475
    },
    {
        "content": "<p>And you then have that your custom inductive type is isomorphic to <code>fin 6</code> via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.equiv_fin\">docs#fintype.equiv_fin</a></p>",
        "id": 220056549,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608073712
    }
]