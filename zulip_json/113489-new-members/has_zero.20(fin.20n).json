[
    {
        "content": "<p>Why do we only allow 0 for <code>fin (n + 1)</code>? I understand that <code>0 = 1</code> at <code>fin (n + 1)</code>, but it seems a lot of things about <code>fin _</code> would be more simply stated (for what I'm working on) if <code>has_zero (fin 0)</code> was an instance.</p>",
        "id": 206629565,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597179010
    },
    {
        "content": "<p>In general, is there no <code>has_zero (subsingleton a)</code>?</p>",
        "id": 206629603,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597179036
    },
    {
        "content": "<p><code>fin 0</code> is empty</p>",
        "id": 206629797,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597179154
    },
    {
        "content": "<p>and <code>subsingleton a</code>, while not really an algebraic type in the first place, is also possibly empty</p>",
        "id": 206629856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597179195
    },
    {
        "content": "<p>So we always identify <code>0</code> (or <code>1</code>) with an actual value, not just a stand-in, then?</p>",
        "id": 206630028,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597179286
    },
    {
        "content": "<p><code>has_zero A</code> implies that the designated element <code>0 : A</code> has type <code>A</code>, therefore <code>A</code> is not empty</p>",
        "id": 206630140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597179348
    },
    {
        "content": "<p><code>has_zero A</code> is defined here: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_zero/src\">src#has_zero</a></p>",
        "id": 206666242,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597216871
    },
    {
        "content": "<p>As you can see, the constructor takes <code>zero : Î±</code>.</p>",
        "id": 206666253,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597216892
    }
]