[
    {
        "content": "<p>I have a little annoying thing happen every time I refer to a natural prime: <br>\nambiguous overload, possible interpretations<br>\n  prime x<br>\n<a href=\"http://nat.prime\">nat.prime</a> x<br>\nThe only thing I find that works is to replace prime x with its definition (p ≠ 0 ∧ ¬is_unit p ∧ ∀ (a b : ℕ), p ∣ a * b → p ∣ a ∨ p ∣ b)), which is very ugly. How do I specify that I mean 'prime' and not '<a href=\"http://nat.prime\">nat.prime</a>' is a non-ugly way?</p>",
        "id": 237940947,
        "sender_full_name": "Stepan Nesterov",
        "timestamp": 1620465346
    },
    {
        "content": "<p>Probably, <code>_root_.prime</code> works, but is still clunky</p>",
        "id": 237941371,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620465756
    },
    {
        "content": "<p>Does your file do <code>open nat</code> somewhere? Because if it does, maybe removing that line would help</p>",
        "id": 237941393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620465798
    },
    {
        "content": "<p>This may be happening because you have <code>open nat</code>: removing that might also work, but then you have to explicitly say <code>nat.</code> all the time.</p>",
        "id": 237941398,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620465811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407114\">@Stepan Nesterov</span> Instead of <code>nat.prime x</code> you can write <code>x.prime</code>.</p>",
        "id": 237941474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620465879
    },
    {
        "content": "<p>So that we you can do without <code>open nat</code> and still have \"nice\" notation for primes in <code>nat</code></p>",
        "id": 237941513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620465936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Ambiguous.20overload/near/237941393\">said</a>:</p>\n<blockquote>\n<p>Does your file do <code>open nat</code> somewhere? Because if it does, maybe removing that line would help</p>\n</blockquote>\n<p>Oh yes, it did for some reason and I never noticed. Thanks!</p>",
        "id": 237941518,
        "sender_full_name": "Stepan Nesterov",
        "timestamp": 1620465948
    },
    {
        "content": "<p>So next I am trying to define a set of primes up to a certain point, but<br>\n'''noncomputable def primes : ℕ → finset ℕ :=<br>\nλ n, filter (λ p, prime p) (range (primecount n))'''<br>\nresults in<br>\n'''failed to synthesize type class instance for<br>\nn : ℕ<br>\n⊢ decidable_pred (λ (p : ℕ), prime p)'''<br>\nWhat does that mean?</p>",
        "id": 237942161,
        "sender_full_name": "Stepan Nesterov",
        "timestamp": 1620466622
    },
    {
        "content": "<p><code>filter</code> needs a decision procedure to computably work, and for some reason there doesn't seem to be one for <code>prime</code>; can you try removing the lambda abstraction and see if it works? there should be one</p>",
        "id": 237942776,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620467274
    },
    {
        "content": "<p>There might be one for <code>nat.prime</code>, not <code>_root_.prime</code></p>",
        "id": 237942968,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1620467440
    },
    {
        "content": "<p>How do I remove the lambda-abstraction? filter requires a function as an input</p>",
        "id": 237942979,
        "sender_full_name": "Stepan Nesterov",
        "timestamp": 1620467464
    },
    {
        "content": "<p>just write <code>prime</code> instead of <code>λ p, prime p</code></p>",
        "id": 237943005,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620467503
    },
    {
        "content": "<p>but I fear Ruben is right</p>",
        "id": 237943006,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620467506
    },
    {
        "content": "<p>Oh, right</p>",
        "id": 237943097,
        "sender_full_name": "Stepan Nesterov",
        "timestamp": 1620467566
    },
    {
        "content": "<p>failed to synthesize type class instance for<br>\nn : ℕ<br>\n⊢ decidable_pred prime</p>",
        "id": 237943106,
        "sender_full_name": "Stepan Nesterov",
        "timestamp": 1620467576
    },
    {
        "content": "<p>The same</p>",
        "id": 237943110,
        "sender_full_name": "Stepan Nesterov",
        "timestamp": 1620467580
    },
    {
        "content": "<p>So does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">primes</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">filter</span> <span class=\"n\">nat.prime</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">primecount</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>work?</p>",
        "id": 237943134,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1620467616
    },
    {
        "content": "<p>Though if your def is <code>noncomputable</code> anyway, you might as well use <code>open_locale classical</code> before it, I suspect</p>",
        "id": 237943206,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1620467679
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">primes</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">_root_.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">primecount</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>will do</p>",
        "id": 237943267,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620467736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Ambiguous.20overload/near/237943206\">said</a>:</p>\n<blockquote>\n<p>Though if your def is <code>noncomputable</code> anyway, you might as well use <code>open_locale classical</code> before it, I suspect</p>\n</blockquote>\n<p>Yes, that does the trick :)</p>",
        "id": 237943345,
        "sender_full_name": "Stepan Nesterov",
        "timestamp": 1620467793
    },
    {
        "content": "<p>i do wonder why you're using this <code>prime</code> over <code>nat.prime</code>, especially as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime_iff_prime\">docs#nat.prime_iff_prime</a> exists</p>",
        "id": 237943502,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620467954
    },
    {
        "content": "<p>Because the API for the fundamental theorem of arithmetic is for unique factorization monoids, basically</p>",
        "id": 237943673,
        "sender_full_name": "Stepan Nesterov",
        "timestamp": 1620468090
    },
    {
        "content": "<p>But I guess I have to use this equivalence at some point anyway, because infinitely many primes uses <a href=\"http://nat.prime\">nat.prime</a></p>",
        "id": 237943740,
        "sender_full_name": "Stepan Nesterov",
        "timestamp": 1620468132
    }
]