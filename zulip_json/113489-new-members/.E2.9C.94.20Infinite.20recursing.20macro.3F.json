[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Nat'</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Nat'</span> <span class=\"bp\">→</span> <span class=\"n\">Nat'</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"nat! \"</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">nStx</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">nStx.toNat</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat'.zero</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.mkNumLit</span> <span class=\"bp\">$</span> <span class=\"n\">toString</span> <span class=\"n\">n</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat'.succ</span> <span class=\"bp\">$</span> <span class=\"n\">nat</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">nat</span><span class=\"bp\">!</span> <span class=\"mi\">0</span> <span class=\"c1\">-- Nat'.zero</span>\n<span class=\"k\">#eval</span> <span class=\"n\">nat</span><span class=\"bp\">!</span> <span class=\"mi\">1</span> <span class=\"c1\">-- Nat'.succ (Nat'.zero)</span>\n</code></pre></div>",
        "id": 275515757,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647439987
    },
    {
        "content": "<p>Note that I'm \"abusing\" what Lean already offers out of the box:</p>\n<ul>\n<li><code>Syntax.toNat : Syntax → Nat</code></li>\n<li><code>Syntax.mkNumLit : String → Syntax</code></li>\n<li><code>Nat</code>'s <code>ToString</code> instance</li>\n</ul>",
        "id": 275516071,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647440112
    },
    {
        "content": "<p>Actually this looks better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Nat'</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Nat'</span> <span class=\"bp\">→</span> <span class=\"n\">Nat'</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"nat! \"</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">nStx</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">nStx.toNat</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat'.zero</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat'.succ</span> <span class=\"bp\">$</span> <span class=\"n\">nat</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">nat</span><span class=\"bp\">!</span> <span class=\"mi\">0</span> <span class=\"c1\">-- Nat'.zero</span>\n<span class=\"k\">#eval</span> <span class=\"n\">nat</span><span class=\"bp\">!</span> <span class=\"mi\">1</span> <span class=\"c1\">-- Nat'.succ (Nat'.zero)</span>\n</code></pre></div>",
        "id": 275518239,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647440984
    },
    {
        "content": "<p>But it's doing basically what I had done before:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Quote</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Syntax.mkNumLit</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 275518944,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647441248
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 275521811,
        "sender_full_name": "Joseph O",
        "timestamp": 1647442345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 275521831,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647442352
    }
]