[
    {
        "content": "<p>Today I encountered the surprising-but-not-really fact that the following proof is not <code>refl</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>variables (f : α × β → β) (p : α × β)\n\nexample : f p = f (p.fst, p.snd) := congr_arg _ $ prod.ext rfl rfl\n</code></pre></div>\n\n\n<p>This does not seem incredibly awful, but it also comes up often enough that I'm finding it hard to believe that I haven't overlooked a lemma/tactic somewhere that will take care of it. Have I? What is the right way to go about this?</p>\n<hr>\n<p>More context, possibly distracting: I'm attempting to write down some things about dynamical systems as an exercise, and the  <code>f : α × β → β</code> business comes from the following definition obtained by naïvely copying out of a book:</p>\n<div class=\"codehilite\"><pre><span></span><code>(to_fun   : ℝ × X → X)\n(cont     : continuous to_fun)\n(map_zero : ∀ x, to_fun (0, x) = x)\n(map_add  : ∀ x t₁ t₂, to_fun (t₁ + t₂, x) = to_fun (t₂, to_fun (t₁, x)))\n</code></pre></div>\n\n\n<p>(It does not invoke the relatively-recent mathlib <code>add_torsor</code> in part because I think it would be desirable to ultimately have a version of this for local flows, and it stops being a group action. Then again I don't know what the definition for the local version should look like either — carry around a <code>U : set ℝ × X</code> on which the function is defined, and qualify all the other fields with <code>∀ (x, t) ∈ U</code>? Make the signature <code>X → ℝ →.  X</code> instead and wrangle a lot of <code>roption</code>s? A lot of this seems vaguely familiar from struggles with homotopies circa <a href=\"https://github.com/leanprover-community/mathlib/issues/1160\">#1160</a>, and I was hoping I could maybe get some insights as to what people have learnt since.)</p>",
        "id": 207772069,
        "sender_full_name": "Jean Lo",
        "timestamp": 1598187820
    },
    {
        "content": "<p>This issue is sadly well-known.</p>",
        "id": 207772401,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598188305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132889\">@Jean Lo</span> why not use R -&gt; X -&gt; X</p>",
        "id": 207772456,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598188356
    },
    {
        "content": "<p>and I was writing what Kenny wrote.</p>",
        "id": 207772461,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598188376
    },
    {
        "content": "<p><code>ℝ × X → X</code> and <code>continuous (uncurry to_fun)</code> ?</p>",
        "id": 207772477,
        "sender_full_name": "Jean Lo",
        "timestamp": 1598188416
    },
    {
        "content": "<p>oh, continuity</p>",
        "id": 207772526,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598188446
    },
    {
        "content": "<p>let's look at how <code>topological_group</code> does this then</p>",
        "id": 207772535,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598188467
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/c25280031da754d1731b31e81426ab2f8fe218d0/src/topology/algebra/group.lean#L33\">src/topology/algebra/group.lean L33</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">topological_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">has_continuous_mul</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_inv</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/4588400fdfac4ae6ae85930745aaf4a29cc6e7e9/src/topology/algebra/monoid.lean#L27\">src/topology/algebra/monoid.lean L27</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">has_continuous_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_mul</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 207772628,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598188578
    },
    {
        "content": "<p>oh  gee</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">has_continuous_add</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_add</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 207772633,
        "sender_full_name": "Jean Lo",
        "timestamp": 1598188592
    },
    {
        "content": "<p>yay I'm still faster</p>",
        "id": 207772637,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598188604
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/c25280031da754d1731b31e81426ab2f8fe218d0/src/topology/algebra/module.lean#L43\">src/topology/algebra/module.lean L43</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">topological_semimodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_smul</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">•</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 207772717,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598188687
    },
    {
        "content": "<p>I think you need <code>topological_mul_action</code></p>",
        "id": 207772722,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598188703
    },
    {
        "content": "<p>that is <code>topological_semimodule</code> restricted to <code>mul_action</code></p>",
        "id": 207772731,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598188717
    },
    {
        "content": "<p>You could use <code>has_uncurry</code> here, but I think the PR got lost somehow.</p>",
        "id": 207772744,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598188738
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/3694\">https://github.com/leanprover-community/mathlib/pull/3694</a></p>",
        "id": 207772775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598188793
    },
    {
        "content": "<p>It got stuck with Mario requiring mysterious priorities to be set (at don't know where or to what values), but you can still use it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">uncurry</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Records a way to turn an element of `α` into a function from `β` to `γ`. -/</span>\n<span class=\"n\">class</span> <span class=\"n\">has_uncurry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">))</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">↿</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">:=</span> <span class=\"n\">has_uncurry</span><span class=\"bp\">.</span><span class=\"n\">uncurry</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_uncurry_base</span> <span class=\"o\">:</span> <span class=\"n\">has_uncurry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">id</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_uncurry_induction</span> <span class=\"o\">[</span><span class=\"n\">has_uncurry</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_uncurry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"err\">↿</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">uncurry</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">flow</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>   <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cont</span>     <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"err\">↿</span><span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_add</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"bp\">+</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">t₂</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">t₁</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 207773164,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598189187
    },
    {
        "content": "<p>And now let's play with <code>has_uncurry</code>'s real magic: how do you talk about a continuous family of flows of <code>X</code> parametrized by a topological space <code>Y</code>?</p>",
        "id": 207773346,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598189441
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_uncurry_flow</span> <span class=\"o\">:</span> <span class=\"n\">has_uncurry</span> <span class=\"o\">(</span><span class=\"n\">flow</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">flow</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">continuous</span> <span class=\"err\">↿</span><span class=\"n\">f</span>\n</code></pre></div>",
        "id": 207773350,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598189451
    },
    {
        "content": "<p>Let's check it does its magic properly:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"err\">↿</span><span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 207773511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598189671
    },
    {
        "content": "<p>ooh, this is very cool. thanks for the pointers!</p>\n<p>Maybe this even just works™ with the <code>X → ℝ →.  X</code> signature, with <code>pcontinuous</code> instead of <code>continuous</code>?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/idioms.20.3A.20f.20p.20.3D.20f.20(p.2Efst.2C.20p.2Esnd).2C.20etc.2E/near/207772722\">said</a>:</p>\n<blockquote>\n<p>I think you need <code>topological_mul_action</code></p>\n</blockquote>\n<p>oh, hmm. The Mathlib Generality version of this is probably, like, a not-necessarily-continuous semigroup act (but also not really, because partial functions)? and sometimes I want that semigroup to be additive (<code>ℝ</code>)? Additionally, I don't expect to use the <code>+</code> notation. After half an attempt I've not managed  to convince myself that reusing the instances helps that much.</p>",
        "id": 207773688,
        "sender_full_name": "Jean Lo",
        "timestamp": 1598189954
    },
    {
        "content": "<p>I guess you need to make the priority of <code>has_uncurry_base</code> less than that of <code>has_uncurry_induction</code>?</p>",
        "id": 207774020,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598190393
    },
    {
        "content": "<p>otherwise Lean will use <code>has_uncurry_base</code> for <code>A -&gt; B -&gt; C</code> to turn it into, well, <code>A -&gt; B -&gt; C</code></p>",
        "id": 207774028,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598190419
    },
    {
        "content": "<p>By the way, shouldn't it be <code>has_curry</code>? <code>a -&gt; b -&gt; c</code> is the curried form: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.curry\">docs#function.curry</a></p>",
        "id": 207774165,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598190592
    },
    {
        "content": "<p>yeah so uncurry turns A -&gt; B -&gt; C into A x B -&gt; C</p>",
        "id": 207774224,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598190635
    },
    {
        "content": "<p>which is what Patrick intended</p>",
        "id": 207774227,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598190644
    },
    {
        "content": "<blockquote>\n<p><code>Kenny Lau</code> reacted with <code>:point_right:</code></p>\n</blockquote>\n<p>(what is the meaning of this?)</p>",
        "id": 207774656,
        "sender_full_name": "Jean Lo",
        "timestamp": 1598191150
    },
    {
        "content": "<p>\"thanks for the pointers\"</p>",
        "id": 207774842,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598191358
    },
    {
        "content": "<p>It's funny how people think there is a priority issue here, even when they see it working flawlessly.</p>",
        "id": 207775136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598191684
    },
    {
        "content": "<p>oh I see. Maybe the variable names are unhelpful or something but I find this confusing for some reason...</p>",
        "id": 207779816,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598199089
    }
]