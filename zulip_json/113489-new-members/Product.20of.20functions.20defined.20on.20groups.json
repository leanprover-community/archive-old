[
    {
        "content": "<p>Does the standard libary already contain anything like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">real_instances</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">defs</span>\n\n <span class=\"n\">def</span> <span class=\"n\">maps_mul</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">a</span>\n\n <span class=\"kn\">instance</span> <span class=\"n\">mul_maps</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">maps_mul</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>?</p>",
        "id": 201484475,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592669654
    },
    {
        "content": "<p>I mean Lean does not say writing <code>f*g</code> is wrong but also does not find the definition for me</p>",
        "id": 201484619,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592669857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Product.20of.20functions.20defined.20on.20groups/near/201484619\">said</a>:</p>\n<blockquote>\n<p>I mean Lean does not say writing <code>f*g</code> is wrong </p>\n</blockquote>\n<p>what are your imports? does</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">mul_maps</span>\n<span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n\n\n<p>work for you?</p>",
        "id": 201484810,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592670048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Product.20of.20functions.20defined.20on.20groups/near/201484810\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Product.20of.20functions.20defined.20on.20groups/near/201484619\">said</a>:</p>\n<blockquote>\n<p>I mean Lean does not say writing <code>f*g</code> is wrong </p>\n</blockquote>\n<p>what are your imports? does</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">mul_maps</span>\n<span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n\n\n<p>work for you?</p>\n</blockquote>\n<p>Yes it does!</p>",
        "id": 201484886,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592670136
    },
    {
        "content": "<p>including your imports is really important to get help on questions like this</p>",
        "id": 201484988,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592670274
    },
    {
        "content": "<p>did <code>apply_instance</code> tell you the name you were looking for? if not, does <code>suggest</code>?</p>",
        "id": 201485008,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592670323
    },
    {
        "content": "<p>Should I write <code>suggest</code> instead of <code>apply_instance</code>?</p>",
        "id": 201485155,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592670518
    },
    {
        "content": "<p>my understanding is that suggest is in an interactive tactic which finds stuff that looks like your goal and tells them to you in a list,</p>",
        "id": 201485221,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592670606
    },
    {
        "content": "<p>while apply_instance will close goals using typeclass inference, but won't tell you what it found</p>",
        "id": 201485233,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592670632
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span>  <span class=\"n\">foo</span>\n<span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo</span>\n</code></pre></div>\n\n\n<p>will tell you where the instance is coming from.</p>",
        "id": 201485265,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592670690
    },
    {
        "content": "<p>Great thanks! It looks to be a general definition for all algebraic structures</p>",
        "id": 201485388,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592670851
    },
    {
        "content": "<p>Mario suggested this pattern recently, which is a little shorter:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 201485602,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592671178
    },
    {
        "content": "<p>Definitely shorter, but definitely more magical and harder to remember :)</p>",
        "id": 201486184,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592671836
    }
]