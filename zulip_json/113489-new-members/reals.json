[
    {
        "content": "<p>I am trying to understand the outputs of:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">1</span>    <span class=\"bp\">=&gt;</span> <span class=\"mi\">8</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">1</span>         <span class=\"bp\">=&gt;</span> <span class=\"mi\">8</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">1</span>     <span class=\"bp\">=&gt;</span> <span class=\"mi\">81</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"mi\">81</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">100</span> <span class=\"bp\">=&gt;</span>  <span class=\"mi\">800</span>\n</code></pre></div>\n\n\n<p>Using Lean 'official' 3.4.2. I am trying to avoid having to reinstall everything. That is, removing the brew installation of Lean to install elan, mathlibtools and mathlib.</p>",
        "id": 202692504,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1593698675
    },
    {
        "content": "<p>Literals default to <code>nat</code> if there is no other type information available. Even fractional literals like <code>8.1</code>. Yes, this is a bit silly.</p>",
        "id": 202692746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593698778
    },
    {
        "content": "<p>Let me give you more context. I am trying to see how far I can go in the translations of Haskell book examples to Lean. Reals appear in the cipher encoding example: <a href=\"https://gist.github.com/arademaker/73f5fb92601c0c129c95bea7fdbc7bf4\">https://gist.github.com/arademaker/73f5fb92601c0c129c95bea7fdbc7bf4</a></p>",
        "id": 202692977,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1593698885
    },
    {
        "content": "<p>In Haskell the translation of a fractional literal <code>8.1</code> is something like <code>fromRational (81 % 10)</code> where <code>%</code> is the division operator for <code>Rational</code>.</p>",
        "id": 202693392,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593699080
    },
    {
        "content": "<p>If you just write a type annotation like <code>#eval (8.1 : rat)</code> then you'll get the expected result.</p>",
        "id": 202693446,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593699104
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> , thank you. So I guess I will not be able to do it without the mathlib, right? It seems that <code>rat</code> type is not defined in the standard library of Lean.</p>",
        "id": 202693733,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1593699232
    },
    {
        "content": "<p>oh, I have no idea</p>",
        "id": 202693808,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593699248
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat\">docs#rat</a></p>",
        "id": 202693817,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593699251
    },
    {
        "content": "<p>I guess you're right.</p>",
        "id": 202693839,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593699262
    },
    {
        "content": "<p>You can do it over an arbitrary field if you don't want to use mathlib</p>",
        "id": 202694229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593699452
    },
    {
        "content": "<p>although you will have to use 3.4.2 for that since fields have since been ripped out of core</p>",
        "id": 202694264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593699469
    },
    {
        "content": "<p>Here's a really silly rat-like type that works on 3.4.2:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">fraction</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">fraction</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">fraction</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">fraction</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_div</span> <span class=\"n\">fraction</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fraction</span><span class=\"o\">)</span> <span class=\"c1\">-- (81, 10)</span>\n</code></pre></div>",
        "id": 202694600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593699611
    },
    {
        "content": "<p>Thank you so much <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, but I didn't understand your remark about 3.4.2. You said that I could do it over a field but then you said 3.4.2 doesn't have field. Indeed, I didn't find in the Lean 3.4.2 core library the definition of field. Above it looks like you make a pair of natural numbers instances of four classes (I guess has_div can be seen as the inverse of has_mul) and this makes pair of nat numbers a field. Am I right?</p>",
        "id": 202698447,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1593701310
    },
    {
        "content": "<p>3.4.2 does have fields. <a href=\"https://github.com/leanprover/lean/blob/master/library/init/algebra/field.lean\">https://github.com/leanprover/lean/blob/master/library/init/algebra/field.lean</a><br>\nThey were removed from the core library in a more recent version.</p>",
        "id": 202698697,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593701416
    },
    {
        "content": "<p>These definitions don't make <code>ℕ × ℕ</code> a field because, for one thing there is no instance of <code>field</code> given, and for another because they do not satisfy the field axioms.</p>",
        "id": 202698874,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593701511
    },
    {
        "content": "<p>A more recent version of the Lean fork, right? The community version.</p>",
        "id": 202698887,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1593701519
    },
    {
        "content": "<p>If you want a field, the easiest way would be to install mathilb.</p>",
        "id": 202698939,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593701525
    },
    {
        "content": "<p>Right.</p>",
        "id": 202698941,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593701527
    },
    {
        "content": "<p>You can even use the <code>lean-3.4.2</code> branch of mathlib if you really want to keep using Lean 3.4.2--it'll still be much better than not using mathlib at all.</p>",
        "id": 202699041,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593701575
    },
    {
        "content": "<p>The given instances are only enough to be able to interpret <code>m / n</code> into the pair <code>(m, n)</code> (with which you can do what you like)</p>",
        "id": 202699213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593701646
    },
    {
        "content": "<p>Thank you all, now it is clear.</p>",
        "id": 202699573,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1593701856
    }
]