[
    {
        "content": "<p>I am here: <a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=8&amp;level=6\">https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=8&amp;level=6</a></p>\n<p>My question is about this line: <code>exact add_right_cancel _ _ _</code>. Basically, I'm not understanding why <code>exact add_right_cancel</code> isn't accepted, or why <code>exact add_right_cancel _ _</code> isn't accepted. In general, I am fairly confused about what the real syntax is for the argument of a tactic.</p>\n<p>Going back to world 6 level 6 for a minute: <a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=6&amp;level=6\">https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=6&amp;level=6</a></p>\n<p>I'm also confused by the syntax for <code>apply</code> here. The instructions recommend trying <code>apply (f p)</code>; in my solution I wound up with <code>apply f(p)</code>. What's the difference between these syntaxes?</p>\n<p>Thanks for your patience and your help!</p>",
        "id": 242133158,
        "sender_full_name": "Daniel K Lyons",
        "timestamp": 1623274097
    },
    {
        "content": "<p><code>exact foo</code> does exactly what it sounds like.... it matches the goal <em>exactly</em> with <code>foo</code>. So <code>exact add_right_cancel _ _ _</code> means that the goal should be matched exactly to <code>add_right_cancel A B C</code> where <code>A B C</code> are left to lean to figure out. If you don't want the underscores, use <code>apply add_right_cancel</code></p>",
        "id": 242133617,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623274344
    },
    {
        "content": "<p><code>apply f p</code>, <code>apply f (p)</code>, <code>apply (f p)</code> all mean the same thing</p>",
        "id": 242133923,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623274507
    },
    {
        "content": "<p><del>I don't really see where you want to use <code>add_right_cancel</code> in that link, btw..</del> oh sorry, I clicked the wrong link :)</p>",
        "id": 242133998,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623274552
    },
    {
        "content": "<p>NB: We can't see your solutions to NNG problems when you only give a link. Your solutions are stored in browser-local data</p>",
        "id": 242134193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623274632
    },
    {
        "content": "<p>Thanks for clarifying that for me Adam! Mario, I will be sure to include the text of the proof if I get stuck, but I figured it wasn't strictly relevant to this question.</p>",
        "id": 242134383,
        "sender_full_name": "Daniel K Lyons",
        "timestamp": 1623274723
    },
    {
        "content": "<p><code>exact add_right_cancel</code> would only work if the goal was <code>∀ (a t b : mynat), a + t = b + t → a = b</code> including the foralls</p>",
        "id": 242134430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623274751
    },
    {
        "content": "<p>I suspect <span class=\"user-mention\" data-user-id=\"419253\">@Daniel K Lyons</span> had some previous steps already done Mario. Here is a solution (using <code>exact ...</code>), if you want a spoiler (I suggest struggling a bit by yourself before looking at it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">add_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_right_cancel</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 242134844,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623274972
    },
    {
        "content": "<p>Adam, thanks again! I actually have already solved everything up to halfway through Advanced Multiplication somewhere, and then I decided to throw everything away and go through it a second time and see if it makes more sense. It mostly does, just these little things.</p>\n<p>I have also discovered where to find the solutions on github so I don't bother people too much with how-do-I-solve-this-one-problem type stuff.</p>",
        "id": 242135140,
        "sender_full_name": "Daniel K Lyons",
        "timestamp": 1623275122
    },
    {
        "content": "<p>Oh, it was just meant to be a demonstration of using <code>exact</code> for this proof, since this was your original question.</p>",
        "id": 242135203,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623275160
    },
    {
        "content": "<p>So why is <code>apply</code> able to suss out what to do in this case? It seems like <code>apply</code> is less precise about what it will accept but won't close the proof, whereas <code>exact</code> will? Is that right?</p>",
        "id": 242135350,
        "sender_full_name": "Daniel K Lyons",
        "timestamp": 1623275229
    },
    {
        "content": "<p><code>apply</code> will try to match the goal with the conclusion of the lemma you're applying, as opposed to the exact statement of the lemma itself..</p>",
        "id": 242135414,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623275269
    },
    {
        "content": "<p>So if I replace <code>exact ...</code> in the code above with <code>apply add_right_cancel</code>, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">t</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n\n<span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">t</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">mynat</span>\n</code></pre></div>\n<p>So you can see that lean was able to reduce the goal to proving <code>a + ?? = b + ??</code>, but it had no way of knowing what <code>??</code> is supposed to be.</p>",
        "id": 242135641,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623275396
    },
    {
        "content": "<p>On the other hand, if I tell it exactly what <code>t</code> is using <code>apply add_right_cancel _ t</code>, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">t</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 242135805,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623275480
    },
    {
        "content": "<p>So this seems like a really stupid question, how do you know by looking at <code>add_right_cancel</code> what its arity is or which placeholders are which?</p>",
        "id": 242135994,
        "sender_full_name": "Daniel K Lyons",
        "timestamp": 1623275603
    },
    {
        "content": "<p>Count the pis and arrows in <code>∀ (a t b : mynat), a + t = b + t → a = b</code></p>",
        "id": 242136023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623275630
    },
    {
        "content": "<p>there are three variables in the forall and one hypothesis, so four arguments</p>",
        "id": 242136091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623275650
    },
    {
        "content": "<p>so you would apply it like <code>exact add_right_cancel _ _ _ h</code></p>",
        "id": 242136115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623275669
    },
    {
        "content": "<p>Most of the time, those pis will be written with implicit binders like this: <code>∀ {a t b : mynat}, a + t = b + t → a = b</code>. In that case, lean basically inserts the <code>_</code> for you, so you would just write <code>exact add_right_cancel h</code></p>",
        "id": 242136226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623275731
    },
    {
        "content": "<p>Mario, what is a \"pi\"?</p>",
        "id": 242136285,
        "sender_full_name": "Daniel K Lyons",
        "timestamp": 1623275759
    },
    {
        "content": "<p>sorry, jargon</p>",
        "id": 242136337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623275766
    },
    {
        "content": "<p><code>pi</code> means <code>∀</code> in this context.</p>",
        "id": 242136418,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623275817
    },
    {
        "content": "<p>lean also lets you write the type as <code>Π (a t b : mynat), a + t = b + t → a = b</code> and so the type of dependent functions is also known as a Pi type</p>",
        "id": 242136421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623275818
    },
    {
        "content": "<p>for propositions, a Pi type is just the same as a forall</p>",
        "id": 242136461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623275843
    },
    {
        "content": "<p>So the Pi type is more general than forall, there are other quantifications(?) that \"count\" for the purposes of determining the signature?</p>",
        "id": 242136488,
        "sender_full_name": "Daniel K Lyons",
        "timestamp": 1623275877
    },
    {
        "content": "<p>they are interchangeable in lean, you can use <code>Π</code> for <code>∀</code> or vice versa</p>",
        "id": 242136574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623275929
    },
    {
        "content": "<p>So a \"thing\" like <code>add_right_cancel</code> is a theorem, it has a type, the signature of that type is <code>∀ {a t b : mynat}, a + t = b + t → a = b</code> which to my programmer mind means there are four parameters here, three of them are values, the fourth is a hypothesis?</p>",
        "id": 242136649,
        "sender_full_name": "Daniel K Lyons",
        "timestamp": 1623275981
    },
    {
        "content": "<p>Note: I can't guarantee that the <code>mynat</code> binder types in NNG are the same as those  for <code>nat</code> in mathlib/lean</p>",
        "id": 242136655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623275986
    },
    {
        "content": "<p>The only thing that counts are the number of pi binders, but because of this notation you will often see pi binders written with <code>∀</code>, and also <code>A -&gt; B</code> is notation for <code>∀ (_ : A), B</code></p>",
        "id": 242136660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623275990
    },
    {
        "content": "<p>It's kind of mind blowing that we can successfully compute at this high level :)</p>",
        "id": 242136756,
        "sender_full_name": "Daniel K Lyons",
        "timestamp": 1623276024
    },
    {
        "content": "<p>Function inputs in {} brackets are not explicitly input because their values can be read off from the types of later inputs</p>",
        "id": 242136825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623276060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"419253\">Daniel K Lyons</span> <a href=\"#narrow/stream/113489-new-members/topic/NNG.20.22exact.22.20syntax.20.2F.20tactic.20arguments/near/242136649\">said</a>:</p>\n<blockquote>\n<p>So a \"thing\" like <code>add_right_cancel</code> is a theorem, it has a type, the signature of that type is <code>∀ {a t b : mynat}, a + t = b + t → a = b</code> which to my programmer mind means there are four parameters here, three of them are values, the fourth is a hypothesis?</p>\n</blockquote>\n<p>Yes, that's correct. The first three parameters are marked as \"lean, figure it out\", so even though there are actually four parameters you only need to write one of them</p>",
        "id": 242136840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623276068
    },
    {
        "content": "<p>by the way, a trick you can use in NNG to see the type of a theorem is to add <code>have := @add_right_cancel,</code> to the proof and look at the type of the thing that got added to the context</p>",
        "id": 242136990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623276152
    },
    {
        "content": "<p>wow, this is incredibly sophisticated. I understand why NNG doesn't go into these depths right away, it would be terrifying.</p>",
        "id": 242137093,
        "sender_full_name": "Daniel K Lyons",
        "timestamp": 1623276212
    },
    {
        "content": "<p>thanks for all your help!</p>",
        "id": 242137109,
        "sender_full_name": "Daniel K Lyons",
        "timestamp": 1623276223
    }
]