[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">complex.I</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">complex.I</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 250820603,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1630003699
    },
    {
        "content": "<p>how can I show this?</p>",
        "id": 250820661,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1630003717
    },
    {
        "content": "<p>It's false if <code>v = 1</code>.</p>",
        "id": 250820821,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630003795
    },
    {
        "content": "<p>How about this</p>",
        "id": 250823240,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1630004808
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is buggy, please give me one moment</p>",
        "id": 250824160,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1630005170
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">complex.I</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">complex.I</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_inv_cancel</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">congr_arg</span> <span class=\"n\">complex.re</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 250824249,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630005221
    },
    {
        "content": "<p>Thank you, and sorry for the inconvenience</p>",
        "id": 250824351,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1630005256
    },
    {
        "content": "<p>In general to prove lemmas such as <code>a * a\\inv = 1</code>, you can to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_inv_cancel\">docs#mul_inv_cancel</a> but you need to produce a proof that <code>a</code> is nonzero.</p>",
        "id": 250824394,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630005277
    },
    {
        "content": "<p>If you have more complicated expressions, you can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#field_simp\">tactic#field_simp</a> to clear denominators.</p>",
        "id": 250824430,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630005300
    },
    {
        "content": "<p>And a more general answer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">complex.I</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">complex.I</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">suggest</span>\n</code></pre></div>\n<p>produces a lot of rubbish, but amongst that rubbish is <code>mul_inv_cancel</code>, which hopefully you can guess from the name is what you're going to want.</p>",
        "id": 250863102,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630025775
    },
    {
        "content": "<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>just tells you the answer.</p>",
        "id": 250863399,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630026011
    }
]