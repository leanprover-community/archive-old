[
    {
        "content": "<p>Hi,</p>\n<p>Once again, I'm unable to get a proof to work in lean. I'm trying to prove <br>\n<code>theorem two_mul (a : R) : 2 * a = a + a :=</code><br>\nfrom <em>Mathematics in Lean</em><br>\nHere's what I'm trying to make work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_ring</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">one_and_one_eq_two</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">two_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">one_and_one_eq_two</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">one_mul</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">one_mul</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">my_ring</span>\n</code></pre></div>\n\n\n<p>The proof fails at <code>{rw one_and_one_eq_two at h₁},</code> with the message<br>\n/-<br>\nsolve1 tactic failed, focused goal has not been solved<br>\nstate:<br>\nR : Type u_1,<br>\n_inst_1 : ring R,<br>\na : R,<br>\nh₁ : 2 * a = 1 * a + 1 * a<br>\n⊢ 2 * a = 1 * a + 1 * a<br>\n-/</p>\n<p>Would appreciate someone showing me what the heck I'm doing wrong. Thanks!</p>",
        "id": 208335038,
        "sender_full_name": "Mike",
        "timestamp": 1598617136
    },
    {
        "content": "<p>The issue is that you've modified <code>h\\_1</code> in that line, but didn't tell lean to use the modified <code>h\\_1</code> as your proof of <code>h\\_2</code>. So a simple fix is to add <code>assumption</code> after <code>rw one_and_one_eq_two at h₁</code> (or even <code>exact h\\_1</code>).</p>",
        "id": 208336610,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598618278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Pro tip: <code>\\1</code> = <code>\\_1</code></p>",
        "id": 208337722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598618992
    },
    {
        "content": "<p>WHOA!</p>",
        "id": 208337772,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598619008
    },
    {
        "content": "<p>I think you just saved me millions of keystrokes</p>",
        "id": 208337793,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598619024
    },
    {
        "content": "<p>Thank you! That fixes the proof of h₂. Now I just need to prove h₃.</p>\n<p>I'm getting this error for that:<br>\n/-<br>\nrewrite tactic failed, did not find instance of the pattern in the target expression<br>\n  1 * ?m_3<br>\nstate:<br>\nR : Type u_1,<br>\n_inst_1 : ring R,<br>\na : R,<br>\nh₁ : (1 + 1) * a = 1 * a + 1 * a,<br>\nh₂ : 2 * a = a + a<br>\n⊢ 2 * a = a + a<br>\n-/<br>\nWhich seems odd, because there are two 1*a 's in h₂.</p>",
        "id": 208337987,
        "sender_full_name": "Mike",
        "timestamp": 1598619157
    },
    {
        "content": "<p>This is expected. <code>rw</code> will change all instances of the first thing it matches with.<br>\nHere's your proof cut down a little bit (note that last <code>have</code> isn't needed).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_ring</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">one_and_one_eq_two</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">two_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">rwa</span> <span class=\"n\">one_and_one_eq_two</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">},</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">one_mul</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">my_ring</span>\n</code></pre></div>",
        "id": 208339037,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598619777
    },
    {
        "content": "<p>in mathlib we use 2-space indent as well as spaces after the opening curly bracket and before the closing one (i.e.<br>\n<code>{ lorem ipsum }</code>)</p>",
        "id": 208388544,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598644692
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_ring</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">one_and_one_eq_two</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">two_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"n\">one_and_one_eq_two</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">one_mul</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">my_ring</span>\n</code></pre></div>",
        "id": 208388715,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598644781
    },
    {
        "content": "<p>we also use spaces around infixes (i.e. <code>1 * a</code> not <code>1*a</code>)</p>",
        "id": 208388793,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598644809
    }
]