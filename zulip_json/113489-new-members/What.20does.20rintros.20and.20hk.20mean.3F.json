[
    {
        "content": "<p>I have this code example from the \"Mathematics in Lean\" Tutorial:<br>\nBut I do not understand what rintros does. And how does hk know it is n=2*k?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- say m and n are natural numbers, and assume n=2*k</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩,</span>\n  <span class=\"c1\">-- We need to prove m*n is twice a natural. Let's show it's twice m*k.</span>\n  <span class=\"n\">use</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- substitute in for n</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- and now it's obvious</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261122023,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1636630579
    },
    {
        "content": "<p><code>rintros m n ⟨k, hk⟩</code> is the same as <code>intros m n hk', cases hk' with k hk,</code>, if that helps</p>",
        "id": 261122149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636630676
    },
    {
        "content": "<p>as a second piece to the puzzle: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/even\">docs#even</a> is defined to be <code>∃ k, a = 2 * k</code></p>",
        "id": 261125068,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636632553
    },
    {
        "content": "<p>It might help a bit to start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">even</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 261125340,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1636632741
    },
    {
        "content": "<p>And <code>rintro</code> is exactly the same as <code>rintros</code>.</p>",
        "id": 261127392,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636634005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Hey I'm sorry to bother you, but I'm still very new to Lean and I would like to understand what the \"rintros\" command does. I have seen it in many simple examples but I can't find a good explanation of what its purpose is.</p>",
        "id": 263766743,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1638708346
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rintro\">tactic#rintro</a> might be helpful (<code>rintros</code> is the same as <code>rintro</code>)</p>",
        "id": 263766822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638708426
    },
    {
        "content": "<p>Ok, thanks for the answer. Why does </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩,</span>\n</code></pre></div>\n<p>all of the sudden create a k and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hk</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>Where does the 2 * k come from?</p>",
        "id": 263768828,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1638711446
    },
    {
        "content": "<p>If you replaced <code>rintros \\&lt;k, hk\\&gt;</code> with <code>intro x</code>, what would the type of x be? And how do you make a term of that type?</p>",
        "id": 263768969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638711629
    },
    {
        "content": "<p>nat ? <br>\nI dont know... <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 263769090,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1638711811
    },
    {
        "content": "<p>What type is hk?</p>",
        "id": 263769327,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1638712124
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Addition.20of.20interiors\">#Is there code for X? &gt; Addition of interiors</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span></p>",
        "id": 263769822,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638712808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454489\">@Pascal Schoppenhauer</span>, you made a thread about this almost a month ago (which I've now combined your latest post with), but never responded - did you not see the replies?</p>",
        "id": 263769896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638712886
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>  yeah I saw the responses, but I didn't get any smarter from them... Does <code>hk</code> stand for anything, or is it just the name for the term?</p>",
        "id": 263772046,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1638716137
    },
    {
        "content": "<p>Or rather: I don't understand where the 2 comes from. I now understand what rintros does, but thats up with the <code> \\&lt;k, hk\\&gt;</code></p>",
        "id": 263772369,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1638716522
    },
    {
        "content": "<p>hk is just a name. it means a hypothesis about k</p>",
        "id": 263772734,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638716969
    },
    {
        "content": "<p>Ahh ok, thanks. <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span>  That makes sense. Now what is this <code>⟨k, hk⟩</code> Syntax?</p>",
        "id": 263772873,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1638717128
    },
    {
        "content": "<p>do you know \"destructuring\"/\"unpacking\"/\"structured bindings\" in programming languages?</p>",
        "id": 263772965,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638717271
    },
    {
        "content": "<p>the <code>even n</code> hypothesis is a structure with 2 fields: a natural number and a hypothesis about that number</p>",
        "id": 263772996,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638717320
    },
    {
        "content": "<p>you use that syntax to \"destructure\"/\"unpack\" the two fields</p>",
        "id": 263773006,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638717351
    },
    {
        "content": "<p>To give a term of type <code>even n</code> is to give a pair of terms -- first a natural <code>k</code> and second a proof that <code>n = 2 * k</code>. So the <code>rintro</code> takes the term apart into its two pieces.</p>",
        "id": 263773087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638717474
    },
    {
        "content": "<p>To see what's happening with the <code>rintros</code> command, let's play it back in slow motion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c1\">-- We start with `∀ m n : nat, even n → even (m * n)`</span>\n  <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"c1\">-- This introduces `m` and `n` of type `ℕ`, and the hypothesis `H : even n`</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">even</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>  <span class=\"c1\">-- What does `even n` mean?  It means there's a `k : ℕ` such that `n = 2 * k`</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"c1\">-- This decomposes that `∃` statement, introducing `k : ℕ` and `hk : n = 2 * k`</span>\n</code></pre></div>\n<p>So <code>hk</code> is just the name that's been chosen for the proposition <code>n = 2 * k</code> — we could have called it something else.  And that proposition is part of the premise that <code>n</code> is even.</p>\n<p><code>rintros m n ⟨k, hk⟩</code> is just a super-slick way of combining all these steps into one.</p>",
        "id": 263773752,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638718287
    },
    {
        "content": "<p>Ok that sounds smart. <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> Thanks! So <code>even n</code> is kind of like an array and i could unpack that array with something like that (pseudocode): <code>h, hk = even n</code>. I found that I can write it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- say m and n are natural numbers, and assume n=2*k</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  m n : ℕ</span>\n<span class=\"cm\">  ⊢ even n → even (m * n)</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩,</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>I think I understand it but let me try to clarify it for myself: The intro just takes the first element of the list of expressions befor the → sign. The rintro does that recursively.</p>",
        "id": 263773765,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1638718320
    },
    {
        "content": "<p>Ok now this is cool. Love it thanks a lot! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> One more questin why do I have to use <code>⟨ ⟩</code> why not <code>( ) or [ ]</code>? How do I know when to use these?</p>",
        "id": 263773914,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1638718532
    },
    {
        "content": "<p>You just have to learn the syntax for terms and tactics. <code>rintro</code> uses pointies.</p>",
        "id": 263773962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638718565
    },
    {
        "content": "<p>Ok thanks a lot <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 263773983,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1638718593
    }
]