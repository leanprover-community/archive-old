[
    {
        "content": "<p>I just noticed that this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">âˆƒ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">classical.some</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">classical.some</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">refl</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I was kind of surprised by this, because I didn't think that <code>classical.some</code> would always return the same instance, but rather just \"some\" instance. On the other hand <code>classical.some</code> is a <strong>function</strong>, so I guess it has to always return the same thing.<br>\nSo should <code>classical.some</code> be interpreted as always returning the same instance? And if not, then how are <code>noncomputable</code> functions functions at all?</p>",
        "id": 222080710,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610117561
    },
    {
        "content": "<p>Yes, it is a function, so on a given assumption it always returns the same result.</p>",
        "id": 222080880,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610117642
    },
    {
        "content": "<p>It is an extraordinary function -- it chooses, once and for all, a \"special\" element in every nonempty type.</p>",
        "id": 222086523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610120399
    },
    {
        "content": "<p>By the way, it is this \"function-ness\" that is exactly what makes the axiom of choice an actual axiomatic extension of the theory; if you just wanted a random element of the type every time you could do a desugaring that cases on <code>exists x, p x</code> whenever you make reference to this magical nondeterministic constant. This would not satisfy your example, since it's not true that <code>\\forall n, n &gt; 9 -&gt; \\forall n', n' &gt; 9 -&gt; n = n'</code> (which is roughly what you would get by desugaring your statement under the nondeterministic reading of <code>classical.some</code>).</p>",
        "id": 222118109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610135926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> How would that desugaring that cases on <code>exists x, p x</code> look like?</p>",
        "id": 222164576,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610188002
    },
    {
        "content": "<p>It's a bit complex in general, you have to lift the cases out to the nearest enclosing proof term, which requires some fairly low level elaborator support to make work. The lean 4 elaboration of <code>(&lt;- tac)</code> in do notation is an example of this kind of transformation</p>",
        "id": 222164691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610188234
    },
    {
        "content": "<p>But informally, the idea is pretty simple: for every occurrence of <code>some h</code> and <code>some_spec h</code>, you replace them with new variables <code>x</code> and <code>px</code>, and then at the nearest enclosing proof term you wrap it in <code>exists.cases_on h (\\lam x px, _)</code></p>",
        "id": 222164774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610188373
    },
    {
        "content": "<p>For theorem statements, like the example I gave above, you use <code>\\forall x px, _</code> instead as additional arguments to the implication being proved</p>",
        "id": 222164868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610188501
    }
]