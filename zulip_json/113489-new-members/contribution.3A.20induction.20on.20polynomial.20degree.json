[
    {
        "content": "<p>Hi, it seems that (strong) induction on <code>polynomial.nat_degree</code> isn't supported yet, so as a first contribution to mathlib I'd like to add that. Here is the code I have, inspired by their analogues <code>nat.strong_induction_on</code> and <code>nat.case_strong_induction_on</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree.definitions</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial_nat_degree_strong_induction_on</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">p'.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">p'</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n        <span class=\"n\">p.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">p.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hd</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">h'</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial_nat_degree_case_strong_induction_on</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">p.nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">p'.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">p'</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n        <span class=\"n\">p.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">p.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hd</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.case_strong_induction_on</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hz</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hi</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>If it is ok, can I have write access to the mathlib repository? My username is greysome.</p>",
        "id": 263961170,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1638855751
    },
    {
        "content": "<p>I'd argue that strong induction on nat_degree is supported, and the spelling is pretty much what you have there. I don't think it makes much sense to duplicate nat strong_induction for every nat-valued property of other types.</p>",
        "id": 263968525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638863919
    },
    {
        "content": "<p>Does <code>induction h : p.nat_degree using nat.strong_induction_on</code> do what you need?</p>",
        "id": 263968635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638864007
    },
    {
        "content": "<p>ohh, I didn't know that was possible. thanks!</p>",
        "id": 263971102,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1638866123
    },
    {
        "content": "<p>hmm wait actually there is a difference, because in the induction hypothesis there is an additional quantifier (namely, if for all m &lt; n the property holds for <em>all</em> polynomials of degree m, then the property holds for all polynomials of degree n)</p>",
        "id": 263971586,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1638866466
    },
    {
        "content": "<p>I think <code>induction h : p.nat_degree using nat.strong_induction_on with i hi generalizing p</code> would be correct</p>",
        "id": 263971892,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1638866674
    },
    {
        "content": "<p>Ah, I forgot that it didn't generalize that automatically</p>",
        "id": 263972846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638867329
    },
    {
        "content": "<blockquote>\n<p>If it is ok, can I have write access to the mathlib repository? My username is greysome.</p>\n</blockquote>\n<p>I've sent an invite; even though I think the lemmas above are redundant, you're certainly welcome to contribute other things to mathlib</p>",
        "id": 263975231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638868807
    },
    {
        "content": "<p>This induction is a bit dull, but there are many inductions on the polynomials that we don't have. For example, <code>p P -&gt; p Q -&gt; p (P * Q)</code> and <code>p (X - a)^n</code></p>",
        "id": 263978688,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638870899
    },
    {
        "content": "<p>That also needs <code>p y</code> for y in the base field or some similar condition</p>",
        "id": 263978906,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638871058
    },
    {
        "content": "<p>A variant of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.rec_on_horner\">docs#polynomial.rec_on_horner</a> for <code>mv_polynomial</code> might be nice too</p>",
        "id": 263981485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638872609
    },
    {
        "content": "<p>Since we're already on this topic, there are some other results on polynomials that I've needed, which are oddly missing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">nat_degree_pow_le</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p.nat_degree</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coeff_pow_degree_mul_degree</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p.nat_degree</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p.leading_coeff</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This seems like a reasonable contribution since there's already <code>nat_degree_mul_le</code> and <code>coeff_mul_degree_add_degree</code></p>",
        "id": 264268414,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1639037936
    },
    {
        "content": "<p>And maybe do the constant coeff version as well?</p>",
        "id": 264269088,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639038454
    },
    {
        "content": "<p>Note we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.nat_degree_pow\">docs#polynomial.nat_degree_pow</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.nat_degree_pow'\">docs#polynomial.nat_degree_pow'</a>; the new pow lemma should reference those and maybe go somewhere near them</p>",
        "id": 264269604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639038843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/contribution.3A.20induction.20on.20polynomial.20degree/near/264269088\">said</a>:</p>\n<blockquote>\n<p>And maybe do the constant coeff version as well?</p>\n</blockquote>\n<p>Which specific result is that?</p>",
        "id": 264270041,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1639039123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/contribution.3A.20induction.20on.20polynomial.20degree/near/264269604\">said</a>:</p>\n<blockquote>\n<p>Note we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.nat_degree_pow\">docs#polynomial.nat_degree_pow</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.nat_degree_pow'\">docs#polynomial.nat_degree_pow'</a>; the new pow lemma should reference those and maybe go somewhere near them</p>\n</blockquote>\n<p>Ah ok I'll try that</p>",
        "id": 264270112,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1639039174
    },
    {
        "content": "<p>If you're looking for more contributions, we should probably have the <code>degree</code> variant of that <code>nat.degree</code> lemma</p>",
        "id": 264270455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639039389
    },
    {
        "content": "<p>Right now I'm trying to copy the proof for <code>nat_degree_mul_le</code> in <code>nat_degree_pow_le</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree.definitions</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_pow_le</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">nat_degree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat_degree_le_of_degree_le</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">degree_pow_le</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">with_bot.coe_mul</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So I'm stuck at showing that <code>↑n * p.degree ≤ ↑n * ↑p.nat_degree</code>. The other proof continued with <code>refine add_le_add _ _</code>, but the corresponding <code>refine mul_le_mul_left' _ _</code> doesn't work. I suspect it's because <code>with_bot.ordered_add_comm_monoid</code> has been established but not <code>with_bot.ordered_comm_monoid</code>. Hopefully I'm on the right track with this?</p>",
        "id": 264282450,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1639046355
    },
    {
        "content": "<p><del>Is it easier to prove the <code>degree_pow_le</code> version first?</del></p>",
        "id": 264283999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639047299
    },
    {
        "content": "<p>Then do case analysis on whether <code>p = 0</code> to handle the <code>\\bot</code> and <code>nat</code> cases?</p>",
        "id": 264284054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639047329
    },
    {
        "content": "<p>Yeah, I don't think getting to a goal like <code>p.degree ≤ ↑(p.nat_degree)</code> is going to help you</p>",
        "id": 264284288,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1639047435
    },
    {
        "content": "<p>Maybe direct induction on n is far less painful?</p>",
        "id": 264284482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639047515
    },
    {
        "content": "<p><code>rw [nat.cast_with_bot, degree_eq_nat_degree hp]</code> will help though, after the case split</p>",
        "id": 264284541,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1639047540
    },
    {
        "content": "<p>This is a mess, but works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_pow_le</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">nat_degree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hpn</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hpn</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hpn</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">with_bot.coe_le_coe</span><span class=\"o\">,</span> <span class=\"n\">with_bot.coe_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">degree_eq_nat_degree</span> <span class=\"n\">hpn</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">degree_eq_nat_degree</span> <span class=\"n\">hp</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">degree_pow_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264285175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639047857
    },
    {
        "content": "<p>Six lines with either approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_pow_le</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">nat_degree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat_degree_le_of_degree_le</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">degree_pow_le</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">with_bot.coe_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_with_bot</span><span class=\"o\">,</span> <span class=\"n\">degree_eq_nat_degree</span> <span class=\"n\">hp</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_pow_le'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">nat_degree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">nat_degree_mul_le</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_left</span> <span class=\"n\">ih</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_mul</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264285207,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1639047881
    },
    {
        "content": "<p>I think proving it in terms of the <code>degree</code> version is nicer than using induction</p>",
        "id": 264285291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639047940
    },
    {
        "content": "<p>despite the fact that the induction proof has fewer characters, is more primitive, and probably compiles more quickly? ;-)</p>",
        "id": 264285386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639047976
    },
    {
        "content": "<p>Yes, because the one proved from <code>degree</code> gives a template for \"how to prove things about <code>nat_degree</code> from things about <code>degree</code>\" that you can blindly repeat</p>",
        "id": 264285440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639048021
    },
    {
        "content": "<p>Of course, it would also be good to make the proof less messy.</p>",
        "id": 264285486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639048048
    },
    {
        "content": "<p>Thanks, I'll try the above approaches then. I was initially worried that the proof will look different from the existing proofs, but I guess it's good to have something working at least</p>",
        "id": 264288286,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1639049768
    }
]