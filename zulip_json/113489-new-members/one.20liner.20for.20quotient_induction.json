[
    {
        "content": "<p>I wrote the following lemmas to prove a basic property for sum of members of list/multiset : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mport</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.multiset.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.sum_le_sup_mul_length</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.sum</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">s.length</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.sum_cons</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.length_cons</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat.add_le_add</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"o\">,</span>  <span class=\"c1\">--</span>\n    <span class=\"n\">apply</span> <span class=\"n\">list.mem_cons_of_mem</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">list.mem_cons_self</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">multiset.sum_le_sup_mul_card</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m.sum</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">m.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quotient.induction_on</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">list.sum_le_sup_mul_length</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a way to write a one-line proof of the lemma for multisets ?<br>\n(The problem is the necessity to <code>revert a</code>.)</p>\n<p>(By the way : Is it the proper way to prove such a lemma ?)</p>",
        "id": 265606125,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640028409
    },
    {
        "content": "<p>This is your proof again, but in one line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">multiset.sum_le_sup_mul_card</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">m.sum</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">m.card</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient.induction_on</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">list.sum_le_sup_mul_length</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 265606481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640028607
    },
    {
        "content": "<p>I just move the a to after the colon. Usually this is not what is done, because <code>∀</code>s after colons usually means more unnecessary <code>intro</code>s. But moving stuff before or after the colon doesn't change the type of <code>multiset.sum_le_sup_mul_card</code>; indeed <code>#check @multiset.sum_le_sup_mul_card</code> shows you that actually everything gets moved after the colon in the end :-)</p>",
        "id": 265606597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640028695
    },
    {
        "content": "<p>Another approach is to write <code>induction m using quotient.induction_on</code> instead of <code>apply quotient.induction_on m,</code>, which avoids the need for <code>revert</code></p>",
        "id": 265632300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640046233
    }
]