[
    {
        "content": "<p>I've noticed in a few of my proofs that use complete_lattice, that I need to add noncomputable to the declaration. When I dug deep I found that it was relying on classical LEM<br>\nHowever, I've used the by_contradiction tactic in a few places where I don't think the goal can be matched against an instance for decidable. Is my assumption wrong that proof by contradiction, in general, requires LEM?<br>\nWhy am I not required to preface my declaration with noncomputable?</p>",
        "id": 283928496,
        "sender_full_name": "Tumbleweed",
        "timestamp": 1653506114
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.by_contradiction/src\">src#tactic.by_contradiction</a> should answer your question</p>",
        "id": 283929129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653506442
    },
    {
        "content": "<p>In particular, these two lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"n\">mk_mapp</span> <span class=\"bp\">`</span><span class=\"n\">decidable.by_contradiction</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">eapply</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">mk_mapp</span> <span class=\"bp\">`</span><span class=\"n\">classical.by_contradiction</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">tgt</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">eapply</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n</code></pre></div>",
        "id": 283929163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653506462
    },
    {
        "content": "<p>Which says \"try <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable.by_contradiction\">docs#decidable.by_contradiction</a> first, and if that fails try <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.by_contradiction\">docs#classical.by_contradiction</a>\"</p>",
        "id": 283929203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653506492
    },
    {
        "content": "<p>Oh, hang on:</p>\n<blockquote>\n<p>I've noticed in a few of my proofs that use complete_lattice, that I need to add noncomputable to the declaration.</p>\n</blockquote>\n<p>Proofs (aka <code>lemma</code>) don't need <code>noncomputable</code>, only definitions (aka <code>def</code>) do</p>",
        "id": 283929309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653506537
    },
    {
        "content": "<p><code>by_contradiction</code> is only ever usable in a proof, so will never cause you to need <code>noncomputable</code>; because nothing is being computed in the first place.</p>",
        "id": 283929353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653506565
    },
    {
        "content": "<p>Awesome I think the difference between def/lemma answers things, thanks :)</p>",
        "id": 283929808,
        "sender_full_name": "Tumbleweed",
        "timestamp": 1653506806
    },
    {
        "content": "<p>Note that this is because <code>lemma</code>/<code>theorem</code> is basically a definition that always has a type that lives in <code>Prop</code> and since Lean has proof irrelevance there is never a need to calculate the value of an element of a type in<code>Prop</code>.</p>",
        "id": 283930171,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1653507007
    }
]