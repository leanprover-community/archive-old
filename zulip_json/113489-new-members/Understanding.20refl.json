[
    {
        "content": "<p>I am trying to truly understand the fundamentals of proving using type theory. In the following code I have implemented my own equivalence relation and are proving a few things with and without using tactics. That seems to work. However the rec_on function (used in meq.symmetry_2) is a bit magical to me. I can get it to do what I want, by following the types, but it isn't clear to me why it works?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">my_eq</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">meq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">meq</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">--private def refl := @meq.refl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">meq.symmetry</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">meq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">meq</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">meq.symmetry_2</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">exy</span> <span class=\"o\">:</span> <span class=\"n\">meq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">meq</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">meq.rec_on</span> <span class=\"n\">exy</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">meq.refl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">meq.transitive</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">meq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">meq</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">meq</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h1</span> <span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">meq.left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">exz</span> <span class=\"o\">:</span> <span class=\"n\">meq</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eyz</span> <span class=\"o\">:</span> <span class=\"n\">meq</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">meq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">ezy</span> <span class=\"o\">:=</span> <span class=\"n\">meq.symmetry</span> <span class=\"n\">eyz</span> <span class=\"k\">in</span>\n    <span class=\"n\">meq.transitive</span> <span class=\"n\">exz</span> <span class=\"n\">ezy</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">meq.right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">exy</span> <span class=\"o\">:</span> <span class=\"n\">meq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exz</span> <span class=\"o\">:</span> <span class=\"n\">meq</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">meq</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">eyx</span> <span class=\"o\">:=</span> <span class=\"n\">meq.symmetry</span> <span class=\"n\">exy</span> <span class=\"k\">in</span>\n    <span class=\"n\">meq.transitive</span> <span class=\"n\">eyx</span> <span class=\"n\">exz</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">my_eq</span>\n</code></pre></div>",
        "id": 246366960,
        "sender_full_name": "Morten Brodersen",
        "timestamp": 1626597314
    },
    {
        "content": "<p><code>meq</code> is an indexed inductive type which is true only when the two indices are the same. (That is, it's another way to write <code>=</code>.) The eliminator for this type says that any property <code>C x y</code> is true for all <code>x, y</code> such that <code>meq x y</code> if <code>C x x</code> is true for all <code>x</code>. In normal parlance we would call this the substitution property of equality: if <code>x = y</code> and <code>P x</code> is true then <code>P y</code> is as well. So proving symmetry is as simple as \"recursion on equality\": we know <code>meq x y</code> so we can assume <code>x</code> and <code>y</code> are the same; thus we are proving <code>meq x x</code> and <code>meq.refl</code> works</p>",
        "id": 246367984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626598996
    },
    {
        "content": "<p>Thanks Mario! Much appreciated.</p>",
        "id": 246369506,
        "sender_full_name": "Morten Brodersen",
        "timestamp": 1626601871
    },
    {
        "content": "<p>OK here is how far I get reasoning about meq.rec_on:</p>\n<p>Starting with the type signature:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">meq.rec_on</span> <span class=\"o\">:</span> <span class=\"n\">meq</span> <span class=\"bp\">?</span><span class=\"n\">M_3</span> <span class=\"bp\">?</span><span class=\"n\">M_4</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">M_1</span><span class=\"o\">},</span> <span class=\"bp\">?</span><span class=\"n\">M_2</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">M_2</span> <span class=\"bp\">?</span><span class=\"n\">M_3</span> <span class=\"bp\">?</span><span class=\"n\">M_4</span>\n</code></pre></div>\n<p>and substituting to match the required end type (meq y x) and arbitrary type A:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">meq.rec_on</span> <span class=\"o\">:</span> <span class=\"n\">meq</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">},</span> <span class=\"n\">meq</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">meq</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>we still require (meq y x) to prove (meq y x). Which we obviously don't have?</p>",
        "id": 246370298,
        "sender_full_name": "Morten Brodersen",
        "timestamp": 1626603334
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 246370510,
        "sender_full_name": "Morten Brodersen",
        "timestamp": 1626603733
    },
    {
        "content": "<p>You filled in ?M_2 backwards</p>",
        "id": 246371382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626605450
    },
    {
        "content": "<p><code>#check @meq.rec_on</code> is more insightful as it doesn't show the <code>?</code>s</p>",
        "id": 246371399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626605498
    },
    {
        "content": "<p>Here ?M_2 is being assigned <code>(\\lam y x, meq x y)</code>. Note that when you plug in <code>y, x</code> to this you get <code>meq x y</code> which is the goal, and when you plug in <code>x, x</code> as in the minor premise you get <code>meq x x</code> which is the thing we can prove by refl</p>",
        "id": 246371541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626605751
    },
    {
        "content": "<p>I don't think so? I tried both manually and using the editor to auto swap. Here is what I substitute:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">meq.rec_on</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">ᾰ</span> <span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">},</span>\n    <span class=\"n\">meq</span> <span class=\"n\">ᾰ</span> <span class=\"n\">ᾰ_1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">ᾰ</span> <span class=\"n\">ᾰ_1</span>\n\n<span class=\"n\">C</span>   <span class=\"bp\">-&gt;</span> <span class=\"n\">meq</span>\n<span class=\"n\">ᾰ</span>   <span class=\"bp\">-&gt;</span> <span class=\"n\">y</span>\n<span class=\"n\">ᾰ_1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"n\">meq.rec_on</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">meq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">},</span>\n    <span class=\"n\">meq</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">meq</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">meq</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 246371543,
        "sender_full_name": "Morten Brodersen",
        "timestamp": 1626605753
    },
    {
        "content": "<p>You don't want to assign <code>C := meq</code> because that doesn't get you anywhere, as you point out</p>",
        "id": 246371695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606002
    },
    {
        "content": "<p>the trick is to use <code>C := \\lam y x, meq x y</code> instead</p>",
        "id": 246371756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606018
    },
    {
        "content": "<p>because then <code>C y x</code>, which is what you want to show, works out to <code>meq x y</code> which is actually the goal</p>",
        "id": 246371776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606063
    },
    {
        "content": "<p>lean will work backwards from the goal to figure out what C should be</p>",
        "id": 246371796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606121
    },
    {
        "content": "<p>OK that makes sense. What confuses me is the (C x x). It doesn't allow you to use two different args? In other words, you can't do (C y x)?</p>",
        "id": 246371843,
        "sender_full_name": "Morten Brodersen",
        "timestamp": 1626606165
    },
    {
        "content": "<p>Note that it's an argument, so being more restrictive there is to your advantage</p>",
        "id": 246371850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606191
    },
    {
        "content": "<p>it's saying you <em>only</em> have to prove <code>C x x</code> rather than <code>C x y</code> for all x, y</p>",
        "id": 246371857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606209
    },
    {
        "content": "<p>in particular, if it wasn't then you wouldn't be able to finish the proof by refl</p>",
        "id": 246371864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606238
    },
    {
        "content": "<p>You can always use additional arguments beyond the listed ones, like say some other variable <code>a</code>, by using a choice for <code>C</code> that contains a free occurrence of <code>a</code></p>",
        "id": 246371910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606289
    },
    {
        "content": "<p>you can even choose not to generalize some of the arguments in the goal, for example you could take <code>C := \\lam _ _, meq x y</code> instead</p>",
        "id": 246371926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606334
    },
    {
        "content": "<p>that would be silly though because in that case <code>C x x</code> is <code>meq x y</code> so you won't have made any progress in the proof</p>",
        "id": 246371937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606359
    },
    {
        "content": "<p>But (C x x) is (\\lam y x, meq x y) x x = (\\lam x, meq x x) x = (meq x x) and not (meq x y)?</p>",
        "id": 246372005,
        "sender_full_name": "Morten Brodersen",
        "timestamp": 1626606455
    },
    {
        "content": "<p>I mean if you set <code>C</code> to <code>\\lam _ _, meq x y</code>, then <code>C x x = (\\lam _ _, meq x y) x x = meq x y</code></p>",
        "id": 246372068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606571
    },
    {
        "content": "<p>by underscores I mean an ignored argument, i.e. this is a constant function</p>",
        "id": 246372073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606589
    },
    {
        "content": "<p>Ahhhhh! I get it now. Because x and y is part of the lambda context so it can be accessed in C.</p>",
        "id": 246372087,
        "sender_full_name": "Morten Brodersen",
        "timestamp": 1626606603
    },
    {
        "content": "<p>Sorry that was exactly what you were saying by using _ _ :-) Thanks Mario this has been really helpful! Looking forward to reading your thesis.</p>",
        "id": 246372131,
        "sender_full_name": "Morten Brodersen",
        "timestamp": 1626606661
    },
    {
        "content": "<p>they are both available in the \"outer context\", and now C is giving you two more arguments to play with. By choosing whether to use them or not you decide how the goal is generalized</p>",
        "id": 246372132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606662
    },
    {
        "content": "<p>Yep exactly I get it now :-) Excellent!</p>",
        "id": 246372140,
        "sender_full_name": "Morten Brodersen",
        "timestamp": 1626606681
    },
    {
        "content": "<p>by the way, you can see the specific arguments lean used by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"k\">#print</span> <span class=\"n\">meq.symmetry_2</span>\n</code></pre></div>",
        "id": 246372144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606687
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">@</span><span class=\"n\">my_eq.meq.rec_on.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"n\">_x_1</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">my_eq.meq</span> <span class=\"n\">a</span> <span class=\"n\">_x_1</span> <span class=\"n\">_x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">exy</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"bp\">@</span><span class=\"n\">my_eq.meq.refl</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 246372150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606698
    },
    {
        "content": "<p>this part -&gt; <code>(λ (_x _x_1 : a), @my_eq.meq a _x_1 _x)</code> is what I wrote as <code>\\lam y x, meq x y</code> earlier</p>",
        "id": 246372206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606732
    },
    {
        "content": "<p>Yep. I fully understand it now Mario. I write functional compilers for a living but forgot about the lambda environment and mixing up x with x where I shouldn't.</p>",
        "id": 246372246,
        "sender_full_name": "Morten Brodersen",
        "timestamp": 1626606811
    }
]