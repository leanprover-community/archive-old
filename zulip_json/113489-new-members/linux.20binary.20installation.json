[
    {
        "content": "<p>I have two standalone linux binary installations 3.4.2 and 3.9.0 (nightly-2020-04-28), and I choose between these two by changing PATH in .bashrc. I have also installed mathlib (globally) running <code>leanproject global-install</code> in two different directories under ~/. (I made <code>~/.lean</code> a symbolic link, pointing to the correct mathlib directory, depending on which version of the binary I have in my PATH.  With the 3.4.2 binary and the corresponding mathlib, things are OK, except for that it is older. (E.g., analysis/special_functions is not in the mathlib corresponding to 3.4.2.) However, 3.9.0 with its mathlib hangs, even on a simple input file with two lines </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"k\">#check</span> <span class=\"n\">real</span>\n</code></pre></div>\n\n<p>(<code>top</code> shows <code>lean</code> using 600-700% CPU and 15-20% memory.) Using the newer mathlib with 3.4.2 binary throws up a lot of errors, the first of which is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">..../</span><span class=\"n\">_target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">control</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"mi\">89</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">bind_map_eq_seq</span> <span class=\"n\">f</span>\n</code></pre></div>\n\n<p>I wonder if anyone has come across similar problems, and have any work-around.</p>",
        "id": 211344268,
        "sender_full_name": "Manoj Kummini",
        "timestamp": 1601099628
    },
    {
        "content": "<p>I think the work-around is to not attempt to manage Lean versions by hand, but instead follow the <a href=\"https://leanprover-community.github.io/get_started.html#regular-install\">installation instructions</a> and use <code>elan</code> to automatically select the Lean version, then specify the lean version you want on a per-project basis in your <code>leanpkg.toml</code> file.</p>",
        "id": 211344630,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601100362
    },
    {
        "content": "<p>I would strongly recommend throwing out whatever you created with <code>global-install</code>, and similarly throwing out an symbolic links you've made for <code>~/.lean</code>. Doing anything like this is inviting disaster, and makes it impossible for us to help.</p>",
        "id": 211344658,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601100421
    }
]