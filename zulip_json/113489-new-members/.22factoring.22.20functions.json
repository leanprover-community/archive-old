[
    {
        "content": "<p>Code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">ratio_test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"n\">L</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h₃</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">abs_sub_lt_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">imp_and_distrib</span><span class=\"o\">,</span> <span class=\"n\">forall_and_distrib</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">Ha</span> <span class=\"n\">Hb</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"bp\">;</span> <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Ha</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">)},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">N</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">N</span><span class=\"o\">)))</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">specialize</span> <span class=\"n\">Ha</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">Ha</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">lim₁</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ratio_test_aux</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"n\">h₄</span> <span class=\"n\">h₅</span> <span class=\"n\">h₆</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Tactic state:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">ratio_test_aux</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"n\">h₄</span> <span class=\"n\">h₅</span> <span class=\"n\">h₆</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h₆</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"o\">)</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">Hb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">Ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>How do I \"factor\" the functions in h6 so that ratio_test_aux will accept them as input?</p>",
        "id": 159178302,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550859565
    },
    {
        "content": "<p>It looks like the problem is just that <code>a (n + N + 1)</code> is not the same as <code>a ((n + 1) + N)</code></p>",
        "id": 159178610,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550859742
    },
    {
        "content": "<p><code>simpa using h6</code> should work.</p>",
        "id": 159178616,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550859752
    },
    {
        "content": "<p><code>set_option pp.beta true</code> can make this kind of error easier to spot by beta-reducing the lambdas in the expected type</p>",
        "id": 159178635,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550859776
    },
    {
        "content": "<p>simpa using h6 in the argument?</p>",
        "id": 159178814,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550859909
    },
    {
        "content": "<p>you are right, it seems to be just the order of the terms.</p>",
        "id": 159178993,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550860047
    },
    {
        "content": "<p>Calle -- a year or so ago I was always asking these kinds of questions, because I did not know what Lean could or could not do. One rule of thumb is that Lean will happily identify two terms if they are <em>definitionally equal</em> -- i.e you do not explain to Lean that you need to change something to a definitionally equal thing, Lean just knows -- so it really helps if you have a good understand of what definitionally equal means. The actual definition is <a href=\"https://leanprover.github.io/reference/expressions.html#computation\" target=\"_blank\" title=\"https://leanprover.github.io/reference/expressions.html#computation\">here</a>, and it's filed under \"computation\", which is something which took a lot of getting used to. You wanted to do \"beta reduction\" as you can see from that link, but if X reduces to Y via beta reduction then X and Y are definitionally equal (as you can see from the definition of definitionally equal just a bit further down) so that's why we don't have to bother with these things normally. What you need to do is to figure out which equalities are theorems rather than definitional equalities, and tell Lean to apply those theorems.</p>",
        "id": 159182963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550862863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> What are you hoping for when you write <code>simp only,</code>?</p>",
        "id": 159184873,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550864297
    },
    {
        "content": "<p>Kenny probably told him to do that.</p>",
        "id": 159184985,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550864403
    },
    {
        "content": "<p>I'm specifically talking about <code>simp only</code> without any argument</p>",
        "id": 159185043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550864443
    },
    {
        "content": "<p>with the comma right after \"only\"</p>",
        "id": 159185053,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550864456
    },
    {
        "content": "<p>Sorry, dinner is calling</p>",
        "id": 159185080,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550864477
    },
    {
        "content": "<p>Maybe it's similar to dsimp?</p>",
        "id": 159185099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550864488
    },
    {
        "content": "<p>I have no idea actually</p>",
        "id": 159185118,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550864506
    },
    {
        "content": "<p>because code works without it</p>",
        "id": 159185124,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550864513
    },
    {
        "content": "<p>I think it got left there after I gradually updated the code</p>",
        "id": 159185217,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550864593
    },
    {
        "content": "<p>So in the end it had no function</p>",
        "id": 159185223,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550864604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> I suggest you could study the following variation:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">ratio_test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"n\">L</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">limit_start_irrelevant</span> <span class=\"bp\">_</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ratio_test_aux</span> <span class=\"bp\">_</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span><span class=\"bp\">!</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ineq</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">L</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span>  <span class=\"n\">linarith</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">le_abs_self</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)],</span>\n    <span class=\"k\">calc</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add</span> <span class=\"n\">ineq</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>You'll see in particular how backward reasoning makes some things easier in this computerized math world.</p>",
        "id": 159188416,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550867482
    },
    {
        "content": "<p>Thank you! Since you last saw my code I have made a bunch of the assumptions in limit_start_irrelevant implicit and now your code doesn't seem to be working .<br>\nCode:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">limit_start_irrelevant</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">Hε</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">Hε</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">Hn</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ineq</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">Hn</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_sub_right_of_add_le</span> <span class=\"n\">Hn</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_le_self</span> <span class=\"n\">n</span> <span class=\"n\">N</span><span class=\"o\">)),</span>\n  <span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_sub_right_of_add_le</span> <span class=\"n\">Hn</span><span class=\"o\">)),</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_assoc</span> <span class=\"n\">ineq</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>It gives following error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span>\n  <span class=\"err\">↑</span><span class=\"n\">N</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N_1</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">N</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>If I remove N in your line <code>apply limit_start_irrelevant _ N</code> I get following tactic state:</p>\n<div class=\"codehilite\"><pre><span></span>2 goals\na : ℕ → ℝ,\nL : ℝ,\nh : is_limit (λ (n : ℕ), |a (n + 1) / a n| ) L,\nh₁ : L &lt; 1,\nh₂ : ∀ (n : ℕ), a n ≠ 0,\nN : ℕ,\nH : ∀ (n : ℕ), n ≥ N → |(λ (n : ℕ), |a (n + 1) / a n| ) n - L| &lt; (1 - L) / 2\n⊢ ℕ\n\na : ℕ → ℝ,\nL : ℝ,\nh : is_limit (λ (n : ℕ), |a (n + 1) / a n| ) L,\nh₁ : L &lt; 1,\nh₂ : ∀ (n : ℕ), a n ≠ 0,\nN : ℕ,\nH : ∀ (n : ℕ), n ≥ N → |(λ (n : ℕ), |a (n + 1) / a n| ) n - L| &lt; (1 - L) / 2\n⊢ is_limit (λ (n : ℕ), a (n + ?m_1)) 0\n</pre></div>",
        "id": 159190045,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550868895
    },
    {
        "content": "<p>You shouldn't make k implicit</p>",
        "id": 159190253,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550869077
    },
    {
        "content": "<p>As you can see, Lean couldn't figure it out</p>",
        "id": 159190296,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550869084
    },
    {
        "content": "<p>Your first goal (in the latest message you wrote) is asking \"who is k?\"</p>",
        "id": 159190329,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550869107
    },
    {
        "content": "<p>I think even making <code>a</code> implicit is fishy</p>",
        "id": 159190380,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550869154
    },
    {
        "content": "<p>Although in your main proof this will be ok</p>",
        "id": 159190385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550869163
    },
    {
        "content": "<p>Ah, I see. It worked in my main proof but I guess that was because I explictly had the limit?</p>",
        "id": 159190412,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550869184
    },
    {
        "content": "<p>A smarter move if you want to optimize the main proof is to change <code>n+k</code> into <code>k+n</code> in the assumption <code>h</code></p>",
        "id": 159190504,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550869222
    },
    {
        "content": "<p>This way you won't hit that <code>n+N+1</code> vs <code>N+n+1</code> issue</p>",
        "id": 159190523,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550869243
    },
    {
        "content": "<p>yes</p>",
        "id": 159190534,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550869251
    },
    {
        "content": "<p>With this change you can get the main proof down to:</p>",
        "id": 159190662,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550869349
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">ratio_test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"n\">L</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">limit_start_irrelevant</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ratio_test_aux</span> <span class=\"bp\">_</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n    <span class=\"n\">set</span><span class=\"bp\">!</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ineq</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">L</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span>  <span class=\"n\">linarith</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">le_abs_self</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)],</span>\n    <span class=\"k\">calc</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"n\">L</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add</span> <span class=\"n\">ineq</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span>       <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159190667,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550869354
    },
    {
        "content": "<p>ah, thank you!</p>",
        "id": 159190722,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550869407
    },
    {
        "content": "<p>What is the motivation for using set! instead of let?</p>",
        "id": 159190812,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550869475
    },
    {
        "content": "<p><code>set!</code> removes the complicated stuff from everywhere</p>",
        "id": 159191675,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550870180
    },
    {
        "content": "<p>One more free trick in nat subtraction fighting (while whaiting for <span class=\"user-mention\" data-user-id=\"116585\">@Seul Baek</span>  to save us all). You can study</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">limit_start_irrelevant</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">Hε</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">Hε</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">Hn</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_sub_left_of_add_le</span> <span class=\"n\">Hn</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">),</span>\n  <span class=\"n\">convert</span> <span class=\"n\">H</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_add</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_sub</span><span class=\"o\">],</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The idea is that, after fighting to get <code>n - k ≥ N</code> you can escape to integer heaven using <code>int.coe_nat_inj</code>.</p>",
        "id": 159192945,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550871088
    },
    {
        "content": "<p>I dont quite get how convert works. Its like refine but can also add goals based on discrepency between goal and input?</p>",
        "id": 159197220,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550874669
    },
    {
        "content": "<p>yes</p>",
        "id": 159197236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550874686
    },
    {
        "content": "<p>It tries hard to bridge the gap between what you give it and the goal</p>",
        "id": 159197263,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550874708
    },
    {
        "content": "<p>How \"close\" to the goal does the input need to be for lean to detect each \"discrepency\" then?</p>",
        "id": 159197315,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550874725
    },
    {
        "content": "<p>like... Is there a rule I can follow? Or should I just try it whenever it would be convenient IF it worked.</p>",
        "id": 159197347,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550874773
    },
    {
        "content": "<p>Under the hood it uses the <code>congr'</code> tactic. If this tells you nothing then you need to study <code>congr'</code> first</p>",
        "id": 159197376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550874797
    },
    {
        "content": "<p>okay, I will read up on <code> congr'</code> then</p>",
        "id": 159197450,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550874847
    },
    {
        "content": "<p><code>convert blah</code> just means that you want the goal to be proved by <code>blah</code> and so ask me about all the places where this is not exactly right</p>",
        "id": 159201273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550878867
    },
    {
        "content": "<p>I would love if I could have a bit more fine-grained control on <code>convert</code>. With <code>congr'</code> I can say how deep it should go. I would sometimes like to have <code>convert' n</code>. Because if my goal is <code>foo long_expr (bar (x * y * z))</code> and I have an assumption <code>this : foo long_expr (bar (y * x * z))</code>, then <code>convert this</code> will give me goals <code>x = y</code> and <code>y = x</code>, which is very unhelpful. It should of course give me 1 goal <code>x * y * z = y * x * z</code>.</p>",
        "id": 159214790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550899617
    },
    {
        "content": "<p><code>convert this using 2</code>  (I think)</p>",
        "id": 159216082,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550902220
    },
    {
        "content": "<p>Aaah, I think I tried <code>convert 2 using this</code>... which feels more in line with <code>simpa</code>... but anyway. I'll try this next time I need it.</p>",
        "id": 159216097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550902304
    }
]