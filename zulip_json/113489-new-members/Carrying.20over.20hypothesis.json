[
    {
        "content": "<p>I have two definitions</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This fails, because in the definition of g it does not know that <code>a\\ne b</code>, which is required for <code>f</code>, even though it is a hypothesis to <code>g</code>. We can fix this with defining <code>g</code> as <code>@f α a b h</code> . However, in the actual context we are working in <code>@f α a b h</code> is very long and has to be written fairly often with different parameters. What can we do?</p>",
        "id": 205684955,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1596293995
    },
    {
        "content": "<p><code>[h : a ≠ b]</code> is strange: <code>≠</code> is not a class</p>",
        "id": 205685110,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596294175
    },
    {
        "content": "<p>I am not sure why that is an objection? How do you suggest that we define f such that it tries to derive <code>a\\ne b</code> from the context instead of having to explicitly give it as an argument?</p>",
        "id": 205685242,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1596294413
    },
    {
        "content": "<p>I think you want to use <code>{}</code> instead of <code>[]</code></p>",
        "id": 205685311,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1596294512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113489-new-members/topic/Carrying.20over.20hypothesis/near/205685311\">said</a>:</p>\n<blockquote>\n<p>I think you want to use <code>{}</code> instead of <code>[]</code></p>\n</blockquote>\n<p>That changes nothing as far as I can tell.</p>",
        "id": 205685378,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1596294626
    },
    {
        "content": "<p>how do you expect lean to do the inference?</p>",
        "id": 205685385,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596294636
    },
    {
        "content": "<p>I mean it wants me to prove this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n\n<p>Don't you think that is rather silly?</p>",
        "id": 205685477,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1596294811
    },
    {
        "content": "<p>only classes go to the typeclass inference system</p>",
        "id": 205685519,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596294892
    },
    {
        "content": "<p>maybe you can try <code>attribute [class] ne</code> at the beginning</p>",
        "id": 205685528,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596294907
    },
    {
        "content": "<p>i.e.:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">ne</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205685544,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596294957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> so why don't we make <code>ne</code> a class?</p>",
        "id": 205685590,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596294984
    },
    {
        "content": "<p>what? This is silly</p>",
        "id": 205685662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596295089
    },
    {
        "content": "<p>I can confirm <code>attribute [class] ne</code> fixes the problem. I see <code>variables</code> was supposed to be <code>parameters</code> for my mwe to make sense.</p>",
        "id": 205685672,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1596295114
    },
    {
        "content": "<p>You could say the same thing about any term at all</p>",
        "id": 205685673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596295115
    },
    {
        "content": "<p>only props, or else you'd get diamonds ;-)</p>",
        "id": 205685676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596295127
    },
    {
        "content": "<p>maybe a better choice is <code>(h : a ≠ b . tactic.assumption)</code></p>",
        "id": 205685702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596295176
    },
    {
        "content": "<p>If you are using parameters for <code>a</code> and <code>b</code>, you may as well use it for  <code>(h : a ≠ b)</code> too and then you won't have this problem</p>",
        "id": 205685757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596295269
    },
    {
        "content": "<p><code>(h : a ≠ b . tactic.assumption)</code> works for the mwe but somehow fails in our actual problem. That a and b are both parameters is only for the mwe. Maybe a more faithfull mwe would be</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">ne</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">alpha</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">alpha</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205686166,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1596296039
    },
    {
        "content": "<p>Why not just make a and b implicit but ask for h explicitly? It seems like by far the easiest method.</p>",
        "id": 205686408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596296453
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205686433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596296521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Carrying.20over.20hypothesis/near/205686408\">said</a>:</p>\n<blockquote>\n<p>Why not just make a and b implicit but ask for h explicitly? It seems like by far the easiest method.</p>\n</blockquote>\n<p>This works quite well. It feels a bit wrong somehow, but not as wrong as making \\ne a class.</p>",
        "id": 205686932,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1596297367
    },
    {
        "content": "<p>I typically do things similar to kevin's suggestion. I think of it as a function that takes in \"two distinct elements\" as an argument, and I forget the \"implementation detail\" that the one argument is literally a proof of <code>\\ne</code></p>",
        "id": 205686958,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596297428
    },
    {
        "content": "<p>Thank you all for the interesting discussion. I still have a long way to go before I get a feel of what the canonical way to do things is in Lean.</p>",
        "id": 205688130,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1596299183
    },
    {
        "content": "<p>to the extent that the canon exists, it's forged by seeing what works and what doesn't at the mathlib scale; in particular the canon is still very much evolving</p>",
        "id": 205688523,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596299727
    }
]