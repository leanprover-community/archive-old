[
    {
        "content": "<p>I'm not sure if I want </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">ω</span> <span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"n\">ω</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"k\">in</span> <span class=\"bp\">⟨</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">to_nnreal</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>or to define a type <code>{x : nnreal // x ≤ 1}</code> and use that instead. Either way I don't know how to use the <a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/measure_space.html#measure_theory.probability_measure\">definition</a> to show that p &lt;=1.</p>\n<p>Context is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure_space</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"err\">Ω</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"err\">Ω</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">probability_measure</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">ω</span> <span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"n\">ω</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"k\">in</span> <span class=\"bp\">⟨</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">to_nnreal</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"c1\">-- y: ennreal := ⇑p {ω : Ω | X ω ≤ x}</span>\n<span class=\"c1\">-- ⊢ y.to_nnreal ≤ 1</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 208768265,
        "sender_full_name": "Iocta",
        "timestamp": 1599008523
    },
    {
        "content": "<p>e.g. <code>unfold</code> doesn't seem to work on <code>structure</code>s so idk how to expand the <code>set.univ = 1</code></p>",
        "id": 208768433,
        "sender_full_name": "Iocta",
        "timestamp": 1599008703
    },
    {
        "content": "<p>There is Icc 0 1 for the interval [0,1].</p>",
        "id": 208784925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599028541
    },
    {
        "content": "<p>How should I think about \"do I want a type or a set\"?</p>",
        "id": 208784991,
        "sender_full_name": "Iocta",
        "timestamp": 1599028582
    },
    {
        "content": "<p>You want a type</p>",
        "id": 208785021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599028642
    },
    {
        "content": "<p>They're a more primitive notion</p>",
        "id": 208785035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599028661
    },
    {
        "content": "<p>Of course I'm being a bit silly here. You want a set if you want to do intersections, unions etc</p>",
        "id": 208785104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599028708
    },
    {
        "content": "<p>But the target of a function had better be a type. There's a coercion from sets to types though, and if you keep your head it's not hard to use. A term of type weird up arrow s is a pair consisting of a term of type X and a proof that it's an element of s</p>",
        "id": 208785158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599028795
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">probability</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">interval</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">in</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">interval</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Do I want in the <code>_</code> real/nnreal/ennreal/complex/doesn't matter?</p>",
        "id": 208785678,
        "sender_full_name": "Iocta",
        "timestamp": 1599029340
    },
    {
        "content": "<p>anyway that leaves me with </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span> <span class=\"err\">⇑</span><span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span> <span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"n\">ω</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"err\">⊢</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">to_nnreal</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>but I can't <code>unfold probability_measure at p</code> to get the <code>&lt;= 1</code>, is there a similar thing to <code>unfold</code> but for <code>structure</code>s?</p>",
        "id": 208786400,
        "sender_full_name": "Iocta",
        "timestamp": 1599030004
    },
    {
        "content": "<p><del>#mwe</del> (sorry)</p>",
        "id": 208786474,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599030085
    },
    {
        "content": "<p>see above</p>",
        "id": 208786544,
        "sender_full_name": "Iocta",
        "timestamp": 1599030143
    },
    {
        "content": "<p>(updated)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure_space</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">set</span>\n\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"err\">Ω</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"err\">Ω</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">probability_measure</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">probability</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">interval</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">in</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">interval</span> <span class=\"o\">}</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">probability</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">ω</span> <span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"n\">ω</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"k\">in</span> <span class=\"bp\">⟨</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">to_nnreal</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 208786684,
        "sender_full_name": "Iocta",
        "timestamp": 1599030268
    },
    {
        "content": "<p>The API for <code>probability_measure</code> seems to be basically nonexistent. Someone should fix this!</p>",
        "id": 208786979,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599030557
    },
    {
        "content": "<p>At the moment it looks like you have argue that the measure is at most the measure of <code>set.univ</code>, which is then equal to one.</p>",
        "id": 208786999,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599030588
    },
    {
        "content": "<p>Obviously there should be a one-step lemma saying exactly that.</p>",
        "id": 208787004,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599030601
    },
    {
        "content": "<p>Note that it is probably a bad idea to let the probability take value in the set <code>[0, 1]</code>, because we keep adding or subtracting probabilities in proofs, and this type doesn't have an addition nor a subtraction. Why not simply use the real-valued function?</p>",
        "id": 208787365,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1599030944
    },
    {
        "content": "<p>sometimes I will want to use that the value is &lt;= 1, so I could put that into the type and then it would be readily available</p>",
        "id": 208787585,
        "sender_full_name": "Iocta",
        "timestamp": 1599031130
    },
    {
        "content": "<p>e.g. next I want to say the right-hand limit of the distribution function is 1. it seems convenient to know that it's increasing and  &lt;=1. Is that the wrong way to go?</p>",
        "id": 208787741,
        "sender_full_name": "Iocta",
        "timestamp": 1599031258
    },
    {
        "content": "<p>Just have a separate lemma that it is at most one. Bundling that into a subtype doesn't seem to gain much.</p>",
        "id": 208787962,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599031443
    },
    {
        "content": "<p>What do <code>h</code> and <code>H</code> mean?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure_space</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">set</span>\n\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"err\">Ω</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"err\">Ω</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">probability_measure</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">probability_1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">univ</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">ω</span> <span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"n\">ω</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">F_le_1</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"n\">X</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">pr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"c1\">-- tactic failed, there are unsolved goals</span>\n<span class=\"c1\">-- state:</span>\n<span class=\"c1\">-- Ω : Type u_1,</span>\n<span class=\"c1\">-- _inst_1 : measurable_space Ω,</span>\n<span class=\"c1\">-- p : measure Ω,</span>\n<span class=\"c1\">-- _inst_2 : probability_measure p,</span>\n<span class=\"c1\">-- X : Ω → ℝ,</span>\n<span class=\"c1\">-- x : ℝ,</span>\n<span class=\"c1\">-- pr : nnreal,</span>\n<span class=\"c1\">-- h : pr ∈ 1 x</span>\n<span class=\"c1\">-- ⊢ ∃ (b : nnreal) (H : b ∈ F p X x), b ≤ pr</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208790251,
        "sender_full_name": "Iocta",
        "timestamp": 1599033067
    },
    {
        "content": "<p>How can I solve this using <a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/measure_space.html#measure_theory.probability_measure\"><code>measure_univ</code></a>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure_space</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">set</span>\n\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"err\">Ω</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"err\">Ω</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">probability_measure</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 208880304,
        "sender_full_name": "Iocta",
        "timestamp": 1599077290
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">measure_univ</span>\n</code></pre></div>",
        "id": 208880693,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1599077461
    },
    {
        "content": "<p>You can find this by trying <code>by library_search</code> and following whatever advice it gives you, or by looking at the type of <code>measure_univ</code> and noticing it has no explicit argument: the fact that the measure is a probability measure is an assumption written between <code>[...]</code>, which means that Lean will check this assumption all by itself (through a process called typeclass inference that you don't need to understand when you start with Lean).</p>",
        "id": 208881239,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1599077722
    },
    {
        "content": "<p>Oh oops, not sure how I missed that.</p>",
        "id": 208881446,
        "sender_full_name": "Iocta",
        "timestamp": 1599077826
    },
    {
        "content": "<p>any idea what <code>h : pr ∈ 1 x</code> means in the above snippet? what is <code>1 x</code>? it looks like <code>1</code> is somehow a set-returning function...</p>",
        "id": 208881845,
        "sender_full_name": "Iocta",
        "timestamp": 1599078026
    },
    {
        "content": "<p>What made you think <code>intros x pr h</code> was a good idea?</p>",
        "id": 208882179,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599078188
    },
    {
        "content": "<p>It looks like you've opened up the definition of <code>ennreal</code></p>",
        "id": 208882195,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599078199
    },
    {
        "content": "<p>I didn't know what else to do, and <code>hint</code> suggested it</p>",
        "id": 208882323,
        "sender_full_name": "Iocta",
        "timestamp": 1599078243
    },
    {
        "content": "<p>I would unsuggest it</p>",
        "id": 208882401,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599078281
    },
    {
        "content": "<p>ok</p>",
        "id": 208882462,
        "sender_full_name": "Iocta",
        "timestamp": 1599078315
    },
    {
        "content": "<p>Your goal is to prove an inequality--<code>intros</code> isn't a logical step unless you know what that inequality really means.</p>",
        "id": 208882471,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599078318
    },
    {
        "content": "<p>presumably the argument you want is that whatever set we're taking the probability of, it's contained in <code>univ</code>, which has measure 1, so the original probability is at most 1</p>",
        "id": 208882719,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599078436
    },
    {
        "content": "<p>really, it should be a lemma that already exists</p>",
        "id": 208882738,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599078447
    },
    {
        "content": "<p>Is that lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/measure_space.html#measure_theory.measure_lt_top\"><code>measure_lt_top</code></a>?</p>",
        "id": 208890965,
        "sender_full_name": "Iocta",
        "timestamp": 1599082556
    }
]