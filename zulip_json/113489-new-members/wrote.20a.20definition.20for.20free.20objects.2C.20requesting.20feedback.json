[
    {
        "content": "<p>I tried to write a definition of free objects in a category over a type, and what I wrote type-checks, but I'm not certain it does the right thing, and if it does, I suspect there is a cleaner/better way to write it, but I don't know how.<br>\nMy code does not yet conform to the mathlib library style conventions.<br>\nWould anyone be willing to look over my code to evaluate whether it does the right thing, and whether there are substantially better ways I could organize it?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">concrete_category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span>\n\n<span class=\"c1\">-- typical example for c is a typeclass, like topological_space , with hom being something like continuous.</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"o\">{</span><span class=\"n\">alpha</span> <span class=\"n\">beta</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"n\">c</span> <span class=\"n\">alpha</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">c</span> <span class=\"n\">beta</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">alpha</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">beta</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n<span class=\"kn\">variable</span> <span class=\"n\">my_concrete_category</span> <span class=\"o\">:</span> <span class=\"n\">concrete_category</span> <span class=\"bp\">@</span><span class=\"n\">hom</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_free_over</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">bundled</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">generators_of_X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">generators_of_X</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">forget</span> <span class=\"n\">c</span> <span class=\"bp\">@</span><span class=\"n\">hom</span> <span class=\"n\">my_concrete_category</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">bundled</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">generators_of_X</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">forget</span> <span class=\"n\">c</span> <span class=\"bp\">@</span><span class=\"n\">hom</span> <span class=\"n\">my_concrete_category</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)),</span>\n    <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">has_hom</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">forget</span> <span class=\"n\">c</span> <span class=\"bp\">@</span><span class=\"n\">hom</span> <span class=\"n\">my_concrete_category</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">i</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">is_free_over</span>\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Thank you</p>",
        "id": 160850160,
        "sender_full_name": "drocta",
        "timestamp": 1552630219
    },
    {
        "content": "<p>Your lines are a bit long. Also, if you want syntax highlighting on Zulip, wrap your code like this:</p>\n<div class=\"codehilite\"><pre><span></span>```lean\n\n```\n</pre></div>",
        "id": 160860537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552643751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118229\">@drocta</span> I find this code quite hard to parse... you don't seem to be opposed to unicode, since you use <code>∃</code> and <code>∘</code>. So why don't you use <code>u₁ u₂</code> and <code>Type u₁ → Type u₂</code> and  <code>X ⟶ Y</code> to make things more readable?</p>",
        "id": 160860826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552643965
    },
    {
        "content": "<p>Thank you for your feedback! (have edited the previous comment to include the syntax highlighting)<br>\nI had been trying to avoid using unicode characters, but I kind of gave in for the exists-unique and the composition because I didn't see anything that would let me say something like <code>exists! (g : blah) , bluh</code> , and because I didn't remember the ascii way of saying function composition.<br>\nBut, I suppose I may as well give in and use the long arrow for the morphism types.<br>\nWould using it for the short arrows and the subscripts improve the clarity all that much?</p>\n<p>I had wanted to use <code>forget</code> without specifying the implicit parameters, or at least to define a version with them filled in before the place that I currently use forget, but when I change the definition to be like that ( :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_free_over</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">bundled</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">generators_of_X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">generators_of_X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">forget</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">bundled</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">generators_of_X</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">forget</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)),</span>\n    <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">forget</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">i</span>\n</pre></div>\n\n\n<p>)<br>\nIt no longer type-checks, and I'm not really sure why.<br>\nWhich is unfortunate, as I feel that that would make it much nicer to read. Though, I guess in that case it doesn't refer to the concrete category <code>my_concrete_category</code> anywhere so it makes some sense to me that it doesn't work.</p>\n<p>I have to admit that I don't really understand how the type classes work.<br>\nIs there a better way to refer to <code>(X : objects_of_my_concrete_category)</code> which would make the forget calls work without having to specify their implicit arguments?</p>\n<p>Thank you again!</p>",
        "id": 160929201,
        "sender_full_name": "drocta",
        "timestamp": 1552702384
    },
    {
        "content": "<p>I'm not sure why it would fail... I agree that this is sometimes annoying...</p>",
        "id": 160929888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552703523
    }
]