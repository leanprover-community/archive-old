[
    {
        "content": "<p>I need the following analogue of <code>subalgebra.map_map</code> and <code>subfield.map_map</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">intermediate_field_map_map</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"n\">L3</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L1</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L3</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">L1</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">L2</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L3</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">E.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">E.map</span> <span class=\"o\">(</span><span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I think this should be called <code>intermediate_field.map_map</code>, but that doesn't exist. Can anyone think of a good way to do it?</p>",
        "id": 265952151,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640292518
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">intermediate_field.map_map</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"n\">L3</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L1</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L3</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">L1</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">L2</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L3</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">E.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">E.map</span> <span class=\"o\">(</span><span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">set_like.coe_injective</span> <span class=\"bp\">$</span> <span class=\"n\">set.image_image</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Looks like I've done something clever but in fact I did something pretty dumb -- just literally copied the proof of <code>subalgebra.map_map</code>.</p>",
        "id": 265953633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640293773
    },
    {
        "content": "<p>And yes I agree it should be in mathlib and should be called <code>intermediate_field.map_map</code>, you could make the PR and see what the maintainers think :-) PS I know what you're thinking about and you're doing it the right way -- isolating little basic principles like this with one line proofs and filling in holes in the <code>intermediate_field</code> API is the mathlib-preferred way to do it.</p>",
        "id": 265953775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640293877
    }
]