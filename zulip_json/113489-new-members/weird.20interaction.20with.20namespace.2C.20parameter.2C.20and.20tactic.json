[
    {
        "content": "<p>Hi there, there is a weird interaction between <code>parameter</code>, <code>namespace</code>, and <code>tactic</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">unit</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">bar</span>\n<span class=\"kn\">section</span>\n  <span class=\"kn\">parameter</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>\n  <span class=\"n\">include</span> <span class=\"n\">b</span>\n  <span class=\"n\">def</span> <span class=\"n\">foo&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">b</span>\n  <span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo&#39;</span> <span class=\"c1\">-- Type</span>\n  <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">foo&#39;</span> <span class=\"c1\">-- error here</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I have an error message saying that <code>foo' : bool → Type </code>. I need to write <code>foo' b</code> to silence the error message.<br>\nThis is weird because <code>#check foo'</code> saying that it has type <code>Type</code>. Could anyone explain to me why it happens like this?</p>\n<p>There are other 2 ways to fix the error<br>\n1. remove <code>by exact</code> altogether<br>\n2. remove <code>namespace bar</code><br>\nI suspect that it is will have anything to do with namespace and tactic.</p>",
        "id": 171463315,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1563826134
    },
    {
        "content": "<p>Your parameter is included in everything in the section. Try checking foo' outside the section</p>",
        "id": 171465167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563827500
    },
    {
        "content": "<p>You should end both the section and the namespace as well or you'll get unexpected errors</p>",
        "id": 171465269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563827581
    },
    {
        "content": "<p><code>parameter</code> means something like \"every single thing here depends on exactly this parameter which will be inserted into every definition and lemma\" or something. I don't think anyone uses it in practice</p>",
        "id": 171465419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563827729
    },
    {
        "content": "<blockquote>\n<p>Your parameter is included in everything in the section. Try checking foo' outside the section</p>\n</blockquote>\n<p>Understand that <code>foo' : bool → Type</code> outside the section but the error arises inside the section, that's why I am confused.</p>\n<blockquote>\n<p>You should end both the section and the namespace as well or you'll get unexpected errors</p>\n</blockquote>\n<p>I have <code>end</code> at the buttom but forget to copy it to the post, sorry about that.</p>\n<blockquote>\n<p><code>parameter</code> means something like \"every single thing here depends on exactly this parameter which will be inserted into every definition and lemma\" or something. I don't think anyone uses it in practice</p>\n</blockquote>\n<p>Well, I am using it to make Lean namespace looks a little bit more like Agda's parameterised module. Please note that the code I posted earlier is the simplified version of the actual problem I see on my bigger project.</p>\n<p>Btw, does the error message that I got is the expected behaviour?</p>",
        "id": 171466737,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1563828620
    },
    {
        "content": "<p>I really wish Lean had parametrised modules</p>",
        "id": 171467750,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563829303
    },
    {
        "content": "<p>I never use parameters and not many other people use them, so I don't really know how they work and apparently they don't work too well or other people would use them more. Note this before you experiment too much more with parameters :-) </p>\n<p>Your definition of foo', because of the parameter and include, is<br>\n<code>def foo' (b : bool) := foo b</code> because of the parameter. In the section the parameter is active so the #check doesn't print it out -- the parameter is an input to every single function in the section and Lean is not going to ever tell you this. Outside the section you can see what's going on.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">unit</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">bar</span>\n<span class=\"kn\">section</span>\n  <span class=\"kn\">parameter</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>\n  <span class=\"n\">include</span> <span class=\"n\">b</span>\n  <span class=\"n\">def</span> <span class=\"n\">foo&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">b</span>\n  <span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo&#39;</span> <span class=\"c1\">-- Type</span>\n  <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">foo&#39;</span> <span class=\"c1\">-- error here</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo&#39;</span> <span class=\"c1\">-- bool → Type</span>\n<span class=\"kn\">end</span> <span class=\"n\">bar</span>\n</pre></div>",
        "id": 171470517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563831642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I understand that <code>foo' :  bool → Type</code> outside the section. But inside the section, up to my understanding, every definition will silently insert the parameter in. But weirdly, it doesn't happen inside the tactic if it is under some namespace. Should I think this as a bug and should try to avoid using parameters?</p>",
        "id": 171471524,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1563832575
    },
    {
        "content": "<p>I think it is indeed a bug, since inside the section and outside of tactic mode,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">foo&#39;</span>\n</pre></div>\n\n\n<p>works as intended (<code>b</code> is inserted as an argument).</p>",
        "id": 171472525,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1563833513
    },
    {
        "content": "<p>I don't know if it's a bug, but it is certainly abstraction leakage. Inside tactic mode it doesn't have a good grasp of what namespace and sections it's in, so it's hard to simulate parameters correctly</p>",
        "id": 171475724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563836362
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 171583472,
        "sender_full_name": "Joe",
        "timestamp": 1563951961
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 171583610,
        "sender_full_name": "Joe",
        "timestamp": 1563952129
    }
]