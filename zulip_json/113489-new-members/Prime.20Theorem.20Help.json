[
    {
        "content": "<p>Here is the theorem I am trying to prove:<br>\nLet n &gt; 1. If n has no positive prime factor less than or equal to sqrt(n), then n is prime.</p>\n<p>Here is a proof from Hungerford's Abstract Algebra:<br>\nSuppose n has the given property but assume that n is not prime. Then n has at least two positive prime factors, say p1 and p2, so that n = p1p2k for some positive integer k. By hypothesis, n has no positive prime divisors less than or equal to sqrt(n). Hence p1 &gt; sqrt(n) and p2 &gt; sqrt(n). Hence n = p1p2k &gt;= p1*p2 &gt;n. Contradiction.</p>\n<p>I am new to lean, so I am trying to translate proofs in textbooks for practice. Can anyone please tell me how to translate this proof into Lean code?</p>",
        "id": 190456567,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584055643
    },
    {
        "content": "<p>Here's the statement:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"n\">sqrt</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>It's time for bed in London though, so you'll have to look through <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/prime.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/prime.lean\">data.nat.prime</a> for hints.</p>",
        "id": 190458360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584057266
    },
    {
        "content": "<p>Should I use an absurd statement for contradiction? If not then what?</p>",
        "id": 190459740,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584058807
    },
    {
        "content": "<p>Sure, why not? You'd prove <code>X</code> and <code>not X</code> and then use <code>absurd</code>. It's defined in core lean as <code>def absurd {a : Prop} {b : Sort v} (h₁ : a) (h₂ : ¬a) : b</code></p>",
        "id": 190459890,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1584059001
    },
    {
        "content": "<p>The end result is: from contradictory hypotheses  you can summon a proof of anything you want</p>",
        "id": 190459955,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1584059086
    },
    {
        "content": "<p>Can you give an example of how an absurd statement works in lean (I see how it works logically)</p>",
        "id": 190460151,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584059293
    },
    {
        "content": "<p>In tactic mode, <code>exact absurd h1 h2</code> where <code>h1</code> is a proof of some proposition <code>a</code> and <code>h2</code> is a proof of <code>not a</code></p>",
        "id": 190460311,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584059487
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">axiom</span> <span class=\"n\">up_is_down</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">up_is_down</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_not</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n    <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">h_not</span>\n</pre></div>",
        "id": 190460481,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1584059670
    },
    {
        "content": "<p>So based on the theorem statement of Kevin Buzzard and Hungerford's proof, should I be writing:<br>\nexact absurd (not prime) hp ? for my first line of code</p>",
        "id": 190460500,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584059713
    },
    {
        "content": "<p>no</p>",
        "id": 190460628,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1584059831
    },
    {
        "content": "<p>So then what?</p>",
        "id": 190460635,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584059859
    },
    {
        "content": "<p>If you cannot do basic logic then trying to prove this theorem is biting off far more than you can chew.</p>",
        "id": 190460644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584059871
    },
    {
        "content": "<p>You should start with some Lean tutorial, like the natural number game, or reading Theorem Proving in Lean</p>",
        "id": 190460700,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1584059901
    },
    {
        "content": "<p>Why not try and prove stuff like <code>p ∧ q → q ∧ p</code> or <code>p → ¬ ¬ p</code> first?</p>",
        "id": 190460702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584059906
    },
    {
        "content": "<p>You need to be able to steer basic logic before you can start doing arithmetic</p>",
        "id": 190460706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584059925
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#exercises\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#exercises\">sample exercises</a></p>",
        "id": 190460974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584060295
    }
]