[
    {
        "content": "<p>How can I deconstruct an hypothesis of the form <code>h: a = let x = y in z x</code> into <code>x: ...</code>, <code>h1: x = y</code> and <code>h2: a = z[x]</code>? I tried <code>cases</code> and <code>simp</code>, both inlined <code>x</code> into <code>y</code> which I want to avoid, as it becomes an unreadable mess.</p>",
        "id": 218815416,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607077732
    },
    {
        "content": "<p>It seems like this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>It is a little bit magic though, as <code>have h1 := h</code> does nothing.</p>",
        "id": 218817574,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607079172
    },
    {
        "content": "<p>I assume in your real example <code>z</code> depends on <code>x</code>?</p>",
        "id": 218817602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607079195
    },
    {
        "content": "<p>yes</p>",
        "id": 218817619,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607079207
    },
    {
        "content": "<p>I think there's a version of <code>set</code> which doesn't introduce a <code>let</code> binding</p>",
        "id": 218817828,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607079316
    },
    {
        "content": "<p><code>generalize</code></p>",
        "id": 218822987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607082768
    },
    {
        "content": "<p>Does <code>generalize</code> avoid the need to write <code>x = y</code> a second time?</p>",
        "id": 218823066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607082841
    },
    {
        "content": "<p>no</p>",
        "id": 218823166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607082901
    },
    {
        "content": "<p>it's a first time though</p>",
        "id": 218823186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607082920
    },
    {
        "content": "<p>This does not work anymore though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">generalize</span> <span class=\"n\">x_def</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>I.e. I don't know how to get rid of the <code>let in</code> in <code>h</code> with this.<br>\nLean gets rid of it automatically when using <code>set</code>.</p>",
        "id": 218823905,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607083428
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 218824127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607083552
    },
    {
        "content": "<p>oh right that makes sense</p>",
        "id": 218824410,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607083718
    },
    {
        "content": "<p>There's also a tactic to clear the let binding part of a hypothesis</p>",
        "id": 218824447,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607083746
    },
    {
        "content": "<p>I wonder if <code>rcases</code> can be modified to capture let bindings. It's a bit tricky because whnf will go right past a let binding</p>",
        "id": 218825094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607084203
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x.fst</span> <span class=\"bp\">+</span> <span class=\"n\">x.snd</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">set</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">y_def</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Somewhat artificial though. How can I get to the sorry with the same state more elegantly?</p>",
        "id": 218825159,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607084253
    },
    {
        "content": "<p>Actually, perhaps a better interface is some kind of <code>split_lets</code> that will extract <code>let</code> statements in the targeted hyp(s) and introduce new variables like <code>set</code></p>",
        "id": 218825405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607084424
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x.fst</span> <span class=\"bp\">+</span> <span class=\"n\">x.snd</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">set</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">y_def</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is one less line and also less painful</p>",
        "id": 218825467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607084470
    },
    {
        "content": "<p>this still doesn't solve the problem of a let under a lambda though</p>",
        "id": 218825485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607084484
    },
    {
        "content": "<p>While not what this thread is about, note that <code>intro</code> will slice off a <code>let</code> from the goal</p>",
        "id": 218825588,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607084550
    },
    {
        "content": "<p>maybe in Lean 4 we can just reuse the lambda lifting pass</p>",
        "id": 218825592,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607084555
    },
    {
        "content": "<p>actually maybe there is a dsimp option for doing beta reduction but not zeta (let reduction)</p>",
        "id": 218825597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607084559
    },
    {
        "content": "<p>Of course <code>intro at</code> would be silly for the other meanings of <code>intro</code></p>",
        "id": 218825613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607084577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplify.20.60let.20.2E.2E.2E.20in.20.2E.2E.2E.60.20in.20hypothesis/near/218825467\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x.fst</span> <span class=\"bp\">+</span> <span class=\"n\">x.snd</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">set</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">y_def</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is one less line and also less painful</p>\n</blockquote>\n<p>Thanks! Didn't know about <code>with</code> in <code>set</code>. I thought I should avoid non-goal closing simps though?</p>",
        "id": 218825781,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607084690
    },
    {
        "content": "<p>For me the whole point of <code>set</code> is the <code>with</code>. You're right -- <code>    simp only [y_def] at h,</code> is better for the second line.</p>",
        "id": 218827830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607086054
    },
    {
        "content": "<p><code>    change _ = g _ at h,</code> also works</p>",
        "id": 218827966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607086146
    }
]