[
    {
        "content": "<p>Is there an API reference for Lean, containing all its keywords?</p>",
        "id": 260229626,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636001681
    },
    {
        "content": "<p>What exactly do you mean by \"keyword\"? Things like <code>def</code>, <code>theorem</code>, <code>section</code>, <code>set_option</code>, etc??</p>",
        "id": 260234717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636008732
    },
    {
        "content": "<p>Do lists like</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">commands</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"s\">\"theorem\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"axiom\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"axioms\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"variable\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"protected\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"private\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hide\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"s\">\"definition\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"meta\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"mutual\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"noncomputable\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"abbreviation\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"s\">\"variables\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"parameter\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"parameters\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"constant\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"constants\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"s\">\"using_well_founded\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"[whnf]\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"s\">\"end\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"namespace\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"section\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"prelude\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"s\">\"import\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"inductive\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"coinductive\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"structure\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"class\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"universe\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"universes\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"local\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"s\">\"precedence\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"reserve\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"infixl\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"infixr\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"infix\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"postfix\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"prefix\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"notation\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"s\">\"set_option\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"open\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"export\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"@[\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"s\">\"attribute\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"instance\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"include\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"omit\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"init_quotient\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"s\">\"declare_trace\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"add_key_equivalence\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"s\">\"run_cmd\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"#check\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"#reduce\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"#eval\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"#print\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"#help\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"#exit\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"s\">\"#compile\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"#unify\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>answer your question?</p>",
        "id": 260234759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636008828
    },
    {
        "content": "<p>That's an excerpt from <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/token_table.cpp\">https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/token_table.cpp</a></p>",
        "id": 260234818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636008884
    },
    {
        "content": "<p>That's useful but I also wanted to know what every keyword does</p>",
        "id": 260257700,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636025851
    },
    {
        "content": "<p>Note that those are really just the list of builtin \"commands\", and the list of commands changes at runtime (eg we add <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#add_decl_doc\">command#add_decl_doc</a> which isn't built int)</p>",
        "id": 260258133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636026182
    },
    {
        "content": "<p>Yes, so we need a bit more details about what <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> wants to do with this to be able to help further.</p>",
        "id": 260260644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636027906
    },
    {
        "content": "<p>Is this related to the Prettier project?</p>",
        "id": 260260652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636027915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/API.20reference/near/260260652\">said</a>:</p>\n<blockquote>\n<p>Is this related to the Prettier project?</p>\n</blockquote>\n<p>Oh, no no. I am trying to get my head around the native power of lean. I guess I was looking for something similar to this: <a href=\"https://docs.python.org/3/reference/index.html\">https://docs.python.org/3/reference/index.html</a></p>",
        "id": 260260870,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636028058
    },
    {
        "content": "<p>Try <code>#help commands</code>.</p>",
        "id": 260262968,
        "sender_full_name": "Jason Rute",
        "timestamp": 1636029319
    },
    {
        "content": "<p>It is important to know that Lean's parser is very flexible and one can add custom user commands to Lean.  So if you <code>import all</code>, then <code>#help commands</code> will likely display more commands which were defined in <code>mathlib</code>.  Also, it's probably true that there are parts of Lean which are not fully documented (and possibly no one uses anymore, or only a few people use).  Nonetheless, starting with Johan's list and <code>#help commands</code> and then searching TPIL, Google, and Zulip for more information will get you started.  (Everything I said is for Lean 3 to be clear.)</p>",
        "id": 260263209,
        "sender_full_name": "Jason Rute",
        "timestamp": 1636029448
    },
    {
        "content": "<p>Just to make sure: you do know about <a href=\"https://leanprover.github.io/reference/\">https://leanprover.github.io/reference/</a>, right?</p>",
        "id": 260266701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636031333
    },
    {
        "content": "<p>Oh I didn't know about that link!<br>\nThe Lean landing page takes me to <a href=\"https://leanprover.github.io/lean4/doc/\">this place</a> when I click on Documentation &gt; Lean 4 manual. But I saw some sections marked with \"TODO\" or \"fix\" (like <a href=\"https://leanprover.github.io/lean4/doc/declarations.html\">this one</a>) so I thought that it was still a WIP for Lean 4. But I didn't know about that other link which seems to be more finished for Lean 3. Thanks!</p>",
        "id": 260267689,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636031852
    }
]