[
    {
        "content": "<p>Dear All,</p>\n<p>I do not normally use <code>clear</code>, but decided to try it.  Should I be surprised by the beviour in the following example?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.monoid</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ordered_cancel_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"c1\">--  works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">h</span>\n\n<span class=\"c1\">--  fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid type ascription, term has type</span>\n<span class=\"cm\">  ?m_3 ≤ ?m_3</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  n ≤ n</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">α : Type,</span>\n<span class=\"cm\">n : ℕ</span>\n<span class=\"cm\">⊢ n ≤ n</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 299133487,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663324747
    },
    {
        "content": "<p>not particularly; what it's complaining about is that <code>le_rfl</code> doesn't have a preorder instance</p>",
        "id": 299133773,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663324856
    },
    {
        "content": "<p>How does it even let you clear <code>h</code>?</p>",
        "id": 299133851,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663324891
    },
    {
        "content": "<p>But don't naturals have it, like the earlier example shows?</p>",
        "id": 299133852,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663324891
    },
    {
        "content": "<p>Yaël, I <code>include</code>d it</p>",
        "id": 299133886,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663324911
    },
    {
        "content": "<p>oh, I see that stuff is a bit different than expected!</p>",
        "id": 299133893,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663324914
    },
    {
        "content": "<p>a : N!</p>",
        "id": 299133909,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663324921
    },
    {
        "content": "<p><code>resetI</code> after the clear works, but why that is necessary boggles the mind...</p>",
        "id": 299134029,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663324961
    },
    {
        "content": "<p>Right, the statement is the same, I only artificially included <code>h</code> (and <code>\\a</code>), remove the artificial <code>h</code> and the same left-over proof fails.</p>",
        "id": 299134036,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663324965
    },
    {
        "content": "<p>maybe Lean detects that the instance cache has changed and so decides to shut down</p>",
        "id": 299134064,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663324976
    },
    {
        "content": "<p>Does this suggest that <code>clear</code> should do <code>resetI</code> after it is currently done?</p>",
        "id": 299134129,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663325010
    },
    {
        "content": "<p>that would be slow, but I feel like clearing a frozen instance should maybe not be possible</p>",
        "id": 299134259,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663325050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> what happened to your instance colour thing?</p>",
        "id": 299134297,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663325062
    },
    {
        "content": "<p>It's still over at <a href=\"https://github.com/leanprover-community/mathlib/pull/15959\">#15959</a></p>",
        "id": 299134339,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663325080
    },
    {
        "content": "<p>The same happens if you <code>clear_except</code> (and of course, <code>a</code> stays, but <code>\\a h</code> disappear).</p>",
        "id": 299134368,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663325099
    },
    {
        "content": "<p>Just something to fix in the HTML and that should be good to go?</p>",
        "id": 299134382,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663325105
    },
    {
        "content": "<p>so the instance that it usually grabs is <code>nat.ordered_semiring</code> and then precipitates that down to a <code>preorder</code></p>",
        "id": 299134627,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663325214
    },
    {
        "content": "<p>for some reason, typeclass doesn't even bother checking that instance after the <code>clear</code></p>",
        "id": 299134655,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663325225
    },
    {
        "content": "<p>Small disclosure: I found out about this after a <code>clear_except ...</code>.  I think that if you on purpose <code>clear</code> a typeclass assumption, then you should be ready for some weirdness.  But I did not like that doing a <code>clear_except ...</code>  removed instances for me and then made my goals harder to prove!</p>",
        "id": 299135066,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663325419
    },
    {
        "content": "<p>I reduced a little the imports in the example above and also changed the name of the <code>nat</code> to <code>n</code>.</p>\n<p>It turns out that the instance that you <code>clear</code> should contain some order relation for the error to arise, but not any relation.  <code>[h : has_le α]</code> can be cleared, but <code>[h : preorder α]</code> cannot.</p>",
        "id": 299138535,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663326873
    }
]