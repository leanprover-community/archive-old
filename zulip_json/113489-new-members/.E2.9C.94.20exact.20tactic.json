[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/exact.20tactic/near/279895861\">said</a>:</p>\n<blockquote>\n<p>If you check the definition of <code>mul</code> you'll see that <code>m * 1</code> can be unfolded to <code>m * 0 + m</code>, which can be simplified to <code>0 + m</code>. Thus, what you have to prove becomes <code>0 + m = m</code>, which is <em>exact</em>ly <code>zero_add</code></p>\n</blockquote>\n<p>I see thank you</p>",
        "id": 279896682,
        "sender_full_name": "Joseph O",
        "timestamp": 1650676165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 279896687,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650676174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span> this is exactly what I don't teach in NNG. I taught in my undergraduate course this year -- see <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2022/Part_B/equality.html\">https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2022/Part_B/equality.html</a></p>",
        "id": 279912411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650698750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20exact.20tactic/near/279912411\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> this is exactly what I don't teach in NNG. I taught in my undergraduate course this year -- see <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2022/Part_B/equality.html\">https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2022/Part_B/equality.html</a></p>\n</blockquote>\n<p>Ah thank you. I enjoyed watching the videos from Formalizing Mathematics on the youtube channel.</p>",
        "id": 279925352,
        "sender_full_name": "Joseph O",
        "timestamp": 1650718633
    },
    {
        "content": "<p>In Lean 3, the implementation of <a href=\"https://github.com/leanprover-community/lean/blob/5885f626d8db2f03abe21c45749d8e3995f0988e/library/init/meta/tactic.lean#L525\">exact</a> is done in C++ (idk how to find it)</p>\n<p>In Lean 4, you can find the implementation of <code>exact</code> <a href=\"https://github.com/leanprover/lean4/blob/29b340aa36952348c9dfa39ce64dfa76023ac025/src/Lean/Elab/Tactic/ElabTerm.lean#L55\">here</a></p>",
        "id": 280094997,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650904508
    },
    {
        "content": "<p>Thanks, though I don't really understand the tactic code.</p>",
        "id": 280098529,
        "sender_full_name": "Joseph O",
        "timestamp": 1650905980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 280098547,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650905993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20exact.20tactic/near/280094997\">said</a>:</p>\n<blockquote>\n<p>In Lean 3, the implementation of <a href=\"https://github.com/leanprover-community/lean/blob/5885f626d8db2f03abe21c45749d8e3995f0988e/library/init/meta/tactic.lean#L525\">exact</a> is done in C++ (idk how to find it)</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/tactic/exact_tactic.cpp\">https://github.com/leanprover-community/lean/blob/master/src/library/tactic/exact_tactic.cpp</a> it appears</p>",
        "id": 280100495,
        "sender_full_name": "Julian Berman",
        "timestamp": 1650906860
    },
    {
        "content": "<p>Not sure how insightful reading it would be though.</p>",
        "id": 280100542,
        "sender_full_name": "Julian Berman",
        "timestamp": 1650906897
    },
    {
        "content": "<p>The definitional equality check doesnt actually happen in the exact implementation either, it's merely responsible for assigning the value to the meta variable, the type checker does the definitional equality check later on.</p>",
        "id": 280102360,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1650907753
    }
]