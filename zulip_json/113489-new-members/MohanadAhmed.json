[
    {
        "content": "<p>Hello everyone<br>\nNew one here.<br>\nJust started learning lean. Hoping this would be fun.<br>\nWent through tutorials at <a href=\"https://github.com/leanprover-community/tutorials\">https://github.com/leanprover-community/tutorials</a><br>\nAnd then though I would start with school geometry like showing that angles of equilateral triangle are all pi/3<br>\nAny comments are welcome. </p>\n<p>(Not sure how to post code directly so attaching it)</p>\n<p><a href=\"/user_uploads/3121/8sLnBi_MaiWzP62jJJySPxXA/equi_traingle.lean\">equi_traingle.lean</a> </p>\n<p>Thanks and looking forward to learning.</p>",
        "id": 282354522,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1652537185
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to learn how to post code directly.</p>",
        "id": 282354912,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1652537847
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">equi_triangle_pi_3</span> <span class=\"o\">{</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">p2</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">p2</span> <span class=\"bp\">≠</span> <span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">p3</span> <span class=\"bp\">≠</span> <span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∠</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∠</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">∧</span> <span class=\"bp\">∠</span> <span class=\"n\">p2</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">eq12</span> <span class=\"o\">:</span> <span class=\"bp\">∠</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"n\">p2</span> <span class=\"bp\">∧</span> <span class=\"bp\">∠</span> <span class=\"n\">p2</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"n\">p1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">equi_triangle</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">eq12</span> <span class=\"k\">with</span> <span class=\"n\">eq1</span> <span class=\"n\">eq2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">eqx</span> <span class=\"o\">:</span> <span class=\"bp\">∠</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"n\">p1</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">euclidean_geometry.angle_comm</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">eqy</span> <span class=\"o\">:</span> <span class=\"bp\">∠</span> <span class=\"n\">p3</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">p2</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">euclidean_geometry.angle_comm</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">eqπ</span> <span class=\"o\">:</span> <span class=\"bp\">∠</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"bp\">+</span> <span class=\"bp\">∠</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"n\">p1</span> <span class=\"bp\">+</span> <span class=\"bp\">∠</span> <span class=\"n\">p3</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">π</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">euclidean_geometry.angle_add_angle_add_angle_eq_pi</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eq1</span> <span class=\"n\">at</span> <span class=\"n\">eqπ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eqx</span> <span class=\"n\">at</span> <span class=\"n\">eqπ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eqy</span> <span class=\"n\">at</span> <span class=\"n\">eqπ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eq2</span> <span class=\"n\">at</span> <span class=\"n\">eqπ</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">xp3</span><span class=\"o\">:</span> <span class=\"bp\">∠</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">xp3</span> <span class=\"n\">at</span> <span class=\"n\">eq2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">eqx</span> <span class=\"n\">at</span> <span class=\"n\">xp3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">xp3</span> <span class=\"n\">at</span> <span class=\"n\">eq1</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">}},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282355579,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1652538870
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span></p>",
        "id": 282355602,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1652538923
    },
    {
        "content": "<p>Welcome! I'm sure one can do even better, but angle brackets are cool, and the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rintro\">tactic#rintro</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\">tactic#rcases</a> tactics are nice.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">equi_triangle</span> <span class=\"o\">{</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">p2</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∠</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"n\">p2</span> <span class=\"bp\">∧</span> <span class=\"bp\">∠</span> <span class=\"n\">p2</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"n\">p1</span><span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span><span class=\"n\">euclidean_geometry.angle_eq_angle_of_dist_eq</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">euclidean_geometry.angle_eq_angle_</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">equi_triangle_pi_3</span> <span class=\"o\">{</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">p2</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">p2</span> <span class=\"bp\">≠</span> <span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">p3</span> <span class=\"bp\">≠</span> <span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"bp\">∠</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∠</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">∧</span> <span class=\"bp\">∠</span> <span class=\"n\">p2</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>                   <span class=\"kd\">begin</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">equi_triangle</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">eq1</span><span class=\"o\">,</span> <span class=\"n\">eq2</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"n\">eqπ</span> <span class=\"o\">:=</span> <span class=\"n\">euclidean_geometry.angle_add_angle_add_angle_eq_pi</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">eqx</span> <span class=\"o\">:</span> <span class=\"bp\">∠</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span> <span class=\"n\">euclidean_geometry.angle_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">eqy</span> <span class=\"o\">:</span> <span class=\"bp\">∠</span> <span class=\"n\">p3</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">p2</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"o\">:=</span> <span class=\"n\">euclidean_geometry.angle_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">xp3</span> <span class=\"o\">:</span> <span class=\"bp\">∠</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 282356625,
        "sender_full_name": "Julian Berman",
        "timestamp": 1652540346
    },
    {
        "content": "<p>You can use semicolons to reduce duplication. Semicolon applies the tactic on the right to all goals produces by the tactic on the left. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">euclidean_geometry.angle_eq_angle_of_dist_eq</span> <span class=\"n\">h1</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">euclidean_geometry.angle_eq_angle_of_dist_eq</span> <span class=\"n\">h2</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>becomes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">euclidean_geometry.angle_eq_angle_of_dist_eq</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#assumption\">tactic#assumption</a> closes the goal using an appropriate assumption. Also note that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">}},</span>\n</code></pre></div>\n<p>can be simplified to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Tactic <code>linarith</code> takes an optional list of assumptions as argument, so you don't need so much <code>have</code> statements and you don't even need <code>equi_triangle</code> lemma. Here is a simplified proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.euclidean.triangle</span>\n<span class=\"kn\">open</span> <span class=\"n\">euclidean_geometry</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">euclidean_geometry</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">equi_triangle_pi_3</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">p2</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">p2</span> <span class=\"bp\">≠</span> <span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">p3</span> <span class=\"bp\">≠</span> <span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∠</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">∧</span> <span class=\"bp\">∠</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">∧</span> <span class=\"bp\">∠</span> <span class=\"n\">p2</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n  <span class=\"o\">[</span> <span class=\"n\">angle_comm</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n    <span class=\"n\">angle_comm</span> <span class=\"n\">p3</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n    <span class=\"n\">angle_eq_angle_of_dist_eq</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">angle_eq_angle_of_dist_eq</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">angle_add_angle_add_angle_eq_pi</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282358353,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1652542722
    }
]