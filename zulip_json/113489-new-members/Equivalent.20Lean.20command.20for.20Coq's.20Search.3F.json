[
    {
        "content": "<p>Coq has the Search command which lets you look for theorems relevant to a particular term or a pattern or a string. For example one could run \"Search list.\" and it would let you find the theorems available which involve \"list\".</p>\n<p>What is the Lean equivalent of this?</p>",
        "id": 185329413,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1578675900
    },
    {
        "content": "<p>There is <code>find</code> which seems to be less than optimal and doesn't get much love. Then there are the tactics <code>suggest</code> and <code>library_search</code> which might be more helpful if you are searching for one specific theorem (you know the type, but not the name).<br>\nFor a list of theorems involving <code>list</code>, I guess currently your best option is generic search tools like <code>grep</code>.</p>",
        "id": 185337831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578681418
    },
    {
        "content": "<p>If you're using VS Code, you can access the Lean server's search feature by hiting ctrl (or cmd if on a mac) + p and then typing the <code>#</code> character before your search string. I think this searches all declarations either imported or in open files? Presumably the Emacs mode has access to this as well.</p>",
        "id": 185338233,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578681701
    },
    {
        "content": "<p>That's an <code>or</code> not an <code>either .. or</code></p>",
        "id": 185339167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578682331
    },
    {
        "content": "<p>You can also get an output of all of the definitions (including theorems) associated with list (or any other type) by using <code>#print prefix list</code></p>",
        "id": 185399812,
        "sender_full_name": "Chris B",
        "timestamp": 1578766742
    },
    {
        "content": "<p>Yeah, these are great options. The VS code trick seems to  work very well.</p>\n<p>Where can I find documentation on <code>find</code>?</p>",
        "id": 185419702,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1578806475
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#find\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/commands.html#find\">https://leanprover-community.github.io/mathlib_docs/commands.html#find</a></p>",
        "id": 185420728,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1578808681
    },
    {
        "content": "<p>But there isn't  a lot there, the source is at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/find.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/find.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/find.lean</a></p>",
        "id": 185420776,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1578808770
    }
]