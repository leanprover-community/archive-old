[
    {
        "content": "<p>Is there any sort of tactic for group theory? Such a tactic should be able to prove things like the Hall-Witt identity.</p>",
        "id": 198383670,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590099028
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Hall%27s_identity\">https://en.wikipedia.org/wiki/Hall%27s_identity</a></p>",
        "id": 198383747,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590099080
    },
    {
        "content": "<p>This? I don't understand the <code>[x,y,z]</code> notation, though I understand <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>y</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></span></span></span></span></span></span> means <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mi>x</mi><msup><mi>y</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">yxy^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathdefault\">x</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 198383812,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590099118
    },
    {
        "content": "<p>for commutative groups (well, commutative groups that happen to be written additively) we have <code>abel</code></p>",
        "id": 198383883,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590099155
    },
    {
        "content": "<p>You can get some of the way to a general group tactic with a well chosen <code>simp</code> set</p>",
        "id": 198383921,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590099180
    },
    {
        "content": "<p>If I had a precise statement of this hall's identity i could look for a proof that leverages automation</p>",
        "id": 198383964,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590099212
    },
    {
        "content": "<p>[x,y,z] means [[x,y],z] where [x,y]=x y x^{-1} y^{-1}, but that's not super relevant (I'm not specifically interested in the Hall-Witt identity). What I'm getting at is that it is easy to check whether two words in group theory are equal and it seems like there should be a tactic for this</p>",
        "id": 198384036,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590099242
    },
    {
        "content": "<p>well, no, it's undecidable in general to check whether are equal?</p>",
        "id": 198384111,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590099303
    },
    {
        "content": "<p>i guess you're asking specifically about deciding the word problem for free groups?</p>",
        "id": 198384120,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590099312
    },
    {
        "content": "<p>that's right</p>",
        "id": 198384124,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590099319
    },
    {
        "content": "<p>(The first step to writing a tactic may be to collect test cases)</p>",
        "id": 198384159,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590099348
    },
    {
        "content": "<p>is there a paper describing an algorithm for deciding the word problem for free groups?</p>",
        "id": 198384217,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590099370
    },
    {
        "content": "<p><a href=\"https://rjlipton.wordpress.com/2009/04/16/the-word-problem-for-free-groups/\">https://rjlipton.wordpress.com/2009/04/16/the-word-problem-for-free-groups/</a></p>",
        "id": 198384277,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590099428
    },
    {
        "content": "<p>I mean, the algorithm is to distribution any inverses (i.e. (gh)^{-1} = h^{-1} g^{-1}), collect powers like g^m and g^n into g^(m+n), and check whether the resulting words are the same</p>",
        "id": 198384282,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590099437
    },
    {
        "content": "<p>it's not terribly sophisticated</p>",
        "id": 198384308,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590099458
    },
    {
        "content": "<p>(we don't already have it, I'm trying to have a discussion that's explicit enough to start making progress on writing it)</p>",
        "id": 198384393,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590099494
    },
    {
        "content": "<p>sure</p>",
        "id": 198384405,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590099504
    },
    {
        "content": "<p>i think <code>simp</code> can do what you suggest</p>",
        "id": 198384446,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590099527
    },
    {
        "content": "<p>the worry I'm having is associativity</p>",
        "id": 198384463,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590099541
    },
    {
        "content": "<p>have you tried any examples?</p>",
        "id": 198384494,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590099567
    },
    {
        "content": "<p>trying an example will make a lot more progress than talking at this point</p>",
        "id": 198384508,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590099580
    },
    {
        "content": "<p>ok</p>",
        "id": 198384510,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590099584
    },
    {
        "content": "<p>give me a minute</p>",
        "id": 198384514,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590099588
    },
    {
        "content": "<p><code>lemma example1 {G} [group G] (g h : G) : (g * h) * (g * h) * g = g * (h * g) * (h * g) :=\nbegin\nsorry,\nend</code></p>",
        "id": 198384694,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590099694
    },
    {
        "content": "<p>not sure how to add code in zulip</p>",
        "id": 198384707,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590099701
    },
    {
        "content": "<p>but simp can't even do that</p>",
        "id": 198384717,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590099705
    },
    {
        "content": "<p>although that particular one can be done with repeating mul_assoc</p>",
        "id": 198384782,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590099724
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">example1</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">},</span><span class=\"c1\">--if there is no cancellation then this is enough</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">example2</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">},</span><span class=\"c1\">--if the cancellation is in the middle then you&#39;re in trouble</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198385107,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590099960
    },
    {
        "content": "<p>We have a related open issue on this here: <a href=\"https://github.com/leanprover-community/mathlib/issues/2729\">#2729</a>, see particularly the zulip thread linked from there.</p>",
        "id": 198385254,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590100044
    },
    {
        "content": "<p>You just need a simp lemma that says <code>g * (g⁻¹ * k) = k</code></p>",
        "id": 198385419,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590100133
    },
    {
        "content": "<p>And one for g-1 * (g * k)</p>",
        "id": 198385824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590100331
    },
    {
        "content": "<p>There was a thread about the one relator problem recently</p>",
        "id": 198385856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590100352
    },
    {
        "content": "<p>It should be linked in the issue I linked above.</p>",
        "id": 198385921,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590100393
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/.60group.60.20tactic\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60group.60.20tactic</a></p>",
        "id": 198385940,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590100408
    },
    {
        "content": "<p>those two simp lemmas don't seem to be enough</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">useful_lemma</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">useful_lemma_2</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198386015,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590100442
    },
    {
        "content": "<p>However, the group tactic in that thread might be what I need</p>",
        "id": 198386051,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590100457
    },
    {
        "content": "<p>(I just give an easier-for-human-to-parse definition of the group tactic from that thread)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">nonabel</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_inv_self</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_self</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_rev</span><span class=\"o\">,</span><span class=\"n\">inv_inv</span><span class=\"o\">,</span><span class=\"n\">inv_mul_self</span><span class=\"o\">,</span><span class=\"n\">mul_inv_cancel_right</span><span class=\"o\">,</span><span class=\"n\">mul_inv_cancel_left</span><span class=\"o\">,</span><span class=\"n\">inv_mul_cancel_right</span><span class=\"o\">,</span><span class=\"n\">inv_mul_cancel_left</span><span class=\"o\">]]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">example1</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">nonabel</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">example2</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">nonabel</span>\n</code></pre></div>",
        "id": 198386428,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590100693
    },
    {
        "content": "<p>I guess the PR hasn't been made yet</p>",
        "id": 198386513,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590100739
    },
    {
        "content": "<p>seems to me like we should put this naive group tactic in mathlib and wait for someone who gets frustrated with it to implement a more efficient / expressive version</p>",
        "id": 198386576,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590100782
    },
    {
        "content": "<p>It's not exactly the same since I think Patrick's tactic allows writing <code>group at h</code>.</p>",
        "id": 198386594,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590100796
    },
    {
        "content": "<p>ah okay, i thought there must be a reason for the extra complexity but didn't think hard about it</p>",
        "id": 198386878,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590100950
    },
    {
        "content": "<p>I guess a PR \"just\" needs to add a \"good enough\" set of test cases</p>",
        "id": 198386961,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590101009
    },
    {
        "content": "<p>is it plausible to prove a theorem like \"if this equation is true in the free group, then this tactic will eventually halt with a proof\"?</p>",
        "id": 198387050,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590101054
    },
    {
        "content": "<p>Probably not, since tactics live in <code>meta</code>.</p>",
        "id": 198387127,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590101099
    },
    {
        "content": "<p>Good news: that group theory tactic can do the Hall-Witt identity!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">simp_arg_type</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">locat</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">simp_core</span> <span class=\"o\">{}</span> <span class=\"n\">skip</span> <span class=\"n\">tt</span> <span class=\"o\">[</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_inv_self</span><span class=\"o\">),</span>\n  <span class=\"n\">symm_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_assoc</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_inv_self</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_inv_rev</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">inv_inv</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">inv_mul_self</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_inv_cancel_right</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_inv_cancel_left</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">inv_mul_cancel_right</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">inv_mul_cancel_left</span><span class=\"o\">)]</span>\n  <span class=\"o\">[]</span> <span class=\"n\">locat</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"n\">def</span> <span class=\"n\">commutator</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"bp\">⁻¹</span>\n\n<span class=\"n\">def</span> <span class=\"n\">commutator3</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">commutator</span> <span class=\"o\">(</span><span class=\"n\">commutator</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">k</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">commutator3</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"n\">h</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">commutator3</span> <span class=\"n\">k</span><span class=\"bp\">⁻¹</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">commutator3</span> <span class=\"n\">h</span><span class=\"bp\">⁻¹</span> <span class=\"n\">k</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">commutator3</span><span class=\"o\">},</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">commutator</span><span class=\"o\">},</span>\n<span class=\"n\">group</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198388080,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590101641
    },
    {
        "content": "<p>it would make a nice test case in the PR :)</p>",
        "id": 198389387,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590102435
    },
    {
        "content": "<p>That's really nice!</p>\n<p>Mario was moaning the other day that us mathematicians don't specify our tactics well enough. Perhaps I should keep track better whenever I run into a goal which I feel should be solvable with automation but which I can't solve in Lean without some pain. A collection of tests might be what one needs to make a start at a tactic.</p>",
        "id": 198392180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590104659
    },
    {
        "content": "<p>I intend to collect such observations on the metaprogramming stream</p>",
        "id": 198392321,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590104790
    },
    {
        "content": "<p>there is a metaprogramming stream?</p>",
        "id": 198392719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590105197
    },
    {
        "content": "<p>It's not active (yet?), I made it so that there would be a natural place to collect these \"tactic specifications\"<br>\n<a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/stream.20events/near/197849636\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/stream.20events/near/197849636</a></p>",
        "id": 198393137,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590105596
    },
    {
        "content": "<p>most of the content there is a discussion about streams, some which bubbled back up into meta</p>",
        "id": 198393219,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590105639
    },
    {
        "content": "<p>I think that creating new streams is problematic because of lack of discoverability. It's a great way to have conversations that most people won't notice</p>",
        "id": 198393357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590105762
    },
    {
        "content": "<p>yes, i did honestly intend to have conversations that most people won't pay attention to</p>",
        "id": 198393403,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590105800
    },
    {
        "content": "<p>once a \"tactic specification\"is complete enough to deserve attention one could advertise it elsewhere</p>",
        "id": 198393437,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590105833
    },
    {
        "content": "<p>maybe I'm just trying to implement a poor version of having a mathlib branch without a PR</p>",
        "id": 198393501,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590105858
    },
    {
        "content": "<p>I think that conversations on general have an appropriate level of exposure for this sort of thing</p>",
        "id": 198393554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590105905
    },
    {
        "content": "<p>thanks, that is a useful judgement</p>",
        "id": 198393582,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590105925
    },
    {
        "content": "<p>conversations on a new non-default public stream are barely better than a group PM</p>",
        "id": 198393609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590105948
    },
    {
        "content": "<p>I agree with that</p>",
        "id": 198393726,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590106032
    },
    {
        "content": "<p>(I see now that the only conversation that has happened so far on the metaprogramming stream is a replay of what I just said)</p>",
        "id": 198393853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590106114
    },
    {
        "content": "<p>I think the following text should be a PR. (I'm trying to make it but this requires me to understand more things about git first)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Copyright (c) 2020. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Patrick Massot, Thomas Browning</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># `group`</span>\n\n<span class=\"cm\">Evaluate expressions in the language of groups. Ideally this would implement a full algorithm for the word problem in free groups.</span>\n\n<span class=\"cm\">## Tags</span>\n\n<span class=\"cm\">group_theory</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">simp_arg_type</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">locat</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">simp_core</span> <span class=\"o\">{}</span> <span class=\"n\">skip</span> <span class=\"n\">tt</span> <span class=\"o\">[</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_inv_self</span><span class=\"o\">),</span>\n  <span class=\"n\">symm_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_assoc</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_inv_self</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_inv_rev</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">inv_inv</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">inv_mul_self</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_inv_cancel_right</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_inv_cancel_left</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">inv_mul_cancel_right</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">inv_mul_cancel_left</span><span class=\"o\">)]</span>\n  <span class=\"o\">[]</span> <span class=\"n\">locat</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">group</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">group</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹*</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">group</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">commutator</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"bp\">⁻¹</span>\n\n<span class=\"n\">def</span> <span class=\"n\">commutator3</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">commutator</span> <span class=\"o\">(</span><span class=\"n\">commutator</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">k</span>\n\n<span class=\"c1\">-- The following is known as the Hall-Witt identity, see e.g. https://en.wikipedia.org/wiki/Three_subgroups_lemma#Proof_and_the_Hall%E2%80%93Witt_identity</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">commutator3</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"n\">h</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">commutator3</span> <span class=\"n\">k</span><span class=\"bp\">⁻¹</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">commutator3</span> <span class=\"n\">h</span><span class=\"bp\">⁻¹</span> <span class=\"n\">k</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">commutator3</span><span class=\"o\">},</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">commutator</span><span class=\"o\">},</span>\n<span class=\"n\">group</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- todo : a nontrivial example of using `group at h`</span>\n</code></pre></div>",
        "id": 198395937,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590108243
    },
    {
        "content": "<p>You'll want to add docstrings to all the <code>def</code>s and all the examples should be in <code>test/group.lean</code>. The Hall-Witt identity probably should be in the appropriate <code>group_theory</code> or <code>algebra</code> file. Also don't forget the PR name should follow <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/commit_convention.md\">our commit convention</a>. I just noticed that that file wasn't linked on our website, so I'll fix that.</p>",
        "id": 198396154,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590108548
    },
    {
        "content": "<p>thanks, somehow it did not occur to me that there would be a PR naming convention</p>",
        "id": 198396317,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590108795
    },
    {
        "content": "<p>i'll try reading a bunch of PRs and see if I notice any other patterns</p>",
        "id": 198396385,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590108865
    },
    {
        "content": "<p>Also, you should have a test for the <code>group at h</code> usage.</p>",
        "id": 198398585,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590111465
    },
    {
        "content": "<p>I think it doesn't make sense to PR such a broken tactic. I'll try to find time to work on it.</p>",
        "id": 198425610,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590142706
    },
    {
        "content": "<p>I think I'm back on track with this tactic. But of course I didn't want to spend time on it today. So anyone who wants to have this tactic really soon is welcome to turn the code at <a href=\"https://gist.github.com/PatrickMassot/051ecff8c84a4a2fcb5c9caf00b65826\">https://gist.github.com/PatrickMassot/051ecff8c84a4a2fcb5c9caf00b65826</a> into a PR. It means dispatching the lemmas to the right places (maybe all of them should go to <code>algebra.group_power</code>), moving all test into a separate file in the test folder, adding more tests, finding bugs etc. I guess the previous version was faster on the very limited examples that worked, but I hope that one is not too far away from actually doing the job.</p>",
        "id": 198467071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590166947
    },
    {
        "content": "<p>Nice, sorry its hard to read all the lemma, does it work when you have a gpow mul a pow?</p>",
        "id": 198467312,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590167077
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a>?</p>",
        "id": 198467412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590167140
    },
    {
        "content": "<p>I forgot to write as part of the PRing process: give actual names to things like <code>gpow_trick_one</code>...</p>",
        "id": 198467551,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590167206
    },
    {
        "content": "<p>Looks good!</p>",
        "id": 198467825,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590167383
    },
    {
        "content": "<p>Ok, don't hesitate to play more with this. I didn't follow rigorous process here, I mostly randomly added lemmas to the simp set.</p>",
        "id": 198468041,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590167494
    },
    {
        "content": "<p>Actually there are edge cases where we should start with ring, so I modified the gist. It now calls ring twice in a row in some edge cases, but I should really stop now</p>",
        "id": 198469315,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590168060
    }
]