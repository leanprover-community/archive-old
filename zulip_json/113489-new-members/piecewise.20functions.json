[
    {
        "content": "<p>Does anyone have any tips for dealing with piecewise functions, in particular showing that they're continuous? I have something like the following in mind:</p>\n<div class=\"codehilite\"><pre><span></span>variables (a : ℝ) (f : ℝ → ℝ) (g : ℝ → ℝ)\ndef pw : ℝ → ℝ := λ x, if x ≤ a then f x else g x\nlemma continuous_pw : continuous f → continuous g → f a = g a → continuous (pw a f g) := sorry\n</pre></div>",
        "id": 152232475,
        "sender_full_name": "Aymon Wuolanne",
        "timestamp": 1545279011
    },
    {
        "content": "<p>Coincidentally, I just issued a pull request with some additions to the analysis library. There is a lemma called <code>tendsto_if</code> which will be helpful: <a href=\"https://github.com/avigad/mathlib/blob/limit_stuff/order/filter.lean#L1257-L1261\" target=\"_blank\" title=\"https://github.com/avigad/mathlib/blob/limit_stuff/order/filter.lean#L1257-L1261\">https://github.com/avigad/mathlib/blob/limit_stuff/order/filter.lean#L1257-L1261</a>. I'd use the fact that a function is continuous if it is continuous at every point (which used to be called <code>continuous_iff_tendsto</code> but in my PR is <code>continuous_iff_continuous_at</code>. Using <code>metric_space</code> you can unwrap the definition of neighborhoods in terms of distance.</p>",
        "id": 152234041,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1545282058
    },
    {
        "content": "<p>There's also <code>continuous_if</code> and <code>continuous_subtype_is_closed_cover</code></p>",
        "id": 152236649,
        "sender_full_name": "Reid Barton",
        "timestamp": 1545286791
    },
    {
        "content": "<blockquote>\n<p>Coincidentally, I just issued a pull request with some additions to the analysis library. </p>\n</blockquote>\n<p>You should expect a lot of homework now, that Mario guy is merciless...</p>",
        "id": 152238561,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545290195
    },
    {
        "content": "<p>Seriously I'm very excited to see some PR from your analysis work. I hope you already discussed it enough with Mario, and will convince Johannes quickly. It would be very nice to have a topology PR merge sprint before Amsterdam (or even before Christmas, and then a second one before Amsterdam)</p>",
        "id": 152238630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545290333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> merciless</p>",
        "id": 152238643,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545290366
    },
    {
        "content": "<p>Completely agree. Let's get these PRs moving.</p>",
        "id": 152239509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545291704
    },
    {
        "content": "<p>Thanks! I think I should be able to get it working with <code>continuous_if</code></p>",
        "id": 152240099,
        "sender_full_name": "Aymon Wuolanne",
        "timestamp": 1545292593
    },
    {
        "content": "<p>Side note: <code>frontier</code> is defined as <code>closure s \\ interior s</code>, isn't this usually referred to as the boundary?</p>",
        "id": 152240118,
        "sender_full_name": "Aymon Wuolanne",
        "timestamp": 1545292658
    },
    {
        "content": "<p>I've never heard of <code>frontier</code> before. I learned it as <code>boundary</code>.</p>",
        "id": 152240169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545292692
    },
    {
        "content": "<p>I thought frontier was <code>closure s \\ s</code></p>",
        "id": 152240177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545292713
    },
    {
        "content": "<p>So what is <code>s \\ interior s</code> called?</p>",
        "id": 152240204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545292752
    },
    {
        "content": "<p>apparently it is sometimes called the boundary! not even making this up</p>",
        "id": 152240214,
        "sender_full_name": "Reid Barton",
        "timestamp": 1545292783
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Boundary_(topology)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Boundary_(topology)\">https://en.wikipedia.org/wiki/Boundary_(topology)</a></p>",
        "id": 152240216,
        "sender_full_name": "Reid Barton",
        "timestamp": 1545292785
    },
    {
        "content": "<blockquote>\n<p>So what is <code>s \\ interior s</code> called?</p>\n</blockquote>\n<p>outliers?</p>",
        "id": 152240264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545292809
    },
    {
        "content": "<p><a href=\"https://www.thesaurus.com/browse/boundary\" target=\"_blank\" title=\"https://www.thesaurus.com/browse/boundary\">https://www.thesaurus.com/browse/boundary</a> enough words to choose from (-;</p>",
        "id": 152240292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545292855
    },
    {
        "content": "<p>periphery is nice</p>",
        "id": 152240303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545292870
    },
    {
        "content": "<p>is borderline acceptable</p>",
        "id": 152240314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545292890
    },
    {
        "content": "<p>it's borderline acceptable</p>",
        "id": 152240318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545292899
    },
    {
        "content": "<p>but actually I find very little use for these concepts, they are more a historical note for me</p>",
        "id": 152240374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545292936
    },
    {
        "content": "<p>boundary is useful though</p>",
        "id": 152240378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545292944
    },
    {
        "content": "<p>Mario has gone easy on me so far. I am about to get on a flight to California to visit my in-laws, but I should be able to make the corrections there.</p>",
        "id": 152284935,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1545338311
    },
    {
        "content": "<p>It looks pretty good. there is absolutely no chance of a conflict of interest, yep</p>",
        "id": 152285351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545338719
    },
    {
        "content": "<p>Would you give this PR a master's thesis?</p>",
        "id": 152285645,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545339017
    },
    {
        "content": "<p>I managed to write a piecewise function like this:  <code>(h : g = λ x,  if x &lt; 2 then 2 * x else 2^x)</code>, is there a cleaner way to deal with  more complicated piecewise functions? Like this : <a href=\"/user_uploads/3121/FOJiklug-xxxSWrIHPAwTc0T/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FOJiklug-xxxSWrIHPAwTc0T/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/FOJiklug-xxxSWrIHPAwTc0T/image.png\"></a></div>",
        "id": 274153411,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1646411297
    },
    {
        "content": "<p>I'd probably just do it with two ifs, that seems reasonable, the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#split_ifs\">tactic#split_ifs</a> should make unpacking them into 3 goals fairly painless</p>",
        "id": 274153855,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1646411499
    },
    {
        "content": "<p>Yeah I'll go with that method, another question I have is why if I change it to : <code>    (h : g = λ x,  if x ∈ set.Iio (2 : ℝ) then 2 * x else 2^x) </code> then I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">set.Iio</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 274154552,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1646411855
    },
    {
        "content": "<p>Put <code>open_locale classical</code> at the top of your file</p>",
        "id": 274154950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646412021
    },
    {
        "content": "<p>How would we deal with piecewise functions like this: <a href=\"/user_uploads/3121/Ybk2YpR0VKpVsRv8PPps8UfU/image.png\">image.png</a> (there is a hole at (0,1)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Ybk2YpR0VKpVsRv8PPps8UfU/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Ybk2YpR0VKpVsRv8PPps8UfU/image.png\"></a></div>",
        "id": 274156390,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1646412629
    },
    {
        "content": "<p>it's <code>x^2 + 1</code> on the left and <code>x + 1</code> on the right</p>",
        "id": 274156539,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1646412692
    },
    {
        "content": "<p>In lean all functions are total, so you would have to define the function on the domain <code>{x : real // x \\ne 0}</code> to represent a hole, or use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option\">docs#option</a> for the missing point.</p>",
        "id": 274157392,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1646413050
    },
    {
        "content": "<p>Oh ok, are there docs on how the <code>if</code> <code>else</code> blocks work? I want to do an <code>else if</code> and leave of the <code>else</code> block but I'm not sure if that's possible</p>",
        "id": 274158294,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1646413376
    },
    {
        "content": "<p>it's not</p>",
        "id": 274158331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646413391
    },
    {
        "content": "<p>the if syntax is <code>if p then a else b</code></p>",
        "id": 274158357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646413402
    },
    {
        "content": "<p>or <code>if h : p then a else b</code></p>",
        "id": 274158387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646413414
    },
    {
        "content": "<p>it doesn't really make sense to leave the else block off in most cases</p>",
        "id": 274158486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646413449
    },
    {
        "content": "<p>I was interested in that because I only wanted to define the function for a certain interval</p>",
        "id": 274158525,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1646413468
    },
    {
        "content": "<p>you need a domain constraint if you want to make the function undefined</p>",
        "id": 274158572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646413497
    },
    {
        "content": "<p>like a hypothesis <code>(h : x != 2)</code></p>",
        "id": 274158608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646413509
    },
    {
        "content": "<p>or you can return an <code>option</code></p>",
        "id": 274158633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646413524
    },
    {
        "content": "<p>or you can return a garbage value (this is what we usually do)</p>",
        "id": 274158681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646413546
    },
    {
        "content": "<p>`<br>\n<span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/piecewise.20functions/near/274158608\">said</a>:</p>\n<blockquote>\n<p>like a hypothesis <code>(h : x != 2)</code></p>\n</blockquote>\n<p>Where would this hypothesis go? Would it be part of the lambda  ? <code>λ x (h : x ≠ 0), ...</code></p>",
        "id": 274159377,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1646413854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/piecewise.20functions/near/274158681\">said</a>:</p>\n<blockquote>\n<p>or you can return a garbage value (this is what we usually do)</p>\n</blockquote>\n<p>So for this example : <a href=\"user_uploads/3121/Ybk2YpR0VKpVsRv8PPps8UfU/image.png\">https://leanprover.zulipchat.com/user_uploads/3121/Ybk2YpR0VKpVsRv8PPps8UfU/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/3121/Ybk2YpR0VKpVsRv8PPps8UfU/image.png\" title=\"https://leanprover.zulipchat.com/user_uploads/3121/Ybk2YpR0VKpVsRv8PPps8UfU/image.png\"><img src=\"user_uploads/3121/Ybk2YpR0VKpVsRv8PPps8UfU/image.png\"></a></div><p>You're suggesting something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">999</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>?</p>",
        "id": 274159925,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1646414087
    },
    {
        "content": "<p>Right now we are asking you to decide the domain and codomain of your function</p>",
        "id": 274160068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646414158
    },
    {
        "content": "<p>A function goes from an input type to an output type. You have given us a picture which is all very nice but what are your input type and output type. Remember that a function has to be defined at every value of the input type and give an answer in the output type</p>",
        "id": 274160273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646414240
    },
    {
        "content": "<p>Before we can define the term (the function) we need to know the type of the term (<code>X -&gt; Y</code>)</p>",
        "id": 274160455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646414309
    },
    {
        "content": "<p>Ah ok, I think I get the just of it, if I make it <code>R -&gt; R</code> then we use a garage value, because as you said the function needs to be defined at every place</p>",
        "id": 274162899,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1646415398
    },
    {
        "content": "<p>What about piecewise functions that are like this? :<br>\n<a href=\"/user_uploads/3121/0zB6X6vFDO5Qa4xjekLQU-4-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0zB6X6vFDO5Qa4xjekLQU-4-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/0zB6X6vFDO5Qa4xjekLQU-4-/image.png\"></a></div>",
        "id": 274162948,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1646415421
    },
    {
        "content": "<p>that's a specification, not a definition. How do you even know that the function is well defined?</p>",
        "id": 274163268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646415574
    },
    {
        "content": "<p>It was specified as a function, <code>    (h : f = λ n, if 1000 ≤ n then n - 3 else f (f (n + 5))</code> seems to work fine, but for some reason I thought we would have to use the inductive type</p>",
        "id": 274163486,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1646415689
    },
    {
        "content": "<p>Taking that as an assumption is saying that you assume <code>f</code>  is a function satisfying the specification</p>",
        "id": 274163726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646415800
    },
    {
        "content": "<p>it does not prove the existence of such a function</p>",
        "id": 274163755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646415818
    },
    {
        "content": "<p>That definition shouldn't \"work fine\", there are things to be proved before you can talk about f, i.e. that there exists a unique function with that property.</p>",
        "id": 274170198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646418789
    }
]