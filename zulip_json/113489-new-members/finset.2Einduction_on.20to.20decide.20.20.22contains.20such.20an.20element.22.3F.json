[
    {
        "content": "<p>I want to use induction to show this decidability. Should I be using something else?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">bottom</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">formula</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_NegNeg.decidable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"n\">ϕ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Why does this not work?</span>\n  <span class=\"c1\">--apply finset.induction_on X,</span>\n\n  <span class=\"c1\">-- I want to do something like this:</span>\n  <span class=\"n\">refine</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"k\">then</span> <span class=\"n\">_</span> <span class=\"k\">else</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- empty set never contains a NegNeg:</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">decidable.is_false</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Set with at least one element:</span>\n  <span class=\"c1\">-- if it is a NegNeg, decide true, otherwishe recurse / use induction hypothesis?</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278399846,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1649497337
    },
    {
        "content": "<p>This is because the goal is data, not a prop, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.induction_on\">docs#finset.induction_on</a> only targets <code>Prop</code>. If you want to do induction on a finset, you have to first do induction on a <code>list</code> and then lift it to <code>multiset</code> by showing that what you constructed is preserved under list permutations.</p>",
        "id": 278400098,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649497777
    },
    {
        "content": "<p>I would do it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">has_NegNeg.decidable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"n\">ϕ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"n\">ϕ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">is_true</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_false</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"n\">ϕ</span><span class=\"o\">))</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278400327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649498090
    },
    {
        "content": "<p>I was about to say something similar but less complete!</p>",
        "id": 278400345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649498112
    },
    {
        "content": "<p>that is, instead of using induction, delegate to the decidability instance for \"there exists an element of X such that bla\"</p>",
        "id": 278400349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649498122
    },
    {
        "content": "<p>What's the name of that instance?</p>",
        "id": 278400370,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649498155
    },
    {
        "content": "<p>looks like the one I just posted uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.decidable_dexists_finset\">docs#finset.decidable_dexists_finset</a></p>",
        "id": 278400428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649498188
    },
    {
        "content": "<p>Aha, many thanks! I guess my mental error was to think of decidable as Prop -&gt; Prop but it is Prop -&gt; Type.</p>",
        "id": 278400552,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1649498399
    },
    {
        "content": "<p>Will now try to understand the code by  <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  thank you!!</p>",
        "id": 278400753,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1649498523
    },
    {
        "content": "<p>Where/how can I look up <code>&lt;|&gt;</code>? My guess is that it tries both tactics and succeeds as soon as one of them succeeds?</p>",
        "id": 278401124,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1649499088
    },
    {
        "content": "<p>it tries the first tactic, and if it fails it tries the second tactic</p>",
        "id": 278401576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649499799
    }
]