[
    {
        "content": "<p>In the following code, I would like to use mul_pos to close my goal. I suspect that my coerced n is messing with my mul_pos application or maybe I am not calling it correctly. </p>\n<div class=\"codehilite\" data-code-language=\"intros\"><pre><span></span><code>    have x : j - h &gt; 0 , simp,\n    exact k,\n    have p := archimedean_R (j - h),\n    have t := p(x), cases t with n hn,\n    cases hn with v hv,\n    have v1 : 0 &lt; ↑n , linarith,\n    have g : 0 &lt; (j - h - 1 / ↑n), linarith,\n    have s : 0 &lt; ↑n * (j - h - 1 / ↑n),\n     ```\n</code></pre></div>",
        "id": 285297408,
        "sender_full_name": "Christian Kolker",
        "timestamp": 1654627853
    },
    {
        "content": "<p>What is  the actual example / lemma you are trying to prove? As is we can't really tell what the goal state is. A full file with the imports will let people help you more easily</p>",
        "id": 285297643,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654627954
    },
    {
        "content": "<p>My goal is 0 &lt;  ↑n * (j - h - 1 / ↑n),</p>",
        "id": 285297649,
        "sender_full_name": "Christian Kolker",
        "timestamp": 1654627955
    },
    {
        "content": "<p>I am messing around with a level from the real number game, here it is </p>\n<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>import tactic\n\n/-\n# Chapter 1 : Sets\n\n## Level 10\n\nAs a final test of your ability in working with sets, prove that the set of rational\nnumbers is dense in the reals.\n\nThis proof will, among other things, rely on several new axioms that appear\nin the left side bar.\nNote that you may need to change the type of some quantities from rationals to reals.\nLean doesn't necessarily consider the rational $2$ to be the same at the real number $2$.\nSome of the axioms on the left make working with the casts from rationals to reals easier.\n-/\n\n\n/- Axiom : inv_prod_self :\n∀ n : ℕ, 0 &lt; n → (1/n : ℝ) * (n : ℝ ) = 1\n-/\n\n/- Axiom : inv_prod_other :\n∀ (m : ℤ), ∀ (n : ℕ), 0 &lt; n → (1/n : ℝ) * (m : ℝ) = (m/n : ℝ)\n-/\n\n/- Axiom : archimedean_R : ∀ x : ℝ, 0 &lt; x → ∃ n : ℕ, 0 &lt; n ∧ (1/n : ℝ) &lt; x\n-/\n\n/- Axiom : has_ceiling : ∀ x : ℝ,  ∃ m : ℤ, ((m-1) : ℝ) ≤ x ∧ x &lt; (m:ℝ)\n-/\n\n-- one way to prove ℚ dense in ℝ\ndef dense_in_R (A : set ℝ) := ∀ (x y : ℝ), x &lt; y → ∃ a ∈ A, a ∈ set.Ioo x y\ndef embedded_rationals : set ℝ := { x | ∃ r : ℚ, x = ↑r }\n-- begin hide\naxiom archimedean_R : ∀ x : ℝ, 0 &lt; x → ∃ n : ℕ, 0 &lt; n ∧ (1/n : ℝ) &lt; x\n-- we might want to prove these below. Made into axioms just for ease.\n-- the problem is that the proofs are too hard for this level, IMO (DS)\naxiom has_ceiling : ∀ x : ℝ,  ∃ m : ℤ, ((m-1) : ℝ) ≤ x ∧ x &lt; (m:ℝ)\naxiom inv_prod_self : ∀ n : ℕ, 0 &lt; n → (1/n : ℝ) * (n : ℝ ) = 1\naxiom inv_prod_other : ∀ (m : ℤ), ∀ (n : ℕ), 0 &lt; n → (1/n : ℝ) * (m : ℝ) = (m/n : ℝ)\n-- end hide\n\n/- Lemma\nRationals are dense in the reals.\n-/\ntheorem rat_dense_in_R : dense_in_R embedded_rationals :=\nbegin\n    intros h j k,\n    have x : j - h &gt; 0 , simp,\n    exact k,\n    have p := archimedean_R (j - h),\n    have t := p(x), cases t with n hn,\n    cases hn with v hv,\n    have v1 : 0 &lt; ↑n , linarith,\n    have g : 0 &lt; (j - h - 1 / ↑n), linarith,\n    have s : 0 &lt; ↑n * (j - h - 1 / ↑n),\n</code></pre></div>",
        "id": 285297822,
        "sender_full_name": "Christian Kolker",
        "timestamp": 1654628031
    },
    {
        "content": "<p>By the way, I just used <code>finish</code> and it cleared my goal. is there any way to see what finish did exactly to clear my goal?</p>",
        "id": 285298610,
        "sender_full_name": "Christian Kolker",
        "timestamp": 1654628364
    },
    {
        "content": "<p>Unfortunately the internals of finish are such that the proof produced isn't really human readable.</p>",
        "id": 285298933,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654628501
    },
    {
        "content": "<p>This works for your first goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">rat_dense_in_R</span> <span class=\"o\">:</span> <span class=\"n\">dense_in_R</span> <span class=\"n\">embedded_rationals</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">j</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">archimedean_R</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">cases</span> <span class=\"n\">t</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">v1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"c1\">-- this line changed</span>\n    <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">h</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">h</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_pos</span> <span class=\"n\">v1</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 285298965,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654628521
    },
    {
        "content": "<p>When you just specify a coercion with the up arrow, but don't say what to lean by default thinks you want to coerce <code>nat</code> to <code>nat</code>, its much better to always put the type ascription like I did here, telling lean you want to coerce to a real in this case.</p>",
        "id": 285299130,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654628600
    },
    {
        "content": "<p>Thank you Alex, this helps a lot!</p>",
        "id": 285477242,
        "sender_full_name": "Christian Kolker",
        "timestamp": 1654740843
    }
]