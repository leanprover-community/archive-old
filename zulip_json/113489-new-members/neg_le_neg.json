[
    {
        "content": "<p>This code</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">total</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">le_total</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">neg_le_neg</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">my_neg_le_neg</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">exact</span> <span class=\"n\">neg_le_neg</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">my_total</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">le_total</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">my_neg_le_neg</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n\n<p>gives this error on line 2:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">neg_le_neg</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_4</span>\n</code></pre></div>\n\n\n<p>but if I use my own version of neg_le_neg then there is no error. Why is this?</p>\n<p>The error seems strange because n ≤ 0 seems like it actually does have type ?m_3 ≤ ?m_4.</p>",
        "id": 199996563,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1591483650
    },
    {
        "content": "<p>I get unknown identifier <code>neg_le_neg</code>. Can you post fully working code?</p>",
        "id": 199997288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591484959
    },
    {
        "content": "<p>Ok, so it looks like I found a way to resolve the error. The problem was the lambda. This code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">my_total</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_total</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">neg_le_neg</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>works with no errors (in an empty lean file). However, I'm still confused as to why this code (in an empty lean file):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">my_total</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">le_total</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">neg_le_neg</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n\n<p>produces the error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">neg_le_neg</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_4</span>\n</code></pre></div>",
        "id": 199997745,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1591485714
    },
    {
        "content": "<p>Which version of Lean are you using? I am still getting <code>unknown identifier 'neg_le_neg'</code></p>",
        "id": 199997850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591485848
    },
    {
        "content": "<p>I'm not exactly sure (maybe 3.11.0?). The \"neg_le_neg\" is coming from .elan/toolchains/leanprover-community-lean-3.11.0/lib/lean/library/init/algebra/ordered_group.lean (but it doesn't seem to require an import for me).</p>",
        "id": 199997913,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1591486007
    },
    {
        "content": "<p>Oh there have been a lot of changes to core since 3.11</p>",
        "id": 199997918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591486027
    },
    {
        "content": "<p>But anyway, is the problem with your <code>my_total</code> thing the fact that you have a random lambda n in the term, but you have put the n before the colon when defining the type?</p>",
        "id": 199997972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591486097
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">37</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">test1</span> <span class=\"bp\">=</span> <span class=\"n\">test2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>Or is the issue something else?</p>",
        "id": 199997983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591486146
    },
    {
        "content": "<p>init/algebra got ripped out of core around 3.13 by the way</p>",
        "id": 199998039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591486235
    },
    {
        "content": "<p>That looks like the issue. Thanks! Is there a reference for getting the most recent version of lean/mathlib?</p>",
        "id": 199998056,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1591486278
    },
    {
        "content": "<p><code>leanproject up</code></p>",
        "id": 199998111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591486353
    },
    {
        "content": "<p>in the root directory of your project</p>",
        "id": 199998115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591486364
    },
    {
        "content": "<p>I think it became <code>int.neg_le_neg</code> by the way</p>",
        "id": 199998126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591486419
    },
    {
        "content": "<p>Great! Thanks for the help!</p>",
        "id": 199998701,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1591487483
    }
]