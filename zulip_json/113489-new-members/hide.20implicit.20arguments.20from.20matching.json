[
    {
        "content": "<p>Is there some option, that will allow to not write <code>_</code> for implicit arguments?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">x.a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">x.b</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 244064047,
        "sender_full_name": "kana",
        "timestamp": 1624795627
    },
    {
        "content": "<p>You could put them to the left of the colon</p>",
        "id": 244064131,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624795747
    },
    {
        "content": "<p>\"def f {b : bool} : x b -&gt; nat | x.a := 0 | x.b := 1\"</p>",
        "id": 244064196,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624795851
    },
    {
        "content": "<p>I think lean 4 also makes different choices about the availability of implicit args in match sections like this</p>",
        "id": 244064219,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624795921
    },
    {
        "content": "<p>I cant move b on left side, because matching of <code>x b</code>depends on b.</p>\n<p>Explicitly it is matching on both args</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"n\">x.a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"n\">x.b</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 244064347,
        "sender_full_name": "kana",
        "timestamp": 1624796116
    },
    {
        "content": "<p>Well, for your \"y\" example, you can</p>",
        "id": 244064789,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624796808
    },
    {
        "content": "<p>Real case is not <code>def</code>, but something like <code>{ assoc := \\lam _ _ _ _ f g h, ... }</code></p>",
        "id": 244065400,
        "sender_full_name": "kana",
        "timestamp": 1624797837
    },
    {
        "content": "<p>Why do you want to avoid the <code>_</code>s? If they weren't there, then what would you do if you actually do need to match on them?</p>",
        "id": 244065429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624797845
    },
    {
        "content": "<p>Also, it sounds like your real case isn't a pattern match at all</p>",
        "id": 244065441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624797860
    },
    {
        "content": "<p>Syntax like <code>{ assoc := \\lam {_ _ _ _} f g h, ... }</code> also works, so I guess, if implicit args were hidden on lambda arguments, it will possible to bind them to context like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">\\</span><span class=\"n\">lam</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"bp\">\\</span><span class=\"n\">lam</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 244065517,
        "sender_full_name": "kana",
        "timestamp": 1624798018
    },
    {
        "content": "<p>So, right now I have such code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"kn\">open</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">HomX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">id</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">HomX</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">HomX</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">HomX</span> <span class=\"n\">B</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">HomX</span>\n<span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">},</span> <span class=\"n\">HomX</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">HomX</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">HomX</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">g</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"kd\">end</span> <span class=\"n\">HomX</span>\n</code></pre></div>\n<p>And I am wondering, is there a way to write it prettier</p>",
        "id": 244065586,
        "sender_full_name": "kana",
        "timestamp": 1624798151
    },
    {
        "content": "<p>Oh yes, there is one way</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">},</span> <span class=\"n\">HomX</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">HomX</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">HomX</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span>\n</code></pre></div>",
        "id": 244065643,
        "sender_full_name": "kana",
        "timestamp": 1624798256
    },
    {
        "content": "<p>You almost certainly don't want that <code>rintro</code> approach as it won't create equation lemmas</p>",
        "id": 244065663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624798280
    },
    {
        "content": "<p><code>rw comp</code> won't behave nearly as nicely</p>",
        "id": 244065667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624798302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"390421\">kana</span> <a href=\"#narrow/stream/113489-new-members/topic/hide.20implicit.20arguments.20from.20matching/near/244065517\">said</a>:</p>\n<blockquote>\n<p>Syntax like <code>{ assoc := \\lam {_ _ _ _} f g h, ... }</code> also works, so I guess, if implicit args were hidden on lambda arguments, it will possible to bind them to context like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">\\</span><span class=\"n\">lam</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"bp\">\\</span><span class=\"n\">lam</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>What you describe is exactly how implicit lambdas work in lean 4. In lean 3 they are always introduced in lambdas the same as regular arguments</p>",
        "id": 244161295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624893860
    },
    {
        "content": "<p>My recommendation is to just live with the <code>_</code>'s in your first definition of <code>HomX.comp</code></p>",
        "id": 244161415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624893916
    }
]