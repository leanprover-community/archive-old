[
    {
        "content": "<p>I'm finding it awkward to use the \"linear injectivity\" of a linear equivalence. The following code both completes the proof, but also gives a type mismatch error. Is there a better way of doing something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.equiv</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">Q</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">Q</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e.to_linear_map.comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">e.to_linear_map.comp</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">e.to_linear_map.comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">e.to_linear_map.comp</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">e.to_linear_map.cancel_left.mp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 311396804,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669041564
    },
    {
        "content": "<p>First of all, if there is an error then it doesn't really do the job.</p>",
        "id": 311397206,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1669041719
    },
    {
        "content": "<p>Let me see, there is something weird</p>",
        "id": 311397430,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1669041781
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 311397705,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669041862
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e.to_linear_map.comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">e.to_linear_map.comp</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">linear_map.cancel_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">linear_equiv.injective</span> <span class=\"n\">e</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>works, but you cannot avoid the <code>by exact</code> part</p>",
        "id": 311398081,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1669041991
    },
    {
        "content": "<p>The point is that <code>linear_equiv.injective e</code> says that <code>⇑e</code> is injective</p>",
        "id": 311398283,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1669042060
    },
    {
        "content": "<p>But what you need is that <code>⇑e.to_linear_map</code> is injective. These two are of course the same, but the elaborator gets confused</p>",
        "id": 311398424,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1669042101
    },
    {
        "content": "<p><code>by exact</code> essentially forces it to unfold some definition.</p>",
        "id": 311398484,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1669042123
    },
    {
        "content": "<p>Yea, I was originally trying <code>linear_map.cancel_left e.injective</code>.  <code>by exact</code> is a neat trick. I will have to keep that in mind. Thank you!</p>",
        "id": 311398798,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669042211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560559\">Richard Osborn</span> has marked this topic as resolved.</p>",
        "id": 311398836,
        "sender_full_name": "Notification Bot",
        "timestamp": 1669042223
    }
]