[
    {
        "content": "<p>I have been using the following function for counting occurrences of an element in a list.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">count_in</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.sum</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is it possibly to write an equivalent function where <code>decidable_eq</code> is not needed? I don't want to execute the function; I want to use it in theorems, but now I don't have <code>decidable_eq</code> instance .</p>",
        "id": 309207885,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668178645
    },
    {
        "content": "<p>Is this not just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.count\">docs#list.count</a>?</p>",
        "id": 309209775,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668179230
    },
    {
        "content": "<p>How could it be possible? What would <code>count_in [a] b</code> use as the algorithm to decide whether b appears in the list?</p>",
        "id": 309210546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668179501
    },
    {
        "content": "<blockquote>\n<p>I want to use it in theorems</p>\n</blockquote>\n<p>In statements of theorems or in proofs of theorems?</p>",
        "id": 309211071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668179647
    },
    {
        "content": "<p>I want to use it in proofs. Do I need <code>[decidable_eq α]</code> for the sake of claiming stuff like \"if two lists have unequal number of 0s, they cannot be equal\"?</p>",
        "id": 309211553,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668179790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Counting.20occurrences.20without.20decidable_eq/near/309209775\">said</a>:</p>\n<blockquote>\n<p>Is this not just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.count\">docs#list.count</a>?</p>\n</blockquote>\n<p>I swear I was searching for it with <code>library_search</code> but I didn't find it, so I reimplemented it myself.</p>",
        "id": 309211926,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668179916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Counting.20occurrences.20without.20decidable_eq/near/309211071\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I want to use it in theorems</p>\n</blockquote>\n<p>In statements of theorems or in proofs of theorems?</p>\n</blockquote>\n<p>For example, I used it in my counterexample (proof) that the class of context-free languages is not closed under intersection:<br>\n<a href=\"https://github.com/madvorak/grammars/blob/main/src/context_free/closure_properties/binary/CF_intersection_CF.lean\">https://github.com/madvorak/grammars/blob/main/src/context_free/closure_properties/binary/CF_intersection_CF.lean</a></p>",
        "id": 309212352,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668180048
    },
    {
        "content": "<p>However, I want to use it for a more general datatype now.</p>",
        "id": 309212431,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668180074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Counting.20occurrences.20without.20decidable_eq/near/309209775\">said</a>:</p>\n<blockquote>\n<p>Is this not just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.count\">docs#list.count</a>?</p>\n</blockquote>\n<p>Would mathlib be interested in having lemmata for <code>list.count</code> too? I have several trivial observations (which were useful for me):<br>\n<a href=\"https://github.com/madvorak/grammars/blob/decbbe93874769b8e8bd0230813a77b7787538b9/src/list_utils.lean#L129\">https://github.com/madvorak/grammars/blob/decbbe93874769b8e8bd0230813a77b7787538b9/src/list_utils.lean#L129</a></p>",
        "id": 309212769,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668180194
    },
    {
        "content": "<p>Yes of course, but I think we have most of your lemmas already.</p>",
        "id": 309215992,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668181209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Counting.20occurrences.20without.20decidable_eq/near/309215992\">said</a>:</p>\n<blockquote>\n<p>Yes of course, but I think we have most of your lemmas already.</p>\n</blockquote>\n<p>Again, I failed to find them. How did you search for them?</p>",
        "id": 309216089,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668181241
    },
    {
        "content": "<p>Did you have a look at <a href=\"https://tqft.net/mathlib/data/list/count\">file#data/list/count</a>?</p>",
        "id": 309216412,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668181364
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.count_append\">docs#list.count_append</a></p>",
        "id": 309216442,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668181379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Counting.20occurrences.20without.20decidable_eq/near/309216412\">said</a>:</p>\n<blockquote>\n<p>Did you have a look at <a href=\"https://tqft.net/mathlib/data/list/count\">file#data/list/count</a>?</p>\n</blockquote>\n<p>I didn't. My bad!</p>",
        "id": 309217086,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668181577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Counting.20occurrences.20without.20decidable_eq/near/309211553\">said</a>:</p>\n<blockquote>\n<p>I want to use it in proofs. Do I need <code>[decidable_eq α]</code> for the sake of claiming stuff like \"if two lists have unequal number of 0s, they cannot be equal\"?</p>\n</blockquote>\n<p>Claims are statements not proofs. You do need that argument for such a claim, because what you're actually claiming is that that statement is true whatever your algorithm is for counting zeros.</p>",
        "id": 309217708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668181788
    },
    {
        "content": "<p>If your \"claim\" only appears as a <code>have</code> line within your proof, then you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#classical\">tactic#classical</a> to conjure a decidable_eq instance</p>",
        "id": 309217860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668181846
    },
    {
        "content": "<p>Did I get it right? Could you please tell me how to rewrite the following 17 lines in a way that is not so extremely awkward?<br>\n<a href=\"https://github.com/madvorak/grammars/blob/1737b1049868bb7d78bbc4241cbab9d7b1cf0ad2/src/unrestricted/closure_properties/unary/star_RE.lean#L169\">https://github.com/madvorak/grammars/blob/1737b1049868bb7d78bbc4241cbab9d7b1cf0ad2/src/unrestricted/closure_properties/unary/star_RE.lean#L169</a></p>",
        "id": 309224775,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668184198
    },
    {
        "content": "<p>I would guess that <a href=\"https://github.com/madvorak/grammars/blob/1737b1049868bb7d78bbc4241cbab9d7b1cf0ad2/src/unrestricted/closure_properties/unary/star_RE.lean#L169-L173\">https://github.com/madvorak/grammars/blob/1737b1049868bb7d78bbc4241cbab9d7b1cf0ad2/src/unrestricted/closure_properties/unary/star_RE.lean#L169-L173</a> can be replaced by the tactic <code>classical,</code> by itself</p>",
        "id": 309226189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668184729
    },
    {
        "content": "<p>You made things hard for yourself by using <code>have</code> rather than <code>let</code> or <code>letI</code></p>",
        "id": 309226225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668184749
    },
    {
        "content": "<p>Why don't you just make <code>ns</code> decidable_eq though?</p>",
        "id": 309226327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668184789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Counting.20occurrences.20without.20decidable_eq/near/309226189\">said</a>:</p>\n<blockquote>\n<p>I would guess that <a href=\"https://github.com/madvorak/grammars/blob/1737b1049868bb7d78bbc4241cbab9d7b1cf0ad2/src/unrestricted/closure_properties/unary/star_RE.lean#L169-L173\">https://github.com/madvorak/grammars/blob/1737b1049868bb7d78bbc4241cbab9d7b1cf0ad2/src/unrestricted/closure_properties/unary/star_RE.lean#L169-L173</a> can be replaced by the tactic <code>classical,</code> by itself</p>\n</blockquote>\n<p>Thanks a lot!!</p>\n<p>BTW, how do you quote a segment of code from GitHub? Did you edit the URL by hand?</p>",
        "id": 309227738,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668185388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Counting.20occurrences.20without.20decidable_eq/near/309226327\">said</a>:</p>\n<blockquote>\n<p>Why don't you just make <code>ns</code> decidable_eq though?</p>\n</blockquote>\n<p>I don't think I can. The definition is essentially:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ns</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"n\">sum</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">⊕</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Even thought the three special values (one of which is abstracted as <code>H</code>) come from a <code>decidable_eq</code> type (and I use those values in my <code>list.count_in</code> juggling), I don't want to restrict what <code>T</code> and <code>N</code> are.</p>",
        "id": 309228286,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668185605
    },
    {
        "content": "<p>If you have <code>decidable_eq</code> on <code>T</code> and <code>N</code>, then you have it on <code>ns</code>.</p>",
        "id": 309228683,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668185736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Counting.20occurrences.20without.20decidable_eq/near/309228683\">said</a>:</p>\n<blockquote>\n<p>If you have <code>decidable_eq</code> on <code>T</code> and <code>N</code>, then you have it on <code>ns</code>.</p>\n</blockquote>\n<p>I don't.</p>",
        "id": 309228734,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668185754
    },
    {
        "content": "<p>You could write the instance that has that implication anyway, and things might be slightly easier for you</p>",
        "id": 309234673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668188005
    },
    {
        "content": "<p>On which level should I write the instance? Inside a concrete proof?</p>",
        "id": 309234765,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668188041
    },
    {
        "content": "<p>Globally, with <code>instance</code></p>",
        "id": 309236492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668188793
    },
    {
        "content": "<blockquote>\n<p>how do you quote a segment of code from GitHub? Did you edit the URL by hand?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> it's pretty simple, here's how:</p>\n<p>1) Click the line number you want to start from<br>\n2) Shift-click the line number you want to end at<br>\n3) Click the three-dot button and select \"Copy permalink\"</p>",
        "id": 309243750,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1668191834
    }
]