[
    {
        "content": "<p>I am working through exercises in chapter 3.  One of these is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>After the <code>intro h</code> my goal state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span>\n</code></pre></div>\n<p>I \"know\" from elementary propositional logic that <code>¬(p ∧ q)↔(¬p ∨ ¬q)</code>.  I'm getting stuck here on how to prove it.  The obvious tactical move is to pick <code>left</code> or <code>right</code>.  If I do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">left</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>then my goal state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>To make this work I would need to convert <code>h1</code> to <code>p ∧ q</code> but  I don't have <code>q</code>.</p>\n<p>What tactics are available for this proof that I'm not using?  It doesn't seem like I'm looking for <code>em</code> because I don't have a <code>p ∨ ¬p</code> situation.</p>",
        "id": 217512116,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605982439
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_and_distrib\">docs#not_and_distrib</a> or something like that...</p>",
        "id": 217512250,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605982627
    },
    {
        "content": "<p>So you can <code>rw not_and_distrib at h</code></p>",
        "id": 217512262,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605982671
    },
    {
        "content": "<p>Oh sorry... You're doing the exercise!</p>",
        "id": 217512307,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605982705
    },
    {
        "content": "<p>(so you shouldn't cheat and use the lemma)</p>",
        "id": 217512323,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605982732
    },
    {
        "content": "<blockquote>\n<p>The obvious tactical move is to pick left or right.</p>\n</blockquote>\n<p>Unfortunately, this is not the right move in this case. As mentioned in the text before the exercise, you'll need to use classical logic, so try <code>by_cases</code> or <code>by_contra</code>.</p>",
        "id": 217512684,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605983178
    },
    {
        "content": "<p>Is there an equivalent of <code>by_cases</code> and <code>by_contra</code> that is natural for tactic mode? The <a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html?highlight=by_contra\">examples</a>  are term mode.  Also is there an up to date Lean 3 quick reference guide?  <a href=\"https://leanprover.github.io/tutorial/A1_Quick_Reference.html\">This one</a>  doesn't have <code>by_cases</code> and <code>by_contra</code>, it is only for Lean 2.</p>\n<p>Or well never mind I guess this is the cheat sheet, but it is not a one-pager: <a href=\"https://leanprover-community.github.io/mathlib_docs/core/init/meta/tactic.html#tactic.by_cases\">https://leanprover-community.github.io/mathlib_docs/core/init/meta/tactic.html#tactic.by_cases</a></p>",
        "id": 217515440,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605987412
    },
    {
        "content": "<p><code>by_contra</code> and <code>by_cases</code> are tactics.</p>",
        "id": 217515585,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605987653
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a></p>",
        "id": 217515603,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605987719
    },
    {
        "content": "<p>(Although that page contains some tactics from mathlib)</p>",
        "id": 217515648,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605987765
    },
    {
        "content": "<p>If I do <code>by_cases p → q,</code>, it gives me two goals both labelled <code>h</code>.  Is there a way to pick the label?  Doing <code>by_cases p → q h1</code> gives <code>unknown identifier 'h1'</code> and doing <code>by_cases p → q with h1</code> causes <code>invalid 'begin-end' expression, ',' expected</code>.</p>",
        "id": 217515688,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605987827
    },
    {
        "content": "<p><code>by_cases h1 : p \\to q</code></p>",
        "id": 217515751,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605987862
    },
    {
        "content": "<p>You can also take a look at the <code>dedup</code> tactic :)</p>",
        "id": 217515774,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605987962
    },
    {
        "content": "<p>But it's better just to start off with an explicit name which is different from h.</p>",
        "id": 217515821,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605987996
    },
    {
        "content": "<p>This does something confusing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The first goal gets the <code>h2</code> label, which I expected.  The second goal gets two labels for an existing premise, which I didn't expect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span>\n\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span>\n</code></pre></div>",
        "id": 217515956,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605988250
    },
    {
        "content": "<p>The <code>h</code>and <code>h2</code> are terms, and <code>p \\to q</code> is their type. You have two terms of the same type.</p>",
        "id": 217515976,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605988312
    },
    {
        "content": "<p>Never mind I understand now looking at it, it's changing both goals. My prior experience was that tactics only operated on the top goal.</p>",
        "id": 217515977,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605988313
    },
    {
        "content": "<p>So I guess the rule is that tactics operate on one or more applicable elements of the goal set and only complain if there are 0 applicable elements.</p>",
        "id": 217516026,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605988347
    },
    {
        "content": "<p>The <code>by_cases</code> tactic takes a proposition <code>p</code> and splits the goal into two, where the first one has a term of type <code>p</code> and the second has a term of type <code>\\not p</code>.</p>",
        "id": 217516027,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605988348
    },
    {
        "content": "<p>Oh good point, thank you!</p>",
        "id": 217516034,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605988365
    },
    {
        "content": "<p>Under the hood, all that's going on is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h2</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Here <code>em</code> is \"excluded middle\"</p>",
        "id": 217516100,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605988483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I'm looping here, can you give me another hint?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">by_contra</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>leads to goal state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n<span class=\"n\">h3</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 217516229,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605988691
    },
    {
        "content": "<p>I suggest to write down a proof with pen + paper first, and try to convert that into a lean proof.</p>",
        "id": 217516251,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605988776
    },
    {
        "content": "<p>In particular, the <code>by_cases</code>line doesn't seem to buy you anything in this proof.</p>",
        "id": 217516295,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605988820
    },
    {
        "content": "<p>Your proof is calling <code>by_cases x</code> on an <code>x</code> you already know to be false (it's in your proof state). You should be using it on something that you don't know to be true or false yet (perhaps p or q?)</p>",
        "id": 217516374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605988946
    },
    {
        "content": "<p>I suggest </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217516544,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605989236
    },
    {
        "content": "<p>I'm stuck on a subgoal. If I have <code>p</code> and <code>q</code> as hypotheses, is there a way to introduce <code>p → q</code>?  I'm trying to prove  this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">implies_commutative</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"n\">by_contra</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and I am in state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">r</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 217517990,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605991152
    },
    {
        "content": "<p>Instead of <code>by_contra h4</code>, why not just <code>apply h1</code>?</p>",
        "id": 217517994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605991180
    },
    {
        "content": "<p>You're trying to prove <code>r</code> after all, and the conclusion of <code>h1</code> is <code>r</code>.</p>",
        "id": 217518003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605991198
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> that works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">implies_commutative</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217518086,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605991301
    },
    {
        "content": "<p>One way to prove all of these things is just to do cases on all the propositional variables and then let the simplifier deal with it. In my mind your goal in that question is something which can be solved by a truth table approach -- there are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> cases and that's the end of it. Giving a constructive proof is a lot more fun but somehow involves having ideas, whereas the classical method can be turned into an algorithm (<code>tauto!</code>, in this case).</p>",
        "id": 217518320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605991683
    },
    {
        "content": "<p>Here is a constructive term mode proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">implies_commutative</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hpqr</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">_</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">implies_commutative</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hpqr</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hpqr</span> <span class=\"n\">_</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">implies_commutative</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hpqr</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hpqr</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp2</span><span class=\"o\">,</span> <span class=\"n\">_</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">implies_commutative</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hpqr</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hpqr</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp2</span><span class=\"o\">,</span> <span class=\"n\">hq</span>\n</code></pre></div>",
        "id": 217518436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605991863
    },
    {
        "content": "<p>It's just a translation of your tactic proof into compact term mode, which is a variant of term mode which is, for me, far easier to steer than the \"chapter 3 term mode\" stuff you were doing with all the <code>assume</code> and <code>show</code> stuff.</p>",
        "id": 217518495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605991927
    },
    {
        "content": "<p>At each stage, I pause at the <code>_</code> and look at the goal in the infoview and figure out what to do next.</p>",
        "id": 217518513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605991973
    },
    {
        "content": "<p><code>assume</code> is just a more verbose way of saying <code>λ</code>, and (I think) <code>show</code> is just a way of giving an explicit type ascription like with <code>:</code> except up front instead of after the term.</p>",
        "id": 217518572,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605992087
    },
    {
        "content": "<p>I think of <code>show</code> as being analogous to <code>change</code> in tactic mode. I might be wrong though...</p>",
        "id": 217518583,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605992132
    },
    {
        "content": "<p>It's all a bit confusing. In tactic mode there's also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#show\">tactic#show</a> which lets you choose which goal you want to work on.</p>",
        "id": 217518722,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605992348
    },
    {
        "content": "<p>With the help of <code>implies_commutative</code> I got a little bit farther and then stuck .  I am trying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hp1</span> <span class=\"o\">:=</span> <span class=\"n\">implies_commutative</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hp1p</span> <span class=\"o\">:=</span> <span class=\"n\">hp1</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"n\">at</span> <span class=\"n\">hp1p</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hp1p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and I get to goal state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n<span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span>\n</code></pre></div>\n<p>which doesn't look provable unless I can abstract <code>h</code>, instantiate the <code>q</code> with false and then I'm done.</p>",
        "id": 217519037,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605992842
    },
    {
        "content": "<p>(p → q) is true if p is false (<code>hp</code>), right?</p>",
        "id": 217519200,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605993013
    },
    {
        "content": "<p>Yes so I do this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hp1</span> <span class=\"o\">:=</span> <span class=\"n\">implies_commutative</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hp1p</span> <span class=\"o\">:=</span> <span class=\"n\">hp1</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"n\">at</span> <span class=\"n\">hp1p</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hp1p</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and the goal state before the last <code>have</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n<span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>so I think I should be able to do (h hp) but it won't unify <code>p → q</code> with <code>p → false</code>, so I think I need to universally quantify <code>h</code> first, and then instantiate it, is that right?</p>",
        "id": 217519292,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605993164
    },
    {
        "content": "<p>No, again, <code>h</code> is a hypothesis about the specific <code>q</code> in your tactic state</p>",
        "id": 217519368,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605993282
    },
    {
        "content": "<p>But I'm not seeing <code>forall.intro</code>in the docs.</p>",
        "id": 217519377,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605993303
    },
    {
        "content": "<p>Try <code>apply h</code></p>",
        "id": 217519381,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605993306
    },
    {
        "content": "<p>If you ever read something about quantification in traditional presentations of first order logic it probably helps to forget it.</p>",
        "id": 217519386,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605993332
    },
    {
        "content": "<p>You need to apply <code>h</code> and prove its antecedent <code>p -&gt; q</code>--in tactic mode you can do these in either order</p>",
        "id": 217519448,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605993423
    },
    {
        "content": "<p>I've succeeded in making a longer partial proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hp1</span> <span class=\"o\">:=</span> <span class=\"n\">implies_commutative</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hp1p</span> <span class=\"o\">:=</span> <span class=\"n\">hp1</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"n\">at</span> <span class=\"n\">hp1p</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hp1p</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">hp2</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hp</span> <span class=\"n\">hp2</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which dead-ends at this goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n<span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 217519528,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605993572
    },
    {
        "content": "<p>In other words I'm cycling.   I can try going back to lambda expressions and looking at _'s.</p>",
        "id": 217519674,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605993802
    },
    {
        "content": "<p>You could prove <code>p</code> because your assumptions were contradictory, they still are when proving <code>¬q</code></p>",
        "id": 217519723,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605993862
    },
    {
        "content": "<p>(Alternatively, note that you could also prove <code>p ∧ ¬q</code> that way.)</p>",
        "id": 217519846,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605994111
    },
    {
        "content": "<p>Here are a few more hints</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">}},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 217519866,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605994193
    },
    {
        "content": "<p>Given <code>hp : ¬p</code> what can you say about <code>p → q</code>?</p>",
        "id": 217519918,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605994235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>You don't need the second <code>split</code> either :)</p>\n</div></div>",
        "id": 217520171,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605994577
    },
    {
        "content": "<p>(I figured it would be helpful to break everything down completely, for the sake of the example)</p>",
        "id": 217520207,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605994664
    },
    {
        "content": "<p><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">false.elim</span> <span class=\"bp\">$</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">false.elim</span> <span class=\"bp\">$</span> <span class=\"n\">hnp</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 217520422,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605994928
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , I got there a different way, kind of ugly, but it compiles.  I will study your versions for new tools like _-following and <code>assumption</code> tactic which I haven't used for anything, plus more term mode.  Here is my version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">implies_commutative</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">or_equiv</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hp1</span> <span class=\"o\">:=</span> <span class=\"n\">implies_commutative</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hp1p</span> <span class=\"o\">:=</span> <span class=\"n\">hp1</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"n\">at</span> <span class=\"n\">hp1p</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hp1p</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">hp2</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hp</span> <span class=\"n\">hp2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:=</span> <span class=\"n\">or.intro_left</span> <span class=\"n\">q</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">or_equiv</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217520608,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605995198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I'm looking at your hint and I'm confused about one thing.  Starting here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>just before the <code>assumption</code>, the goal state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>Applying <code>assumption</code> turns this into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">¬</span><span class=\"n\">q</span>\n</code></pre></div>\n<p>I read this as saying that it applied <code>h : ¬(p → q)</code> to <code>p</code>.  However <code>h</code> is really of type <code>h : (p → q)→ false</code>, not of type <code>h:p→ (q→ false)</code>.  So the application should fail.  Why is it working with the <code>assumption</code> to give <code>q→ false</code>?</p>",
        "id": 217521011,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605995725
    },
    {
        "content": "<p>No, it's just applying the assumption <code>hp</code> from the context to prove goal <code>p</code></p>",
        "id": 217521078,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605995790
    },
    {
        "content": "<p>After that, lean moves on to the next goal</p>",
        "id": 217521097,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605995830
    },
    {
        "content": "<p>Thanks I see it just got rid of one goal and what I'm seeing is the remaining goal.</p>",
        "id": 217521371,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605996196
    },
    {
        "content": "<p>If you were to use <code>{}</code>s in your code so as to always have one goal, as is recommended by the style guide, you would not have confused yourself in this manner.</p>",
        "id": 217551687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606052174
    },
    {
        "content": "<p>This was probably my fault, I didn't put <code>{}</code> in the hint above because <code>assumption</code> takes care of the first goal immediately. In real life, I would use <code>refine &lt; hp, _ &gt;,</code> instead of <code>split</code> so that lean only leaves one goal instead of two</p>",
        "id": 217553338,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606054789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> \"in real life\" (Lean sources) it seems that terse term mode is the rule and tactic mode is rarely if ever used for internals.</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I had a moment of enlightenment just now about what \"truth table approach\" means.  If there are variables <code>p1,p2,p3...</code> it means</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_cases</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">p1</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nand_left</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">or.intro_right</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">h2</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">or.intro_left</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">h1</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217557189,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606060411
    },
    {
        "content": "<p>Right. In classical logic there's an algorithm for proving all the true first order propositional calculus theorems, which is \"write out the truth table\". When you get bored writing it out manually (by doing cases on the variables and using <code>simp</code>) you can just start using tactics like <code>tauto!</code> which do it all for you. Constructively it's a different story, that's what all this intro, split, apply stuff is</p>",
        "id": 217557327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606060607
    },
    {
        "content": "<p>Wouldn't dec_trivial also work?</p>",
        "id": 217557913,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606061486
    },
    {
        "content": "<p>Because bool is a fintype</p>",
        "id": 217557917,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606061493
    },
    {
        "content": "<p><code>bool != Prop</code></p>",
        "id": 217558051,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606061695
    },
    {
        "content": "<p>I finally finished every exercise in chapter 3.  Chapter 4 beckons.  I am curious if there is a more tactic-style way to do <code>iff.elim</code> rather than this term style application:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">end_of_chapter_3</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">iff.elim_left</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">iff.elim_right</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h5</span> <span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h4</span> <span class=\"n\">h5</span><span class=\"o\">,</span>   <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217558510,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606062385
    },
    {
        "content": "<p>How about an \"apply <a href=\"http://h.mp\">h.mp</a>\" after the first intro h?</p>",
        "id": 217558709,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606062729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> the instructions on the last exercise are \"Prove ¬(p ↔ ¬p) without using classical logic\".  I think <code>h.mp</code> would be out of scope.</p>",
        "id": 217558822,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606062919
    },
    {
        "content": "<p>I'm just curious if there is a more \"tactonic\" way to split up an equivalence into left and right hand directions than <code>iff.elim</code>.</p>",
        "id": 217558867,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606062977
    },
    {
        "content": "<p>Why is that a classical approach if you use the <a href=\"http://iff.mp\">iff.mp</a>?</p>",
        "id": 217558877,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606063017
    },
    {
        "content": "<p>That's exactly the iff in the left to right direction implication</p>",
        "id": 217558885,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606063037
    },
    {
        "content": "<p>Classical logic means em or by_cases</p>",
        "id": 217558894,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606063060
    },
    {
        "content": "<p>It's the <code>by_cases</code> which is out of scope for this one, and this is a famously tricky one.</p>",
        "id": 217559169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606063429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> To answer your quuestion about splitting, you can use the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">end_of_chapter_3</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"c1\">--  have h2 := iff.elim_left h,</span>\n<span class=\"c1\">--  have h3 := iff.elim_right h,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h5</span> <span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h4</span> <span class=\"n\">h5</span><span class=\"o\">,</span>   <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217559224,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606063487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> when I look at this without using <code>by_cases</code>, the first thing I want to do is convert <code>p → q</code> to <code>¬p ∨ q</code>, because the natural start to the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">end_of_chapter_3</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>leaves me in a goal state with two implications and no premise, and neither implication can be applied as a premise to the other:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>However, to access the definition of implication, I need to prove it, and the only way I could do it was with <code>by_cases</code>, which is out of scope:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">definition_imply</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>What other tricks are available to allow me to rewrite the implication without using classical logic?</p>",
        "id": 217561221,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606066665
    },
    {
        "content": "<p>You can't rewrite an implication, I don't know what you mean. The question is hard. I can give you a hint which usually gives it away.</p>",
        "id": 217562224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606068135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, by rewrite an implication, I simply mean replace <code>p → q</code> with <code>¬p ∨ q</code>,  There is no automatic translation that I know of in the system.  It has to be proved in some way.  My proof above of <code>definition_imply</code> uses <code>by_cases</code> so it is out of scope.  Does Lean have another rewrite rule which is not classical which will replace <code>p → q</code> with <code>¬p ∨ q</code>?  That's all the hint I need to move a little further.</p>",
        "id": 217562320,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606068346
    },
    {
        "content": "<p>Is this thing you want to use provable constructively? If so then just prove it (<code>have h : (p -&gt; q) \\iff (\\not p \\or q)</code> ) and then rewrite it.</p>",
        "id": 217562377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606068416
    },
    {
        "content": "<p>(I should say that I neither know nor care whether this is provable constructively)</p>",
        "id": 217562389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606068465
    },
    {
        "content": "<p>it isn't, as mentioned in exercise 3.7.2 :)</p>",
        "id": 217562436,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606068489
    },
    {
        "content": "<p>With <code>q=p</code>, this is the Law of the Excluded Middle, so it is out of scope.</p>",
        "id": 217562440,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606068506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> can you prove <code>¬p</code> in your goal, on paper?</p>",
        "id": 217562448,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606068558
    },
    {
        "content": "<p>(<code>end_of_chapter_3</code> is definitely provable constructively.)</p>",
        "id": 217562509,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1606068651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> I don't think so.  My goal state is <code>false</code> and my hypotheses are two  implications that don't \"fit\" each other, and without being able to introduction symmetric assumptions with <code>by_cases</code>, I am stuck.  That is, start from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">),</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>I don't have any of the premises <code>p</code> or <code>p→ false</code> available, so I can't move, I don't have any rules to apply.</p>",
        "id": 217562524,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606068704
    },
    {
        "content": "<p>can you somehow prove <code>(p → false)</code>, i.e. make it available?</p>",
        "id": 217562573,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606068748
    },
    {
        "content": "<p>I don't know how to introduce <code>p → false</code> as an assumption without using <code>by_cases</code>.  It doesn't prove itself, as it is not generally true.  If it was <code>p → true</code> I'd be in better shape.</p>",
        "id": 217562591,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606068831
    },
    {
        "content": "<p><code>have h : p → false,</code> and then prove it.</p>",
        "id": 217562708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606068988
    },
    {
        "content": "<p>with <code>have h4 : p → false, { ... },</code> you can make it a goal to prove it, where <code>...</code> is your proof of <code>p → false</code>. after completing <code>...</code>, you can use <code>h4</code> in your proof</p>",
        "id": 217562717,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606069000
    },
    {
        "content": "<p>Oh OK I didn't know I could throw any hypothesis in with <code>have</code>, I thought I always had to construct it.  <code>by_cases</code> is a kind of double <code>have</code> and I assumed the reason it was double was because that was sound.  Actually I can mimic <code>by_cases</code> with two <code>have</code> statements that insert unproven propositions.  I am being constructive by just not inserting the second one?</p>",
        "id": 217562870,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606069231
    },
    {
        "content": "<p>Also, the action of doing <code>h4 : p → false</code> doesn't actually impact my current goal.  It just creates a second goal.  I'm still stuck with the first goal.  If my start is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">end_of_chapter_3</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>  <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>then after the <code>have h4: ¬p</code> my goal state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 217562974,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606069404
    },
    {
        "content": "<p>the first goal requires you to prove <code>h4 : ¬p</code>, whereas the second goal has <code>h4</code> in its assumptions</p>",
        "id": 217563038,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606069495
    },
    {
        "content": "<p>Thanks I get it, I can do an <code>apply</code> here.</p>",
        "id": 217563058,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606069529
    },
    {
        "content": "<p>remember that <code>¬p = p → false</code></p>",
        "id": 217563140,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606069652
    },
    {
        "content": "<p>With <code>apply</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">end_of_chapter_3</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>  <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span>\n     <span class=\"n\">apply</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n     <span class=\"n\">apply</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The <code>apply</code>s cycle me between a top goal state of either <code>p</code> or <code>¬p</code>.  It's a loop</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span>\n\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 217563313,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606069869
    },
    {
        "content": "<p>According to <a href=\"https://en.wikipedia.org/wiki/Intuitionistic_logic#Weaker_than_classical_logic\">Wikipedia</a>, I should have access to an axiom of form <code>¬(¬(p ∨¬p))</code>.  This might be helpful.  What's it's name in Lean?</p>",
        "id": 217563382,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606069981
    },
    {
        "content": "<p>You can look up lemma names using <code>library_search</code>.</p>",
        "id": 217563419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606070034
    },
    {
        "content": "<p>instead of apply, try intro</p>",
        "id": 217563460,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606070051
    },
    {
        "content": "<p>Or actually it might be the opposite of helpful, it's just telling me I can't do <code>by_cases</code>.</p>\n<p>Thanks I will try <code>intro</code>.</p>",
        "id": 217563470,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606070075
    },
    {
        "content": "<p>So finally, finally, end of chapter 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">end_of_chapter_3</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h5</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h4</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217563975,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606070731
    },
    {
        "content": "<p>Bonus points: make a term-mode proof!</p>",
        "id": 217564247,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606071137
    },
    {
        "content": "<p>Why wouldn't just \"intro h, apply <a href=\"http://h.mp\">h.mp</a>, intro hp, exact hp\" work</p>",
        "id": 217564252,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606071150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20do.20I.20convert.20.20.C2.AC(a.20.E2.88.A7.20b).20to.20.C2.ACa.20.E2.88.A8.20.C2.ACb.20in.20tactic.20mode.3F/near/217564252\">said</a>:</p>\n<blockquote>\n<p>Why wouldn't just \"intro h, apply <a href=\"http://h.mp\">h.mp</a>, intro hp, exact hp\" work</p>\n</blockquote>\n<p>applying <code>h.mp</code> yields two goals of <code>p</code>, not <code>p → p</code></p>",
        "id": 217564413,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606071408
    },
    {
        "content": "<p>OK, then rewrite with h, intro, which gives a hypothesis of \"false\" which can prove anything</p>",
        "id": 217564649,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606071736
    },
    {
        "content": "<p>The rewrite fails. It's p iff (not p), right? You can't rewrite a <code>false</code> goal with that.</p>",
        "id": 217564667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606071772
    },
    {
        "content": "<p>I mean, for the two goals of p</p>",
        "id": 217564682,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606071795
    },
    {
        "content": "<p>You rewrite with h and then intro and you get a <em>goal</em> of false, and a hypothesis of p. You can do it this way but it's longer (and you have to do it twice).</p>",
        "id": 217564764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606071942
    },
    {
        "content": "<p>Ah, I see, never mind</p>",
        "id": 217564765,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606071947
    },
    {
        "content": "<p>A little shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">end_of_chapter_3</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"n\">hp</span> <span class=\"n\">hp</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h4</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217564768,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1606071951
    },
    {
        "content": "<p>not many steps to a term-mode proof from there :)</p>",
        "id": 217564961,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606072218
    },
    {
        "content": "<p>I've been trying to figure out how to make animated gifs for teaching... Anyway, I made a little animation explaining how to convert the above proof to a term-mode proof, in case it helps.<br>\n<a href=\"/user_uploads/3121/RtYR--9zU70yTru5vHbEsViC/output.gif\">output.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RtYR--9zU70yTru5vHbEsViC/output.gif\" title=\"output.gif\"><img src=\"/user_uploads/3121/RtYR--9zU70yTru5vHbEsViC/output.gif\"></a></div>",
        "id": 217566712,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606074601
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> this visually and beautifully helps me out of the woods of converting tactics to terms.</p>",
        "id": 217566921,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606074876
    },
    {
        "content": "<p>No problem. I think seeing other people golfing in lean is helpful when you're first starting out :)</p>",
        "id": 217566939,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606074907
    },
    {
        "content": "<p>This GIF as an MP4 would be a great addition to the Xena Channel: <a href=\"https://www.youtube.com/channel/UCtdYf-CsDI215SqaQ3XYx1A\">https://www.youtube.com/channel/UCtdYf-CsDI215SqaQ3XYx1A</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"channel\" href=\"https://www.youtube.com/channel/UCtdYf-CsDI215SqaQ3XYx1A\"><img src=\"https://i.ytimg.com/vi/channel/default.jpg\"></a></div>",
        "id": 217567485,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606075666
    },
    {
        "content": "<p>I think the emacs might scare off too many people <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 217568639,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606077335
    },
    {
        "content": "<p>I grew up on Emacs but haven't set it up for Lean yet.  </p>\n<p>The animated GIF is a little hard to scroll through and there's a lot to learn there, so, on Ubuntu,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ffmpeg</span> <span class=\"bp\">-</span><span class=\"n\">i</span> <span class=\"n\">output.gif</span> <span class=\"bp\">-</span><span class=\"n\">movflags</span> <span class=\"n\">faststart</span> <span class=\"bp\">-</span><span class=\"n\">pix_fmt</span> <span class=\"n\">yuv420p</span> <span class=\"bp\">-</span><span class=\"n\">vf</span> <span class=\"s2\">\"scale=trunc(iw/2)*2:trunc(ih/2)*2\"</span> <span class=\"n\">video.mp4</span>\n</code></pre></div>\n<p>makes an MP4 which is a lot easier to view.</p>",
        "id": 217571227,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606080758
    },
    {
        "content": "<p>Here's a higher quality mp4<br>\n<a href=\"/user_uploads/3121/oQv9TXOt1YmQZuUDdrbj4TSw/output.mp4\">output.mp4</a></p>",
        "id": 217571444,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606081053
    },
    {
        "content": "<p>BTW, do you know of an easy way of making such gifs on linux? I used a roundabout way by using OBS to make a .mkv file, then I used ffmpeg to convert to a gif. Is there an easier / more direct way?</p>",
        "id": 217571508,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606081117
    },
    {
        "content": "<p>I use <a href=\"https://github.com/phw/peek/blob/master/README.md\">peek</a> (Patrick told me about it).</p>",
        "id": 217571988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606081820
    },
    {
        "content": "<p>Nice. peek is even in my distro's official package repo</p>",
        "id": 217572142,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606082050
    }
]