[
    {
        "content": "<p>Hello, again as part of <a class=\"stream-topic\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths/topic/Definition.20of.20presheaf.20of.20modules\">#maths &gt; Definition of presheaf of modules</a> I'm trying to use the fact that a functor preserves limits to conclude that binary products are isomorphic. I am able to come up with a term of type <code>preserves_limits_of_size G</code> for my functor <code>G</code>, but I have no clue how to use this to conclude something about objects. The tactics <code>tidy</code>, <code>obviously</code>, and <code>simp</code>, and <code>apply_instance</code> don't seem to automatically do this. </p>\n<p>I know this should be quite simple, but I'm just very new to the category theory library. Can someone educate me?</p>\n<p>Here's the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.preserves.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.has_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.adjunction.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.closed.cartesian</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.adjunction</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_limits</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_limits</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">⊣</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">adj</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">RAPL_binary_products</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.obj</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⨯</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"o\">(</span><span class=\"n\">G.obj</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⨯</span> <span class=\"o\">(</span><span class=\"n\">G.obj</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">pres</span> <span class=\"o\">:</span> <span class=\"n\">preserves_limits_of_size</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">right_adjoint_preserves_limits</span> <span class=\"n\">adj</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- What goes here?</span>\n  <span class=\"c1\">-- Pretty sure I should not be unfolding the definition into limit cones</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290408783,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1658425122
    },
    {
        "content": "<p>The content of <code>src/category_theory/limits/preserves/shapes/binary_products.lean</code> should help you.</p>",
        "id": 290409889,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658425668
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">RAPL_binary_products</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.obj</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⨯</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"o\">(</span><span class=\"n\">G.obj</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⨯</span> <span class=\"o\">(</span><span class=\"n\">G.obj</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"n\">pres</span> <span class=\"o\">:</span> <span class=\"n\">preserves_limits_of_size.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">right_adjoint_preserves_limits</span> <span class=\"n\">adj</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">category_theory.limits.preserves_limit_pair.iso</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290411030,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658426244
    },
    {
        "content": "<p>(I used <code>set_option pp.universes true</code> to figure out that I need to put <code>{0 0}</code>.)</p>",
        "id": 290411092,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658426277
    },
    {
        "content": "<p>Ok, when I use <code>set_optoin pp.universes true</code>, I get the error message </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n  <span class=\"n\">preserves_limit.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">v</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">pair.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">G</span>\n</code></pre></div>\n<p>I see the <code>0 0</code> there, but how would I know I need to put it in <code>preserves_limits_of_size</code>?</p>",
        "id": 290415022,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1658428193
    },
    {
        "content": "<p>You mean you get the error when you omit <code>.{0 0}</code>? If you omit it, you'll see <code>pres : preserves_limits_of_size.{?l_1 ?l_2 v v u u} G</code> in the infoview, and from the error message, you know you want to fill in <code>?l_1 = 0</code> and <code>?l_2 = 0</code>, so you just add <code>.{0 0}</code> to <code>preserves_limits_of_size</code>.</p>",
        "id": 290416074,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658428682
    },
    {
        "content": "<p>I see, it seems I didn't check the assumption. Thanks!</p>",
        "id": 290416421,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1658428829
    }
]