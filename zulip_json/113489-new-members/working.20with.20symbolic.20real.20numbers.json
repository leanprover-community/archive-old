[
    {
        "content": "<p>How do I solve the following goal : </p>\n<div class=\"codehilite\"><pre><span></span>ε : ℝ,\nH : ε &gt; 0,\nn : ℕ,\nH_1 : nat_ceil (1 / ε) &lt; n\n⊢ abs (↑n)⁻¹ &lt; ε\n</pre></div>\n\n\n<p>What sort of tactics would be useful here?</p>",
        "id": 177596422,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1570526340
    },
    {
        "content": "<p>This is a nice question. The result is trivial mathematically, but I suspect it's still a bit of work in Lean. We have tactics which help with this sort of thing. My first instinct is to turn H_1 into an inequality about reals (there should be a tactic which does this now but I'm not up to speed with how it's done nowadays, I just remember sweating 2 years ago). Then there will be theorems in the library saying 1/e&lt;=(nat_ceil (1/e) : real) and 0&lt;x&lt;y -&gt; 1/y&lt;1/x which I would be tempted to apply manually. Then you should be reduced to abs (\\u n)\\-1 = 1/n which should hopefully be less of a pain. I would love it if someone could use tactics to make this less painful.</p>",
        "id": 177597156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570527106
    },
    {
        "content": "<p><code>exact_mod_cast</code> is a very useful tactic to write a term explicitly, but not worry about the casts in the expression. Here is how I would do it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lt_of_lt_nat_ceil</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">floor_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat_ceil</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">le_nat_ceil</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_1</span> <span class=\"o\">:</span> <span class=\"n\">nat_ceil</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_inv</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonneg</span><span class=\"o\">,</span> <span class=\"n\">inv_lt</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">one_div_eq_inv</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">lt_of_lt_nat_ceil</span> <span class=\"n\">H_1</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">H_1</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">zero_le</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 177612762,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570540951
    },
    {
        "content": "<p>Mixing inverse and one div looks strange. After <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/ordered_field.lean#L81\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/ordered_field.lean#L81\">https://github.com/leanprover-community/mathlib/blob/master/src/algebra/ordered_field.lean#L81</a>, shouldn't we have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">one_div_lt</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one_div_eq_inv</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">one_div_eq_inv</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">inv_lt</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n</pre></div>",
        "id": 177616641,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570542943
    },
    {
        "content": "<p>Do you intend to PR that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lt_of_lt_nat_ceil</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">floor_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat_ceil</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">le_nat_ceil</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 177616786,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570543016
    },
    {
        "content": "<p>(slightly golfed from your post)</p>",
        "id": 177616826,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570543035
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/1522\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1522\">https://github.com/leanprover-community/mathlib/pull/1522</a></p>",
        "id": 177648781,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570562021
    }
]