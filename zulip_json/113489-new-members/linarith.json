[
    {
        "content": "<p>Am I expecting too much from linarith? I am surprised this fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">change</span> <span class=\"n\">w.to_list.length</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">hlen0</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">w.to_list.length</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">hlen1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hlen</span> <span class=\"o\">:</span> <span class=\"n\">w.to_list.length</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 272614571,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645389263
    },
    {
        "content": "<p>Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 272614613,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645389323
    },
    {
        "content": "<p>Ah, judging from the docs, <code>linarith</code> isn’t actually for <code>nat</code></p>",
        "id": 272614684,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645389402
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#omega\">tactic#omega</a> for this (but it's not allowed in mathlib anymore).</p>",
        "id": 272617548,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645392356
    },
    {
        "content": "<p><code>linarith</code> doesn't know much about nat, but I feel like it should be able to do this one. Maybe it works if you add <code>n &gt;= 0</code>?</p>",
        "id": 272643211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645421425
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>\n<p>It looks like the issue is that the transformation of <code>a ≠ b</code>to <code>a &lt; b</code> or <code>a &gt; b</code> happens after the nat preprocessor. cc: <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span></p>",
        "id": 272643358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645421584
    },
    {
        "content": "<p>No, the <code>split_ne</code> preprocessor isn't enabled by default (<code>linarith</code> isn't an SMT solver, etc etc)</p>",
        "id": 272701403,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1645456768
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">{</span><span class=\"n\">split_ne</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 272701412,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1645456771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> note that if you use this for your original goal, it's doing exactly the dumb thing you'd hope it wouldn't: it's running <code>linarith</code> four times, once for every combination of cases. This is why <code>split_ne</code> is disabled by default. Exponential blowup in the number of disequalities in the context.</p>",
        "id": 272703870,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1645458000
    },
    {
        "content": "<p>Thanks! Luckily, it seems I don’t even need this reasoning. Classical case of a pen-and-paper-proof making too strong assumptions, and I only need to handle 0 and positive separately.</p>",
        "id": 272704005,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645458057
    }
]