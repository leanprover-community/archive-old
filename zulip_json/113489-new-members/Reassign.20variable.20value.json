[
    {
        "content": "<p>I'm proving a theorem which uses subgoal as <code> have p : k ∣ int.gcd a b ↔ k ∣ int.gcd b (a - n*b) </code>, but I didn't impose any constraint on k, k is just a variable of type <code>ℤ</code>, is there a way to reassign k value, or to reassign k value, I have to prove <code>have p : ∀ k : ℤ, k ∣ int.gcd a b ↔ k ∣ int.gcd b (a - n*b)</code></p>",
        "id": 180017387,
        "sender_full_name": "rory",
        "timestamp": 1573034796
    },
    {
        "content": "<p>Can you give a bit more context?</p>",
        "id": 180017639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573035070
    },
    {
        "content": "<p>I'm not sure I understand what the problem is</p>",
        "id": 180017654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573035087
    },
    {
        "content": "<blockquote>\n<p>I'm not sure I understand what the problem is</p>\n</blockquote>\n<p>So this is the theorem I'm proving,</p>\n<div class=\"codehilite\"><pre><span></span>theorem prop4 (a b : ℤ) (h : a ≠ 0 ∧ b ≠ 0) (k : ℤ):\n∀ n : ℤ, int.gcd a b = int.gcd b (a - n*b) :=\n....stuff...\n  have p₅ : k ∣ int.gcd a b ↔ k ∣ int.gcd b (a - n*b),\n  ...stuff...\n  have p₆ : int.gcd a b ∣ int.gcd b (a - n*b),\n</pre></div>",
        "id": 180017784,
        "sender_full_name": "rory",
        "timestamp": 1573035226
    },
    {
        "content": "<p>I want to prove p6 using p5</p>",
        "id": 180017850,
        "sender_full_name": "rory",
        "timestamp": 1573035265
    },
    {
        "content": "<p>Aha... yes, you can't change <code>k</code>. So you have to restate <code>p₅</code> as <code>\\forall k : ℤ, ...</code></p>",
        "id": 180017915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573035342
    },
    {
        "content": "<p>And so you should remove <code>k</code> from the hypotheses of <code>prop4</code></p>",
        "id": 180017967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573035368
    },
    {
        "content": "<p>So there's no way for subgoals to share a <code>\\forall k </code> generally</p>",
        "id": 180018113,
        "sender_full_name": "rory",
        "timestamp": 1573035529
    },
    {
        "content": "<p>No... what you are asking for is an implicit universal quantifier. But how would Lean know if you want this or not</p>",
        "id": 180018252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573035655
    },
    {
        "content": "<p>For all it knows, you might want to use the specific that you assumed something about somewhere else</p>",
        "id": 180018284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573035683
    },
    {
        "content": "<p>Okay, that makes sense</p>",
        "id": 180018309,
        "sender_full_name": "rory",
        "timestamp": 1573035715
    },
    {
        "content": "<p>This might be an indication that you should write a separate lemma and use a <code>variable</code> declaration.</p>",
        "id": 180038183,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1573051238
    }
]