[
    {
        "content": "<p>Hey, I'm trying to define an <code>has_mem</code> instance for subgroupoids, as below, but it seems lean doesn't want to find the instance I defined?<br>\nWhat am I doing wrong? Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.groupoid</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">subgroupoid</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">groupoid</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">arrws</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">inv'</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">‚àà</span> <span class=\"n\">arrws</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n            <span class=\"n\">inv</span> <span class=\"n\">p</span> <span class=\"bp\">‚àà</span> <span class=\"n\">arrws</span> <span class=\"n\">d</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mul'</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">‚àà</span> <span class=\"n\">arrws</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">‚àà</span> <span class=\"n\">arrws</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">),</span>\n            <span class=\"n\">p</span> <span class=\"bp\">‚â´</span> <span class=\"n\">q</span> <span class=\"bp\">‚àà</span> <span class=\"n\">arrws</span> <span class=\"n\">c</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">groupoid</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Why can't I use this?</span>\n<span class=\"kd\">instance</span> <span class=\"n\">mem_subgroupoid</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subgroupoid</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span> <span class=\"bp\">Œª</span> <span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S.arrws</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subgroupoid</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">ùüô</span> <span class=\"n\">c</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üî</span> <span class=\"mi\">ùüô</span> <span class=\"n\">c</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 302233575,
        "sender_full_name": "R√©mi Bottinelli",
        "timestamp": 1664880394
    },
    {
        "content": "<p>If you look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_mem\">docs#has_mem</a>, you will see that the first argument is an <code>out_param</code>, which means that for each <code> Œ≤</code> there should be a single <code>Œ±</code>  for which there's a <code>has_mem Œ± Œ≤</code> instance.</p>",
        "id": 302233778,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1664880496
    },
    {
        "content": "<p>More precisely, for an <code>has_mem Œ± Œ≤</code> instance to be found by Lean, <code>Œ±</code> must be inferrable from <code>Œ≤</code>. This is the case for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_mem\">docs#set.has_mem</a> for example, since <code>Œ±</code> appears in <code>set Œ±</code>.</p>",
        "id": 302233886,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1664880555
    },
    {
        "content": "<p>Ah, this makes sense. I didn't really understand the <code>out_param</code> thing beyond it being a lean technicality. Is there any hope to get this membership working in my case?</p>",
        "id": 302234069,
        "sender_full_name": "R√©mi Bottinelli",
        "timestamp": 1664880643
    },
    {
        "content": "<p>Not really, no.</p>",
        "id": 302234219,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1664880723
    },
    {
        "content": "<p>OK, well using a custom notation seems to work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mem_subgroupoid</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subgroupoid</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S.arrws</span> <span class=\"n\">c</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">‚àà‚Çê</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">mem_subgroupoid</span>\n</code></pre></div>\n<p>Thanks for the explanation!</p>",
        "id": 302234813,
        "sender_full_name": "R√©mi Bottinelli",
        "timestamp": 1664880952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">R√©mi Bottinelli</span> has marked this topic as resolved.</p>",
        "id": 302234850,
        "sender_full_name": "Notification Bot",
        "timestamp": 1664880963
    }
]