[
    {
        "content": "<p>Here is the theorem I have to prove:<br>\ntheorem le_trans (a b c : mynat) (hab : a ≤ b) (hbc : b ≤ c) : a ≤ c :=</p>\n<p>Here is what I wrote so far:<br>\nrw le_iff_exists_add,</p>\n<p>This gives me this output:<br>\na b c : mynat,<br>\nhab : a ≤ b,<br>\nhbc : b ≤ c<br>\n⊢ ∃ (c_1 : mynat), c = a + c_1</p>\n<p>I know that hab implies there exists c2 such that b = a +c2 and that hbc implies there exists c3 such that c = b + c3. That means I should use a statement like:<br>\nuse c2+c3.</p>\n<p>But how do I \"summon\" these c2 and c3? I do not know how to implement this lean. Please help.</p>",
        "id": 190564120,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584140432
    },
    {
        "content": "<p><code>cases hab with u hu,</code></p>",
        "id": 190564150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140460
    },
    {
        "content": "<p>will extract the u from hab</p>",
        "id": 190564163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140471
    },
    {
        "content": "<p>and the proof that it does the right thing is <code>hu</code></p>",
        "id": 190564172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140480
    },
    {
        "content": "<p>Maybe you have to do <code>rw le_iff_exists_add at hab</code> first, but probably it doesn't matter</p>",
        "id": 190564204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140513
    },
    {
        "content": "<p>And after that I use something like cases hbc with v hv?</p>",
        "id": 190564206,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584140514
    },
    {
        "content": "<p>right</p>",
        "id": 190564215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140519
    },
    {
        "content": "<p>and then you've got what you need</p>",
        "id": 190564256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140528
    },
    {
        "content": "<p>Thanks</p>",
        "id": 190564262,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584140542
    },
    {
        "content": "<p>np</p>",
        "id": 190564267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140549
    },
    {
        "content": "<p>Another question. This what I did so far:</p>\n<p>rw le_iff_exists_add at hab,<br>\nrw le_iff_exists_add at hbc,</p>\n<p>cases hab with u hu,<br>\ncases hbc with v hv,<br>\nrw le_iff_exists_add,<br>\nuse u+v,</p>\n<p>Here is my output:<br>\na b c u : mynat,<br>\nhu : b = a + u,<br>\nv : mynat,<br>\nhv : c = b + v<br>\n⊢ c = a + (u + v)</p>\n<p>Now I want to use add_assoc to get c = (a+u)+v but I am getting an error. Why? and how to I fix it?</p>",
        "id": 190565011,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584141200
    },
    {
        "content": "<p>rw <code>add_assoc</code> doesn't work? How about <code>rw \\l add_assoc</code>? I always forget which way it goes :-)</p>",
        "id": 190565315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584141466
    },
    {
        "content": "<p>Still did not work. Here is the error message:</p>\n<p>rewrite tactic failed, did not find instance of the pattern in the target expression<br>\n  ?m_1 + ?m_2 + ?m_3<br>\nstate:<br>\na b c u : mynat,<br>\nhu : b = a + u,<br>\nv : mynat,<br>\nhv : c = b + v<br>\n⊢ c = a + (u + v)</p>",
        "id": 190565449,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584141577
    },
    {
        "content": "<p>Yes, that error looks good</p>",
        "id": 190565517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584141608
    },
    {
        "content": "<p>that error says \"I can't see <code>(X + Y) + Z</code> in the goal\"</p>",
        "id": 190565538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584141626
    },
    {
        "content": "<p>what tactic caused that error?</p>",
        "id": 190565552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584141637
    },
    {
        "content": "<p>rw add_assoc</p>",
        "id": 190565566,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584141656
    },
    {
        "content": "<p>Doesn't equality work in both directions?</p>",
        "id": 190565585,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584141677
    },
    {
        "content": "<p>so if <code>h</code> is a proof that <code>A = B</code> then <code>rw h</code> looks for <code>A</code>'s and changes them to <code>B</code>'s</p>",
        "id": 190565595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584141690
    },
    {
        "content": "<p>So what do I do here?</p>",
        "id": 190565605,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584141706
    },
    {
        "content": "<p>and you have B's which you want to change to A's so you need <code>rw \\l add_assoc</code></p>",
        "id": 190565609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584141710
    },
    {
        "content": "<p><code>rw ← add_assoc</code></p>",
        "id": 190565656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584141730
    },
    {
        "content": "<p>Is your background in maths or CS?</p>",
        "id": 190565682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584141759
    },
    {
        "content": "<p>Math</p>",
        "id": 190565710,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584141793
    },
    {
        "content": "<p>well here's some news for you -- mathematicians can't tell the difference between <code>A = B</code> and <code>B = A</code>, but apparently computer scientists can!</p>",
        "id": 190565734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584141824
    },
    {
        "content": "<p>All of those lemmas like <code>zero_add</code> were always of the form (complicated thing) = (simpler thing)</p>",
        "id": 190565777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584141843
    },
    {
        "content": "<p>and it turns out that's not a fluke, that's by design</p>",
        "id": 190565793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584141854
    },
    {
        "content": "<p>and <code>rw</code> turns LHS into RHS</p>",
        "id": 190565803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584141871
    },
    {
        "content": "<p>so it really matters which is which. In the earlier levels of the game, the job is to make stuff simpler, so you just keep <code>rw</code>ing and you're going the right way. When it gets trickier you have to be more aware of what's actually going on</p>",
        "id": 190565835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584141917
    },
    {
        "content": "<p>So now the error is gone, but I cannot seem to use rw hu to replace a+u with b? why is that?</p>",
        "id": 190565913,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584141975
    },
    {
        "content": "<p>exactly the same reason?</p>",
        "id": 190565934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584142000
    },
    {
        "content": "<p>Wait do I use rw ← hu,?</p>",
        "id": 190565964,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584142040
    },
    {
        "content": "<p>give it a try :-)</p>",
        "id": 190565968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584142048
    },
    {
        "content": "<p>Oh I see it works</p>",
        "id": 190565969,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584142050
    },
    {
        "content": "<p>rw turns LHS into RHS. Mathematicians just say \"now use hu\" but Lean is more fussy than that.</p>",
        "id": 190566034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584142101
    },
    {
        "content": "<p>It works:<br>\nrw le_iff_exists_add at hab,<br>\nrw le_iff_exists_add at hbc,</p>\n<p>cases hab with u hu,<br>\ncases hbc with v hv,<br>\nrw le_iff_exists_add,<br>\nuse u+v,<br>\nrw ← add_assoc,<br>\nrw ← hu,<br>\nrw ← hv,<br>\nrefl,</p>",
        "id": 190566046,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584142109
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 190566056,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584142121
    },
    {
        "content": "<p>I've just heard that I'm not going to work on Monday so I'm in a pretty good mood :-)</p>",
        "id": 190566072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584142143
    },
    {
        "content": "<p>indeed I'm not going to work for quite some time :-)</p>",
        "id": 190566084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584142164
    },
    {
        "content": "<p>I don't know what I'm talking about really, I love my job</p>",
        "id": 190566109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584142198
    },
    {
        "content": "<p>So now I am onto the next level where I am trying to prove anti-symmetry. Here is the theorem and the things I wrote so far:<br>\ntheorem le_antisymm (a b : mynat) (hab : a ≤ b) (hba : b ≤ a) : a = b :=</p>\n<p>rw le_iff_exists_add at hab,<br>\nrw le_iff_exists_add at hba,</p>\n<p>cases hab with u hu,<br>\ncases hba with v hv,</p>\n<p>rw hv,</p>\n<p>Here is the output:<br>\na b u : mynat,<br>\nhu : b = a + u,<br>\nv : mynat,<br>\nhv : a = b + v<br>\n⊢ b + v = b.</p>\n<p>The hint says to use this theorem: eq_zero_of_add_right_eq_self (a b : mynat) : a + b = a → b = 0.</p>\n<p>But when I use rw eq_zero_of_add_right_eq_self , I get an error again. Why?</p>",
        "id": 190566641,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584142621
    },
    {
        "content": "<p>because you can't rewrite with this one, this is an implication</p>",
        "id": 190566671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584142660
    },
    {
        "content": "<p><code>rw h</code> works when <code>h</code> is a proof of <code>A = B</code>. Then it changes all <code>A</code>'s to <code>B</code>'s. I suspect you want to do something else here.</p>",
        "id": 190566708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584142682
    },
    {
        "content": "<p>So.....?</p>",
        "id": 190566736,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584142690
    },
    {
        "content": "<p>what should I do</p>",
        "id": 190566747,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584142706
    },
    {
        "content": "<p>this is quite a tricky level and I don't really want to give away its secrets yet :-)</p>",
        "id": 190566755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584142714
    },
    {
        "content": "<p>you can <code>rw h1 at h2</code> if you like: if <code>h1 : A = B</code> then <code>rw h1 at h2</code> will change all the <code>A</code>'s in <code>h2 to </code>B`'s</p>",
        "id": 190566785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584142755
    },
    {
        "content": "<p>Slightly off topic: I am also getting an error when I do import data.nat.prime . Why is that?</p>",
        "id": 190567942,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584143677
    },
    {
        "content": "<p>If you're playing in the web version of the game then you can't import anything</p>",
        "id": 190568060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584143800
    },
    {
        "content": "<p>Imports can only go at the beginning of a file and you don't have access to the beginning of the file. All you can do is use tactics. If you install lean and the mathlib tools and VS code onto your own computer then you will have much more flexibility to do imports</p>",
        "id": 190568139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584143886
    },
    {
        "content": "<p>Im not on the web version now. I am using Visual Studio Code. Trying to see if I can code off the web.</p>",
        "id": 190568208,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584143922
    },
    {
        "content": "<p>Note however that the natural number game makes its own naturals, called mynat, and data.nat.prime is lots of primey facts about lean's actual natural numbers</p>",
        "id": 190568236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584143946
    },
    {
        "content": "<p>I trying to put this in Lean:</p>\n<p>import data.nat.prime</p>\n<p>open nat</p>\n<p>example (n : ℕ) (hn : n &gt; 1) (hp : ∀ p : ℕ, prime p ∧ p ∣ n → p &gt; sqrt n) : prime n :=<br>\nbegin<br>\n  sorry<br>\nend</p>\n<p>I am the same person from Prime Theorem Help. Just working bit by bit to prove this over Spring break.</p>",
        "id": 190568360,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584144046
    },
    {
        "content": "<p>I feel like I did not download something.</p>",
        "id": 190568396,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584144091
    },
    {
        "content": "<p>What error are you seeing, exactly?</p>",
        "id": 190568469,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584144144
    },
    {
        "content": "<p>file 'data\\nat\\prime' not found in LEAN_PATH</p>",
        "id": 190568509,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584144196
    },
    {
        "content": "<p>How are you creating the file in VS Code? Did you follow the instructions <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">here</a>?</p>",
        "id": 190568524,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584144233
    },
    {
        "content": "<p>I followed an youtube video and downloaded MATLIB and all.</p>",
        "id": 190568674,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584144319
    },
    {
        "content": "<p>Note is that Lean files can't be opened / created on their own. They live in \"projects\" and you have to open the project directory in VS Code to get the imports to work properly. Try the instructions I linked above and see if you have any more luck.</p>",
        "id": 190568796,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584144435
    },
    {
        "content": "<p>If you followed a youtube video, it most likely doesn't have info about the latest version of the \"mathlib tools\". From your error message, I'm guessing you're using Windows, so you may need to go over <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/windows.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/windows.md\">these instructions</a> first to get <code>leanproject</code>.</p>",
        "id": 190568899,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584144527
    },
    {
        "content": "<p>Quick question: I am trying to mimic the proofs in Inequality world but this time for greater than in VS code. So in the Natural Number Game we have the theorem statement:<br>\n le_iff_exists_add (a b : mynat)<br>\n    a ≤ b ↔ ∃ (c : mynat), b = a + c</p>\n<p>Now in VS I am trying to implement a similar thing. This is what I wrote:</p>\n<p>theorem ge_iff_exists_add (a b : N) a &gt;= b ↔ ∃ (c : N), a= b + c := sorry</p>\n<p>This is the error I am getting: invalid binder declaration... Why is that and how to I get rid of this?</p>",
        "id": 190569512,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584145186
    },
    {
        "content": "<p>Basically, my goal for this evening is to prove that if b&gt;=a and c&gt;=a then bc&gt;=a^2, very similar to some of the proofs in the Inequality World section of the Natural Number Game.</p>",
        "id": 190569613,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584145260
    },
    {
        "content": "<p><del>Lean doesn't know what <code>&gt;=</code> is and that's screwing up the parsing. Try the unicode symbol <code>≥</code> instead (type it using <code>\\ge</code>).</del></p>\n<p>Edit: this was totally wrong, Lean does, in fact, know that <code>&gt;=</code> is <code>ge</code>. Whoops!</p>",
        "id": 190569743,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584145389
    },
    {
        "content": "<p>My bad, that's what I meant by &gt;= (I used \\ge in the VS code). Sorry about that</p>",
        "id": 190569757,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584145431
    },
    {
        "content": "<p>you're missing the <code>:</code></p>",
        "id": 190569855,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584145510
    },
    {
        "content": "<p>As Reid says, you're missing a colon:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">ge_iff_exists_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>(Note that you can get syntax highlighting in Zulip by putting your code between <code> ```lean </code> and <code> ``` </code> (click the \"A\" icon to the bottom left of the edit box to see formatting tips).)</p>",
        "id": 190569877,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584145540
    },
    {
        "content": "<p>Thank you so much,</p>",
        "id": 190569958,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584145610
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">example1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hba</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">\\</span><span class=\"n\">ge</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hca</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">\\</span><span class=\"n\">ge</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"err\">\\</span><span class=\"n\">ge</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"n\">ge_iff_exists_add</span> <span class=\"n\">hba</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I get an error again. This is what I am trying to mimic, which I solved an hour ago in the Natural number game thanks to Kevin Buzzard:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">le_iff_exists_add</span> <span class=\"n\">at</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">le_iff_exists_add</span> <span class=\"n\">at</span> <span class=\"n\">hbc</span><span class=\"o\">,</span>\n\n<span class=\"n\">cases</span> <span class=\"n\">hab</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hbc</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">le_iff_exists_add</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I do not know why my thing in VS is not working</p>",
        "id": 190570243,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584145967
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">le_iff_exists_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span>\n    <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n</pre></div>\n\n\n<p>From the natural number game</p>",
        "id": 190570258,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584146011
    },
    {
        "content": "<p>Did you mean to write <code>rw ge_iff_exists_add at hba,</code>?</p>",
        "id": 190570415,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584146129
    },
    {
        "content": "<p>Opps, thanks again</p>",
        "id": 190570463,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584146167
    },
    {
        "content": "<p>As Kevin has said, pay careful attention to the error messages:</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  ge_iff_exists_add hba\nterm\n  hba\nhas type\n  b ≥ a : Prop\nbut is expected to have type\n  ℕ : Type\n</pre></div>\n\n\n<p>This is Lean saying \"I can't apply <code>ge_iff_exists_add</code> to <code>hba</code> because I expect a natural number but I'm getting a proof of <code>b ≥ a</code> instead.\" </p>\n<p>At this point you should realize: \"hey wait, I didn't want to apply <code>ge_iff_exists_add</code> to <code>hba</code> at all! Oh, there's my typo...\"</p>",
        "id": 190570615,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584146375
    },
    {
        "content": "<p>Here is where I am at now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">example1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hba</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hca</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ge_iff_exists_add</span> <span class=\"n\">at</span> <span class=\"n\">hba</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ge_iff_exists_add</span> <span class=\"n\">at</span> <span class=\"n\">hca</span><span class=\"o\">,</span>\n\n    <span class=\"n\">cases</span> <span class=\"n\">hba</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hca</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n\n    <span class=\"n\">rw</span> <span class=\"n\">ge_iff_exists_add</span><span class=\"o\">,</span>\n\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>At this stage I believe I can use variables a,b,c,u,v just as in my Inequality world proof. But if I type in</p>\n<div class=\"codehilite\"><pre><span></span>use a*a+a*v+a*u+u*v,\n</pre></div>\n\n\n<p>but Lean is saying that u and v are undefined. Did I not define them when I used cases, both in my VS code and in my Inequality World proofs?</p>",
        "id": 190571279,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584147249
    },
    {
        "content": "<p>Do <code>u</code> and <code>v</code> show up in the tactic state? Something must be wrong</p>",
        "id": 190571441,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584147463
    },
    {
        "content": "<p>This is my tatic state without the use statement:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">v</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c_1</span>\n</pre></div>",
        "id": 190571505,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584147520
    },
    {
        "content": "<p>When I type in use (let's say use 1) Lean gives this error: unknown identifier 'use'</p>",
        "id": 190571838,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584147928
    },
    {
        "content": "<p>You need to write <code>import tactic</code> at the top of your file since <code>use</code> is provided by mathlib.</p>",
        "id": 190572255,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584148472
    },
    {
        "content": "<p>But file 'tatic' is not found in the LEAN_PATH</p>",
        "id": 190572340,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584148581
    },
    {
        "content": "<p>Then please see the instructions I linked above to set up your Lean project.</p>",
        "id": 190572347,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584148602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/Inequality.20World/near/190568899\" title=\"#narrow/stream/113489-new-members/topic/Inequality.20World/near/190568899\">said</a>:</p>\n<blockquote>\n<p>If you followed a youtube video, it most likely doesn't have info about the latest version of the \"mathlib tools\". From your error message, I'm guessing you're using Windows, so you may need to go over <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/windows.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/windows.md\">these instructions</a> first to get <code>leanproject</code>.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Any chance you could add a message about <code>leanproject</code> to your tutorial videos?</p>",
        "id": 190581027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584162516
    },
    {
        "content": "<p>I followed the instructions on the link but still <code>import tactic</code> did not work.</p>",
        "id": 190611642,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584215765
    },
    {
        "content": "<p>What OS are you on? Can you send a screenshot of VS Code in the exact state where the failure is occurring?</p>",
        "id": 190611875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584216141
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/puF_mRdte61D1PZfNi3kFDQW/image.png\" target=\"_blank\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/puF_mRdte61D1PZfNi3kFDQW/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/3121/puF_mRdte61D1PZfNi3kFDQW/image.png\"></a></div>",
        "id": 190611901,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584216199
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/rVspxCoS4wmzRj9urEgfFvmL/image.png\" target=\"_blank\" title=\"image.png\">image.png</a> <br>\nI am using Windows</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/rVspxCoS4wmzRj9urEgfFvmL/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/3121/rVspxCoS4wmzRj9urEgfFvmL/image.png\"></a></div>",
        "id": 190611911,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584216229
    },
    {
        "content": "<p>OK so your problem is that you have not made a Lean project as in the instructions. You can't just open a Lean file and hope it all works.</p>",
        "id": 190611955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584216246
    },
    {
        "content": "<p>You need to clone the example project and then <code>File -&gt; Open Folder</code> and open the folder in VS Code.</p>",
        "id": 190611962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584216269
    },
    {
        "content": "<p>and you need to compile the project first</p>",
        "id": 190611964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584216287
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md</a></p>",
        "id": 190611986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584216337
    },
    {
        "content": "<p>You need to use the <code>leanproject</code> tool to make and compile a  Lean project.</p>",
        "id": 190612035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584216382
    },
    {
        "content": "<p>What do mean by 'clone'?</p>",
        "id": 190612036,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584216387
    },
    {
        "content": "<p>Like copy and save it?</p>",
        "id": 190612042,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584216405
    },
    {
        "content": "<p>You simply need to follow the instructions.</p>",
        "id": 190612048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584216418
    },
    {
        "content": "<p>It's complicated I know, but so far I suspect that you have installed the tools but have not made a project. At the bottom of the <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/windows.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/windows.md\">installation instructions</a> it tells you now to go onto the instructions about creating and working on Lean projects.</p>",
        "id": 190612116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584216517
    },
    {
        "content": "<p>So I typed <code>source ~/.profile</code> onto a terminal but I got this error:<br>\n<a href=\"/user_uploads/3121/A95emd5enJIsr6lBCblch1Eg/image.png\" target=\"_blank\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/A95emd5enJIsr6lBCblch1Eg/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/3121/A95emd5enJIsr6lBCblch1Eg/image.png\"></a></div>",
        "id": 190612400,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584216897
    },
    {
        "content": "<p>I cannot help with Windows issues.</p>",
        "id": 190612425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584216949
    },
    {
        "content": "<p>If you type <code>leanproject</code> what happens?</p>",
        "id": 190612468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584216973
    },
    {
        "content": "<p>Try using git bash instead of the Windows command prompt.</p>",
        "id": 190612475,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584216982
    },
    {
        "content": "<p>THis:<br>\n<a href=\"/user_uploads/3121/MtxIySvcbMLSBhNYiD60KQnW/image.png\" target=\"_blank\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/MtxIySvcbMLSBhNYiD60KQnW/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/3121/MtxIySvcbMLSBhNYiD60KQnW/image.png\"></a></div>",
        "id": 190612479,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584217001
    },
    {
        "content": "<p>Ok i will try</p>",
        "id": 190612491,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584217009
    },
    {
        "content": "<p>Well it looks like you have <code>leanproject</code> installed which is great, but I would definitely follow Bryan's advice.</p>",
        "id": 190612527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584217044
    },
    {
        "content": "<p>Yeah, if <code>leanproject</code> is working, then you should be in pretty good shape (once you switch to using git bash).</p>",
        "id": 190612617,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584217087
    },
    {
        "content": "<p>What does this part mean:<br>\n<code>In the file explorer on the left-hand side of VS Code, you can right-click on src, choose New file, and type a filename to create a file there.</code></p>",
        "id": 190613071,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584217864
    },
    {
        "content": "<p>Where is<code>src</code>?</p>",
        "id": 190613080,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584217883
    },
    {
        "content": "<p>Nevermind I found it.</p>",
        "id": 190613136,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584217930
    },
    {
        "content": "<p>It works!!!!<br>\n<a href=\"/user_uploads/3121/wB52y4pn-DHD4pWwv-BEKU3U/image.png\" target=\"_blank\" title=\"image.png\">image.png</a> <br>\nThank you very much</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/wB52y4pn-DHD4pWwv-BEKU3U/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/3121/wB52y4pn-DHD4pWwv-BEKU3U/image.png\"></a></div>",
        "id": 190613233,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584218120
    },
    {
        "content": "<p>Sorry it's such a struggle. Lean is an experiment rather than finished code. We have tried really hard to write installation instructions but we do appreciate that it is still very complicated for people who are just used to the more standard \"click here and it works\" approach of the 21st century.</p>",
        "id": 190613304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584218266
    },
    {
        "content": "<p>Old people like me can remember when installing all software was like this :-)</p>",
        "id": 190613348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584218286
    },
    {
        "content": "<p>(actually it was worse, you often had to compile it yourself!)</p>",
        "id": 190613353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584218302
    },
    {
        "content": "<p>Here is the code I have in VS:<br>\n<code>theorem ge_iff_exists_add (a b: ℕ): a ≥ b ↔ ∃ (c: ℕ), a = b + c := sorry</code></p>\n<div class=\"codehilite\"><pre><span></span>theorem ge_refl(x : ℕ) : x ≥ x :=\nbegin\n    rw ge_iff_exists_add,\n    use 0,\n    rw add_zero,\nend\n</pre></div>\n\n\n<p>Here is what I want to prove:</p>\n<div class=\"codehilite\"><pre><span></span>theorem example2 (a b c : ℕ) (hba: c ≥ 1): a*b*c ≥ a*b :=\nbegin\n    rw mul_comm,\n    --Still Empty\nend\n</pre></div>\n\n\n<p>After <code>rw mul_comm,</code> the lean tactic output is:</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\na b c : ℕ\n⊢ c * (a * b) ≥ a * b\n</pre></div>\n\n\n<p>However, if I substitute <code>--Still Empty</code> with <code>rw ge_refl,</code> I get the error: </p>\n<div class=\"codehilite\"><pre><span></span>rewrite tactic failed, lemma is not an equality nor a iff\nstate:\na b c : ℕ\n⊢ c * (a * b) ≥ a * b\n</pre></div>\n\n\n<p>Since I have proven ab &gt;= ab I want the goal to be c &gt;=1. How do I achieve this?</p>",
        "id": 190618514,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584226720
    },
    {
        "content": "<p><code>rw h</code> only makes sense if <code>h</code> is a proof of <code>A = B</code> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A\\iff B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>. Then what it does is it takes all occurrences of <code>A</code> and changes them to <code>B</code>. <code>ge_refl</code> is not a proof of something of the form <code>A  = B</code> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A\\iff B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> so <code>rw ge_refl</code> won't work.</p>",
        "id": 190636297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584259917
    },
    {
        "content": "<p>Oh I now see that you posted the exact same question in another thread where it was answered. Can you post questions precisely once?</p>",
        "id": 190636407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584260092
    }
]