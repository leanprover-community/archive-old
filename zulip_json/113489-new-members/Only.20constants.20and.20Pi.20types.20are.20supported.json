[
    {
        "content": "<p>If I change the following instance in mathlib</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">continuous_map_semimodule</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_add_group</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"n\">of_core</span> <span class=\"err\">$</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span>     <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"err\">•</span><span class=\"o\">),</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">smul_add</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">add_smul</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">mul_smul</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">one_smul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">continuous_map_semimodule</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_continuous_add</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"n\">of_core</span> <span class=\"err\">$</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span>     <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"err\">•</span><span class=\"o\">),</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">smul_add</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">add_smul</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">mul_smul</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">one_smul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>(which I was planning to do before the PR but I forgot) I get</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">only constants and Pi types are supported: ?m_1</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">α : Type ?,</span>\n<span class=\"cm\">_inst_1 : topological_space α,</span>\n<span class=\"cm\">R : Type ?,</span>\n<span class=\"cm\">_inst_2 : semiring R,</span>\n<span class=\"cm\">_inst_3 : topological_space R,</span>\n<span class=\"cm\">M : Type ?,</span>\n<span class=\"cm\">_inst_4 : topological_space M,</span>\n<span class=\"cm\">_inst_5 : add_comm_monoid M,</span>\n<span class=\"cm\">_inst_6 : has_continuous_add M,</span>\n<span class=\"cm\">_inst_7 : semimodule R M,</span>\n<span class=\"cm\">_inst_8 : topological_semimodule R M,</span>\n<span class=\"cm\">c : ?m_1,</span>\n<span class=\"cm\">f g : ?m_2</span>\n<span class=\"cm\">⊢ c • (f + g) = c • f + c • g</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>What is going wrong?</p>",
        "id": 205507616,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596130320
    },
    {
        "content": "<p><code>semimodule.of_core</code> requires an <code>add_comm_group M</code>, but you have an <code>add_comm_monoid</code>. It means you should not use <code>semimodule.of_core</code> here, but give a direct proof for all the fields.</p>",
        "id": 205508439,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596130743
    },
    {
        "content": "<p>Oh again weird error message</p>",
        "id": 205509577,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596131306
    },
    {
        "content": "<p>Moreover when I did PR that I copied the proof of the subtype. Weird that it was not already in greatest generality</p>",
        "id": 205509619,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596131342
    },
    {
        "content": "<p>Yes, we are improving things slowly by pushing things to the right generality when someone notices that things are not as general as they could be, just like you just did!</p>",
        "id": 205509832,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596131452
    },
    {
        "content": "<p>And yes, the error messages are often pretty bad!</p>",
        "id": 205509864,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596131473
    }
]