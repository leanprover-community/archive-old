[
    {
        "content": "<p>I want to represent de brujin indices as in slides 24-25 of <a href=\"https://www.slideshare.net/ekmett/bound-making-de-bruijn-succ-less\" target=\"_blank\" title=\"https://www.slideshare.net/ekmett/bound-making-de-bruijn-succ-less\">https://www.slideshare.net/ekmett/bound-making-de-bruijn-succ-less</a><br>\nand <a href=\"https://www.researchgate.net/profile/Ross_Paterson4/publication/2612840_De_Bruijn_notation_as_a_nested_datatype/links/5703a08008aeade57a25a487/De-Bruijn-notation-as-a-nested-datatype.pdf\" target=\"_blank\" title=\"https://www.researchgate.net/profile/Ross_Paterson4/publication/2612840_De_Bruijn_notation_as_a_nested_datatype/links/5703a08008aeade57a25a487/De-Bruijn-notation-as-a-nested-datatype.pdf\">https://www.researchgate.net/profile/Ross_Paterson4/publication/2612840_De_Bruijn_notation_as_a_nested_datatype/links/5703a08008aeade57a25a487/De-Bruijn-notation-as-a-nested-datatype.pdf</a><br>\nThat is, I want to go from</p>\n<div class=\"codehilite\"><pre><span></span>inductive {u} Incr (v : Type u) : Type u\n| zero : Incr\n| succ : v -&gt; Incr\n\ninductive {u} Term : Type u -&gt; Type (u + 1)\n| var {v} : v -&gt; Term v\n| app {v} : Term v -&gt; Term v -&gt; Term v\n| lam {v} : Term (Incr v) -&gt; Term v\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span>inductive {v} Exp : Type v -&gt; Type (v + 1)\n| var {a} : a -&gt; Exp a\n| app {a} : Exp a -&gt; Exp a -&gt; Exp a\n| lam {a} : Exp (Incr (Exp a)) -&gt; Exp a\n</pre></div>\n\n\n<p>The second one doesn't compile. Is there a way to reduce the universe in the recursive <code>Exp</code>?</p>",
        "id": 186503479,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579880834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258922\">@Anton Lorenzen</span> I'm far from an expert, but do you not want to simply use <code>nat</code> in place of <code>Incr</code>?</p>",
        "id": 186505319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579881966
    },
    {
        "content": "<p>If you are formalising a type theory, than I would expect that you don't need any universes at all.</p>",
        "id": 186505461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579882077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I am not an expert either, but I think the idea is that you can succ a lambda expression for better performance/type safety</p>",
        "id": 186505514,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579882092
    },
    {
        "content": "<p>So no</p>",
        "id": 186505527,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579882099
    },
    {
        "content": "<p>I am formalising a type theory and don't need universes for that but I think I need levels for this technique to work?</p>",
        "id": 186505808,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579882264
    },
    {
        "content": "<p>In Haskell (with <code>TermE</code> as <code>Exp</code>)</p>\n<div class=\"codehilite\"><pre><span></span>data Incr v = Zero | Succ v\ndata Term v = Var v | App (Term v, Term v) | Lam (Term (Incr v))\ndata TermE a = VarE a\n| AppE (Pair (TermE a))\n| LamE (TermE (Incr (TermE a)))\n</pre></div>",
        "id": 186506027,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579882414
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> I am not an expert either, but I think the idea is that you can succ a lambda expression for better performance/type safety</p>\n</blockquote>\n<p>I don't know what \"succ a lambda expression\" means. If you just mean de Bruijn indices, than I would expect to see <code>nat</code>.</p>",
        "id": 186506040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579882427
    },
    {
        "content": "<p>What is the <code>v</code> in <code>Incr v</code> in <code>Haskell</code>?</p>",
        "id": 186506049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579882440
    },
    {
        "content": "<p>Is it an arbitrary type?</p>",
        "id": 186506098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579882447
    },
    {
        "content": "<p>Your current <code>Incr</code> looks very much like <code>option</code> to me (that is, Haskell's <code>Maybe</code>)</p>",
        "id": 186506150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579882491
    },
    {
        "content": "<p>The idea behind this technique is to avoid expressions like <code>Lam (Var 2)</code> (with an illegal index) by changing the type of variables in each recursive lambda constructor. So initially the variables have type <code>v</code> (for example <code>String</code>), inside one lambda they are <code>Z | S String</code>, inside two lambdas they are <code>Z | S (Z | S string)</code> and so on. (the paper explains that better than me). The problem is that this requires polymorphic recursion and I think I need to tell Lean in some way that this recursion is well-founded..</p>",
        "id": 186506898,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579882989
    },
    {
        "content": "<p>Aha, I think I understand. So why not reuse <code>option</code>?</p>",
        "id": 186507253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579883231
    },
    {
        "content": "<p>Or, rather, my explanation is for the first formalization, which is slow on instantiation because of all the succ's. So the second formalization avoids this by adding <code>Incr</code> to the terms so that we can \"succ an expression\" as in saying \"all of the indices in here should be succ'ed\".</p>",
        "id": 186507366,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579883312
    },
    {
        "content": "<p>I guess I could reuse option, but I don't see how this would make the second one compile?</p>",
        "id": 186507409,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579883354
    },
    {
        "content": "<p>As someone who has used this <code>Term</code> before, I'm totally bewildered by <code>Exp</code>. But anyways I don't think Lean supports this form.</p>",
        "id": 186507747,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579883556
    },
    {
        "content": "<p>Coq doesn't accept it either, with a different kind of error message (<code>Non strictly positive occurrence of \"Exp\"</code>). I think you would probably get a positivity error in Lean as well, if you didn't get the universe error.</p>",
        "id": 186508240,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579883898
    },
    {
        "content": "<p>Agda accepts it even though the documentation seems to indicate it shouldn't <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 186509194,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579884374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Yes, you are right. I think I could rewrite it as a fixpoint though</p>\n<div class=\"codehilite\"><pre><span></span>data TermEF a t = VarE a\n| AppE (Pair (TermE a t))\n| LamE (TermE (Incr (t a)))\ndata TermE a = Fix (TermEF a)\n</pre></div>\n\n\n<p>The question is therefore if I can do \"recursion on universes\" and have Exp be in the universe of the number of lamdas it contains. And also, if that is actually a good idea (I guess not).</p>",
        "id": 186509628,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579884641
    },
    {
        "content": "<p>But your <code>TermEF</code> depends on <code>TermE</code>, so you have not eliminated the recursion</p>",
        "id": 186509677,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579884689
    },
    {
        "content": "<p>Did you want to replace that one by <code>t</code> also?</p>",
        "id": 186509718,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579884717
    },
    {
        "content": "<p>No, it doesn't, I am just being sloppy. I meant:</p>\n<div class=\"codehilite\"><pre><span></span>data TermEF a t = VarE a\n| AppE (Pair (TermEF a t))\n| LamE (TermEF (Incr (t a)) t)\ntype TermE a = Fix (TermEF a)\n</pre></div>",
        "id": 186509875,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579884819
    },
    {
        "content": "<p>So, in Lean</p>\n<div class=\"codehilite\"><pre><span></span>inductive {v} Lift : Type v -&gt; Type (v + 1)\n| lift {a} : a -&gt; Lift a\n\ninductive {v} Exp (t : Type v -&gt; Type (v + 1)) : Type (v + 1) -&gt; Type (v + 2)\n| var {a} : a -&gt; Exp a\n| app {a} : Exp a -&gt; Exp a -&gt; Exp a\n| lam {a} : Exp (Incr (t a)) -&gt; Exp (Lift a)\n</pre></div>",
        "id": 186510263,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579885003
    },
    {
        "content": "<p>No, I don't think I mean that. I guess I am going to use the <code>Term</code> part from above</p>",
        "id": 186510983,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579885396
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 186511018,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579885415
    },
    {
        "content": "<blockquote>\n<p>The question is therefore if I can do \"recursion on universes\" and have Exp be in the universe of the number of lamdas it contains. And also, if that is actually a good idea (I guess not).</p>\n</blockquote>\n<p>You definitely can't do any kind of quantification over universes other than prenex (i.e., at the outermost position). For example you can't prove a lemma by induction where you invoke the inductive hypothesis at a different universe, because that would compile to passing a term quantified over universes to the recursor.</p>",
        "id": 186511212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579885536
    },
    {
        "content": "<p>The universe level checks can be overly conservative, which might make techniques like this less useful. For example</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Incr&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">Incr&#39;</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">Incr&#39;</span> <span class=\"n\">v</span>\n</pre></div>\n\n\n<p>is isomorphic to <code>Incr</code>, but it has to have result <code>Type (u + 1)</code> not <code>Type u</code>.</p>",
        "id": 186511703,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579885782
    },
    {
        "content": "<p>Having <code>Term</code> live in <code>Type (u + 1)</code> will likely be a pain if you want to do any kind of monadic programming.</p>",
        "id": 186511774,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579885812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258922\">@Anton Lorenzen</span>  Your rendering of <code>Exp</code> doesn't make much sense to me either. The recursive option type for encoding indices is not a problem, but I would expect the <code>lam</code> argument to have a different type, like so:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">Exp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"o\">(</span><span class=\"n\">Incr</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 186517076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579888855
    },
    {
        "content": "<p>You can eliminate the universe bumping in this definition by taking advantage of the fact that there are only a \"small\" (nat indexed) number of options you can tack on a type</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Incr&#39;</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">punit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"bp\">×</span> <span class=\"n\">Incr&#39;</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Exp&#39;</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Incr&#39;</span> <span class=\"n\">v</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp&#39;</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Exp&#39;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp&#39;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp&#39;</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Exp&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp&#39;</span> <span class=\"n\">a</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Exp</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Exp&#39;</span> <span class=\"n\">v</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 186517443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579889115
    },
    {
        "content": "<p>This technique looks like a more complicated version of the usual encoding of scope-safe terms:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">Term</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p><code>Term n</code> is a term in any context of length at least <code>n</code> (and variables are indexes into such a context).</p>",
        "id": 186518147,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1579889566
    },
    {
        "content": "<p>Hey Jannis, nice to see you here :)</p>",
        "id": 186518406,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579889710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> It is; I just wrote it that way because Anton seemed to want variables indexed on arbitrary types</p>",
        "id": 186518452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579889742
    },
    {
        "content": "<p>There isn't any real advantage to the version I posted first over the version you just wrote, and some significant disadvantages. Using types for indexing like this makes sense in haskell but in a dependent type theory there isn't much downside to just using <code>nat</code></p>",
        "id": 186518658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579889868
    },
    {
        "content": "<p>Nice to see you too, Anton. Type theory remains a small field. ;)</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I thought so too, but wasn't sure that I hadn't missed some subtlety.</p>",
        "id": 186518922,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1579890016
    }
]