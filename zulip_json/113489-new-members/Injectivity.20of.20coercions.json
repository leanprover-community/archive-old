[
    {
        "content": "<p>Through using library_search, I managed to complete the proof. Nonetheless, I'm still confused about how ↑ actually works. (Actually probably too confused to ask the right questions)</p>\n<div class=\"codehilite\"><pre><span></span>theorem t : ∀ s t : S, ∀ n : nat, ↑s = n ∧ n = ↑t → s = t :=\nbegin\n    intros s t n h, have h2 : ↑ s = ↑ t, rw [h.1, h.2], exact subtype.eq h2,\nend\n\ntheorem t&#39; : ∀ s t : S, ∀ n : nat, ↑s = n ∧ n = ↑t → s = t :=\nbegin\n    intros s t n h, apply subtype.eq, sorry\nend\n</pre></div>\n\n\n<p>The issue with the second proof is that ↑t doesn't seem equivalent to t.val, which is used in subtype.eq. So how does the first proof work?</p>\n<p>Further, how should this proof be written?</p>",
        "id": 182938530,
        "sender_full_name": "Li Yao'an",
        "timestamp": 1575884784
    },
    {
        "content": "<p><code>↑t</code> is indeed defeq to <code>t.val</code></p>",
        "id": 182939925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575885762
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">t&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"err\">↑</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 182939936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575885770
    },
    {
        "content": "<p>Now the <code>rw</code>s are gone it's a nice exercise to write this proof in term mode.</p>",
        "id": 182942062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575887180
    },
    {
        "content": "<blockquote>\n<p>The issue with the second proof is that <code>↑t</code> doesn't seem equivalent to <code>t.val</code>, which is used in <code>subtype.eq</code>. So how does the first proof work?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"243442\">@Li Yao'an</span> They are not <em>syntactically</em> equal, but the are <em>definitionally</em> equal.</p>",
        "id": 182942261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575887318
    }
]