[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_same_nat</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat.zero</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat.zero</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat.succ</span> <span class=\"n\">n2</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat.succ</span> <span class=\"n\">n1</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat.zero</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat.succ</span> <span class=\"n\">n2</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"c1\">--is_same_nat n1 n2</span>\n</code></pre></div>\n<p>gives error <code>declaration 'is_same_nat' uses sorry</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_same_nat2</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n1</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat.zero</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n2</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat.zero</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat.succ</span> <span class=\"n\">n22</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat.succ</span> <span class=\"n\">n11</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n2</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat.zero</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat.succ</span> <span class=\"n\">n22</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But this seems fine.</p>",
        "id": 246409880,
        "sender_full_name": "Jiekai",
        "timestamp": 1626660037
    },
    {
        "content": "<p>You should match on both things at the same time</p>",
        "id": 246409896,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626660077
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_same_nat</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat.zero</span>      <span class=\"n\">nat.zero</span>    <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_same_nat</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 246409956,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626660150
    },
    {
        "content": "<p>But that is just the inductive type <code>eq</code>, but specialized to <code>nat</code>.</p>",
        "id": 246409969,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626660219
    }
]