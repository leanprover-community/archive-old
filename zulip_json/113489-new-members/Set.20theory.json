[
    {
        "content": "<p>Where can I search for lemmas that Lean already knows about set theory?</p>\n<p>To be more precise, I need to know the following fact about set.sUnion : <br>\nthat the union of a family of sets contains every set of the family. I was expecting to have something like set.sUnion.intro, working similarly to or.intro, but I do not know where to search for this.<br>\n(I guess I should not call this a Lemma, it should holds by definition of set.sUnion).</p>",
        "id": 182768431,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1575644581
    },
    {
        "content": "<p>There are lots of ways.</p>",
        "id": 182768718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575644763
    },
    {
        "content": "<p>1) Ask here. (Encouraged, for beginners. Don't feel bad about it.)</p>",
        "id": 182768757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575644783
    },
    {
        "content": "<p>2) Use search in VScode. And <code>Ctrl</code>-<code>Shift</code>-<code>P</code>, start typing with <code>#your_guess_of_the_name</code></p>",
        "id": 182768799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575644816
    },
    {
        "content": "<p>3) Use ordinary system tools, like <code>git grep</code>.</p>",
        "id": 182768823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575644831
    },
    {
        "content": "<p>4) Type your statement into Lean, and ask <code>library_search</code> or <code>suggest</code> to see if they can prove it. (These are two tactics.)</p>",
        "id": 182768846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575644856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251825\">@Frédéric Le Roux</span> For your specific lemma, I guess <code>set.subset_sU</code> and autocomplete shows me the rest.</p>",
        "id": 182768981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575644942
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span>  <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"n\">sUnion</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 182769377,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575645161
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 182770278,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1575645652
    }
]