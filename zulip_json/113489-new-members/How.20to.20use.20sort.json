[
    {
        "content": "<p>Dear all, I am trying to make some simple definitions but I don't know how to get lean to view the complex numbers as a sort rather then a type. I am trying to use \\Sigma' to define a series and this is giving me an error: </p>\n<p>has type<br>\n  ℕ → ℂ : Type<br>\nbut is expected to have type<br>\n  ℕ → Sort ? : Type ? </p>\n<p>I am also not aware of what a sort is! Any help or reccomendations for reading on this would be great. </p>\n<p>Thanks in advance.</p>",
        "id": 281859934,
        "sender_full_name": "Matthew Honnor",
        "timestamp": 1652204300
    },
    {
        "content": "<p>Can you post the code which created this error? See <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for a guide on how to ask effective questions here. PS the issue is probably not what you think it is: the error seems to indicate that Lean was expecting a type universe rather than the complex numbers. Oh -- also <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 281860026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652204350
    },
    {
        "content": "<p>PS hi Matthew!</p>",
        "id": 281860302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652204470
    },
    {
        "content": "<p>Thanks for letting me know about mwe and backticks, here is the code that created this error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">analytic_sum_term</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">*</span><span class=\"o\">(</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">analytic_sum</span> <span class=\"o\">(</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">Σ'</span> <span class=\"o\">(</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">),</span> <span class=\"o\">(</span> <span class=\"n\">analytic_sum_term</span> <span class=\"n\">a</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Thanks again</p>",
        "id": 281870032,
        "sender_full_name": "Matthew Honnor",
        "timestamp": 1652209064
    },
    {
        "content": "<p>I think you're using the wrong Σ'</p>",
        "id": 281870847,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1652209367
    },
    {
        "content": "<p>You need <code>∑</code> (type with <code>\\sum</code>)</p>",
        "id": 281870862,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1652209378
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">analytic_sum</span> <span class=\"o\">(</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">analytic_sum_term</span> <span class=\"n\">a</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>works</p>",
        "id": 281870993,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1652209439
    },
    {
        "content": "<p>Thanks, that works now. How does the noncomputable def work?</p>",
        "id": 281871971,
        "sender_full_name": "Matthew Honnor",
        "timestamp": 1652209882
    }
]