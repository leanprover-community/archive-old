[
    {
        "content": "<p>I'm interested in learning about the basic building blocks of proofs in Lean. To this end I've read section 2 of Mario's masters thesis, but I don't have a CS background and didn't understand everything. From what I did understand the tactics, <code>intro</code>, <code>apply</code>, <code>induction</code>, and <code>rw</code>, relate to typing judgements, the basic building blocks of proofs.</p>\n<p>Is there a list of tactics for which it's theoretically possible to prove any statement in Lean using only tactics on the list? Or is there a tactic for each typing judgement? And if so, what's the list? Or where can I learn more?</p>\n<p>Thanks.</p>",
        "id": 189082400,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582686134
    },
    {
        "content": "<p><code>exact</code> does everything by itself</p>",
        "id": 189083657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582688320
    },
    {
        "content": "<p>or <code>refine</code></p>",
        "id": 189083662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582688330
    },
    {
        "content": "<p>You can probably get away with <code>intro</code> and <code>apply</code>, since that covers application and lambda</p>",
        "id": 189083675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582688383
    },
    {
        "content": "<p><code>change</code> is important for triggering definitional conversion</p>",
        "id": 189083718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582688411
    },
    {
        "content": "<p>but <code>induction</code> and <code>rw</code> are just fancy ways to apply functions</p>",
        "id": 189083723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582688431
    },
    {
        "content": "<p>I guess it's theoretically possible to prove any statement in lean without using any tactics at all, because you can just use term mode. I think Agda might look like this?</p>",
        "id": 189091945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582702880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189083718\" title=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189083718\">said</a>:</p>\n<blockquote>\n<p>You can probably get away with <code>intro</code> and <code>apply</code>, since that covers application and lambda</p>\n<p><code>change</code> is important for triggering definitional conversion</p>\n</blockquote>\n<p>I see, thanks.</p>\n<p>If <code>solve_by_elim</code> was extended so that it could also do <code>intro</code> and <code>change</code>, would it then be a proof search? I.e. if <code>max_reps := n</code>would it always find a proof of length less than or equal to <code>n</code> if one exists?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189091945\" title=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189091945\">said</a>:</p>\n<blockquote>\n<p>I guess it's theoretically possible to prove any statement in lean without using any tactics at all, because you can just use term mode. I think Agda might look like this?</p>\n</blockquote>\n<p>I guess this is why <code>exact</code> does everything. But that's no fun. :)</p>",
        "id": 189178089,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582765516
    },
    {
        "content": "<p>No. Remember <code>solve_by_elim</code> only applies local hypotheses.</p>",
        "id": 189178281,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582765727
    },
    {
        "content": "<p>Also, <code>change</code> requires an explicit user provided argument, so I don't know what you're hoping it would do for you automatically.</p>",
        "id": 189178367,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582765815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189178281\" title=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189178281\">said</a>:</p>\n<blockquote>\n<p>No. Remember <code>solve_by_elim</code> only applies local hypotheses.</p>\n</blockquote>\n<p>Right, but I thought if something can be proved then it can be proved only using local hypotheses, you just take the proof of lemma or theorem you'd normally use and insert in into the correct spot in your proof. Is that wrong? </p>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189178367\" title=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189178367\">said</a>:</p>\n<blockquote>\n<p>Also, <code>change</code> requires an explicit user provided argument, so I don't know what you're hoping it would do for you automatically.</p>\n</blockquote>\n<p>I have no experience with <code>change</code>, and it's not in <code>tactics.md</code>. I'm going to spend a bit of time seeing what I can find out.</p>",
        "id": 189180117,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582768116
    },
    {
        "content": "<p>Change = show</p>",
        "id": 189191827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582787619
    },
    {
        "content": "<p>If one is interested in minimalism, one can easily avoid the \"change\" (or \"show\") tactic. Say the goal is <code>⊢ half_empty</code> and I wish it were <code>⊢ half_full</code>. I can write</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"k\">begin</span> <span class=\"bp\">...</span> <span class=\"kn\">end</span> <span class=\"o\">:</span> <span class=\"n\">half_full</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>If you allow yourself <code>have</code>, you can write</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"k\">have</span> <span class=\"n\">hhf</span> <span class=\"o\">:</span> <span class=\"n\">half_full</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hhf</span>\n</pre></div>",
        "id": 189196387,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1582793987
    },
    {
        "content": "<p>I'm interested in learning about the fundamental building blocks of proofs in Lean. In order to do this do I need to learn some CS stuff to the point I completely understand section 2 of Mario's thesis, or is it possible to understand what the basic building blocks are from existing tactics? I.e. are there tactics that emulate the various typing judgements, such as <code>intro</code> for example? Or am I way off base about how Lean works?</p>",
        "id": 189271847,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582849001
    },
    {
        "content": "<p>I think a good place to start is by understanding term proofs, and how tactics are just mechanisms for building particular terms (which you can see with <code>#print</code>)</p>",
        "id": 189273625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582850794
    },
    {
        "content": "<p>In a tactic proof, each goal corresponds to an <code>_</code> (a hole to be filled) in the corresponding term proof, and each tactic replaces that hole with a term, usually containing more holes inside it. For example, <code>intro x</code> will replace the hole with <code>\\lam x, _</code>.</p>",
        "id": 189273729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582850901
    },
    {
        "content": "<p>and <code>apply f</code> replaces the hole with <code>f _ _ _</code> (depending on how many arguments <code>f</code> has)</p>",
        "id": 189273778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582850954
    },
    {
        "content": "<p>It also might help to look at the definition of the <code>expr</code> type in lean, which shows all the kind of things that can appear in a term</p>",
        "id": 189273873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582851026
    },
    {
        "content": "<p>Ok, I think I'm pretty comfortable with the idea of metavariables, but I'm might go through theorem proving in Lean again to pick up some of the things I missed the first time as well as understand what specifically different tactics are doing to the terms.</p>\n<p>I'm not so comfortable with <code>expr</code>s, however, but I'll put some time into learning.</p>\n<p>I'd still like to understand how a proof search tactic might work. Maybe I'll ask again after I've learned these things.</p>\n<p>Thanks.</p>",
        "id": 189274813,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582852052
    },
    {
        "content": "<p>A quick overview:</p>\n<ul>\n<li><code>intro x</code> replaces the goal with <code>\\lam x, _</code></li>\n<li><code>apply f</code> replaces the goal with <code>f _ _ _</code></li>\n<li><code>refine e1 (e2 _) (e3 _)</code> replaces the goal with <code>e1 (e2 _) (e3 _)</code> (which should make it clear why I say sometimes that <code>refine</code> is the \"universal\" tactic, capable of playing the role of all others)</li>\n<li><code>exact e</code> replaces the goal with <code>e</code></li>\n<li><code>change foo</code> replaces the goal with <code>(_ : foo)</code></li>\n<li><code>rw foo</code> replaces the goal with <code>eq.rec_on foo _</code></li>\n<li><code>induction foo</code> replaces the goal with <code>T.rec_on foo _ _</code> where <code>T</code> is the type of <code>foo</code></li>\n<li><code>cases foo</code>  replaces the goal with <code>T.cases_on foo _ _</code> where <code>T</code> is the type of <code>foo</code></li>\n<li><code>split</code> replaces the goal with <code>and.intro _ _</code></li>\n<li><code>have x := t</code> replaces the goal with <code>(\\lam x, _) t</code></li>\n<li><code>let x := t</code> replaces the goal with <code>let x := t in _</code></li>\n<li><code>revert x</code> replaces the goal with <code>_ x</code></li>\n</ul>",
        "id": 189275113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582852380
    },
    {
        "content": "<p><code>simp</code>, <code>norm_num</code>, <code>ring</code>, <code>omega</code>, <code>library_search</code>, <code>tidy</code>, <code>rcases</code>, <code>rintro</code> do more complicated or iterative things to the goal, but fundamentally they all have the same form as the above tactics: they look at the current type of the target hole and use that to determine some term, possibly with more holes in it, to fill the target</p>",
        "id": 189275577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582852933
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 189275675,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582853049
    },
    {
        "content": "<p>Can <code>induction</code> be used instead of <code>rw</code>? For example, given <code>h : a = b</code>, can we always use <code>induction h</code> instead of <code>rw h</code>? Or are there some cases where funny things happen with <code>expr</code>s?</p>",
        "id": 189275768,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582853170
    },
    {
        "content": "<p>Yep!</p>",
        "id": 189275771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582853177
    },
    {
        "content": "<p>However it usually won't be able to calculate the \"motive\", a hidden extra argument to <code>eq.rec_on</code>, correctly if you use <code>induction h</code></p>",
        "id": 189275798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582853240
    },
    {
        "content": "<p>However if one side of the equality is a variable, <code>induction h</code>, <code>cases h</code>, and <code>subst h</code> all act more or less the same way</p>",
        "id": 189275811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582853278
    },
    {
        "content": "<p>Also, are there situations where <code>cases</code> works, but induction doesn't? This might be covered in theorem proving in Lean.</p>",
        "id": 189275859,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582853295
    },
    {
        "content": "<p>Yes. The reason is that unlike <code>induction</code>, <code>cases</code> is able to make use of the equality between the input and the values in the cases to eliminate some of the constructors. (If you were to do this in <code>induction</code>, the inductive hypothesis would end up being useless in most cases)</p>",
        "id": 189275903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582853372
    },
    {
        "content": "<p>Internally, <code>cases</code> actually first reverts the input variable and adds an equality</p>",
        "id": 189275940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582853403
    },
    {
        "content": "<p>Oh, so <code>eq.rec_on</code> is different somehow to other <code>rec_on</code>'s for inductive types?</p>",
        "id": 189275966,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582853413
    },
    {
        "content": "<p>No, it is just that <code>rw</code> uses an algorithm which is different from the generic one that is more useful for equalities</p>",
        "id": 189275983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582853456
    },
    {
        "content": "<p>Right, because <code>induction</code> rewrites everything it can everywhere.</p>",
        "id": 189276066,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582853536
    },
    {
        "content": "<p>You can always specify the motive yourself, but it's a pain. <code>eq.rec_on</code> says that from <code>a = b</code> and <code>C a</code> derive <code>C b</code>, so if you are faced with a goal that has <code>b</code>'s in it you want to reverse engineer what <code>C</code> should be so that <code>C b</code> evaluates to the goal and <code>C a</code> evaluates to something more useful</p>",
        "id": 189276075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582853551
    },
    {
        "content": "<p>Ok, so <code>rewrite</code> is a convenience thing, built for humans.</p>",
        "id": 189276240,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582853765
    },
    {
        "content": "<p>yep, most tactics are like that</p>",
        "id": 189276248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582853781
    },
    {
        "content": "<p>Yeah, what about <code>Ext</code>? can that be broken down into simpler tactics?</p>",
        "id": 189276267,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582853810
    },
    {
        "content": "<p>you <em>could</em> write the term if you wanted to, but you don't want to</p>",
        "id": 189276268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582853810
    },
    {
        "content": "<p><code>ext</code> is just <code>try {apply f}</code> for every <code>f</code> that has been marked <code>@[ext]</code></p>",
        "id": 189276282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582853845
    },
    {
        "content": "<p>in practice, these lemmas tend to be about extensionality</p>",
        "id": 189276290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582853868
    },
    {
        "content": "<p>Yeah, makes sense.</p>",
        "id": 189276297,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582853877
    },
    {
        "content": "<p>I have a bit to think about now. Thanks.</p>",
        "id": 189276432,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582854075
    },
    {
        "content": "<p>Is <code>unfold</code> just another version of <code>change</code>? I looked at the code and <code>unfold</code> uses the simplifier, which is complex and confusing.</p>",
        "id": 189277748,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582855612
    },
    {
        "content": "<p>Does <code>simp</code> use <code>change</code>?</p>",
        "id": 189277755,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582855627
    },
    {
        "content": "<p><code>dsimp</code> and <code>dunfold</code> act like <code>change</code>, which is to say, they don't add anything to the term but rather just assert a new type for the term and let the kernel figure it out. (Actually that's a lie. In order to keep up performance in the kernel, the goal is actually replaced with <code>@id foo _</code> instead so that the kernel also gets the same definitional reduction hint as the elaborator. If you have <code>@id foo (@id bar x)</code>, lean's kernel is forced to prove that <code>foo</code> and <code>bar</code> are definitionally equal so that the term is well typed.)</p>",
        "id": 189278478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582856794
    },
    {
        "content": "<p><code>simp</code> and <code>unfold</code> actually insert equality theorems. It's kind of like <code>rw</code> but instead of using a single <code>eq.rec</code> term with a complicated motive, it is a <code>cast</code> applied to a bunch of congruence lemmas with types like <code>x = y -&gt; z = w -&gt; x + z = y + w</code>.</p>",
        "id": 189278546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582856892
    },
    {
        "content": "<p>This approach allows you to do extra things in the course of those lemmas, like for example ignoring equalities of arguments that are known to be in subsingleton types, as well as generally using equality proofs that are not definitional</p>",
        "id": 189278571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582856973
    },
    {
        "content": "<p>I see, Thanks. I had a look at <code>dunfold</code> but it's just a meta constant, so I guess it's more fundamental than <code>unfold</code>. <code>tactic.change</code> is a meta constant as well. </p>\n<p>I've been rereading chapter 2 of theorem proving in Lean, and decided to have a go at reducing the proof term for <code>succ_add</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">brec_on</span> <span class=\"n\">m</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n          <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">m</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n               <span class=\"n\">id_rhs</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n               <span class=\"n\">id_rhs</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n            <span class=\"bp\">_</span><span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">_</span><span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>It gives me <code>λ (n m : ℕ), ⁇</code> and red sqiggle under <code>nat.brec_on</code> with the error message \"invalid 'nat.brec_on' application, elaborator has special support for this kind of application (it is handled as an \"eliminator\"), but the expected type must be known.\"</p>\n<p>Does it want know the type of <code>succ_add</code>? And is there some way to reduce a proof term to the type it's proving?</p>",
        "id": 189365151,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582935728
    },
    {
        "content": "<p>The term displayed by Lean might not contain enough information to reconstruct the original term, as implicit arguments (here the motive for <code>nat.brec_on</code>) may not be inferable, or at least not by the algorithm Lean uses. Here maybe it would help to add a type ascription <code>(... : succ n + m = succ (n + m))</code> or whatever the correct type is to the body of the lambda.</p>",
        "id": 189367615,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582938477
    },
    {
        "content": "<p>But in this case, you might as well just write <code>#reduce nat.succ_add</code>.</p>",
        "id": 189367685,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582938539
    },
    {
        "content": "<p>(I'm assuming you did something like <code>#print succ_add</code>, and then copy and pasted the result into <code>#reduce</code>.)</p>",
        "id": 189367702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582938578
    },
    {
        "content": "<p>I couldn't get the type ascription to work.</p>\n<p>I had a go at turn implicit arguments off and reducing the larger proof term, but now I get a \"type mismatch at application\" under <code>@nat.rec</code>.</p>\n<p>But the red squiggle under <code>@nat.brec_on</code> is gone.</p>",
        "id": 189368260,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582939324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189367702\" title=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189367702\">said</a>:</p>\n<blockquote>\n<p>(I'm assuming you did something like <code>#print succ_add</code>, and then copy and pasted the result into <code>#reduce</code>.)</p>\n</blockquote>\n<p>Yes, exactly. :)</p>",
        "id": 189368270,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1582939344
    },
    {
        "content": "<p>Using <code>pp.all</code> would increase the chances of this working, but it would be better not to do this at all and just use <code>#reduce succ_add</code> directly</p>",
        "id": 189371151,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582943415
    },
    {
        "content": "<p>I never understand why these terms have <code>brec_on</code> and <code>below</code> in. When we prove this in the natural number game we just use an easy induction on m so I would just expect a much simpler term with <code>rec</code></p>",
        "id": 189381787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582964169
    },
    {
        "content": "<p>Is this the fault of the equation compiler or something?</p>",
        "id": 189381792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582964195
    },
    {
        "content": "<p>It is a rather unfortunate limitation of the current equation compiler that it cannot handle structural recursion, that is, creating definitions using <code>rec_on</code> directly. It always compiles everything using \"bounded recursion\", which is needed to handle more complex structural recursions like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>(Actually, the bounded recursion technique is not necessary here because you don't need to tuple up the entire history of the function, only the last two values. To take full advantage of the bounded recursion technique you would need to have references out some arbitrary amount, like <code>f n</code> depending on <code>f(n/2)</code>, but in fact this is exactly the case where the equation compiler can't use this method and falls back on well founded recursion.)</p>\n<p>While the use of structural recursion in place of bounded recursion is a \"mere optimization\", allowing functions like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>to be compiled to the obvious <code>nat.rec_on</code> term instead of the current monstrosity, in some cases it is actually the only available method because bounded recursion method is blocked, and in those cases you will get an error if you try to use the equation compiler even though it should be able to compile in principle.</p>",
        "id": 189382745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582966458
    },
    {
        "content": "<p>Here's an example of a structural recursive definition that is rejected because the equation compiler can't handle it. (The error message you get is because the failure of bounded recursion falls over to well founded recursion, which fails at some obscure step.)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">no_foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">no_foo</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"c1\">-- failed to prove recursive application is decreasing</span>\n<span class=\"c1\">-- |- 0 &lt; 0</span>\n</pre></div>",
        "id": 189382869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582966777
    },
    {
        "content": "<p>Here's the obvious structural recursion proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">no_foo&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 189382926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582966844
    },
    {
        "content": "<p>Would it be feasible to add an option to the equation compiler to disable this <code>brec</code> stuff? While it managed to cause fewer problems than it seems like it ought to, it's also virtually never the case that I actually want it</p>",
        "id": 189392143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582986297
    },
    {
        "content": "<p>The problem is that the <code>rec</code> stuff is <em>not implemented</em></p>",
        "id": 189394282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582990380
    },
    {
        "content": "<p>so it's <code>brec</code> or nothing</p>",
        "id": 189394285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582990385
    },
    {
        "content": "<p>(well, well founded recursion, but that's much worse of an option)</p>",
        "id": 189394294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582990412
    },
    {
        "content": "<p>It's ironic because it's the most basic primitive so you would expect it to be supported, but no, the fancy <code>brec</code> is there but not the humble <code>rec</code></p>",
        "id": 189394341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582990469
    },
    {
        "content": "<p>Oh huh I never realized that. So even when I use complicated inductive types with extra indices, constructors of infinite arity etc it always translates into <code>brec</code>?</p>",
        "id": 189397016,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582995551
    },
    {
        "content": "<p>Yep. The <code>brec</code> method works as long as the inductive type is not a <code>Prop</code></p>",
        "id": 189397022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582995593
    },
    {
        "content": "<p>Is there some function in Lean that eats a proof term and gives the proposition proved by the input?</p>\n<p>For example, is there a function <code>F</code>, say, such that <code>F (λ hp : p, λ hq : q, hp)</code> gives <code>p → q → p</code>?</p>\n<p>And if not, is such a function possible?</p>",
        "id": 189458448,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1583115837
    },
    {
        "content": "<p><code>infer_type</code> is a tactic that will do that. But it doesn't make any sense for a lean function to do that, as it would be one of the inputs to the function. That is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">get_type</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n</pre></div>",
        "id": 189458544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583115985
    },
    {
        "content": "<p>Oh right, of course.</p>",
        "id": 189458600,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1583116109
    },
    {
        "content": "<p>I got it working, I'm very happy. :)</p>",
        "id": 189458866,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1583116596
    }
]