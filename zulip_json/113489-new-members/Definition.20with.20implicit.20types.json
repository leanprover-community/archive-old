[
    {
        "content": "<p>Can someone correct the syntax for this definition:</p>\n<p>def bind_option : {Π X : Type}, {Π Y : Type},<br>\n                option X → (X → option Y)<br>\n                      → option Y<br>\n| option.none f := @option.none Y<br>\n| (option.some x) f := f x</p>",
        "id": 129437343,
        "sender_full_name": "Ken Roe",
        "timestamp": 1531261077
    },
    {
        "content": "<p>What error do you get?</p>",
        "id": 129437504,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531261283
    },
    {
        "content": "<p>Also, can you enclose your code between three ticks: </p>\n<div class=\"codehilite\"><pre><span></span>```lean\n-- your code here\n```\n</pre></div>",
        "id": 129437545,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531261323
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">bind_option</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">option</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">Y</span>\n<span class=\"bp\">|</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"n\">Y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 129437565,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531261354
    },
    {
        "content": "<p>pattern matching is done on everything after the colon, which is why is moved the Types before the colon.</p>",
        "id": 129437580,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531261394
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">bind_option</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">option</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">Y</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 129437585,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531261412
    },
    {
        "content": "<p>Also Pi should be out of the brackets like this <code> Π {X Y : Type},</code></p>",
        "id": 129437635,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531261451
    },
    {
        "content": "<p>If you were to put the Types after the colon.</p>",
        "id": 129437641,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531261468
    },
    {
        "content": "<p>Incidentally this function exists in the library and it's called <code>option.bind</code> I think</p>",
        "id": 129437648,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531261494
    },
    {
        "content": "<p>Not quite--I get the following error on the \"f x\" term of the last line:</p>\n<p>function expected at<br>\n  f x<br>\nterm has type<br>\n  option Y</p>",
        "id": 129438139,
        "sender_full_name": "Ken Roe",
        "timestamp": 1531262212
    },
    {
        "content": "<p>perhaps you have something on the following line(s)?</p>",
        "id": 129438270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531262408
    },
    {
        "content": "<p>after the definition</p>",
        "id": 129438273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531262414
    },
    {
        "content": "<p>This was the problem.  The error goes away if I add a period.</p>",
        "id": 129438577,
        "sender_full_name": "Ken Roe",
        "timestamp": 1531262961
    },
    {
        "content": "<p>Usually we fix this by just having the next line start with some kind of command like <code>def</code>, <code>namespace</code>, or a comment. Presumably that line is giving you an error anyway otherwise</p>",
        "id": 129438647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531263068
    },
    {
        "content": "<p>what can there be after that thing? I think all my lines start with keywords</p>",
        "id": 129438654,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531263096
    },
    {
        "content": "<p>Btw, we're thinking of not allowing function applications to stretch over empty lines in Lean 4 to fix such issues. I do hope that would not break anyone's weird code...?</p>",
        "id": 129456152,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1531293637
    },
    {
        "content": "<p>I see newbie errors like this all the time (I'm currently teaching Lean to a bunch of people)</p>",
        "id": 129456661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294618
    },
    {
        "content": "<p>the function expects one or two more values so it just starts eating into the next command</p>",
        "id": 129456667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294641
    },
    {
        "content": "<p>resulting in errors which completely throw the user</p>",
        "id": 129456671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294664
    }
]