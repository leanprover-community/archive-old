[
    {
        "content": "<p>I sometimes find myself manually proving things like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and feel like there should be a tactic which make these types of calculations automatic. Is there?</p>",
        "id": 300303585,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1663918827
    },
    {
        "content": "<p>Well there used to be <code>omega</code> but you cant use that in mathlib proofs and more as it is unmaintained and not likely to be ported before mathlib4.<br>\n<span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> was working on a simpler tactic for exactly this at <a href=\"https://github.com/leanprover-community/mathlib/pull/16443\">#16443</a> but its not merged yet.<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#zify\">tactic#zify</a> is sometimes also useful for this sort of thing, especially when combined with <code>ring</code>/<code>linarith</code></p>",
        "id": 300304655,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663919320
    },
    {
        "content": "<p>E.g</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 300304879,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663919405
    },
    {
        "content": "<p>Apparently in this case tactics are smart enough to find <code>h</code>, but in general giving <code>zify</code> extra arguments helps</p>",
        "id": 300305041,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663919497
    },
    {
        "content": "<p>Cool, thanks <code>zify</code> looks exactly like something I was looking for! <br>\nNow I wonder if there is something similar for integer division, like \"qify\".  E.g. some tactic that could stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 300318792,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1663924098
    },
    {
        "content": "<p><code>qify</code> is <a href=\"https://github.com/leanprover-community/mathlib/pull/16313\">#16313</a>, which is awaiting review also I think!</p>",
        "id": 300319174,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663924208
    },
    {
        "content": "<p>perfect!</p>",
        "id": 300321193,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1663924794
    },
    {
        "content": "<p>One will also need a <code>/</code> analogue of Damiano's tactic I guess, because division on int and rat aren't compatible.</p>",
        "id": 300343352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663933468
    },
    {
        "content": "<p>I use <code>omega</code> very often!</p>",
        "id": 300343538,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663933545
    },
    {
        "content": "<p>I'm thinking that there are a few instances where similar case splits can be useful.  I could look into extending <code>remove_subs</code> to take care of nat-division and max/min.  It could be a generic \"split obvious cases\" tactic.</p>",
        "id": 300402344,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663949621
    },
    {
        "content": "<p>Would this be useful?</p>",
        "id": 300402369,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663949628
    },
    {
        "content": "<p>I think Damiano's tactic would just shorten the proof more right, <code>qify, cancel_denoms, norm_num</code> (if not just <code>qify, cancel_denoms</code> should work for Moritz' example)</p>",
        "id": 300444978,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663964619
    },
    {
        "content": "<p>I'm back at my computer and I just confirmed that on <a href=\"https://github.com/leanprover-community/mathlib/tree/adomani_remove_subs_at\">branch#adomani_remove_subs_at</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.remove_subs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">remove_subs</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 300497044,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664005737
    },
    {
        "content": "<p>Although I also just noticed that <code>by linarith</code> already works in this example.</p>\n<p>Note that the <code>!</code>-flag to <code>remove_subs</code> means \"try to discharge the side-goals using <code>linarith</code>\", so I would not consider this a good test for <code>remove_subs</code>.</p>",
        "id": 300499032,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664006930
    }
]