[
    {
        "content": "<p>I'm trying to gain a better understanding of category theory, so I wrote up a proof of Lawvere's fixed-point theorem as an exercise (specifically the category-theoretical version... the proof using functions and types is much simpler and I've done that already). My solution feels a bit inelegant though, and I'm wondering if it could be shorter. I suspect that someone who knows what they're doing could golf it down to a few lines. I'm curious to see what that ideal proof looks like.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.closed.cartesian</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.limits.prod</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">limits.has_finite_products</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">cartesian_closed</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">point_surjective</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">‚â´</span> <span class=\"bp\">Œ¶</span> <span class=\"bp\">=</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lawvere</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">^^</span> <span class=\"n\">A</span><span class=\"o\">)),</span> <span class=\"n\">point_surjective</span> <span class=\"bp\">Œ¶</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">End</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">Œ¶</span> <span class=\"n\">psurj_</span><span class=\"bp\">Œ¶</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">Œ¶</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">exp.ev</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">B</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span> <span class=\"bp\">^^</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">internalize_hom</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">psurj_</span><span class=\"bp\">Œ¶</span> <span class=\"n\">q</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">lift</span> <span class=\"n\">x</span> <span class=\"n\">q</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">exp.ev</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">B</span> <span class=\"k\">with</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">lift</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">cartesian_closed.uncurry</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">cartesian_closed.uncurry_eq</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span>\n    <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">internalize_hom</span><span class=\"o\">,</span> <span class=\"n\">cartesian_closed.uncurry_curry</span><span class=\"o\">,</span>\n    <span class=\"n\">lift_fst_assoc</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">comp_lift_assoc</span><span class=\"o\">,</span> <span class=\"n\">category.comp_id</span><span class=\"o\">,</span>\n    <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">hs</span>\n  <span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">‚ü©,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 304236272,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1665861545
    },
    {
        "content": "<p>Aside from some very minor golfing, this looks like a good proof to me!</p>",
        "id": 304237894,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665863014
    },
    {
        "content": "<p>What is golfing? I am picturing a scene on the putting green where you take many extra steps, tapping the ball here and there before sinking it. Is that the meaning?</p>",
        "id": 304238370,
        "sender_full_name": "Martin Harrison",
        "timestamp": 1665863358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Thanks!</p>",
        "id": 304238457,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1665863422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416965\">@Martin Harrison</span> It's from \"code golfing\", which is when people try to write a piece of code in the shortest possible way</p>",
        "id": 304238584,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1665863537
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/glossary.html#golfing\">glossary#golfing</a></p>",
        "id": 304238677,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1665863635
    },
    {
        "content": "<p>There may be a few smaller lemmas that would be useful and could shorten it.... I don't know if I'll have time to play around with this right now, but I'll try later.</p>",
        "id": 304238780,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665863704
    },
    {
        "content": "<p>Sounds good! No pressure, of course... I just wanted to make sure I wasn't missing something wildly obvious. Glad to hear it's on the right track.</p>",
        "id": 304238874,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1665863780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416965\">@Martin Harrison</span> In golf you're trying to take the fewest strokes to get the ball in the hole. In code golf you're trying to take the fewest keystrokes.</p>",
        "id": 304240632,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665865237
    },
    {
        "content": "<p>Personally I like the idea of working with Cartesian closed categories as if they were <code>Type</code>. In this spirit, here's what a statement and proof can look like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lawvere</span>\n  <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"bp\">Œì</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span> <span class=\"bp\">‚üπ</span> <span class=\"n\">X</span> <span class=\"bp\">‚üπ</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">œÜ_surj</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">Œì</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span> <span class=\"bp\">‚üπ</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Œì</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">œÜ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Œì</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span> <span class=\"bp\">‚üπ</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Œì</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">Œì</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span> <span class=\"bp\">‚üπ</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">clear</span> <span class=\"n\">œÜ_surj</span><span class=\"bp\">;</span> <span class=\"n\">c_intro</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"o\">‚ü®</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">œÜ_surj</span> <span class=\"n\">q</span> <span class=\"k\">in</span>\n<span class=\"o\">‚ü®</span><span class=\"n\">œÜ</span> <span class=\"n\">p</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">beta</span><span class=\"o\">,</span> <span class=\"n\">category.id_comp</span><span class=\"o\">,</span> <span class=\"n\">category.id_comp</span><span class=\"o\">]</span> <span class=\"o\">}‚ü©</span>\n</code></pre></div>\n<p>It is based on a general <code>c_intro</code> tactic and associated (sorried!) lemma <code>beta</code> which can be found <a href=\"https://gist.github.com/dwarn/fefcf16a6209a8003f79b9b87500bf43\">here</a></p>",
        "id": 304283399,
        "sender_full_name": "David W√§rn",
        "timestamp": 1665910959
    },
    {
        "content": "<p>With blatant self-promotion, you can prove Lawvere's theorem with much less <a href=\"https://arxiv.org/abs/2110.00239\">https://arxiv.org/abs/2110.00239</a> so you can rely on less background material</p>",
        "id": 304290051,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1665915333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130272\">@David Michael Roberts</span> Nice! Do pointed magmoidal categories exist in mathlib?</p>",
        "id": 304343293,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1665948097
    },
    {
        "content": "<p>Not that I know! The axioms are so minimal it seems not terrible to formalise directly</p>",
        "id": 304354897,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1665957630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David W√§rn</span> It looks like you're applying morphisms as if they were functions... I didn't think that was possible in mathlib. Do you have some kind of <code>has_coe_to_fn</code> set up with <code>quiver.hom</code>?</p>",
        "id": 304356432,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1665959029
    },
    {
        "content": "<p>Ah yes, it's this coercion in the gist</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"bp\">Œì</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span> <span class=\"bp\">‚üπ</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">Œì</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"bp\">Œì</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">prod.lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">exp.ev</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">Y</span><span class=\"o\">‚ü©</span>\n</code></pre></div>",
        "id": 304400710,
        "sender_full_name": "David W√§rn",
        "timestamp": 1665993347
    }
]