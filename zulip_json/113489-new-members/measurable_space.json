[
    {
        "content": "<p>What is going on here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">indicator_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">e2_7_1</span>\n\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">letter</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">letter</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">letter</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">letter</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">letter</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">letter</span>\n\n\n\n<span class=\"kn\">instance</span> <span class=\"n\">fintype</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">letter</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">},</span> <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">}</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">letter</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{{},</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">}}</span>\n\n\n<span class=\"c1\">-- from mathlib:</span>\n<span class=\"c1\">-- /-- A measurable space is a space equipped with a σ-algebra. -/</span>\n<span class=\"c1\">-- structure measurable_space (α : Type u) :=</span>\n<span class=\"c1\">-- (is_measurable : set α → Prop)</span>\n<span class=\"c1\">-- (is_measurable_empty : is_measurable ∅)</span>\n<span class=\"c1\">-- (is_measurable_compl : ∀s, is_measurable s → is_measurable sᶜ)</span>\n<span class=\"c1\">-- (is_measurable_Union : ∀f:ℕ → set α, (∀i, is_measurable (f i)) → is_measurable (⋃i, f i))</span>\n\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">f1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>  <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"c1\">-- s: set ↥f1</span>\n<span class=\"c1\">-- h: ∅ = s</span>\n<span class=\"c1\">-- ⊢ ∅ = sᶜ</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">letter</span>\n\n\n<span class=\"kn\">end</span> <span class=\"n\">e2_7_1</span>\n</code></pre></div>",
        "id": 206875258,
        "sender_full_name": "Iocta",
        "timestamp": 1597354802
    },
    {
        "content": "<p>Is it asking me to show that the complement of {} in {{}, {a, b}, {c, d}, {a,b,c,d}} is {}? I don't think that's true.</p>",
        "id": 206875541,
        "sender_full_name": "Iocta",
        "timestamp": 1597354993
    },
    {
        "content": "<p>You have gone wrong starting with <code>measurable_space f1</code></p>",
        "id": 206875562,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597355013
    },
    {
        "content": "<p>Oh. What do I mean?</p>",
        "id": 206875656,
        "sender_full_name": "Iocta",
        "timestamp": 1597355093
    },
    {
        "content": "<p>Also, I would recommend using <code>fsplit</code> rather than <code>split</code>--that will present the subgoals in the order you expect</p>",
        "id": 206875674,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597355105
    },
    {
        "content": "<p>Try using <code>fsplit</code> instead of <code>split</code>, and then pay close attention to what Lean is asking for</p>",
        "id": 206875822,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597355229
    },
    {
        "content": "<p>And look at the definition of <code>measurable_space</code> again.</p>",
        "id": 206875852,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597355250
    },
    {
        "content": "<p>well I can finish the proof but as you said, I'm pretty sure this is not what I meant :-D</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">f1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">),</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n        <span class=\"n\">trivial</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n        <span class=\"n\">trivial</span><span class=\"o\">,</span>\n     <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206876488,
        "sender_full_name": "Iocta",
        "timestamp": 1597355686
    },
    {
        "content": "<p>So maybe what I mean is <code>example : measurable_space letter :=</code>, but then the first step is <code>⊢ set letter -&gt; Prop</code>, and I can start by saying </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">s_finite</span><span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">of_fintype</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>which leaves <code>⊢ Prop</code> and I'd say something involving <code>finset.is_measurable</code>....?</p>",
        "id": 206883500,
        "sender_full_name": "Iocta",
        "timestamp": 1597361111
    },
    {
        "content": "<p>If you have <code>⊢ Prop</code> you're doing something very wrong, although you could solve it using Fermat's Last Theorem</p>",
        "id": 206883521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597361146
    },
    {
        "content": "<p>haha okay</p>",
        "id": 206883569,
        "sender_full_name": "Iocta",
        "timestamp": 1597361165
    },
    {
        "content": "<p>Did you look at the type of <code>measurable_space</code> yet? I have never used it but my impression is that if it's data then you shouldn't be anywhere near a begin/end block</p>",
        "id": 206883580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597361181
    },
    {
        "content": "<p>yeah I quoted it in the first paste</p>",
        "id": 206883591,
        "sender_full_name": "Iocta",
        "timestamp": 1597361199
    },
    {
        "content": "<p>You make structures in Lean with the <code>{ foo := bar, baz := moo }</code> constructor usually</p>",
        "id": 206883608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597361217
    },
    {
        "content": "<p>Oh Ok great thanks: then you should write <code>example : measurable_space f1 := _</code> and then click on the light bulb and then click on the last but one option about fields of a structure and then go ahead and fill those in</p>",
        "id": 206883645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597361272
    },
    {
        "content": "<p>this is assuming you want to put a measurable space structure on f1</p>",
        "id": 206883693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597361296
    },
    {
        "content": "<p>which to be frank looks highly unlikely</p>",
        "id": 206883718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597361329
    },
    {
        "content": "<p>I think what I'm trying to say is f1 has {}, is closed under complement, and countable union/intersection</p>",
        "id": 206883942,
        "sender_full_name": "Iocta",
        "timestamp": 1597361535
    },
    {
        "content": "<p>which is at least similar to the generated </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">XXXX</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">is_measurable</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">is_measurable_empty</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">is_measurable_compl</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">is_measurable_Union</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>for some <code>XXXX</code></p>",
        "id": 206883988,
        "sender_full_name": "Iocta",
        "timestamp": 1597361607
    },
    {
        "content": "<p>but you both say I don't mean <code>measurable_space f1</code>, so I'm not sure what I do mean</p>",
        "id": 206884102,
        "sender_full_name": "Iocta",
        "timestamp": 1597361732
    },
    {
        "content": "<p>maybe i mean</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">letter</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">is_measurable</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">f1</span><span class=\"o\">),</span>\n  <span class=\"n\">is_measurable_empty</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">is_measurable_compl</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">is_measurable_Union</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>i'll try that</p>",
        "id": 206884299,
        "sender_full_name": "Iocta",
        "timestamp": 1597361892
    },
    {
        "content": "<p><code>⊢ ∅ ∈ f1</code> woulda thought <code>rfl</code> would work, but no dice</p>",
        "id": 206887416,
        "sender_full_name": "Iocta",
        "timestamp": 1597364909
    },
    {
        "content": "<p>Since <code>def f1 : set (set letter) := {{}, {a, b}, {c, d}, {a,b,c,d}}</code>, shouldn't it follow immediately that <code>{} \\in f1</code>?</p>",
        "id": 206887986,
        "sender_full_name": "Iocta",
        "timestamp": 1597365607
    },
    {
        "content": "<p>Well just because its obvious to you do doesn't mean its trivial!</p>",
        "id": 206888009,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597365660
    },
    {
        "content": "<p>The notation <code>{{}, {a,b}, {c,d}, {a,b,c,d}}</code> means something. Try adding <code>set_option pp.notation false</code> above your example to turn notation off, and you'll see it is really a sequence of elements inserted into a singleton set.</p>",
        "id": 206888090,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597365759
    },
    {
        "content": "<p>So probably there is a sequence of lemmas that do it, or maybe a tactic like finish.</p>",
        "id": 206888109,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597365794
    },
    {
        "content": "<p>First thing is to <code>rw f1</code> though if you didn't already.</p>",
        "id": 206888269,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597366033
    },
    {
        "content": "<p>In this case it is in fact a single lemma after you've done that</p>",
        "id": 206888283,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597366080
    },
    {
        "content": "<p>Ok that works.</p>",
        "id": 206888535,
        "sender_full_name": "Iocta",
        "timestamp": 1597366355
    }
]