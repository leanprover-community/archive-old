[
    {
        "content": "<p>This is probably a pretty basic question. I've run into the same situation multiple times: I'm trying to inspect a value of some type that doesn't implement <code>ToString</code>, and do it within a <code>do</code> block. My bad solution so far has just been to replicate the whole function up to that point in a different file, and then change the return type to be the type of the object I want to inspect. Then I can at least <code>#eval</code> it. Is there an idiomatic way to do this sort of debugging?</p>",
        "id": 284619902,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1654093976
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 284620116,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1654094056
    },
    {
        "content": "<p>depending on the monad, you can use <code>dbg_trace</code> to show the value. If that doesn't work lots of things have a <code>repr</code> that you can trace instead</p>",
        "id": 284621565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654094648
    },
    {
        "content": "<p>and I think you can automatically derive <code>Repr</code> so that's a least common denominator solution in most cases</p>",
        "id": 284621732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654094722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Debugging.20within.20a.20do.20block/near/284621732\">said</a>:</p>\n<blockquote>\n<p>and I think you can automatically derive <code>Repr</code> so that's a least common denominator solution in most cases</p>\n</blockquote>\n<p>Sorry for my ignorance, but what's the syntax for doing this?</p>",
        "id": 284622143,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1654094911
    },
    {
        "content": "<p>Or a reference to where it's described</p>",
        "id": 284622177,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1654094934
    },
    {
        "content": "<p><code>deriving Repr</code> at the end of the inductive/structure type declaration, or <code>deriving instance Repr for Foo</code> after the fact</p>",
        "id": 284622283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654094991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Is this in the book?</p>",
        "id": 284622360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654095007
    },
    {
        "content": "<p>The book uses <code>dbg_trace</code> but I think it's worth explicitly talking about these details</p>",
        "id": 284623023,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1654095261
    },
    {
        "content": "<p>I meant about deriving handlers in general and maybe which ones are implemented by default</p>",
        "id": 284623655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654095501
    },
    {
        "content": "<p>I suppose it's not metaprogramming per se, although I do get the sense that you interact a lot more with deriving handlers when (meta)programming in lean as compared to proving</p>",
        "id": 284624110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654095634
    },
    {
        "content": "<p>Ah, no. Henrik mentioned it to me via DM and we agreed that it could be covered. I'm just not sure which approach would be better. Maybe we can teach how to create them?</p>",
        "id": 284624470,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1654095804
    },
    {
        "content": "<p>Knowing about <code>deriving Repr, Quote, ToExpr</code> should be a fairly early topic, you will want to know about it when doing basic metaprogramming. Writing a deriving handler on the other hand is a pretty advanced topic, and I would just cover the core functions for doing so in the section that deals with that part of lean</p>",
        "id": 284624745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654095936
    },
    {
        "content": "<p>Maybe looking at a specific example would be helpful. So I'm playing around with the <code>Http.lean</code> package:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kn\">import</span> <span class=\"n\">Http</span>\n  <span class=\"kn\">open</span> <span class=\"n\">Http</span> <span class=\"n\">Http.URI</span>\n\n  <span class=\"kd\">constant</span> <span class=\"n\">spreadsheetId</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;id&gt;\"</span>\n\n  <span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span> <span class=\"n\">for</span> <span class=\"n\">Headers</span>     <span class=\"bp\">■</span> <span class=\"n\">default</span> <span class=\"n\">handlers</span> <span class=\"k\">have</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span> <span class=\"n\">yet</span><span class=\"o\">,</span> <span class=\"kd\">class</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">Repr'</span> <span class=\"n\">types</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Http.Headers</span><span class=\"o\">]</span>\n  <span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span> <span class=\"n\">for</span> <span class=\"n\">Request</span>     <span class=\"bp\">■■■■</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>    <span class=\"n\">Repr</span> <span class=\"n\">Headers</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"https://sheets.googleapis.com/v4/spreadsheets/{spreadsheetId}\"</span>\n    <span class=\"n\">try</span>\n      <span class=\"k\">let</span> <span class=\"n\">url</span> <span class=\"bp\">←</span> <span class=\"n\">IO.ofExcept</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">URI.parse</span> <span class=\"n\">input</span>\n      <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"URL: {url}\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">headers</span> <span class=\"o\">:=</span> <span class=\"n\">Headers.fromList</span> <span class=\"o\">[(</span><span class=\"s2\">\"Host\"</span><span class=\"o\">,</span> <span class=\"n\">url.host</span><span class=\"o\">)]</span>\n      <span class=\"k\">let</span> <span class=\"n\">request</span> <span class=\"o\">:=</span> <span class=\"n\">Request.init</span> <span class=\"n\">url</span> <span class=\"n\">Method.GET</span> <span class=\"n\">headers</span> <span class=\"n\">none</span>\n      <span class=\"c1\">-- println! \"Candidate request: {request}\"</span>\n      <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"Headers: {headers}\"</span>\n      <span class=\"n\">pure</span> <span class=\"mi\">0</span>\n    <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">IO.eprintln</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"error: {e}\"</span>\n      <span class=\"n\">pure</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>I'm not even sure if having those <code>deriving</code> commands floating there at the top-level of the file is correct syntax. But you can see the definitions of the <code>Request</code> and <code>Headers</code> types here: <a href=\"https://github.com/yatima-inc/Http.lean/blob/3f1e77d98b14a0d8d2e6dd7d93730c4c15d57c7b/src/Http/Types.lean#L114\">https://github.com/yatima-inc/Http.lean/blob/3f1e77d98b14a0d8d2e6dd7d93730c4c15d57c7b/src/Http/Types.lean#L114</a></p>\n<p><code>Headers</code> is just a hashmap: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Headers</span> <span class=\"o\">:=</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">CaseInsString</span> <span class=\"n\">String</span>\n</code></pre></div>\n<p>It's very surprising to me that you can't print a term of this type, since it's from <code>Std</code> and <code>CaseInsString</code> implements <code>ToString</code>. But maybe I'm seriously misunderstanding something.</p>",
        "id": 284625192,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1654096138
    },
    {
        "content": "<p>Hm, throughout the book we didn't come across the need to use those handlers. We usually print strings and other objects that can already be printed</p>",
        "id": 284625358,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1654096206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462544\">Malcolm Langfield</span> <a href=\"#narrow/stream/113489-new-members/topic/Debugging.20within.20a.20do.20block/near/284625192\">said</a>:</p>\n<blockquote>\n<p>It's very surprising to me that you can't print a term of this type, since it's from <code>Std</code> and <code>CaseInsString</code> implements <code>ToString</code>. But maybe I'm seriously misunderstanding something.</p>\n</blockquote>\n<p>That's the delta deriving handler, which is not yet implemented in lean 4 / mathlib4. It's not too hard to implement it yourself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">Headers</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">$</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Std.HashMap</span> <span class=\"bp\">..</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 284625553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654096314
    },
    {
        "content": "<p>The thing which makes this hard is that it works for any typeclass, it's not just for <code>Repr</code>, while deriving handlers are normally indexed by class</p>",
        "id": 284625757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654096390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Debugging.20within.20a.20do.20block/near/284625553\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"462544\">Malcolm Langfield</span> <a href=\"#narrow/stream/113489-new-members/topic/Debugging.20within.20a.20do.20block/near/284625192\">said</a>:</p>\n<blockquote>\n<p>It's very surprising to me that you can't print a term of this type, since it's from <code>Std</code> and <code>CaseInsString</code> implements <code>ToString</code>. But maybe I'm seriously misunderstanding something.</p>\n</blockquote>\n<p>That's the delta deriving handler, which is not yet implemented in lean 4 / mathlib4. It's not too hard to implement it yourself:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">Headers</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">$</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Std.HashMap</span> <span class=\"bp\">..</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This does not seem to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">Headers</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">$</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Std.HashMap</span> <span class=\"bp\">..</span><span class=\"o\">)</span>     <span class=\"bp\">■</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>    <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Std.HashMap</span> <span class=\"n\">CaseInsString</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The concept of a deriving handler is new to me. Is there any discussion of this in any of the various docs/books? I expected to find it in TPIL4, maybe in the section on type classes or inductive types, but there is only the most basic discussion of using the <code>deriving</code> keyword while defining inductive types.</p>",
        "id": 284628758,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1654097765
    },
    {
        "content": "<p>If that fails, then that means that even after unfolding there is something that requires a repr instance, probably <code>CaseInsString</code>?</p>",
        "id": 284647655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654106425
    },
    {
        "content": "<p>Deriving handlers are the functions that get called whenever you write <code>deriving Foo</code> on an inductive/structure type. Not all typeclasses have deriving handlers, <code>Repr</code> is one of the few that does, but it doesn't support <code>def</code> deriving so you have to use the trick above to do what it would otherwise need to do</p>",
        "id": 284647950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654106559
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span> <span class=\"n\">for</span> <span class=\"n\">CaseInsString</span>\n  <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">CaseInsString</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">$</span> <span class=\"n\">Repr</span> <span class=\"n\">CaseInsString</span>\n<span class=\"n\">E</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">Headers</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">$</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Std.HashMap</span> <span class=\"bp\">..</span><span class=\"o\">)</span>     <span class=\"bp\">■</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>    <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Std.HashMap</span> <span class=\"n\">CaseInsString</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Thanks very much for the help so far! It looks as though <code>CaseInsString</code> has one, and <code>String</code> does as well. Is there any way to get Lean to give me more information about what is causing the <code>failure to synthesize instance</code>? Surely someone cannot be expected to know all of this in order to print-debug something?</p>",
        "id": 284653363,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1654109113
    }
]