[
    {
        "content": "<p>I have following code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">ratio_test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"n\">L</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">sub_zero</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">lt_sub</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">div_lt_div_right</span> <span class=\"n\">two_pos</span><span class=\"o\">,</span> <span class=\"n\">zero_div</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">abs_sub_lt_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Tactic state:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"o\">)</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">-</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">L</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>Is it possible for me to split the \"and\" inside hypothesis H?</p>",
        "id": 159157743,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550843598
    },
    {
        "content": "<p><code>cases H</code></p>",
        "id": 159157812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550843646
    },
    {
        "content": "<p>I tried doing that, it gives me error:<br>\ncases tactic failed, it is not applicable to the given hypothesis</p>",
        "id": 159157873,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550843716
    },
    {
        "content": "<p>oh wait, I didn't see the forall. You can first rewrite with <code>imp_and_distrib</code> and <code>forall_and_distrib</code></p>",
        "id": 159157874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550843718
    },
    {
        "content": "<p>Thank you :)</p>",
        "id": 159158122,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550843919
    },
    {
        "content": "<p>Calle, let me emphasize the natural number subtraction discussion: what you had to endure was the result of Lean not yet having enough tactics to fight natural number subtraction hell. One day Lean will catch up with the rest of the world in this area, and it will disappear. In the mean time you shouldn't think everything is hopeless. Your <code>have h₂ : (1 - L) / 2 &gt; 0, rwa [←sub_zero (1:ℝ), lt_sub, ←div_lt_div_right two_pos, zero_div] at h₁,</code> is unneeded suffering. There is no nat subtraction in this statement, you can safely replace this proof with <code>linarith</code></p>",
        "id": 159158840,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550844604
    },
    {
        "content": "<p><code>have h₂ : (1 - L) / 2 &gt; 0, by linarith,</code></p>",
        "id": 159158879,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550844648
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">ratio_test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"n\">L</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">sub_zero</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">lt_sub</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">div_lt_div_right</span> <span class=\"n\">two_pos</span><span class=\"o\">,</span> <span class=\"n\">zero_div</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">abs_sub_lt_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">imp_and_distrib</span><span class=\"o\">,</span> <span class=\"n\">forall_and_distrib</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">Ha</span> <span class=\"n\">Hb</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lt_sub</span><span class=\"o\">,</span> <span class=\"n\">add_div</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Ha</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Tactic state:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"o\">)</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">Hb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">Ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">L</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>I would like to do some simple rewrites on Ha, add_assoc and add_comm. I want to get (L + 1)/2 on RHS. From what I've understood rw doesnt work inside a forall statement, and in this case simp/simp only [add_assoc] at Ha does nothing. How do I proceed?</p>",
        "id": 159158884,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550844654
    },
    {
        "content": "<p>Thank you Patrick! I always seem forget the existence of linarith.</p>",
        "id": 159159024,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550844787
    },
    {
        "content": "<p>The easy way here is to wait until you specialize <code>Ha</code></p>",
        "id": 159159053,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550844838
    },
    {
        "content": "<p>But if you really want it, you can</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"bp\">;</span> <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Ha</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 159159267,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550845004
    },
    {
        "content": "<p>except you shouldn't call it <code>h</code> because you already have an <code>h</code> in your context...</p>",
        "id": 159159383,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550845102
    },
    {
        "content": "<p>For very short one-shots like this, you have the option to write something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n             <span class=\"k\">by</span> <span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"bp\">;</span> <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Ha</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>that won't clutter your context at any time</p>",
        "id": 159159438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550845200
    },
    {
        "content": "<p>thats perfect! Was already getting annoyed at the hypothesis being in the way :)</p>",
        "id": 159159553,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550845320
    },
    {
        "content": "<p>By the way <span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> your statement of <code>ratio_test</code> does not hold</p>",
        "id": 159161463,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550847070
    },
    {
        "content": "<p>It's a good exercise to look for a counter-example</p>",
        "id": 159161479,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550847099
    },
    {
        "content": "<p>Once you'll have fixed the statement, my next advice will by to first state: <code>theorem ratio_test_aux (a : ℕ → ℝ) (L : ℝ) (hL : L &lt; 1)  (INSERT MISSING ASSUMPTION HERE)   (h : ∀ n, abs ((a (n+1))/(a n)) ≤ L) : M1P1.is_limit a 0</code>. You'll probably also want to state <code>theorem sandwich_zero (a b : ℕ → ℝ)  (hb : is_limit b 0)   (hab : ∀ n, abs (a n) ≤ b n) : is_limit a 0</code>. This way you'll be able to keep low complexity proofs</p>",
        "id": 159164045,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550849235
    },
    {
        "content": "<p>Yes :) I noticed after a while that I needed: <code>lean (h₂ : ∀ (n : ℕ), (a n) ≠ 0) </code> or where you hinting at something else?</p>",
        "id": 159164427,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550849522
    },
    {
        "content": "<p>Did you find the counter-example without this assumption? (this is not an exam, I'm asking because there is an important Lean lesson to learn here, and it's better if you can figure it out for yourself)</p>",
        "id": 159164528,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550849578
    },
    {
        "content": "<p>I did not find a counterexample, I just noticed that after a while I needed this assumption to proceed. I am not sure about the counter-example... If the assumption wasn't true then the sequence <code> λ n, abs ((a (n+1))/(a n))</code> is undefined right?</p>",
        "id": 159164858,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550849826
    },
    {
        "content": "<p>Lean doesn't let you write anything undefined</p>",
        "id": 159164881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550849860
    },
    {
        "content": "<p>That's a very important point</p>",
        "id": 159164951,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550849888
    },
    {
        "content": "<p>hint: what if every other value is 0?</p>",
        "id": 159164971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550849925
    },
    {
        "content": "<p>Mario: Calle is not there yet, still needs to figure out what happens in Lean if there is <em>some</em> zero value</p>",
        "id": 159165027,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550849999
    },
    {
        "content": "<p>yes</p>",
        "id": 159165077,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550850008
    },
    {
        "content": "<p>I found that the inverse for zero is zero in field.lean, and it was proved using <code> discrete_field.inv_zero α </code></p>",
        "id": 159165563,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550850400
    },
    {
        "content": "<p>discrete_field... thats just a finite field?</p>",
        "id": 159165592,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550850424
    },
    {
        "content": "<p>no, discrete_field means field</p>",
        "id": 159165625,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550850444
    },
    {
        "content": "<p>oh</p>",
        "id": 159165629,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550850449
    },
    {
        "content": "<p>I saw now that its by definition?</p>",
        "id": 159165637,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550850456
    },
    {
        "content": "<p>you don't want to know why it's called discrete_field</p>",
        "id": 159165652,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550850468
    },
    {
        "content": "<p>Ok, so <code>x/0</code> is defined to be zero.</p>",
        "id": 159165703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550850489
    },
    {
        "content": "<p>That's good to know</p>",
        "id": 159165725,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550850502
    },
    {
        "content": "<p>but now I want to know of course... <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 159165734,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550850508
    },
    {
        "content": "<p>You can now progress to Mario's hint</p>",
        "id": 159165753,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550850519
    },
    {
        "content": "<p>but wait why define it to be zero?</p>",
        "id": 159165762,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550850526
    },
    {
        "content": "<p>to not break lean if someone (like me) does something stupid?</p>",
        "id": 159165773,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550850541
    },
    {
        "content": "<p>There are two parts: first it has to be defined to be something, because all functions are total in type theory</p>",
        "id": 159165806,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550850563
    },
    {
        "content": "<p>then you get to choose the value for <code>a/0</code>. If you choose zero then some algebraic manipulations are valid in every case</p>",
        "id": 159165841,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550850596
    },
    {
        "content": "<p>like (a+b)/c = a/c + b /c</p>",
        "id": 159165901,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550850609
    },
    {
        "content": "<p>ah, makes (kind of) sense</p>",
        "id": 159165944,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550850633
    },
    {
        "content": "<p>so you get a bonus: there is no proof to give when you apply  (a+b)/c = a/c + b /c</p>",
        "id": 159165959,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550850641
    },
    {
        "content": "<p>but of course Lean will ask for a non-vanishing proof if you want to use (a*b)/b = a</p>",
        "id": 159165993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550850677
    },
    {
        "content": "<p>because that one needs non-vanishing b</p>",
        "id": 159166008,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550850689
    },
    {
        "content": "<p>I have noticed the absence of <code>`b != 0 </code> in some lemmas where I thought it should be before, so this is the reason.</p>",
        "id": 159166387,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550850942
    },
    {
        "content": "<p>So one way to strengthen your theorem is to only assume that a is <em>eventually</em> nonzero, or <em>eventually</em> with ratio less than L</p>",
        "id": 159167049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550851356
    },
    {
        "content": "<p>Mario, there is no eventually L</p>",
        "id": 159167114,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550851411
    },
    {
        "content": "<p>At least not in the original statement which assumes <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mi mathvariant=\"normal\">/</mi><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_{n+1}/a_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"></span></span></span></span></span><span class=\"mord mathrm\">/</span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> <em>converges</em> to L</p>",
        "id": 159167179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550851444
    },
    {
        "content": "<p>But then I suggested introducing the intermediate statement you're thinking of</p>",
        "id": 159167216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550851474
    },
    {
        "content": "<p>I was thinking about that as well, but then one might as well make the \"eventually\" non-zero into a new sequence and apply the theorem. Then I have proved a theorem saying that if a sequence a (n + k) converges for some fixed k, then a n converges.</p>",
        "id": 159167442,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550851623
    },
    {
        "content": "<p>Yes, we've seen that limit_start_irrevelant lemma, that's a good one. You still need (I think) my other two intermediate statements</p>",
        "id": 159167565,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550851698
    },
    {
        "content": "<p>Wait... two? I thought the first one was just mine but adding the missing assumption?</p>",
        "id": 159167792,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550851872
    },
    {
        "content": "<blockquote>\n<p>Once you'll have fixed the statement, my next advice will by to first state: <code>theorem ratio_test_aux (a : ℕ → ℝ) (L : ℝ) (hL : L &lt; 1)  (INSERT MISSING ASSUMPTION HERE)   (h : ∀ n, abs ((a (n+1))/(a n)) ≤ L) : M1P1.is_limit a 0</code>. You'll probably also want to state <code>theorem sandwich_zero (a b : ℕ → ℝ)  (hb : is_limit b 0)   (hab : ∀ n, abs (a n) ≤ b n) : is_limit a 0</code>. This way you'll be able to keep low complexity proofs</p>\n</blockquote>",
        "id": 159167835,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550851904
    },
    {
        "content": "<p>I can see I haven't been consistent with using the M1P1 namespace. I meant M1P1.is_limit everywhere</p>",
        "id": 159167934,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550851966
    },
    {
        "content": "<p>But you should probably open that namespace</p>",
        "id": 159167942,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550851977
    },
    {
        "content": "<p>Okay, so you should generally try to split theorems into auxillary lemmas even though they may not be that useful?</p>",
        "id": 159168374,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550852312
    },
    {
        "content": "<p>To reduce complexity</p>",
        "id": 159168384,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550852321
    },
    {
        "content": "<p>Sometimes it helps. And in this case I'm not even sure it's not useful</p>",
        "id": 159168442,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550852370
    },
    {
        "content": "<p>both those intermediate lemmas are fairly useful</p>",
        "id": 159168462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550852398
    },
    {
        "content": "<p>I see that the second one is useful</p>",
        "id": 159168536,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550852432
    },
    {
        "content": "<p>Okay now I see that the first can be useful as well</p>",
        "id": 159168596,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550852489
    }
]