[
    {
        "content": "<p>I'm playing around with the pattern of defining a <code>structure</code> that associates a value with some propositions about the value.</p>\n<p>Trivial example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">list3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">len</span> <span class=\"o\">:</span> <span class=\"n\">val.length</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm finding that one disadvantage of this approach is that the tactics don't seem to treat the <code>val</code> field as a local hypothesis.</p>\n<p>This works fine - <code>library_search</code> finds the <code>len</code> prop:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l3</span> <span class=\"o\">:</span> <span class=\"n\">list3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l3.val.length</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>However this does not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l3</span> <span class=\"o\">:</span> <span class=\"n\">list3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l3.val.length</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>But I can persuade it to work if I explicitly bring <code>len</code> into the context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l3</span> <span class=\"o\">:</span> <span class=\"n\">list3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l3.val.length</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">l3.len</span> <span class=\"o\">:=</span> <span class=\"n\">l3.len</span><span class=\"o\">,</span> <span class=\"n\">library_search</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Is there anything that I can do to make <code>l3.len</code> implicitly in context whenever <code>l3</code> is? I want the behaviour of the last example with the <code>have</code>, but without having to type the <code>have</code>.</p>\n<p>On a slightly more general note, is this pattern common and considered good? Or are there reasons that I shouldn't be trying to group values and their propositions like this?</p>",
        "id": 261713949,
        "sender_full_name": "Sam",
        "timestamp": 1637100451
    },
    {
        "content": "<p>One way, though somewhat explicit, is <code>cases l3</code>.  This essentially brings all the fields into the context.</p>",
        "id": 261714415,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637100657
    },
    {
        "content": "<p>If you have just a single proposition, it's more common to use <code>subtype</code>: <code>{val : list nat // val.length = 3}</code>.  Sometimes you might write it as a set and use the coercion to <code>subtype</code>.</p>\n<p>But using custom structures to \"bundle\" data with properties is fairly common, too.  I think whether it's good comes down to seeing how you tend to use it -- do they make the interface to your definitions and theorems cleaner?</p>",
        "id": 261714847,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637100872
    },
    {
        "content": "<p>Actually <code>cases</code> is explicitly not what I want, because I want to keep <code>l3</code> intact.  <code>cases</code> replaces <code>l3</code> with its constituent parts, but I want to leave it as it is and augment the context with the <code>len</code> prop.</p>",
        "id": 261714916,
        "sender_full_name": "Sam",
        "timestamp": 1637100903
    },
    {
        "content": "<p>I have more than one prop, but I could AND them together I suppose. What advantages does <code>subtype</code> give here?</p>",
        "id": 261715099,
        "sender_full_name": "Sam",
        "timestamp": 1637100989
    },
    {
        "content": "<p>The advantage of a subtype is that there's a bunch of pre-written lemmas to help you out (like you get that <code>list3.val</code> is injective).  It's a tradeoff, since then you'd have to <code>/\\</code> everything together, and that's not very nice.</p>",
        "id": 261715318,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637101103
    },
    {
        "content": "<p>I think the bundle will be a cleaner interface once I've built up all of the relevant lemmas on the bundle structure, but I'm finding declaring those lemmas to be a bit tricky for reasons like this.</p>",
        "id": 261715320,
        "sender_full_name": "Sam",
        "timestamp": 1637101104
    },
    {
        "content": "<p>Do you have an example where you need <code>l3</code> to remain intact? There are some cases I can think of, but I'm wondering what your own constraint is here.</p>",
        "id": 261715372,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637101134
    },
    {
        "content": "<p>(Also, I'm finding <code>have l3.len := l3.len</code> to be odd -- it seems like you're creating a new name that shadows <code>l3.len</code>, right? Would <code>have l3_len := l3.len</code> be the same? Without having tested it, it seems like using <code>l3.len</code> like this tricks <code>library_search</code> into printing out that it's using <code>l3.len</code>.)</p>",
        "id": 261715640,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637101255
    },
    {
        "content": "<p>I'm building up a library of functions and lemmas that operate on <code>list3</code>s. (It's not actually <code>list3</code>, that's a simplified example.) So I'll be using values of that type, so I want to keep it around.</p>",
        "id": 261715747,
        "sender_full_name": "Sam",
        "timestamp": 1637101320
    },
    {
        "content": "<p>Yes <code>l3_len</code> works the same. As far as I can tell I'm just shadowing it.</p>",
        "id": 261715886,
        "sender_full_name": "Sam",
        "timestamp": 1637101376
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l3</span> <span class=\"o\">:</span> <span class=\"n\">list3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l3.val.length</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">l3_len</span> <span class=\"o\">:=</span> <span class=\"n\">l3.len</span><span class=\"o\">,</span> <span class=\"n\">library_search</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p><code>library_search</code> is giving me <code>exact (eq.symm l3_len).ge</code></p>",
        "id": 261715945,
        "sender_full_name": "Sam",
        "timestamp": 1637101415
    },
    {
        "content": "<p>Which of course I can manually simplify to <code>exact (eq.symm l3.len).ge</code>. But it would be cool if it just got that without me doing any work.</p>",
        "id": 261716355,
        "sender_full_name": "Sam",
        "timestamp": 1637101605
    },
    {
        "content": "<p>Anyway, I think the short answer is \"no, there's not something that automatically includes fields of a structure into the context\".  You could write a tactic to do this if you wanted, but you'd have to call it.</p>\n<p>You could also modify <code>library_search</code> to walk through things in your context and add <code>Prop</code> fields to its list of assumptions.</p>",
        "id": 261716437,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637101659
    },
    {
        "content": "<p>Or even <code>l3.len.le</code></p>",
        "id": 261716456,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637101666
    },
    {
        "content": "<p>Modifying <code>library_search</code> to do it is intriguing, but I expect that's an unreasonable amount of work, isn't it?</p>",
        "id": 261716837,
        "sender_full_name": "Sam",
        "timestamp": 1637101843
    },
    {
        "content": "<p>Although actually, this is about more than <code>library_search</code>. That was just the easy example. I've observed similar behaviour with things like <code>simp</code>, where using <code>have</code> to bring field props into context is required. What I'm actually looking for is a way to do this that operates irrespective of tactic.</p>",
        "id": 261717262,
        "sender_full_name": "Sam",
        "timestamp": 1637102032
    },
    {
        "content": "<p>Oh yeah <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , good point. I guess <code>library_search</code> isn't even giving me the best way here.</p>",
        "id": 261717440,
        "sender_full_name": "Sam",
        "timestamp": 1637102109
    },
    {
        "content": "<p>You could make a variant of <code>cases</code> that introduces an <code>x</code> with <code>h : x = l3</code>, does <code>cases x</code>, uses <code>h</code> to create rewrites for fields of <code>l3</code>, then rewrites the fields that <code>cases x</code> created with it.</p>\n<p>In practice, I find I just add things I think I might need when I'm trying to find things when writing proofs.  Like <code>library_search [l3.len]</code> should probably work.</p>",
        "id": 261717887,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637102358
    },
    {
        "content": "<p>Yeah, I think just writing the slightly over explicit code is the way to go, rather than trying anything too complicated like making custom tactics.  I think the <code>have</code> shadowing trick actually works quite nicely, it's just a bit verbose.</p>",
        "id": 261718190,
        "sender_full_name": "Sam",
        "timestamp": 1637102540
    },
    {
        "content": "<p>Do you think it would make sense to add a feature like this into the language, though? Perhaps some attribute that can be applied to structures to specify that certain fields are implicitly in the context?</p>",
        "id": 261718232,
        "sender_full_name": "Sam",
        "timestamp": 1637102580
    },
    {
        "content": "<p>What exactly is the problem you're trying to solve? Is it \"I want to be reminded of this in the goal view\", and so just a user experience thing? Or is it \"<code>library_search</code> can't find my proof unless I add a <code>have</code>\"?</p>",
        "id": 261718653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637102800
    },
    {
        "content": "<p>It seems that if this is something you need (and not just for <code>library_search</code> and <code>simp</code> convenience) then it suggests that it'd be better to unbundle the structure.</p>\n<p>(I checked: <code>library_search [l3.len]</code> does work.)</p>",
        "id": 261718681,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637102816
    },
    {
        "content": "<p>I guess there's also things that operate using <code>assumption</code>, which I think <code>simp</code> does when trying to fill in hypotheses to simp lemmas.</p>",
        "id": 261718825,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637102888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  It's \"tactics generally can't find my proof unless I add a <code>have</code>\". It's convenient with things like <code>simp? *</code> too. And presumably other tactics as well, but I've only actually played with simple examples so far.</p>",
        "id": 261718839,
        "sender_full_name": "Sam",
        "timestamp": 1637102900
    },
    {
        "content": "<p>Different tactics look at different things, but no tactic is going to start fishing fields out of a structure apart from tactics like <code>tidy</code> which is a finishing tactic which will take your structure apart mercilessly.</p>",
        "id": 261718910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637102948
    },
    {
        "content": "<p>Actually, fishing fields out of structures would be an excellent additional to <code>library_search</code>, and completely doable.</p>",
        "id": 261719039,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637103010
    },
    {
        "content": "<p><code>library_search</code> hands off to <code>solve_by_elim</code> after it has successfully applied a library lemma, and it should be possible to tell <code>solve_by_elim</code> that it is allowed to use projections of local hypotheses.</p>",
        "id": 261719099,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637103055
    },
    {
        "content": "<p>I was going to mention <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.auto_cases\">docs#tactic.auto_cases</a> (which is used by <code>tidy</code>) but (1) it doesn't know about your custom structure (2) it uses <code>cases</code> (3) it's apparently not an interactive tactic</p>",
        "id": 261719112,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637103064
    },
    {
        "content": "<p>I'm not sure whether <code>simp *</code> or <code>linarith</code> should pull fields out of structures, but <code>library_search</code> certainly should</p>",
        "id": 261719125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637103075
    },
    {
        "content": "<p>There's also <code>case_bash</code> somewhere.</p>",
        "id": 261719144,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637103084
    },
    {
        "content": "<p>Ah, I didn't know about that one.</p>",
        "id": 261719164,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637103104
    },
    {
        "content": "<p><code>auto_cases</code> is extremely lame. It was amongst the first tactics I ever wrote, and should be redone.</p>",
        "id": 261719175,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637103108
    },
    {
        "content": "<p>That sounds reasonable <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, but I'm actually not imagining this as being a feature of tactics themselves. In my imagination, it's a feature of the <code>structure</code> that whenever it exists in the context, it automatically adds its own props into the context at the top level.</p>\n<p>I'm very new to lean though, so I don't know if that makes sense when you get to the technical details. I was hoping that there was just some attribute I could throw on the <code>structure</code> or something like that.</p>",
        "id": 261719338,
        "sender_full_name": "Sam",
        "timestamp": 1637103189
    },
    {
        "content": "<p>Improving <code>library_search</code> to do this sounds cool, but that was really only the simple case I was using as an example.</p>",
        "id": 261719472,
        "sender_full_name": "Sam",
        "timestamp": 1637103269
    },
    {
        "content": "<p>I really don't want <code>add_assoc</code>, <code>add_comm</code>, <code>add_zero</code>, <code>zero_add</code>, <code>add_left_neg...</code> all being thrown into my local context every time I make something an additive abelian group.</p>",
        "id": 261719542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637103297
    },
    {
        "content": "<p>Aah, but you only want it for certain structures I guess.</p>",
        "id": 261719580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637103321
    },
    {
        "content": "<p>Certain structures, and even only certain fields of certain structures.</p>",
        "id": 261719616,
        "sender_full_name": "Sam",
        "timestamp": 1637103338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I was imagining modifying <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.solve_by_elim.mk_assumption_set\">docs#tactic.solve_by_elim.mk_assumption_set</a>, which is called once at the beginning of <code>library_search</code>, and it could add <code>Prop</code>-fields of non-excluded local hypotheses.</p>",
        "id": 261719626,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637103343
    },
    {
        "content": "<p>There is some danger of infinite regress since the field could be another structure of the same type.</p>",
        "id": 261719938,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637103507
    },
    {
        "content": "<p>Er wait maybe it can't be for a <code>structure</code></p>",
        "id": 261719954,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637103522
    },
    {
        "content": "<p>Sounds good. Behind an additional flag, of course. I'd guess that just doing a single pass over the hypotheses is good enough.</p>",
        "id": 261720400,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637103744
    },
    {
        "content": "<p>I assume anything that works for <code>structures</code> would/should also work for subtypes, right? This doesn't work yet.</p>\n<p><code>example (l3: {val : list nat // val.length = 3}) : (l3.val.length = 3) := by library_search,</code></p>",
        "id": 261720606,
        "sender_full_name": "Sam",
        "timestamp": 1637103858
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype/src\">src#subtype</a> shows you that it's just another structure</p>",
        "id": 261720640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637103891
    },
    {
        "content": "<p>Right, yeah good.</p>",
        "id": 261720664,
        "sender_full_name": "Sam",
        "timestamp": 1637103905
    },
    {
        "content": "<p>Presumably <code>library_search</code> is finding the function which takes a structure and spits out the field.</p>",
        "id": 261720675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637103909
    },
    {
        "content": "<p>I'm not sure if I'm misunderstanding you Kevin, but just to be clear, that snipped I just posted doesn't work currently.</p>",
        "id": 261720807,
        "sender_full_name": "Sam",
        "timestamp": 1637103978
    },
    {
        "content": "<p>Here's a silly prototype:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- tactic.get_constructors_for</span>\n  <span class=\"c1\">-- #check tactic.get_decls_from</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">add_structure_hyps</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n  <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.expanded_field_list</span> <span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">l.mfoldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- trace b,</span>\n    <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">mk_const</span> <span class=\"bp\">$</span> <span class=\"n\">name.append</span> <span class=\"n\">b.1</span> <span class=\"n\">b.2</span><span class=\"o\">,</span>\n    <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">expr.mk_app</span> <span class=\"n\">c</span> <span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">],</span>\n    <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">i</span> <span class=\"bp\">←</span> <span class=\"n\">is_prop</span> <span class=\"n\">ty</span><span class=\"o\">,</span>\n    <span class=\"n\">guardb</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">note</span> <span class=\"bp\">`</span><span class=\"n\">this</span> <span class=\"n\">ty</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n    <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n  <span class=\"c1\">-- l.mfoldl (λ _ b, do</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">oof</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c.b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- have := a.h c,</span>\n  <span class=\"n\">add_structure_hyps</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261721120,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637104177
    },
    {
        "content": "<p>Is this what you are thinking?</p>",
        "id": 261721148,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637104194
    },
    {
        "content": "<p>Currently it is silly and names everything <code>this</code> and hardcodes the name <code>c</code>, but you get the idea I hope</p>",
        "id": 261721263,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637104226
    },
    {
        "content": "<p>That's pretty cool <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>!</p>",
        "id": 261721614,
        "sender_full_name": "Sam",
        "timestamp": 1637104425
    },
    {
        "content": "<p>That doesn't have the usability I was hoping for because it requires an explicit tactic invocation, and it's not automatically associated with the <code>structure</code>, but if nothing better comes out of this discussion I'll probably use something based on that.</p>",
        "id": 261721728,
        "sender_full_name": "Sam",
        "timestamp": 1637104497
    },
    {
        "content": "<p>Yeah it could certainly be added as a pre-processing step for linarith to do this, but we like small lego-block style tactics so people can combine them in different ways, it certainly seems useful to me to have this as an independent tactic for other purposes too.</p>",
        "id": 261722153,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637104762
    },
    {
        "content": "<p>Off topic, but I wish Lean was named something that I could google things about without having to carefully refine my search to avoid sifting through tons of articles from Startup Bros all excited about their lean management practices.</p>",
        "id": 261723149,
        "sender_full_name": "Sam",
        "timestamp": 1637105384
    },
    {
        "content": "<p>The trick is to google for lean prover or lean theorem prover</p>",
        "id": 261723714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637105715
    },
    {
        "content": "<p>use leanprover</p>",
        "id": 261723726,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637105720
    },
    {
        "content": "<p>Good tips, thanks.</p>",
        "id": 261723810,
        "sender_full_name": "Sam",
        "timestamp": 1637105773
    },
    {
        "content": "<p>Slightly more advanced version <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- tactic.get_constructors_for</span>\n  <span class=\"c1\">-- #check tactic.get_decls_from</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">add_structure_hyps</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n    <span class=\"n\">h</span> <span class=\"bp\">←</span> <span class=\"n\">i_to_expr</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"n\">tyo</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.expanded_field_list</span> <span class=\"o\">(</span><span class=\"n\">expr.const_name</span> <span class=\"n\">tyo</span><span class=\"o\">),</span>\n    <span class=\"n\">l.mfoldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n      <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">mk_const</span> <span class=\"bp\">$</span> <span class=\"n\">name.append</span> <span class=\"n\">b.1</span> <span class=\"n\">b.2</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">expr.mk_app</span> <span class=\"n\">c</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n      <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n      <span class=\"n\">i</span> <span class=\"bp\">←</span> <span class=\"n\">is_prop</span> <span class=\"n\">ty</span><span class=\"o\">,</span>\n      <span class=\"n\">guardb</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">note</span> <span class=\"bp\">`</span><span class=\"n\">this</span> <span class=\"n\">ty</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n      <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">oof</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d.b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- have := a.h c,</span>\n  <span class=\"n\">add_structure_hyps</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261724320,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637106057
    },
    {
        "content": "<p>Very cool <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>! Thanks - I'll be stealing that immediately!</p>",
        "id": 261725262,
        "sender_full_name": "Sam",
        "timestamp": 1637106434
    },
    {
        "content": "<p>I realise that this probably isn't going to happen, because people don't seem too interested in this more magic version of the idea, but I'd like to refine my description of what I'd ideally like to see.</p>\n<p>I would like <em>any tactic</em> that makes use of local hypothesese to automatically see \"nested\" local hypothesese that exist as <code>structure</code> fields. <code>simp</code>, <code>library_search</code>, <code>finish</code>, <code>linarith</code> etc and anything else that makes use of the local state would have them available.</p>\n<p>Without knowing the details of how tactics are implemented, I'm imagining that this could be done by modifying whatever the equivalent of <code>get_local_hypothesese()</code> is.</p>\n<p>If this would introduce too much overhead by bringing too many things into scope, I'm happy for this to be opt-in on a per-field basis with an attribute on the <code>structure</code> declaration. Like <code>@[simp]</code>, there are some places where this makes more sense than others.</p>",
        "id": 261725733,
        "sender_full_name": "Sam",
        "timestamp": 1637106785
    },
    {
        "content": "<p>These nested hypotheses wouldn't necessarily need to be <em>actually</em> brought into the local context to be displayed to the user - they would just be visible to tactics that use them.</p>",
        "id": 261725893,
        "sender_full_name": "Sam",
        "timestamp": 1637106919
    },
    {
        "content": "<p>Do people think this idea is bad and/or technically infeasible?</p>",
        "id": 261726220,
        "sender_full_name": "Sam",
        "timestamp": 1637107007
    },
    {
        "content": "<p>I don't think it's either bad or techinically infeasible. The biggest problem is that is proposes modify many tactics at once (some implemented in core, some in mathlib). We are very keen to keep tactics simple and focused -- think of the philosophy of unix command line tools.</p>",
        "id": 261726767,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637107395
    },
    {
        "content": "<p>I think a <code>with_projections { ... }</code> might be good. It would just pull out projections as local hypotheses during the scope of the <code>{ ... }</code>.</p>",
        "id": 261726865,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637107440
    },
    {
        "content": "<p>As said above, I do think that this change should/could be made to <code>library_search</code>.</p>",
        "id": 261726929,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637107470
    },
    {
        "content": "<p>That seems reasonable <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>,  and <code>with_projections</code> seems like an interesting way to go.</p>\n<p>My motivation is generally increasing the usability of <code>subtype</code>s and <code>subtype</code>-like structures, which appear to be a generally powerful idea, but currently a bit finicky and verbose to use. Conceptually, I think of this not as a modification to individual tactics, but to what it means for something to be in the local context. I now realise that that's probably not how it would work in implementation.</p>\n<p>I still think this would be a nice feature, and it doesn't feel like it compromises the simple tactics philosophy to me, but I'll cede to your opinion as being far more informed than mine.</p>",
        "id": 261728103,
        "sender_full_name": "Sam",
        "timestamp": 1637108252
    }
]