[
    {
        "content": "<p>Can anyone help me to simplify my proof of this pigeonhole lemma?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pidgeonhole</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">},</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"bp\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">},</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span>\n     <span class=\"n\">intro</span><span class=\"o\">,</span>\n     <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n     <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">not_mem_empty</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">hn</span> <span class=\"n\">hip</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">hbounded</span> <span class=\"n\">hinf</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">k0</span><span class=\"o\">,</span> <span class=\"n\">hk0</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hbounded</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">fk</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hip</span> <span class=\"n\">fk</span><span class=\"o\">,</span>\n      <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">k0</span><span class=\"o\">),</span>\n      <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">k0</span><span class=\"o\">),</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">intro</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">hb_left</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_right_cancel</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hb_right</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">hb_right</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hk0a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hk0</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_of_mem_insert_of_ne</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"n\">hk0a</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">hall</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_exists</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hinf</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">hk0</span> <span class=\"o\">:=</span> <span class=\"n\">hall</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hk0</span><span class=\"o\">,</span>\n    <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">m0</span><span class=\"o\">,</span> <span class=\"n\">hm0</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m0</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">not_imp</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hm0</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hfm0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">not_not</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hnn</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">hk1</span> <span class=\"o\">:=</span> <span class=\"n\">hall</span> <span class=\"o\">(</span><span class=\"n\">m0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">m0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hk1</span><span class=\"o\">,</span>\n    <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">m1</span><span class=\"o\">,</span> <span class=\"n\">hm1</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnn1</span> <span class=\"o\">:</span> <span class=\"n\">m0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">m1</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">not_imp</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hm1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hfm1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">not_not</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hnn1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">m0</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">m1</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hnn1</span><span class=\"o\">,</span>\n      <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hfm0</span><span class=\"o\">,</span> <span class=\"n\">hfm1</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209581883,
        "sender_full_name": "David Renshaw",
        "timestamp": 1599694683
    },
    {
        "content": "<p>Very mathlib style would be to deduce this from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/infinite_pigeonhole./src\">src#infinite_pigeonhole.</a> :-) I appreciate that's not what you're asking for!</p>",
        "id": 209582293,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599695082
    },
    {
        "content": "<p>By \"simplify\" do you mean \"but still using induction on <code>finset</code>\"? Because my first suggest would be to not do that. :-)</p>",
        "id": 209582461,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599695276
    },
    {
        "content": "<p>Given the result you're after, you could just <code>intro s</code>, say its <code>card</code> is <code>n</code>, and restrict <code>f</code> to <code>range (n+1)</code>, and use a finite pigeonhole principle.</p>",
        "id": 209582553,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599695367
    },
    {
        "content": "<p>That on the same formulation of the lemma ? Or are you proposing another formulation ?</p>",
        "id": 209582668,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599695445
    },
    {
        "content": "<p>I was suggesting to either use from a mathlib, or prove from scratch if that's the exercise, the usual finite pigeonhole principle for maps between <code>finset</code>s. Then reduce what <span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> wants to prove to that.</p>",
        "id": 209582721,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599695513
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_image_of_injective./src\">src#finset.card_image_of_injective.</a> Someone should PR the easy consequence that actually looks like the finite pigeonhole principle, and make sure to add a doc-string with the word \"pigeonhole\"!</p>",
        "id": 209582818,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599695596
    },
    {
        "content": "<p>thanks! I tried searching mathlib for \"pidgeonhole\" but that was before I figured out that I was spelling it wrong. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 209583440,
        "sender_full_name": "David Renshaw",
        "timestamp": 1599696120
    },
    {
        "content": "<p>I simplified your proof using some tricks I know.  I didn't know about <code>obtain</code>!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pidgeonhole</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">hn</span> <span class=\"n\">hip</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">not_mem_empty</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">k0</span><span class=\"o\">,</span> <span class=\"n\">hk0</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">fk</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">hk0a</span> <span class=\"o\">:=</span> <span class=\"n\">hk0</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_of_mem_insert_of_ne</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"n\">hk0a</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hne</span><span class=\"o\">,</span> <span class=\"n\">hfk</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hip</span> <span class=\"n\">fk</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">k0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">k0</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">revert</span> <span class=\"n\">hne</span><span class=\"o\">,</span>\n      <span class=\"n\">contrapose</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_right_cancel</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_mk</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val_eq_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hfk</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">hfk</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">m0</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hk0</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">m1</span><span class=\"o\">,</span> <span class=\"n\">hne</span><span class=\"o\">,</span> <span class=\"n\">hk1</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">m0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">m0</span><span class=\"o\">,</span> <span class=\"n\">m1</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hne</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hk0</span><span class=\"o\">,</span> <span class=\"n\">hk1</span><span class=\"o\">],</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209583906,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599696493
    },
    {
        "content": "<p><code>obtain</code> is pretty awesome. :-)</p>",
        "id": 209584312,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599696910
    },
    {
        "content": "<p>how would you use an existential without <code>obtain</code>?</p>",
        "id": 209584333,
        "sender_full_name": "David Renshaw",
        "timestamp": 1599696935
    },
    {
        "content": "<p>some combination of <code>have</code> and <code>Exists.some</code>, I guess?</p>",
        "id": 209584401,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599696982
    },
    {
        "content": "<p>I always would do <code>rcases hip fk with ⟨a, b, hne, hfk⟩</code> rather than <code>obtain ⟨a, b, hne, hfk⟩ := hip fk</code>.</p>",
        "id": 209584435,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599697014
    },
    {
        "content": "<p>It's pretty much the same, but I like how with <code>obtain</code> the expression is at the end, since it opens up having a larger expression being decomposed while still having somewhat readable code.</p>",
        "id": 209584532,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599697114
    },
    {
        "content": "<p>Before I learned to use <code>rcases</code>, I would write horrible terms starting with <code>exists.elim</code>. I still need to get in the habit of using <code>obtain</code> though.</p>",
        "id": 209584651,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599697225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> Found a way to simplify it even more:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">pigeonhole</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hinj</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">contrapose</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">not_injective_infinite_fintype</span> <span class=\"n\">f</span> <span class=\"n\">hinj</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>(The <code>(↑s : set ℕ)</code> is another way to write <code>{x : ℕ // x ∈ s}</code>)</p>",
        "id": 209585476,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599698187
    },
    {
        "content": "<p>cool!</p>",
        "id": 209585529,
        "sender_full_name": "David Renshaw",
        "timestamp": 1599698267
    },
    {
        "content": "<p>At this point, you're essentially relying on an existing proof of the pigeonhole principle, and this proof is just providing the glue.</p>",
        "id": 209585639,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599698383
    },
    {
        "content": "<p>That's good enough for me! Working through the induction was a fun exercise, but I'm mostly concerned with learning how to do things idiomatically.</p>",
        "id": 209585720,
        "sender_full_name": "David Renshaw",
        "timestamp": 1599698468
    },
    {
        "content": "<p>ah... <code>push_neg</code> is quite convenient</p>",
        "id": 209585953,
        "sender_full_name": "David Renshaw",
        "timestamp": 1599698743
    },
    {
        "content": "<p>I wouldn't really call these the pigeonhole principle, but maybe I've been too influenced by a Dijkstra essay.  His formulation was, essentially, that if you have a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">f : A \\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> a finite set, then the maximum cardinality of a preimage is at least <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">∣</mo><mi>A</mi><mo stretchy=\"false\">∣</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">∣</mo><mi>B</mi><mo stretchy=\"false\">∣</mo></mrow><annotation encoding=\"application/x-tex\">\\lvert A\\rvert / \\lvert B\\rvert</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">∣</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">∣</span><span class=\"mord\">/</span><span class=\"mopen\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">∣</span></span></span></span>.  So, for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi mathvariant=\"double-struck\">N</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">f : \\mathbb{N} \\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, I'd like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi>b</mi><mo>∈</mo><mi>B</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">∣</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">∣</mo><mo>=</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\exists b \\in B, \\lvert f^{-1}(b)\\rvert = \\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mclose\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>.</p>",
        "id": 209586127,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599698917
    },
    {
        "content": "<p>You're saying that there's a stronger lemma that better deserves the name <code>pigeonhole</code>? That sounds like a reasonable stance to me.</p>",
        "id": 209586264,
        "sender_full_name": "David Renshaw",
        "timestamp": 1599699100
    },
    {
        "content": "<p>You can say that there's a hole that contains at least the average number of pigeons per hole.  I'm not sure the best way to formalize that in Lean, though.</p>\n<p>Following <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>'s suggestion, it seems like it might be worth creating an analogue of <code>not_injective_infinite_fintype</code> for <code>fintype.card_le_of_injective</code> and adding documentation comments that these are the classic pigeonhole principles for finitely many and infinitely many pigeons.  All I really did with my last simplification was using <code>push_neg</code> to recover the hidden <code>function.injective</code>.</p>",
        "id": 209586749,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599699700
    },
    {
        "content": "<p>(Issue <a href=\"https://github.com/leanprover-community/mathlib/issues/2772\">#2772</a> is also about the pigeonhole principle.)</p>",
        "id": 209586958,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599699989
    },
    {
        "content": "<p>(Ah, found it: <a href=\"https://github.com/leanprover-community/mathlib/issues/2272\">#2272</a>)</p>",
        "id": 209587125,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599700251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/pigeonhole.20lemma/near/209585476\">said</a>:</p>\n<blockquote>\n<p>(The <code>(↑s : set ℕ)</code> is another way to write <code>{x : ℕ // x ∈ s}</code>)</p>\n</blockquote>\n<p>what do these notations mean?</p>",
        "id": 209588228,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599701990
    },
    {
        "content": "<p>(or how would I look up <code>//</code> other than grepping around mathlib which takes me to some pretty low-level files)</p>",
        "id": 209588284,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599702037
    },
    {
        "content": "<p>One thing you can do is <code>set_option pp.notation false</code></p>",
        "id": 209588364,
        "sender_full_name": "David Renshaw",
        "timestamp": 1599702177
    },
    {
        "content": "<p>I find that when I jump-to-definition on the opening <code>{</code> of <code>{x : ℕ // x ∈ s}</code>, I get properly taken the definition of <code>subtype</code>. It does not work on the <code>//</code> or the closing <code>}</code>.</p>",
        "id": 209588445,
        "sender_full_name": "David Renshaw",
        "timestamp": 1599702307
    },
    {
        "content": "<p>(in emacs)</p>",
        "id": 209588458,
        "sender_full_name": "David Renshaw",
        "timestamp": 1599702350
    },
    {
        "content": "<p>aha cool, that helps, thanks (pp.notation works here), lemme try jump to definition</p>",
        "id": 209588518,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599702405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> awesome, that works too as long as yeah I do it on the <code>{</code> and not <code>//</code> which is what I tried before. Appreciated!</p>",
        "id": 209588535,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599702440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/pigeonhole.20lemma/near/209586958\">said</a>:</p>\n<blockquote>\n<p>(Issue <a href=\"https://github.com/leanprover-community/mathlib/issues/2272\">#2272</a> is also about the pigeonhole principle.)</p>\n</blockquote>\n<p>Ok, here they are! <a href=\"https://github.com/leanprover-community/mathlib/issues/4096\">#4096</a></p>",
        "id": 209593996,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599710463
    },
    {
        "content": "<p>Adrian Mathias told me that the pigeonhole principle was that if there were two pigeons in one hole, then one hole contained two pigeons. He then remarked that this idea could be generalized</p>",
        "id": 209599288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599718268
    }
]