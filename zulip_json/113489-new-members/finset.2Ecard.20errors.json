[
    {
        "content": "<p>I'm confused by the error messages I get from the following examples. Namely <code>invalid field notation, type is not of the form (C ...)</code> on the <code>.card</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">euclidean</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"n\">y2</span> <span class=\"n\">y3</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">y1</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"o\">,</span> <span class=\"n\">y3</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y1</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"o\">,</span> <span class=\"n\">y3</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 201436703,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592598574
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 201436965,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592598734
    },
    {
        "content": "<p>Lean can not guess that you are working with a finset.</p>",
        "id": 201436995,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592598758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.2Ecard.20errors/near/201436995\">said</a>:</p>\n<blockquote>\n<p>Lean can not guess that you are working with a finset.</p>\n</blockquote>\n<p>Oh that makes sense. Thanks!</p>",
        "id": 201437473,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592599049
    },
    {
        "content": "<p>Ok with that modification I'm able to resolve the second example but the last two still aren't working for me. I'm confused why <code>card</code> seems to like the size of a nat finset is obvious but not for a finset using elements of  a metric space. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">euclidean</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"n\">y2</span> <span class=\"n\">y3</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">y1</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"o\">,</span> <span class=\"n\">y3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y1</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"o\">,</span> <span class=\"n\">y3</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 201438046,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592599454
    },
    {
        "content": "<p>You need decidable equality on M to work with finsets</p>",
        "id": 201438166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592599543
    },
    {
        "content": "<p>you can't insert constructively unless you have an algorithm for working out whether the new element is already in</p>",
        "id": 201438228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592599566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.2Ecard.20errors/near/201438228\">said</a>:</p>\n<blockquote>\n<p>you can't insert constructively unless you have an algorithm for working out whether the new element is already in</p>\n</blockquote>\n<p>How would I assert decidable equality on M and build an algorithm for appending new elements to a finset? This is in the context of euclidean geoemtry, so I don't think either of those would be an issue.</p>",
        "id": 201439333,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592600342
    },
    {
        "content": "<p>Either <code>[decidable_eq M]</code> everywhere, or <code>open_locale classical</code> at the top.</p>",
        "id": 201439379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592600376
    },
    {
        "content": "<p>It's completely daft that this fails; the set is obviously finite, you won't be able to work out its size but that shouldn't stop you making it.</p>",
        "id": 201439492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592600436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.2Ecard.20errors/near/201439492\">said</a>:</p>\n<blockquote>\n<p>It's completely daft that this fails; the set is obviously finite, you won't be able to work out its size but that shouldn't stop you making it.</p>\n</blockquote>\n<p>I'm getting the same errors with <code>open_locale classical</code> and with <code>[decidable_eq M]</code>. </p>\n<p>I was trying to prove some geometry theorems and wanted a way to pass a certain number of points without having to specify an order.  Finsets seemed like a good choice because they provided an easy way to enforce the condition of the points being distinct. Maybe this isn't worth it though if finsets don't have this kind of machinery built in yet.</p>",
        "id": 201440170,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592600865
    },
    {
        "content": "<p>you don't have hypotheses that that the <code>y</code> are distinct anywhere, so your last examples just aren't true</p>",
        "id": 201440388,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592601012
    },
    {
        "content": "<p>This works</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">example</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y1</span> <span class=\"n\">y2</span> <span class=\"n\">y3</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h12</span> <span class=\"o\">:</span> <span class=\"n\">y1</span> <span class=\"bp\">≠</span> <span class=\"n\">y2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h13</span> <span class=\"o\">:</span> <span class=\"n\">y1</span> <span class=\"bp\">≠</span> <span class=\"n\">y3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h23</span> <span class=\"o\">:</span> <span class=\"n\">y2</span> <span class=\"bp\">≠</span> <span class=\"n\">y3</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">({</span><span class=\"n\">y1</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"o\">,</span> <span class=\"n\">y3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_insert_of_not_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">cc</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_insert_of_not_mem</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">simpa</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201441032,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592601381
    },
    {
        "content": "<p><code>finish</code> can do it, though it's a touch slow</p>",
        "id": 201441096,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592601441
    },
    {
        "content": "<p>here's \"the right proof\" for the case where you don't know they're equal</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y1</span> <span class=\"n\">y2</span> <span class=\"n\">y3</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"o\">({</span><span class=\"n\">y1</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"o\">,</span> <span class=\"n\">y3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"o\">[</span><span class=\"n\">y1</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"o\">,</span> <span class=\"n\">y3</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"n\">y1</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"o\">,</span> <span class=\"n\">y3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">to_finset_card_le</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201442229,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592602228
    },
    {
        "content": "<p>here it is for the case where you know they're distinct</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y1</span> <span class=\"n\">y2</span> <span class=\"n\">y3</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h12</span> <span class=\"o\">:</span> <span class=\"n\">y1</span> <span class=\"bp\">≠</span> <span class=\"n\">y2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h13</span> <span class=\"o\">:</span> <span class=\"n\">y1</span> <span class=\"bp\">≠</span> <span class=\"n\">y3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h23</span> <span class=\"o\">:</span> <span class=\"n\">y2</span> <span class=\"bp\">≠</span> <span class=\"n\">y3</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">({</span><span class=\"n\">y1</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"o\">,</span> <span class=\"n\">y3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"o\">[</span><span class=\"n\">y1</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"o\">,</span> <span class=\"n\">y3</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"n\">y1</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"o\">,</span> <span class=\"n\">y3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">to_finset_card_of_nodup</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">cc</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201442385,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592602329
    },
    {
        "content": "<p>That makes sense. The way finset is implemented is pretty unintuitive to me but this has helped a lot.</p>",
        "id": 201513548,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592709484
    },
    {
        "content": "<p>Ok what if I have a finset <code>{y1, y2, y3}</code> and a proof <code>h : y1 = y3</code>. How could I use that to show <code>{y1, y2, y3}.card = 2</code>? It seems like there's no <code>finset.card_insert_of_mem</code> along with <code>finset.card_insert_of_not_mem</code></p>",
        "id": 201616084,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592837799
    },
    {
        "content": "<p><code>finset.card_insert</code> should exist</p>",
        "id": 201616176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592837852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.2Ecard.20errors/near/201616084\">said</a>:</p>\n<blockquote>\n<p>Ok what if I have a finset <code>{y1, y2, y3}</code> and a proof <code>h : y1 = y3</code>. How could I use that to show <code>{y1, y2, y3}.card = 2</code>? It seems like there's no <code>finset.card_insert_of_mem</code> along with <code>finset.card_insert_of_not_mem</code></p>\n</blockquote>\n<p>Your statement is very close to a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. If you wrap your question in an <code>example</code> and add the appropriate imports, you'll get more useful answers more quickly.</p>",
        "id": 201617412,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592838376
    },
    {
        "content": "<p>The cardinality could be 1</p>",
        "id": 201617539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592838439
    },
    {
        "content": "<p>it's easier to notice your theorem is false after you formalize the statement. (probably the theorem you want is to replace <code>=</code> with <code>\\le</code>)</p>",
        "id": 201617894,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592838603
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_insert_of_mem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">insert_eq_of_mem</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">finset</span>\n</code></pre></div>",
        "id": 201619017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592839148
    },
    {
        "content": "<p>we have been so familiarized with indeterminates (like x y z in polynomials) that we automatically assume y1 y2 y3 are distinct</p>",
        "id": 201619278,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592839266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.2Ecard.20errors/near/201617539\">said</a>:</p>\n<blockquote>\n<p>The cardinality could be 1</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.2Ecard.20errors/near/201617894\">said</a>:</p>\n<blockquote>\n<p>it's easier to notice your theorem is false after you formalize the statement. (probably the theorem you want is to replace <code>=</code> with <code>\\le</code>)</p>\n</blockquote>\n<p>Yes! Thanks for catching that. Either that the finset is <code>\\le</code> 2, or that it is 2 and we're given a proof that <code>y1 \\ne y2</code>.</p>",
        "id": 201619598,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592839403
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3137\">#3137</a></p>",
        "id": 201619812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592839486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.2Ecard.20errors/near/201619812\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3137\">#3137</a></p>\n</blockquote>\n<p>Cool!</p>",
        "id": 201620086,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592839575
    },
    {
        "content": "<p>Note that it follows trivially from the stronger statement that if a \\in s then <code>insert a s = s</code>, which is <code>insert_eq_of_mem</code>.</p>",
        "id": 201620666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592839837
    },
    {
        "content": "<p>How often do these get built? I'll just use <code>insert_eq_of_mem</code> for now and get back periodically.</p>",
        "id": 201630635,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592844268
    },
    {
        "content": "<p>You can watch the PR. Assuming it's uncontroversial, it might well be merged today, and then if you do <code>leanproject up</code> you'll have access to it. Just wait for the green \"open\" thing to change to a purple \"merged\"</p>",
        "id": 201636013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592846877
    },
    {
        "content": "<p>some PR's can take weeks or months, if they're complicated, or half-ready and then the person working on them has to stop to work on other things. For a PR like this, there are two possibilities -- either it gets shooed through, or I'm told that the lemma shouldn't be in the library because it's a trivial consequence of a stronger lemma which is already there, namely <code>insert_eq_of_mem</code>. </p>\n<p>If you want to be a pro, then you can just use it now. I pushed to the <code>card-insert-of-mem</code> branch of mathlib, so you can just checkout that branch, use <code>leanproject up</code> to get the olean files (they have been made, because it says \"all checks have passed\" on the PR page) and then you have it. But then you have to be careful to sort things out again properly when it gets merged into master (and of course if it doesn't get merged then you will have to unravel everything).</p>",
        "id": 201636385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592847073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.2Ecard.20errors/near/201636385\">said</a>:</p>\n<blockquote>\n<p>some PR's can take weeks or months, if they're complicated, or half-ready and then the person working on them has to stop to work on other things. For a PR like this, there are two possibilities -- either it gets shooed through, or I'm told that the lemma shouldn't be in the library because it's a trivial consequence of a stronger lemma which is already there, namely <code>insert_eq_of_mem</code>. </p>\n<p>If you want to be a pro, then you can just use it now. I pushed to the <code>card-insert-of-mem</code> branch of mathlib, so you can just checkout that branch, use <code>leanproject up</code> to get the olean files (they have been made, because it says \"all checks have passed\" on the PR page) and then you have it. But then you have to be careful to sort things out again properly when it gets merged into master (and of course if it doesn't get merged then you will have to unravel everything).</p>\n</blockquote>\n<p>Cool! This is insightful. I think I'll just wait and update mathlib; I think changing my mathlib dependencies is ultimately going to be more difficult than refactoring my code with the update.</p>",
        "id": 201642903,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592850377
    },
    {
        "content": "<p>The magic command that Kevin wanted to mention is <code>leanproject get mathlib:card-insert-of-mem</code></p>",
        "id": 201644641,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592851284
    },
    {
        "content": "<p>As usual, there is a problem with my two-line PR ;-)</p>",
        "id": 201644806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592851362
    },
    {
        "content": "<p>Ok <span class=\"user-mention\" data-user-id=\"261068\">@ROCKY KAMEN-RUBIO</span> if you type <code>leanproject up</code> you can use the lemma now without switching branches or doing any other git weirdness</p>",
        "id": 201672524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592867807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.2Ecard.20errors/near/201672524\">said</a>:</p>\n<blockquote>\n<p>Ok <span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> if you type <code>leanproject up</code> you can use the lemma now without switching branches or doing any other git weirdness</p>\n</blockquote>\n<p>Amazing, thank you!</p>",
        "id": 201773136,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592941578
    }
]