[
    {
        "content": "<p>Hello! My name is Gabriel Moise and I am an undergraduate working on my licence project in Lean. I started learning it a couple of weeks ago and I am struggling with some basic concepts and therefore have some (probably silly) questions about <code>finsets</code>:</p>\n<ol>\n<li>I defined a new type for my application to be </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and I don't know how to create a <code>finset V</code> object that would contain all the elements of the finite type V. I need this for example in case I want to use this set to make a sum over it, something like <code>Σ i in V, f i</code>. </p>\n<ol start=\"2\">\n<li>The sum above gets me to my next question: I am trying to prove the following lemma, which is something pretty common to use, but I fail to find anything that could help me solve it:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">subset_sum</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s'</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">):</span>\n<span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>Additionally, if I want to use a particular<code>finset V</code>  (let's call it<code>A</code>, which can be defined to be a portion of the elements that are in V) to define a matrix, the following doesn't work because A is not a type:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">example_matrix</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">....</span>\n</code></pre></div>\n<p>Is there a way to construct this matrix to be defined only on the entries which correspond to the entries of A?</p>\n<ol start=\"4\">\n<li>Lastly, two silly things: for a type V, how do I specifiy that V is an ordered type (like in the <code>variables</code> construct where for example I say that <code>[decidable_eq V]</code> to specify that we can have equality between terms of type V) and if I have an if-then-else construct, how do I link together two conditions into one? (like the <code>&amp;&amp;</code> that is used in C) : </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">condition1</span> <span class=\"bp\">???</span> <span class=\"n\">condition2</span> <span class=\"k\">then</span> <span class=\"n\">branch1</span> <span class=\"k\">else</span> <span class=\"n\">branch2</span>\n</code></pre></div>\n<p>Thank you very much for your help! Looking forward to hearing from you! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 225535724,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1612786806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366674\">Gabriel Moise</span> <a href=\"#narrow/stream/113489-new-members/topic/Finsets.20and.20operations.20on.20them/near/225535724\">said</a>:</p>\n<blockquote>\n<p>Hello! My name is Gabriel Moise and I am an undergraduate working on my licence project in Lean. I started learning it a couple of weeks ago and I am struggling with some basic concepts and therefore have some (probably silly) questions about <code>finsets</code>:</p>\n<ol>\n<li>I defined a new type for my application to be </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and I don't know how to create a <code>finset V</code> object that would contain all the elements of the finite type V. I need this for example in case I want to use this set to make a sum over it, something like <code>Σ i in V, f i</code>. </p>\n</blockquote>\n<p>The <code>finset</code> containing all elements of a <code>fintype</code> is called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.univ\">docs#finset.univ</a>. In fact, <code>Σ (i : V), f i</code> is short for <code>Σ i in finset.univ, f i</code>.</p>",
        "id": 225536104,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612787072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366674\">Gabriel Moise</span> <a href=\"#narrow/stream/113489-new-members/topic/Finsets.20and.20operations.20on.20them/near/225535724\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>The sum above gets me to my next question: I am trying to prove the following lemma, which is something pretty common to use, but I fail to find anything that could help me solve it:</li>\n</ol>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">subset_sum</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s'</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">):</span>\n<span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Almost what you want is available: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_sdiff\">docs#finset.sum_sdiff</a>. How I found it: I know most results about sums are in <code>algebra/big_operators.lean</code>. The <code>\\</code> operator is called <code>sdiff</code> in lemma names, so I searched for <code>sdiff</code> in that file and it turns out there is a definition <code>prod_sdiff</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_sdiff</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">s₂</span> <span class=\"bp\">\\</span> <span class=\"n\">s₁</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">prod_union</span> <span class=\"n\">sdiff_disjoint</span><span class=\"o\">,</span> <span class=\"n\">sdiff_union_of_subset</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The <code>@[to_additive]</code> line means Lean will copy this result to an \"additive\" version, replacing the product with a sum, <code>*</code> with <code>+</code>, <code>1</code> with <code>0</code>, etc.</p>",
        "id": 225536746,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612787491
    },
    {
        "content": "<p>The other trick (the one I would have used) would have been to make sure I had 'algebra.big_operators' imported and to simply have guessed the name of the lemma I wanted. I would guess finset.sum_sdiff or something close to this, and then VS code auto complete would start suggesting sensible options.</p>",
        "id": 225537096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612787653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366674\">Gabriel Moise</span> <a href=\"#narrow/stream/113489-new-members/topic/Finsets.20and.20operations.20on.20them/near/225535724\">said</a>:</p>\n<blockquote>\n<ol start=\"3\">\n<li>Additionally, if I want to use a particular<code>finset V</code>  (let's call it<code>A</code>, which can be defined to be a portion of the elements that are in V) to define a matrix, the following doesn't work because A is not a type:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">example_matrix</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">....</span>\n</code></pre></div>\n<p>Is there a way to construct this matrix to be defined only on the entries which correspond to the entries of A?</p>\n</blockquote>\n<p>Unfortunately, coercing a <code>finset</code> to a type has awkward syntax. We should really get around to fixing it :( Here's a working example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">example_matrix</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 225537122,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612787667
    },
    {
        "content": "<p>Note that <code>A : set nat</code> isn't a type either :-) But it does have a coercion to a type, so it works</p>",
        "id": 225537322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612787767
    },
    {
        "content": "<p>By the way, what is a license project?</p>",
        "id": 225537409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612787838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366674\">Gabriel Moise</span> <a href=\"#narrow/stream/113489-new-members/topic/Finsets.20and.20operations.20on.20them/near/225535724\">said</a>:</p>\n<blockquote>\n<ol start=\"4\">\n<li>Lastly, two silly things: for a type V, how do I specifiy that V is an ordered type (like in the <code>variables</code> construct where for example I say that <code>[decidable_eq V]</code> to specify that we can have equality between terms of type V)</li>\n</ol>\n</blockquote>\n<p>It depends what kind of ordering you want :) The lowest-level is <code>[has_le V]</code>, but you can ask for <code>[preorder V]</code> or <code>[linear_order V]</code>, or ...</p>\n<blockquote>\n<p>if I have an if-then-else construct, how do I link together two conditions into one? (like the <code>&amp;&amp;</code> that is used in C) : </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">condition1</span> <span class=\"bp\">???</span> <span class=\"n\">condition2</span> <span class=\"k\">then</span> <span class=\"n\">branch1</span> <span class=\"k\">else</span> <span class=\"n\">branch2</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>You can use the logic symbols in if-then-else expressions, i.e. <code>∧</code>, <code>∨</code>, ...</p>",
        "id": 225537413,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612787839
    },
    {
        "content": "<p>We have <code>&amp;&amp;</code> too IIRC but it's used for <code>bool</code>s. If you're reasoning you should use the much richer world of <code>Prop</code>s.</p>",
        "id": 225537617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612787965
    },
    {
        "content": "<p>Oh apparently this wasn't the correct term: by license project I meant a project that I have to do in my final year at university which counts towards my degree result. Sorry about that!</p>",
        "id": 225537638,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1612787979
    },
    {
        "content": "<p><code>&amp;&amp;</code> and <code>||</code> also exist (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/band\">docs#band</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bor\">docs#bor</a>) but those only work on booleans. The nice thing about the logic symbols like<code>∧</code>, <code>∨</code>, ... are that they will work with any <code>Prop</code>, and <code>if</code> infers the <code>decidable</code> instances automatically.</p>",
        "id": 225537640,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612787981
    },
    {
        "content": "<p>Are you a mathematician or a computer scientist? What will your project be about?</p>",
        "id": 225537738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612788020
    },
    {
        "content": "<p>I am a computer scientist, 3rd year. My project is about graphs and my supervisor has some ideas of how to use the Laplacian matrix for proving interesting properties. I am only at the beginning, but I hope I can make progress quickly.</p>",
        "id": 225537928,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1612788135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366674\">Gabriel Moise</span> <a href=\"#narrow/stream/113489-new-members/topic/Finsets.20and.20operations.20on.20them/near/225537638\">said</a>:</p>\n<blockquote>\n<p>Oh apparently this wasn't the correct term: by license project I meant a project that I have to do in my final year at university which counts towards my degree result. Sorry about that!</p>\n</blockquote>\n<p>I was thinking whether it had anything to do with a <a href=\"https://en.wikipedia.org/wiki/Licentiate_(degree)\">licentiate degree</a> :)</p>",
        "id": 225537929,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612788135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> and I are giving an intensive one-day course about <code>finset</code>s for beginners in April (I think), so let us know any problems you run into!</p>",
        "id": 225537959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612788157
    },
    {
        "content": "<p>You might also be interested in the semi-secret <a class=\"stream\" data-stream-id=\"252551\" href=\"/#narrow/stream/252551-graph-theory\">#graph theory</a> stream in that case.</p>",
        "id": 225538015,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612788199
    },
    {
        "content": "<p>Graphs -- oh nice! You know we have the beginnings of graph theory in mathlib?</p>",
        "id": 225538028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612788214
    },
    {
        "content": "<p>I don't know if they're focusing on practical computation though, I do know they just proved Hall's dog-owner theorem</p>",
        "id": 225538131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612788264
    },
    {
        "content": "<p><del>formerly marriage theorem</del></p>",
        "id": 225538161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612788291
    },
    {
        "content": "<p>yes, I would love being part of the semi-secret stream. And yes, I went through the graph theory part and tried to understand as much of it as possible, actually I followed the model for the adjacency matrix file so far and now I want to come up with my own ideas.</p>",
        "id": 225538179,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1612788308
    },
    {
        "content": "<p>Gabriel, are you French?</p>",
        "id": 225538180,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612788309
    },
    {
        "content": "<p>No, I am Romanian <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 225538189,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1612788320
    },
    {
        "content": "<p>That \"license\" thing sounded very French.</p>",
        "id": 225538224,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612788347
    },
    {
        "content": "<p>(I had no trouble at all understand that sentence)</p>",
        "id": 225538288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612788367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Finsets.20and.20operations.20on.20them/near/225538224\">said</a>:</p>\n<blockquote>\n<p>That \"license\" thing sounded very French.</p>\n</blockquote>\n<p>It seems to be a Romance thing. My wife also got a \"licenciatura\" before her master.</p>",
        "id": 225538342,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612788421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Finsets.20and.20operations.20on.20them/near/225538180\">said</a>:</p>\n<blockquote>\n<p>Gabriel, are you French?</p>\n</blockquote>\n<p>(I admit that I was thinking the same until the expected question :&gt;)</p>",
        "id": 225542380,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612790378
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">V_elems</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">finset.univ</span>\n\n<span class=\"kd\">lemma</span><span class=\"bp\">...</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"bp\">...</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">V_elems</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">V_elems</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">subset_univ</span> <span class=\"o\">({</span><span class=\"n\">i</span><span class=\"o\">})},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Apparently I get the error : <code>don't know how to synthesize placeholder</code> and I don't get why, since to me I used correctly the theorem <code>subset_univ</code> from <code>data.fintype.basic</code>.</p>",
        "id": 225544340,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1612791279
    },
    {
        "content": "<p>An important thing to learn in this community is that you will get much better quality answers to your questions if you post what is called minimal working examples <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for your questions. So -- add the imports, give the lemma a name or just say <code>example : false := </code>, actually make the code compile up to the point where the error or problem occurs. Hopefully any questions you have about this are answered in the mwe link above.</p>\n<p>The reason for it is that the 1 minute it takes you to make it is more cost-effective than the n minutes it takes for n people to do the job themselves. </p>\n<p>In short, don't just tell us the error, show us the exact code which makes the error, so we can make the same error ourselves.</p>",
        "id": 225557388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612797062
    }
]