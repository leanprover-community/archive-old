[
    {
        "content": "<p>So it seems that <code>1/0</code> does not raise a type error in Lean. That is a surprise.</p>\n<p><a href=\"https://www.hillelwayne.com/post/divide-by-zero/\" target=\"_blank\" title=\"https://www.hillelwayne.com/post/divide-by-zero/\">https://www.hillelwayne.com/post/divide-by-zero/</a></p>\n<p>I've Googled a bit and according to this, it seems that allowing division by zero is a convention in theorem provers and Lean is not an exception. Still, shouldn't there be safe division somewhere in the library. What is it called?</p>",
        "id": 178029695,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1570958813
    },
    {
        "content": "<p>What is unsafe about this? ;-)</p>",
        "id": 178029705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570958834
    },
    {
        "content": "<p>It's completely safe because every single <em>theorem</em> where division by 0 isn't allowed contains the hypothesis that the denominator isn't 0 in its statement.</p>",
        "id": 178029717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570958864
    },
    {
        "content": "<p>this <em>is</em> what I would call a safe division, one where you don't have to worry about it blowing up on you</p>",
        "id": 178029721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570958870
    },
    {
        "content": "<p>You should think of Lean's <code>/</code> as a different function to the mathematician's definition of division. It's a new function, which mathematicians should use different notation for (e.g. <code>/</code> with a little asterisk next to it), which is defined by <code>x/^*y</code> =  usual x/y if y isn't 0, and 0 otherwise.</p>",
        "id": 178029785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570958932
    },
    {
        "content": "<p>That said, I know what you mean and there is a function that does division in a ring, where the second argument is a unit, and in a division ring you can construct a unit from a nonzero element</p>",
        "id": 178029807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570958967
    },
    {
        "content": "<p>Sure you can make mathematician's /, by just defining a function from the reals times the non-zero reals to the reals, or defining a function from the reals times the reals to the type \"option real\" consisting of the reals plus an extra element \"NaN\". Indeed, when I started doing Lean i was so horrified by this convention that I made these functions.</p>",
        "id": 178029816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570958991
    },
    {
        "content": "<p>And then I very quickly realised that they were much harder to use in practice than Lean's convention. Because with \"mathematician's division\" you just can't do things like a/(b/c) at all easily, because b/c is in \"reals + NaN\" and now you have to insert the proof that c isn't zero and then get the real out of b/c <em>whilst in the middle of writing a mathematical statement</em></p>",
        "id": 178029896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570959075
    },
    {
        "content": "<p>With Lean's convention you just do a/(b/c), don't worry about the answer, and then pick up the pieces later (the moment you start using it Lean will start asking you to prove that c isn't 0 and that b/c isn't zero, and you can do that once, at a time which is convenient for you, and just add them as hypotheses)</p>",
        "id": 178029955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570959144
    },
    {
        "content": "<p>In summary, if you're a mathematician who wants to prove a theorem which involves a definition, it's your job to make sure that the denominator isn't zero in your theorem. If you can't do that, then it's your problem, not Lean's. If you can do it, that's great, we'll keep track of that hypothesis, but experience has shown that <code>\\^*</code> is a much easier function to manipulate in Lean so <em>in the proof</em> we'd rather use that more convenient function, but we know it agrees with division whenever division makes sense, so we can glue together at the end.</p>",
        "id": 178029984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570959223
    },
    {
        "content": "<p>(by <code>\\^*</code> I mean Lean's non-mathematical division)</p>",
        "id": 178030029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570959246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> </p>\n<blockquote>\n<p>It's completely safe because every single theorem where division by 0 isn't allowed contains the hypothesis that the denominator isn't 0 in its statement.</p>\n</blockquote>\n<p>Yeah, but I have to write a short program here. I mean sure, I see that there is no chance of it being wrong, but I might write a larger program in the future where this will be an issue.</p>\n<p>I guess I'll have to define my own safe division then. Every time I will use it Lean should be able to prove automatically that the division is valid anyway.</p>\n<blockquote>\n<p>Nans</p>\n</blockquote>\n<p>I hate those. When I was working on the Spiral language because <code>Nan &lt;&gt; Nan</code>  it turns out that you cannot memoize them and that makes the compiler diverge. I solved that issue in v0.1 by making every compile time Nan a type error. It still causes the compiler to diverge in v0.09.</p>",
        "id": 178030033,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1570959262
    },
    {
        "content": "<blockquote>\n<p>Yeah, but I have to write a short program here. I mean sure, I see that there is no chance of it being wrong, but I might write a larger program in the future where this will be an issue.</p>\n</blockquote>\n<p>What, concretely, do you envision as causing a problem?</p>",
        "id": 178030058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570959336
    },
    {
        "content": "<blockquote>\n<p>I guess I'll have to define my own safe division then. Every time I will use it Lean should be able to prove automatically that the division is valid anyway.</p>\n</blockquote>\n<p>This is exactly how I used to feel, and if you want to try this way of doing it then you will probably learn the way I learnt that it's much more inconvenient. The big question you have is simply: what will the domain and the codomain of your function be?</p>",
        "id": 178030060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570959343
    },
    {
        "content": "<p>There is no good answer to this domain/codomain question, as far as I can see.</p>",
        "id": 178030108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570959375
    },
    {
        "content": "<blockquote>\n<p>I guess I'll have to define my own safe division then. Every time I will use it Lean should be able to prove automatically that the division is valid anyway.</p>\n</blockquote>\n<p>It won't be automatic, and you will start to hate life if you try to use it for too long</p>",
        "id": 178030121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570959404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> </p>\n<div class=\"codehilite\"><pre><span></span>import data.rat\nimport data.vector\n\ndef E {n} (l : vector rat (n+1)) : rat := list.foldl (+) 0 l.val / (n+1)\n</pre></div>\n\n\n<p>Here is what I am doing now. This just calculates the mean of a vector. If I mess up and write <code>n</code> rather than <code>n+1</code>, it would have been erroneous on empty vectors.</p>",
        "id": 178030140,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1570959458
    },
    {
        "content": "<p>I used to be very upset about this convention. I am over it now because I simply remember that when I see <code>/</code> in Lean it is not mathemtician's division, it is simply another function with a bad name.</p>",
        "id": 178030143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570959464
    },
    {
        "content": "<p>This is only the weakest kind of safety that you achieve. The real safety comes from proving theorems about your definition, and you will notice immediately if you have an off by one error</p>",
        "id": 178030208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570959525
    },
    {
        "content": "<p>This function <code>E</code> above will be hard to work with because you have built in your own off-by-one error-possibility in its definition. I would definitely recommend you change n+1 to n</p>",
        "id": 178030226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570959557
    },
    {
        "content": "<p>I have been burnt by this several times. You always think it's a good idea, and then when you're writing code you're just \"crap crap crap, I have this n and I know it's non-zero but I now need to feed n-1 into this function and now I have to deal with natural number subtraction which is a pain because 2-3 isn't -1 it's 0\"</p>",
        "id": 178030288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570959626
    },
    {
        "content": "<p>and <code>n-1+1</code> isn't definitionally equal to <code>n</code>, so <code>l</code> isn't even in the same type, so you need a cast, so now addition of vectors is borked...</p>",
        "id": 178030326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570959703
    },
    {
        "content": "<p>With type theory you have to think about things in a slightly different way. If you define E with n's instead of n+1's then you, as someone new to this area, is thinking \"oh goodness this will be horrible if n=0\". But it's just like division. You're defining a function and you know you'll only be running it on positive integers, but that's fine, define it for all naturals, let it return junk for n=0, but the theorems will come out much nicer if you define it like that, and like division it doesn't matter that it's defined on a larger domain than you need.</p>",
        "id": 178030378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570959735
    },
    {
        "content": "<p>This point of view pervades mathematics in Lean. We even defined a sheaf on an open subset U of X to just be a sheaf on X; this is a more complex example but the upshot is that we had a vast amount of extra data which was just meaningless but which was being ignored.</p>",
        "id": 178030419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570959819
    },
    {
        "content": "<p>Actually that post by hillel wayne is a good one to read for understanding this kind of approach</p>",
        "id": 178030440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570959842
    },
    {
        "content": "<p>The aim is to get crisp clear theorems with no random +1's in. This turns out, from experience, to be a more efficient way to proceed than having functions which take n as input and return something of size n+1</p>",
        "id": 178030491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570959888
    },
    {
        "content": "<p>I found the replies here interesting.</p>\n<div class=\"codehilite\"><pre><span></span>def div (a : rat) (b : rat) {_ : 0 &lt; b} := a / b\ndef E {n} (l : vector rat (n+1)) : rat := div (list.foldl (+) 0 l.val) (n+1)\n</pre></div>\n\n\n<p>Since it seems that lean cannot automatically synthesize that <code>0 &lt; n+1</code> here in order to pass it to <code>div</code>, I'll go with what you suggest. I've been hoping that it would, but no way would I produce the proofs by hand for every single division. That settles it for me.</p>",
        "id": 178030975,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1570960454
    },
    {
        "content": "<p>There are tricks you can do to make this work in some cases (in particular, you would want that third argument in square brackets), but that needs additional setup as well, to make a typeclass for nonzeroness and some instances</p>",
        "id": 178031296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570960877
    },
    {
        "content": "<p>this is perhaps a bit more general, but my experience from doing a bit of program verification with lean is that there are essentially two ways of doing this: </p>\n<p>you can either carry around an invariant everywhere you go or use seperate hypotheses.<br>\nfor the list example, you can either use vectors that are parameterized by some <code>n</code>, or pass in a proof that the list you're using has the right length. the div example looks similar.</p>\n<p>on paper, algorithms are usually proven correct using the invariant approach, but when working with a theorem prover, maintaining the invariant is a lot more effort than on paper, and the approach with separate hypotheses is usually more comfortable in my experience.</p>\n<p>that being said, i do believe that the invariant approach can be useful, in particular when the invariant is needed for many different parts of the function you're trying to prove things for or when the invariant is very easy to maintain. if it is only needed rarely, passing in a separate hypothesis seems to be more comfortable.</p>",
        "id": 178034450,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1570966139
    },
    {
        "content": "<p>for another example, you can use finsets and maintain the nodup invariant by using finset functions (and then when using <code>map</code> and the like prove that <code>f</code> is an injection to maintain the invariant), or you can use multisets and just prove nodup when you actually need it in a proof. i've found both useful in different cases.</p>",
        "id": 178034578,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1570966397
    },
    {
        "content": "<p>Hey gang.<br>\nWhen I'm proving a theorem,like </p>\n<div class=\"codehilite\"><pre><span></span>  include h₁ h₂\n  theorem foo : x = z :=\n  begin\n    rw [h₁, h₂]\n  end\n  omit h₁ h₂\n</pre></div>\n\n\n<p>I really like taht in VSCode I get the tactic goal to show me example what is next in the proof.</p>\n<p>However, When I try to prove other theorems, the goal state only shows the current error. <br>\nAm I just messing up the examples?<br>\nAm I supposed to be able to view the current goal state like the Natural Number Game in the panel?<br>\nHow Can I get that in VScode?</p>\n<p>Thanks!</p>",
        "id": 180289311,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1573262616
    },
    {
        "content": "<p>you need to put a comma</p>",
        "id": 180290824,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1573264774
    },
    {
        "content": "<p>like so:</p>\n<div class=\"codehilite\"><pre><span></span>begin\n    rw [h₁, h₂], -- now put your cursor after the trailing comma!\n end\n</pre></div>",
        "id": 180295552,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1573273016
    },
    {
        "content": "<p>Yes the boxes on the top right and bottom right of the natural number game are just the outputs of the two \"Lean messages\" options in VS Code that you can get by clicking on the weird symbols which look like piles of books</p>",
        "id": 180300832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573284123
    }
]