[
    {
        "content": "<p>Hello, I'd like to be able to reduce proofs in Lean to SAT. In order to do this I want to understand what the pieces of proofs are and how they fit together.</p>\n<p>So far what I have is that given a <code>L : list name</code> of lemma names which we can use in a proof, we can get a <code>list expr</code> of corresponding <code>expr</code>s with types which look like <code> Π (a₁:α₁) ... (aₙ:αₙ), P(a₁,...,aₙ)</code>. From here we can use <code>open_pis</code> and <code>open_pis_metas</code> from <code>tactic/binder_matching.lean</code> to get a pair <code>([?m_1,...,?m_n], e)</code> where the <code>?m_k</code> are metavariables corresponding to the  Π binders and <code>e</code> is the remaining <code>expr</code>. </p>\n<p>For each metavariable in <code>[?m_1,...,?m_n]</code> which is of type <code>Prop</code> we can do a similar thing as above to get <code>([h_1,...,h_n], ?m_k')</code>. And for each of the <code>h_i</code> which are of type <code>Prop</code> we need to do the whole thing again, i.e. we need to treat it as if it's another lemma we can use, but with the caveat the we can only use this lemma in the scope of the metavariable from where it came.  </p>\n<p>If we index each lemma with a <code>ℕ</code> and each metavariable of a lemma with another <code>ℕ</code>, then we can construct a function <code>D : ℕ → ℕ → list ℕ</code> which takes the index of a lemma <code>i</code> and the index of one of its metavariables <code>j</code> and returns the list of indices of lemmas <code>k</code> such that the  remaining expr <code>e</code> of lemma <code>k</code> unifies with the expr <code>?m_j</code> of lemma <code>i</code>.</p>\n<p>Then a proof would be like a function <code>P : ℕ → ℕ → ℕ</code> where we apply lemma <code>P(i,j)</code> at the jth goal after applying lemma <code>i</code>,  in such a way that there are no stray metavariables at the end. I'm hoping we can ignore all the non-propositional goals because Lean fills them in itself. We also need someway of keeping track of which lemmas are in scope, i.e. when we can use lemma <code>P(i,j)</code>. And which lemmas can be applied to the original goal.</p>\n<p>Is this correct so far? And if so, could all proofs using only the lemmas in <code>L</code> be found this way? Or am I missing something?</p>",
        "id": 215176184,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1604123443
    },
    {
        "content": "<p>what exactly are you trying to do - are you trying to fill in lean proofs using a sat solver? that seems pretty neat, I had had the impression it was intractable, but I would love to be wrong</p>",
        "id": 215362499,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604343566
    },
    {
        "content": "<p>Isn't this exactly what a hammer tries to do? I think Gabriel had one working in a hacked Lean 3 but it was a highly nontrivial endeavour.</p>",
        "id": 215362588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604343603
    },
    {
        "content": "<p>sounds pretty neat. which gabriel - ebner? (looking at the user list.)</p>",
        "id": 215364544,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604344474
    },
    {
        "content": "<p>He spoke about it at the Pittsburgh meeting in Jan, it'll be on YT somewhere</p>",
        "id": 215364896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604344608
    },
    {
        "content": "<p>I think we have only one Gabriel, those people are not Kevins.</p>",
        "id": 215365107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604344691
    },
    {
        "content": "<p>Or Patricks!</p>",
        "id": 215365130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604344705
    },
    {
        "content": "<p><a href=\"https://www.nytimes.com/2015/03/03/upshot/fewer-women-run-big-companies-than-men-named-john.html\">https://www.nytimes.com/2015/03/03/upshot/fewer-women-run-big-companies-than-men-named-john.html</a></p>",
        "id": 215374930,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604349353
    },
    {
        "content": "<p>I saw this article a while ago and it made me sad :-(</p>",
        "id": 215375900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604349794
    },
    {
        "content": "<p>But we have very few Johns!</p>",
        "id": 215403803,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604367889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Oh! I just realized, my nemesis H. is in your department, isn't he?</p>",
        "id": 215404080,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604368096
    },
    {
        "content": "<p>Funny, I never made the connection!  He retired just before I arrived so I don't really know him.</p>",
        "id": 215404267,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604368246
    },
    {
        "content": "<p>Did you ever meet him (or pass on a misdirected email)?</p>",
        "id": 215404396,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604368356
    },
    {
        "content": "<p>We met at a conference a few years ago, it was just as confusing as you'd think.</p>",
        "id": 215404410,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604368364
    },
    {
        "content": "<p>I saw Robert Lewis was scheduled to give a talk about something, like, a step away from things I had been thinking about recently. And I got scared I had submitted an abstract in my sleep or something</p>",
        "id": 215404543,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604368465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> has perhaps the worst case of this problem.</p>",
        "id": 215404547,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604368471
    },
    {
        "content": "<p><a href=\"http://phdcomics.com/comics/archive.php?comicid=1890\">http://phdcomics.com/comics/archive.php?comicid=1890</a></p>",
        "id": 215406951,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604370593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113489-new-members/topic/The.20pieces.20of.20proofs/near/215362499\">said</a>:</p>\n<blockquote>\n<p>what exactly are you trying to do - are you trying to fill in lean proofs using a sat solver? that seems pretty neat, I had had the impression it was intractable, but I would love to be wrong</p>\n</blockquote>\n<p>Yeah, the dream is to give some tactic a number <code>n</code> and and have it reduce the problem of finding a proof which uses <code>n</code> or less applies to SAT. I think it's theoretically possible by Cook's theorem. I wanted to make sure what I have is correct before devoting more brain energy to the rest of the problem, but I don't think it's a Zulip friendly question.</p>",
        "id": 215539698,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1604463530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/The.20pieces.20of.20proofs/near/215364896\">said</a>:</p>\n<blockquote>\n<p>He spoke about it at the Pittsburgh meeting in Jan, it'll be on YT somewhere</p>\n</blockquote>\n<p>Is this the one?  <br>\nGabriel Ebner: Integration of General-Purpose Automated Theorem Provers in Lean<br>\n<a href=\"https://www.youtube.com/watch?v=WydyJJYKyTs\">https://www.youtube.com/watch?v=WydyJJYKyTs</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"WydyJJYKyTs\" href=\"https://www.youtube.com/watch?v=WydyJJYKyTs\"><img src=\"https://i.ytimg.com/vi/WydyJJYKyTs/default.jpg\"></a></div>",
        "id": 215539877,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1604463728
    },
    {
        "content": "<p>I think the TLDR on this sort of approach is, it's possible, people generally use automated theorem provers (ATPs) rather than SAT solvers, it's kind of one layer of abstraction closer</p>",
        "id": 215633251,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604519780
    },
    {
        "content": "<p>it's more common in e.g. Isabelle with \"sledgehammer\", see <a href=\"https://people.mpi-inf.mpg.de/~jblanche/iwil2010-sledgehammer.pdf\">https://people.mpi-inf.mpg.de/~jblanche/iwil2010-sledgehammer.pdf</a> for example. In Lean we don't have an approach like this working right now, basically IIUC the mechanisms for communicating with external processes in Lean 3 are too janky and hopefully Lean 4 is better there</p>",
        "id": 215633365,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604519850
    },
    {
        "content": "<p>Cool, Thanks. I'll check out the link. How good is sledgehammer in Isabelle? Is it used a lot? And is it quick more or less?</p>",
        "id": 215647219,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1604527490
    },
    {
        "content": "<p>I don't know, I have only read papers about it, not used it directly</p>",
        "id": 215647741,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604527822
    },
    {
        "content": "<p>It is used quite a lot by some authors. <span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> is probably best able to speak on the topic since he is one of the authors of sledgehammer and also uses it in his proofs IIRC</p>",
        "id": 215656512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604534331
    },
    {
        "content": "<p>\"quick more or less\" means 5-30 seconds</p>",
        "id": 215656526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604534354
    },
    {
        "content": "<p>We often use <code>tidy</code> in the same way an isabelle user uses <code>sledgehammer</code>. It's good when you don't really want to think about the goal and value the computer's time less than your own</p>",
        "id": 215656806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604534523
    },
    {
        "content": "<p>I pretty much always value the computer's time less than my own</p>",
        "id": 215657272,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604534879
    },
    {
        "content": "<p>in that case you will like <code>sledgehammer</code></p>",
        "id": 215657390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604534983
    },
    {
        "content": "<p>a \"prove my theorem for me\" button is very attractive</p>",
        "id": 215657453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604535017
    },
    {
        "content": "<p>maybe if it's fast enough and integrated nicely with VSCode, there won't even have to be a button ;-)</p>",
        "id": 215657627,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604535192
    },
    {
        "content": "<p>it's not</p>",
        "id": 215657660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604535231
    },
    {
        "content": "<p>however you might conceivably be able to set it up to run asynchronously in the background</p>",
        "id": 215657724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604535269
    },
    {
        "content": "<p>if there were a sledgehammer-like tool for lean, i would investigate getting async stuff to work, but it seems like gabriel's work is pending on lean 4. it might even make sense to do the heavy lifting on a server - latency of a server might be ok given the time scale is not so fast</p>",
        "id": 215658030,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604535565
    },
    {
        "content": "<p>It's not really worth it to send to a server, that's extra latency for little gain, unless you have a really bad computer</p>",
        "id": 215658261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604535752
    },
    {
        "content": "<p>the standard framework for hammers already involves translating things out of the lean process, and as gabriel mentioned that's the bottleneck</p>",
        "id": 215658314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604535827
    },
    {
        "content": "<p>I'd assume you run that \"out of band\", is the idea?</p>",
        "id": 215658365,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604535845
    },
    {
        "content": "<p>No need to synchronously wait for your sledgehammer to hit, just put some problems somewhere and let a server spend some time finding the right proof term and come back later and fill them in</p>",
        "id": 215658379,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604535870
    },
    {
        "content": "<p>sure, but that's already happening with the usual model</p>",
        "id": 215658403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604535895
    },
    {
        "content": "<p>to me the value of the server is more like ease of installation. like if you have some c++ or rust binary, and theres a bunch of people using lean, but they dont have a consistent environment for compiling c++ themselves, or they aren't going to use your branch or update it frequently. if you run it as a service then the only thing you need to get into their local environment is some socket + communication stuff. but it's all kind of a moot point since there is no existing hammer</p>",
        "id": 215658529,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604536024
    },
    {
        "content": "<p>also, at least in my experience, lean frequently pegs the CPU. if processing is remote you could do something like, the server looks for a proof. if it doesn't find one, fine. if it does, then there's a little blue squiggle or other UI icon that appears at the function level that provides an affordance to auto expand the proof. that way people could start using it without explicitly being too aware of how it works. but again all this theory is moot without working hammer code</p>",
        "id": 215658675,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604536151
    },
    {
        "content": "<p>Sledgehammer in Isabelle does support remote provers, I think via TPTP. No clue how commonly that's used compared to local installs.</p>",
        "id": 215659754,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604537153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/The.20pieces.20of.20proofs/near/215658403\">said</a>:</p>\n<blockquote>\n<p>sure, but that's already happening with the usual model</p>\n</blockquote>\n<p>But if I update my file, then <code>tidy</code> starts running again, right? It doesn't report back to me 10s later, saying. \"Ooh, btw, whatever shape your proof has 10s ago, I could finish it from there.\"</p>",
        "id": 215673263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604554993
    },
    {
        "content": "<p>I mean the isabelle sledgehammer model</p>",
        "id": 215674593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604556962
    },
    {
        "content": "<p>lean doesn't support this very well</p>",
        "id": 215674638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604556974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209436\">Lucas Allen</span> <a href=\"#narrow/stream/113489-new-members/topic/The.20pieces.20of.20proofs/near/215647219\">said</a>:</p>\n<blockquote>\n<p>Cool, Thanks. I'll check out the link. How good is sledgehammer in Isabelle? Is it used a lot? And is it quick more or less?</p>\n</blockquote>\n<p>I have some logs from myself and other users showing that Sledgehammer is called up to 100 times a day and succeeds in about 30-40% of cases in the wild. We've done a bigger evaluation in one of my papers (<a href=\"https://www.cs.vu.nl/~jbe248/mash2.pdf\">https://www.cs.vu.nl/~jbe248/mash2.pdf</a>, see Section 7) that somewhat corroborated these results. Sledgehammer runs asynchronously. By default, most provers are run locally, which is faster than using a server. Often it finds a proof within 1 second -- there's very little overhead. It runs asynchronously, but many users wait 30 second (the default timeout) because they can't think while it's running.</p>",
        "id": 215733536,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1604592526
    },
    {
        "content": "<p>Some users (e.g. Johannes Hölzl) don't use it much, but others use it all the time. It's perhaps less useful for mathematicians than computer scientists. Hard to tell.</p>",
        "id": 215733631,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1604592555
    },
    {
        "content": "<p>Here's a message from Manuel Eberl, who's mostly a math formalizer (reproduced with permission):</p>\n<blockquote>\n<p>Just fyi, I won the Proof Ground 2020 yesterday, this time without Peter. I was the only participant to solve all the problems and two of them were /very/ last minute. This time, I sledgehammered like crazy, using it both as an oracle to see whether I'm going in the right direction and to simply save time on proofs.</p>\n<p>One particular subproblem (afternoon problem 2, task 2) was completely solvable by \"induction, auto, sledgehammer\" and I did that without even taking any time to understand what the theorem statement actually said. I later tried to prove it by hand and couldn't really figure out how to do it in a simple way, so I left the crucial step to sledgehammer even for the cleaned-up version.</p>\n<p>So how's that for an endorsement? ;)</p>\n<p>Manuel</p>\n</blockquote>",
        "id": 215733729,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1604592597
    },
    {
        "content": "<p>At the same time, Sledgehammer is very weak on HO goals -- e.g. it will almost always fail if the goal talks about a set comprehension. We're working on this as part of my project Matryoshka.</p>",
        "id": 215733965,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1604592639
    },
    {
        "content": "<p>We ship binaries for all the main ATPs (E, SPASS, Vampire, Z3, CVC4, ...) with Isabelle for all three platforms. Users don't have to compile anything. Sledgehammer works out of the box. It also works when I'm sitting in the metro (where I used to do lots of proving during my PhD, on my way to work).</p>",
        "id": 215734248,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1604592712
    },
    {
        "content": "<p>One of the nice things about running provers locally is that you can perform time slicing: run them repeatedly for time slices of, say, 3 s, with different options, axioms, encodings, etc. This really boosts the success rate but is hardly practicable with a remote server.</p>",
        "id": 215734545,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1604592812
    },
    {
        "content": "<p>But on a server with (say) 32 cores, you could run all those slices in parallel...</p>",
        "id": 215734690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604592860
    },
    {
        "content": "<p>I have my own server in my basement. I run lean on it all the time, because my laptop (well, let's not talk about my laptop <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span>)</p>",
        "id": 215734757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604592893
    },
    {
        "content": "<p>Do you use the server remotely (i.e., from the laptop) or directly?</p>",
        "id": 215735086,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1604593018
    },
    {
        "content": "<p>I go to the basement about once per month (-;</p>",
        "id": 215735327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604593095
    },
    {
        "content": "<p>So I work from my laptop, yes</p>",
        "id": 215735342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604593103
    },
    {
        "content": "<p>I wasn't aware that there was a working setup for this. Is VScode running on the server or the laptop?</p>",
        "id": 215735506,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1604593153
    },
    {
        "content": "<p>VScode runs on the server, using X forwarding</p>",
        "id": 215735574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604593182
    },
    {
        "content": "<p>Since VScode uses electron, it should in principle be possible (and maybe not even hard) to decouple the editor from the lean server. But I haven't bothered about this.</p>",
        "id": 215735719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604593230
    },
    {
        "content": "<p>ok. So, no fancy interaction between vscode on the laptop and a Lean server running remotely. Which would be nice but indeed, as you point out, not needed at all for your use case.</p>",
        "id": 215735866,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1604593298
    },
    {
        "content": "<p>Basically, the server is just a cheap and noisy replacement for a high-end desktop</p>",
        "id": 215736050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604593362
    },
    {
        "content": "<p>(If you boot it, it sounds like an airplane taking off <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> )</p>",
        "id": 215736090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604593378
    },
    {
        "content": "<p>I've used VSCode Remote SSH with DigitalOcean droplets, and I use VSCode Remote WSL as well</p>",
        "id": 215741431,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604595487
    },
    {
        "content": "<p>So the lean server is running on a droplet somewhere, or on my WSL VM, but the VSCode is on my plain old windows</p>",
        "id": 215741498,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604595516
    },
    {
        "content": "<p>And the vscode-lean extension has been fixed so that widgets etc work</p>",
        "id": 215741545,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604595536
    },
    {
        "content": "<p>I just heard about this:<br>\n<a href=\"https://github.com/cdr/code-server\">https://github.com/cdr/code-server</a></p>",
        "id": 215741550,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604595539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/The.20pieces.20of.20proofs/near/215741498\">said</a>:</p>\n<blockquote>\n<p>So the lean server is running on a droplet somewhere, or on my WSL VM, but the VSCode is on my plain old windows</p>\n</blockquote>\n<p>How did you configure VScode so that it talks to the remote lean server?</p>",
        "id": 215743493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604596282
    },
    {
        "content": "<p>There is a VSCode running on the remote server too, and it handles communication between the two different VSCodes</p>",
        "id": 215743732,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604596386
    },
    {
        "content": "<p>but a vscode server, not the gui, of course</p>",
        "id": 215743759,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604596400
    },
    {
        "content": "<p>Is that what you meant by your X forwarding example?</p>",
        "id": 215743857,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604596445
    },
    {
        "content": "<p>My workflow doesn't look any different when I open VSCode on my home machine and point it to WSL or a droplet or anything, it sees the files on that machine. But the GUI and VSCode setup is shared across the different points accessed.</p>",
        "id": 215744019,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604596522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/The.20pieces.20of.20proofs/near/215743857\">said</a>:</p>\n<blockquote>\n<p>Is that what you meant by your X forwarding example?</p>\n</blockquote>\n<p>Nope, with X forwarding I mean the plain old <code>ssh -X</code>, that allows you to run any gui on the remote, and have it display locally.</p>",
        "id": 215744881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604596913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/The.20pieces.20of.20proofs/near/215743759\">said</a>:</p>\n<blockquote>\n<p>but a vscode server, not the gui, of course</p>\n</blockquote>\n<p>Is that the <code>code-server</code> that Adam mention above?</p>",
        "id": 215744981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604596941
    },
    {
        "content": "<p>Both of those sound less ideal than just talking to the lean server over SSH</p>",
        "id": 215748999,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604598505
    },
    {
        "content": "<p>As far as I've seen lean server just expects input on stdin (and ssh forwards stdin)</p>",
        "id": 215749046,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604598530
    },
    {
        "content": "<p>So if VSCode supports you telling it what command line to use to run lean, just changing that to be <code>ssh remoteserver lean --server whatever</code> should likely work from your local VSCode</p>",
        "id": 215749108,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604598561
    },
    {
        "content": "<p>(Probably I should try that before saying it, but yeah that should work...)</p>",
        "id": 215749178,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604598588
    },
    {
        "content": "<p>No, it's not the <code>code-server</code>, it's just the Remote-SSH functionality of VSCode. Julian's lean server forwarding is probably the best option (might be fastest in terms of updating views), but requires manual configuration.</p>",
        "id": 215750157,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604599005
    },
    {
        "content": "<p>Will the following in <code>.bashrc</code>(or <code>.profile</code>) work?</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">alias</span> <span class=\"nv\">lean</span><span class=\"o\">=</span><span class=\"s2\">\"ssh remoteserver lean --server\"</span>\n</code></pre></div>",
        "id": 215750236,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604599052
    },
    {
        "content": "<p>Probably not (sorry I don't have a VSCode setup I can try this on handy otherwise I'd just tell you what to do)</p>",
        "id": 215750346,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604599084
    },
    {
        "content": "<p>but uh, you can't use an alias because it'll try to run that whole thing as one argument</p>",
        "id": 215750386,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604599099
    },
    {
        "content": "<p>and also, you probably can't put that in your bashrc because VSCode probably doesn't run lean in a login / interactive shell</p>",
        "id": 215750418,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604599114
    },
    {
        "content": "<p>It'd probably be a config set in VSCode: <a href=\"/user_uploads/3121/6yKx-v0OQpkW09P64XgL6QNr/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/6yKx-v0OQpkW09P64XgL6QNr/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/6yKx-v0OQpkW09P64XgL6QNr/image.png\"></a></div>",
        "id": 215750420,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604599114
    },
    {
        "content": "<p>Ok. I guess you can also make a small shell script</p>",
        "id": 215750433,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604599122
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 215750445,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604599127
    },
    {
        "content": "<p>But to first approximation, setting up SSH-Remote is the easiest, IMO.</p>",
        "id": 215750510,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604599160
    },
    {
        "content": "<p><em>nod</em></p>",
        "id": 215750536,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604599170
    },
    {
        "content": "<p>Yeah if you want to make it even nicer/well supported we add an envvar</p>",
        "id": 215750757,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604599247
    },
    {
        "content": "<p>E.g., the most underutilized docker feature that no one seems to know about is <code>DOCKER_HOST</code></p>",
        "id": 215750787,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604599257
    },
    {
        "content": "<p>which does this for docker, so if you set that to e.g. <code>DOCKER_HOST=ssh://server:whatever</code>, then when you run docker commands on localhost, they use dockerd on the remote host</p>",
        "id": 215750849,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604599279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/The.20pieces.20of.20proofs/near/215750510\">said</a>:</p>\n<blockquote>\n<p>But to first approximation, setting up SSH-Remote is the easiest, IMO.</p>\n</blockquote>\n<p>Would you mind writing a 7-line howto guide that tells me which steps I need to take to do this?</p>",
        "id": 215754536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604600952
    },
    {
        "content": "<p>Ping <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> who told me about this code-server</p>",
        "id": 215755906,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604601585
    },
    {
        "content": "<p><a href=\"https://github.com/cdr/code-server/blob/v3.6.2/doc/guide.md\">https://github.com/cdr/code-server/blob/v3.6.2/doc/guide.md</a> this helpful?</p>",
        "id": 215756267,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1604601780
    },
    {
        "content": "<p>I think what <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> is suggesting is to pipe stdin/out via ssh so lean itself would run in the cloud (or Johan's basement), and vscode would run locally.</p>",
        "id": 215756571,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604601935
    },
    {
        "content": "<p>it's more and more common in industry nowadays to do the remote ssh thing, where your codebase lives remotely and you just ssh in. vscode supports it pretty well in general - <a href=\"https://code.visualstudio.com/docs/remote/ssh\">https://code.visualstudio.com/docs/remote/ssh</a></p>",
        "id": 215756831,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604602046
    },
    {
        "content": "<p>i can't speak to julian's strategy, maybe that ends up being simpler, but the remote ssh method will work for pretty much any programming language environment that you'd use vscode for</p>",
        "id": 215757056,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604602148
    },
    {
        "content": "<p>there's no real reason for Johan's desktop machine to be so noisy though ;-) i wonder if it's so old the inside is caked with dust and so the fan runs at max speed all the time</p>",
        "id": 215757206,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604602214
    },
    {
        "content": "<p>I wanted to runs things, eg Latex, Lean, etc.., on an iPad which hamstrings me further. Code-server was the only way in iPadOS I could find to make it happen (other than MS codespaces). With more control over the OS, I would probably go the ssh route.</p>",
        "id": 215757495,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1604602345
    },
    {
        "content": "<p>i see. yeah, it seems like <code>code-server</code> solves the problem of \"My local machine can't even run VSCode.\" If your local machine can run VSCode fine (ie its not an ipad) then probably a better solution is one of the others.</p>",
        "id": 215757771,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604602471
    },
    {
        "content": "<p>My local machine cannot ssh, run vs code, ...etc</p>",
        "id": 215757863,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1604602510
    },
    {
        "content": "<p>(But I can teach a class and write notes on it fairly well)</p>",
        "id": 215757941,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1604602558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I can likely put something together, will spend a bit of time getting something working. I can already get a POC working somewhat easily, if it helps, here's what I did quickly:</p>\n<p>I put this in a file called <code>~/.local/bin/lean-remote</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#!/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">env</span> <span class=\"n\">python3</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">shlex</span>\n<span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"n\">argv</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"s2\">\"ssh\"</span><span class=\"o\">,</span> <span class=\"s2\">\"Home.lan\"</span><span class=\"o\">,</span> <span class=\"s2\">\"--\"</span><span class=\"o\">,</span> <span class=\"s2\">\"/Users/Julian/.local/bin/lean\"</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"o\">[</span><span class=\"n\">shlex.quote</span><span class=\"o\">(</span><span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"n\">for</span> <span class=\"n\">arg</span> <span class=\"k\">in</span> <span class=\"n\">sys.argv</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:]]</span>\n<span class=\"n\">os.execvp</span><span class=\"o\">(</span><span class=\"n\">argv</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">argv</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and this similar contents in a file called <code>~/.local/bin/leanpkg-remote</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#!/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">env</span> <span class=\"n\">python3</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">shlex</span>\n<span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"n\">argv</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"s2\">\"ssh\"</span><span class=\"o\">,</span> <span class=\"s2\">\"Home.lan\"</span><span class=\"o\">,</span> <span class=\"s2\">\"--\"</span><span class=\"o\">,</span> <span class=\"s2\">\"/Users/Julian/.local/bin/leanpkg\"</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"o\">[</span><span class=\"n\">shlex.quote</span><span class=\"o\">(</span><span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"n\">for</span> <span class=\"n\">arg</span> <span class=\"k\">in</span> <span class=\"n\">sys.argv</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:]]</span>\n<span class=\"n\">os.execvp</span><span class=\"o\">(</span><span class=\"n\">argv</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">argv</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(Obviously modify with your own server's hostname and your own server's path to Lean). Then <code>chmod +x ~/.local/bin/lean{,pkg}-remote</code>.</p>\n<p>Then I changed the settings <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> screenshotted to say <code>lean-remote</code> and <code>leanpkg-remote</code> in VSCode.</p>\n<p>It works as-is already in that the server comes up, but probably <code>leanpkg.path</code> is now confused because it doesn't resolve anything (similar to when it can't find mathlib locally), so I'll have to investigate that. For now though I have to jump back to meetings, will look later.</p>",
        "id": 215760620,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604603778
    },
    {
        "content": "<p>(The <code>shlex.quote</code> nastiness is because of <code>lean --server</code> getting passed <code>*undefined*</code> by default, which because SSH always runs a shell, you have to escape, which is annoying. That's what, telling lean server what path to assume we're talking about? If so, probably a better solution is just passing a different path there that doesn't have shell-escape-needing chars.)</p>",
        "id": 215760716,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604603844
    },
    {
        "content": "<p>(Not sure if you even were asking about \"my way\" or instructions with the other way, but yeah, hopefully something there helps or if not that someone else chimes in.)</p>",
        "id": 215760821,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604603892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> and yeah what's there obviously works well, it's an \"old\" / \"trusted\" technique, but personally I like it better if you just have to shuttle files back and forth... if you have to also communicate with a process, I find it a bit clunky personally, but definitely if it works for folks who am I to say.</p>",
        "id": 215760885,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604603939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> thanks! I'm now looking into <code>code-server</code> first. But will definitely also keep this in mind.</p>",
        "id": 215761398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604604189
    },
    {
        "content": "<p>Thanks Jasmin for the explanation. Sledgehammer looks cool, but I wonder, instead of bringing in sledgehammer to lean, would it be easier to write an ATP in Lean? Or are the ATP's to large and complex?</p>",
        "id": 215906997,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1604698532
    },
    {
        "content": "<p>the ATP's aren't written in Isabelle either - they're written in some fast language like c++. lean is another step again slower than languages like python, which are themselves a lot slower than c++ for cpu-bound things like ATPs, so it's just impractical to build a whole atp in lean</p>",
        "id": 215913224,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604702597
    },
    {
        "content": "<p>sledgehammer is basically a translation layer between the interactive theorem prover ie lean or similar system, and the ATP</p>",
        "id": 215913322,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604702652
    },
    {
        "content": "<p>Actually, isabelle has an ATP, and it's a big player in practical isabelle usage: <code>auto</code></p>",
        "id": 215915753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604704298
    },
    {
        "content": "<p>ATPs are as large and complex as you want them to be</p>",
        "id": 215915822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604704328
    },
    {
        "content": "<p>the general problem is undecidable so it's just a question of how many bells and whistles you want to build into it</p>",
        "id": 215915855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604704362
    },
    {
        "content": "<p>Isabelle is implemented in Isabelle/ML, which is a compiled functional programming language</p>",
        "id": 215915928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604704416
    },
    {
        "content": "<p>Most isabelle tactics are written in the ML part</p>",
        "id": 215916043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604704487
    },
    {
        "content": "<p>there is some trick for being able to evaluate ML blocks in an isabelle file, but I'm not exactly sure how it is accomplished (and I say this despite having spent several hours diving into the code that does this. The architecture is very complex and mostly undocumented)</p>",
        "id": 215916165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604704574
    },
    {
        "content": "<p>I think it amounts to runtime interpretation like the lean VM but don't quote me on that</p>",
        "id": 215916212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604704624
    },
    {
        "content": "<p>i thought <code>auto</code> was considered a tactic, like <code>library_search</code> or <code>finish</code>, rather than an ATP</p>",
        "id": 215918451,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604706551
    },
    {
        "content": "<p>it is a tactic, which is to say it's implemented inside isabelle, but it is an ATP</p>",
        "id": 215926590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604715445
    },
    {
        "content": "<p><code>finish</code> is an ATP written in lean</p>",
        "id": 215926643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604715508
    },
    {
        "content": "<p>if your definition of ATP requires that it not be implemented in the tactic framework then of course there aren't going to be any</p>",
        "id": 215926657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604715543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209436\">Lucas Allen</span> <a href=\"#narrow/stream/113489-new-members/topic/The.20pieces.20of.20proofs/near/215906997\">said</a>:</p>\n<blockquote>\n<p>Thanks Jasmin for the explanation. Sledgehammer looks cool, but I wonder, instead of bringing in sledgehammer to lean, would it be easier to write an ATP in Lean? Or are the ATP's to large and complex?</p>\n</blockquote>\n<p><code>super</code> by <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> is an ATP in Lean. Unfortunately the metaprogramming framework is way too slow in Lean 3.</p>",
        "id": 215948895,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1604745391
    },
    {
        "content": "<p>And ATPs are large and complex. The Sledgehammer architecture is the simplest way to benefit from all of that.</p>",
        "id": 215948905,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1604745426
    },
    {
        "content": "<p>It does rely on an ATP for proof reconstruction, called <code>metis</code>.</p>",
        "id": 215948912,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1604745449
    },
    {
        "content": "<p>(I wouldn't call <code>auto</code> an ATP although that's just terminology. It's really <code>simp</code> on steroids.)</p>",
        "id": 215948925,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1604745483
    },
    {
        "content": "<p>In a first approximation, <code>metis</code> = <code>super</code> but maybe 100 times faster.</p>",
        "id": 215948962,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1604745515
    },
    {
        "content": "<p>Most ATPs are designed around a logical calculus optimized for proof search,  don't depend on user hints,  and are complete. Again, it's not black and white, and I'm a big fan of the notion that ITP and ATP are a gradient -- but I've never heard anybody call <code>auto</code> or <code>simp</code> an ATP before. ;)</p>",
        "id": 215949037,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1604745673
    },
    {
        "content": "<p>When we were in NL last year I remarked to Floris that <code>rfl</code> was a \"high-powered AI\" and he said he'd never thought of it like that before.</p>",
        "id": 215953429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604753247
    },
    {
        "content": "<p>But I give talks in schools where I prove that 2+2=4 with a six line sequence of definitional rewrites (2+2=2+S(1)=S(2+1)=...) and then I show that the computer, despite having only just seen the definition of 2 and + (I define everything from first principles), can figure out the proof immediately.</p>",
        "id": 215953486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604753326
    },
    {
        "content": "<p>The other day, I tried to show the amazing power of <code>refl</code> on the example <code>5 + 5 = 25</code>. It failed. I came up with some excuses about the unpredictability of tactics and went on for another five minutes at least.</p>",
        "id": 215957063,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1604758921
    },
    {
        "content": "<p>That's the problem when don't teach in front of physical students. ;)</p>",
        "id": 215957112,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1604758962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> IIRC <code>auto</code> is a combination of <code>simp</code> and a tableau theorem prover, no?</p>",
        "id": 215963353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604767961
    },
    {
        "content": "<p>or maybe I'm confusing it with <code>blast</code></p>",
        "id": 215963367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604767983
    },
    {
        "content": "<p>My live <code>refl</code> fail story is the following. After one school talk I was talking to some students about internal storage of naturals, and I said that the Peano approach was of course very inefficient so nothing worked with big numbers. I demonstrated this by showing them that <code>example : 1000000000+1000000000=2000000000 := rfl</code> failed. But it succeeded, really quickly :D . I now use <code>example : 1000000000+2000000000=3000000000 := rfl</code>, which does indeed time out.</p>",
        "id": 215963919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604768726
    },
    {
        "content": "<p>@Mario: Yes, that's the steroids part.</p>",
        "id": 215970709,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1604779203
    }
]