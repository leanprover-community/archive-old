[
    {
        "content": "<p>In Lean3 mathlib, less than or equal to for a nat is defined as an inductive type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">lte</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">lte</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">lte</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">lte</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In Lean4 prelude, it is defined as a function returning a boolean (which is then mapped to a Prop by proposing an equality to true)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Nat.ble</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span><span class=\"o\">,</span>   <span class=\"n\">zero</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span><span class=\"o\">,</span>   <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">zero</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ble</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Nat.le</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ble</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>Is there any important differences between these two constructions? I tend to find the latter much more intuitive as a novice as I still haven't totally wrapped my head around what exactly is happening in the first one. I think it's creating an inductive family. Is there some other way of writing the inductive version that is more explicit about what's going on?</p>",
        "id": 238043691,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1620575112
    },
    {
        "content": "<p>I'm not sure why the different definition was chosen, but I can try to explain the lean3 one. The first constructor basically says <code>a ≤ a</code>, and the second one says <code>a ≤ b → a ≤ b + 1</code>.</p>",
        "id": 238045698,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620577434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243102\">Brandon Brown</span> <a href=\"#narrow/stream/113489-new-members/topic/Less.20than.20or.20equal.20for.20nat/near/238043691\">said</a>:</p>\n<blockquote>\n<p>Is there any important differences between these two constructions? I tend to find the latter much more intuitive as a novice as I still haven't totally wrapped my head around what exactly is happening in the first one. I think it's creating an inductive family. Is there some other way of writing the inductive version that is more explicit about what's going on?</p>\n</blockquote>\n<p>The inductive one lets you do induction on evidence (the hitchhikers guide calls it rule induction), so you can do <code>induction (h : a &lt;= b)</code>. In some cases inductive relations let you nicely model things that functional ones don't necessarily. They can be strange at first since they seem backwards. There's a big section in Software Foundations 1 where they do both a functional and relational evaluator for a basic programming language, and they discuss how the relational version can more conveniently model things like potentially infinite loops and nondeterminism. They follow it up with this sort of high-level overview of the idea:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">At</span> <span class=\"n\">this</span> <span class=\"n\">point</span> <span class=\"n\">you</span> <span class=\"n\">maybe</span> <span class=\"n\">wondering</span><span class=\"o\">:</span> <span class=\"n\">which</span> <span class=\"n\">style</span> <span class=\"n\">should</span> <span class=\"n\">I</span> <span class=\"n\">use</span> <span class=\"kd\">by</span> <span class=\"n\">default</span><span class=\"bp\">?</span> <span class=\"n\">In</span> <span class=\"n\">the</span> <span class=\"n\">examples</span> <span class=\"n\">we've</span> <span class=\"n\">just</span> <span class=\"n\">seen</span><span class=\"o\">,</span> <span class=\"n\">relational</span> <span class=\"n\">definitions</span> <span class=\"n\">turned</span> <span class=\"n\">out</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">more</span> <span class=\"n\">useful</span> <span class=\"n\">than</span> <span class=\"n\">functional</span> <span class=\"n\">ones.</span> <span class=\"n\">For</span> <span class=\"n\">situations</span> <span class=\"n\">like</span> <span class=\"n\">these</span><span class=\"o\">,</span> <span class=\"n\">where</span> <span class=\"n\">the</span> <span class=\"n\">thing</span> <span class=\"n\">being</span> <span class=\"n\">defined</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">easy</span> <span class=\"n\">to</span> <span class=\"n\">express</span> <span class=\"n\">as</span> <span class=\"n\">a</span> <span class=\"n\">function</span><span class=\"o\">,</span> <span class=\"n\">or</span> <span class=\"n\">indeed</span> <span class=\"n\">where</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">function</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">is</span> <span class=\"n\">no</span> <span class=\"n\">real</span> <span class=\"n\">choice.</span> <span class=\"n\">But</span> <span class=\"n\">what</span> <span class=\"n\">about</span> <span class=\"n\">when</span> <span class=\"n\">both</span> <span class=\"n\">styles</span> <span class=\"n\">are</span> <span class=\"n\">workable</span><span class=\"bp\">?</span>\n<span class=\"n\">One</span> <span class=\"n\">point</span> <span class=\"k\">in</span> <span class=\"n\">favor</span> <span class=\"n\">of</span> <span class=\"n\">relational</span> <span class=\"n\">definitions</span> <span class=\"n\">is</span> <span class=\"n\">that</span> <span class=\"n\">they</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">more</span> <span class=\"n\">elegant</span> <span class=\"n\">and</span> <span class=\"n\">easier</span> <span class=\"n\">to</span> <span class=\"n\">understand.</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">On</span> <span class=\"n\">the</span> <span class=\"n\">other</span> <span class=\"n\">hand</span><span class=\"o\">,</span> <span class=\"n\">functional</span> <span class=\"n\">definitions</span> <span class=\"n\">can</span> <span class=\"n\">often</span> <span class=\"n\">be</span> <span class=\"n\">more</span> <span class=\"n\">convenient</span><span class=\"o\">:</span>\n\n    <span class=\"n\">Functions</span> <span class=\"n\">are</span> <span class=\"kd\">by</span> <span class=\"kd\">definition</span> <span class=\"n\">deterministic</span> <span class=\"n\">and</span> <span class=\"n\">defined</span> <span class=\"n\">on</span> <span class=\"n\">all</span> <span class=\"n\">arguments</span><span class=\"bp\">;</span> <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"n\">relation</span> <span class=\"n\">we</span> <span class=\"k\">have</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">these</span> <span class=\"n\">properties</span> <span class=\"n\">explicitly</span> <span class=\"k\">if</span> <span class=\"n\">we</span> <span class=\"n\">need</span> <span class=\"n\">them.</span>\n    <span class=\"n\">With</span> <span class=\"n\">functions</span> <span class=\"n\">we</span> <span class=\"n\">can</span> <span class=\"n\">also</span> <span class=\"n\">take</span> <span class=\"n\">advantage</span> <span class=\"n\">of</span> <span class=\"n\">Coq's</span> <span class=\"n\">computation</span> <span class=\"n\">mechanism</span> <span class=\"n\">to</span> <span class=\"n\">simplify</span> <span class=\"n\">expressions</span> <span class=\"n\">during</span> <span class=\"n\">proofs.</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">Ultimately</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">choice</span> <span class=\"n\">often</span> <span class=\"n\">comes</span> <span class=\"n\">down</span> <span class=\"n\">to</span> <span class=\"n\">either</span> <span class=\"n\">the</span> <span class=\"n\">specifics</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">particular</span> <span class=\"n\">situation</span> <span class=\"n\">or</span> <span class=\"n\">simply</span> <span class=\"n\">a</span> <span class=\"n\">question</span> <span class=\"n\">of</span> <span class=\"n\">taste.</span> <span class=\"n\">Indeed</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">large</span> <span class=\"n\">Coq</span> <span class=\"n\">developments</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">common</span> <span class=\"n\">to</span> <span class=\"n\">see</span> <span class=\"n\">a</span> <span class=\"kd\">definition</span> <span class=\"n\">given</span> <span class=\"k\">in</span> <span class=\"n\">both</span> <span class=\"n\">functional</span> <span class=\"n\">and</span> <span class=\"n\">relational</span> <span class=\"n\">styles</span><span class=\"o\">,</span> <span class=\"n\">plus</span> <span class=\"n\">a</span> <span class=\"kd\">lemma</span> <span class=\"n\">stating</span> <span class=\"n\">that</span> <span class=\"n\">the</span> <span class=\"n\">two</span> <span class=\"n\">coincide</span><span class=\"o\">,</span> <span class=\"n\">allowing</span> <span class=\"n\">further</span> <span class=\"n\">proofs</span> <span class=\"n\">to</span> <span class=\"n\">switch</span> <span class=\"k\">from</span> <span class=\"n\">one</span> <span class=\"n\">point</span> <span class=\"n\">of</span> <span class=\"n\">view</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">other</span> <span class=\"n\">at</span> <span class=\"n\">will.</span>\n</code></pre></div>\n<p>The chapter on inductive predicates in the hitchhikers guide is Lean specific and gives a more condensed overview of the idea. There's also a section in SF where they discuss a version of reflection that lets sort of go back and forth between the two as needed, like <code>∀ (a b : nat), inductiveLE a b &lt;-&gt; (boolLe a b = tt)</code>.</p>",
        "id": 238048706,
        "sender_full_name": "Chris B",
        "timestamp": 1620580866
    },
    {
        "content": "<p>Thanks! Is there any reason why the mathlib version is not defined like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">lte2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lte2</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lte2</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">lte2</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">lte2</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lte2.step</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lte2.step</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lte2.step</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lte2.refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238050096,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1620582469
    },
    {
        "content": "<p>Because <code>a</code> is always passed unchanged as the first argument, so there's no point including it in the equation matching</p>",
        "id": 238050699,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620583171
    },
    {
        "content": "<p>You mean with both nats on the right of the colon? There may be some mathlib specific purpose, but I think the idea of separating params and indices with the colon such that users would only have to retype the indices was a convenience experiment in Lean 3 that doesn't seem to have been ported to Lean 4, possibly because people found it more confusing than helpful.</p>",
        "id": 238050705,
        "sender_full_name": "Chris B",
        "timestamp": 1620583178
    },
    {
        "content": "<p>This doesn't work in 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MyLe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">Refl</span> <span class=\"o\">:</span> <span class=\"n\">MyLe</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>But this does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MyLe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">Refl</span> <span class=\"o\">:</span> <span class=\"n\">MyLe</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>And it will yell at you if you give it something other than <code>a</code> in the first arg position.</p>",
        "id": 238050838,
        "sender_full_name": "Chris B",
        "timestamp": 1620583252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Do you know if there's an optional way to fix arguments in lean 4?</p>",
        "id": 238050947,
        "sender_full_name": "Chris B",
        "timestamp": 1620583360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"341753\">@Branden Brown</span> the two definitions satisfy the same theorems so as far as I'm concerned as a mathematician, the definitions are the same. Things that come for free with one definition need to be proved with the other one, but this is not hard. In the natural number game I use a third definition because my experience with mathematicians was that they found it the easiest to develop an API for, but mathematicians are not used to doing induction on things that aren't naturals</p>",
        "id": 238050951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620583365
    },
    {
        "content": "<p>The NNG definition is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≤</mo><mi>y</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi mathvariant=\"normal\">∃</mi><mi>z</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>=</mo><mi>x</mi><mo>+</mo><mi>z</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">x\\le y\\iff\\exists z, y=x+z.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7194400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\">.</span></span></span></span></p>",
        "id": 238051473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620583903
    }
]