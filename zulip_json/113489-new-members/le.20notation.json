[
    {
        "content": "<p>I have defined a preorder on a bunch of sets and I want to use the <code>≤</code> notation, but lean interprets this as the subset relation. Is there anyway I can temporarily \"prioritize\" the <code>≤</code> notation to use this new preorder?</p>",
        "id": 226644223,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1613561757
    },
    {
        "content": "<p>So the \"bunch of sets\" is actually \"all sets\"?</p>",
        "id": 226644310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613561790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/le.20notation/near/226644310\">said</a>:</p>\n<blockquote>\n<p>So the \"bunch of sets\" is actually \"all sets\"?</p>\n</blockquote>\n<p>Oh no, its a certain set of sets</p>",
        "id": 226644336,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1613561822
    },
    {
        "content": "<p>If you defined <code>bunch_of_sets := _</code> then Lean shouldn't be able to infer any subset relation whatsoever on it.</p>",
        "id": 226644351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613561843
    },
    {
        "content": "<p>Hmm, this is my definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">profinite_skeleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Profinite</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X.to_Top.α</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">I.finite</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U.nonempty</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃₀</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">∩</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X.to_Top.α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 226644470,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1613561927
    },
    {
        "content": "<p>So its actually of type <code>set (set (set (X.to_Top.α)))</code></p>",
        "id": 226644539,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1613561990
    },
    {
        "content": "<p>When I turned it into a category I had to be very specific to use the right le:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">profinite_limit_category</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"o\">(</span><span class=\"n\">profinite_skeleton</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">preorder.small_category</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"n\">_</span> <span class=\"n\">profinite_skeleton.partial_order</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(I had to learn this the hard way <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> )</p>",
        "id": 226644644,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1613562067
    },
    {
        "content": "<p>Well, you can make that a little bit easier by first declaring</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">profinite_limit_category</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">profinite_skeleton</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"n\">_</span> <span class=\"n\">profinite_skeleton.partial_order</span>\n</code></pre></div>",
        "id": 226644747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562138
    },
    {
        "content": "<p>huh, wait</p>",
        "id": 226644783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562167
    },
    {
        "content": "<p>Do you already have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">profinite_limit_category</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">profinite_skeleton</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 226644818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562194
    },
    {
        "content": "<p>The code suggests you do</p>",
        "id": 226644827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562202
    },
    {
        "content": "<p>yeah</p>",
        "id": 226644855,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1613562223
    },
    {
        "content": "<p>So how come it doesn't infer that instance?</p>",
        "id": 226644868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562240
    },
    {
        "content": "<p>Because it uses the wrong one</p>",
        "id": 226644915,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1613562250
    },
    {
        "content": "<p>Which instance does it find instead when you ask for <code>has_le</code>?</p>",
        "id": 226644921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562255
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">profinite_skeleton</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 226644943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562274
    },
    {
        "content": "<p>what does that return?</p>",
        "id": 226644948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562281
    },
    {
        "content": "<p>def <a href=\"http://Profinite.foo\">Profinite.foo</a> : Π {X : Profinite}, has_le ↥(X.profinite_skeleton) :=<br>\nλ {X : Profinite}, preorder.to_has_le ↥(X.profinite_skeleton)</p>",
        "id": 226644985,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1613562314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/le.20notation/near/226644747\">said</a>:</p>\n<blockquote>\n<p>Well, you can make that a little bit easier by first declaring</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">profinite_limit_category</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">profinite_skeleton</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"n\">_</span> <span class=\"n\">profinite_skeleton.partial_order</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh so my problem is since I dont have this, lean infers another preorder?</p>",
        "id": 226645011,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1613562341
    },
    {
        "content": "<p>No, you should scratch that first advice</p>",
        "id": 226645034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562358
    },
    {
        "content": "<p>Could you please <code>print foo</code> with <code>set_option.pp_all true</code>, or maybe <code>pp.implicit</code> if the former yields 5gb of mess.</p>",
        "id": 226645105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562406
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Profinite.foo</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Profinite</span><span class=\"o\">},</span> <span class=\"n\">has_le</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">X.profinite_skeleton</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Profinite</span><span class=\"o\">},</span>\n  <span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">X.profinite_skeleton</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subtype.preorder</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bundled.α</span> <span class=\"n\">topological_space</span> <span class=\"n\">X.to_Top</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bundled.α</span> <span class=\"n\">topological_space</span> <span class=\"n\">X.to_Top</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_bot.to_partial_order</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bundled.α</span> <span class=\"n\">topological_space</span> <span class=\"n\">X.to_Top</span><span class=\"o\">)))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice.to_order_bot</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bundled.α</span> <span class=\"n\">topological_space</span> <span class=\"n\">X.to_Top</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice.to_bounded_lattice</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bundled.α</span> <span class=\"n\">topological_space</span> <span class=\"n\">X.to_Top</span><span class=\"o\">)))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.lattice_set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bundled.α</span> <span class=\"n\">topological_space</span> <span class=\"n\">X.to_Top</span><span class=\"o\">)))))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bundled.α</span> <span class=\"n\">topological_space</span> <span class=\"n\">X.to_Top</span><span class=\"o\">))),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X.profinite_skeleton</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 226645264,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1613562529
    },
    {
        "content": "<p>So its the topological space that ruins everything?</p>",
        "id": 226645306,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1613562563
    },
    {
        "content": "<p>Aah! I see. It's the <code>↥</code> in <code>has_le ↥(X.profinite_skeleton)</code></p>",
        "id": 226645405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562611
    },
    {
        "content": "<p>You define <code>profinite_skeleton</code> as a <code>set</code>, instead of as a new type.</p>",
        "id": 226645441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562642
    },
    {
        "content": "<p>I'm not sure if you actually want to treat it as a (sub)set, or as a type.</p>",
        "id": 226645469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562668
    },
    {
        "content": "<p>If you want a type, then change the <code>|</code> into <code>//</code> in the definition of <code>profinite_skeleton</code>.</p>",
        "id": 226645488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562692
    },
    {
        "content": "<p>That should solve these issues with instances.</p>",
        "id": 226645500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562704
    },
    {
        "content": "<p>Of course you loose the ability to write <code>x \\in profinite_skeleton X</code>, so you have to decide if that's important</p>",
        "id": 226645569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562743
    },
    {
        "content": "<p>lunch time <span aria-label=\"running\" class=\"emoji emoji-1f3c3\" role=\"img\" title=\"running\">:running:</span> <span aria-label=\"bread\" class=\"emoji emoji-1f35e\" role=\"img\" title=\"bread\">:bread:</span></p>",
        "id": 226645620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613562793
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 226645642,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1613562825
    }
]