[
    {
        "content": "<p>Is there a way to display the defining equation for the recursor of a given inductive type? Is this a sensible question? I just read about recursors from pg. 28 of <a href=\"https://hott.github.io/book/nightly/hott-online-1204-g7415493.pdf\" target=\"_blank\" title=\"https://hott.github.io/book/nightly/hott-online-1204-g7415493.pdf\">https://hott.github.io/book/nightly/hott-online-1204-g7415493.pdf</a>. I know #check will give me the type of the function, but is there a way to get the function itself?</p>",
        "id": 162290963,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1554163671
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\"><pre><span></span>inductive mynat\n| Z\n| S : mynat → mynat\n#print prefix mynat\n</pre></div>\n\n\n<p>give you what you want?</p>",
        "id": 162292874,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554165827
    },
    {
        "content": "<p>I think he means the iota reduction rule, which isn't written anywhere I don't think.</p>",
        "id": 162293368,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554166441
    },
    {
        "content": "<p>I'm not certain, but I think what I see printed from <code>#print prefix mynat</code> for <code>mynat.rec</code> is the type?</p>",
        "id": 162301523,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1554177733
    },
    {
        "content": "<p>The recursor for a type X is called <code>X.rec</code> and it doesn't have a definition, it just has a type. It is an axiom in the theory</p>",
        "id": 162305420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554183731
    },
    {
        "content": "<p>Every time a new type is created using <code>inductive</code> or <code>structure</code> or <code>class</code> the constructors and recursor are added to the theory as new constants or axioms or whatever you want to call them. They have no definitions. Everything else gets defined in terms of these.</p>",
        "id": 162306158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554184894
    },
    {
        "content": "<p>So there is no defining equation like <code>recA×B(C,g,(a,b)) :≡ g(a)(b)</code> as given in the linked text? How do we determine how to use them?</p>",
        "id": 162349317,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1554221259
    },
    {
        "content": "<p>That's iota reduction, which is true by definition.</p>",
        "id": 162349409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554221321
    },
    {
        "content": "<p>Lean cannot even tell the difference between the two sides in some sense, but prefers the right hand side to the left hand side. A tactic like <code>dsimp</code> would apply all reductions Lean can think of. A list of the reductions Lean knows is in <a href=\"https://leanprover.github.io/reference/expressions.html#computation\" target=\"_blank\" title=\"https://leanprover.github.io/reference/expressions.html#computation\">section 3.7 of the reference manual</a>. What is your background? I hope I'm not patronising you -- I don't mean to. I didn't know this stuff at all a year or so ago, so I just assume nobody else knows it ;-)</p>",
        "id": 162349660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554221513
    },
    {
        "content": "<p>I guess iota reduction is the only \"move\" that Lean can make faced with a recursor, because it can't unfold the definition, because there is no definition.</p>",
        "id": 162349743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554221566
    },
    {
        "content": "<p>Nope, this is new to me, I appreciate it.</p>",
        "id": 162349755,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1554221580
    },
    {
        "content": "<p>I feel guilty about all this. About six months ago I spent quite a lot of time trying to figure out what was going on here -- what was true by definition and what was true for other reasons (e.g. a+b=b+a is true because of a theorem, not by definition). I got it all straight in my head and then made a note to write some good teaching materials but I never made those teaching materials.</p>",
        "id": 162349870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554221658
    },
    {
        "content": "<p>No worries. Thank you for the link to that section of the reference manual. I think that will help.</p>",
        "id": 162350086,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1554221874
    },
    {
        "content": "<p>I can never find it because the title is \"computation\" -- I had not realised that this is what a computer scientist means when they talk about computation! They mean changing terms into other terms, apparently. The Lean tactic <code>change</code> (and <code>show</code>, a synonym) changes the goal to anything which is definitionally equivalent to the goal; it's a useful tactic if you want to experiment with definitional equality.</p>",
        "id": 162350205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554221953
    },
    {
        "content": "<p>This is definitely not what a computer scientist means when they say \"computation\", but it is what a type theorist means when they say \"computation\"</p>",
        "id": 162357506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554227309
    },
    {
        "content": "<p>Aren't they the same thing? ;-)</p>",
        "id": 162362292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554230420
    }
]