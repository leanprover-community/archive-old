[
    {
        "content": "<p>To the best of my ability, I translated <a href=\"https://twitter.com/JDHamkins/status/1532142907456733186\">Joel David Hampkin's tweet</a> into lean. There are a lot of quantifies on both sides of a proposition. I'm trying to prove it but I don't know how to deal with them in an organized way. I remember I can use cases on them because <code>use</code> only works on the goal. Any help would be kind. </p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/JDHamkins/status/1532142907456733186\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/46f52e6955e710863b6884e2259c5b41d3e03317/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313432343434323231333430353137393931302f4a4f376d4e47392d5f6e6f726d616c2e6a7067\"></a><p>Logic puzzle challenge. Express the following assertion in plainer language:\n∃y (x≠y and y≠z) → ∀x∃y (x≠y and y≠z)</p><span>- Joel David Hamkins (@JDHamkins)</span></div></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  # Option 1</span>\n<span class=\"cm\">  simp, (this gives me a (∀ x_1 : ℝ), which idk what that means)</span>\n<span class=\"cm\">  # Option 2</span>\n<span class=\"cm\">  by_contradiction,</span>\n<span class=\"cm\">  push_neg at h,</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284718191,
        "sender_full_name": "Mason McBride",
        "timestamp": 1654160911
    },
    {
        "content": "<p>you don't really need <code>real</code> for this... use <code>variable {A : Type*}</code> instead to avoid the gratuitous imports</p>",
        "id": 284719074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654161549
    },
    {
        "content": "<p>Is the goal to express the assertion or prove it?</p>",
        "id": 284719098,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1654161570
    },
    {
        "content": "<p>I think it is true</p>",
        "id": 284719207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654161618
    },
    {
        "content": "<p>prove it</p>",
        "id": 284719225,
        "sender_full_name": "Mason McBride",
        "timestamp": 1654161630
    },
    {
        "content": "<blockquote>\n<p>(this gives me a (∀ x_1 : ℝ), which idk what that means)</p>\n</blockquote>\n<p>there is more stuff after the quantifier, it continues on several lines</p>",
        "id": 284719269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654161666
    },
    {
        "content": "<p>Here's how close I got: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">x_ne_y</span> <span class=\"n\">y_ne_z</span> <span class=\"n\">x'</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> I don't have x'≠y -/</span><span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">y_ne_z</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284719297,
        "sender_full_name": "Mason McBride",
        "timestamp": 1654161684
    },
    {
        "content": "<p>Thanks mario ill refactor rn</p>",
        "id": 284719379,
        "sender_full_name": "Mason McBride",
        "timestamp": 1654161724
    },
    {
        "content": "<p>I would start the proof like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">xy</span><span class=\"o\">,</span> <span class=\"n\">yz</span><span class=\"o\">⟩</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">wy</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">wy</span><span class=\"o\">,</span> <span class=\"n\">yz</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284719404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654161742
    },
    {
        "content": "<p>the next part is probably cases on whether some variables are equal to some others</p>",
        "id": 284719441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654161764
    },
    {
        "content": "<p>Joel says on his twitter that he doesn't intend any universal quantification of <code>x</code> and <code>z</code>, which it seems like you are doing here.</p>",
        "id": 284719493,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654161794
    },
    {
        "content": "<p>I don't think there is any untoward quantification here</p>",
        "id": 284719630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654161870
    },
    {
        "content": "<p>x and z are free variables (y is unused)</p>",
        "id": 284719676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654161902
    },
    {
        "content": "<p>oh interesting, this sorry doesn't look provable</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">xy</span><span class=\"o\">,</span> <span class=\"n\">yz</span><span class=\"o\">⟩</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">wy</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">xz</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">xy.symm</span><span class=\"o\">,</span> <span class=\"n\">xz</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">wy</span><span class=\"o\">,</span> <span class=\"n\">yz</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284719979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654162099
    },
    {
        "content": "<p>Well when we write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>we universally quantify over <code>x</code> and <code>z</code>, I guess I'm saying the expression of the original logical statement is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which it doesn't make sense to \"prove it\", necessarily.</p>",
        "id": 284719991,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654162106
    },
    {
        "content": "<p>Normally, proving a statement with free variables is equivalent to proving its universal closure</p>",
        "id": 284720041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654162148
    },
    {
        "content": "<p>Right, I'm pointing out that just doing that you might not be getting something provable</p>",
        "id": 284720153,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654162204
    },
    {
        "content": "<p>well if the statement's universal closure is not provable it is a stretch to say the original statement is</p>",
        "id": 284720195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654162241
    },
    {
        "content": "<p>even if there are some more hypotheses about x and z that apply it would still be the universal closure of that that is being asserted</p>",
        "id": 284720240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654162273
    },
    {
        "content": "<p>Yes precisely, the original question on twitter is simply to interpret the sentence, not to prove it</p>",
        "id": 284720252,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654162281
    },
    {
        "content": "<p>a lot of logicians just define provability to only apply to (closed) sentences to avoid this confusion</p>",
        "id": 284720277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654162303
    },
    {
        "content": "<p>what If I want to prove it</p>",
        "id": 284720336,
        "sender_full_name": "Mason McBride",
        "timestamp": 1654162326
    },
    {
        "content": "<p>or disprove it...?</p>",
        "id": 284720352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654162335
    },
    {
        "content": "<p>yeah either one</p>",
        "id": 284720357,
        "sender_full_name": "Mason McBride",
        "timestamp": 1654162343
    },
    {
        "content": "<p>You should decide which it is before embarking on the proof though!</p>",
        "id": 284720430,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654162409
    },
    {
        "content": "<p>Blindly applying <code>simp</code> in problems like this usually doesn't get you far. You usually have to do some structural reasoning here using things like <code>cases</code> and <code>use</code></p>",
        "id": 284720441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654162420
    },
    {
        "content": "<p>and in particular <code>by_cases</code> on variables being equal is important in this one</p>",
        "id": 284720451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654162437
    },
    {
        "content": "<p>and <code>subst</code> when they are equal to get rid of the extra variables</p>",
        "id": 284720501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654162452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/help.20dealing.20with.20quantifiers.20in.20example/near/284719979\">said</a>:</p>\n<blockquote>\n<p>oh interesting, this sorry doesn't look provable</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">xy</span><span class=\"o\">,</span> <span class=\"n\">yz</span><span class=\"o\">⟩</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">wy</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">xz</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">xy.symm</span><span class=\"o\">,</span> <span class=\"n\">xz</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">wy</span><span class=\"o\">,</span> <span class=\"n\">yz</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>is this sorry not provable because you can't <code>use</code> anything for y_1 that would satisfy the goal?</p>",
        "id": 284721134,
        "sender_full_name": "Mason McBride",
        "timestamp": 1654162882
    },
    {
        "content": "<p>Thanks for the tips Mario I've been stepping through your snippets and I'm getting to see how subst and by_cases work</p>",
        "id": 284721178,
        "sender_full_name": "Mason McBride",
        "timestamp": 1654162918
    },
    {
        "content": "<p>yeah, the only thing you know is that x and y aren't equal, and you need to come up with something that isn't x or y (there might not even be any such thing)</p>",
        "id": 284721233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654162931
    },
    {
        "content": "<p>in fact, you can just plug and chug it for bool to disprove it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">),</span>\n  <span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 284721448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654163074
    },
    {
        "content": "<p>this works because quantifiers over <code>bool</code> can be brute forced, so we can just evaluate the whole statement as a claim about <code>bool</code></p>",
        "id": 284721485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654163108
    },
    {
        "content": "<p>You can also just do this if you know the counterexample</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">H</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span>\n</code></pre></div>",
        "id": 284721585,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654163169
    },
    {
        "content": "<p>here's a more explicit proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">H</span> <span class=\"n\">bool</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span> <span class=\"o\">⟨</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">ne.symm</span> <span class=\"n\">bool.ff_ne_tt</span><span class=\"o\">,</span> <span class=\"n\">bool.ff_ne_tt</span><span class=\"o\">⟩</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284721611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654163190
    },
    {
        "content": "<p>or <code>by { intro H, have := @H bool, revert this, dec_trivial }</code> which is more similar to alex's version</p>",
        "id": 284721682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654163265
    },
    {
        "content": "<p>even <code>λ H, by simpa using @H bool</code> works</p>",
        "id": 284721871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654163365
    },
    {
        "content": "<p>I guess this is because there are also simp lemmas which effectively brute-force bool quantifiers</p>",
        "id": 284721947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654163403
    },
    {
        "content": "<p>nice these are cool, what's <code>@H</code></p>",
        "id": 284721982,
        "sender_full_name": "Mason McBride",
        "timestamp": 1654163428
    },
    {
        "content": "<p><code>@</code> before an identifier makes all of the implicit quantifiers act like they were explicit. In this case, the quantifier on alpha</p>",
        "id": 284722029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654163470
    },
    {
        "content": "<p>because we want to pass <code>bool</code> to that quantifier without specifying later things</p>",
        "id": 284722053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654163491
    },
    {
        "content": "<p>normally the type argument would be implied by later things (like alex's version, which uses <code>H tt tt</code> and since <code>tt : bool</code> it infers that alpha is <code>bool</code>)</p>",
        "id": 284722164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654163550
    },
    {
        "content": "<p>if you just used <code>H</code> alone, it would get instantiated to an unknown type and then the simp lemmas and things for bool quantifiers wouldn't trigger since it has no idea that bool is involved</p>",
        "id": 284722226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654163605
    },
    {
        "content": "<p>I read this sentence as \"<code>ℝ</code> has at least three elements\".</p>",
        "id": 284737246,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654173415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/help.20dealing.20with.20quantifiers.20in.20example/near/284737246\">said</a>:</p>\n<blockquote>\n<p>I read this sentence as \"<code>ℝ</code> has at least three elements\".</p>\n</blockquote>\n<p>If there is only one element, then the premise is always false, so the implication is always true.</p>",
        "id": 284737980,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1654173782
    },
    {
        "content": "<p>Oh right, then I guess it is \"<code>ℝ</code> doesn't have exactly two elements\".</p>",
        "id": 284738161,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654173852
    },
    {
        "content": "<p>The consequent says \"there are at least 3 elements.\"  For the antecedent, if x = z, it says \"there are at least two elements,\" otherwise, it says \"there are at least 3 elements.\"</p>\n<p>So, if x=z, the full implication says \"doesn't have exactly two elements.\"  Otherwise, it's a tautology.  I think.  :)</p>",
        "id": 284738939,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1654174206
    },
    {
        "content": "<p>I like that, that description is way better than the things people were saying on twitter. \"If there are exactly two elements, then x != z.\"</p>",
        "id": 284740528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654174893
    },
    {
        "content": "<p>I'm just putting this here for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">y_ne_ff_and_tt</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">H</span> <span class=\"n\">bool</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span> <span class=\"o\">⟨</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">ne.symm</span> <span class=\"n\">bool.ff_ne_tt</span><span class=\"o\">,</span> <span class=\"n\">bool.ff_ne_tt</span><span class=\"o\">⟩</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">y_ne_ff_and_tt</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284786265,
        "sender_full_name": "Mason McBride",
        "timestamp": 1654194981
    }
]