[
    {
        "content": "<p>Is there was a lemma like this in mathlib or any ideas for a simple proof?</p>\n<div class=\"codehilite\"><pre><span></span>lemma nth_gt_append_right {α : Type}  (L M : list α) (k : ℕ) (h₁) (h₂) :\n  (L ++ M).nth_le k h₁ = M.nth_le (k - L.length) h₂ := sorry\n</pre></div>",
        "id": 180202955,
        "sender_full_name": "Eamon Barrett",
        "timestamp": 1573189184
    },
    {
        "content": "<p>I can't see it in data.list.basic; <code>nth_le_append</code> only deals with the n'th element of L equalling the n'th element of L++M</p>",
        "id": 180214856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573206028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232998\">@Eamon Barrett</span></p>\n<div class=\"codehilite\"><pre><span></span>import data.nat.basic\n\nlemma nth_le_append_right {α : Type} : Π (L M : list α) (k : ℕ) (h₀ : L.length ≤ k) (h₁) (h₂),\n  (L ++ M).nth_le k h₁ = M.nth_le (k - L.length) h₂\n| [] M k h₀ h₁ h₂ := rfl\n| (l :: L) M (k+1) h₀ h₁ h₂ :=\n  begin\n    dsimp,\n    conv { to_rhs, congr, skip, rw [←nat.sub_sub, nat.sub.right_comm, nat.add_sub_cancel], },\n    rw nth_le_append_right L M k (nat.lt_succ_iff.mp h₀),\n  end\n</pre></div>",
        "id": 180296456,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1573274932
    },
    {
        "content": "<p>(This isn't exactly what you asked for, which I think wasn't true.)</p>",
        "id": 180296462,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1573274948
    },
    {
        "content": "<p>You can eliminate h2 here, which is a consequence of h0 and h1.</p>",
        "id": 180296723,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1573275537
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nth_le_append_right_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">L</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"bp\">++</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length_append</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_lt_sub_right_iff</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nth_le_append_right</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">n</span> <span class=\"n\">h₂</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l₁</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nth_le_append_right_aux</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>       <span class=\"bp\">_</span> <span class=\"n\">n</span>     <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">to_rhs</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_sub</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"bp\">.</span><span class=\"n\">right_comm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nth_le_append_right</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₁</span><span class=\"o\">),</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 180297095,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1573276258
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/1662\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1662\">https://github.com/leanprover-community/mathlib/pull/1662</a></p>",
        "id": 180297398,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1573276817
    },
    {
        "content": "<p>Thank you Scott!</p>",
        "id": 180385160,
        "sender_full_name": "Eamon Barrett",
        "timestamp": 1573426884
    }
]