[
    {
        "content": "<p>hey im new</p>",
        "id": 242021064,
        "sender_full_name": "Shaun Modipane",
        "timestamp": 1623218505
    },
    {
        "content": "<p>Hi! Welcome! There are some learning materials on the <a href=\"https://leanprover-community.github.io/learn.html\">community site</a> if you haven't already seen those. The natural number game listed first there is super good to get started.</p>\n<p>(And people here are really nice, so feel free to just ask questions whenever you have them.)</p>",
        "id": 242022369,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623219939
    },
    {
        "content": "<p>hey man thanks, my problem is I'm stuck on a level in the natural number game and i dont know how to ask/show the problem here in zulip</p>",
        "id": 242022580,
        "sender_full_name": "Shaun Modipane",
        "timestamp": 1623220150
    },
    {
        "content": "<p>post the link to the level</p>",
        "id": 242022679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623220250
    },
    {
        "content": "<p>and what you have done so far</p>",
        "id": 242022689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623220273
    },
    {
        "content": "<p><a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=9&amp;level=1\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=9&amp;level=1</a><br>\nlike this</p>",
        "id": 242022700,
        "sender_full_name": "Shaun Modipane",
        "timestamp": 1623220295
    },
    {
        "content": "<p>and where are you stuck?</p>",
        "id": 242022852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623220446
    },
    {
        "content": "<p>theorem mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0 :=<br>\nim trying to solve this lemma</p>",
        "id": 242024711,
        "sender_full_name": "Shaun Modipane",
        "timestamp": 1623222691
    },
    {
        "content": "<p>I can't remember what NNG explains but I guess you can either use zero_ne_succ or succ_ne_zero or whatever you have, or you can just attack an <code>x ≠ 0</code> directly with <code>intro hx</code></p>",
        "id": 242026001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623223628
    },
    {
        "content": "<p>First off you have to introduce the hypotheses. Have you done that? Run <code>intro h1, intro h2,</code>.</p>",
        "id": 242026945,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623224324
    },
    {
        "content": "<p>Then you have to do <code>cases</code> on <code>a</code> and <code>b</code>. You will get two cases: zero and succ. Ah, there are two variables, so you will get four cases.</p>",
        "id": 242027110,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623224441
    },
    {
        "content": "<p>And then with some exfalso and the existing theorems, you can clear the goal.</p>",
        "id": 242027125,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623224452
    },
    {
        "content": "<p>This is the solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">succ_ne_zero</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 242027383,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623224654
    },
    {
        "content": "<p>okay thanks, the this keyword is new, and is a game changer. is it possible to explain it's function.</p>",
        "id": 242028322,
        "sender_full_name": "Shaun Modipane",
        "timestamp": 1623225292
    },
    {
        "content": "<p>When you write <code>have : T := V</code>, (where <code>T</code> is a type and <code>V</code> is a term of that type), you create a new hypothesis which is named <code>this</code> by default.</p>",
        "id": 242029254,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623225902
    },
    {
        "content": "<p>You can (and often should) explicitly name it yourself using <code>have h : T := V</code>.</p>",
        "id": 242029281,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623225920
    },
    {
        "content": "<p>Then it will be called <code>h</code> instead of <code>this</code>.</p>",
        "id": 242029295,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623225927
    },
    {
        "content": "<p>(My preference is to _always_ provide an explicit name if it is ever directly referred to again later. But this isn't enforced in mathlib; <code>this</code> is considered okay.)</p>",
        "id": 242029383,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623225967
    },
    {
        "content": "<p>Also,  <span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> suggestion above would be better if it used braces to separate proofs of subgoals!</p>",
        "id": 242029422,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623225997
    },
    {
        "content": "<p>You don't need to write <code>have : zero = zero := by refl</code>. This unnecessarily jumps back and forth between term and tactic mode. Better to write <code>have : zero = zero := rfl</code>, or <code>have : zero = zero, refl</code>.</p>\n<p>Even better is to not even introduce <code>this</code>, and just write <code>exact h1 rfl</code>.</p>",
        "id": 242029526,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623226070
    },
    {
        "content": "<p>thanks, i got it, hope we could work together on other projects.</p>",
        "id": 242035294,
        "sender_full_name": "Shaun Modipane",
        "timestamp": 1623229292
    },
    {
        "content": "<p>how do you guys handle goals that impossible to prove, like ⊢ succ b = 0.</p>",
        "id": 242046592,
        "sender_full_name": "Shaun Modipane",
        "timestamp": 1623235939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"419373\">@Shaun Modipane</span> I hope that you also have a hypothesis that is false, otherwise you are stuck</p>",
        "id": 242046959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623236162
    },
    {
        "content": "<p><a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=9&amp;level=4\">https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=9&amp;level=4</a><br>\nwho can solve this problem without revert tactic</p>",
        "id": 242440631,
        "sender_full_name": "Shaun Modipane",
        "timestamp": 1623491479
    },
    {
        "content": "<p>the usual way it is done is to use <code>induction c generalizing b</code> instead of using <code>revert</code> explicitly</p>",
        "id": 242440777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623491659
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.resolve_left</span> <span class=\"n\">ha</span> <span class=\"o\">},</span>\n<span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h.resolve_left</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span> <span class=\"n\">add_right_cancel_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 242441112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623492042
    },
    {
        "content": "<p>quick question, how did you get so good?<br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 242441577,
        "sender_full_name": "Shaun Modipane",
        "timestamp": 1623492487
    },
    {
        "content": "<p>lots of experience</p>",
        "id": 242441596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623492574
    },
    {
        "content": "<p>aka write lots of lean code</p>",
        "id": 242441598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623492586
    },
    {
        "content": "<p>and put it where other people can critique it (e.g. mathlib PRs)</p>",
        "id": 242441643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623492623
    },
    {
        "content": "<p>what does generalizing b do? if you can can you send me the Mathlib doc.</p>",
        "id": 242441646,
        "sender_full_name": "Shaun Modipane",
        "timestamp": 1623492626
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#induction\">tactic#induction</a></p>",
        "id": 242441653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623492638
    },
    {
        "content": "<p>it's basically the same as <code>revert b, induction c; intro b</code></p>",
        "id": 242441662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623492669
    },
    {
        "content": "<p>the <code>;</code> there means to do <code>intro b</code> in all the subgoals</p>",
        "id": 242441665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623492680
    },
    {
        "content": "<p>how many years of experience in lean do you have?</p>",
        "id": 242441666,
        "sender_full_name": "Shaun Modipane",
        "timestamp": 1623492680
    },
    {
        "content": "<p>4 years or so? about 1 year before mathlib started</p>",
        "id": 242441723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623492734
    },
    {
        "content": "<p>but you don't need that much time to get good</p>",
        "id": 242441751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623492800
    },
    {
        "content": "<p>I'm just an old hand around here</p>",
        "id": 242441784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623492842
    },
    {
        "content": "<p>what projects are you interested in and why?<br>\nyou can answer me later if you are busy.</p>",
        "id": 242441845,
        "sender_full_name": "Shaun Modipane",
        "timestamp": 1623492952
    },
    {
        "content": "<p>I started doing formal proving in the <a href=\"http://us.metamath.org/\">metamath</a> system, I thought it was interesting and fun to build all of mathematics the \"right way\", and I spent several years doing that before I got a PhD position to work on lean. I still think formal maths is the future, and a lot of the basics in mathlib is my work, although it has since grown further than I can keep track. I haven't done too much mathlib of late though, because I've been working on <a href=\"https://github.com/digama0/mm0\">Metamath Zero</a>, a theorem prover design which focuses on speed and correctness, pulling inspiration from metamath and lean. In particular, I am working on a <em>verified</em> theorem prover for MM0, relative to a specification of the hardware. Really, I would like to see <em>all</em> theorem provers have verified backends, but there are ways to leverage one verified theorem prover to verify the products of other projects like mathlib.</p>",
        "id": 242442247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623493497
    },
    {
        "content": "<p>You are getting really good responses here, I recommend that you refrain from DMing specific users unless absolutely necessary. Thanks.</p>",
        "id": 242443131,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623494596
    },
    {
        "content": "<p>You can also use private messages to talk to particular users in zulip fyi</p>",
        "id": 242443206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623494708
    },
    {
        "content": "<p>I'm not against DMs, just that I have a very peculiar personality and that might make you uncomfortable unless you know me really well. <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 242443207,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623494708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> well, they PM'd me and I declined to respond LOL</p>",
        "id": 242443237,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623494758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"419373\">@Shaun Modipane</span> I'm quoting your message here. </p>\n<blockquote>\n<p>hey man, i hope i'm not bothering you but i want to ask. how did you get so good in lean and where did you get the exercise from</p>\n</blockquote>\n<p>By abusing this Zulip chat as a human flesh powered search engine. Seriously. You can't really Google anything about Lean so... Just ask questions. Why are you interested in Lean? Maybe to formalize a math problem? Then you can post the problem statement on here and ask for guidance.</p>\n<p>The more you <del>shitpost</del>, the better you get. Seriously.</p>",
        "id": 242443749,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623495379
    },
    {
        "content": "<p>I've posted half coherent questions and and still got pretty decent answers. This community is really helpful.</p>",
        "id": 242443794,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623495457
    },
    {
        "content": "<p>Hi I'm new. I have played the natural number game and did some tutorials. Now I'm starting to try to prove some things on my own. I don't really understand the logic of the zulip chat yet, so please redirect my question to wherever it belongs.</p>\n<p>So, to represent vectors of R^n, I am doing them as v : fin n \\to R. Now if I want to have the i-th component of the vector I can do just v i, where i belongs to fin n. But if I want to have the (i+1)-th component, I tried to do v (i+1) but it does not work.</p>\n<p>Is this trivial? What can I upload if not?</p>",
        "id": 242988623,
        "sender_full_name": "Damià Torres-Latorre",
        "timestamp": 1623919612
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 242988916,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623919789
    },
    {
        "content": "<p>import tactic<br>\nimport data.set.finite<br>\nimport data.real.basic</p>\n<p>noncomputable theory<br>\nopen set</p>\n<p>variable d : ℕ<br>\nlocal notation <code>E</code> := fin d → ℝ</p>\n<p>lemma ordered_vertices_implies_epsilon_fixed<br>\n(i : fin d) (hi : ↑i &lt; d - 1) (p : fin d → E) (f : E → E) (hfp : f (p (i+1)) i ≥ (p (i+1)) i) : 0 = 0<br>\n:= sorry</p>",
        "id": 242989608,
        "sender_full_name": "Damià Torres-Latorre",
        "timestamp": 1623920230
    },
    {
        "content": "<p>how do I post the mwe in a way such that it looks like code here?</p>",
        "id": 242989646,
        "sender_full_name": "Damià Torres-Latorre",
        "timestamp": 1623920255
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 242989746,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623920303
    },
    {
        "content": "<p>you can wrap it in 3 backticks (`), like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ordered_vertices_implies_epsilon_fixed</span>\n<span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfp</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 242989754,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623920309
    },
    {
        "content": "<p>well, your first issue right now is that <code>fin 0</code> doesn't have any elements (and specifically no 1)!</p>",
        "id": 242990245,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623920588
    },
    {
        "content": "<p>you can use <code>fin d.succ</code> to get around this</p>",
        "id": 242990266,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623920599
    },
    {
        "content": "<p>but this can still be weird; for example, in <code>fin 1</code>,  <code>1=0</code></p>",
        "id": 242990277,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623920611
    },
    {
        "content": "<p>The point is that you need to explicitly use <code>hi</code>, not just hope that the system magically notices it by itself.</p>",
        "id": 242990362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623920657
    },
    {
        "content": "<p>There is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_rotate\">docs#fin_rotate</a>, which is exactly the permutation you're looking for on all <code>fin n</code>.</p>",
        "id": 242990412,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623920692
    },
    {
        "content": "<p>Ok, thanks, that makes sense. How do I use hi? Also, is hi doing what I think it is doing? (discarding the last element of fin d)</p>",
        "id": 242990454,
        "sender_full_name": "Damià Torres-Latorre",
        "timestamp": 1623920716
    },
    {
        "content": "<p>I guess <code>hi</code> is not quite doing what you expect it to do, because natural number subtraction isn't quite doing what you might expect, as 0 - 1 = 0.</p>",
        "id": 242990545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623920759
    },
    {
        "content": "<p>I do not understand how to use fin_rotate, sorry<br>\nAlso it is true that hi does not work, if I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">u</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>would that work?</p>",
        "id": 242991106,
        "sender_full_name": "Damià Torres-Latorre",
        "timestamp": 1623921084
    },
    {
        "content": "<p>Yes, that variant of <code>hi</code> is probably exactly what you want. A term of type <code>fin d</code> is a <em>pair</em> consisting of a natural number <code>n</code> and a proof that <code>n &lt; d</code>. The up-arrow just forgets the proof. In particular a term of type <code>fin d</code> is not a natural number; all this took a while to dawn on me. Because of all this, you can't just expect to be able to do arithmetic on terms of type <code>fin d</code>, because if <code>i : fin d</code> then it's hard to guess what <code>i + 1</code> means in general (because there _could_ be overflow, whether or not there is in your situation). <code>fin_rotate</code> is just the \"add 1 mod d\" function.</p>",
        "id": 242991407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623921262
    },
    {
        "content": "<p>All right, thank you. I get what fin_rotate does morally, but I still do not understand how to use it, because fin_rotate i returns an equiv.perm object, which is not anymore of the correct type, and I have not been able to coerce it into fin d again</p>",
        "id": 242991935,
        "sender_full_name": "Damià Torres-Latorre",
        "timestamp": 1623921622
    },
    {
        "content": "<p>I think you want <code>fin_rotate d i</code></p>",
        "id": 242993646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623922679
    },
    {
        "content": "<p>Ok, so fin_rotate d is a permutation of fin d, got it, thank you!</p>",
        "id": 242993760,
        "sender_full_name": "Damià Torres-Latorre",
        "timestamp": 1623922745
    },
    {
        "content": "<p>An equiv.perm is automatically coerced into a function, when it is used as Kevin showed. I also think that instead of writing arrows for coercing fin, it's clearer for you and the reader if you write the type ascriptions explicitly, like (i : nat) + 1 &lt; d. Yes, the pretty printer will still show the arrow, but your code will be more interpretable by other readers.</p>",
        "id": 243007438,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623931567
    }
]