[
    {
        "content": "<p>Hi, I'm starting in Lean and doing a codewar kata I wanted to use the following (∃ x, p x) ↔ ¬ (∀ x, ¬ p x). I know this is an exercise in the Lean tutorial and I suppose it is a theorem in classical logic, but I'm not sure how is it called. Thanks a lot!</p>",
        "id": 217391528,
        "sender_full_name": "Javier Gómez Zaragoza",
        "timestamp": 1605873293
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_forall_not\">docs#not_forall_not</a></p>",
        "id": 217393555,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605874722
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 217393615,
        "sender_full_name": "Javier Gómez Zaragoza",
        "timestamp": 1605874765
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span> <span class=\"c1\">-- output tells you what you wanted to know :-)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217393895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605874993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"365856\">@Javier Gómez Zaragoza</span></p>",
        "id": 217393907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605875006
    },
    {
        "content": "<p>oh cool, and the smiley in the comment breaks the \"try this\" click as well :D</p>",
        "id": 217394022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605875078
    },
    {
        "content": "<p>lol, if you replace it by <code>:-(</code> then the try this click eats <code>end</code>!</p>",
        "id": 217394074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605875130
    },
    {
        "content": "<p><code>:-|</code></p>",
        "id": 217394109,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605875161
    },
    {
        "content": "<p>Thanks a lot! I thought the library_search tactic didn't work in codewars but I guess it does!</p>",
        "id": 217394267,
        "sender_full_name": "Javier Gómez Zaragoza",
        "timestamp": 1605875282
    },
    {
        "content": "<p>I'm not suggesting you use it in your final code :-) It's just a general trick for answering questions of the form you are asking. The library now is gigantic and it's very hard to remember all the names of everything, despite the fabulous <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> conventions.</p>",
        "id": 217394416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605875383
    },
    {
        "content": "<p>Yes, I will replace it with <code>exact not_forall_not</code> as Alex J. Best suggested. Thanks for the quick answer!</p>",
        "id": 217394814,
        "sender_full_name": "Javier Gómez Zaragoza",
        "timestamp": 1605875639
    },
    {
        "content": "<p>Just to check you know -- <code>library_search</code> is a tactic which actually produces output. In the infoview it says \"try this: ...\" and if you click on the suggestion then <code>library_search</code> replaces itself with the theorem which the search found.</p>",
        "id": 217395333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605875944
    },
    {
        "content": "<p>But it's best to avoid smileys.</p>",
        "id": 217395355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605875960
    },
    {
        "content": "<p>I'm actually not that familiarised with the \"interactiveness\" of this tactic since I'm mainly using Lean in codewars now, and there you have to send the attempt and wait for the output to appear. When I install Lean and mathlib in VScode I'll use this tactic a lot more for sure.</p>",
        "id": 217395857,
        "sender_full_name": "Javier Gómez Zaragoza",
        "timestamp": 1605876275
    },
    {
        "content": "<p>Youch! I would strongly recommend installing Lean and mathlib and VS Code, and setting up a Codewars project which uses precisely the same version of Lean and mathlib as Codewars does. If you just upload code to codewars then you cannot write code interactively, making any non-trivial kata extremely difficult to solve. </p>\n<p>At the very least you might want to use <a href=\"https://leanprover-community.github.io/lean-web-editor/\">the web editor</a> but this runs a slightly more modern lean/mathlib which could occasionally be problematic. But at least you can see what you're doing rather than coding blind!</p>",
        "id": 217396066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605876429
    },
    {
        "content": "<p>Yes, I use the web editor sometimes to look up theorems, but you're right the proper way to solve katas is to run VS Code on the side. Thanks a lot!</p>",
        "id": 217396516,
        "sender_full_name": "Javier Gómez Zaragoza",
        "timestamp": 1605876720
    }
]