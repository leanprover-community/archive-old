[
    {
        "content": "<p>How would you prove that <code>dev_null n = 0</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dev_null</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dev_null</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">dev_null</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't really know how to prove properties about recursive functions defined through pattern matching. I have been dodging it by using if-then-else expressions instead and then <code>unfold</code> and <code>split_ifs</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dev_null_2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">is_zero</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">buffer.lt_aux_2</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">is_zero</span><span class=\"o\">),</span> <span class=\"n\">dev_null_2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 225457398,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1612694500
    },
    {
        "content": "<p>Use <code>induction</code></p>",
        "id": 225457655,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1612694893
    },
    {
        "content": "<p>Wow that worked. Thanks.</p>",
        "id": 225457754,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1612695105
    },
    {
        "content": "<p>Or using the equation compiler:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">dev_null_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dev_null</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dev_null_zero</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>but <code>induction</code> is usually easier to use</p>",
        "id": 225458424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612695971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> you might want to look at chapters 7 and 8 of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> .</p>",
        "id": 225458774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612696394
    },
    {
        "content": "<p>In particular, at the beginning of chapter 8 they go through examples of how to prove theorems about inductive types.</p>",
        "id": 225458966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612696659
    }
]