[
    {
        "content": "<p>I'm trying to define the simplex category, but I'm running into an issue with the type of my morphisms:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"err\">Σ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span>\n</code></pre></div>\n\n\n<p>Lean doesn't seem to like the fact that <code>monotone f</code> has type <code>Prop</code> (which is fair). Is there a way to lift this into <code>Type</code>, or should I define a struct or something instead of using a sigma type.</p>",
        "id": 209862726,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1599882580
    },
    {
        "content": "<p>You'll need <code>plift</code> to lift from <code>Prop</code> to <code>Type</code>, and then possibly <code>ulift</code> as well, if you want to lift to an arbitrary universe.</p>",
        "id": 209863221,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599883585
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.discrete_category/src\">src#category_theory.discrete_category</a> and <a href=\"https://github.com/leanprover-community/mathlib/blob/f6a65cf/src/category_theory/category/default.lean#L237\">preorder.small_category</a>.</p>",
        "id": 209863234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599883660
    },
    {
        "content": "<p>You can also just use <code>Σ'</code> for this purpose.</p>",
        "id": 209863293,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599883791
    },
    {
        "content": "<p>which allows the second part to be a Prop, but leaves you in Type.</p>",
        "id": 209863330,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599883803
    },
    {
        "content": "<p>or use a structure</p>",
        "id": 209863333,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599883807
    },
    {
        "content": "<p>Or check in with Johan who has a branch about the simplex category somewhere.</p>",
        "id": 209863337,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599883821
    },
    {
        "content": "<p>Awesome, thanks! I think I'll try to fight my way through this for the practice. I'm moving over from Agda, so still very much getting use to things :)</p>",
        "id": 209863456,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1599884102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266262\">@Reed Mullanix</span> Note that the branch <code>sset</code> contains a bunch of stuff on simplicial sets.</p>",
        "id": 209866150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599889051
    },
    {
        "content": "<p>I hope to return to it soonish</p>",
        "id": 209866151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599889061
    },
    {
        "content": "<p>It is my second or third attempt at the matter, and this time I've decided not to use <code>fin n</code>, but arbitrary nonempty finite linear orders.</p>",
        "id": 209866192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599889096
    },
    {
        "content": "<p>I think that's better, because with that approach, you can restrict to a subtype of <code>fin n</code> and it will still live in the category, and things like that.</p>",
        "id": 209866197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599889128
    },
    {
        "content": "<p>The branch contains definitions up to simplicial homology. But it doesn't show that the standard face and degeneracy maps generate the simplex category... that's still something I wanted to do.</p>",
        "id": 209866207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599889186
    },
    {
        "content": "<p>It also has geometric realization of a simplicial set, but not the adjunction.</p>",
        "id": 209866228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599889203
    },
    {
        "content": "<p><code>{ f : fin n → fin m // monotone f }</code></p>",
        "id": 209867897,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599892926
    },
    {
        "content": "<p>The Linear Order idea is a good one! That branch looks like its got some great stuff in it, Ill poke around</p>",
        "id": 209883143,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1599919929
    }
]