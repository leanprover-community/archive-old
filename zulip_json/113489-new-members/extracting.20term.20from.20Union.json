[
    {
        "content": "<p>Hi, <br>\nI am currently trying to prove somethings about topological spaces and <br>\nhave the following <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">open_of_has_smaller</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">Nₓ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">Nₓ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Nₓ</span> <span class=\"bp\">∧</span> <span class=\"n\">Nₓ</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- So what I want to do is use ⋃ (x ∈ U) Nₓ</span>\n  <span class=\"n\">choose</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">is_open_sUnion</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">t</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- How do I extract x ∈ U from (λ (x : X), ⋃ (H : x ∈ U), f x H) x = t</span>\n   <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>As indicated, how do I extract <code>x ∈ U</code> from <code>(λ (x : X), ⋃ (H : x ∈ U), f x H) x = t</code>?</p>",
        "id": 198254054,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590007011
    },
    {
        "content": "<p>I have tried to use cases on <code>ht</code> but that does not seem to work :/</p>",
        "id": 198254118,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590007054
    },
    {
        "content": "<p>I wish zulip Android app used a don't work better Unicode man coverage. Or had an option to choose the font.</p>",
        "id": 198254693,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590007360
    },
    {
        "content": "<p><code>is_open_sUnion</code> isn't the right lemma to use. You want <code>is_open_bUnion</code>.</p>",
        "id": 198254698,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590007363
    },
    {
        "content": "<p>BTW, we probably have this lemma in mathlib</p>",
        "id": 198254916,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590007481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/extracting.20term.20from.20Union/near/198254916\">said</a>:</p>\n<blockquote>\n<p>BTW, we probably have this lemma in mathlib</p>\n</blockquote>\n<p>I'm currently formalising some lecture notes as a learning experience!</p>",
        "id": 198254979,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590007514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/extracting.20term.20from.20Union/near/198254698\">said</a>:</p>\n<blockquote>\n<p><code>is_open_sUnion</code> isn't the right lemma to use. You want <code>is_open_bUnion</code>.</p>\n</blockquote>\n<p>Alright, I'll try to use this instead</p>",
        "id": 198254999,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590007529
    },
    {
        "content": "<p>If I saw <code>(λ (x : X), ⋃ (H : x ∈ U), f x H) x = t</code> I'd dsimp it immediately, but in this case that removes all mention of H.</p>",
        "id": 198255114,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590007573
    },
    {
        "content": "<p>I'd use rfl instead of ht in rintros.</p>",
        "id": 198255209,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590007629
    },
    {
        "content": "<p>(if I had no bUnion lemma)</p>",
        "id": 198255243,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590007651
    },
    {
        "content": "<p>emm, using rfl will give me <code>is_open ((λ (x : X), ⋃ (H : x ∈ U), f x H) x)</code> which I don't think I can prove since I can't use sUnion on this</p>",
        "id": 198255578,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590007838
    },
    {
        "content": "<p>You should try to avoid unions over propositions like this, by using <code>bUnion</code> theorems, but you can use <code>Union</code> if they come up</p>",
        "id": 198256033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590008087
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">is_open_sUnion</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>This is a wrong move, <code>⋃ (x ∈ U), f x H</code> is a bUnion not an sUnion</p>",
        "id": 198256128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590008141
    },
    {
        "content": "<p>I'm currently trying to use <code>is_open_bUnion</code> but can't seem to get it to work. I think the way I defined <code>f</code> is wrong</p>",
        "id": 198256202,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590008170
    },
    {
        "content": "<p>It is a bit odd that <code>f</code> depends on <code>H</code></p>",
        "id": 198256258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590008209
    },
    {
        "content": "<p>the bUnion theorems may not be expecting this</p>",
        "id": 198256279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590008225
    },
    {
        "content": "<p>right, I'm thinking iere is a way to swap the type of <code>f</code> so <code>f</code> will have type <code>somthing not dependent on x  \\all(x : X), → set X</code> instead of <code>Π (x : X), x ∈ U → set X</code></p>",
        "id": 198256479,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590008327
    },
    {
        "content": "<p>anyway there is no need to use choice in the theorem, you can prove that U is the union of all its open subsets</p>",
        "id": 198256485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590008330
    },
    {
        "content": "<p>I'm also pretty sure there is already a theorem stating approximately this in mathlib</p>",
        "id": 198256583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590008390
    },
    {
        "content": "<p>Alright, I'll try your approach for now and if that doesn't go well I can cheat a bit by looking in mathlib</p>",
        "id": 198256752,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590008454
    },
    {
        "content": "<p><code>is_open_iff_forall_mem_open</code></p>",
        "id": 198256768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590008461
    },
    {
        "content": "<p>Nono, I don't want to see it yet</p>",
        "id": 198256825,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590008482
    },
    {
        "content": "<p>:)</p>",
        "id": 198256834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590008489
    },
    {
        "content": "<p>You can also use <code>is_open_Union</code> twice.</p>",
        "id": 198260885,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590010978
    },
    {
        "content": "<p>BTW, try <code>choose f hfo hf using h</code></p>",
        "id": 198261166,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590011163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/extracting.20term.20from.20Union/near/198260885\">said</a>:</p>\n<blockquote>\n<p>You can also use <code>is_open_Union</code> twice.</p>\n</blockquote>\n<p>Nice! That's exactly it!</p>",
        "id": 198261203,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590011191
    }
]