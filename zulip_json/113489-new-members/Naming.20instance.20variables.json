[
    {
        "content": "<p>How can I give an explicit name for a class instance declared as a variable, so that I may refer to it later?<br>\nI.e. the following works, with the implicitly given name <code>_inst_1</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[class]</span> <span class=\"kd\">inductive</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">_inst_1</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But if I try </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>then <code>i</code> is not in scope, and neither is any implicit name.</p>",
        "id": 222754645,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1610646521
    },
    {
        "content": "<p>does <code>include i</code> after the <code>variables</code> work?</p>",
        "id": 222754751,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1610646557
    },
    {
        "content": "<p>It's just that a named instance variable will not be included as a hypothesis automatically</p>",
        "id": 222754788,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610646579
    },
    {
        "content": "<p>so anything which avoid relying on that (e.g. not using <code>variables</code>, not using tactic mode, using <code>include</code>) will avoid this problem</p>",
        "id": 222754906,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610646610
    },
    {
        "content": "<p>If you have stuff like <code>@[class] inductive</code> that you need to case on, you should probably aim to minimize the number of times that you need to deal with that</p>",
        "id": 222755020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610646663
    },
    {
        "content": "<p>The <code>include</code> solved it, thank you for the clarification</p>",
        "id": 222756240,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1610647104
    }
]