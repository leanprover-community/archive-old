[
    {
        "content": "<p>What's the proper way to induct on a <code>fintype</code>? I'm trying to prove a lemma like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.tropical.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">tropical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trop_infi</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">with_top</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">trop</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">trop</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 257913843,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634472639
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.trunc_rec_empty_option\">docs#fintype.trunc_rec_empty_option</a>?</p>",
        "id": 257915284,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1634474032
    },
    {
        "content": "<p>That's close, but I am not sure how to deconstruct or generalize S here to employ that or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.induction_empty_option\">docs#fintype.induction_empty_option</a>.</p>",
        "id": 257915611,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634474372
    },
    {
        "content": "<p>Why don't you write that in terms of a finset instead?</p>",
        "id": 257915956,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634474711
    },
    {
        "content": "<p><code>infi</code> is only defined as over an indexed type.</p>",
        "id": 257916119,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634474863
    },
    {
        "content": "<p>or do you mean a doubly-coerced finset?</p>",
        "id": 257916135,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634474880
    },
    {
        "content": "<p>Oh nevermind, that's <code>inf</code> not <code>prod</code>. But you might still have an easier time with something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">trop_infi</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">with_top</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">trop</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">trop</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">s.eq_empty_or_nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">finset.sup'_eq_cSup_image</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 257916721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634475340
    },
    {
        "content": "<p>Oh, I mean Inf not Sup</p>",
        "id": 257917310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634475798
    },
    {
        "content": "<p>But anyway, prove the version about <code>finset.inf'</code> first</p>",
        "id": 257917436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634475912
    },
    {
        "content": "<p>A mathematician wouldn't induct on a fintype, they'd induct on the size of a fintype (because mathematicians only know about induction on nat). Why not prove \"for all n, fintype.card X = n -&gt; (what you want)\"</p>",
        "id": 257917841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634476252
    },
    {
        "content": "<p>Alternatively prove it for <code>fin n</code> and then prove it moves along bijections</p>",
        "id": 257918188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634476553
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">trop_inf</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">trop</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">trop</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">trop</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trop_finset_inf</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">with_top</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">trop</span> <span class=\"o\">(</span><span class=\"n\">s.inf</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">trop</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">finset.cons_induction</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">ha</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trop_Inf_image</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">with_top</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">trop</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">trop</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">s.eq_empty_or_nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">finset.inf'_eq_cInf_image</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">finset.inf'_eq_inf</span><span class=\"o\">,</span> <span class=\"n\">trop_finset_inf</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trop_infi</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">with_top</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">trop</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">trop</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">infi</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">set.image_univ</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">finset.coe_univ</span><span class=\"o\">,</span> <span class=\"n\">trop_Inf_image</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 257991406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634544341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20lemmas.20about.20infi/near/257917841\">said</a>:</p>\n<blockquote>\n<p>A mathematician wouldn't induct on a fintype</p>\n</blockquote>\n<p>Fixed</p>",
        "id": 257997178,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634547650
    },
    {
        "content": "<p>It would be nice to have some general notion of what it means for a <code>fintype</code>/<code>finset</code> operation to be an n-ary version of a binary operation with unit, and what it means for a function to carry one such operation to another, because the structure of arguments like these are all the same.</p>",
        "id": 257997578,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634547856
    },
    {
        "content": "<p>It also has to be a commutative operation. Wouldn't the notion be foldr for lists, and then fold and mapped fold for multisets and finsets? One issue we have is that not all multiset fold specializations exist in list (compare multiset.inf vs list.minimum). Also, finset big ops have an additional implied map/image step, compared to multisets. So the general notion could be some sort of metaprogram, that taking a proof of the \"correct binary behavior\", generates the associated list, multiset, finset, and fintype lemmas.</p>",
        "id": 258022420,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634561062
    },
    {
        "content": "<p>Associative, commutative, and with-identity operation; we'd need to unify <code>monoid</code>, <code>add_monoid</code>, and <code>semilattice_inf_bot</code> I think (or translate in a meta-program)</p>",
        "id": 258023450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634561508
    },
    {
        "content": "<p>Can't the <code>is_commutative</code> class be used for that generalisation?</p>",
        "id": 258060223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634575526
    },
    {
        "content": "<p>The generalization I'm referring to would be followed by generalizing <code>monoid_hom A B</code> to something like <code>monoid_hom A B (⊓) (+)</code> or <code>monoid_hom A B (⊓) ⊥ (+) 0</code></p>",
        "id": 258060631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634575673
    }
]