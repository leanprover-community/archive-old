[
    {
        "content": "<p>Ok, I'll ask something I could probably figure out on my own but seems to be eluding me: how does one <em>classically</em>, given a <code>finset A</code>, case over whether it is empty or not, and get some arbitrary element if it isn't?</p>",
        "id": 218177111,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606591305
    },
    {
        "content": "<p>Basically, if I can switch over <code>s.nonempty</code> I'm good, but I don't know how to switch!</p>",
        "id": 218177159,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606591346
    },
    {
        "content": "<p>is this what you're looking for? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.eq_empty_or_nonempty\">docs#finset.eq_empty_or_nonempty</a></p>",
        "id": 218177293,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606591587
    },
    {
        "content": "<p>Sure, along with a way to switch on either possibility...</p>",
        "id": 218177299,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606591624
    },
    {
        "content": "<p>Are you in term mode or tactic mode? In general you have many options for classical case splits, all boiling down to <code>classical.prop_decidable</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"k\">then</span> <span class=\"n\">trivial</span> <span class=\"k\">else</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218177301,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606591657
    },
    {
        "content": "<p>The <code>open_locale</code> line gives you a local instance that says \"every proposition is decidable.\"</p>",
        "id": 218177527,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606591689
    },
    {
        "content": "<p>term mode</p>",
        "id": 218177592,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606591742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/113489-new-members/topic/Choosing.2C.20classically/near/218177293\">said</a>:</p>\n<blockquote>\n<p>is this what you're looking for? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.eq_empty_or_nonempty\">docs#finset.eq_empty_or_nonempty</a></p>\n</blockquote>\n<p>Or, if you get the disjunction from here, you can use <code>or.elim</code> (term mode) or <code>cases</code> (tactic mode)</p>",
        "id": 218177617,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606591755
    },
    {
        "content": "<p>oh can you use that <code>hs</code> in the <code>if</code> statement?</p>",
        "id": 218177624,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606591773
    },
    {
        "content": "<p>brilliant! Here's what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">finset_take</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">finset</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"k\">then</span>\n     <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">classical.choice</span> <span class=\"n\">hs</span> <span class=\"n\">s</span> <span class=\"k\">in</span>\n     <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">finset_take</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">s.erase</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"k\">else</span> <span class=\"bp\">∅</span>\n</code></pre></div>",
        "id": 218177710,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606591858
    },
    {
        "content": "<p><code>classical.choice</code> doesn't seem to be in love with this particular version of <code>nonempty</code>. Should I use <code>inhabited</code>?</p>",
        "id": 218177734,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606591910
    },
    {
        "content": "<p>Can <code>or.elim</code> eliminate to <code>Type</code>?</p>",
        "id": 218177782,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606591950
    },
    {
        "content": "<p>(sorry for the question rapid fire)</p>",
        "id": 218177784,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606591967
    },
    {
        "content": "<p>Sorry, <code>or.by_cases</code>, not <code>or.elim</code></p>",
        "id": 218178058,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606592458
    },
    {
        "content": "<p>Not quite sure what the issue is there with <code>classical.choice</code>, mathlib favors <code>classical.some</code></p>",
        "id": 218178106,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606592543
    },
    {
        "content": "<p>But it should be basically the same</p>",
        "id": 218178118,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606592590
    },
    {
        "content": "<p>I have to run, maybe someone else can figure out what's wrong there</p>",
        "id": 218178119,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606592600
    },
    {
        "content": "<p>Thanks a bunch Rob!</p>",
        "id": 218178122,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606592620
    },
    {
        "content": "<p>Hope things are good!</p>",
        "id": 218178124,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606592630
    },
    {
        "content": "<p>This is progress, I think:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">finset_take</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n   <span class=\"k\">if</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"k\">then</span>\n     <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some</span> <span class=\"n\">hs</span> <span class=\"k\">in</span>\n     <span class=\"n\">finset.cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">finset_take</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">s.erase</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">sorry</span>\n  <span class=\"k\">else</span> <span class=\"bp\">∅</span>\n</code></pre></div>\n<p>Not quite sure how to fill in the <code>sorry</code>, which is asking for a proof that <code>a ∉ finset_take n (s.erase a)</code>.</p>",
        "id": 218178420,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1606593126
    },
    {
        "content": "<p>Oh, I guess you could also use <code>insert</code> instead of <code>finset.cons</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">finset_take</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n   <span class=\"k\">if</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"k\">then</span>\n     <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some</span> <span class=\"n\">hs</span> <span class=\"k\">in</span>\n     <span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">finset_take</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">s.erase</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"k\">else</span> <span class=\"bp\">∅</span>\n</code></pre></div>",
        "id": 218178446,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1606593233
    },
    {
        "content": "<p>why not just choose a <code>list</code> representative</p>",
        "id": 218178508,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606593332
    },
    {
        "content": "<p>I'm avoiding going down to lists, since it makes proofs a bit harder, it seems.</p>",
        "id": 218194462,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606622056
    },
    {
        "content": "<p>what properties do you want this <code>take</code> function to have?</p>",
        "id": 218196657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606626571
    },
    {
        "content": "<p>yeah, what's the defining properties (aka API) of your <code>take</code></p>",
        "id": 218196727,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606626717
    },
    {
        "content": "<p>I just want <code>take n s</code> to return exactly <code>n</code> distinct arbitrary members of <code>s</code>, if <code>n &lt; card s</code>. This is actually a first step, just to get a taste of classical reasoning. Second step is building all possible such sets, and then building some well-founded induction principles, if the existing one on <code>&lt;+</code> proves insufficient.</p>\n<p>This seems like a pretty common thing to do in additive combinatorics, along the lines of \"pick an arbitrary <code>n</code> element set from an <code>n+1</code> element set. Either this set has the <code>k</code> property or it doesn't in which case it has the <code>k-1</code> property by IH, and we'll carefully add a new element in it, by cases\".</p>",
        "id": 218243556,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606704472
    },
    {
        "content": "<p>I would suggest proving the theorem first, and then using choice to extract it as a function after:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_finset_take</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">t.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">s.card</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">t.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset.induction</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">ha</span> <span class=\"n\">IH</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">n</span> <span class=\"bp\">∅</span> <span class=\"o\">(</span><span class=\"n\">le_zero_iff_eq.1</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.card_insert_of_not_mem</span> <span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">te</span><span class=\"o\">,</span> <span class=\"n\">st</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_succ_iff.1</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">te</span><span class=\"o\">,</span> <span class=\"n\">finset.subset.trans</span> <span class=\"n\">st</span> <span class=\"o\">(</span><span class=\"n\">finset.subset_insert</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">finset.card_insert_of_not_mem</span> <span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">finset_take</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">s.card</span> <span class=\"k\">then</span> <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">exists_finset_take</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">∅</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">card_finset_take</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset_take</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset_take</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">classical.some_spec</span> <span class=\"o\">(</span><span class=\"n\">exists_finset_take</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finset_take_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset_take</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset_take</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">classical.some_spec</span> <span class=\"o\">(</span><span class=\"n\">exists_finset_take</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">finset.empty_subset</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218244810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606706483
    },
    {
        "content": "<p>Thanks a bunch <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ! I have to meditate on this a bit, and figure out what finset induction is, what <code>rintro</code> is, etc.</p>",
        "id": 218245178,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606707121
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rintro\">tactic#rintro</a> is like intro but you can do pattern matching while introducing variables, like the equation compiler</p>",
        "id": 218245234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606707165
    },
    {
        "content": "<p>Cool! Well this is all very fun. I'm sure I'll be back around when I try my next baby proof.</p>",
        "id": 218245280,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606707201
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.induction\">docs#finset.induction</a> is a convenient way to do induction on finsets by adding elements disjoint from everything so far, which seems relevant for your additive combinatorics example</p>",
        "id": 218245296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606707236
    },
    {
        "content": "<p>You could alternatively use <a href=\"https://leanprover-community.github.io/mathlib_docs/data/finset/basic.html#finset.exists_intermediate_set\">https://leanprover-community.github.io/mathlib_docs/data/finset/basic.html#finset.exists_intermediate_set</a> or the lemma after that :)</p>",
        "id": 218246575,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1606708821
    },
    {
        "content": "<p>which, unsurprisingly, I needed for doing combinatorics in Lean as well!</p>",
        "id": 218246601,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1606708861
    },
    {
        "content": "<p>Ah nice! I was already surprised that Mario's lemma <code>exists_finset_take</code> apparently didn't exist yet.</p>",
        "id": 218246666,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1606708936
    },
    {
        "content": "<p>Oh dang, I thought I had looked! Sheesh, these libs are quite detailed. I'm actually a little surprised no-one's tried Ramsey's theorem.</p>",
        "id": 218325019,
        "sender_full_name": "Cody Roux",
        "timestamp": 1606760607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116028\">@Cody Roux</span> I don't know anything about Ramsey, but it has been tried afaik</p>",
        "id": 218326138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606761127
    },
    {
        "content": "<p><a href=\"https://github.com/b-mehta/combinatorics/blob/extras/src/inf_ramsey.lean\">https://github.com/b-mehta/combinatorics/blob/extras/src/inf_ramsey.lean</a></p>",
        "id": 218326225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606761173
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 218326455,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1606761292
    }
]