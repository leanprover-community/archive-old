[
    {
        "content": "<p>I try to prove <code>0 &lt; 1 + 1</code> with</p>\n<div class=\"codehilite\"><pre><span></span>example : 0 &lt; 1 + 1 :=\nbegin\napply (int.lt_add_one_of_le (int.le_of_lt int.zero_lt_one))\nend\n</pre></div>\n\n\n<p>I get:</p>\n<div class=\"codehilite\"><pre><span></span>invalid apply tactic, failed to unify\n  0 &lt; 1 + 1\nwith\n  0 &lt; 1 + 1\nstate:\n⊢ 0 &lt; 1 + 1\n</pre></div>\n\n\n<p>?? Thanks!</p>",
        "id": 177992933,
        "sender_full_name": "Nicolás Ojeda Bär",
        "timestamp": 1570893092
    },
    {
        "content": "<p>By default, Lean thinks numerals are natural numbers, not integers</p>",
        "id": 177992981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570893125
    },
    {
        "content": "<p>the theorem statement is about nat, but the theorems you are applying are about ints</p>",
        "id": 177992986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570893130
    },
    {
        "content": "<p>Ha! I was faster than Mario! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 177992993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570893153
    },
    {
        "content": "<p>OK, got it ... I guess I have to look in the <code>nat</code> namespace then, right?</p>",
        "id": 177992997,
        "sender_full_name": "Nicolás Ojeda Bär",
        "timestamp": 1570893177
    },
    {
        "content": "<p>You can also coerce the numerals to ints:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">lt_add_one_of_le</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_one</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 177993004,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1570893189
    },
    {
        "content": "<p>there is a tactic <code>norm_num</code> for solving problems like this</p>",
        "id": 177993020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570893198
    },
    {
        "content": "<p>That was my next message.</p>",
        "id": 177993022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570893204
    },
    {
        "content": "<p>and the next one.</p>",
        "id": 177993024,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570893208
    },
    {
        "content": "<p><code>dec_trivial</code> will also work here</p>",
        "id": 177993027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570893212
    },
    {
        "content": "<p>I spent too much time celebrating my first successful race.</p>",
        "id": 177993031,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570893230
    },
    {
        "content": "<p>lol</p>",
        "id": 177993032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570893235
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_of_lt</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_one</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 177993116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570893342
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 177993250,
        "sender_full_name": "Nicolás Ojeda Bär",
        "timestamp": 1570893498
    },
    {
        "content": "<p>Note that some theorems about <code>nat</code> are generic and don't have a prefix, like <code>le_of_lt</code> (there is no <code>nat.le_of_lt</code>)</p>",
        "id": 177993275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570893587
    },
    {
        "content": "<p>only theorems that are \"uniquely about <code>nat</code>\" have a <code>nat</code> prefix</p>",
        "id": 177993321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570893621
    },
    {
        "content": "<p><code>int.le_of_lt</code> is an exception because it is used for bootstrapping before <code>le_of_lt</code> is available</p>",
        "id": 177993337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570893668
    },
    {
        "content": "<p>Is there a way I can tell Lean to print some type annotations so that I can see the difference between nat and int ?</p>",
        "id": 177993512,
        "sender_full_name": "Nicolás Ojeda Bär",
        "timestamp": 1570893905
    },
    {
        "content": "<p>not without it getting a lot uglier</p>",
        "id": 177993521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570893924
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- @has_lt.lt nat nat.has_lt 0 (@has_add.add nat nat.has_add 1 1) : Prop</span>\n</pre></div>",
        "id": 177993573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570893973
    },
    {
        "content": "<p>In that specific case, you could use <code>set_option pp.numerals false</code>, but only because we are talking about numerals.</p>",
        "id": 177993580,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570894006
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">numerals</span> <span class=\"n\">false</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- has_zero.zero ℕ &lt; has_one.one ℕ + has_one.one ℕ : Prop</span>\n</pre></div>",
        "id": 177993603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570894064
    },
    {
        "content": "<p>OK, got it. Another question : what is the simplest way of lifting properties (eg inequalities) about N to with_bot N ?</p>",
        "id": 177993692,
        "sender_full_name": "Nicolás Ojeda Bär",
        "timestamp": 1570894172
    },
    {
        "content": "<p>Could you give a specific example lemma?</p>",
        "id": 177993749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570894209
    },
    {
        "content": "<p>For example, given the proof of <code>0 &lt; 1 + 1</code> (for <code>nat</code>), I need it to apply to elements of <code>with_bot nat</code>.</p>",
        "id": 177993831,
        "sender_full_name": "Nicolás Ojeda Bär",
        "timestamp": 1570894389
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">left</span>\n</pre></div>",
        "id": 177993837,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1570894435
    },
    {
        "content": "<p>that depends on how you have <code>0</code> and <code>1+1</code> expressed in <code>with_bot nat</code></p>",
        "id": 177994105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570894837
    },
    {
        "content": "<p>but it's probably also <code>dec_trivial</code></p>",
        "id": 177994109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570894862
    },
    {
        "content": "<p>I just did an hour of marking so was in a grumpy mood, and then I popped back here just before going out and 20 seconds later was laughing out loud.</p>",
        "id": 177994122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570894890
    },
    {
        "content": "<p><code>by repeat { constructor }</code> is a vast generalization of Kenny's proof</p>",
        "id": 177994377,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570895235
    },
    {
        "content": "<blockquote>\n<p><code>by repeat { constructor }</code> is a vast generalization of Kenny's proof</p>\n</blockquote>\n<p>But it sounds much less like a <a href=\"https://www.youtube.com/watch?v=wZv62ShoStY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=wZv62ShoStY\">dance move</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"wZv62ShoStY\" href=\"https://www.youtube.com/watch?v=wZv62ShoStY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=wZv62ShoStY\"><img src=\"https://i.ytimg.com/vi/wZv62ShoStY/default.jpg\"></a></div>",
        "id": 177994473,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570895394
    },
    {
        "content": "<p>True, I hadn't thought about the choreographic interpretation of constructive type theory</p>",
        "id": 177994544,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570895464
    },
    {
        "content": "<p>Returning to the <code>with_bot</code>. There is a principled way to deal with those kind of things, using <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#norm_cast\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#norm_cast\">norm_cast</a> but it seems the relevant tagging has not been done for <code>with_bot</code>. You can write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_group</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elim_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">coe_one&#39;</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elim_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">coe_zero&#39;</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">move_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">add_coe&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">elim_cast</span><span class=\"o\">]</span> <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">coe_lt_coe</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But everything before the example should be in mathlib (feel free to open a PR!)</p>",
        "id": 177995430,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570896790
    },
    {
        "content": "<blockquote>\n<p>True, I hadn't thought about the choreographic interpretation of constructive type theory</p>\n</blockquote>\n<p>Is that the Choreo-Howard interpretation?</p>",
        "id": 178003858,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570909899
    }
]