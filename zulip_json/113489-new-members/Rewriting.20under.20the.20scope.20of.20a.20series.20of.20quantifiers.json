[
    {
        "content": "<p>If I have a hypothesis of the form <code>h: ∀ a : X, ∃ b : X , P a b</code> and a lemma <code>L: ∀ a:X, ∀ b:X, P a b = Q a b</code>, what's the quickest way to prove the goal <code>∀ a : X, ∃ b : X , Q a b</code>?  I know I can prove it by judicious use of <code>intro</code>, <code>cases</code>, <code>use</code>, and <code>specialise</code>, but is there a quicker way — for example, a version of <code>rw</code>?</p>",
        "id": 249231914,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1628773703
    },
    {
        "content": "<p>Try <code>simp_rw only [L] at h</code></p>",
        "id": 249232219,
        "sender_full_name": "Reid Barton",
        "timestamp": 1628773845
    },
    {
        "content": "<p>Thanks!  Lean wasn't happy with <code>simp_rw only [L]</code>, but either of <code>simp_rw [L]</code> or <code>simp only [L]</code> work.</p>",
        "id": 249233803,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1628774604
    },
    {
        "content": "<p>Thanks again for this, you've saved me a lot of tedious work!  :)</p>",
        "id": 249238778,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1628777171
    },
    {
        "content": "<p>As a follow-up to the above question: is there a quick way to prove the following?<br>\n<code>example (X : Type*) (R : X → X → Prop) (P Q : X → Prop):\n  (∀ x : X, P x → ∀ y : X, Q y → R x y) \n  ↔ \n  (∀ y : X, Q y → ∀ x : X, P x → R x y) </code></p>\n<p>If the <code>P x</code> and <code>Q y</code> terms weren't there then <code>forall_swap</code> would work, but I couldn't find a theorem or a tactic that solves this (and <code>library_search</code> doesn't find anything).</p>",
        "id": 249560072,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1629101353
    },
    {
        "content": "<p><code>tauto</code></p>",
        "id": 249561135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629102184
    },
    {
        "content": "<p><code>hint</code></p>",
        "id": 249561161,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629102210
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 249561175,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629102228
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 249562306,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1629103183
    }
]