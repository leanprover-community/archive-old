[
    {
        "content": "<p><em>The following question is not about the specific types I'm showing, but rather about how to approach formalization. Excuse the vaguery.</em></p>\n<p>Say we have a type and some function for it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">network</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">network.count</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">network</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.l.length</span>\n</code></pre></div>\n<p>We often need to use <code>network</code>s with some specific constraints, so we define a new type to make this more ergonomic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">constrained_network</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">underlying</span> <span class=\"o\">:</span> <span class=\"n\">network</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">constraint1</span> <span class=\"o\">:</span> <span class=\"n\">underlying.count</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">constraint2</span> <span class=\"o\">:</span> <span class=\"n\">underlying.count</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Quite naturally, it would be nice to be able to use the <code>network.count</code> on this type, but since <code>constrained_network</code> is a different type, we need to lift the implementation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">constrained_network.count</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">constrained_network</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">constrained_network</span> <span class=\"o\">:=</span>\n  <span class=\"n\">c.underlying.count</span>\n</code></pre></div>\n<p>Say we have a hundred properties like <code>count</code>, then we'll need to lift all of these, which is quite a nuisance.</p>\n<p>So instead we decide to formalize <code>constrained_network</code> as a subtype with accessors on it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">constrained_network</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">network</span> <span class=\"bp\">//</span> <span class=\"n\">n.count</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">n.count</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">constrained_network.constaint1</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">constrained_network</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c.val.count</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">c.property.left</span>\n<span class=\"kd\">def</span> <span class=\"n\">constrained_network.constaint2</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">constrained_network</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c.val.count</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">c.property.right</span>\n</code></pre></div>\n<p>But even then we always have to dig down to the underlying network to use <code>count</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">constrained_network</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">c.val.count</span>\n</code></pre></div>\n<p>Is there some approach to building up concrete types from more general ones (like <code>constrained_network</code> from <code>network</code>), such that there is some form of inheritance of properties from the more general type? Or is this fundamentally not possible, as functions like the following couldn't be trivially lifted?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Can't easily be adapted to `constrained_network`, as we need to make sure that the constraints aren't broken.</span>\n<span class=\"kd\">def</span> <span class=\"n\">network.add1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">network</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">network</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span> <span class=\"o\">::</span> <span class=\"n\">n.l</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>In other words, am I fundamentally stuck with manually adding new (duplicate) definitions for the more constrained types?</p>",
        "id": 245845588,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626191534
    },
    {
        "content": "<p>Have you tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">constrained_network</span> <span class=\"kd\">extends</span> <span class=\"n\">network</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">constraint1</span> <span class=\"o\">:</span> <span class=\"n\">count</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">constraint2</span> <span class=\"o\">:</span> <span class=\"n\">count</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 245846482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626191943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nThat might be the solution I'm looking for.<br>\nThere's one nitpick I have with it right now though:<br>\nI can't use <code>network.count</code> in the definition of <code>constrained_network</code>, since there's no available <code>network</code> upon which to use the property.<br>\nSo instead I'd have to \"unwrap\" <code>network.count</code> and write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">constrained_network</span> <span class=\"kd\">extends</span> <span class=\"n\">network</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">constraint1</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">constraint2</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I think this is fundamentally not solvable though, as otherwise Lean would have to provide some instance of <code>network</code> during the definition of <code>constrained_network </code>, which would be very strange.</p>",
        "id": 245847962,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626192571
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">constrained_network</span> <span class=\"kd\">extends</span> <span class=\"n\">network</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">constraint1</span> <span class=\"o\">:</span> <span class=\"n\">to_network.count</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">constraint2</span> <span class=\"o\">:</span> <span class=\"n\">to_network.count</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 245849372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626193198
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">constrained_network</span> <span class=\"kd\">extends</span> <span class=\"n\">underlying</span> <span class=\"o\">:</span> <span class=\"n\">network</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">constraint1</span> <span class=\"o\">:</span> <span class=\"n\">underlying.count</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">constraint2</span> <span class=\"o\">:</span> <span class=\"n\">underlying.count</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 245849448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626193214
    },
    {
        "content": "<p>Oh brilliant! :D<br>\nThanks</p>",
        "id": 245849476,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626193233
    },
    {
        "content": "<p>Note you'll get different behavior with and without <code>set_option old_structure_cmd true</code> - you might want to try both and see which behaves best for you</p>",
        "id": 245849581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626193290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Building.20up.20types/near/245849581\">said</a>:</p>\n<blockquote>\n<p>Note you'll get different behavior with and without <code>set_option old_structure_cmd true</code> - you might want to try both and see which behaves best for you</p>\n</blockquote>\n<p>Is that a Lean 4 thing? I'm still on Lean 3.</p>",
        "id": 245849953,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626193445
    },
    {
        "content": "<p>No, that's a lean3 thing</p>",
        "id": 245850038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626193482
    },
    {
        "content": "<p>Lean4 has no old structures. Lean3 has them behind a <code>section</code>-local flag</p>",
        "id": 245850055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626193493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 245935322,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626253602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as unresolved.</p>",
        "id": 245935331,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626253616
    }
]