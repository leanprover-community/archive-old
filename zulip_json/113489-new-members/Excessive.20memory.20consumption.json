[
    {
        "content": "<p>I'm working on a git branch of mathlib. After I eddited an existing file (algebra/group/units.lean), I opened my own lean file, and lean didn't respond and said the following error at import part:<br>\n\"invalid import: data.option.defs<br>\nexcessive memory consumption detected at 'expression traversal' (potential solution: increase memory consumption threshold)\"<br>\nHow should I do?<br>\nWhat I did is: restart VS code and Lean, commit changes and execute <code>leanproject mk-cache</code> and <code>leanproject get-cache</code> in git bash.</p>",
        "id": 281799906,
        "sender_full_name": "Haruhisa Enomoto",
        "timestamp": 1652175532
    },
    {
        "content": "<p><code>leanproject mk-cache</code> just saves the files you currently have compiled</p>",
        "id": 281800656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652176074
    },
    {
        "content": "<p>When you run <code>get-cache</code> does it say \"fetching remote oleans\" or \"using local oleans\"</p>",
        "id": 281800706,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652176091
    },
    {
        "content": "<p>It says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span> <span class=\"n\">for</span> <span class=\"mi\">25</span><span class=\"n\">a62a84e1</span>\n  <span class=\"n\">locally...</span>\n  <span class=\"n\">Found</span> <span class=\"kn\">local</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Using</span> <span class=\"n\">matching</span> <span class=\"n\">cache</span>\n<span class=\"n\">Applying</span> <span class=\"n\">cache</span>\n  <span class=\"n\">files</span> <span class=\"n\">extracted</span><span class=\"o\">:</span> <span class=\"mi\">2421</span> <span class=\"o\">[</span><span class=\"mi\">01</span><span class=\"o\">:</span><span class=\"mi\">03</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"bp\">.</span><span class=\"mi\">92</span><span class=\"bp\">/</span><span class=\"n\">s</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>so probably it used local oleans.</p>",
        "id": 281800927,
        "sender_full_name": "Haruhisa Enomoto",
        "timestamp": 1652176246
    },
    {
        "content": "<p>Should I use <code>leanproject build</code>?</p>",
        "id": 281801089,
        "sender_full_name": "Haruhisa Enomoto",
        "timestamp": 1652176347
    },
    {
        "content": "<p>You've poisoned your cache with useless oleans</p>",
        "id": 281801529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652176635
    },
    {
        "content": "<p><code>leanproject build</code> would create new ones, but will take a long time</p>",
        "id": 281801544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652176657
    },
    {
        "content": "<p>Have you pushed your changes to github at all? If so, then it can build you a better cache (without using your CPU time and electricity!)</p>",
        "id": 281801636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652176705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, should <code>mk-cache</code> give a warning / overridable error if the oleans are out of date? Is \"out of date oleans\" something we can actually detect right now?</p>",
        "id": 281801811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652176812
    },
    {
        "content": "<p>Thanks, so I shouldn't have used<code>leanproject mk-cache</code>.<br>\nNow I pushed it to github, so what should I do next?</p>",
        "id": 281806727,
        "sender_full_name": "Haruhisa Enomoto",
        "timestamp": 1652179964
    },
    {
        "content": "<p>I used <code>leanproject --force-download get-cache</code>, and problem went away! Thanks!</p>",
        "id": 281810206,
        "sender_full_name": "Haruhisa Enomoto",
        "timestamp": 1652182383
    },
    {
        "content": "<p>I forgot that option existed; indeed, that's exactly the right solution</p>",
        "id": 281823428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652189127
    },
    {
        "content": "<p><code>mk-cache</code> is mainly useful for if you started a local build, but then decide to switch branch to work on something else. When you reload the cache, you'll be able to resume your build where you left off</p>",
        "id": 281823539,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652189174
    },
    {
        "content": "<p>Local builds are often useful if you edit <code>really_basic_file.lean</code> and run <code>lean --make mostly_basic_file.lean</code>;  rather than pushing to github and waiting an hour or two for it to build everything</p>",
        "id": 281823658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652189239
    },
    {
        "content": "<p>Just for future reference, you could always just delete the poisoned cache directly. On Linux they are stored in <code>~/.mathlib</code>. I'm not sure where they are on another OS.</p>",
        "id": 281825992,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1652190414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Excessive.20memory.20consumption/near/281801811\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span>, should <code>mk-cache</code> give a warning / overridable error if the oleans are out of date? Is \"out of date oleans\" something we can actually detect right now?</p>\n</blockquote>\n<p>I never use this command myself. I'm open to any modification.</p>",
        "id": 281851423,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1652200569
    },
    {
        "content": "<p>What's the usual way when modifying many imported files?<br>\nI modified such a file again, and I run <code>lean --make</code> for it, but lean was very slow and I had to commit and push it to github and wait.<br>\nIs this a usual case?</p>",
        "id": 282402700,
        "sender_full_name": "Haruhisa Enomoto",
        "timestamp": 1652610735
    },
    {
        "content": "<p>If you change files that many other files depend on, yeah, that's common</p>",
        "id": 282402786,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1652610898
    },
    {
        "content": "<p>OK, I didn't know that, thanks!</p>",
        "id": 282405089,
        "sender_full_name": "Haruhisa Enomoto",
        "timestamp": 1652614393
    },
    {
        "content": "<p>I just installed lean and mathlib from the vs code extension, and get the same error when opening 00_first_proofs.lean in the tutorials directory; it runs for a while then times out. The leanproject binary doesn't seem to be included in .elan/bin so I can't download a cache.</p>",
        "id": 282854688,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1652911089
    },
    {
        "content": "<p>You need to follow installation instructions from <a href=\"https://leanprover-community.github.io/get_started.html#regular-install\">https://leanprover-community.github.io/get_started.html#regular-install</a> if you want the full tooling</p>",
        "id": 282855483,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1652911499
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 282855517,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1652911512
    }
]