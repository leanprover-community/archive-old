[
    {
        "content": "<p>I'm a new Lean user and I'm trying to write a proposition about lists using an element-wise strategy. The following is a toy example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sorted</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c.length</span> <span class=\"bp\">→</span> <span class=\"n\">list.nth_le</span> <span class=\"n\">c</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n<p>nth_le returns a type <code>(x &lt; c.length) → ℕ</code>. How do I use my implication assumption to retrieve the natural number value? By extension, what if I needed the expression <code>(x-1 &lt; c.length)</code>? Thanks.</p>",
        "id": 211583095,
        "sender_full_name": "Chase Norman",
        "timestamp": 1601358426
    },
    {
        "content": "<p>I think the computer scientists know better ways to say a list is sorted, but you could put <code>\\forall (x : nat) (h : x &lt; c.length), ...</code></p>",
        "id": 211583725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601359353
    },
    {
        "content": "<p>Yeah this is a toy example, I understand it's not necessary in this case. However I would like to know how to do it for a more complicated example.</p>",
        "id": 211583852,
        "sender_full_name": "Chase Norman",
        "timestamp": 1601359552
    },
    {
        "content": "<p>My method scales. Do you know about pi types?</p>",
        "id": 211583906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601359607
    },
    {
        "content": "<p>A pi type is more general than a function because the type of the output can depend on the input term. That's all I'm using here</p>",
        "id": 211583934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601359668
    },
    {
        "content": "<p>Oh I understand what you're saying now, thanks so much! As a side question, how many potential instances of <code>x &lt; c.length</code> can exist? Are all instances of this Prop equivalent? My guess is that there will be no such element of the type when <code>x &gt;= c.length</code> and 1 such element when <code>x &lt; c.length</code>. </p>\n<p>My understanding of pi types is that they are the type of a lambda function that receives the proper input and output types. Is this a correct understanding?</p>",
        "id": 211584217,
        "sender_full_name": "Chase Norman",
        "timestamp": 1601360010
    },
    {
        "content": "<p>All proofs of a proposition are equal by definition in Lean so there's so issue there. Your guess is the right model. A pi type is exactly what you have here, it's just a statement like \"for all n in S, n&gt;=37\" where the type n&gt;=37 of the conclusion depends on the input term n</p>",
        "id": 211584370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601360223
    }
]