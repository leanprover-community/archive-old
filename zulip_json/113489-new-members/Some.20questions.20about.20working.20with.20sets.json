[
    {
        "content": "<p>I want to define a family of functions <code>f : I -&gt; \\a -&gt; \\b</code>. <br>\nThe first question is if it is best to choose <code>I : Type u</code>, or <code>I : set \\g</code>, where <code>g : Type u</code>?<br>\nWhat determines if I shoud work with sets and subsets, or types and subtypes?<br>\nNow let's say I want to restrict to a smaller set of indices. This means that if <code>f : I -&gt; \\b</code> , with <code>I \\sub J</code>, then I should be able to create a restriction of f to J.<br>\nI have found set.restrict which restricts a function defined on a type to a function defined on a subset of the type, but how can I even define a function on something which is not of type Type u.<br>\nIs there a ressource which explains how sets and subsets work and interact?</p>",
        "id": 213778620,
        "sender_full_name": "Golol",
        "timestamp": 1603111243
    },
    {
        "content": "<p>You should prefer <code>I : Type u</code></p>",
        "id": 213779376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603111683
    },
    {
        "content": "<p>or possibly <code>I : Sort u</code> if possible</p>",
        "id": 213779424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603111694
    },
    {
        "content": "<p>Instead of doing restrictions, you should pre-compose with an injection <code>I -&gt; J</code></p>",
        "id": 213779532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603111757
    },
    {
        "content": "<p>these are more generally applicable</p>",
        "id": 213779556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603111767
    },
    {
        "content": "<p>Each function in Lean knows its domain: <code>f : α → β</code> has domain <code>α</code>. If you want to restrict it to a subset of the domain, then you either introduce <code>s : set α</code> and use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.restrict\">docs#set.restrict</a>, or as <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> suggests pre-compose it with an injection <code>g : γ → α</code>. For the injection, you can either use a bundled <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.embedding\">docs#function.embedding</a>, or <code>(g : γ → α) (hg : injective g)</code>.</p>",
        "id": 213779767,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603111876
    },
    {
        "content": "<p>Which approach works best for you depends on what exactly do you want to say in Lean.</p>",
        "id": 213779921,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603111948
    },
    {
        "content": "<p>Generally speaking you will eventually want both forms, but it's easier to get the subset version as a consequence of the type version than the other way around, and the type version also has fewer moving parts so is generally easier to prove too</p>",
        "id": 213779960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603111971
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathematics_in_lean/sets_functions_and_relations.html\">https://leanprover-community.github.io/mathematics_in_lean/sets_functions_and_relations.html</a></p>",
        "id": 213780297,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603112131
    },
    {
        "content": "<p>I think I will go with an injection for now. But this gave me some strange questions about sets. <br>\nFor example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">δ</span>\n<span class=\"kd\">constant</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">D</span>\n</code></pre></div>\n\n<p>The type of b is uparrow D, so as I understand there is a coercion happening. But in this case could I assume b : δ?</p>",
        "id": 213780899,
        "sender_full_name": "Golol",
        "timestamp": 1603112412
    },
    {
        "content": "<p>yes, because there is another coercion happening</p>",
        "id": 213781114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603112517
    },
    {
        "content": "<p><code>b : \\u D</code> but <code>\\u b : delta</code></p>",
        "id": 213781187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603112533
    },
    {
        "content": "<p><code>b</code> is a pair of <code>(b' : δ)</code> and <code>hb' : b' ∈ D</code></p>",
        "id": 213782037,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603112972
    },
    {
        "content": "<p>Lean can coerce it to an element of <code>δ</code> forgetting about <code>hb'</code>.</p>",
        "id": 213782128,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603113009
    },
    {
        "content": "<p>If you are using the word \"set\" as in set theory then this is the wrong way to think about things. <code>S : set alpha</code> means mathematically that S is a subset of alpha, but S is not a type, it's a term, and functions go from types to types, so you should stick to types if you can and then you can avoid the coercions</p>",
        "id": 213848379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603142736
    },
    {
        "content": "<p>If you want an S representing a subset of alpha and you want to think of it as a type then you could use a subtype. But depending on what you're doing, \"categorifying\" and considering injections from other types rather than subsets or subtypes might be the easiest thing to do</p>",
        "id": 213848622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603142857
    },
    {
        "content": "<p>Note that distinct types are disjoint by definition, so when translating informal mathematics into type theory one sometimes has to think a little to figure out how to express things (in the sense that as someone who was brought up with ZFC I had to learn some tricks)</p>",
        "id": 213848937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603143019
    },
    {
        "content": "<p>In particular I \\subset J doesn't make sense for types</p>",
        "id": 213848985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603143041
    },
    {
        "content": "<p>I have a silly question... I have <code>ht : t \\in {b : set \\a : P b}</code>. How do I get <code>h : P </code> from this?</p>",
        "id": 213859480,
        "sender_full_name": "Golol",
        "timestamp": 1603150319
    },
    {
        "content": "<p>what is the type of everything? Can you post fully working code?</p>",
        "id": 213859548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603150353
    },
    {
        "content": "<p><code>{b : set \\a : P b}</code> makes no sense to me</p>",
        "id": 213859581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603150403
    },
    {
        "content": "<p>and neither does <code>h : P</code></p>",
        "id": 213859610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603150428
    },
    {
        "content": "<p>So the exact hypothesis would be<br>\n<code>ht: t ∈ {B : set (I → β) | ∃ (A : set β) (ha : m.is_measurable' A) (i : I), B = cylinder I m A ha i}</code>.<br>\nSorry, the way I wrote it wasn't correct, I used : instead of |</p>",
        "id": 213859619,
        "sender_full_name": "Golol",
        "timestamp": 1603150439
    },
    {
        "content": "<p>and I want <code>h : ∃ (A : set β) (ha : m.is_measurable' A) (i : I), t = cylinder I m A ha i</code></p>",
        "id": 213859679,
        "sender_full_name": "Golol",
        "timestamp": 1603150472
    },
    {
        "content": "<p>that's equal to <code>ht</code> by definition</p>",
        "id": 213859709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603150501
    },
    {
        "content": "<p>you can just do cases on ht</p>",
        "id": 213859732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603150518
    },
    {
        "content": "<p>ah hmmm</p>",
        "id": 213859733,
        "sender_full_name": "Golol",
        "timestamp": 1603150521
    },
    {
        "content": "<p><code>t \\in {a : X | P a}</code> is just syntax sugar for <code>P t</code></p>",
        "id": 213859814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603150569
    },
    {
        "content": "<p>ah very nice, thanks. I knew it had to be something trivial.</p>",
        "id": 213860024,
        "sender_full_name": "Golol",
        "timestamp": 1603150781
    },
    {
        "content": "<p>We have a partial order on measurable spaces, where<code> m \\le n </code> basically stands for <code>m.measurable' \\le n.measurable'</code>. I see the field .le in the constructor of the partial order but I don't know how to use it for hle. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hex_h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">measurable_space.comap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_measurable'</span> <span class=\"n\">t</span>\n<span class=\"n\">hle</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">measurable_space.comap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">measurable_space.comap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">measurable_space.comap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_measurable'</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 213864763,
        "sender_full_name": "Golol",
        "timestamp": 1603154880
    },
    {
        "content": "<p>I don't understand your question. But <code>hle</code> unfolds to a forall statement about sets being measurable, so most likely <code>have := hle t</code> should show you more information about what the real type of that thing is</p>",
        "id": 213866908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603157424
    },
    {
        "content": "<p>Something seems off about <code>hle</code> though, because the lhs is missing an <code>m</code>, that is actually an inequality of functions</p>",
        "id": 213866937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603157475
    },
    {
        "content": "<p>I was tired when I typed it yesterday, a better description of the situation should the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"bp\">\\</span><span class=\"n\">b</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">\\</span><span class=\"n\">b</span>\n<span class=\"n\">hex_h</span> <span class=\"o\">:</span> <span class=\"n\">m.is_measurable'</span> <span class=\"n\">t</span>\n<span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">\\</span><span class=\"n\">le</span> <span class=\"n\">n</span>\n<span class=\"o\">(</span><span class=\"n\">although</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">technically</span> <span class=\"n\">more</span> <span class=\"n\">like</span> <span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"bp\">\\</span><span class=\"n\">lambda</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">\\</span><span class=\"n\">le</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|-</span> <span class=\"n\">n.is_measurable'</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 213884647,
        "sender_full_name": "Golol",
        "timestamp": 1603180196
    },
    {
        "content": "<p>it's generally better to make a targeted <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> than sketch a tactic state</p>",
        "id": 213886181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603181130
    },
    {
        "content": "<p>Yes you're right sorry, I should'Ve put more thought into this one because I just realized I was basically missing a character <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 213886809,
        "sender_full_name": "Golol",
        "timestamp": 1603181573
    },
    {
        "content": "<p>Making the MWE is a very good way to put that kind of thought in.</p>",
        "id": 213888616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603182721
    }
]