[
    {
        "content": "<p>I'm trying to work with free rings, but I'm getting some errors I don't understand related to type class instances. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">free_ring</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">symb</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">symb</span>\n\n<span class=\"n\">def</span> <span class=\"n\">my_free_ring</span> <span class=\"o\">:=</span> <span class=\"n\">free_ring</span> <span class=\"err\">$</span> <span class=\"n\">symb</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">--Lean complains if I don&#39;t do this</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"err\">$</span> <span class=\"n\">my_free_ring</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">my_free_ring</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">my_free_ring</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">my_free_ring</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"n\">def</span> <span class=\"n\">my_ideal</span> <span class=\"o\">:=</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">my_free_ring</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">}</span> <span class=\"c1\">--fails</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">n : ℕ</span>\n<span class=\"cm\">⊢ semiring ↥{x : my_free_ring n | true}</span>\n\n<span class=\"cm\">don&#39;t know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">n : ℕ</span>\n<span class=\"cm\">⊢ Type ?</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>Why is Lean trying to coerce a set to semiring? What does the second error mean?</p>",
        "id": 204130956,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1594927513
    },
    {
        "content": "<p>Well if you fix the first error the second might go away, so lets do that first. Lean is telling you that it is trying to interpret <code> {x : my_free_ring n | true} </code> as a semimodule which is because the function <code>submodule.span</code> takes a semimodule, the underlying module you are taking the submodule of, as its first argument, then a set of terms, so you probably want <code>submodule.span (my_free_ring n) {x : my_free_ring n | true} </code> instead.</p>",
        "id": 204131505,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594927777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284997\">@Zhangir Azerbayev</span> are you sure you don't want to work with the \"canonical\" type of size <code>n</code>, namely <code>fin n</code>, rather than <code>{i : ℕ // 1 ≤ i ∧ i ≤ n}</code>? You only have one inequality to deal with, not two.</p>",
        "id": 204142878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594933520
    },
    {
        "content": "<p>Regarding the first <code>instance : ring (my_free_ring n)</code> line --- you can just replace this by writing <code>@[derive ring]</code> before <code>def my_free_ring</code>.</p>",
        "id": 204164022,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594950918
    },
    {
        "content": "<p>It has exactly the same effect.</p>",
        "id": 204164023,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594950922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I wanted to start all my indices at 1 because that's how mathematicians do it, but 100 or so lines later I did realize that choice makes things cluttered and switched to <code>fin n</code>.</p>",
        "id": 204301734,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1595080902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284997\">@Zhangir Azerbayev</span> you are a quick learner :-)</p>",
        "id": 204303464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595084026
    }
]