[
    {
        "content": "<p>Dear All,</p>\n<p>motivated by <a href=\"#narrow/stream/144837-PR-reviews\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews</a>, here is a proposal at a definition of <code>non_zero_divisors</code>.  Any comments are more than welcome!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_non_zero_divisor</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 226659801,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613570600
    },
    {
        "content": "<p>These are sometimes called <code>regular</code> elements, right?</p>",
        "id": 226660323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613570845
    },
    {
        "content": "<p>Should we distinguish <code>left_regular</code> and <code>right_regular</code>?</p>",
        "id": 226660358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613570858
    },
    {
        "content": "<p>I am happy to distinguish left and right, although I do not have a specific non-commutative application in mind.</p>\n<p>Calling these elements <code>regular</code> works well for me!  After all, I would like to see <code>regular_sequences</code>!</p>",
        "id": 226660701,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613570996
    }
]