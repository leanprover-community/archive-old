[
    {
        "content": "<p>A coercion from a submodule to its underlying set is defined in <code>algebra/module</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>However, the type inference system doesn't seem to use it. Instead, it is looking for <code>has_coe_to_fun (submodule α β)</code>. This sometimes results in a timeout. See the following example. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- (deterministic) timeout</span>\n<span class=\"c1\">-- [class_instances] (0) ?x_3 : has_coe_to_fun</span>\n  <span class=\"c1\">-- (@submodule ℝ α (@normed_ring.to_ring ℝ (@normed_field.to_normed_ring ℝ real.normed_field)) _inst_1</span>\n    <span class=\"c1\">-- (@vector_space.to_module ℝ α (@normed_field.to_discrete_field ℝ real.normed_field) _inst_1 _inst_2))</span>\n    <span class=\"c1\">-- ...</span>\n</pre></div>\n\n\n<p>Does that mean we need to add the following instance?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 172041258,
        "sender_full_name": "Joe",
        "timestamp": 1564496026
    },
    {
        "content": "<p>did you try writing <code>(\\u K : set A)</code>?</p>",
        "id": 172084438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564528126
    }
]