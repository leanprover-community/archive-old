[
    {
        "content": "<p><code>show_term</code> suggests <code>Try this: exact (f F).ker.fintype</code>, but this is incorrect when changing it to this. What should be the correct term inferred?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">fintype</span> <span class=\"n\">monoid_hom</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">units.ext_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 246601363,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626792694
    },
    {
        "content": "<p>It works fine for me.</p>",
        "id": 246601502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626792743
    },
    {
        "content": "<p>What error are you getting?</p>",
        "id": 246601552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626792768
    },
    {
        "content": "<p>It works for me too now!</p>",
        "id": 246601613,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626792798
    },
    {
        "content": "<p>How can I construct the last instance, do I need more assumptions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">fintype</span> <span class=\"n\">monoid_hom</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">units.ext_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">in_ker_dec</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">):</span>\n<span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">decidable_mem_ker</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">in_ker_carrier_dec</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">):</span>\n<span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker.carrier</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 246603328,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626793392
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">fintype</span> <span class=\"n\">monoid_hom</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">units.ext_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">in_ker_dec</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">):</span>\n<span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">decidable_mem_ker</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">in_ker_carrier_dec</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">):</span>\n<span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker.carrier</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">decidable</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246603541,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626793484
    },
    {
        "content": "<p>But this breaks the API, so we should try to find a better way</p>",
        "id": 246603803,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626793595
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">fintype</span> <span class=\"n\">monoid_hom</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">units.ext_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">in_ker_dec</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">):</span>\n<span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">decidable_mem_ker</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">in_ker_carrier_dec</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">):</span>\n<span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker.carrier</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">in_ker_dec</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 246603885,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626793627
    },
    {
        "content": "<p>I'm not sure why you need both <code>in_ker_dec</code> and <code>in_ker_carrier_dec</code>. In practice you will never write <code>x ∈ (f F).ker.carrier</code>, but rather you should always use <code>x ∈ (f F).ker</code></p>",
        "id": 246603974,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626793673
    },
    {
        "content": "<p>as I need to prove something about <code>card</code>, the story is complicated..<br>\nThanks for your solution!</p>",
        "id": 246604294,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626793790
    },
    {
        "content": "<p>Could you explain why the first one breaks API?</p>",
        "id": 246604412,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626793818
    },
    {
        "content": "<p>well, because to use <code>change</code> I had to know the definitions. It's usually better to use the API we have, and if something is missing from the API, to add it.</p>",
        "id": 246604554,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626793876
    },
    {
        "content": "<p>or just </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">in_ker_carrier_dec</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">):</span>\n<span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker.carrier</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">decidable_mem_ker</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 246604898,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626794009
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.decidable_mem_ker\">docs#monoid_hom.decidable_mem_ker</a></p>",
        "id": 246605674,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626794348
    },
    {
        "content": "<p>You shouldn't need to add specialized instances in your file because this is already an instance on decidable_eq F</p>",
        "id": 246605842,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626794411
    },
    {
        "content": "<p>That's all you should need to declare. Or just open_locale classical, since you said you don't care about computation.</p>",
        "id": 246605894,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626794435
    },
    {
        "content": "<p>I guess we're missing a <code>decidable_eq (units F)</code> given <code>[decidable_eq F]</code></p>",
        "id": 246605961,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626794467
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>works for me,  so we're not missing it</p>",
        "id": 246621660,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626801451
    },
    {
        "content": "<p>Right, so this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">fintype</span> <span class=\"n\">monoid_hom</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">units.ext_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 246622362,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626801769
    },
    {
        "content": "<p>What's likely going on it that Alex is trying to make a lemma relating cardinality of that subgroup (when coerced to a Sort). And those lemmas can't be stated unless the membership of the kernel is decidable. He likely was trying to figure out a way to state <code>instance ...</code> to get the lemma statements to be correct. And the correct approach is avoiding defining any new or specialized instances, but rather just stating that <code>[decidable_eq F]</code>.</p>",
        "id": 246622897,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626802015
    },
    {
        "content": "<p>Which is a stronger claim than <code>[decidable (x ∈ (f F).ker)]</code> but is more idiomatic.</p>",
        "id": 246622993,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626802058
    }
]