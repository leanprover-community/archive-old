[
    {
        "content": "<p>i'm wondering how one could create a sequence like so: <code>σ₁^{a₁} * σ₂^{b₁} * σ₁^{a₂} * σ₂^{b₂} ... σ₁^{aₙ} * σ₂^{bₙ}</code> where all <code>a₁, b₁, ..., aₙ, bₙ</code> are nonzero integers and only <code>a₁</code>, <code>bₙ</code> may be zero and <code>σ₁, σ₂ : braid_group 2</code>. <br>\ni was thinking of inductively doing it but run into the problem of using a separate variable for each <code>a₁, b₁, ..., aₙ, bₙ</code>.  <br>\nspecifically i'm trying to prove that every 3-braid, for some integer <code>n ≥ 0</code>, can be written in this form, though i'm not sure if braid groups affect this problem with variables specifically.</p>",
        "id": 250433878,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629769375
    },
    {
        "content": "<p>It sounds like you want to create a function from lists of pairs of integers to the 3-strand braid group</p>",
        "id": 250436144,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629772067
    },
    {
        "content": "<p>(which can just be defined by induction on the list)</p>",
        "id": 250436167,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629772083
    },
    {
        "content": "<p>and then proving that this function is surjective</p>",
        "id": 250436198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629772089
    },
    {
        "content": "<p>(and even surjective when restricted to the subtype with the zero-ness conditions you specified)</p>",
        "id": 250436211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629772109
    },
    {
        "content": "<p>(also --- yay braid groups :-)</p>",
        "id": 250436217,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629772117
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.presented_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.free_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.mul_add</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_power</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">alt</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">free_group</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">free_group.of</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">alt</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">artin_tits_rels</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">free_group</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">alt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">alt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)}</span>\n\n<span class=\"sd\">/-- Artin-Tits groups.  Traditionally we require that</span>\n<span class=\"sd\">`∀ s t, m s t = m t s` but the hypothesis isn't used in the definition. -/</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">artin_tits</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">presented_group</span> <span class=\"o\">(</span><span class=\"n\">artin_tits_rels</span> <span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">braid_group</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">artin_tits</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">la</span> <span class=\"n\">lb</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">list.zip_with</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"n\">a0</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">la.map</span> <span class=\"n\">nat.succ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">σ₁</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n    <span class=\"o\">((</span><span class=\"n\">b0</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">lb.map</span> <span class=\"n\">nat.succ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">σ₂</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 250436631,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629772611
    },
    {
        "content": "<p>Is that the statement you're trying to prove?</p>",
        "id": 250436633,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629772622
    },
    {
        "content": "<p><del>Whoops, sorry, this is missing an quantifier.</del> Fixed</p>",
        "id": 250436652,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629772679
    },
    {
        "content": "<p>You presumably don't want <code>σ₁ σ₂</code> as variables here, but rather the fixed generators.</p>",
        "id": 250437216,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629773480
    },
    {
        "content": "<p><code>of 0</code> and <code>of 1</code>, I take it?</p>",
        "id": 250437399,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629773726
    },
    {
        "content": "<p>thanks for the help!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/sequence.20w.2F.20many.20variables/near/250436631\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">la</span> <span class=\"n\">lb</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">list.zip_with</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"n\">a0</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">la.map</span> <span class=\"n\">nat.succ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">σ₁</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n    <span class=\"o\">((</span><span class=\"n\">b0</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">lb.map</span> <span class=\"n\">nat.succ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">σ₂</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>sorry for the late reply. i was wondering if <code>list.zip_with (*)</code> is just saying a list multiplied by a list is also a list?</p>",
        "id": 250528255,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629830212
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.zip_with\">docs#list.zip_with</a></p>",
        "id": 250529196,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629830599
    },
    {
        "content": "<p>yes but what does putting the <code>(*)</code> next to it mean?</p>",
        "id": 250529995,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629830897
    },
    {
        "content": "<p>hint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(though this shows some metavariables, but it gives a hint of what it is)</p>",
        "id": 250530332,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629831039
    },
    {
        "content": "<p>I can't find where it's described in the Lean documentation, but putting an operator in parentheses gives you the operator as a function.  You can also do some limited partial application of operators (called <a href=\"https://wiki.haskell.org/Section_of_an_infix_operator\">sections</a> in Haskell), like <code>(*2)</code> for the multiplication-by-two function.  Lean only has \"right sections,\" no \"left sections.\"</p>",
        "id": 250531723,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629831513
    },
    {
        "content": "<p>((*) 2) is the left section</p>",
        "id": 250531787,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629831540
    },
    {
        "content": "<p>\"left section\" is a name for the notation itself, so I'm not sure I'd call it a left section, but it's definitely semantically equivalent (and why it's OK that lean doesn't have left sections).</p>",
        "id": 250531861,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629831576
    },
    {
        "content": "<p>Fair point</p>",
        "id": 250532002,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629831619
    },
    {
        "content": "<p>list.zip_with (*) is basically the element-wide product of the elements of two lists.</p>",
        "id": 250532288,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629831724
    },
    {
        "content": "<p>Up to the length of the shortest of the two</p>",
        "id": 250532329,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629831735
    },
    {
        "content": "<p>list.zip_with f xs ys is provably equal to (list.zip xs ys).map (uncurry f)</p>",
        "id": 250532482,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629831801
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.uncurry\">docs#function.uncurry</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map_uncurry_zip_eq_zip_with\">docs#list.map_uncurry_zip_eq_zip_with</a></p>",
        "id": 250532523,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629831823
    },
    {
        "content": "<p>You can tell someone is a Haskeller (or functional programmer) if they reach for zips and maps and such so readily <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 250533156,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629832108
    },
    {
        "content": "<p><code>(*)</code> is notation for <code>has_mul.mul</code> and is defeq to <code>(λ x y, x * y)</code></p>",
        "id": 250533205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629832130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/sequence.20w.2F.20many.20variables/near/250532329\">said</a>:</p>\n<blockquote>\n<p>Up to the length of the shortest of the two</p>\n</blockquote>\n<p>so you just truncate the rest of it?</p>",
        "id": 250533902,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629832431
    },
    {
        "content": "<p>I just want to throw out another way of stating what you're wanting to prove. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.presented_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.free_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.mul_add</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_power</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">alt</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">free_group</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">free_group.of</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">alt</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">artin_tits_rels</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">free_group</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">alt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">alt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)}</span>\n\n<span class=\"sd\">/-- Artin-Tits groups.  Traditionally we require that</span>\n<span class=\"sd\">`∀ s t, m s t = m t s` but the hypothesis isn't used in the definition. -/</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">artin_tits</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">presented_group</span> <span class=\"o\">(</span><span class=\"n\">artin_tits_rels</span> <span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">braid_group</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">artin_tits</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">three_braids</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">σ₁</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">presented_group.of</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">σ₂</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">presented_group.of</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">three_braid_of</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">braid_group</span> <span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">σ₁</span> <span class=\"bp\">^</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">::</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">σ₁</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">σ₂</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">three_braid_of</span> <span class=\"n\">rest</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">three_braid_of</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">σ₁</span> <span class=\"bp\">*</span> <span class=\"n\">σ₂</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">σ₁</span><span class=\"bp\">^-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">braid_group</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">three_braid_of</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- Or:</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">three_braid_of</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">three_braids</span>\n</code></pre></div>",
        "id": 250534553,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629832717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"418958\">Holly Liu</span> <a href=\"#narrow/stream/113489-new-members/topic/sequence.20w.2F.20many.20variables/near/250533902\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/sequence.20w.2F.20many.20variables/near/250532329\">said</a>:</p>\n<blockquote>\n<p>Up to the length of the shortest of the two</p>\n</blockquote>\n<p>so you just truncate the rest of it?</p>\n</blockquote>\n<p>He's telling you a technical detail about how <code>zip_with</code> works.  You may as well assume <code>la</code> and <code>lb</code> in the example have the same length because of this.</p>",
        "id": 250534716,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629832794
    },
    {
        "content": "<p>(I updated the code I just posted to use the integers instead of natural numbers, and to include an example of <code>three_braid_of</code>.)</p>\n<p>Note that it does not include conditions on the list of integers.  I'm not sure why you want this theorem exactly -- what's your larger goal?</p>",
        "id": 250535608,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629833167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/sequence.20w.2F.20many.20variables/near/250533156\">said</a>:</p>\n<blockquote>\n<p>You can tell someone is a Haskeller (or functional programmer) if they reach for zips and maps and such so readily <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>(There was one time I was tempted to write <code>flip ($)</code> in Lean.)</p>\n</blockquote>\n<p>what would <code>flip ($)</code> do? <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 250536994,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629833793
    },
    {
        "content": "<p>oh so the code with <code>la,lb</code> is multiplying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>σ</mi><mn>1</mn><msub><mi>a</mi><mn>1</mn></msub></msubsup><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msubsup><mi>σ</mi><mn>1</mn><msub><mi>a</mi><mi>n</mi></msub></msubsup></mrow><annotation encoding=\"application/x-tex\">\\sigma_1^{a_1}, ... \\sigma_1^{a_n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0126em;vertical-align:-0.266308em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.746292em;\"><span style=\"top:-2.433692em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.1449000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.266308em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">...</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.746292em;\"><span style=\"top:-2.433692em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.1449000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.266308em;\"><span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>σ</mi><mn>2</mn><msub><mi>b</mi><mn>1</mn></msub></msubsup><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msubsup><mi>σ</mi><mn>2</mn><msub><mi>b</mi><mi>n</mi></msub></msubsup></mrow><annotation encoding=\"application/x-tex\">\\sigma_2^{b_1}, ..., \\sigma_2^{b_n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1973159999999998em;vertical-align:-0.266308em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.931008em;\"><span style=\"top:-2.433692em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.1449000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.266308em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">...</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.931008em;\"><span style=\"top:-2.433692em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.1449000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.266308em;\"><span></span></span></span></span></span></span></span></span></span>. that makes more sense. i was just curious if lean implements <code>list.prod</code> to lose elements when multiplying two differently lengthed lists together. <br>\nright now i'm just trying to code some exercises in a braid textbook. ultimately the original goal was to code enough of braid groups to PR it although that seems unlikely for now.</p>",
        "id": 250537252,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629833906
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.prod\">docs#list.prod</a> only acts on a single list not on two lists</p>",
        "id": 250537825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629834189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>: I would imagine <code>flip ($) = function.eval</code>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.eval\">docs#function.eval</a></p>",
        "id": 250537902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629834223
    },
    {
        "content": "<p>oh oops, i think i meant <code>list.zip_with (*)</code></p>",
        "id": 250538101,
        "sender_full_name": "Holly Liu",
        "timestamp": 1629834307
    },
    {
        "content": "<p>Lean is quite unforgiving if you type something different to what you mean ;).</p>",
        "id": 250539408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629834849
    }
]