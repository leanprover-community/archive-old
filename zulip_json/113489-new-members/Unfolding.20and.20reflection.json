[
    {
        "content": "<p><code>refl</code> can't manage <code>n ≥ n</code>, yet unfolding solves reflection automatically, which is nice, don't get me wrong. I feel like <code>refl</code> and <code>simp</code> should unfold trivial definitions. Where can I read about Lean's unfolding mechanics? Definitions annotated with <code>@[simp]</code> will unfold on simplification if I am not mistaken, is there an equivalent for <code>relf</code>? Also, why doesn't core/mathlib use automatic unfolding more aggressively?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">ge</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- Fails!</span>\n</code></pre></div>",
        "id": 197886217,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589773846
    },
    {
        "content": "<p>There is a <code>@[refl]</code> attribute, which means that this works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⊆</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197886346,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589774062
    },
    {
        "content": "<p>(duplicate)</p>",
        "id": 197886350,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589774078
    },
    {
        "content": "<p>In fact, your example works if you switch <code>ge</code> for <code>le</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 197886458,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589774281
    },
    {
        "content": "<p>Since there is this lemma</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">le_refl</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">le_refl</span>\n</code></pre></div>",
        "id": 197886653,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589774641
    },
    {
        "content": "<p>Thus:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">ge_refl</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">le_refl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">ge</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- works!</span>\n</code></pre></div>",
        "id": 197887596,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589775588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> neat!</p>",
        "id": 197959784,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589819192
    },
    {
        "content": "<p>Any reason why core/mathlib doesn't include that definition? Is it by design or something that was just not added?</p>",
        "id": 197959941,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589819270
    },
    {
        "content": "<p>mathlib doesn't contain any <code>≥</code> lemmas</p>",
        "id": 197960223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589819364
    },
    {
        "content": "<p>A conscious decision was made to reduce duplication and only work with less than as much as possible (with a few exceptions), so almost all results in mathlib are stated with less than as assumption (hence you should use the less than version of everything too where possible)</p>",
        "id": 197960234,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589819367
    },
    {
        "content": "<p>Talking about design decisions, why not merge <code>intros</code>/<code>rintros</code>, <code>cases</code>/<code>rcases</code>, etc. The recursive counterparts work like the vanilla ones if the user doesn't pattern match the arguments.</p>",
        "id": 197962726,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589820388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/Unfolding.20and.20reflection/near/197962726\">said</a>:</p>\n<blockquote>\n<p>Talking about design decisions, why not merge <code>intros</code>/<code>rintros</code>, <code>cases</code>/<code>rcases</code>, etc. The recursive counterparts work like the vanilla ones if the user doesn't pattern match the arguments.</p>\n</blockquote>\n<p>We've been talking about that before. For <code>cases</code>/<code>rcases</code> it's a bit delicate. But <code>intros</code>/<code>rintros</code> could certainly be done. However <code>intros</code> is in core lib, and <code>rintros</code> in mathlib. So it would require a bit of work.</p>",
        "id": 197964298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589821119
    },
    {
        "content": "<p>I see, thank you. Could you point me to the discussion about <code>cases</code>/<code>rcases</code>, I'd be interested in understanding what makes it more difficult.</p>",
        "id": 197967171,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589822463
    },
    {
        "content": "<p>There's some discussion <a href=\"#narrow/stream/113488-general/topic/destructuring.20.60suffices.60/near/194037605\">here</a>. There might be some older ones as well if you search for <code>rcases</code>.</p>",
        "id": 197967449,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589822592
    },
    {
        "content": "<p>I guess the upshot is that <code>rcases h with ...</code> and <code>cases h with ...</code> are not compatible.</p>",
        "id": 197967634,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589822665
    }
]