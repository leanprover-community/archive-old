[
    {
        "content": "<p>I believe the problem is that you're making the instance dependent on a variable <code>p</code>, which means every instance will depend on that variable. One solution would be to make the variables into constants, so that definitions don't depend on them as variables. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">place</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">place</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">copland</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">po</span> <span class=\"o\">:</span> <span class=\"n\">place</span> <span class=\"bp\">→</span> <span class=\"n\">preorder</span> <span class=\"n\">copland</span>\n<span class=\"kd\">constant</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">place</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">po</span> <span class=\"n\">p</span> <span class=\"c1\">-- po p : preorder copland</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"kd\">instance</span> <span class=\"n\">xmpl</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">copland</span> <span class=\"o\">:=</span> <span class=\"n\">po</span> <span class=\"n\">p</span>\n<span class=\"k\">#check</span> <span class=\"n\">xmpl</span> <span class=\"c1\">-- xmpl : (place → preorder copland) → place → preorder copland</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">copland</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">c1</span> <span class=\"bp\">≤</span> <span class=\"n\">c2</span>\n</code></pre></div>",
        "id": 305709948,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666559708
    },
    {
        "content": "<p>You'll notice that the instance is now noncomputable. This is because we're saying \"we have the ingredients to create a preorder on <code>copland</code>, but we haven't defined them... we've only asserted that they're there.\" Lean can't compute without a definition to compute with.</p>",
        "id": 305710150,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666559849
    },
    {
        "content": "<p>I don't think making the variables implicit does what I want. I still get the error on the last line saying that Lean can't find an instance of <code>has_le</code> for copland.</p>",
        "id": 305710775,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666560243
    },
    {
        "content": "<p>yeah sorry, I think I actually had it right the first time!</p>",
        "id": 305710827,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666560269
    },
    {
        "content": "<p>just reverted to the original</p>",
        "id": 305710832,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666560274
    },
    {
        "content": "<p>Indeed the constants work, but it feels unnatural.</p>",
        "id": 305710892,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666560309
    },
    {
        "content": "<p>This might be an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem; what are you actually trying to do?</p>",
        "id": 305710915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666560327
    },
    {
        "content": "<p>Well, I'm in the middle of a project in which I have various ways of defining preorders on two different types that have similar (but not identical) structure. I'm trying to show that results about the preorders on one of the types transport to corresponding results about the preorders on the other.</p>",
        "id": 305711180,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666560509
    },
    {
        "content": "<p>I can certainly make progress using constants as <span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span>  suggested, but it seems like there should be another way.</p>",
        "id": 305711235,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666560559
    },
    {
        "content": "<p>you might want to define two separate preorder instances rather than having them depend on variables... otherwise you're saying there are as many preorder instances are there are <code>p</code> and <code>po</code> (though maybe that's true?)</p>",
        "id": 305711363,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666560619
    },
    {
        "content": "<p>You're going against the design by defining several preorders on the same type.</p>",
        "id": 305711445,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666560672
    },
    {
        "content": "<p>The correct thing to do here is to use type synonyms of the types you're overloading.</p>",
        "id": 305711469,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666560693
    },
    {
        "content": "<p>In my project, <code>po</code> is actually not a variable, but <code>p</code> is.  And there really <em>are</em> as many preorders as there are <code>p</code>. But I don't care what <code>p</code> is. I just want to fix an arbitrary <code>p</code> for the duration of the development.</p>",
        "id": 305711574,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666560745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  I'm not sure I follow. Much of the point of the project is to show how to define different preorders on the same type. Are you suggesting I create carbon copies of the underlying type with a new name and define preorders on them? I'm not sure what type synonyms are or how they work.</p>",
        "id": 305711794,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666560892
    },
    {
        "content": "<p>Yeah, so do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[nolint unused_arguments]</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_type_synonym</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">place</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">copland</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">place</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">my_type_synonym</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 305711796,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666560893
    },
    {
        "content": "<p>The point is that Lean can infer what <code>p</code> is from seeing <code>my_type_synonym p</code>. In constrast, when Lean sees <code>copland</code>, it has no idea what <code>p</code> should be!</p>",
        "id": 305711948,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666560998
    },
    {
        "content": "<p>I must be doing something wrong in the below. I still get the error in the last line.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">place</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">place</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">copland</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coplandA</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">place</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">copland</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">po</span> <span class=\"o\">:</span> <span class=\"n\">place</span> <span class=\"bp\">→</span> <span class=\"n\">preorder</span> <span class=\"n\">copland</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">place</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">place</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">coplandA</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">po</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">coplandA</span> <span class=\"n\">p</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">c1</span> <span class=\"bp\">≤</span> <span class=\"n\">c2</span>\n<span class=\"c\">/-</span><span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">po : place → preorder copland,</span>\n<span class=\"cm\">p : place,</span>\n<span class=\"cm\">c1 c2 : coplandA p</span>\n<span class=\"cm\">⊢ has_le (coplandA p)-/</span>\n</code></pre></div>",
        "id": 305712317,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666561220
    },
    {
        "content": "<p>I think <code>po</code> has to be a dependent Pi type?</p>",
        "id": 305712481,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666561335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> is this right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">place</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">place</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">copland</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coplandA</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">place</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">copland</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">po</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">place</span><span class=\"o\">),</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">coplandA</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">place</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">po</span> <span class=\"n\">p</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"kd\">instance</span> <span class=\"n\">xmpl</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">coplandA</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">po</span> <span class=\"n\">p</span>\n<span class=\"k\">#check</span> <span class=\"n\">xmpl</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">coplandA</span> <span class=\"n\">p</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">c1</span> <span class=\"bp\">≤</span> <span class=\"n\">c2</span>\n</code></pre></div>",
        "id": 305712532,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666561377
    },
    {
        "content": "<p>Surely <code>po</code> should not be a variable but an instance?</p>",
        "id": 305712589,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666561436
    },
    {
        "content": "<p>I expect you need to know its definition.</p>",
        "id": 305712657,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666561469
    },
    {
        "content": "<p>yeah sorry, I was just trying to fill in the blanks for <span class=\"user-mention\" data-user-id=\"300396\">@Paul Rowe</span>, I'm sure he can replace that with the actual definition</p>",
        "id": 305712763,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666561531
    },
    {
        "content": "<p><code>sorry</code> is a much clearer way to highlight what needs filling!</p>",
        "id": 305712855,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666561570
    },
    {
        "content": "<p>It works when I put that solution into my real project where <code>po</code> really is defined, and not a variable.</p>",
        "id": 305712896,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666561615
    },
    {
        "content": "<p>yeah I think Yael was just pointing out that I should've written it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">place</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">place</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">copland</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coplandA</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">place</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">copland</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">place</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"kd\">instance</span> <span class=\"n\">xmpl</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">coplandA</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#check</span> <span class=\"n\">xmpl</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">coplandA</span> <span class=\"n\">p</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">c1</span> <span class=\"bp\">≤</span> <span class=\"n\">c2</span>\n</code></pre></div>",
        "id": 305712924,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666561636
    },
    {
        "content": "<p>And at this point you can even scrap the <code>local attribute</code>.</p>",
        "id": 305713089,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666561737
    },
    {
        "content": "<p>true!</p>",
        "id": 305713154,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666561785
    },
    {
        "content": "<p>Right! The only reason I had it be local is because I didn't want to clobber any default instances. The type synonyms will ensure that each instance for its own copy of the type.</p>",
        "id": 305713177,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666561802
    },
    {
        "content": "<p>Yes exactly!</p>",
        "id": 305713223,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666561813
    },
    {
        "content": "<p>This does feel much cleaner!</p>",
        "id": 305713230,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666561820
    },
    {
        "content": "<p>Thanks for the help (as always)</p>",
        "id": 305713245,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666561839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300396\">Paul Rowe</span> has marked this topic as resolved.</p>",
        "id": 305713257,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666561849
    }
]