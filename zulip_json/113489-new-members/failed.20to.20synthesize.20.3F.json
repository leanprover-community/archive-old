[
    {
        "content": "<p>Why does this work in Lean 3 but not in Lean 4?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">tmp</span><span class=\"bp\">/</span><span class=\"n\">lean_4_bad.lean</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">_root_.a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 268916854,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1642807192
    },
    {
        "content": "<p>It does not work because the instance <code>instance {α : Sort u} : Inhabited (α → α) := ⟨id⟩</code> seems to be missing from Lean 4 stdlib right now, add it and Lean will happily accept.</p>",
        "id": 268917273,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642807462
    },
    {
        "content": "<p>However this is maybe something we might actually want per default? CC <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 268917320,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642807504
    },
    {
        "content": "<p>It works, indeed.  Thank you.</p>",
        "id": 268918046,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1642807946
    },
    {
        "content": "<p><code>constant</code> has a quite different meaning in Lean 3</p>",
        "id": 268919884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642809155
    },
    {
        "content": "<p>There is already <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L224\">https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L224</a> FYI, which would be a conflicting instance in most cases</p>",
        "id": 268919920,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642809186
    },
    {
        "content": "<p>If we were to prioritize that one higher though there should be no issue right?</p>",
        "id": 268920013,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642809245
    },
    {
        "content": "<p>The instance you suggest is \"missing\" from lean 3 too (at least I can't find a set of mathlib imports that makes this work):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>so even if it wouldn't be an issue, it begs the question why would anyone ever want / need the type of functions from a type to itself to be inhabited when the type itself wasn't inhabited.<br>\nIt just seems very niche, and seems to me a bit confusing that inhabiting <code>alpha</code> would change the default of <code>α → α</code> so much</p>",
        "id": 268922760,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642811301
    }
]