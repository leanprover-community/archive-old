[
    {
        "content": "<p>If I want to <code>.map</code> a finset via some <code>equiv</code>, it looks like I'm supposed to call <code>.to_embedding</code> on it to do so. Is there a design reason why it shouldn't <code>coe</code> the <code>equiv</code>?</p>\n<p>I.e.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">z.map</span> <span class=\"n\">f.to_embedding</span>\n<span class=\"k\">#eval</span> <span class=\"n\">z.map</span> <span class=\"n\">f</span>  <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 245961714,
        "sender_full_name": "Julian Berman",
        "timestamp": 1626270522
    },
    {
        "content": "<p>It's not your question, but <code>f</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.add_left\">docs#equiv.add_left</a> or alternatively <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_rotate\">docs#fin_rotate</a></p>",
        "id": 245962571,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626270921
    },
    {
        "content": "<p>The coercion you're suggesting is probably harmless</p>",
        "id": 245962744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626271009
    },
    {
        "content": "<p>Ah nice thanks (on both points!)</p>",
        "id": 245963435,
        "sender_full_name": "Julian Berman",
        "timestamp": 1626271291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> has marked this topic as resolved.</p>",
        "id": 245963778,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626271434
    }
]