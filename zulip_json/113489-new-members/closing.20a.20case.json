[
    {
        "content": "<p>Would you please help me understand why the case does not close, and what to do here instead?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span> <span class=\"n\">set</span>\n\n<span class=\"n\">def</span> <span class=\"n\">punctured_line</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Iio</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">punctured_inv</span> <span class=\"o\">:=</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">punctured_line</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">punctured_reals_are_nonzero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">punctured_line</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">a2</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>                         <span class=\"c1\">-- (a.property)</span>\n<span class=\"n\">cases</span> <span class=\"n\">a2</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">,</span>                     <span class=\"c1\">-- we can decompose the property using cases</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mem_Iio</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span>  <span class=\"c1\">-- This is the relevant fact</span>\n<span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>                              <span class=\"c1\">-- *** But I can&#39;t close the case here</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 162432149,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554300268
    },
    {
        "content": "<p>I also can't close it with <code>sorry</code>; trying tells me that a function is expected.  But what function would that be?</p>\n<div class=\"codehilite\"><pre><span></span>infer type failed, function expected at\n  (let a2 : punctured_line (a.val) := a.property in a.val ≠ 0) (or.inl l)\nterm\n  let a2 : punctured_line (a.val) := _\n  in a.val ≠ 0\nhas type\n  Prop\nstate:\n2 goals\na : subtype punctured_line,\nl : a.val ∈ Iio 0,\nh : a.val &lt; 0,\nh1 : a.val ≠ 0\n⊢ (let a2 : punctured_line (a.val) := a.property in a.val ≠ 0) (or.inl l)\n\ncase or.inr\na : subtype punctured_line,\nr : a.val ∈ Ioi 0\n⊢ (let a2 : punctured_line (a.val) := a.property in a.val ≠ 0) (or.inr r)\n</pre></div>",
        "id": 162432691,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554300627
    },
    {
        "content": "<p>Why do you use <code>cases a2</code> instead of <code>cases a.2</code>?</p>",
        "id": 162433593,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1554301187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> ah, I thought that was just shorthand</p>",
        "id": 162434208,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554301535
    },
    {
        "content": "<p>Thanks! I guess the lesson here is that \"shorthand\" isn't likely to be a good idea.</p>",
        "id": 162434295,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554301573
    },
    {
        "content": "<p>Shorthands are equivalent in <code>exact ...</code> (as everything is expanded by the kernel), but otherwise it can lead to different behavior.</p>",
        "id": 162434436,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1554301661
    }
]