[
    {
        "content": "<p>I have come across a situation where, in tactic mode, I have two assumptions in my context whose types are not equal but they are definitionally equal. Specifically, for a particular expression <code>_e</code>, the types are <code>m ∈ _e</code> and <code>_e = some m</code>. I would like to rewrite using the equality. However, when I use <code>rw ‹_e = some m›</code> the <code>rw</code> tactic fails because the assumption of type <code>m ∈ _e</code> appears before the other one in the context, and so the tactic <code>‹_e = some m›</code> returns the wrong assumption.</p>\n<p>Of course, I can use the names of the assumptions instead of the <code>‹⬝›</code> tactic, but I would like to avoid using names if I can.</p>\n<p>Is this a known problem? is it considered a \"problem\"?</p>",
        "id": 181934993,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574783623
    },
    {
        "content": "<p>I guess I've never had to worry about not using names. Do you need both hypotheses in the context? If not then you could <code>clear</code> one. Otherwise probably you can use some <code>meta</code> magic (which I know nothing about) to give the bad tactic a fresh name or something.</p>",
        "id": 181946876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574791093
    },
    {
        "content": "<p>It's not that I can't use names for the hypotheses, it's that I want to try doing without - it's a style objective.</p>",
        "id": 181948686,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574792290
    },
    {
        "content": "<p>Just to be sure -- if you rewrite with the name of the correct assumption, does the rewrite not fail?</p>\n<p>I was looking at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/conditionally_complete_lattice.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/conditionally_complete_lattice.lean\">conditionally complete lattices</a> in Lean's maths library over the last few days, and they use the french quotes in several places.</p>",
        "id": 181949214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574792692
    },
    {
        "content": "<p>I suppose the <code>assumption</code> tactic (which underlies the french quotes) could do a first pass to look for a hypothesis that matches the requested type syntactically. I seem to recall this coming up before.</p>",
        "id": 181949311,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574792759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>: yes, if I name the hypothesis <code>rw</code> succeeds</p>",
        "id": 181949784,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574793069
    },
    {
        "content": "<p>It might even be enough to change this line to <code>show p, by assumption</code>. <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/tactic.lean#L871\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/tactic.lean#L871\">https://github.com/leanprover-community/lean/blob/master/library/init/meta/tactic.lean#L871</a></p>",
        "id": 181949805,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574793087
    },
    {
        "content": "<p>There's a chance that could have side effects elsewhere.</p>",
        "id": 181949936,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574793151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>: no, it is the <code>assumption</code> tactic itself which picks the wrong hypothesis</p>",
        "id": 181949947,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574793157
    },
    {
        "content": "<p>It doesn't matter which hypothesis the tactic chooses if they're definitionally the same. What matters is what the assumption tactic is used to prove.</p>",
        "id": 181949986,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574793186
    },
    {
        "content": "<p><code>(p : t)</code> isn't necessarily the same as <code>show t, from p</code>.</p>",
        "id": 181950005,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574793204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>: I played around by implementing a new version of <code>assumption</code> which checks for syntactic equality. In my particular case it was failing because there are meta-variables that are different.</p>",
        "id": 181950018,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574793214
    },
    {
        "content": "<p>The latter guarantees a term with type <code>t</code>. The former guarantees a term with type defeq to <code>t</code>.</p>",
        "id": 181950033,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574793229
    },
    {
        "content": "<p>So <code>assumption</code> would still find the first proof, but it would use it to prove the syntactic thing you want.</p>",
        "id": 181950103,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574793255
    },
    {
        "content": "<p>That would make the french quote syntax marginally more useful as well</p>",
        "id": 181950145,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574793288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> oh right, yes I see what you mean</p>",
        "id": 181950200,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574793335
    },
    {
        "content": "<p>So, I tried defining a local notation for french brackets with this proposed new implementation, and I was getting some errors:</p>\n<div class=\"codehilite\"><pre><span></span>none of the overloads are applicable\nerror for λ (x_1 : _),\n  show x_1, from has_bind.seq (tactic.save_info (_ 49 34)) (tactic.step tactic.interactive.assumption)\nassumption tactic failed\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>context: switched to basic overload resolution where arguments are elaborated without any information about the expected type, because failed to elaborate all candidates using the expected type\n  m = n\nthis can happen because, for example, coercions were not considered in the process\nnone of the overloads are applicable\n</pre></div>",
        "id": 181951614,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574794243
    },
    {
        "content": "<p>That error looks weird</p>",
        "id": 181951909,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574794423
    },
    {
        "content": "<p>How did you define the notation exactly?</p>",
        "id": 181952018,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574794461
    },
    {
        "content": "<p>It might be because in my code, there are some implicit goals that need to be solved.</p>",
        "id": 181952021,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574794462
    },
    {
        "content": "<blockquote>\n<p>How did you define the notation exactly?</p>\n</blockquote>\n<p>notation <code>‹</code> p <code>›</code> := (show p, by assumption)</p>",
        "id": 181952039,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574794476
    },
    {
        "content": "<p>Making it local notation (or just different syntax) might help, then it will override the global notation rather than Lean trying to consider both</p>",
        "id": 181952147,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574794543
    },
    {
        "content": "<p>When I inline <code>show p, by assumption</code> at the place I want to use it (i.e. to generate a name for the hypothesis I want to apply <code>rw</code> to), it goes through fine, but also gives me new goals related to the parameters in my code.</p>",
        "id": 181952180,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574794558
    },
    {
        "content": "<blockquote>\n<p>Making it local notation (or just different syntax) might help, then it will override the global notation rather than Lean trying to consider both</p>\n</blockquote>\n<p>Yeah, that seems to be working.</p>",
        "id": 181952278,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574794610
    },
    {
        "content": "<p>Working working or the same behavior as when you wrote <code>show p, by assumption</code> manually?</p>",
        "id": 181952301,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574794625
    },
    {
        "content": "<p>The latter.</p>",
        "id": 181952470,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574794723
    },
    {
        "content": "<p>So, it is generating new goals related to the implicit parameters of <code>p</code>.</p>",
        "id": 181952519,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574794775
    },
    {
        "content": "<p>So let's see. The actual <code>p</code> in your case involves metavariables? And you're expecting them to be filled in by the actual type of the hypothesis that matches?</p>",
        "id": 181952994,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574795077
    },
    {
        "content": "<p>(wouldn't it be easier to just give the name of the hypothesis...?)</p>",
        "id": 181953015,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574795102
    },
    {
        "content": "<p>This is hard to follow without a working example.</p>",
        "id": 181953395,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574795361
    },
    {
        "content": "<p>OK, I'll give the code.</p>",
        "id": 181953585,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574795508
    },
    {
        "content": "<p>There are also probably easy ways to avoid having the old hypothesis around, besides <code>clear</code>, like <code>rw at</code> or <code>replace</code></p>",
        "id": 181953736,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574795613
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">denumerable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">αs</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">incl</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">↪</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">encodable</span><span class=\"bp\">.</span><span class=\"n\">encode</span> <span class=\"n\">encodable</span><span class=\"bp\">.</span><span class=\"n\">encode_injective</span>\n\n<span class=\"n\">def</span> <span class=\"n\">codes</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">incl</span> <span class=\"n\">αs</span>\n\n<span class=\"n\">def</span> <span class=\"n\">code</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">codes</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>  <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">codes</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">code</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max_of_mem</span> <span class=\"err\">‹</span><span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">codes</span><span class=\"err\">›</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">codes</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"err\">‹</span><span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"n\">codes</span><span class=\"bp\">.</span><span class=\"n\">max</span><span class=\"err\">›</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">code</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">code</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">‹</span><span class=\"n\">codes</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">m</span><span class=\"err\">›</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">show</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">code</span><span class=\"o\">,</span>\n      <span class=\"k\">by</span> <span class=\"k\">calc</span>\n        <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">le_max_of_mem</span><span class=\"o\">,</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">}}</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">code</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"err\">‹</span><span class=\"n\">code</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"err\">›</span><span class=\"o\">},</span>\n    <span class=\"n\">done</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 181954219,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574795900
    },
    {
        "content": "<blockquote>\n<p>There are also probably easy ways to avoid having the old hypothesis around, besides <code>clear</code>, like <code>rw at</code> or <code>replace</code></p>\n</blockquote>\n<p>Yes, but these all involve naming the hypotheses, and I can just give the name of the hypothesis to <code>rw</code>, but as I say I am trying to see how far I can get by writing proofs in a \"nameless\" style. Perhaps this is not an interesting thing to try and do.</p>",
        "id": 181954334,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574796002
    },
    {
        "content": "<p>This works fine for me?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">denumerable</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">section</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">denumerable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">αs</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">incl</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">↪</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">encodable</span><span class=\"bp\">.</span><span class=\"n\">encode</span> <span class=\"n\">encodable</span><span class=\"bp\">.</span><span class=\"n\">encode_injective</span>\n\n<span class=\"n\">def</span> <span class=\"n\">codes</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">incl</span> <span class=\"n\">αs</span>\n\n<span class=\"n\">def</span> <span class=\"n\">code</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">codes</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>  <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"kn\">end</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">‹</span><span class=\"bp\">`</span> <span class=\"n\">p</span> <span class=\"bp\">`</span><span class=\"err\">›</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">codes</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">code</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max_of_mem</span> <span class=\"err\">‹</span><span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">codes</span><span class=\"err\">›</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">codes</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">m</span><span class=\"o\">,</span>  <span class=\"k\">from</span> <span class=\"err\">‹</span><span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"n\">codes</span><span class=\"bp\">.</span><span class=\"n\">max</span><span class=\"err\">›</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">code</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">code</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">‹</span><span class=\"n\">codes</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">m</span><span class=\"err\">›</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">show</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">code</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"k\">calc</span>\n        <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">le_max_of_mem</span><span class=\"o\">,</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">}}</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">code</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"err\">‹</span><span class=\"n\">code</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"err\">›</span><span class=\"o\">},</span>\n    <span class=\"n\">done</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n\n <span class=\"kn\">end</span>\n</pre></div>",
        "id": 181954666,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574796204
    },
    {
        "content": "<blockquote>\n<p>Perhaps this is not an interesting thing to try and do</p>\n</blockquote>\n<p>I'm not sure it's uninteresting, but it's definitely nonstandard. You'll run into issues sooner or later.</p>",
        "id": 181954835,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574796306
    },
    {
        "content": "<blockquote>\n<p>This works fine for me?</p>\n</blockquote>\n<p>Yes, you are right, it is. So something else about the rest of my code is causing the problem.</p>",
        "id": 181955067,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574796450
    },
    {
        "content": "<p>Note that I changed <code>show : c &lt; code</code> to <code>show c &lt; code</code>.</p>",
        "id": 181955148,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574796503
    },
    {
        "content": "<p>But that's probably unrelated.</p>",
        "id": 181955163,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574796518
    },
    {
        "content": "<p>OK, here is the code that displays what I was seeing.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">denumerable</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">‹</span><span class=\"bp\">`</span> <span class=\"n\">p</span> <span class=\"bp\">`</span><span class=\"err\">›</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span>\n\n  <span class=\"kn\">parameters</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">denumerable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">αs</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">}</span>\n\n  <span class=\"kn\">private</span>\n    <span class=\"n\">def</span> <span class=\"n\">incl</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">↪</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n      <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">encodable</span><span class=\"bp\">.</span><span class=\"n\">encode</span> <span class=\"n\">encodable</span><span class=\"bp\">.</span><span class=\"n\">encode_injective</span>\n\n  <span class=\"kn\">private</span>\n    <span class=\"n\">def</span> <span class=\"n\">codes</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">incl</span> <span class=\"n\">αs</span>\n\n  <span class=\"kn\">private</span>\n    <span class=\"n\">def</span> <span class=\"n\">code</span> <span class=\"o\">:=</span>\n      <span class=\"k\">match</span> <span class=\"n\">codes</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>  <span class=\"mi\">0</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"kn\">end</span>\n\n  <span class=\"kn\">parameter</span> <span class=\"o\">(</span> <span class=\"n\">αs</span> <span class=\"o\">)</span>\n\n  <span class=\"n\">def</span> <span class=\"n\">fresh_var</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n    <span class=\"n\">denumerable</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">α</span> <span class=\"n\">code</span>\n\n  <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fresh_var</span> <span class=\"err\">∉</span> <span class=\"n\">αs</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">codes</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">code</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">intros</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max_of_mem</span> <span class=\"err\">‹</span><span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">codes</span><span class=\"err\">›</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">codes</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n          <span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n          <span class=\"c1\">-- from ‹m ∈ codes.max›,</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">code</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n          <span class=\"n\">rw</span> <span class=\"n\">code</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"err\">‹</span><span class=\"n\">codes</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">m</span><span class=\"err\">›</span><span class=\"o\">,</span>\n          <span class=\"c1\">-- rw this,</span>\n          <span class=\"n\">refl</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"k\">show</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">code</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n          <span class=\"k\">calc</span>\n            <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">le_max_of_mem</span><span class=\"o\">,</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">}}</span>\n            <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span>\n            <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">code</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"err\">‹</span><span class=\"n\">code</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"err\">›</span><span class=\"o\">},</span>\n        <span class=\"n\">done</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Now the problem is the use of the <code>private</code> keyword --- removing it, the code is fine.</p>\n<p>I guess I have misunderstood the purpose of this keyword: my intention was that the definitions should not be visible outside of the section (or some other unit) in which they are declared.</p>",
        "id": 181957619,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574798258
    },
    {
        "content": "<p>I vaguely recall seeing something like this... maybe an interaction between <code>private</code> and <code>parameters</code>?</p>",
        "id": 181958280,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574798717
    },
    {
        "content": "<p>And tactic mode</p>",
        "id": 181958286,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574798720
    },
    {
        "content": "<p>If you remove the local notation for the french brackets, you see the problem I was originally describing (i.e. the <code>assumption</code> tactic finding the wrong assumption). <strong>This is whether the <code>private</code> keyword is used or not.</strong></p>\n<p>If you include the local notation, but put <code>private</code> on the definitions for both <code>codes</code> and <code>code</code>, you see a problem due to extra goals being generated.</p>",
        "id": 181958460,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574798846
    }
]