[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"kn\">end</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">A</span> <span class=\"c1\">-- this works</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"c1\">-- this fails</span>\n</code></pre></div>\n\n\n<p>How do I get A such that A.a is in scope too?</p>",
        "id": 197885164,
        "sender_full_name": "Frank Dai",
        "timestamp": 1589772247
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"kn\">end</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">foo</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">A</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span>\n</code></pre></div>",
        "id": 197885427,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589772533
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 197885429,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589772534
    },
    {
        "content": "<p>(same answer as <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> )</p>",
        "id": 197885461,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589772567
    },
    {
        "content": "<p>I have other things in foo which conflict with the current scope</p>",
        "id": 197885464,
        "sender_full_name": "Frank Dai",
        "timestamp": 1589772593
    },
    {
        "content": "<p>make another namespace?</p>",
        "id": 197885506,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589772618
    },
    {
        "content": "<p>do some renaming?</p>",
        "id": 197885511,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589772631
    },
    {
        "content": "<p>making a namespace worked, I had a section and not a namespace</p>",
        "id": 197885525,
        "sender_full_name": "Frank Dai",
        "timestamp": 1589772682
    },
    {
        "content": "<p>(i don't understand your last comment)</p>",
        "id": 197885531,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589772711
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"kn\">end</span> <span class=\"n\">foo</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">A</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span>\n</code></pre></div>",
        "id": 197885533,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589772715
    },
    {
        "content": "<p>If you don't want to open everything in <code>foo</code>, you can also do this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"kn\">end</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">A</span> <span class=\"c1\">-- this works</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"c1\">-- this works</span>\n</code></pre></div>",
        "id": 197885574,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589772734
    },
    {
        "content": "<p>My code was actually</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kn\">end</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">bar</span>\n<span class=\"kn\">open</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- name conflicts galore</span>\n<span class=\"kn\">end</span> <span class=\"n\">bar</span>\n</code></pre></div>\n\n\n<p>changing <code>section bar</code> to <code>namespace bar</code> worked</p>",
        "id": 197885579,
        "sender_full_name": "Frank Dai",
        "timestamp": 1589772766
    }
]