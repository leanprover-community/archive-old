[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">omega</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcont</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- h2 : 2 = p ^ n,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- h2 : 2 = p ^ n, still.</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- h2 : 2 = 1 ^ n</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Why does the two <code>rw</code>s have different behaviour? The first one does nothing (and there's no error). The second one actually does the rewrite that I expect.</p>",
        "id": 197679585,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589543403
    },
    {
        "content": "<p>separating the <code>show</code> into <code>have ... rw ...</code> works as expected...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">omega</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcont</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197679797,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589543559
    },
    {
        "content": "<p>Mysterious</p>",
        "id": 197681511,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589544771
    },
    {
        "content": "<p>I think the problem is that <code>omega</code> uses <code>h2</code> in the proof of <code>p = 1</code> for some reason, and this confuses <code>rw</code>.</p>",
        "id": 197683388,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589545976
    },
    {
        "content": "<p>You get the same behavior if you change your <code>have</code> line to a <code>let</code>. In a <code>have</code>, the dependency on <code>h2</code> isn't there until after the rest of the proof is done.</p>",
        "id": 197683610,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589546103
    },
    {
        "content": "<p>I see.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcont</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">omega</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">l</span>\n</code></pre></div>\n\n\n<p>and it does seem like that it uses <code>h2</code> in the proof (I think it just uses everything it can). So that makes sense. <code>rw</code> not producing an error was what confused me.</p>\n<p>Thanks!</p>",
        "id": 197683920,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589546282
    },
    {
        "content": "<p>I'm still not satisfied with this explanation. Why should it matter what is used in the proof that <code>p = 1</code>? I guess this might pose a problem for the revert/intro approach to <code>rw at</code> but that should still be happening after the theorem is already proven. Or is the issue perhaps that the expression <code>show p = 1, by omega</code> is elaborated in a context where <code>h2</code> has already been reverted?</p>",
        "id": 197702811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589554270
    },
    {
        "content": "<p>I guess a minimal example is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This has the same behavior: no error, but proof state is unchanged</p>",
        "id": 197703361,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589554497
    },
    {
        "content": "<p>I didn't fully debug this, but my guess is: first <code>rw a at h</code> elaborates <code>a</code>. Then it reverts <code>h</code>. Then it tries to build the <code>eq.rec_on a ...</code> term, but this doesn't type check because <code>a</code> no longer type checks. Then a bug in <code>rw</code> stops it from throwing an error. It could abstract the argument <code>a</code>, but it doesn't.</p>",
        "id": 197704439,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589554922
    },
    {
        "content": "<p><code>a</code> elaborates fine, it's not that the revert happens before that.</p>",
        "id": 197704507,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589554934
    },
    {
        "content": "<p>But again, I only played with this for a minute, my guess could be wrong.</p>",
        "id": 197704552,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589554953
    }
]