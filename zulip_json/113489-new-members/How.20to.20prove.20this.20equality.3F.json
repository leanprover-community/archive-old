[
    {
        "content": "<p>I'm stuck on this…</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">equiv.perm</span> <span class=\"bp\">↥</span><span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv.perm.of_subtype</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv.perm.of_subtype</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Because <code>rw h</code> does not work, even if  one can <code>rw</code> <code>hi</code> and prove that it equal <code>hj</code>…</p>",
        "id": 303602784,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1665572156
    },
    {
        "content": "<p>Did you try subst?</p>",
        "id": 303602924,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1665572206
    },
    {
        "content": "<p>No, I even didn't know about it…<br>\n— and it works, thanks!</p>",
        "id": 303603020,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1665572252
    },
    {
        "content": "<p><code>subst</code> is a version of <code>rw</code> which avoids \"motive is not type correct\" issues but only works if one side of the equality is a \"bare\" term, e.g. you cannot <code>subst h</code> if <code>h : a + b = c + d</code>.</p>",
        "id": 303606058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665573653
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">equiv.perm</span> <span class=\"bp\">↥</span><span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv.perm.of_subtype</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv.perm.of_subtype</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works, because then all of the i's which need to be changed to j's to make the motive type-correct are present in the goal. This may or may not be what <code>subst</code> is doing under the hood.</p>",
        "id": 303606246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665573751
    },
    {
        "content": "<p>You can also try <code>conv</code>.</p>",
        "id": 303621240,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665579342
    }
]