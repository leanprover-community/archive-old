[
    {
        "content": "<p>Couple of questions about the sample below:</p>\n<p>Why doesn't apply work as-is? I get \"failed to unify\", but the shape seems perfectly fine.<br>\nFor the @-variant:  It fails to synthesize the complete_semilattice_Inf ℕ, as I understand it, N should be one, but I'm not sure how to get that, or how to find it. Any pointers?:)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"o\">({</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Inf_le</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- apply @Inf_le ℕ _ ({n : ℕ | n ≥ 5} : set ℕ) 5,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292312373,
        "sender_full_name": "Pim Otte",
        "timestamp": 1659868392
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cInf_le\">docs#cInf_le</a> is what you need to use for nat</p>",
        "id": 292312605,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659868759
    },
    {
        "content": "<p>nat does not form a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_semilattice_inf\">docs#complete_semilattice_inf</a> (equivalent to a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice\">docs#complete_lattice</a>, which requires a top element)</p>",
        "id": 292312612,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659868788
    },
    {
        "content": "<p>\"c\" stands for conditional, and this is because <code>Inf {} = 0</code>, not a hypothetical \"top\" element as should be required</p>",
        "id": 292312662,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659868823
    },
    {
        "content": "<p>I see, thanks a lot!</p>",
        "id": 292312757,
        "sender_full_name": "Pim Otte",
        "timestamp": 1659868986
    },
    {
        "content": "<p>Maybe this is solved in Lean4, but would there be a way to tell when the failure of unification is cause by lack of instances and fall back to the « failed to synthesize type class instance » error message ? Although I guess it would be pretty hard because in this case the error comes before searching for a complete lattice instance, it fails because the theorem is about inf coming from complete lattice and you want to apply it to the one coming from conditionally complete lattice, right ?</p>",
        "id": 292328431,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659890781
    }
]