[
    {
        "content": "<p>I'm having trouble expressing \"all rational numbers whose denominators are 1 or a power of 2\".  This is my first pass:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.coprime</span>\n<span class=\"kd\">def</span> <span class=\"n\">binrat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">is_coprime</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">∧</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span> <span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">b</span> <span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I'm getting error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">rat.mk'</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">rat.mk'</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">↑</span><span class=\"n\">a.nat_abs.coprime</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℚ</span>\n</code></pre></div>",
        "id": 220847550,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608783313
    },
    {
        "content": "<p>Why not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">binrat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>?</p>",
        "id": 220848291,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608784556
    },
    {
        "content": "<p>Yeah, the author is being a bit silly there. Of course 1 is a power of 2</p>",
        "id": 220851876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608790894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> That's maybe an example of what I was talking about earlier. The mathematician is writing for a human audience, which may not find it obvious that 1 is a power of 2 and so explicitly called it out. When formalizing, you definitely want to get rid of those junk disjuncts because they will only make the predicate harder to manipulate</p>",
        "id": 220851944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608791004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> rational numbers are not pairs of two natural numbers.</p>",
        "id": 220851994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608791084
    }
]