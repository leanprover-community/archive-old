[
    {
        "content": "<p>I am working through some basic number theory proofs (e.g. c | a and c | b implies c | a + b).  Now I am stuck on a theorem that involves some finite sums:  Let a1 + a2 + ... + an = b1 + b2 + ... + bm where n &gt; 1. Prove that if each of a1,a2,a{n-1},b1,b2,...,bm is divisible by b, then an is divisible by b. I looked a bit around in the docs/API for list, finset, range but have been struggling even to properly state the theorem in Lean. Any help would be appreciated. Thank you.</p>",
        "id": 252202633,
        "sender_full_name": "Thomas Strohmann",
        "timestamp": 1630948584
    },
    {
        "content": "<p>There is already a theorem saying that if the <code>bi</code> are divisible by <code>b</code> then <code>\\sum i in s, bi</code> is too</p>",
        "id": 252203271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630948959
    },
    {
        "content": "<p>for the other part I would use the theorem that if <code>c | a</code> then <code>c | a + b &lt;-&gt; c | b</code>, where <code>c</code> is <code>b</code>, <code>a</code> is <code>\\sum i in s.erase n, ai</code>, and <code>b</code> is <code>an</code></p>",
        "id": 252203486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630949066
    },
    {
        "content": "<p>Or something like that. The details depend to some extent on the context in which the theorem appears</p>",
        "id": 252203545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630949100
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"c1\">-- for sum notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"c1\">-- so I can write `range` not `finset.range`</span>\n\n<span class=\"c1\">-- my m is your m-1 (because it's more idiomatic in Lean to</span>\n<span class=\"c1\">-- sum from 0) and my n is your n-2 (because it's much easier to have a natural</span>\n<span class=\"c1\">-- variable than a natural with a hypothesis). Finally my d is your b</span>\n<span class=\"c1\">-- (because you use b to mean two different things)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>would be one way to do it (I've renormalised things to make it more idiomatic but mathematically this is an equivalent statement)</p>",
        "id": 252205730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630950530
    },
    {
        "content": "<p>Thank you Kevin!</p>",
        "id": 252207676,
        "sender_full_name": "Thomas Strohmann",
        "timestamp": 1630951778
    }
]