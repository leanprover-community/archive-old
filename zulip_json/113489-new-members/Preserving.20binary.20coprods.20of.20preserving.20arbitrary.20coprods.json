[
    {
        "content": "<p>I have a functor <code>F : C ⥤ D</code> and I know for any <code>J : Type</code> and <code>f : J → C</code> that <code>limits.preserves_colimit (discrete.functor f) F</code>. How can I get that for all <code>X, Y : C</code>, <code>limits.preserves_colimit (category_theory.limits.pair X Y) F</code>? I.e., how can I deduce that <code>F</code> preserves binary coproducts from the fact that it preserves arbitrary coproducts?</p>",
        "id": 295112624,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661369485
    },
    {
        "content": "<p>typeclass search doesn't get it?</p>",
        "id": 295112673,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661369506
    },
    {
        "content": "<p>it should</p>",
        "id": 295112678,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661369509
    },
    {
        "content": "<p>oh hm my preserves_colimit wasn't an instance, I'll try making it one and then seeing if typeclass search gets it</p>",
        "id": 295112845,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661369560
    },
    {
        "content": "<p>Seems like it still doesn't work</p>",
        "id": 295112936,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661369591
    },
    {
        "content": "<p>can you give me a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 295113006,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661369621
    },
    {
        "content": "<p>(the specific thing I'm doing is that I've shown singular homology preserves coproducts using AB4 stuff and I want to compute H_k(S^0))</p>",
        "id": 295113023,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661369632
    },
    {
        "content": "<p>Sure, although it'll take a minute</p>",
        "id": 295113038,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661369639
    },
    {
        "content": "<p>Also my copy of mathlib is currently at revision <code>168d6ba8e13d66a5fa26131eeb24aceefc749dee</code>, in case the instance you're thinking of was added recently</p>",
        "id": 295113316,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661369744
    },
    {
        "content": "<p>BAH it seems to be missing. How annoying!</p>",
        "id": 295114047,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661370041
    },
    {
        "content": "<p>rip! I'll add it in my project now and then it'll get merged in eventually</p>",
        "id": 295114293,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661370122
    },
    {
        "content": "<p>Keep in mind that it's always better to open many small PRs as opposed to a few large ones! This would be an easy PR you could open right away.</p>",
        "id": 295115905,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661370757
    },
    {
        "content": "<p>Related question: does mathlib have that the binary coproduct of two initial objects is an initial object?</p>",
        "id": 295135575,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661379723
    }
]