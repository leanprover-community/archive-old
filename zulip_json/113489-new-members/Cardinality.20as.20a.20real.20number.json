[
    {
        "content": "<p>I want to do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">parameter</span> <span class=\"n\">M</span> <span class=\"o\">:</span>  <span class=\"n\">ℝ</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A.card</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>But there is an error concerning <code>decidable_linear_order ℝ</code> not being the same type as <code>ℝ</code>.<br>\nI also tried with <code>↑(A.card)</code> but that didn't fix it. <span aria-label=\"cant talk\" class=\"emoji emoji-1f637\" role=\"img\" title=\"cant talk\">:cant_talk:</span></p>",
        "id": 214523764,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603675414
    },
    {
        "content": "<p>I actually don't know what a <code>parameter</code> is.  Is there a reason not to use <code>variable</code>?  This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">A.card</span>\n</code></pre></div>",
        "id": 214524373,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603676281
    },
    {
        "content": "<p>Oh that's strange... <code>parameter</code> was in order to not have to mention <code>M</code> all the time</p>",
        "id": 214524618,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603676578
    },
    {
        "content": "<p>Well, using <code>variable</code> causes another error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">A.card</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test_thm</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">}:</span> <span class=\"n\">test</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">test</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>  <span class=\"n\">test</span> <span class=\"n\">A</span> <span class=\"n\">term</span>  <span class=\"n\">A</span> <span class=\"n\">has</span> <span class=\"n\">type</span>  <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>  <span class=\"n\">ℝ</span>\n</code></pre></div>\n\n<p>I guess I would have to write <code>test M A</code>instead of <code>test M</code>.<br>\nThanks though, I might give in and do that.</p>",
        "id": 214524799,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603676842
    },
    {
        "content": "<p>Not sure what exactly you want to do. Hard to guess without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. Usually, <code>parameter</code> is not what you want. But here is a \"mwe\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">parameter</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A.card</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214525584,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603677858
    },
    {
        "content": "<p>Specifically, this will still make <code>test</code> take some real as the first argument:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">parameter</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A.card</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">test</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">test : ℝ → finset ℕ → ℝ</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 214525627,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603677926
    },
    {
        "content": "<p>I thought maybe the point is that <code>f(x,y)=x*y</code> is a computable function but for a given noncomputable <code>c</code>, <code>g(y)=c*y</code> is not computable... but I think the same problem happens with <code>ℚ</code> where all elements are computable.</p>",
        "id": 214527197,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603680242
    },
    {
        "content": "<p>I'm not sure what you mean here. I guess I don't know where you were seeing the decidable linear order issue previously</p>",
        "id": 214527561,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603680741
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I made some progress from your hints. Now I'm stuck on trying to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">X.card</span> <span class=\"bp\">≤</span> <span class=\"n\">Y.card</span> <span class=\"bp\">→</span>  <span class=\"bp\">↑</span><span class=\"o\">(</span> <span class=\"n\">X.card</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Y.card</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>Seems \"obvious\"...</p>",
        "id": 214534822,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603690438
    },
    {
        "content": "<p>Great! Do you know about <code>norm_cast</code> and <code>push_cast</code>?<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_cast\">https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_cast</a></p>",
        "id": 214534956,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603690584
    },
    {
        "content": "<p>That did it!</p>",
        "id": 214535439,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603691246
    }
]