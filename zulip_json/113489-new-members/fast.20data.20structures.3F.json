[
    {
        "content": "<p>While trying to clean up this implementation of <code>rewrite_search</code> I am trying to figure out which data structures are the fastest and had a couple questions. I would expect that it's the ones implemented in the VM. It looks like <code>d_array</code> is supposed to be, for example. My first question is, does this work quickly as I'd expect? When I look at the code some of the methods don't seem like they would be efficient. For example from <a href=\"https://github.com/leanprover-community/lean/blob/0ec2a19/library/init/data/array/basic.lean#L11\">https://github.com/leanprover-community/lean/blob/0ec2a19/library/init/data/array/basic.lean#L11</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `write a i v` sets the `i`th member of `a` to be `v`. Has builtin VM implementation. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">write</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">d_array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d_array</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">eq.rec_on</span> <span class=\"n\">h</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">a.read</span> <span class=\"n\">j</span><span class=\"o\">}</span>\n</code></pre></div>\n\n<p>That implementation looks like it will be O(n) to evaluate a read after doing n writes. Is it actually being replaced with something else more efficient by the VM?</p>\n<p>My second question is whether there are other efficient data structures. In particular a good map structure like a hashmap or a treemap would be nice. There are a bunch of different tree-like structures lying around and I was wondering if there's conventional wisdom on which are the best to use.</p>",
        "id": 214741390,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603822449
    },
    {
        "content": "<blockquote>\n<p>Is it actually being replaced with something else more efficient by the VM?</p>\n</blockquote>\n<p>yes</p>",
        "id": 214745829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824367
    },
    {
        "content": "<p>There is an array-based hashmap implementation in mathlib</p>",
        "id": 214745887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824393
    },
    {
        "content": "<p>The conversation moved <a href=\"#narrow/stream/113488-general/topic/fast.20data.20structures.3F\">here</a></p>",
        "id": 214745889,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603824394
    }
]