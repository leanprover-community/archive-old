[
    {
        "content": "<p>Since a set looks to be defined as a function from the type to propositions and is specified as a proposition that the elements of a type need to satisfy in order to be an element of the set, I was wondering if there is a convenient tactic to rewrite a goal of the form <code>a ‚àà A</code> as the proposition <code>a</code> needs to satisfy in order to be a member of <code>A</code></p>",
        "id": 201043760,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1592326315
    },
    {
        "content": "<p>it's <code>A</code></p>",
        "id": 201044632,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592326713
    },
    {
        "content": "<p>That's breaking the interface but it's also the correct answer: <code>A a</code> is the proposition which is true iff a is in A</p>",
        "id": 201044691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592326738
    },
    {
        "content": "<p>maybe you want <code>rw set.mem_def</code></p>",
        "id": 201044777,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592326773
    },
    {
        "content": "<p>I am not really sure I understand! What I meant was that <code>a ‚àà A</code> is the goal and I want to put it in a more explicit form. In my case the set <code>A</code> depends on many parameters, and if copy the set name in the proof Lean does not recognize these parameters (I have no idea why since they are defined). On the other hand <code>rw set.mem_def</code> just rewrites <code>a ‚àà A</code> as <code>A a</code> and does not make anything explicit. I attach the pictures <a href=\"/user_uploads/3121/BDva7h1AhSkRy6zj-LdZj1gw/Annotazione-2020-06-16-195745.png\">Annotazione-2020-06-16-195745.png</a> <a href=\"/user_uploads/3121/pItntIMVjdyXKuLpF9Qy9aH0/Annotazione-2020-06-16-195616.png\">Annotazione-2020-06-16-195616.png</a> <a href=\"/user_uploads/3121/eslpTpuMdl6_Fuu_THTybA-P/Annotazione-2020-06-16-195540.png\">Annotazione-2020-06-16-195540.png</a> of the two propose tactics for clearance.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/BDva7h1AhSkRy6zj-LdZj1gw/Annotazione-2020-06-16-195745.png\" title=\"Annotazione-2020-06-16-195745.png\"><img src=\"/user_uploads/3121/BDva7h1AhSkRy6zj-LdZj1gw/Annotazione-2020-06-16-195745.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pItntIMVjdyXKuLpF9Qy9aH0/Annotazione-2020-06-16-195616.png\" title=\"Annotazione-2020-06-16-195616.png\"><img src=\"/user_uploads/3121/pItntIMVjdyXKuLpF9Qy9aH0/Annotazione-2020-06-16-195616.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/eslpTpuMdl6_Fuu_THTybA-P/Annotazione-2020-06-16-195540.png\" title=\"Annotazione-2020-06-16-195540.png\"><img src=\"/user_uploads/3121/eslpTpuMdl6_Fuu_THTybA-P/Annotazione-2020-06-16-195540.png\"></a></div>",
        "id": 201052016,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1592330321
    },
    {
        "content": "<p>give us code we can cut/paste into our local editors (the jargon for this here is <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>)</p>",
        "id": 201052623,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592330578
    },
    {
        "content": "<p>Your question doesn't seem to be about set membership, but rather the definition of the specific set you're interested in</p>",
        "id": 201052797,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592330661
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">real_instances</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">defs</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">prod_manifold</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">manifold</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H&#39;</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">manifold</span> <span class=\"n\">H&#39;</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">manifold</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"bp\">√ó</span><span class=\"n\">H&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">√ó</span><span class=\"n\">M&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">prod_smooth_manifold_with_corners</span> <span class=\"o\">{</span><span class=\"err\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">ùïú</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">E&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">ùïú</span> <span class=\"n\">E&#39;</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H&#39;</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I&#39;</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">ùïú</span> <span class=\"n\">E&#39;</span> <span class=\"n\">H&#39;</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">manifold</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">M&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">manifold</span> <span class=\"n\">H&#39;</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">I&#39;</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">smooth_manifold_with_corners</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">I&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">√ó</span><span class=\"n\">M&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">compatible</span> <span class=\"o\">:=</span>\n      <span class=\"k\">begin</span>\n        <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h_f</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h_g</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h_f</span> <span class=\"k\">with</span> <span class=\"n\">f1</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">temp</span> <span class=\"k\">with</span> <span class=\"n\">hf1</span> <span class=\"n\">temp2</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">temp2</span> <span class=\"k\">with</span> <span class=\"n\">f2</span> <span class=\"n\">temp3</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">temp3</span> <span class=\"k\">with</span> <span class=\"n\">hf2</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h_g</span> <span class=\"k\">with</span> <span class=\"n\">g1</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">temp</span> <span class=\"k\">with</span> <span class=\"n\">hg1</span> <span class=\"n\">temp2</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">temp2</span> <span class=\"k\">with</span> <span class=\"n\">g2</span> <span class=\"n\">temp3</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">temp3</span> <span class=\"k\">with</span> <span class=\"n\">hg2</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_def</span><span class=\"o\">,</span>\n      <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 201053051,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1592330792
    },
    {
        "content": "<p>Well the specific set I am interested in is a set defined by a property:</p>",
        "id": 201053194,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1592330880
    },
    {
        "content": "<p><code>dsimp</code> or <code>unfold members</code> might do it</p>",
        "id": 201053698,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592331161
    },
    {
        "content": "<p><code>tidy</code> might do something useful, and you can interrogate it with <code>tidy?</code></p>",
        "id": 201053747,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592331184
    },
    {
        "content": "<p>your example breaks for me at the first cases, maybe my mathlib is outdated</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">‚àß</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201054110,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592331347
    },
    {
        "content": "<p>the \"operation\" you're trying to do is to replace something with something else that's defeq</p>",
        "id": 201054227,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592331388
    },
    {
        "content": "<p>so whatever you wanted to do after unfolding the definition, you can probably already do it</p>",
        "id": 201054258,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592331412
    },
    {
        "content": "<p>Sorry, this should work! I might have put a sorry where I did not have to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">real_instances</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">defs</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">prod_manifold</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">manifold</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H&#39;</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">manifold</span> <span class=\"n\">H&#39;</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">manifold</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"bp\">√ó</span><span class=\"n\">H&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">√ó</span><span class=\"n\">M&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">atlas</span>            <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">local_homeomorph</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">√ó</span><span class=\"n\">M&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"bp\">√ó</span><span class=\"n\">H&#39;</span><span class=\"o\">)),</span>\n                        <span class=\"bp\">‚àÉ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">‚àà</span> <span class=\"o\">(</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">atlas</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"err\">‚àà</span> <span class=\"o\">(</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">atlas</span> <span class=\"n\">H&#39;</span> <span class=\"n\">M&#39;</span><span class=\"o\">))</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">local_homeomorph</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">))),</span>\n  <span class=\"n\">chart_at</span>         <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">√ó</span><span class=\"n\">M&#39;</span><span class=\"o\">),</span> <span class=\"n\">local_homeomorph</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">chart_at</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">chart_at</span> <span class=\"n\">H&#39;</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Why only H??? -/</span>\n  <span class=\"n\">mem_chart_source</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">chart_mem_atlas</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">chart_at</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">chart_at</span> <span class=\"n\">H&#39;</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">prod_smooth_manifold_with_corners</span> <span class=\"o\">{</span><span class=\"err\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">ùïú</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">E&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">ùïú</span> <span class=\"n\">E&#39;</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H&#39;</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I&#39;</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">ùïú</span> <span class=\"n\">E&#39;</span> <span class=\"n\">H&#39;</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">manifold</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">M&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">manifold</span> <span class=\"n\">H&#39;</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">I&#39;</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">smooth_manifold_with_corners</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">I&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">√ó</span><span class=\"n\">M&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">compatible</span> <span class=\"o\">:=</span>\n      <span class=\"k\">begin</span>\n        <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h_f</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h_g</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h_f</span> <span class=\"k\">with</span> <span class=\"n\">f1</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">temp</span> <span class=\"k\">with</span> <span class=\"n\">hf1</span> <span class=\"n\">temp2</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">temp2</span> <span class=\"k\">with</span> <span class=\"n\">f2</span> <span class=\"n\">temp3</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">temp3</span> <span class=\"k\">with</span> <span class=\"n\">hf2</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h_g</span> <span class=\"k\">with</span> <span class=\"n\">g1</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">temp</span> <span class=\"k\">with</span> <span class=\"n\">hg1</span> <span class=\"n\">temp2</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">temp2</span> <span class=\"k\">with</span> <span class=\"n\">g2</span> <span class=\"n\">temp3</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">temp3</span> <span class=\"k\">with</span> <span class=\"n\">hg2</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n\n      <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 201054753,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1592331636
    },
    {
        "content": "<p>i don't understand all this geometry, but maybe you find <code>split; dsimp,</code> interesting after the last line of your proof so far</p>",
        "id": 201055019,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592331761
    },
    {
        "content": "<p>Thanks for your help! Basically what I was trying to do was simply to find a way to make the property explicit so that I could understand why <code>rw prod_coe_symm</code>, where</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">prod_coe_symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e&#39;</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">Œ≥</span> <span class=\"n\">Œ¥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">Œª</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">e&#39;</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>fails:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"err\">‚áë</span><span class=\"o\">((</span><span class=\"n\">local_homeomorph</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"err\">?</span><span class=\"n\">m_9</span> <span class=\"err\">?</span><span class=\"n\">m_10</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"err\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">ùïú</span><span class=\"o\">,</span>\n<span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"err\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"n\">E&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">E&#39;</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"err\">ùïú</span> <span class=\"n\">E&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">H&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">I&#39;</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">ùïú</span> <span class=\"n\">E&#39;</span> <span class=\"n\">H&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_8</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_9</span> <span class=\"o\">:</span> <span class=\"n\">manifold</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_10</span> <span class=\"o\">:</span> <span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">M&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_11</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">M&#39;</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_12</span> <span class=\"o\">:</span> <span class=\"n\">manifold</span> <span class=\"n\">H&#39;</span> <span class=\"n\">M&#39;</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_13</span> <span class=\"o\">:</span> <span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">I&#39;</span> <span class=\"n\">M&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">√ó</span> <span class=\"n\">M&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">√ó</span> <span class=\"n\">H&#39;</span><span class=\"o\">),</span>\n<span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">M</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">hf1</span> <span class=\"o\">:</span> <span class=\"n\">f1</span> <span class=\"err\">‚àà</span> <span class=\"n\">atlas</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">M&#39;</span> <span class=\"n\">H&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">hf2</span> <span class=\"o\">:</span> <span class=\"n\">f2</span> <span class=\"err\">‚àà</span> <span class=\"n\">atlas</span> <span class=\"n\">H&#39;</span> <span class=\"n\">M&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f1</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">f2</span><span class=\"o\">,</span>\n<span class=\"n\">g1</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">M</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">hg1</span> <span class=\"o\">:</span> <span class=\"n\">g1</span> <span class=\"err\">‚àà</span> <span class=\"n\">atlas</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">g2</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">M&#39;</span> <span class=\"n\">H&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">hg2</span> <span class=\"o\">:</span> <span class=\"n\">g2</span> <span class=\"err\">‚àà</span> <span class=\"n\">atlas</span> <span class=\"n\">H&#39;</span> <span class=\"n\">M&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">g2</span>\n<span class=\"err\">‚ä¢</span> <span class=\"o\">(</span><span class=\"n\">f1</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">f2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">g2</span><span class=\"o\">)</span> <span class=\"err\">‚àà</span> <span class=\"o\">(</span><span class=\"n\">times_cont_diff_groupoid</span> <span class=\"err\">‚ä§</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">I&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">members</span>\n</code></pre></div>\n\n\n<p>indeed it looks pretty easy to me to see where the instance of the pattern in the target expression is (<code>(f1.prod f2).symm</code>) and I do not understand why Lean does not recognize it.<br>\nIn particular I was not really looking to go on with the proof but simply to find out why I cannot rewrite this lemma, but I guess there is not a simple way to make this goal explicit (the tactic you suggested either time out or require me to write the set name inside the code, and Lean does not recognize the set name). Do you have any idea why lean does not recognize the target expression?</p>",
        "id": 201057330,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1592332892
    },
    {
        "content": "<p>I think the issue is that the lemma is about the coercion of <code>(f1.prod f2).symm</code> to a function, but your goal does not have this coercion.</p>",
        "id": 201058739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592333648
    },
    {
        "content": "<p>Your goal is an assertion about a local homeomorphism, not a function. You might think \"a local homeomorphism _is_ a function!\" but this is not true in Lean -- they have different types so it's meaningless to say that they're equal. There's an \"invisible function\" which takes the local homeo to a function, and this invisible function isn't there in the goal, but it is there in the lemma you're trying to use to rewrite.</p>",
        "id": 201059422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592333913
    },
    {
        "content": "<p>it's also in the name <code>coe</code></p>",
        "id": 201059470,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592333947
    },
    {
        "content": "<p>The invisible function in this case is called a coercion.</p>",
        "id": 201059518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592333976
    },
    {
        "content": "<p>And it's not invisible in the error message <code>‚áë((local_homeomorph.prod ?m_9 ?m_10).symm)</code>, that's the first character.</p>",
        "id": 201059694,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592334069
    },
    {
        "content": "<p>indeed, Lean can see it -- it's just invisible to mathematicians :-)</p>",
        "id": 201059765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592334103
    },
    {
        "content": "<p>If you want to go to concrete goals, you can use <code>rw [times_cont_diff_groupoid, mem_groupoid_of_pregroupoid], simp, split,</code> but I'm not sure it's the recomended way (only S√©bastien could tell us).</p>",
        "id": 201060854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592334686
    },
    {
        "content": "<p>First, I would clean up the expression of your map. Can you prove lemmas such as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">prod_symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e&#39;</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">Œ≥</span> <span class=\"n\">Œ¥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">e&#39;</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_comp</span> <span class=\"o\">{</span><span class=\"n\">Œ∑</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ∑</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œµ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e&#39;</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">Œ¥</span> <span class=\"n\">Œ∑</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">Œ∑</span> <span class=\"n\">Œµ</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">f&#39;</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">e&#39;</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">f&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>(When you want to prove that two objects are equal, a good method is to start with <code>ext x</code>. Sometimes, <code>ext</code> tries to do too much, and then <code>ext x : 1</code> is better).</p>",
        "id": 201069525,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592339177
    },
    {
        "content": "<p>(These should be in the library, but you just found one of many holes: it just means that until now no one has really needed to use thoroughly products of local homeos).</p>",
        "id": 201069659,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592339275
    },
    {
        "content": "<p>I have posted working proofs at <a href=\"https://gist.github.com/sgouezel/d8ea6cc252be22590f5c16574eb47608\">https://gist.github.com/sgouezel/d8ea6cc252be22590f5c16574eb47608</a>, but in case you want to come up with your own solutions I am not posting them here to avoid spoiling.</p>",
        "id": 201070270,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592339569
    },
    {
        "content": "<p>Ok, thanks a lot to everybody! I admit I had no idea what coercion was so I did not recognize <code>coe</code> in the name of the function. Now that I know about its existence I proved and used the lemma <code>prod_symm</code> by Sebastian to rewrite the goal as I wanted and it worked. However, I still have no idea whatsoever on how to approach hypotheses and goals of the form <code>e ‚àà times_cont_diff_groupoid ‚ä§ I</code>. I gave up on rewriting it as the defining propositions as I cannot mange to make the suggested tactics work. As Jalex suggested I am trying to think <code>e ‚àà times_cont_diff_groupoid ‚ä§ I</code> as if its defining property were written instead. As <code>e ‚àà (times_cont_diff_groupoid ‚ä§ I)</code> is defined to be <code>e ‚àà (times_cont_diff_groupoid ‚ä§ I).members</code> and in this case <code>(times_cont_diff_groupoid ‚ä§ I).members</code> is defined to be <code> {e : local_homeomorph H H | PG.property e e.source ‚àß PG.property e.symm e.target}</code> for some pregroupoid <code>PG</code> I would expect to make some progress with a hypothesis<code>h: (e ‚àà times_cont_diff_groupoid ‚ä§ I)</code> by writing <code> cases h with h1 h2</code> and obtain something I can work with, however when doing so I get the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h1</span><span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n                 <span class=\"n\">times_cont_diff_on</span> <span class=\"err\">ùïú</span> <span class=\"err\">‚ä§</span> <span class=\"o\">(</span><span class=\"err\">‚áë</span><span class=\"n\">I</span> <span class=\"err\">‚àò</span> <span class=\"n\">f</span> <span class=\"err\">‚àò</span> <span class=\"err\">‚áë</span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"err\">‚áë</span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"bp\">‚Åª¬π</span><span class=\"err\">&#39;</span> <span class=\"n\">s</span> <span class=\"err\">‚à©</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"err\">‚áë</span><span class=\"n\">I</span><span class=\"o\">),</span>\n   <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n   <span class=\"n\">id_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n   <span class=\"n\">locality</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n   <span class=\"n\">congr</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n    <span class=\"err\">‚áë</span><span class=\"n\">e</span>\n    <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"bp\">.</span><span class=\"n\">source</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n                 <span class=\"n\">times_cont_diff_on</span> <span class=\"err\">ùïú</span> <span class=\"err\">‚ä§</span> <span class=\"o\">(</span><span class=\"err\">‚áë</span><span class=\"n\">I</span> <span class=\"err\">‚àò</span> <span class=\"n\">f</span> <span class=\"err\">‚àò</span> <span class=\"err\">‚áë</span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"err\">‚áë</span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"bp\">‚Åª¬π</span><span class=\"err\">&#39;</span> <span class=\"n\">s</span> <span class=\"err\">‚à©</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"err\">‚áë</span><span class=\"n\">I</span><span class=\"o\">),</span>\n   <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n   <span class=\"n\">id_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n   <span class=\"n\">locality</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n   <span class=\"n\">congr</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n    <span class=\"err\">‚áë</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n    <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"bp\">.</span><span class=\"n\">target</span>\n</code></pre></div>\n\n\n<p>suggesting things are not really going as I expect and suggesting that even if <code>times_cont_diff_groupoid ‚ä§ I</code> should be a groupoid, things are stored inside still as a pregroupoid. If it were actually a groupoid I would use the lemma <code>mem_groupoid_of_pregroupoid</code>, but lean won't accept this because indeed <code>times_cont_diff_groupoid ‚ä§ I</code> is a groupoid (is there a way to have it back as a pregroupoid)? So I am still looking for some advice on how to deal with hypotheses and goals of this kind, if anybody has some!</p>",
        "id": 201165528,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1592411068
    },
    {
        "content": "<p><code>dsimp at h1</code> should make things a little nicer</p>",
        "id": 201165766,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592411193
    },
    {
        "content": "<p>You can always just use <code>change</code> to unfold definitions to the form you want</p>",
        "id": 201165850,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592411250
    },
    {
        "content": "<p>that said, I would also expect your <code>cases h</code> to work so maybe something else is going on</p>",
        "id": 201165890,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592411269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Way.20to.20rewrite.20goal.20containing.20.5Cin/near/201165766\">said</a>:</p>\n<blockquote>\n<p><code>dsimp at h1</code> should make things a little nicer</p>\n</blockquote>\n<p>The problem with <code>simp</code>, <code>dsimp</code>, <code>rw</code> and all of those tactics is that they just rewrite the hypotheses in a way which is almost identical with the definition. For example <code>dsimp</code> rewrites <code>e ‚àà (times_cont_diff_groupoid ‚ä§ I)</code> as <code>e ‚àà (times_cont_diff_groupoid ‚ä§ I).members</code> and this does not really help me as I already knew the two were equivalent and what I need to do here is to transform things so that I get everything expressed with <code>times_cont_diff</code> from calculus and then I can use the lemmas from the calculus library.</p>",
        "id": 201166862,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1592411737
    },
    {
        "content": "<p><code>dsimp [times_cont_diff_groupoid] at h1</code> maybe</p>",
        "id": 201167081,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592411834
    },
    {
        "content": "<p>Sorry, I only meant that it should collapse <code>{property := x, ...}.property</code> into <code>x</code></p>",
        "id": 201167265,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592411920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Way.20to.20rewrite.20goal.20containing.20.5Cin/near/201167265\">said</a>:</p>\n<blockquote>\n<p>Sorry, I only meant that it should collapse <code>{property := x, ...}.property</code> into <code>x</code></p>\n</blockquote>\n<p>Oh right sorry to you, I just got confused between the notation I am using in my file and I thought you meant a different thing. What you suggest does make things nicer even if things are still a bit different from what I expect: they are not just the properties defining the set applied to <code>e</code> but a lot of coercions (shift symbols) seem to appear, so I will try to read a bit more from the tutorial before going on as I don't really know about them. Thanks a lot fot the help!</p>",
        "id": 201168301,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1592412408
    },
    {
        "content": "<p>If you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I can have a look.</p>",
        "id": 201171720,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592414006
    },
    {
        "content": "<p>Ok thanks a lot! I will try a bit more on my own and then come back if I won't have managed!</p>",
        "id": 201176614,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1592416122
    }
]