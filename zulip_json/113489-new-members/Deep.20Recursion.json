[
    {
        "content": "<p>I am not sure why this code says there is an issue of deep recursion: <br>\ntheorem ok {c : char} :<br>\n    c = '∧' →  c ≠ '∨' :=<br>\nbegin finish end<br>\nWhen I replace  '∧'  and  '∨' with 'a' and 'b', there is no error though. Thanks!</p>",
        "id": 219388528,
        "sender_full_name": "Saroj N",
        "timestamp": 1607543311
    },
    {
        "content": "<p>It's because the unicode character for  '∧' will correspond to a number like 37 gazillion, and <code>finish</code> is not adapted to dealing with large numbers.</p>",
        "id": 219389307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607543751
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s1\">'∧'</span><span class=\"p\">)</span>\n<span class=\"mi\">8743</span>\n</code></pre></div>",
        "id": 219389839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607544003
    },
    {
        "content": "<p><del>Which amazingly, has 37 as a divisor, making \"a gazillion\" exactly 236</del></p>",
        "id": 219389908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607544033
    },
    {
        "content": "<p>&lt;never mind&gt;</p>",
        "id": 219390040,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607544109
    },
    {
        "content": "<p>Where's the <code>gazillion</code> emoji?</p>",
        "id": 219390043,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607544111
    },
    {
        "content": "<p>well, <code>chr(236)</code> is <code>ì</code>...</p>",
        "id": 219390133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607544149
    },
    {
        "content": "<p>I don't know much python but I'm a bit skeptical about the claim that 37*236=8743</p>",
        "id": 219390226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607544194
    },
    {
        "content": "<p>It turns out that the human brain isn't reliable as a clipboard. I typed <code>8732</code> by accident</p>",
        "id": 219390293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607544229
    },
    {
        "content": "<p>unless we're talking about nat.div in which case I'm totally on board</p>",
        "id": 219390312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607544238
    },
    {
        "content": "<p>It's 236.29729....</p>",
        "id": 219390368,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607544254
    },
    {
        "content": "<p>this works though: <code>lemma foo (c : ℕ) : c = 88888 → c ≠ 99999 := by finish</code></p>",
        "id": 219390396,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607544271
    },
    {
        "content": "<p>maybe the issue is that char does something crazy, this has come up before</p>",
        "id": 219390419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607544293
    },
    {
        "content": "<p>chars are somehow unusable in Lean 3</p>",
        "id": 219390533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607544360
    },
    {
        "content": "<p>The problem is something to do with this code in core:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">is_valid_char</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0xd800</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">0xdfff</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0x110000</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_valid_char_range_1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0xd800</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_valid_char</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">or.inl</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_valid_char_range_2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0xdfff</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0x110000</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_valid_char</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- The `char` type represents an unicode scalar value.</span>\n<span class=\"sd\">    See http://www.unicode.org/glossary/#unicode_scalar_value). -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">char</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">valid</span> <span class=\"o\">:</span> <span class=\"n\">is_valid_char</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Checking that you're in the right range is really painful.</p>",
        "id": 219390918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607544559
    },
    {
        "content": "<p>You just need the right lemmas and to use the tool for the job:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">char.of_nat_inj</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">is_valid_char</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">is_valid_char</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">char.of_nat</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">char.of_nat</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">char.of_nat</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">char.veq_of_eq</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ok</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">char</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"sc\">'∧'</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"sc\">'∨'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">char.of_nat_inj</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">is_valid_char</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219391059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607544626
    },
    {
        "content": "<p>Here's a ridiculous solution: replace <code>∧</code> and <code>∨</code> by ASCII characters <code>.</code> and <code>v</code> and do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"k\">#eval</span> <span class=\"sc\">'v'</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n<span class=\"k\">#eval</span> <span class=\"sc\">'.'</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ok</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">char</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"sc\">'.'</span> <span class=\"bp\">→</span>  <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"sc\">'v'</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">dot</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"sc\">'.'</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">vee</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"sc\">'v'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"mi\">118</span> <span class=\"bp\">=</span> <span class=\"mi\">46</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">calc</span> <span class=\"mi\">118</span> <span class=\"bp\">=</span> <span class=\"sc\">'v'</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"sc\">'v'</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span>\n                             <span class=\"bp\">...</span> <span class=\"bp\">=</span>   <span class=\"n\">c.val</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">vee</span>\n                             <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"sc\">'.'</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">dot</span>\n                             <span class=\"bp\">...</span> <span class=\"bp\">=</span>      <span class=\"mi\">46</span> <span class=\"o\">:</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"sc\">'.'</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">same_num</span><span class=\"o\">:</span> <span class=\"mi\">72</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n\n    <span class=\"n\">nat.succ_ne_zero</span> <span class=\"mi\">71</span> <span class=\"o\">(</span><span class=\"n\">eq.trans</span> <span class=\"o\">(</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"mi\">71</span><span class=\"o\">))</span> <span class=\"n\">same_num</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 220494397,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608423274
    }
]