[
    {
        "content": "<p>Hello there.  I've been learning Lean and there's something that I want to do that I think should be possible but I have no idea how to write it.  The following example is as minimal as I can make it:<br>\nSuppose I have a type <code>foo</code> and then a dependent type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">dependent</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">dependent</span>\n</code></pre></div>\n\n<p>And then I want to make a function <code>func</code> that takes a value <code>bar</code> of type <code>foo</code> as an argument and returns a value of type <code>(dependent bar)</code>.  Basically, the return type of the function needs to partially depend on the value of the argument.  The Lean manual suggests that this is possible, but I couldn't actually see any examples of how to write it.  My reading of the manual leads me to think (and I may well be wrong) the syntax for the type declaration is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">Î </span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">dependent</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>but I have no idea what then goes in the actual definition.</p>\n<p>Thanks for any help!</p>",
        "id": 214826149,
        "sender_full_name": "Nicholas Dyson",
        "timestamp": 1603886391
    },
    {
        "content": "<p>Is this what you're after?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">FOO</span>\n<span class=\"bp\">|</span> <span class=\"n\">BAR</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">dependent</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">dependent</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dependent</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">dependent.baz</span>\n</code></pre></div>",
        "id": 214826597,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603886662
    },
    {
        "content": "<p>YES, thank you so much; that does what I want and now that I know what it's supposed to look like I've been able to make the actual version do what I want.  You're a star!</p>",
        "id": 214827801,
        "sender_full_name": "Nicholas Dyson",
        "timestamp": 1603887443
    },
    {
        "content": "<p>I think <code>structure dependent (a : foo)</code> would work just fine in that example</p>",
        "id": 214830932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603889404
    }
]