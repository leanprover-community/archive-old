[
    {
        "content": "<p>Here's another one that just bit one of my students:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"c1\">-- tactic failed</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I understand the pieces that go into this --- both types and sets can be nonempty, a set can be coerced implicitly to a type so <code>nonempty s</code> means <code>nonempty ↥s</code>, and since <code>s</code> is a set <code>s.nonempty</code> means <code>set.nonempty s</code> --- but the end result is unfortunate.  Is there any way to avoid it?</p>\n<p>Would it be possible to do something like guard <code>nonempty</code> by a typeclass <code>has_nonempty</code>, so that <code>nonempty s</code> would refer to <code>set.nonempty s</code> since <code>s</code> is a set, while <code>nonempty A</code> would instead find the notion of nonemptiness of a type?</p>",
        "id": 315671373,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1670960528
    },
    {
        "content": "<p><code>by library_search</code> is probably the right answer?</p>",
        "id": 315687409,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670966023
    },
    {
        "content": "<p>nonemptyness is already a mess IMO, I don't know whether a new typeclass is the answer</p>",
        "id": 315687522,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670966059
    },
    {
        "content": "<p>With your proposal, people would then need to write <code>nonempty ↥s</code> to mean the current <code>nonempty s</code>, which doesn't seem great.</p>",
        "id": 315687717,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670966138
    },
    {
        "content": "<p>I suppose what Mike wants is something that would unify <code>set.nonempty</code> and <code>nonempty</code> for types?</p>",
        "id": 315688146,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670966318
    },
    {
        "content": "<p>And if we had such a thing, then it wouldn't make much sense to write <code>nonempty ↥s</code> as opposed to <code>nonempty s</code></p>",
        "id": 315688221,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670966359
    },
    {
        "content": "<p><code>set.nonempty</code> is <em>purposefully</em> not the same as <code>nonempty s</code> to avoid it being frozen in the context.</p>",
        "id": 315688762,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670966589
    },
    {
        "content": "<p>How would such a class be implemented? Doing something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">condition</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_nonempty</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">nonempty</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_nonempty</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">set.nonempty</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>doesn't really save much work, since it would still involve all the same code duplication when you want to actually use nonemptyness for particular types.</p>",
        "id": 315688838,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670966630
    },
    {
        "content": "<p>Frozen hypotheses result in much more incomprehensible error messages than the one Mike's student encountered.</p>",
        "id": 315688949,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670966662
    },
    {
        "content": "<p>Yes -- the error Mike's student saw can be easily debugged using the widgets in the infoview, the error about frozen local instances is a lot more inscrutable</p>",
        "id": 315689404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670966872
    },
    {
        "content": "<p>one reasonable solution would be to rename <code>set.nonempty</code>.</p>",
        "id": 315689775,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670967015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> \"Easily\" maybe if you already know that nonemptiness for types and nonemptiness for sets could be different things.  If the possibility that there could be two different things both referred to as <code>nonempty</code> doesn't enter your consciousness, it's not so easy.</p>",
        "id": 315713266,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1670976898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I'm not suggesting it would save any work, just that it would reduce confusing error messages like this.</p>",
        "id": 315713313,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1670976930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> What is a frozen hypothesis?</p>",
        "id": 315713425,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1670976979
    },
    {
        "content": "<p>In a context, Lean has an \"instance cache\", which is the hypotheses in context that Lean knows to be instances. Those are the ones that are used (along with <code>instance</code> declarations) for typeclass inference. Because typeclasses barely ever change in a proof, Lean doesn't update the instance cache automatically, and in fact \"freezes\" its content to prevent hypotheses it knows to be typeclasses to be modified. You can unfreeeze the instance using <code>I</code> tactics (<code>resetI</code>, <code>haveI</code>, <code>exactI</code>), but this is definitely not meant for the beginner, especially because the instance cache is invisible from the context (<a href=\"https://github.com/leanprover-community/mathlib/pull/15959\">#15959</a> is a PR to make it visible).</p>",
        "id": 315714666,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670977784
    },
    {
        "content": "<p>In your proposition, <code>nonempty s</code> would become a class, which means that it would be frozen by Lean, which means that most tactics (I am mostly thinking about <code>rw</code>) wouldn't be able to change it without being wrapped into a <code>resetI</code> call.</p>",
        "id": 315714819,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670977865
    },
    {
        "content": "<p>Another possible solution: In lean4 it would be easy to write a macro that expands to <code>[nonempty X]</code> for types and to <code>(h : set.nonempty X)</code> for sets.</p>",
        "id": 315714939,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670977937
    },
    {
        "content": "<p>I'm hoping that after the port to lean4 is done, it will be relatively commonplace to write such ad-hoc macros that make lean more closely resemble informal mathematics</p>",
        "id": 315715106,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670978045
    },
    {
        "content": "<p>I think the main source of confusion is the (ab)use of dot notation though.</p>",
        "id": 315715163,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1670978098
    }
]