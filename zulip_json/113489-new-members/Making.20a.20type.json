[
    {
        "content": "<p>I want to create a new type that should act exactly like <code>real</code>. I will later add some subtype predicates to it but for now I just want it to behave like <code>real</code>. How do I do that? I tried <code>def myreal : Type := real</code> but afaict that doesn't have <code>has_mul</code>.</p>",
        "id": 202212511,
        "sender_full_name": "Iocta",
        "timestamp": 1593305449
    },
    {
        "content": "<p>I guess this might be what you want? I think this has all the properties (typeclasses) that <code>real</code> does? But in general you can just use <code>variables</code> and put whatever typeclasses you want the type of have.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_field</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">myreal</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">myreal</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 202212911,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1593306245
    },
    {
        "content": "<p>I'm not sure exactly what you want to achieve (it would help if you explained a little more what your actual goal is perhaps).<br>\nBut you can do this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">has_mul</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">myreal</span> <span class=\"o\">:=</span> <span class=\"n\">real</span>\n</code></pre></div>\n\n\n<p>to add whatever instances you like automatically my transferring them from real, finding a list of all the possible instances on real wouldn't be recommended though.<br>\nYou could also do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">myreal</span> <span class=\"o\">:=</span> <span class=\"n\">real</span>\n</code></pre></div>\n\n\n<p>If you are going to make it a subtype of real later why not make it one now, but a trivial condition if you cant yet define the condition you want so that the type behaves like a subtype.</p>",
        "id": 202212923,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593306313
    },
    {
        "content": "<blockquote>\n<p>(it would help if you explained a little more what your actual goal is perhaps).</p>\n</blockquote>\n<p>Sure. I want to try proving some theorems from elementary probability as an exercise. I figured it would be easier to start by just saying \"a probability is a real\" and replace the definitions later, than to start from measure theory ... though I could be wrong</p>",
        "id": 202213096,
        "sender_full_name": "Iocta",
        "timestamp": 1593306605
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n\n<span class=\"c1\">-- XXX For now `ℝ` denotes a probability, and `real` denotes a real.</span>\n<span class=\"c1\">-- This should be changed to an actual probability type.</span>\n\n<span class=\"n\">def</span> <span class=\"n\">binomial_coefficient</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">binomial_pmf</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">binomial_coefficient</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">Poisson_pmf</span> <span class=\"o\">(</span><span class=\"n\">lambda</span><span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lambda</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">exp</span> <span class=\"n\">lambda</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I immediately run into <code>definition 'Poisson_pmf' is noncomputable, it depends on 'real.division_ring'</code>, not sure what to do with that.</p>",
        "id": 202213181,
        "sender_full_name": "Iocta",
        "timestamp": 1593306810
    },
    {
        "content": "<p>I'd recommend doing what <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> says then, maybe not starting from discrete_linear_ordered_field  but just <code>has_mul</code> or <code>comm_semiring</code>  as variables, assumptions on what your type satisfies, then later if you actually construct the type with these properties all the theorems will apply.</p>",
        "id": 202213231,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593306899
    },
    {
        "content": "<p>you can add <code>noncomputable theory</code> at the top of the file (under imports)</p>",
        "id": 202213237,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593306920
    },
    {
        "content": "<p>Is there a positive reals type?</p>",
        "id": 202215919,
        "sender_full_name": "Iocta",
        "timestamp": 1593311621
    },
    {
        "content": "<p>There is <code>nnreal</code> for the reals <code>\\ge 0</code></p>",
        "id": 202217321,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593314359
    }
]