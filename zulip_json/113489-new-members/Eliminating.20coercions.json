[
    {
        "content": "<p>I have the following context</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nd</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">x'</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>where the coe on <code>n</code> and <code>d</code> are both at <code>\\R</code>. how can i prove the goal from <code>x'</code>?</p>",
        "id": 222353599,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610396921
    },
    {
        "content": "<p>Try <code>assumption_mod_cast</code>.</p>",
        "id": 222353672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610396955
    },
    {
        "content": "<p>that does it. how could i have found this for myself?</p>",
        "id": 222353734,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610396984
    },
    {
        "content": "<p>Just keep asking.</p>",
        "id": 222353770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610396995
    },
    {
        "content": "<p>The <code>cast</code> tactics are probably mentioned in the API documentation</p>",
        "id": 222353855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610397015
    },
    {
        "content": "<p>happy to continue asking, tho i feel like a bit of a burden!!</p>",
        "id": 222353955,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610397056
    },
    {
        "content": "<p>The one you need to know in this case is <code>norm_cast at x'</code>.</p>",
        "id": 222353959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610397058
    },
    {
        "content": "<p>There's a relatively small number of techniques and if you keep trying to prove stuff then eventually you see them all</p>",
        "id": 222354054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610397096
    },
    {
        "content": "<p>that's helpful. thank you!</p>",
        "id": 222354114,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610397120
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_cast\">tactic#norm_cast</a> mentions <code>assumption_mod_cast</code> and the other <code>*_mod_cast</code> tactics.</p>",
        "id": 222354849,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610397429
    },
    {
        "content": "<p>I used to think it was kind of hopeless trying to keep up with the new tactics, but actually over the last few months there are not so many new ones which have appeared, partly because we now have most of the ones we were desperate for (like <code>assumption_mod_cast</code>) and partly because I suspect the tactic writers are reluctant to work hard on Lean 3 now Lean 4 is here. Mathematically we're still missing a Groebner basis tactic, which I don't think anyone is working on ( :-( ), our <code>omega</code> tactic to solve stuff on nat is quite buggy, and some people want more general automation tactics because they're jealous of tactics in other provers. Gabriel was working on a hammer tactic but again I'm unclear about whether this will happen before Lean 4. Maybe just browsing the tactics in the API docs might be useful to you, I remember doing this quite a bit when I was learning.</p>",
        "id": 222355279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610397648
    },
    {
        "content": "<p>Sandy, if you are serious about this you can also watch the full Lean for the curious mathematician series on Youtube (except the meta-programming part). This is not so long since most of the week were exercises sessions that are not recorded. This covers the <code>norm_cast</code> family of tactics.</p>",
        "id": 222357133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610398714
    }
]