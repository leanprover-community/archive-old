[
    {
        "content": "<p>Hello! This is my first post in Zulip chat. I'm just wondering why does <code>unfold f</code> not work in this example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lem1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"c1\">-- unfold f,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261093884,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1636606952
    },
    {
        "content": "<p>You can see what the equation compiler came up with using <code>#print prefix f</code>.</p>",
        "id": 261095461,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636608798
    },
    {
        "content": "<p>If you add the case <code>| 0 (n+1) := false</code> it does a better job, and <code>unfold f</code> will work.</p>",
        "id": 261095514,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636608843
    },
    {
        "content": "<p>The equation compiler is very useful, but can't be \"perfect\".</p>",
        "id": 261095576,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636608916
    },
    {
        "content": "<p>Curiously <code>rw f</code> does something, splitting it into two goals.</p>",
        "id": 261095684,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636609045
    }
]