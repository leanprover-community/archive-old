[
    {
        "content": "<p>I have a group and want to talk about the action of a certain subgroup, but run into issues with typeclass inference. The following is the specific example that I want to get working:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">group_action</span>\n\n<span class=\"c1\">-- My plan is to define a `mul_action` instance on any submonoid, then use inference to get it for a specific set.</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">subset_has_scalar</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">s</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">•</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">submonoid_mul_action</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_submonoid</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">s</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">mul_smul</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"c1\">-- these are concrete values in my situation</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">orbit_rel</span> <span class=\"n\">s</span> <span class=\"n\">β</span> <span class=\"c1\">-- error : failed to synthesise instance for `mul_action ↥s β`</span>\n</pre></div>\n\n\n<p>The problem seems to be a mismatch between the <code>monoid</code> instances inferred. With <code>pp.all</code> on, the <code>submonoid_mul_action</code> instance looks like:</p>\n<div class=\"codehilite\"><pre><span></span>    @mul_action.{0 0} (@coe_sort.{1 2} (set.{0} ?M_1) (@set.has_coe_to_sort.{0} ?M_1) s) ?M_2\n      (@subtype.monoid.{0} ?M_1 ?M_3 s _inst_3)\n</pre></div>\n\n\n<p>and Lean is trying to infer:</p>\n<div class=\"codehilite\"><pre><span></span>@mul_action.{0 0} (@coe_sort.{1 2} (set.{0} α) (@set.has_coe_to_sort.{0} α) s) β\n    (@group.to_monoid.{0} (@coe_sort.{1 2} (set.{0} α) (@set.has_coe_to_sort.{0} α) s)\n       (@subtype.group.{0} α _inst_2 s _inst_4))\n</pre></div>\n\n\n<p>How do I convince Lean that <code>group.to_monoid (subtype.group ...)</code> should coincide with <code>subtype.monoid</code>? (It definitely does in the specific example.)</p>\n<p>Or is there another way to set it up so that I can write <code>mul_action.orbit_rel s β</code> without an error, without manually writing each instance on <code>s</code>?</p>",
        "id": 186893816,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1580310637
    },
    {
        "content": "<p>Could you please try to redefine <code>subtype.group</code> so that it will use <code>{.. subtype.monoid}</code>?</p>",
        "id": 186903446,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1580315975
    },
    {
        "content": "<p>It's in <code>group_theory/subgroup</code></p>",
        "id": 186903497,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1580315996
    },
    {
        "content": "<p>I'm not sure if this will help</p>",
        "id": 186903568,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1580316020
    },
    {
        "content": "<p>Just to comment that one of the mul_actions uses <code>_inst_3</code> and the other uses <code>_inst_2</code> and <code>_inst_4</code> so they are almost certainly not defeq. You can probably see in the local context what is going on.</p>",
        "id": 186904890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580316731
    },
    {
        "content": "<blockquote>\n<p>Could you please try to redefine <code>subtype.group</code> so that it will use <code>{.. subtype.monoid}</code>?</p>\n</blockquote>\n<p>That doesn't seem to help, unfortunately: still the same error</p>",
        "id": 186905116,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1580316871
    },
    {
        "content": "<p>Adding an extra instance declaration with an explicit <code>monoid s</code> parameter works, but it seems ugly to have two instances with exactly the same definition:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">subgroup_mul_action</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">mul_action</span> <span class=\"n\">s</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"bp\">_</span><span class=\"o\">):=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">one_smul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">mul_smul</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 186905606,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1580317144
    },
    {
        "content": "<p>Redefined <code>subtype.*</code> without using <code>subtype_instance</code>; compiling.</p>",
        "id": 188079038,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581571304
    },
    {
        "content": "<p>These definitions make it work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff --git a/src/group_theory/subgroup.lean b/src/group_theory/subgroup.lean</span>\n<span class=\"gh\">index d54cd8eba..ac0b1dbcb 100644</span>\n<span class=\"gd\">--- a/src/group_theory/subgroup.lean</span>\n<span class=\"gi\">+++ b/src/group_theory/subgroup.lean</span>\n<span class=\"gu\">@@ -50,11 +50,13 @@ theorem multiplicative.is_subgroup_iff</span>\n\n @[to_additive add_group]\n instance subtype.group {s : set α} [is_subgroup s] : group s :=\n<span class=\"gd\">-by subtype_instance</span>\n<span class=\"gi\">+{ inv := λ x, ⟨(x:α)⁻¹, is_subgroup.inv_mem x.2⟩,</span>\n<span class=\"gi\">+  mul_left_inv := λ x, subtype.eq $ mul_left_inv x.1,</span>\n<span class=\"gi\">+  .. subtype.monoid }</span>\n\n @[to_additive add_comm_group]\n instance subtype.comm_group {α : Type*} [comm_group α] {s : set α} [is_subgroup s] : comm_group s :=\n<span class=\"gd\">-by subtype_instance</span>\n<span class=\"gi\">+{ .. subtype.group, .. subtype.comm_monoid }</span>\n\n @[simp, to_additive]\n lemma is_subgroup.coe_inv {s : set α} [is_subgroup s] (a : s) : ((a⁻¹ : s) : α) = a⁻¹ := rfl\n<span class=\"gh\">diff --git a/src/group_theory/submonoid.lean b/src/group_theory/submonoid.lean</span>\n<span class=\"gh\">index e9fa5895e..c644e06d9 100644</span>\n<span class=\"gd\">--- a/src/group_theory/submonoid.lean</span>\n<span class=\"gi\">+++ b/src/group_theory/submonoid.lean</span>\n<span class=\"gu\">@@ -221,12 +221,17 @@ end is_submonoid</span>\n /-- Submonoids are themselves monoids. -/\n @[to_additive add_monoid &quot;An `add_submonoid` is itself an `add_monoid`.&quot;]\n instance subtype.monoid {s : set α} [is_submonoid s] : monoid s :=\n<span class=\"gd\">-by subtype_instance</span>\n<span class=\"gi\">+{ one := ⟨1, is_submonoid.one_mem s⟩,</span>\n<span class=\"gi\">+  mul := λ x y, ⟨x * y, is_submonoid.mul_mem x.2 y.2⟩,</span>\n<span class=\"gi\">+  mul_one := λ x, subtype.eq $ mul_one x.1,</span>\n<span class=\"gi\">+  one_mul := λ x, subtype.eq $ one_mul x.1,</span>\n<span class=\"gi\">+  mul_assoc := λ x y z, subtype.eq $ mul_assoc x.1 y.1 z.1 }</span>\n\n /-- Submonoids of commutative monoids are themselves commutative monoids. -/\n @[to_additive add_comm_monoid &quot;An `add_submonoid` of a commutative `add_monoid` is itself a commutative `add_monoid`. &quot;]\n instance subtype.comm_monoid {α} [comm_monoid α] {s : set α} [is_submonoid s] : comm_monoid s :=\n<span class=\"gd\">-by subtype_instance</span>\n<span class=\"gi\">+{ mul_comm := λ x y, subtype.eq $ mul_comm x.1 y.1,</span>\n<span class=\"gi\">+  .. subtype.monoid }</span>\n\n /-- Submonoids inherit the 1 of the monoid. -/\n @[simp, to_additive &quot;An `add_submonoid` inherits the 0 of the `add_monoid`. &quot;]\n</pre></div>",
        "id": 188081406,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581574702
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/113488-general/topic/subtype.2E*.20diamonds\" title=\"#narrow/stream/113488-general/topic/subtype.2E*.20diamonds\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/subtype.2E*.20diamonds</a></p>",
        "id": 188081625,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581575048
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/issues/1981\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1981\">#1981</a></p>",
        "id": 188085838,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581581471
    }
]