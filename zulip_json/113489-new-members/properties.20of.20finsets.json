[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)]:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">finite</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">p_finitely_additive</span> <span class=\"o\">:</span>\n <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">finite</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">finite</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span><span class=\"o\">))],</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n<span class=\"c1\">-- expected type:</span>\n<span class=\"c1\">-- a: set ℕ</span>\n<span class=\"c1\">-- b: set ℕ</span>\n<span class=\"c1\">-- _inst_1: decidable a.finite</span>\n<span class=\"c1\">-- _inst_2: decidable b.finite</span>\n<span class=\"c1\">-- _inst_3: decidable (a ∪ b).finite</span>\n<span class=\"c1\">-- ⊢ ℕ</span>\n<span class=\"c1\">-- Messages (3)</span>\n<span class=\"c1\">-- my2.lean:527:97</span>\n<span class=\"c1\">-- failed to synthesize type class instance for</span>\n<span class=\"c1\">-- a b : set ℕ,</span>\n<span class=\"c1\">-- _inst_1 : decidable a.finite,</span>\n<span class=\"c1\">-- _inst_2 : decidable b.finite,</span>\n<span class=\"c1\">-- _inst_3 : decidable (a ∪ b).finite</span>\n<span class=\"c1\">-- ⊢ decidable (a ∪ b).finite</span>\n<span class=\"c1\">-- my2.lean:527:109</span>\n<span class=\"c1\">-- failed to synthesize type class instance for</span>\n<span class=\"c1\">-- a b : set ℕ,</span>\n<span class=\"c1\">-- _inst_1 : decidable a.finite,</span>\n<span class=\"c1\">-- _inst_2 : decidable b.finite,</span>\n<span class=\"c1\">-- _inst_3 : decidable (a ∪ b).finite</span>\n<span class=\"c1\">-- ⊢ decidable a.finite</span>\n<span class=\"c1\">-- my2.lean:527:115</span>\n<span class=\"c1\">-- failed to synthesize type class instance for</span>\n<span class=\"c1\">-- a b : set ℕ,</span>\n<span class=\"c1\">-- _inst_1 : decidable a.finite,</span>\n<span class=\"c1\">-- _inst_2 : decidable b.finite,</span>\n<span class=\"c1\">-- _inst_3 : decidable (a ∪ b).finite</span>\n<span class=\"c1\">-- ⊢ decidable b.finite</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207366404,
        "sender_full_name": "Iocta",
        "timestamp": 1597807028
    },
    {
        "content": "<p>How to deal with this?</p>",
        "id": 207366409,
        "sender_full_name": "Iocta",
        "timestamp": 1597807058
    },
    {
        "content": "<p>what's up with those decidability assumptions?</p>",
        "id": 207366449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597807093
    },
    {
        "content": "<p>Just add <code>open_locale classical</code> to the top of the file</p>",
        "id": 207366454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597807108
    },
    {
        "content": "<p>it's not like that sort of property is actually computable in practice</p>",
        "id": 207366457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597807125
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">def</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">finite</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">p_finitely_additive</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"err\">∅</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207366558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597807315
    },
    {
        "content": "<p>I don't have the intuition of when I need <code>[decidable _]</code> or <code>noncomputable</code></p>",
        "id": 207367248,
        "sender_full_name": "Iocta",
        "timestamp": 1597808397
    },
    {
        "content": "<p>use <code>noncomputable theory</code> and then you don't have to worry about the <code>noncomputable</code> marker</p>",
        "id": 207367442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597808730
    },
    {
        "content": "<p>If you're doing constructive mathematics, or something explicitly algorithmic, use <code>decidable</code>. Otherwise throw in <code>open_locale classical</code> at the first sign of trouble. After that, only add <code>noncomputable</code> if you see an error message telling you to. If you find yourself writing <code>noncomputable</code> more than once or twice in a file, add <code>noncomputable theory</code> at the top of the file.</p>",
        "id": 207367447,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597808756
    },
    {
        "content": "<p>I thought this was part of <code>open_locale classical</code></p>",
        "id": 207367493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597808780
    },
    {
        "content": "<p>Oh! Maybe it is, sorry.</p>",
        "id": 207367497,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597808796
    },
    {
        "content": "<p>it's not, at least if my test above is any indication</p>",
        "id": 207367507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597808817
    },
    {
        "content": "<p>here's a way to abuse the <code>localized</code> command to make it work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">localized</span> <span class=\"s2\">&quot;attribute [instance, priority 9] classical.prop_decidable</span>\n<span class=\"s2\">  noncomputable theory&quot;</span> <span class=\"k\">in</span> <span class=\"n\">classical</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">def</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">finite</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 207367597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597808975
    },
    {
        "content": "<p>ok</p>",
        "id": 207367961,
        "sender_full_name": "Iocta",
        "timestamp": 1597809550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> the format is <code>(s : set ℕ)</code>, i.e. spaces around the colon and no spaces near the brackets</p>",
        "id": 207375023,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597819482
    },
    {
        "content": "<p>and what is it with the double negation in your statement?</p>",
        "id": 207375050,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597819526
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">parity</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">def</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_p_union_eq_p_add_p</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"n\">unfold</span> <span class=\"n\">p</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span> <span class=\"c1\">-- ¬{n : ℕ | n % 2 = 1}.finite</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span> <span class=\"c1\">-- ¬{n : ℕ | n % 2 = 0}.finite</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>  <span class=\"c1\">-- ¬({n : ℕ | n % 2 = 0} ∪ {n : ℕ | n % 2 = 1}).finite</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207375242,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597819769
    },
    {
        "content": "<p>How do I get a <code>finset</code> from <code>finite s</code>?</p>",
        "id": 207457054,
        "sender_full_name": "Iocta",
        "timestamp": 1597868406
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite.exists_finset\">docs#set.finite.exists_finset</a></p>",
        "id": 207457322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597868547
    },
    {
        "content": "<p>How do I make <code>evens_not_finite</code> visible inside <code>cases h</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">indicator_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal_ordinal</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>  <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- XXX Should also require (distinct: a ≠  b).</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">evens</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">odds</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">},</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">evens</span> <span class=\"n\">odds</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">evens</span> <span class=\"bp\">≠</span> <span class=\"n\">odds</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">zero_even</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"err\">∈</span> <span class=\"n\">evens</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">zero_not_odd</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"err\">∉</span> <span class=\"n\">odds</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">p</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">odds_not_finite</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">odds</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">exists_finset_odds</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">fset</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">fset</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">odds</span> <span class=\"o\">),</span>\n    <span class=\"o\">{</span>        <span class=\"n\">exact</span> <span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">exists_finset</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>    <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">exists_finset_odds</span> <span class=\"k\">with</span> <span class=\"n\">finset_odds</span> <span class=\"n\">hfinset_odds</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">finset_odds_bdd_above</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">finset_odds</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">exists_le</span> <span class=\"n\">finset_odds</span><span class=\"o\">,},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">finset_odds_bdd_above</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hodd_max</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"err\">∈</span> <span class=\"n\">finset_odds</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">finset_odds</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hodd_max</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">specialize</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">hodd_max</span><span class=\"o\">,</span>\n        <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">specialize</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hodd_max</span><span class=\"o\">,</span>\n        <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">evens_not_finite</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">evens</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"c1\">-- exact odds_not_finite, -- unknown identifier</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"c1\">-- exact evens_not_finite, -- unknown identifier</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">show</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">evens</span> <span class=\"err\">∪</span> <span class=\"n\">odds</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Union of infinite sets is infinite, combining previous two results.</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207459550,
        "sender_full_name": "Iocta",
        "timestamp": 1597869887
    },
    {
        "content": "<p>your formatting does not make it clear that the <code>rw [if_neg, if_neg, if_neg] at h</code> line produces 4 subgoals</p>",
        "id": 207460619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597870559
    },
    {
        "content": "<p>here it is again with better braces:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>  <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- XXX Should also require (distinct: a ≠  b).</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">evens</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">odds</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">},</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">evens</span> <span class=\"n\">odds</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">evens</span> <span class=\"bp\">≠</span> <span class=\"n\">odds</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">zero_even</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"err\">∈</span> <span class=\"n\">evens</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">zero_not_odd</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"err\">∉</span> <span class=\"n\">odds</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">p</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">odds_not_finite</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">odds</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">exists_finset_odds</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">fset</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">fset</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">odds</span> <span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">exists_finset</span> <span class=\"n\">h&#39;</span> <span class=\"o\">},</span>\n      <span class=\"n\">cases</span> <span class=\"n\">exists_finset_odds</span> <span class=\"k\">with</span> <span class=\"n\">finset_odds</span> <span class=\"n\">hfinset_odds</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">finset_odds_bdd_above</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">finset_odds</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">exists_le</span> <span class=\"n\">finset_odds</span><span class=\"o\">,},</span>\n      <span class=\"n\">cases</span> <span class=\"n\">finset_odds_bdd_above</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hodd_max</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"err\">∈</span> <span class=\"n\">finset_odds</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">finset_odds</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hodd_max</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">hodd_max</span><span class=\"o\">,</span>\n        <span class=\"n\">finish</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hodd_max</span><span class=\"o\">,</span>\n        <span class=\"n\">finish</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">evens_not_finite</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">evens</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- exact odds_not_finite, -- unknown identifier</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- exact evens_not_finite, -- unknown identifier</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">evens</span> <span class=\"err\">∪</span> <span class=\"n\">odds</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Union of infinite sets is infinite, combining previous two results.</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207460880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597870694
    },
    {
        "content": "<p>the problem should now be clear: you did all the <code>have</code>s inside a pointless branch that was proving <code>h : 1 = 1 + 1 |- false</code>, before finishing it with <code>cases h</code></p>",
        "id": 207460985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597870764
    },
    {
        "content": "<p>Oh, oops</p>",
        "id": 207461204,
        "sender_full_name": "Iocta",
        "timestamp": 1597870866
    },
    {
        "content": "<p>and here it is with the subgoals appropriately distributed:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>  <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- XXX Should also require (distinct: a ≠  b).</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">evens</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">odds</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">},</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">evens</span> <span class=\"n\">odds</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">evens</span> <span class=\"bp\">≠</span> <span class=\"n\">odds</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">zero_even</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"err\">∈</span> <span class=\"n\">evens</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">zero_not_odd</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"err\">∉</span> <span class=\"n\">odds</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">p</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"bp\">¬</span> <span class=\"n\">odds</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">exists_finset_odds</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">fset</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">fset</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">odds</span> <span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">exists_finset</span> <span class=\"n\">h&#39;</span> <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">exists_finset_odds</span> <span class=\"k\">with</span> <span class=\"n\">finset_odds</span> <span class=\"n\">hfinset_odds</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">finset_odds_bdd_above</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">finset_odds</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">exists_le</span> <span class=\"n\">finset_odds</span><span class=\"o\">,},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">finset_odds_bdd_above</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hodd_max</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"err\">∈</span> <span class=\"n\">finset_odds</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">finset_odds</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hodd_max</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">hodd_max</span><span class=\"o\">,</span>\n      <span class=\"n\">finish</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hodd_max</span><span class=\"o\">,</span>\n      <span class=\"n\">finish</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"bp\">¬</span> <span class=\"n\">evens</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">evens</span> <span class=\"err\">∪</span> <span class=\"n\">odds</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Union of infinite sets is infinite, combining previous two results.</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207461230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597870881
    }
]