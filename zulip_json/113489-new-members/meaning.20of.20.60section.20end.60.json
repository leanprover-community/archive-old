[
    {
        "content": "<p>I'm confused by the keyword <code>section end</code> in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebraic_geometry/pullbacks.lean#L113\">https://github.com/leanprover-community/mathlib/blob/master/src/algebraic_geometry/pullbacks.lean#L113</a>. I would have thought this meant a new section is being created called <code>end</code> but there's no equivalent <code>end end</code>. What does this line of code do?</p>",
        "id": 289760228,
        "sender_full_name": "David Chanin",
        "timestamp": 1657907318
    },
    {
        "content": "<p>I think it's an unnamed <code>section</code> that immediately <code>end</code>s; seems to serve no purpose.</p>\n<p>The <code>section end</code> line was already there when the file was added in <a href=\"https://github.com/leanprover-community/mathlib/pull/11450\">#11450</a>.</p>",
        "id": 289760520,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657907486
    },
    {
        "content": "<p>interesting, I'll just ignore it then!</p>",
        "id": 289761001,
        "sender_full_name": "David Chanin",
        "timestamp": 1657907717
    },
    {
        "content": "<p>If you open a section and never close it, that's allowed? Does it auto-close at the end of the file? e.g. <a href=\"https://github.com/leanprover-community/mathlib/blob/96d3f9505666502b67d73ebd0dd0cc360c3418a7/analysis/topology/topological_groups.lean#L52\">https://github.com/leanprover-community/mathlib/blob/96d3f9505666502b67d73ebd0dd0cc360c3418a7/analysis/topology/topological_groups.lean#L52</a> this section is never ended</p>",
        "id": 289764559,
        "sender_full_name": "David Chanin",
        "timestamp": 1657909370
    },
    {
        "content": "<p>Sections need to be closed. That file (from 2018) starts with <code>#exit</code> so none of the rest is processed.</p>",
        "id": 289768817,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657911548
    },
    {
        "content": "<p>So <code>#exit</code> means to not parse the rest of the file?</p>",
        "id": 289769150,
        "sender_full_name": "David Chanin",
        "timestamp": 1657911704
    },
    {
        "content": "<p>Yes, the <code>#exit</code> command causes Lean to stop processing the file immediately.</p>",
        "id": 289769352,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657911809
    },
    {
        "content": "<p>I'm also confused by this namespace <code>nat.partrec'</code> in <a href=\"https://github.com/leanprover-community/mathlib/blob/bdd54acda358f535b42951b784757135213dcf52/data/computability/halting.lean#L194\">https://github.com/leanprover-community/mathlib/blob/bdd54acda358f535b42951b784757135213dcf52/data/computability/halting.lean#L194</a>. It's never closed, but another namespace named <code>nat.primrec'</code> does get closed even though it's never opened. Are these the same namespace somehow?</p>",
        "id": 289769394,
        "sender_full_name": "David Chanin",
        "timestamp": 1657911832
    },
    {
        "content": "<p>It might be a Lean bug that it's not checking the names match beyond the first dot. (By the way, why are you looking at mathlib from 2018?)</p>",
        "id": 289769747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657911970
    },
    {
        "content": "<p>When you close a namespace or section with <code>end</code>, Lean already knows what it's closing, and it's only using the text you supply as a check.</p>",
        "id": 289769857,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657912024
    },
    {
        "content": "<p>I'm working on getting better namespace parsing working for <a href=\"https://mathlib-changelog.vercel.app/\">https://mathlib-changelog.vercel.app/</a>, which requires manually keeping track of which namespace/sections are open/closed. But the script I wrote is erroring on some of these examples, so just trying to understand what's going on</p>",
        "id": 289770006,
        "sender_full_name": "David Chanin",
        "timestamp": 1657912096
    },
    {
        "content": "<p>As far as I can tell, that <code>data/computability/halting.lean</code> would always have been an error, at least as far back as the last official Microsoft release of Lean 3.</p>\n<p>On github, there's a red X saying the Travis CI failed for that commit. Indeed, in the next commit it was fixed: <a href=\"https://github.com/leanprover-community/mathlib/commit/b37526407ed1846f29dcdfb976554daf7f8a983e#diff-b5b02b57165dd41df0a1154c6d87b6ac2e174c4e2f7ba7b4ae51d0294e375297R318\">https://github.com/leanprover-community/mathlib/commit/b37526407ed1846f29dcdfb976554daf7f8a983e#diff-b5b02b57165dd41df0a1154c6d87b6ac2e174c4e2f7ba7b4ae51d0294e375297R318</a></p>",
        "id": 289772687,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657913366
    },
    {
        "content": "<p>aah good catch! Yeah seems like it's safe to ignore the error there then</p>",
        "id": 289773114,
        "sender_full_name": "David Chanin",
        "timestamp": 1657913567
    }
]