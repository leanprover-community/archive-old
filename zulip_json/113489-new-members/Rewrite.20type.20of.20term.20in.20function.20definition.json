[
    {
        "content": "<p>Is there a way to rewrite the type of a term in a function definition?</p>\n<p>I'm getting the following error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">foo</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">motive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">motive</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n</code></pre></div>\n<p>But I have a theorem that states</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Foo</span> <span class=\"bp\">=</span> <span class=\"n\">Bar</span>\n</code></pre></div>\n<p>So is there a way to use this theorem to resolve the type mismatch?</p>\n<p>EDIT: Forgot to mention, I'm working with lean 4</p>",
        "id": 273100423,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1645714952
    },
    {
        "content": "<p>If the theorem is called <code>foobar</code> and you have this error when applying something to your goal, just write:<br>\n<code>rw foobar,</code></p>",
        "id": 273101279,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645715319
    },
    {
        "content": "<p>Oh, sorry, you were probably asking about something else, right?</p>",
        "id": 273101659,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645715489
    },
    {
        "content": "<p>Usually, it is better to post your code than to post your error.</p>",
        "id": 273101700,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645715513
    },
    {
        "content": "<p>or ideally, post both</p>",
        "id": 273102127,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645715720
    },
    {
        "content": "<p>Yeah, I'm talking about a function definition, rather than a proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.Nil</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"o\">:=</span> <span class=\"n\">W.mk</span> <span class=\"o\">(</span><span class=\"n\">A.Nil</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">emp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Empty.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">emp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.rec</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">mNil</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">List.Nil</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mCons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">tl</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">tl</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">List.Cons</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span><span class=\"o\">))</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">W.mk</span> <span class=\"o\">(</span><span class=\"n\">A.Nil</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mNil</span>  <span class=\"c1\">-- &lt;-- mNil is of type `motive List.Nil`, but `motive W.mk Flist_A.Nil f)` is expected</span>\n<span class=\"bp\">|</span> <span class=\"n\">W.mk</span> <span class=\"o\">(</span><span class=\"n\">A.Cons</span> <span class=\"n\">hd</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span> <span class=\"c1\">-- not important yet</span>\n</code></pre></div>",
        "id": 273102463,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1645715882
    },
    {
        "content": "<p>So I have a term <code>mNil</code> of type <code>motive List.Nil</code> which I want to return from my function that is declared to return <code>motive W.mk ...</code>, <br>\nwhich seems fine as <code>List.Nil</code> is equal to <code>W.mk ...</code></p>",
        "id": 273102908,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1645716065
    },
    {
        "content": "<p>I could of course change the type of mNil, but the goal is to hide the internal machinery, so that it seems like <code>List.Nil</code> and <code>List.Cons</code> are actual constructors, rather than wrappers around <code>W ...</code></p>",
        "id": 273103266,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1645716226
    },
    {
        "content": "<p>With <code>List.rec</code> the normal high-level recursor that one would expect an inductive type to have</p>",
        "id": 273103382,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1645716260
    },
    {
        "content": "<p>Here is a more minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Empty</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n  <span class=\"o\">:=</span> <span class=\"n\">Foo.X</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">emp</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">):</span>\n  <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">bar</span>\n    <span class=\"n\">cases</span> <span class=\"n\">foo</span>\n    <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n    <span class=\"n\">funext</span> <span class=\"n\">x</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mBar</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">foo</span>\n  <span class=\"o\">:=</span> <span class=\"n\">mBar</span> <span class=\"c1\">-- ERROR</span>\n</code></pre></div>\n<p>Where the error is again</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">mBar</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">motive</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">motive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 273106066,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1645717386
    },
    {
        "content": "<p>You can use <code>Eq.rec</code> or something, but you're heading down a dark path</p>",
        "id": 273107627,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645718001
    },
    {
        "content": "<p>Thanks for the pointer, I'll see what I can work out</p>",
        "id": 273110167,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1645719008
    }
]