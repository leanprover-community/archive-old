[
    {
        "content": "<p>What is the difference between <code>abbreviation</code> and <code>def</code>?  Is <code>abbreviation</code> more like macro expansion with less type checking/type inference?</p>\n<p>Is there a canonical example requiring use of <code>abbreviation</code> where <code>def</code> won't work?</p>\n<p>I looked for <code>abbreviation</code> in TPIL and Logic&amp;Proof and the Reference Manual and couldn't find it.</p>",
        "id": 219490745,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607615390
    },
    {
        "content": "<p><code>abbreviation</code> is <code>@[inline, reducible] def</code></p>",
        "id": 219492261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607615992
    },
    {
        "content": "<p>I think<code>alias</code> is stronger than <code>abbreviation</code></p>",
        "id": 219492272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607616001
    },
    {
        "content": "<p><code>alias</code> is just a regular def/theorem</p>",
        "id": 219493037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607616267
    },
    {
        "content": "<p>I wouldn't recommend using it for defs actually</p>",
        "id": 219493113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607616299
    },
    {
        "content": "<p>I don't think there are any reasons to use <code>abbreviation</code></p>",
        "id": 219493225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607616346
    },
    {
        "content": "<p><code>alias</code> shows up specially in doc-gen, somehow</p>",
        "id": 219494826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607616888
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 219499208,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607618617
    },
    {
        "content": "<p>The <code>@[inline, reducible]</code> has a pragmatic effect.  I had a situation where <code>abbreviation</code> worked for something and <code>def</code> did not.</p>",
        "id": 219507554,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607622075
    },
    {
        "content": "<p>For example this works with <code>abbreviation</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.lebesgue_measure</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.intervals.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measure_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">measure_space</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">volume</span> <span class=\"o\">:=</span> <span class=\"n\">measure.comap</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">volume</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subtype.volume_apply</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">volume</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">volume</span> <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">measure.comap_apply</span> <span class=\"n\">_</span> <span class=\"n\">subtype.coe_injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">is_measurable.subtype_image</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">hs</span>\n\n<span class=\"n\">abbreviation</span> <span class=\"n\">I01</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">probability_measure</span> <span class=\"o\">(</span><span class=\"n\">volume</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">I01</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">measure_univ</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">subtype.volume_apply</span> <span class=\"n\">is_measurable_Icc</span> <span class=\"n\">is_measurable.univ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">volume</span> <span class=\"n\">I01</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">simpa</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.volume_Icc</span><span class=\"o\">],</span> <span class=\"n\">simp</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and if I change the <code>abbreviation</code> to a <code>def</code>, I get this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">bar.lean</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"o\">:</span><span class=\"mi\">4</span>\n<span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">⇑</span><span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">⇑</span><span class=\"n\">volume</span> <span class=\"n\">I01</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>I'm guessing that's the <code>inline</code> or macro effect and in this case it is required to get the proof to go through.</p>",
        "id": 219508936,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607622736
    },
    {
        "content": "<p>it's <code>reducible</code></p>",
        "id": 219509045,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607622800
    },
    {
        "content": "<p><code>I01</code> is still not a macro, it's just that more things are willing to unfold it automatically.</p>",
        "id": 219509092,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607622829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20is.20the.20difference.20between.20abbreviation.20and.20def/near/219494826\">said</a>:</p>\n<blockquote>\n<p><code>alias</code> shows up specially in doc-gen, somehow</p>\n</blockquote>\n<p><code>alias</code> is primarily intended for documentation purposes, or to make a theorem available under two names to make it easier to find (e.g. <code>left_distrib</code> vs <code>mul_add</code>)</p>",
        "id": 219510831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607623549
    },
    {
        "content": "<p>Is <code>alias</code>builtin syntax, or is it a mathlib command?</p>",
        "id": 219511094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607623672
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/alias.html\">https://leanprover-community.github.io/mathlib_docs/tactic/alias.html</a></p>",
        "id": 219511204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607623728
    },
    {
        "content": "<p>What I thought was \"special doc-gen treatment\" was actually just this generated docstring:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/702b1e8c778d6b18444cc57858c636c8ae2ad700/src/tactic/alias.lean#L134\">https://github.com/leanprover-community/mathlib/blob/702b1e8c778d6b18444cc57858c636c8ae2ad700/src/tactic/alias.lean#L134</a></p>",
        "id": 219511780,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607623985
    }
]