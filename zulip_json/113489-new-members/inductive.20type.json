[
    {
        "content": "<p>Hi! <br>\nI am doing some stuff with mathematical logic in Lean and i would like to ask you the following. <br>\nI have defined logic formulas as an inductive type with implication and negation (logic atoms are represented by natural numbers) the following way. </p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kn\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n  <span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n</code></pre></div>\n\n\n<p>I would like to somehow express the fact, that some formula B is a sub-formula of some other formula A.  That means, that either A = B or that somewhere during the process of creating formula A with the inductive rules, the formula B  is used (either in implication or negation (or even as a logical atom) ). Is there some way to express that? Cheers, Jachym</p>",
        "id": 195689594,
        "sender_full_name": "jachym simon",
        "timestamp": 1588156834
    },
    {
        "content": "<p>This could be an inductively defined Prop</p>",
        "id": 195689656,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588156875
    },
    {
        "content": "<p>How does lean know to prevent lists of heterogeneous types?<br>\ne.g. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mylist</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"mi\">2</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"n\">mylist</span><span class=\"o\">)</span> <span class=\"c1\">-- error</span>\n</code></pre></div>\n\n\n<p>The <code>cons</code>  constructor takes a type <code>α</code> and a <code>list</code> but there is no type specified. I guess I'm not sure why we don't do<br>\n<code>| cons : α → list α → list α</code>  (which doesn't work)</p>",
        "id": 195863932,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588263614
    },
    {
        "content": "<p>The type is a parameter, the <code>(α : Type u)</code> on the first line</p>",
        "id": 195864053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588263677
    },
    {
        "content": "<p>you are required not to write parameters in the definition of the inductive, they get added in the real type of the constructor</p>",
        "id": 195864109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588263702
    },
    {
        "content": "<p>Ah I see, yeah</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"c1\">-- list.cons : ?M_1 → list ?M_1 → list ?M_1</span>\n</code></pre></div>",
        "id": 195864256,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588263773
    },
    {
        "content": "<p><code>#check @list.cons</code> is a variant which gets rid of all the random ?'s</p>",
        "id": 195874214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588267990
    },
    {
        "content": "<p>Hello, <br>\nI have another question connected to the previous one. I want to create a proposition <code>equiv</code>, that for formulas A B says, that all subformulas are equivalent. Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n\n<span class=\"c1\">--A = P ⇒ (R ⇒ Q)</span>\n<span class=\"c1\">--B = P ⇒ (S ⇒ Q)</span>\n<span class=\"c1\">--equiv A B  would be something like (⊢ P ⇔ P) ∧ (⊢ R ⇔ S) ∧ (⊢ Q ⇔ Q)</span>\n<span class=\"c1\">--(&quot;⊢ A&quot; means A is provable, exact definition isnt for my question important (i think... shouldnt be))</span>\n\n<span class=\"kn\">example</span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"err\">⊢</span> <span class=\"n\">P</span> <span class=\"err\">⇔</span> <span class=\"n\">P</span><span class=\"o\">)(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"err\">⊢</span> <span class=\"n\">R</span> <span class=\"err\">⇔</span> <span class=\"n\">S</span> <span class=\"o\">)(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"err\">⊢</span> <span class=\"n\">Q</span> <span class=\"err\">⇔</span> <span class=\"n\">Q</span><span class=\"o\">):</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"err\">⇒</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"err\">⇒</span> <span class=\"n\">Q</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"err\">⇒</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"err\">⇒</span> <span class=\"n\">Q</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I tried creating a proposition using the Form.rec_on function like this, but it doesnt work. In the first \"loop\" subparts are determined as <code>P₁ = P</code>,  <code>P₂= (R ⇒ Q)</code>. I can show that <code>⊢ P ⇔ P</code>, so what remains is <code>⊢ (R ⇒ Q) ⇔ (S ⇒ Q)</code>. That i cannot show, so it needs to be decomposed further. Now id like the subparts to be <code>P₁ = R</code> and <code>P₂ = Q</code>, but they dont change (which kind of makes sense). Is there some way how to do it? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">equiv</span><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">:</span><span class=\"n\">Form</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">Form</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">P</span>\n\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">Form</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"err\">⇔</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">Q₁</span> <span class=\"n\">Q₂</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span><span class=\"o\">,</span> <span class=\"err\">⊢</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"err\">⇔</span> <span class=\"o\">(</span><span class=\"n\">Q₁</span> <span class=\"err\">⇒</span> <span class=\"n\">Q₂</span><span class=\"o\">)))</span>\n                    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">Q₁</span> <span class=\"n\">q₁</span><span class=\"o\">,</span> <span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"err\">⇔</span> <span class=\"bp\">~</span><span class=\"n\">Q₁</span><span class=\"o\">)))</span>\n\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">P₁</span> <span class=\"n\">P₂</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span><span class=\"o\">,</span>\n<span class=\"n\">Form</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"err\">⊢</span> <span class=\"o\">((</span><span class=\"n\">P₁</span> <span class=\"err\">⇒</span> <span class=\"n\">P₂</span><span class=\"o\">)</span> <span class=\"err\">⇔</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">Q₁</span> <span class=\"n\">Q₂</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">P₁</span> <span class=\"err\">⇔</span> <span class=\"n\">Q₁</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p₂</span> <span class=\"bp\">∧</span> <span class=\"n\">q₂</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">P₂</span> <span class=\"err\">⇔</span> <span class=\"n\">Q₂</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">∧</span> <span class=\"n\">q₁</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">Q₁</span> <span class=\"n\">q₁</span><span class=\"o\">,</span> <span class=\"err\">⊢</span> <span class=\"o\">((</span><span class=\"n\">P₁</span> <span class=\"err\">⇒</span> <span class=\"n\">P₂</span><span class=\"o\">)</span> <span class=\"err\">⇔</span> <span class=\"bp\">~</span><span class=\"n\">Q₁</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">P₁</span> <span class=\"n\">p₁</span><span class=\"o\">,</span>\n<span class=\"n\">Form</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"err\">⊢</span> <span class=\"o\">((</span><span class=\"bp\">~</span><span class=\"n\">P₁</span><span class=\"o\">)</span> <span class=\"err\">⇔</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">Q₁</span> <span class=\"n\">Q₂</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span><span class=\"o\">,</span> <span class=\"err\">⊢</span> <span class=\"o\">((</span><span class=\"bp\">~</span><span class=\"n\">P₁</span><span class=\"o\">)</span> <span class=\"err\">⇔</span> <span class=\"o\">(</span><span class=\"n\">Q₁</span> <span class=\"err\">⇒</span> <span class=\"n\">Q₂</span><span class=\"o\">))</span> <span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">Q₁</span> <span class=\"n\">q₁</span><span class=\"o\">,</span> <span class=\"err\">⊢</span> <span class=\"o\">((</span><span class=\"bp\">~</span><span class=\"n\">P₁</span><span class=\"o\">)</span> <span class=\"err\">⇔</span> <span class=\"o\">(</span><span class=\"bp\">~</span><span class=\"n\">Q₁</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">∧</span> <span class=\"n\">q₁</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 198443388,
        "sender_full_name": "jachym simon",
        "timestamp": 1590155634
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a>? (emphasis on working)</p>\n<p>Why are there <code>⊢</code>s all over the place, is this some custom <code>notation</code>?</p>",
        "id": 198445917,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1590156787
    },
    {
        "content": "<p>I think he defined <code>notation </code>⊢<code> p := provable p</code> and I assume <code>provable</code> is defined to be some <code>Prop</code>?</p>",
        "id": 198446891,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590157269
    },
    {
        "content": "<p>I don't understand what <code>equiv</code> is supposed to do. The definition doesn't look that similar to your description.<br>\nIn any case, I think it would be clearer written using the equation compiler.</p>",
        "id": 198446969,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590157319
    },
    {
        "content": "<p>Thanks for the answers. <code>⊢</code> is exactly what Jason writes- a custom notation for a <code>Prop</code> i have defined in my code.</p>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  I didnt exactly know what i am doing with the code hehe. Anyway the thing i wanted was the thing i described and the equation compiler stuff you suggested helped. Thanks</p>",
        "id": 198898749,
        "sender_full_name": "jachym simon",
        "timestamp": 1590589655
    }
]