[
    {
        "content": "<p>Is there something akin to Coq's <a href=\"https://coq.inria.fr/refman/addendum/program.html\" target=\"_blank\" title=\"https://coq.inria.fr/refman/addendum/program.html\">Program</a> tactic in Lean? I thought that the equation compiler is basically that, but it seems to fail in the case when it should generate an equality at the type level. In my example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- type-level list</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">InList</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">InList</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">n</span> <span class=\"n\">n&#39;</span><span class=\"o\">},</span> <span class=\"n\">InList</span> <span class=\"n\">L</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">InList</span> <span class=\"o\">(</span><span class=\"n\">n&#39;</span><span class=\"bp\">::</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- type of functions that map the list L to natural numbers</span>\n<span class=\"n\">def</span> <span class=\"n\">ListMap</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">InList</span> <span class=\"n\">L</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"n\">def</span> <span class=\"n\">id_map</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}:</span> <span class=\"n\">ListMap</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">InList</span> <span class=\"n\">L</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- extends m with n</span>\n<span class=\"n\">def</span> <span class=\"n\">extend_map</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ListMap</span> <span class=\"n\">L</span><span class=\"o\">):</span> <span class=\"n\">ListMap</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n&#39;</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">InList</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">n&#39;</span><span class=\"o\">),</span>\n  <span class=\"k\">match</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">InList</span><span class=\"bp\">.</span><span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- i would like to synthesize n = n&#39; here</span>\n  <span class=\"bp\">|</span> <span class=\"n\">InList</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>the <code>match</code> fails with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">_</span><span class=\"n\">match</span> <span class=\"n\">InList</span><span class=\"bp\">.</span><span class=\"n\">Z</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">InList</span><span class=\"bp\">.</span><span class=\"n\">Z</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">InList</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">::</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">InList</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">n&#39;</span>\n</pre></div>",
        "id": 151888312,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1544980722
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- type-level list</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">InList</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">InList</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">n</span> <span class=\"n\">n&#39;</span><span class=\"o\">},</span> <span class=\"n\">InList</span> <span class=\"n\">L</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">InList</span> <span class=\"o\">(</span><span class=\"n\">n&#39;</span><span class=\"bp\">::</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- type of functions that map the list L to natural numbers</span>\n<span class=\"n\">def</span> <span class=\"n\">ListMap</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">InList</span> <span class=\"n\">L</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"n\">def</span> <span class=\"n\">id_map</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}:</span> <span class=\"n\">ListMap</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">InList</span> <span class=\"n\">L</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- extends m with n</span>\n<span class=\"n\">def</span> <span class=\"n\">extend_map</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ListMap</span> <span class=\"n\">L</span><span class=\"o\">):</span> <span class=\"n\">ListMap</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n&#39;</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">InList</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">n&#39;</span><span class=\"o\">),</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n&#39;</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n&#39;</span><span class=\"o\">,</span> <span class=\"n\">InList</span><span class=\"bp\">.</span><span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n&#39;</span><span class=\"o\">,</span> <span class=\"n\">InList</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 151888604,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544981248
    },
    {
        "content": "<p>Thank you, I was hoping it could be done automatically, but this is fairly concise :)</p>",
        "id": 151889015,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1544981847
    },
    {
        "content": "<p>no, it is done automatically, <code>have n = n' := rfl</code> is just demonstrating it</p>",
        "id": 151889146,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544982017
    },
    {
        "content": "<p>if you put an underscore to replace <code>sorry</code> you will see the lemma being <code>n = n</code></p>",
        "id": 151889151,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544982031
    },
    {
        "content": "<p>Oh indeed, so it seems the compiler will only equate variables which are being matched rather than everything that <code>v</code> in <code>match v with</code> depends on.</p>",
        "id": 151889297,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1544982253
    },
    {
        "content": "<p>right</p>",
        "id": 151889365,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544982392
    },
    {
        "content": "<p>Hm no that's not right, it generalizes the matched variable and the state I get in</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n&#39;</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">InList</span><span class=\"bp\">.</span><span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n     <span class=\"c1\">-- state here</span>\n  <span class=\"kn\">end</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">InList</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ListMap</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">n&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">InList</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">n&#39;</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">match</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">a</span> <span class=\"bp\">_</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">InList</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">ℕ</span>\n</pre></div>\n\n\n<p>where <code>n</code> and <code>n'</code> are not equal</p>",
        "id": 151895563,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1544992325
    },
    {
        "content": "<p>In this state <code>n</code> and <code>n</code> have both effectively been replaced with <code>_x</code>, it just hasn't cleared the old <code>n</code> and <code>n'</code></p>",
        "id": 151895778,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1544992663
    },
    {
        "content": "<p>The example posted here is a bit simplified to make sense without context, but basically I need the <code>n</code> and <code>n'</code> to be equal in the type of <code>v</code>, since my obligation for the return value is that they match, and for that I need the \"old\" values to be <code>_x</code> so that they can be substituted within <code>v</code>.</p>",
        "id": 151896024,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1544992954
    },
    {
        "content": "<p>Can you not use <code>InList.Z</code> instead of <code>v</code>. <code>v</code> isn't a variable any more, since you're dealing with the case <code>v = InList.Z</code></p>",
        "id": 151896140,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1544993111
    },
    {
        "content": "<p>Sorry, I oversimplified again. The return type is dependent on <code>n</code> and needs to be a value given as an argument to <code>extend_map</code>. A fuller example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- type-level list</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">InList</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">InList</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">n</span> <span class=\"n\">n&#39;</span><span class=\"o\">},</span> <span class=\"n\">InList</span> <span class=\"n\">L</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">InList</span> <span class=\"o\">(</span><span class=\"n\">n&#39;</span><span class=\"bp\">::</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Foo</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\">-- type of functions that map the list L to dependent `Foo`s in the list</span>\n<span class=\"n\">def</span> <span class=\"n\">ListMap</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">InList</span> <span class=\"n\">L</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">id_map</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}:</span> <span class=\"n\">ListMap</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">InList</span> <span class=\"n\">L</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">A</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- extends m with e</span>\n<span class=\"n\">def</span> <span class=\"n\">extend_map</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ListMap</span> <span class=\"n\">L</span><span class=\"o\">):</span> <span class=\"n\">ListMap</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n&#39;</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">InList</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">n&#39;</span><span class=\"o\">),</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n&#39;</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">InList</span><span class=\"bp\">.</span><span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"c1\">-- needs to be e and have type `Foo n`, but Lean generalizes to type `Foo _x`</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">InList</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 151896583,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1544993660
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">extend_map</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ListMap</span> <span class=\"n\">L</span><span class=\"o\">):</span> <span class=\"n\">ListMap</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n&#39;</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">InList</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">n&#39;</span><span class=\"o\">),</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n&#39;</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">InList</span><span class=\"bp\">.</span><span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"c1\">-- needs to be e and have type `Foo n`, but Lean generalizes to type `Foo _x`</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">InList</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 151896987,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1544994224
    },
    {
        "content": "<p>Hm that seems to work 🧙, thanks!</p>",
        "id": 151897653,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1544995286
    }
]