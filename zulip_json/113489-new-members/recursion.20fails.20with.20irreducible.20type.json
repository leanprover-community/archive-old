[
    {
        "content": "<p>Can this MWE be made to work without removing <code>irreducible</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nat&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">nat&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_lt</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">nat&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_sub</span> <span class=\"n\">nat&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_sub</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">nat&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_one</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">nat&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_well_founded</span> <span class=\"n\">nat&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">),</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">nat&#39;</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">nat&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">nat&#39;</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">then</span> <span class=\"mi\">0</span>\n<span class=\"k\">else</span> <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Lean fails \"to prove the recursive application is decreasing\" with a hypothesis that is identical to the goal, even with <code>pp.all</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 184828695,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1578189447
    },
    {
        "content": "<p>The problem has nothing to do with the irreducible marking, it's simply that the default dec tac doesn't check the context first as it should. You can fix this by specifying the dec tac to be <code>assumption</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nat&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">nat&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_lt</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">nat&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_sub</span> <span class=\"n\">nat&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_sub</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">nat&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_one</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">nat&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_well_founded</span> <span class=\"n\">nat&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">),</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">nat&#39;</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">nat&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">nat&#39;</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">then</span> <span class=\"mi\">0</span>\n<span class=\"k\">else</span> <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]}</span>\n</pre></div>",
        "id": 184829444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578190981
    },
    {
        "content": "<p>Presumably this is already on the list of things to fix in whatever comes after 3.5.0c.</p>",
        "id": 184829499,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578191055
    },
    {
        "content": "<p>Thanks! I hadn't tried that because Lean says that \"The default decreasing tactic uses the 'assumption' tactic\"</p>",
        "id": 184829512,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1578191142
    },
    {
        "content": "<p>I found mathlib's <code>default_dec_tac'</code>, copied it and added <code>&lt;|&gt; </code>[tidy]`. I'm not sure if it's a good idea, but it seems to work for more complex examples.</p>",
        "id": 184831975,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1578196255
    },
    {
        "content": "<p>Had the exact same issue a few days ago, indeed the comment that \"The default decreasing tactic uses the 'assumption' tactic\" is at least misleading. Having to repeat the whole <code>using_well_founded</code> line at every definition feels like a sub-optimal solution ...</p>\n<p>Happy to know that a fix is on the way :-)</p>",
        "id": 184920410,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1578327405
    }
]