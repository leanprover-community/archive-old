[
    {
        "content": "<p>I'm looking at <br>\n<a href=\"https://cs.brown.edu/courses/cs1951x/docs/computability/NFA.html#NFA.step_set\">https://cs.brown.edu/courses/cs1951x/docs/computability/NFA.html#NFA.step_set</a><br>\nIn</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">M.step_set</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">Ss</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">Ss</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">),</span> <span class=\"n\">M.step</span> <span class=\"n\">S</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I understand all the symbols except <code>&gt;&gt;=</code>. What is it for?</p>",
        "id": 289057014,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1657393010
    },
    {
        "content": "<p>That's the <code>bind</code> operator for monads, right?</p>",
        "id": 289057043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657393056
    },
    {
        "content": "<p>Hmm... what's the <code>bind</code> operator for monads and why do we need it to form a union?</p>",
        "id": 289057213,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1657393310
    },
    {
        "content": "<p>I guess I can read about it here <a href=\"https://stackoverflow.com/questions/62308355/why-is-the-bind-operator-defined-as-it-is\">https://stackoverflow.com/questions/62308355/why-is-the-bind-operator-defined-as-it-is</a></p>",
        "id": 289057288,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1657393390
    },
    {
        "content": "<p>Here's the definition of the <code>set</code> monad's bind operator: <a href=\"https://github.com/leanprover-community/mathlib/blob/48104c3a22ae4b35d92b8ad30831eb1591049958/src/data/set/lattice.lean#L1138\">https://github.com/leanprover-community/mathlib/blob/48104c3a22ae4b35d92b8ad30831eb1591049958/src/data/set/lattice.lean#L1138</a></p>",
        "id": 289057409,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657393562
    },
    {
        "content": "<p>It's just bounded union</p>",
        "id": 289057438,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657393573
    },
    {
        "content": "<p>I expect the reason <code>M.step_set</code> is defined that way is that CS people are familiar with bind.</p>",
        "id": 289057450,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657393606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347475\">@Bjørn Kjos-Hanssen</span> It's probably nice to work out <code>bind</code> for some of the basic monads like <code>list</code> and <code>option</code>.</p>",
        "id": 289057661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657393863
    },
    {
        "content": "<p>(At a high level, monads are a way to work with data structures with variables/holes, where you can splice data structures of that type into those variables. The bind operator is, essentially, \"treat all the elements of this data structure as if they were variable names and use this function as a map from variable names -&gt; data to splice in.\" For <code>set</code>, you're splicing in another set for each element of the set, using the union to do the splicing. I got this point of view from stumbling across the correspondence between Lawvere theories and finitary monads.)</p>",
        "id": 289057727,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657393940
    },
    {
        "content": "<p>I always just look at the type and guess what's going on.</p>",
        "id": 289059303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657396068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/has_bind.2Ebind/near/289057450\">said</a>:</p>\n<blockquote>\n<p>I expect the reason <code>M.step_set</code> is defined that way is that CS people are familiar with bind.</p>\n</blockquote>\n<p>It looks like the latest version of <code>step_set</code> just uses the bounded union directly: <a href=\"https://github.com/leanprover-community/mathlib/blob/861589f224456f278c61596c0ee8a1ba449a6e8b/src/computability/NFA.lean#L40\">https://github.com/leanprover-community/mathlib/blob/861589f224456f278c61596c0ee8a1ba449a6e8b/src/computability/NFA.lean#L40</a></p>",
        "id": 289061396,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1657398865
    },
    {
        "content": "<p>My own understanding of monads, coming from a software engineering background, is that they allow you to map over a structure in a nested way. A normal map over a structure <code>m a</code> looks like <code>m a -&gt; (a -&gt; b) -&gt; m b</code>: a simple transformation of the data from <code>a</code> to <code>b</code>. Monadic <code>bind</code>, on the other hand, is <code>m a -&gt; (a -&gt; m b) -&gt; m b</code>. The transformation creates new structures which are then joined together into a single result. For example, <code>bind</code> on a list is just <code>flatMap</code>: <code>list a -&gt; (a -&gt; list b) -&gt; list b</code>. Each individual element of the list is transformed into a new list, and this list of lists is then flattened into a single list.</p>\n<p>This is why <code>bind</code> is bounded union in the realm of sets: <code>Set a -&gt; (a -&gt; Set b) -&gt; Set b</code>. Monads are useful in functional programming because they allow you to map over the result of a computation while producing a new computation in the process.</p>",
        "id": 289062102,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1657399816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> That's the same idea -- it's just a matter of whether you happen to to think about applying a function as being substitution or evaluation.</p>\n<p>For example, if you have <code>[tt, tt, ff]</code> and a function where <code>tt</code> -&gt; <code>[1,2]</code> and <code>ff</code> -&gt; <code>[3]</code>, then bind is as-if you're substituting these lists in for the \"variables\" <code>tt</code> and <code>ff</code> to get <code>[1,2,1,2,3]</code> (with an intermediate <code>[[1,2],[1,2],[3]]</code> before flattening). It's like the list is a pasting diagram for lists. (I'm not meaning to explain the list monad to you here, just the point of view. I myself learned about monads from the programming side of things, and I came across this substitution idea from the pure math side much more recently.)</p>",
        "id": 289062542,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657400508
    },
    {
        "content": "<p>That's certainly true! Though <code>map</code> is also a kind of substitution, right? It seems like the key aspect of <code>bind</code> isn't the substituting but <em>what</em> you're substituting the \"variables\" with.</p>",
        "id": 289062864,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1657400979
    },
    {
        "content": "<p>In fact, <code>bind</code> is literally just <code>map</code> with the addition of <code>join</code>. It's the joining that makes <code>bind</code> unique.</p>",
        "id": 289062974,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1657401124
    },
    {
        "content": "<p>This is a substitution where you splice in with respect to the structure, which is what differentiates it from map (and <code>pure</code> is the key thing that lets you use <code>bind</code> as if it were <code>map</code>).</p>",
        "id": 289062997,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657401171
    },
    {
        "content": "<p>But, yeah, both <code>map</code> and <code>bind</code> are kinds of substitutions from this point of view, but <code>bind</code> is more general in that you can use <code>pure</code> to locally decide whether you're going to splice or not.</p>",
        "id": 289063065,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657401255
    },
    {
        "content": "<p>I'm not completely sure what you mean by \"with respect to the structure\". You don't mean ordering, right?</p>",
        "id": 289063069,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1657401277
    },
    {
        "content": "<p>The thing I find difficult about all of this is understanding what the point is. As I say, if I hover over bind or pure or seq or return or whatever, I can see the type of what the corresponding funny monadic word means, and then I just look at <code>list</code> or <code>option</code> or <code>set</code> or whatever I'm working with and figure out what this map must be (because it's always pretty obvious) and then I move on, still none the wiser as to why computer scientists even care! For me this is just an obstruction to finding the right term, I look for <code>bUnion</code> or whatever and then I find that it's a monaddy word and I think \"well fair enough\",</p>",
        "id": 289063071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657401290
    },
    {
        "content": "<p>By \"structure\" I'm being loose with terminology and I mean the functor under consideration.</p>",
        "id": 289063082,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657401304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> That's fair... I'll admit it doesn't matter that much within a math context. It's more of a functional programming thing where you have to worry about managing state and side effects and all that.</p>",
        "id": 289063231,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1657401545
    },
    {
        "content": "<p>(an aside; the link at the top of this thread is not canonical, those docs are <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>' version generated from an old (&gt;1 year) version of mathlib)</p>",
        "id": 289063251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657401591
    },
    {
        "content": "<p>(unfortunately the fix to point non-canonical doc pages at the canonical one was added more recently than that page was built)</p>",
        "id": 289063313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657401680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/has_bind.2Ebind/near/289061396\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/has_bind.2Ebind/near/289057450\">said</a>:</p>\n<blockquote>\n<p>I expect the reason <code>M.step_set</code> is defined that way is that CS people are familiar with bind.</p>\n</blockquote>\n<p>It looks like the latest version of <code>step_set</code> just uses the bounded union directly: <a href=\"https://github.com/leanprover-community/mathlib/blob/861589f224456f278c61596c0ee8a1ba449a6e8b/src/computability/NFA.lean#L40\">https://github.com/leanprover-community/mathlib/blob/861589f224456f278c61596c0ee8a1ba449a6e8b/src/computability/NFA.lean#L40</a></p>\n</blockquote>\n<p>Great, then I don't need <code>bind</code> after all.</p>",
        "id": 289063392,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1657401788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> If you're in the business of constructing specific discrete objects piece by piece by a sequence of transformations and substitutions (you could think about pasting diagrams for categories if you want) then monads seem to be a useful general algebraic structure to know about. But if not, I agree it can all be obscure. (I have to admit I can't remember off the top of my head what <code>seq</code> is. Oh, it's <code>&lt;*&gt;</code>, which I remember being useful in Haskell.)</p>",
        "id": 289063445,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657401856
    },
    {
        "content": "<p>Yeah most of them look like fish but seq looks like a space invader.</p>",
        "id": 289063546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657402031
    },
    {
        "content": "<p>if the computer games you were brought up playing were made in the 1980s at least...</p>",
        "id": 289063552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657402051
    },
    {
        "content": "<p>I guess that's another question: is there any logic to the <code>&gt;&gt;=</code> <code>&gt;=&gt;</code> stuff? I mean, am I supposed to be able to guess the function from the fish, or is it just something I should learn one by one?</p>",
        "id": 289063603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657402119
    },
    {
        "content": "<p>I don't know if there's any logic to them, but the only reason I know about <code>&lt;*&gt;</code> is that you can, for example, write <code>f &lt;$&gt; x &lt;*&gt; y &lt;*&gt; z</code> to apply a 3-ary function across multiple pieces of monadic data, where <code>&lt;$&gt;</code> is <code>fmap</code>.</p>",
        "id": 289064515,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657403375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/has_bind.2Ebind/near/289061396\">said</a>:</p>\n<blockquote>\n<p>It looks like the latest version of <code>step_set</code> just uses the bounded union directly: <a href=\"https://github.com/leanprover-community/mathlib/blob/861589f224456f278c61596c0ee8a1ba449a6e8b/src/computability/NFA.lean#L40\">https://github.com/leanprover-community/mathlib/blob/861589f224456f278c61596c0ee8a1ba449a6e8b/src/computability/NFA.lean#L40</a></p>\n</blockquote>\n<p>What's the recommended command line one-liner  to update <code>mathlib</code> again? It's been a while...</p>",
        "id": 289066400,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1657405497
    },
    {
        "content": "<p>It looks like the two definitions of <code>step_set</code>, with and without the <code>bind</code> magic, are somehow equivalent in the end, since Lean accepts the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">show</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">list.foldl</span> <span class=\"n\">M.step_set</span> <span class=\"o\">((</span>\n      <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">Ss</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">Ss</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">),</span> <span class=\"n\">M.step</span> <span class=\"n\">S</span> <span class=\"n\">a</span>\n    <span class=\"o\">)</span> <span class=\"n\">M.start</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">w</span><span class=\"o\">],</span> <span class=\"k\">from</span>\n    <span class=\"k\">show</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">list.foldl</span> <span class=\"n\">M.step_set</span> <span class=\"o\">(</span>\n      <span class=\"bp\">⋃</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">M.start</span><span class=\"o\">,</span> <span class=\"n\">M.step</span> <span class=\"n\">s</span> <span class=\"n\">z</span>\n    <span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">w</span><span class=\"o\">],</span> <span class=\"k\">from</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 289069630,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1657410500
    },
    {
        "content": "<p>Yes, bind for <code>set</code> is definitionally equal to a bounded union:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 289070365,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657411758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/has_bind.2Ebind/near/289063071\">said</a>:</p>\n<blockquote>\n<p>The thing I find difficult about all of this is understanding what the point is. As I say, if I hover over bind or pure or seq or return or whatever, I can see the type of what the corresponding funny monadic word means, and then I just look at <code>list</code> or <code>option</code> or <code>set</code> or whatever I'm working with and figure out what this map must be (because it's always pretty obvious) and then I move on, still none the wiser as to why computer scientists even care! For me this is just an obstruction to finding the right term, I look for <code>bUnion</code> or whatever and then I find that it's a monaddy word and I think \"well fair enough\",</p>\n</blockquote>\n<p>To be fair, I feel the same way about writing stuff in category theory terminology like colimits and representable functors. I can only make sense of these terms by unfolding them in the context of specific categories of interest</p>",
        "id": 289087505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657437464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347475\">Bjørn Kjos-Hanssen</span> <a href=\"#narrow/stream/113489-new-members/topic/has_bind.2Ebind/near/289066400\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/has_bind.2Ebind/near/289061396\">said</a>:</p>\n<blockquote>\n<p>It looks like the latest version of <code>step_set</code> just uses the bounded union directly: <a href=\"https://github.com/leanprover-community/mathlib/blob/861589f224456f278c61596c0ee8a1ba449a6e8b/src/computability/NFA.lean#L40\">https://github.com/leanprover-community/mathlib/blob/861589f224456f278c61596c0ee8a1ba449a6e8b/src/computability/NFA.lean#L40</a></p>\n</blockquote>\n<p>What's the recommended command line one-liner  to update <code>mathlib</code> again? It's been a while...</p>\n</blockquote>\n<p>I believe <code>leanproject upgrade-mathlib</code> should do that (don't recall using it myself before).</p>",
        "id": 289576980,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657796534
    }
]