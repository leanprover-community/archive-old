[
    {
        "content": "<p>Do we have the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_and</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(corrected from <del><code>x = y ∧ p x ↔ p y</code></del>)</p>\n<p>I did <code>library_search</code> for all four arrangements (<code>p x ∧ x = y</code> and so on) and didn't find it. This would be very convenient for rewrites. There is already</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exists_eq_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"n\">a'</span>\n</code></pre></div>\n<p>and several variants (<code>exists_eq_right</code>, <code>exists_eq_left'</code>, <code>exists_eq_right_right</code>...), but I'm not sure how to use them exactly here.</p>",
        "id": 280749120,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1651342693
    },
    {
        "content": "<p>Surely that first one is false?</p>",
        "id": 280749247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651342906
    },
    {
        "content": "<p>Oh what am I saying.</p>",
        "id": 280749297,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1651342938
    },
    {
        "content": "<p>I think I meant <code>x = y ∧ p x ↔ x = y ∧ p y</code>.</p>",
        "id": 280749515,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1651343232
    },
    {
        "content": "<p>I'll edit the post.</p>",
        "id": 280749594,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1651343314
    },
    {
        "content": "<p>Your original lemma is false:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬Π</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">bool</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Your updated lemma seems too specific to be in mathlib, but it can be proved easily:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Are you sure that's what you want? Maybe you want this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280749712,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1651343508
    },
    {
        "content": "<p>There is <code>and.congr_right_iff : ∀ {a b c : Prop}, a ∧ b ↔ a ∧ c ↔ a → (b ↔ c)</code> which seems related.</p>",
        "id": 280749770,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1651343565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> If you want a fun proof of the second example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">{</span> <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 280749797,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651343630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> the point isn't to prove the (corrected) lemma, which I agree is easy, it's to have it for rewrites.</p>\n<p>I have some situations where, for example, I am showing that two sets are equal, both defined in terms of <code>filter</code> and <code>insert</code>and so on in two different ways. Then <code>ext</code> converts this to two logical statements that each contain <code>x = y</code> somewhere, but statement 1 has the other properties in terms of <code>x</code> and statement 2 in terms of <code>y</code>.</p>",
        "id": 280749882,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1651343757
    },
    {
        "content": "<p>(I wish the <code>contextual</code> option were a flag that could join the likes of <code>!</code> and <code>?</code>. Perhaps <code>simpᶜ</code> or <code>simp¢</code>? Or <code>simp@</code> since <code>contextual</code> is adding additional assumptions from implication hypotheses?)</p>",
        "id": 280749944,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651343837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"391579\">@Jake Levinson</span> Does adding <code>{ contextual := tt }</code> to a relevant <code>simp</code> help in your cases?</p>",
        "id": 280750024,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651343930
    },
    {
        "content": "<p>For example I might have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">q</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">z</span>\n</code></pre></div>",
        "id": 280750027,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1651343935
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">{</span> <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280750043,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651343982
    },
    {
        "content": "<p>Neato, I'll try that. What does it mean?</p>",
        "id": 280750048,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1651344000
    },
    {
        "content": "<p>It adds additional simp lemmas contextually. There might be other effects, but the one I know about is that when simplifying <code>a -&gt; b</code> it adds <code>a</code> as a simp lemma when simplifying <code>b</code>.</p>",
        "id": 280750115,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651344079
    },
    {
        "content": "<p>Key to this working in these cases is that <code>simp</code> is using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/and_imp\">docs#and_imp</a> first</p>",
        "id": 280750171,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651344144
    },
    {
        "content": "<p>Also key is that <code>x = y</code> happened to be near the front on each side of the iff.</p>",
        "id": 280750225,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651344233
    },
    {
        "content": "<p>This fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">{</span> <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>though there are other tactics that can solve it automatically, like <code>by tidy</code> or <code>by split; cc</code>.</p>",
        "id": 280750283,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651344273
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> and <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>.</p>\n<p>A more complicated version of the example would be something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">{</span> <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>This seems to work great. I'll try it out in my actual situation soon.</p>\n<p>In general I'm imagining something like doing <code>subst x</code> locally within a statement that contains an equation <code>x = y</code>, by rewriting away <code>x</code> (or perhaps <code>y</code>) from the remainder of the statement.</p>",
        "id": 280751538,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1651346122
    },
    {
        "content": "<p>Here's a quick tactic that simulates what <code>contextual</code> is doing here while also actually doing substitutions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">w</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">intro</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(Notice the equalities are now at the end, so <code>contextual</code> alone doesn't work.)</p>",
        "id": 280751753,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651346441
    },
    {
        "content": "<p>Is <code>rintro rfl</code> somehow doing substitutions?</p>",
        "id": 280751951,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1651346762
    },
    {
        "content": "<p>Also, a related question: I have vaguely heard that certain uses of (\"nonterminal\"?) <code>simp</code> are discouraged in mathlib because of either speed (simp being inefficient compared to <code>simp only</code> or an explicit proof) or fragility (updates to the library breaking a simp proof). Would the tactic you wrote be OK for code in mathlib, given that it repeatedly uses <code>simp</code>?</p>",
        "id": 280752217,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1651347161
    },
    {
        "content": "<p>I think it's similar to using <code>norm_num</code> to finish a proof. <code>norm_num</code> also repeatedly calls <code>simp</code>, but it's a tactic with understood behavior. Still, I think it would probably be better to turn that into a <code>simp only</code>.</p>",
        "id": 280752882,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651348230
    },
    {
        "content": "<p><code>rintro rfl</code> is doing <code>subst</code> for you after doing <code>intro</code></p>",
        "id": 280752893,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651348277
    }
]