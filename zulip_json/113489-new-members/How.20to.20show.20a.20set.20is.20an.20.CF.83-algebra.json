[
    {
        "content": "<p>How do I show that Σ = { ∅, {0, 1}, {2, 3}, {0, 1, 2, 3} } is a σ-algebra on X = {0, 1, 2, 3} in Lean?</p>\n<p>I think it is done by defining a relevant object of the <code>measurable_space</code>-structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">measurable_set'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">measurable_set_empty</span> <span class=\"o\">:</span> <span class=\"n\">measurable_set'</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">measurable_set_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">measurable_set'</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">measurable_set'</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">measurable_set_Union</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measurable_set'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">measurable_set'</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>First I need to choose the right <code>(α : Type*)</code>. I think the type should correspond to the set X = {0, 1, 2, 3}. I have a vague understanding of subtypes. Do I simply use <code>{n : ℕ // n &lt; 4}</code>?</p>\n<p>Next I need to specify <code>measurable_set'</code>, which has type <code>set α → Prop</code>. I think I can define it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measurable_space_def</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mysig</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>With this approach, I run into problems when trying to show closure under complementation.</p>",
        "id": 290031433,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1658183273
    },
    {
        "content": "<p><code>fin 4</code> is defined to be <code>{n : ℕ // n &lt; 4}</code>, so I think you are using the right thing.<br>\nThe following includes a proof of <code>empty</code> and <code>compl</code> (<code>fin_cases</code> is sorta slow though), and <code>Union</code> seems to require some additional lemma(s):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mysig</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">set</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">{{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"bp\">∅</span><span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"bp\">$</span> <span class=\"n\">or.inr</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> or `right, right, right, exact rfl` -/</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"o\">⟨⟩),</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290032974,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658184308
    },
    {
        "content": "<p>just wanted to note that writing definitions in tactic mode is generally discouraged (or so I've heard)</p>",
        "id": 290045059,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658196013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20show.20a.20set.20is.20an.20.CF.83-algebra/near/290045059\">said</a>:</p>\n<blockquote>\n<p>just wanted to note that writing definitions in tactic mode is generally discouraged (or so I've heard)</p>\n</blockquote>\n<p>I agree; even though we're only using tactics that are safe for the data fields (e.g. <code>constructor</code>, <code>intro</code>, <code>exact</code>, <code>change</code>, <code>dsimp</code>, <code>apply</code>, <code>refine</code>), it would be nicer to write <code>{ measurable_set' := ... ,  measurable_set_empty := ..., ... }</code> so that it's evident which field you are working on.</p>",
        "id": 290045512,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658196551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20show.20a.20set.20is.20an.20.CF.83-algebra/near/290045059\">said</a>:</p>\n<blockquote>\n<p>just wanted to note that writing definitions in tactic mode is generally discouraged (or so I've heard)</p>\n</blockquote>\n<p>The idea is that most tactics are meant for propositions, and might do very complicated or unpredictable things in order to reach their results, which is bad when you're trying to define a concrete object. There are a few you can safely use - I'd like to add <code>by_cases</code> to the aforementioned list, and <code>rw</code> if you really know what you're doing.</p>",
        "id": 290045725,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658196812
    },
    {
        "content": "<p>btw, I must be missing something about how Lean works because <code>def mySet : set (fin 4) := {1, 2, 500}</code> seems to typecheck just fine</p>",
        "id": 290045933,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658197079
    },
    {
        "content": "<p>does Lean just take your word for it when you type a definition?</p>",
        "id": 290046037,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658197199
    },
    {
        "content": "<p><code>(500 : fin 4) = 0</code> because it loops around.</p>",
        "id": 290046097,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658197253
    },
    {
        "content": "<p>oh huh, it just does 500 mod 4?</p>",
        "id": 290046118,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658197293
    },
    {
        "content": "<p>I guess that makes sense</p>",
        "id": 290046144,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658197314
    },
    {
        "content": "<p>That's sort of a side-effect to how numerals are implemented. Under the hood, they're all expressions made from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bit0\">docs#bit0</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bit1\">docs#bit1</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_zero.zero\">docs#has_zero.zero</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_one.one\">docs#has_one.one</a>, so you're forced to allow every natural number.</p>",
        "id": 290046449,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658197577
    },
    {
        "content": "<p>gotcha... good to know!</p>",
        "id": 290046473,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658197618
    },
    {
        "content": "<p>If you want to pull back the curtain, you can try <code>set_option pp.numerals false</code></p>",
        "id": 290046485,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658197639
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"mi\">37</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">bit1 (bit0 (bit1 (bit0 (bit0 has_one.one)))) : ℕ</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 290046492,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658197677
    },
    {
        "content": "<p>Thanks for the help and for confirming that I was somewhat on the right track :) Using <code>fin_cases</code> worked nicely for showing closure under complementation. I'm still trying to show closure under countable unions. I thought that since this was such a simple example it would be easy to formalize. Not the case for me at least.</p>",
        "id": 290047087,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1658198242
    },
    {
        "content": "<p>feel free to share what you have so far (if you want to)</p>",
        "id": 290048865,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658200140
    },
    {
        "content": "<p>General theorems are much easier to formalise than examples in Lean 3, because Lean 3 is not a \"computer\"; it is not designed to compute. Lean 4 should be much better in this regard.</p>",
        "id": 290048952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658200261
    },
    {
        "content": "<p>now I'm curious if there's an easy way to prove a statement like <code>↑(finset.fin_range 4) = {0, 1, 2, 3}</code></p>",
        "id": 290049679,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658201089
    },
    {
        "content": "<p>It might be nice to have a tactic (maybe a <code>norm_num</code> plugin?) that reduces basic set expressions, normalizing set literals like <code>{2, 4, 4, 1, 3} -&gt; {1, 2, 3, 4}</code> and using that to efficiently compute unions, intersections, and set differences.</p>",
        "id": 290050132,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658201544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> For this small example, at least this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">finset.fin_range</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290050237,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658201650
    },
    {
        "content": "<p>ah, I forgot about <code>ext</code>... very nice</p>",
        "id": 290050541,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658202026
    },
    {
        "content": "<p>Actually these are almost defeq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset.fin_range</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"> comes from `list.mem` -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"> comes from `set.has_insert` and `set.has_singleton` -/</span>\n</code></pre></div>\n<p>Should we make them agree (for example, by redefining <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_singleton\">docs#set.has_singleton</a>)?</p>",
        "id": 290051844,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658203560
    },
    {
        "content": "<p>I'm curious about why there's a <code>∨ false</code> there</p>",
        "id": 290052497,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658204307
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.mem\">docs#list.mem</a> is an inductive definition with base case <code>list.mem a list.nil = false</code> for the empty list.</p>",
        "id": 290053263,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658205285
    },
    {
        "content": "<p>ah, that makes sense</p>",
        "id": 290053295,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658205330
    },
    {
        "content": "<p>Using a lemma, I was able to reduce it to a finite problem (16 cases); then the same solution for complement works, but it takes like 1 minute on my machine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measurable_space_def</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Sup_mem_of_sup_mem</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">m.powerset</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">multiset.sup</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hff</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">m.to_finset.finite_to_set.subset</span><span class=\"o\">,</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">multiset.mem_to_finset</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hff.coe_to_finset</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">finset.sup_id_eq_Sup</span><span class=\"o\">,</span> <span class=\"n\">finset.sup_def</span><span class=\"o\">,</span> <span class=\"n\">multiset.map_id</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset.mem_powerset</span><span class=\"o\">,</span> <span class=\"n\">finset.val_le_iff_val_subset</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hff.mem_to_finset.1</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">set_option</span> <span class=\"kd\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">100</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">or</span>\n<span class=\"kd\">def</span> <span class=\"n\">mysig</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">set</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">{{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"bp\">∅</span><span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inr</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> or `right, right, right, exact rfl` -/</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"o\">⟨⟩),</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">Sup_mem_of_sup_mem</span><span class=\"o\">,</span>\n    <span class=\"n\">swap</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">{{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"bp\">∅</span><span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">swap</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">multiset.sup</span><span class=\"o\">],</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">},</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">2</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">},</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">3</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">},</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">4</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">},</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">5</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">},</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">6</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">},</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">7</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">},</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">8</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">},</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">9</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">},</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">10</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">},</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">11</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">},</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">12</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">},</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">13</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">},</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">14</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">},</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">15</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">},</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">16</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">},</span>\n      <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290054112,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658206296
    },
    {
        "content": "<p>That <code>change set _</code> is a bad idea</p>",
        "id": 290061196,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658214139
    },
    {
        "content": "<p>Use <code>refine (∈ (_ : set _))</code> there instead ( or better, combine that with the next line</p>",
        "id": 290061245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658214211
    },
    {
        "content": "<p>Using finset computability/decidability, I'm able to make it faster and more automated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measurable_space_def</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Sup_mem_of_sup_mem</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">m.powerset</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">multiset.sup</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hff</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">m.to_finset.finite_to_set.subset</span><span class=\"o\">,</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">multiset.mem_to_finset</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hff.coe_to_finset</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">finset.sup_id_eq_Sup</span><span class=\"o\">,</span> <span class=\"n\">finset.sup_def</span><span class=\"o\">,</span> <span class=\"n\">multiset.map_id</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset.mem_powerset</span><span class=\"o\">,</span> <span class=\"n\">finset.val_le_iff_val_subset</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hff.mem_to_finset.1</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">f4</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">or</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mysig_aux</span> <span class=\"o\">:</span>\n  <span class=\"o\">({{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"bp\">∅</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">$</span> <span class=\"n\">set</span> <span class=\"bp\">$</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">{</span><span class=\"bp\">↑</span><span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">}:</span><span class=\"n\">f4</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">({</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}:</span><span class=\"n\">f4</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}:</span><span class=\"n\">f4</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">∅</span><span class=\"o\">:</span><span class=\"n\">f4</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">or_false</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"c\">/-</span><span class=\"cm\"> elaboration of mysig took 20.8s -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mysig</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">measurable_set'</span> <span class=\"o\">:=</span> <span class=\"o\">({{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"bp\">∅</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">measurable_set_empty</span> <span class=\"o\">:=</span> <span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inr</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"n\">measurable_set_compl</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mysig_aux</span><span class=\"o\">],</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">4</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">set.mem_singleton_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.coe_compl</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">set.has_insert</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">finset.coe_empty</span><span class=\"o\">],</span>\n      <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.coe_inj</span><span class=\"o\">],</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">measurable_set_Union</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mysig_aux</span> <span class=\"n\">at</span> <span class=\"n\">hf</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">fapply</span> <span class=\"n\">Sup_mem_of_sup_mem</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">{</span><span class=\"bp\">↑</span><span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">}:</span><span class=\"n\">f4</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">({</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}:</span><span class=\"n\">f4</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}:</span><span class=\"n\">f4</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">∅</span><span class=\"o\">:</span><span class=\"n\">f4</span><span class=\"o\">)}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"o\">⟨⟨⟩⟩),</span>\n      <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">multiset.sup</span><span class=\"o\">,</span> <span class=\"n\">set.has_insert</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">finset.coe_empty</span><span class=\"o\">],</span>\n        <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">finset.coe_union</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_inj</span><span class=\"o\">],</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 290063559,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658216215
    },
    {
        "content": "<blockquote>\n<p>That change set _ is a bad idea</p>\n</blockquote>\n<p>Yes, <code>change</code> seems to introduce an <code>id</code>, but it doesn't seem to matter much ...</p>",
        "id": 290063684,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658216299
    },
    {
        "content": "<p><code>measurable_set' := ({{0,1}, {2,3}, {0,1,2,3}, ∅} : set _)</code> is still the wrong spelling</p>",
        "id": 290073134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658222610
    },
    {
        "content": "<p>Use <code>measurable_set' := (∈ {{0,1}, {2,3}, {0,1,2,3}, ∅}),</code></p>",
        "id": 290073155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658222623
    },
    {
        "content": "<p>The right way to convert from <code>a -&gt; Prop</code> to <code>set</code> is <code>set_of p</code> aka <code>{x | p x}</code>, and the right way to convert in the order direction is <code>(∈ s)</code>. If you do it any other way, you'll find that you have to unfold stuff because no lemmas expect you to do things that way</p>",
        "id": 290073337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658222707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20show.20a.20set.20is.20an.20.CF.83-algebra/near/290049679\">said</a>:</p>\n<blockquote>\n<p>now I'm curious if there's an easy way to prove a statement like <code>↑(finset.fin_range 4) = {0, 1, 2, 3}</code></p>\n</blockquote>\n<p>People, please stop using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.fin_range\">docs#finset.fin_range</a>. Use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.univ\">docs#finset.univ</a> instead.</p>",
        "id": 290079245,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658226437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20show.20a.20set.20is.20an.20.CF.83-algebra/near/290050132\">said</a>:</p>\n<blockquote>\n<p>It might be nice to have a tactic (maybe a <code>norm_num</code> plugin?) that reduces basic set expressions, normalizing set literals like <code>{2, 4, 4, 1, 3} -&gt; {1, 2, 3, 4}</code> and using that to efficiently compute unions, intersections, and set differences.</p>\n</blockquote>\n<p>We basically already have this as part of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.norm_num.eval_big_operators\">docs#tactic.norm_num.eval_big_operators</a>. The problem with finsets is that you need some way to decide that <code>({1, 2, 3, 4} : finset (fin 4)) = {1, 2, 3}</code>. But if you can hook up a norm_num front-end to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.norm_num.eval_finset\">docs#tactic.norm_num.eval_finset</a> it should work.</p>",
        "id": 290082587,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658228691
    },
    {
        "content": "<blockquote>\n<p>Use <code>measurable_set' := (∈ {{0,1}, {2,3}, {0,1,2,3}, ∅}),</code></p>\n</blockquote>\n<p>Using <code>(∈ )</code> allow to eliminate <code>change _ = _ ∨ _</code> , but I also have to modify the statement of <code>Sup_mem_of_sup_mem</code> to use <code>set α</code> instead of  <code>α → Prop</code>, otherwise <code>fapply Sup_mem_of_sup_mem</code> fails to unify.</p>",
        "id": 290118523,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658245475
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measurable_space_def</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Sup_mem_of_sup_mem</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">m.powerset</span><span class=\"o\">,</span> <span class=\"n\">multiset.sup</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hff</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">m.to_finset.finite_to_set.subset</span><span class=\"o\">,</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">multiset.mem_to_finset</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hff.coe_to_finset</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">finset.sup_id_eq_Sup</span><span class=\"o\">,</span> <span class=\"n\">finset.sup_def</span><span class=\"o\">,</span> <span class=\"n\">multiset.map_id</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset.mem_powerset</span><span class=\"o\">,</span> <span class=\"n\">finset.val_le_iff_val_subset</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hff.mem_to_finset.1</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">f4</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mysig_aux</span> <span class=\"o\">:</span>\n  <span class=\"o\">({{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"bp\">∅</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">$</span> <span class=\"n\">set</span> <span class=\"bp\">$</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">{</span><span class=\"bp\">↑</span><span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">}:</span><span class=\"n\">f4</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">({</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}:</span><span class=\"n\">f4</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}:</span><span class=\"n\">f4</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">∅</span><span class=\"o\">:</span><span class=\"n\">f4</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">or_false</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">or</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"c\">/-</span><span class=\"cm\"> elaboration of mysig took 20.2s -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mysig</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">measurable_set'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"o\">({{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"bp\">∅</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">$</span> <span class=\"n\">set</span> <span class=\"bp\">$</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)),</span>\n  <span class=\"n\">measurable_set_empty</span> <span class=\"o\">:=</span> <span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inr</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"n\">measurable_set_compl</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mysig_aux</span><span class=\"o\">],</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">4</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">set.mem_singleton_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.coe_compl</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">set.has_insert</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">finset.coe_empty</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.coe_inj</span><span class=\"o\">],</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">measurable_set_Union</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mysig_aux</span> <span class=\"n\">at</span> <span class=\"n\">hf</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">fapply</span> <span class=\"n\">Sup_mem_of_sup_mem</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">{</span><span class=\"bp\">↑</span><span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">}:</span><span class=\"n\">f4</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">({</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}:</span><span class=\"n\">f4</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}:</span><span class=\"n\">f4</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">∅</span><span class=\"o\">:</span><span class=\"n\">f4</span><span class=\"o\">)}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"o\">⟨⟨⟩⟩),</span>\n      <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">multiset.sup</span><span class=\"o\">,</span> <span class=\"n\">set.has_insert</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">finset.coe_empty</span><span class=\"o\">],</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">finset.coe_union</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_inj</span><span class=\"o\">],</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 290118564,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658245494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20show.20a.20set.20is.20an.20.CF.83-algebra/near/290079245\">said</a>:</p>\n<blockquote>\n<p>People, please stop using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.fin_range\">docs#finset.fin_range</a>. Use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.univ\">docs#finset.univ</a> instead.</p>\n</blockquote>\n<p>Is this something that can be easily refactored out?</p>",
        "id": 290171724,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658271222
    },
    {
        "content": "<p>Looks like it: <a href=\"https://github.com/leanprover-community/mathlib/pull/15538\">#15538</a></p>",
        "id": 290174952,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658273841
    },
    {
        "content": "<p>With more lemmas (some basic ones are missing in mathlib), Lean can do the computation in less than 5 seconds: <a href=\"https://gist.github.com/alreadydone/ba98aa4e04b5f0067960284ef03b4442\">https://gist.github.com/alreadydone/ba98aa4e04b5f0067960284ef03b4442</a></p>",
        "id": 290179006,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658277688
    }
]