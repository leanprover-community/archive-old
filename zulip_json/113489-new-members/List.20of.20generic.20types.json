[
    {
        "content": "<p>I have created a type for a weighted directed graph on vertex type <code>V</code>: <br>\n<code>def Graph (V: Type) := V → V → Nat</code><br>\nI would like to create a List, set, or other collection of Graphs with varying vertex types. However, because <code>Graph</code> is formally of type <code>Type → Type</code>, this cannot be done directly. Is there an idiomatic way to perform this kind of genericism?<br>\nThanks.</p>",
        "id": 318366482,
        "sender_full_name": "Chase Norman",
        "timestamp": 1672296689
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sigma#doc\">docs4#Sigma</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">graph₁</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">graph₂</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">Graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">graph₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">graph₂</span><span class=\"o\">⟩]</span>\n</code></pre></div>",
        "id": 318377241,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1672303754
    },
    {
        "content": "<p>Note this only works if the types live in the same universe; if you'd used <code>Type u</code> instead of <code>Type</code> then you couldn't put a <code>Graph Nat</code> and a <code>Graph (ulift.{37} Nat)</code> in the same sigma type</p>",
        "id": 318461695,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672336312
    }
]