[
    {
        "content": "<p>I'm trying to show that <code>irrational_sqrt_two -&gt; rat.sqrt(2) * rat.sqrt(2) \\ne 2</code>. mathlib comes with a proof that the sqrt of 2 : R is irrational, but the irrational_sqrt_rat_iff theorem takes a proof that the sqrt of 2 : Q is irrational. How should I approach this? Do I need a lemma that the sqrt of 2 : Q is irrational using the fact that sqrt 2 : R is irrational?</p>",
        "id": 216032134,
        "sender_full_name": "Meyer Zinn",
        "timestamp": 1604879536
    },
    {
        "content": "<p>Actually, I just realized this approach doesn't make sense, since rat.sqrt is not related to real.sqrt (I think?)</p>",
        "id": 216032163,
        "sender_full_name": "Meyer Zinn",
        "timestamp": 1604879618
    },
    {
        "content": "<p>Will need to find a different proof approach. My ultimate goal is to show that there is no integer $n$ such that $n^2=2$.</p>",
        "id": 216032169,
        "sender_full_name": "Meyer Zinn",
        "timestamp": 1604879641
    },
    {
        "content": "<p>For all <code>n : Z</code>, <code>n &lt;= n * n</code>. So if <code>n * n = 2</code>, then <code>n &lt;= 2</code>. Split on <code>-2</code> and below, <code>2</code>, then finish on case bash on -1, 0, 1?</p>",
        "id": 216033440,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604881469
    },
    {
        "content": "<p>This is a little slow, but it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n      <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">dec_trivial</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul</span> <span class=\"n\">h</span> <span class=\"n\">h</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">abs_mul_abs_self</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">abs_lt</span><span class=\"o\">,</span> <span class=\"n\">not_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">interval_cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216033867,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604882082
    },
    {
        "content": "<p>Here's a similar proof using Yakov's idea:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- this seems to be missing from mathlib?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">int.le_mul_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">int.nat_abs_mul_self'</span><span class=\"o\">],</span>\n  <span class=\"k\">calc</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n.nat_abs</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int.le_nat_abs</span>\n     <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">nat.le_mul_self</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">abs_mul_abs_self</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">int.le_mul_self</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">abs_le</span><span class=\"o\">,</span> <span class=\"n\">not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">interval_cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216034729,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604883455
    },
    {
        "content": "<p>What is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.sqrt\">docs#rat.sqrt</a>?</p>",
        "id": 216035507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604884657
    },
    {
        "content": "<p><code>rat.sqrt 2</code> is garbage</p>",
        "id": 216035556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604884712
    },
    {
        "content": "<p>Here's a proof that actually uses <code>irrational_sqrt_two</code> instead of reproving it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.sqrt</span> <span class=\"n\">data.real.irrational</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">irrational_iff_ne_rational</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">irrational_sqrt_two</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.sqrt_eq_iff_mul_self_eq</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">abs_nonneg</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">abs_mul</span><span class=\"o\">,</span> <span class=\"n\">abs_mul_self</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span><span class=\"n\">exact_mod_cast</span> <span class=\"n\">e</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">norm_num</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216035917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604885334
    }
]