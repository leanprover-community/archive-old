[
    {
        "content": "<p>I am trying to translate an agda proof (about permutations) to Lean but I find this rather difficult even though I know how to do it in principle. Hence I wonder wether there is any tactic support I miss or any general advice?</p>\n<p>Here is my agda code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"kn\">import</span> <span class=\"n\">Data.List</span>\n<span class=\"kn\">open</span> <span class=\"kn\">import</span> <span class=\"n\">Data.Product</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"kd\">variable</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span>\n\n<span class=\"n\">data</span> <span class=\"n\">Add</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∷</span> <span class=\"n\">as</span><span class=\"o\">)</span>\n  <span class=\"n\">suc</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">→</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∷</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∷</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n\n<span class=\"n\">addLem</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">→</span> <span class=\"n\">Add</span> <span class=\"n\">b</span> <span class=\"n\">bs</span> <span class=\"n\">cs</span>\n       <span class=\"bp\">→</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ds</span> <span class=\"bp\">→</span> <span class=\"n\">Add</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"n\">ds</span> <span class=\"bp\">×</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">ds</span> <span class=\"n\">cs</span><span class=\"o\">)</span>\n<span class=\"n\">addLem</span> <span class=\"n\">zero</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"o\">,</span> <span class=\"n\">suc</span> <span class=\"n\">zero</span>\n<span class=\"n\">addLem</span> <span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"n\">suc</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"o\">,</span> <span class=\"n\">zero</span>\n<span class=\"n\">addLem</span> <span class=\"o\">(</span><span class=\"n\">suc</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"o\">,</span> <span class=\"n\">suc</span> <span class=\"o\">(</span><span class=\"n\">suc</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">addLem</span> <span class=\"o\">(</span><span class=\"n\">suc</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">suc</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">addLem</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n<span class=\"bp\">...</span>                      <span class=\"bp\">|</span>  <span class=\"n\">bs'</span> <span class=\"o\">,</span> <span class=\"n\">p'</span> <span class=\"o\">,</span> <span class=\"n\">q'</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">suc</span> <span class=\"n\">p'</span> <span class=\"o\">,</span> <span class=\"n\">suc</span> <span class=\"n\">q'</span>\n</code></pre></div>\n<p>and here are the corresponding Lean definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Add</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"n\">as'</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">as'</span> <span class=\"bp\">→</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">as'</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Add</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"n\">cs</span> <span class=\"n\">as'</span> <span class=\"n\">cs'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span>\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_lem</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">→</span> <span class=\"n\">Add</span> <span class=\"n\">b</span> <span class=\"n\">bs</span> <span class=\"n\">cs</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">ds</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"n\">ds</span> <span class=\"bp\">∧</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">ds</span> <span class=\"n\">cs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So I try to translate the proof using pattern matching and structural recursion into just using the induction tactic. This is a bit a dejavue from my PhD ... I remember this was one of the reasons I never seriously used Coq, but Lean doesn't seem any better if not worse because in coq there is Matthieu Sozeau's equations package which I think would enable me to do the agda proof in coq (haven't tried it).</p>",
        "id": 216604822,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1605271465
    },
    {
        "content": "<p>The induction tactic has some limitations, most notably that it tends to forget what you applied it to. <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>, am I right that your improved <code>induction'</code> will work here?</p>",
        "id": 216607626,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1605273037
    },
    {
        "content": "<p>Yes. <code>induction'</code> is partly a reimplementation of Conor's <code>Depelim</code>, which helps a lot with indexed families. It's very similar to Coq's <code>dependent induction</code> and the Equations package is built on the same tech afaik. Let me try what <code>induction'</code> says in this example...</p>",
        "id": 216610156,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1605274376
    },
    {
        "content": "<p>Slightly embarrassingly, I'm failing to do the <code>induction'</code> proof right now. The problem is with the double induction, which induction tactics don't do well. I'll try again later. For the moment, here's the Agda-style proof transcribed to Lean, using the equation compiler:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Add</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"n\">as'</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">as'</span> <span class=\"bp\">→</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">as'</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Add</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_lem₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"n\">cs</span><span class=\"o\">},</span>\n  <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">→</span> <span class=\"n\">Add</span> <span class=\"n\">b</span> <span class=\"n\">bs</span> <span class=\"n\">cs</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">ds</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"n\">ds</span> <span class=\"bp\">∧</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">ds</span> <span class=\"n\">cs</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">b</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"n\">as'</span> <span class=\"n\">as''</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">as''</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"n\">as'</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">b'</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">b'</span> <span class=\"o\">::</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">)⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"n\">as'</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"n\">a₀</span> <span class=\"n\">b₀</span> <span class=\"n\">as₀</span> <span class=\"n\">as'₀</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">ds'</span><span class=\"o\">,</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">q'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">add_lem₁</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"k\">in</span>\n  <span class=\"o\">⟨</span><span class=\"n\">b₀</span> <span class=\"o\">::</span> <span class=\"n\">ds'</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">q'</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 216624582,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1605280494
    },
    {
        "content": "<p>Here's a version using the <code>induction</code> tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Add</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"n\">as'</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">as'</span> <span class=\"bp\">→</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">as'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"n\">cs</span> <span class=\"n\">as'</span> <span class=\"n\">cs'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span>\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_lem</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">→</span> <span class=\"n\">Add</span> <span class=\"n\">b</span> <span class=\"n\">bs</span> <span class=\"n\">cs</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">ds</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"n\">ds</span> <span class=\"bp\">∧</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">ds</span> <span class=\"n\">cs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize_hyp</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">bs</span> <span class=\"bp\">=</span> <span class=\"n\">bs'</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">generalizing</span> <span class=\"n\">cs</span> <span class=\"n\">bs'</span><span class=\"bp\">;</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Add.zero</span><span class=\"o\">,</span> <span class=\"n\">Add.zero.succ</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">Add.zero</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Add.zero</span><span class=\"o\">,</span> <span class=\"n\">p.succ.succ</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">bs'</span><span class=\"o\">,</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">q'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h1_ih</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">p'.succ</span><span class=\"o\">,</span> <span class=\"n\">q'.succ</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216626308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605281261
    },
    {
        "content": "<p>Thanks for the helpful comments. Yes, I was wondering wether the easiest way would be to just use the equations compiler. However, I avoided talking about proof terms in my undergraduate course (maybe this is a mistake), hence a tactic based proof like the one by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  fits the bill perfectly. I need to study it in more detail and hopefully I will be able to translate the rest of my proof.</p>",
        "id": 216748715,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1605386284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/113489-new-members/topic/Reasoning.20with.20inductive.20relations/near/216624582\">said</a>:</p>\n<blockquote>\n<p>Slightly embarrassingly, I'm failing to do the <code>induction'</code> proof right now. The problem is with the double induction, which induction tactics don't do well. I'll try again later. For the moment, here's the Agda-style proof transcribed to Lean, using the equation compiler:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Add</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"n\">as'</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">as'</span> <span class=\"bp\">→</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">as'</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Add</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_lem₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"n\">cs</span><span class=\"o\">},</span>\n  <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">→</span> <span class=\"n\">Add</span> <span class=\"n\">b</span> <span class=\"n\">bs</span> <span class=\"n\">cs</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">ds</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"n\">ds</span> <span class=\"bp\">∧</span> <span class=\"n\">Add</span> <span class=\"n\">a</span> <span class=\"n\">ds</span> <span class=\"n\">cs</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">b</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"n\">as'</span> <span class=\"n\">as''</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">as''</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"n\">as'</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">b'</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">b'</span> <span class=\"o\">::</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">)⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"n\">as'</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"n\">a₀</span> <span class=\"n\">b₀</span> <span class=\"n\">as₀</span> <span class=\"n\">as'₀</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">ds'</span><span class=\"o\">,</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">q'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">add_lem₁</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"k\">in</span>\n  <span class=\"o\">⟨</span><span class=\"n\">b₀</span> <span class=\"o\">::</span> <span class=\"n\">ds'</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">q'</span><span class=\"o\">⟩</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Hi Jannis,</p>\n<p>I am having problems loading this proof into lean. It says that the equation compiler failed. Is this a version issue or is there something wrong with my lean installation?</p>\n<p>Cheers,<br>\nThorsten</p>",
        "id": 300187462,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1663860998
    },
    {
        "content": "<p>That file compiles fine for me with <code>Lean (version 3.48.0, commit 283f6ed8083a, Release)</code></p>",
        "id": 300345513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663934325
    }
]