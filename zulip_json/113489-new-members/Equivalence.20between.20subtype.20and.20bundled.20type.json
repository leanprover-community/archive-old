[
    {
        "content": "<p>In the file <code>algebra.group.units</code>, how can I fill up the sorries of the following definition, placed after <code>is_unit.unit</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">is_unit</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">|</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">unit</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">],</span> <span class=\"n\">sorry</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I would expect <code>refl</code> to work, but it is as if Lean is replacing things with underscores and cannot look back in to them.</p>",
        "id": 208427160,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598696354
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">units</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">is_unit</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">|</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">of_injective</span> <span class=\"bp\">_</span> <span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">ext</span>\n</code></pre></div>",
        "id": 208427392,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598696782
    },
    {
        "content": "<p><code>{ a | is_unit a }</code> is defeq to <code>set.range (coe : units M -&gt; M)</code></p>",
        "id": 208427408,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598696863
    },
    {
        "content": "<p>Ok thanks a lot! This looks smart, I'll try to understand the proof</p>",
        "id": 208428266,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598698504
    },
    {
        "content": "<p><code>refl</code> doesn't work because \"eta isn't refl\" I think. For example if z is a complex number, then <code>\\&lt;z.re, z.im\\&gt; = z</code> but the proof isn't refl, it's <code>cases z, refl</code>. You need to case on x more in your first sorry. That's what the underscores are -- they're parts of x which don't have names yet.</p>",
        "id": 208441401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598717671
    },
    {
        "content": "<p>No, I tell a lie, the issue is that <code>is_unit</code> is an existence statement, and to get the unit there's some <code>classical.some</code>, so your underscore is something which needs to be reasoned about with <code>classical.some_spec</code>. I think Kenny's approach is better.</p>",
        "id": 208441510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598717809
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- The element of the group of units, corresponding to an element of a monoid which is a unit. -/</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">is_unit</span><span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_unit</span><span class=\"bp\">.</span><span class=\"n\">unit_spec</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"n\">h</span>\n</code></pre></div>\n\n\n<p>If you look at the definition of <code>is_unit.unit</code> in mathlib then immediately afterwards we see the API, i.e. the function you need.</p>",
        "id": 208441598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598717910
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- so rintro? works, but you can comment this line out</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">inv</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"c1\">-- using rintro and changing names to shorter ones</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- dsimp, -- I wrote this line so I could see what the heck was going on, but it&#39;s not needed</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_unit</span><span class=\"bp\">.</span><span class=\"n\">unit_spec</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 208441697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598718045
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">inv</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_unit</span><span class=\"bp\">.</span><span class=\"n\">unit_spec</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 208441777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598718127
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Lambda_calculus\">here</a> is the list of the greek letters involved in \"computation\" in lambda calculus, and <a href=\"https://leanprover.github.io/reference/expressions.html#computation\">here</a> is the list of the ones which are built into Lean's definition of definitional equality, i.e. the ones which refl works for. The one which is missing is \"eta reduction for structures\" I think, but I'm certainly not an expert. But in this case the problem was something else anyway, namely the classical issue involved in getting from the existence statement to the actual object.</p>",
        "id": 208441861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598718274
    }
]