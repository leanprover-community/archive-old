[
    {
        "content": "<p>Hi guys, I am trying to model ssreflects 'pick' method using classical.some. The code I came up with reads:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">matrix</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">60</span>\n<span class=\"c1\">-- set_option trace.class_instances true</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">get_sample_or_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">vec</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">i</span>  <span class=\"bp\">|</span> <span class=\"n\">V</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"k\">in</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span>\n    <span class=\"k\">then</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>but triggers a \"maximum class-instance resolution depth has been reached\". Any pointers what could go wrong here?</p>",
        "id": 134871036,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538203392
    },
    {
        "content": "<p>Try removing <code>has_zero</code>. It should be implied by the ordered ring.</p>",
        "id": 134871101,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538203561
    },
    {
        "content": "<p>This is the kind of problem that arises when your instances overlap in conflicting ways</p>",
        "id": 134871141,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538203613
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> , unfortunately this does not help.</p>",
        "id": 134871197,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538203797
    },
    {
        "content": "<p>Still the same error<br>\nDropping the ordered_ring instead also does not help.</p>",
        "id": 134871251,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538203875
    },
    {
        "content": "<p>I can also drop the matrix import, this does not change anything either.</p>",
        "id": 134871252,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538203899
    },
    {
        "content": "<p>I think you should need anything beside <code>has_zero</code> actually.</p>",
        "id": 134871307,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538204013
    },
    {
        "content": "<p>Is it important that the default value be <code>0</code>? If not, you can replace the <code>if</code> with <code>classical.epsilon S</code>.</p>",
        "id": 134871347,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538204065
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>local attribute classical.prop_decidable\n</pre></div>\n\n\n<p>since when is this valid syntax?</p>",
        "id": 134871348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538204081
    },
    {
        "content": "<p>oh wait, now I see... this doesn't do anything</p>",
        "id": 134871355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538204148
    },
    {
        "content": "<p>you want <code>local attribute [instance] classical.prop_decidable</code></p>",
        "id": 134871395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538204178
    },
    {
        "content": "<p>I don't think you need classical anything for this definition, if I read it correctly</p>",
        "id": 134871454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538204312
    },
    {
        "content": "<p>You can do without classical reasoning but you need to implement a search</p>",
        "id": 134871499,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538204404
    },
    {
        "content": "<p>Also the <code>then</code> part is not type correct</p>\n<div class=\"codehilite\"><pre><span></span>import data.set.finite data.equiv.encodable\n\ndef get_sample_or_zero (α : Type) [decidable_eq α] [has_zero α] : Π (m), vec (fin m) α  → α\n| m V := if h : ∃ i, V i = 0 then V (encodable.choose h) else 0\n</pre></div>",
        "id": 134871527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538204500
    },
    {
        "content": "<p>note the <code>V</code> in the middle</p>",
        "id": 134871530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538204508
    },
    {
        "content": "<p>then again, this function is always 0, so maybe that's not what you meant</p>",
        "id": 134871576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538204546
    },
    {
        "content": "<p>but if this returns a <code>fin m</code> then you have a problem since <code>0 : fin m</code> only holds if <code>m&gt;0</code></p>",
        "id": 134871588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538204583
    },
    {
        "content": "<p>wasn't ssreflect's pick function something like this?</p>\n<div class=\"codehilite\"><pre><span></span>noncomputable def pick (α : Type*) : option α :=\nby haveI := classical.dec (nonempty α); exact\nif h : nonempty α then some (classical.choice h) else none\n</pre></div>",
        "id": 134871701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538204768
    },
    {
        "content": "<p>SSReflects pick is: \"[pick x in A] == Some x, with x \\in A, or None if A is empty. \"</p>",
        "id": 134871708,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538204835
    },
    {
        "content": "<p>Here the definition: <a href=\"http://ssr.msr-inria.inria.fr/doc/ssreflect-1.5/Ssreflect.fintype.html\" target=\"_blank\" title=\"http://ssr.msr-inria.inria.fr/doc/ssreflect-1.5/Ssreflect.fintype.html\">http://ssr.msr-inria.inria.fr/doc/ssreflect-1.5/Ssreflect.fintype.html</a></p>",
        "id": 134871709,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538204857
    },
    {
        "content": "<p>right, isn't that what I wrote?</p>",
        "id": 134871756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538204961
    },
    {
        "content": "<p>Honestly, I need some more time to think about these solutions.</p>",
        "id": 134871758,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205002
    },
    {
        "content": "<p>I mostly was concerned about the then path and therefore just returned zero in the else.</p>",
        "id": 134871804,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205017
    },
    {
        "content": "<p>Maybe <code>A</code> is a subset of a type instead of just a type; in that case you have</p>\n<div class=\"codehilite\"><pre><span></span>noncomputable def pick {α} (p : α → Prop) : option α :=\nby haveI := classical.dec (∃ a, p a); exact\nif h : ∃ a, p a then some (classical.some h) else none\n</pre></div>",
        "id": 134871810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538205047
    },
    {
        "content": "<p>To give some context, what I actually want to write is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Fixpoint</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"k\">&#39;</span><span class=\"n\">M_</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">→</span> <span class=\"k\">&#39;</span><span class=\"n\">M_m</span> <span class=\"err\">×</span> <span class=\"k\">&#39;</span><span class=\"n\">M_n</span> <span class=\"err\">×</span> <span class=\"kt\">nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"o\">|</span> <span class=\"o\">_.+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">_.+</span><span class=\"mi\">1</span> <span class=\"err\">⇒</span> <span class=\"k\">fun</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"k\">&#39;</span><span class=\"n\">M_</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"o\">_,</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"o\">_)</span> <span class=\"err\">⇒</span>\n    <span class=\"k\">if</span> <span class=\"o\">[</span><span class=\"n\">pick</span> <span class=\"n\">ij</span> <span class=\"o\">|</span> <span class=\"n\">A</span> <span class=\"n\">ij</span><span class=\"o\">.</span><span class=\"mi\">1</span> <span class=\"n\">ij</span><span class=\"o\">.</span><span class=\"mi\">2</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"k\">is</span> <span class=\"n\">Some</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"k\">let</span> <span class=\"n\">A1</span> <span class=\"o\">:=</span> <span class=\"n\">xrow</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">xcol</span> <span class=\"n\">j</span> <span class=\"mi\">0</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">ursubmx</span> <span class=\"n\">A1</span> <span class=\"k\">in</span> <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">^-</span><span class=\"mi\">1</span> <span class=\"o\">*:</span> <span class=\"n\">dlsubmx</span> <span class=\"n\">A1</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"o\">(</span><span class=\"n\">drsubmx</span> <span class=\"n\">A1</span> <span class=\"o\">-</span> <span class=\"n\">v</span> <span class=\"err\">×</span><span class=\"n\">m</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"o\">(</span><span class=\"n\">xrow</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">block_mx</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"n\">v</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">xcol</span> <span class=\"n\">j</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">block_mx</span> <span class=\"n\">a</span><span class=\"o\">%:</span><span class=\"n\">M</span> <span class=\"n\">u</span> <span class=\"mi\">0</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">r</span><span class=\"o\">.+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">%:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">%:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">%</span><span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">|</span> <span class=\"o\">_,</span> <span class=\"o\">_</span> <span class=\"err\">⇒</span> <span class=\"k\">fun</span> <span class=\"o\">_</span> <span class=\"err\">⇒</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">%:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">%:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">%</span><span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"k\">end</span><span class=\"o\">.</span>\n</pre></div>",
        "id": 134871856,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205125
    },
    {
        "content": "<p>I am just taking baby steps, to learn these different things.</p>",
        "id": 134871864,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205151
    },
    {
        "content": "<p>Will get back to try to play with your pick function and see how it can be used here.</p>",
        "id": 134871874,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205224
    },
    {
        "content": "<p>Thanks for the pointers.</p>",
        "id": 134871875,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205227
    },
    {
        "content": "<p>Maybe the nicest interface for that pick match is something like this:</p>\n<div class=\"codehilite\"><pre><span></span>@[elab_as_eliminator]\nnoncomputable def {u} classical.exists_cases (p : α → Prop) {C : Sort u} (H0 : C) (H : ∀ a, p a → C) : C :=\nif h : ∃ a, p a then H (classical.some h) (classical.some_spec h) else H0\n</pre></div>",
        "id": 134871976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538205404
    },
    {
        "content": "<p>In your context it would be something like <code>classical.exists_cases (λ ij, A ij.1 ij.2 ≠ 0) (1, 1, 0) $ λ ⟨i, j⟩, ...</code></p>",
        "id": 134872035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538205491
    },
    {
        "content": "<p>OK. Even more things to try to integrate.</p>",
        "id": 134872038,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205539
    },
    {
        "content": "<p>One last question. In the end I want a gaussian elimination which can compute solutions.</p>",
        "id": 134872058,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205592
    },
    {
        "content": "<p>Am I on a wrong track here? Aka, can this evolve to something computable eventually?</p>",
        "id": 134872104,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205628
    },
    {
        "content": "<p>Then you're going to need to specialize that function so that you can implement it using a search function.</p>",
        "id": 134872106,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538205646
    },
    {
        "content": "<p>Not using the function I just gave you</p>",
        "id": 134872108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538205653
    },
    {
        "content": "<p>You want to use <code>encodable.choose</code> to do choicy stuff decidably</p>",
        "id": 134872120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538205686
    },
    {
        "content": "<p>What exactly is the difference.</p>",
        "id": 134872133,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205722
    },
    {
        "content": "<p>Basically any function with <code>classical</code> in the name will not be computable, even if the inputs are</p>",
        "id": 134872179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538205748
    },
    {
        "content": "<p>ssreflect seems to be a hybrid of both.</p>",
        "id": 134872180,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205749
    },
    {
        "content": "<p>That's what I know.</p>",
        "id": 134872183,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205755
    },
    {
        "content": "<p><code>ssreflect</code> essentially embeds <code>encodable.choose</code> very low in their algebraic hierarchy</p>",
        "id": 134872187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538205776
    },
    {
        "content": "<p>I see. So the counterpart in lean would be a \"pick based on 'encodable.choose'?\"</p>",
        "id": 134872194,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205799
    },
    {
        "content": "<p>yes</p>",
        "id": 134872195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538205806
    },
    {
        "content": "<p>I see.</p>",
        "id": 134872196,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205810
    },
    {
        "content": "<p>Can I also get the nice { (i j) | ... } interface for such a pick?</p>",
        "id": 134872203,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205828
    },
    {
        "content": "<p>You can pattern match on <code>i, j</code> in the then branch</p>",
        "id": 134872244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538205854
    },
    {
        "content": "<p>like at the end of my example <code>λ ⟨i, j⟩, ...</code></p>",
        "id": 134872247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538205869
    },
    {
        "content": "<p>OK.</p>",
        "id": 134872260,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205913
    },
    {
        "content": "<p>I think <code>[pick ij | A ij.1 ij.2 != 0]</code> is some composite notation which is basically <code>pick (λ ij, A ij.1 ij.2 != 0)</code></p>",
        "id": 134872262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538205920
    },
    {
        "content": "<p>But your example uses classical.choice</p>",
        "id": 134872263,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205922
    },
    {
        "content": "<p>You can swap out <code>classical.some</code> with <code>encodable.choose</code> for great good</p>",
        "id": 134872270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538205945
    },
    {
        "content": "<p>I see.</p>",
        "id": 134872271,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205951
    },
    {
        "content": "<p>I think that's all I need. I will put the things together myself!</p>",
        "id": 134872312,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205972
    },
    {
        "content": "<p>Thanks a lot.</p>",
        "id": 134872314,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538205975
    },
    {
        "content": "<p>We don't have a \"choice type\" typeclass like ssreflect, so it's one or the other here</p>",
        "id": 134872321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538205990
    },
    {
        "content": "<p>but fin n is encodable so it's all good</p>",
        "id": 134872332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538206012
    },
    {
        "content": "<p>:D</p>",
        "id": 134872334,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538206016
    },
    {
        "content": "<p>Just to report back. I use for now the function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">pick_encodable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]:</span>\n<span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span><span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ij</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">x</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"k\">then</span> <span class=\"k\">let</span> <span class=\"n\">idx</span> <span class=\"o\">:=</span> <span class=\"n\">encodable</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">h</span> <span class=\"k\">in</span>\n      <span class=\"n\">some</span> <span class=\"n\">idx</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">none</span>\n</pre></div>",
        "id": 134896880,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538256670
    },
    {
        "content": "<p>This probably needs some more cleanup, but or now it does what I want.</p>",
        "id": 134896882,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538256694
    }
]