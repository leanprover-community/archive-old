[
    {
        "content": "<p>Hello everyone! <br>\nI am an undergraduate and very new to LEAN. I want to use it for graph theory. Looking in the scource code there are certain things I do not understand yet. Lets start with the following, the code is mostly copied from simple_graph/connectivity.lean</p>\n<p>'''<br>\nuniverse u </p>\n<p>namespace simple_graph<br>\nvariables {V : Type u} <br>\nvariables (G : simple_graph V) </p>\n<p>@[derive decidable_eq]<br>\ninductive walk : V → V → Type u<br>\n| nil {u : V} : walk u u<br>\n| cons {u v w: V} (h : G.adj u v) (p : walk v w) : walk u w<br>\n'''</p>\n<p>First of all, I do not quite undertsand the definition of a \"walk\". I do not see, how this is \"a finite sequence of adjacent vertices\".<br>\nSecondly, should \"nil\" and \"cons\" be seen as  attrributes of the \"walk\" ? Or how is \"|\" supposed to be read ?</p>\n<p>Any help is appreciated.</p>",
        "id": 316028714,
        "sender_full_name": "Christopher Schmidt",
        "timestamp": 1671107593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"573061\">Christopher Schmidt</span> <a href=\"#narrow/stream/113489-new-members/topic/graph.20theory.20walks/near/316028714\">said</a>:</p>\n<blockquote>\n<p>Hello everyone! <br>\nI am an undergraduate and very new to LEAN. I want to use it for graph theory. Looking in the scource code there are certain things I do not understand yet. Lets start with the following, the code is mostly copied from simple_graph/connectivity.lean</p>\n<p>'''<br>\nuniverse u </p>\n<p>namespace simple_graph<br>\nvariables {V : Type u} <br>\nvariables (G : simple_graph V) </p>\n<p>@[derive decidable_eq]<br>\ninductive walk : V → V → Type u<br>\n| nil {u : V} : walk u u<br>\n| cons {u v w: V} (h : G.adj u v) (p : walk v w) : walk u w<br>\n'''</p>\n<p>First of all, I do not quite undertsand the definition of a \"walk\". I do not see, how this is \"a finite sequence of adjacent vertices\".<br>\nSecondly, should \"nil\" and \"cons\" be seen as  attrributes of the \"walk\" ? Or how is \"|\" supposed to be read ?</p>\n<p>Any help is appreciated.</p>\n</blockquote>\n<p>The definition is inductive. It says  that walk is either:<br>\ni) A trivial walk which, given a vertex <code>u</code>, goes from a vertex <code>u</code> to itself. Therefore a walk of zero length.<br>\nii) Or built up inductively by concatenating a vertex <code>u</code> to a walk from <code>v</code> to <code>w</code>, provided you have proof that <code>u</code> is adjacent to <code>v</code> and a walk from <code>v</code> to <code>w</code>.</p>",
        "id": 316030212,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671108060
    },
    {
        "content": "<p><code>|</code> can be basically read as  <code>or</code>. You have a bunch of ways to construct a walk. You can either use the <code>nil</code> constructor to construct the empty walk \"or\"  construct a walk using <code>cons</code> constructor, from an existing walk and a proof that the next vertex you tack on is connected to one of the ends of the walk.</p>",
        "id": 316030593,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671108152
    },
    {
        "content": "<p>Ah okay got it, thank you!</p>",
        "id": 316031555,
        "sender_full_name": "Christopher Schmidt",
        "timestamp": 1671108475
    },
    {
        "content": "<p>Also, you can click this link <span aria-label=\"point right\" class=\"emoji emoji-1f449\" role=\"img\" title=\"point right\">:point_right:</span>  <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to see how to correctly format your message <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 316032538,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671108735
    },
    {
        "content": "<p>Now the following code should be properly shown.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[pattern]</span> <span class=\"kd\">abbreviation</span> <span class=\"n\">nil'</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">walk.nil</span>\n\n<span class=\"kd\">@[pattern]</span> <span class=\"kd\">abbreviation</span> <span class=\"n\">cons'</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"n\">walk.cons</span> <span class=\"n\">h</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>Reguarding that, I just wanted to know what \"@[pattern] abbreviation\" is used for? Where precisely is the difference of those abbreviations to the definition ?</p>",
        "id": 316035636,
        "sender_full_name": "Christopher Schmidt",
        "timestamp": 1671109568
    }
]