[
    {
        "content": "<p>Sorry for a long question here but... I'm trying to write some tactics that look at expressions and I am a little confused about the different types of expression. I don't quite see how the docs at <a href=\"https://leanprover.github.io/reference/expressions.html\">https://leanprover.github.io/reference/expressions.html</a> and the <code>src/meta/expr.lean</code> code itself and the expressions in regular Lean code line up. The parts I think I understand:</p>\n<ul>\n<li>A variable is something like the <code>x</code> within <code>example {x : \\N} : x &gt; 3 := sorry</code></li>\n<li>A constant is the 3</li>\n<li>A sort is what I would call a \"type\" in another programming language</li>\n<li>A metavariable is like the <code>?m_1</code> you get if you <code>apply</code> a lemma that doesn't totally unify</li>\n<li>pi, lambda, and application expressions are <code>\\all</code>, <code>\\each</code>, and function application</li>\n</ul>\n<p>Questions:</p>\n<ul>\n<li>Can metavariables be expressed in actual Lean code? Or only in things like goals?</li>\n<li>What is a \"local constant\"?</li>\n<li>An expression like <code>x = 2</code> with an infix operator, what sort of expression is that?</li>\n<li>If you define a lemma like <code>lemma foo (x : \\N) : x &lt; 1 -&gt; x &lt; 2 </code> then what sort of expression is <code>foo</code> later?</li>\n</ul>",
        "id": 213609296,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602879527
    },
    {
        "content": "<ul>\n<li>A variable is a bound variable. The internal representation of the second <code>x</code> in <code>fun x, x</code> is a variable (this will be <code>var 0</code>, google <code>de Bruijn variables</code> for more information)</li>\n<li>The <code>3</code> is not quite a constant, since it is actually a more complicated expression. But every definition, theorem, inductive (so roughly everything in the library with a name) is a constant</li>\n<li>A sort is a <em>universe</em> of types. <code>nat</code> is a type, but not a sort.</li>\n<li>Metavariables can not occur in definitions or theorems accepted by the Lean kernel. They only exist in incomplete definitions/theorems.</li>\n<li>With <code>\\each</code> you probably mean <code>\\la</code>.</li>\n<li>A local constant is the <code>x</code> in your first example. In a goal, the lines before the <code>⊢</code> is a list of local constants</li>\n<li>The expression <code>x = 2</code> is a function application of the constant <code>eq</code> applied to an implicit argument, and then the variable <code>x</code> and the expression <code>2</code>. See the goal here. </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Try playing around with other <code>pp</code> options. You can see the options when tab-completing <code>set_option pp.</code> (or you can type <code>#help options</code> and search for <code>pp.</code>)</p>\n<ul>\n<li>If <code>foo</code> occurs in an expression, it is the constant <code>expr.const `foo []</code>. In metaprogramming you can treat it as a <code>declaration</code>: <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/declaration.lean\">https://github.com/leanprover-community/lean/blob/master/library/init/meta/declaration.lean</a></li>\n</ul>",
        "id": 213616511,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602883786
    },
    {
        "content": "<p>okay, thanks! the <code>set_option pp.all</code> is quite helpful. why is <code>∀</code> its own special language thing and <code>∃</code> is just a normal old function? I had guessed they would be handled symmetrically</p>",
        "id": 213618668,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602885342
    },
    {
        "content": "<p>\\forall is just the same as Pi, right? That's some inbuilt thing in the dependent type theory logic. \\exists can be built from other stuff, so it's built from other stuff.</p>",
        "id": 213618765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602885404
    },
    {
        "content": "<p>why not build <code>∀ x : foo x</code> as <code>¬ ∃ x : ¬ foo x</code> then</p>",
        "id": 213618930,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602885518
    },
    {
        "content": "<p>or is it like, you have to have one be primal, and <code>∀</code> is the one</p>",
        "id": 213618957,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602885542
    },
    {
        "content": "<p>I think this is just an implementation issue. The answer to \"why is it like this in Lean\" is \"because Lean uses dependent type theory and Pi is a primitive and Sigma isn't in dependent type theory\". One could imagine other logics where this wasn't the case.</p>",
        "id": 213619079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602885617
    },
    {
        "content": "<p>I'm not sure there's anything profound about it -- I mean, it wouldn't affect my usage of lean if it were implemented in a different way, as long as the tactics did the same thing</p>",
        "id": 213619129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602885660
    },
    {
        "content": "<p>OK</p>",
        "id": 213619249,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602885748
    },
    {
        "content": "<p>I guess one should take what I say about implementation issues with a pinch of salt though -- for me, if you have a lemma saying \"forall x, foo x iff not exists x not foo x\" then I can rewrite that lemma and who cares if it's definitionally true or not. People writing tactics might care a lot more about definitional equality.</p>",
        "id": 213619330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602885838
    },
    {
        "content": "<p>Well you do care because the lemma really starts \"forall foo, ...\" and to even apply it you need to know how to deal with a forall</p>",
        "id": 213620058,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602886542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113489-new-members/topic/different.20types.20of.20Lean.20expressions/near/213618930\">said</a>:</p>\n<blockquote>\n<p>why not build <code>∀ x : foo x</code> as <code>¬ ∃ x : ¬ foo x</code> then</p>\n</blockquote>\n<p><code>¬ P</code> is <code>P -&gt; false</code> i.e. <code>∀ x : P, false</code></p>",
        "id": 213620159,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602886610
    },
    {
        "content": "<p>aah yes, even -&gt; is defined using pi.</p>",
        "id": 213620296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602886721
    },
    {
        "content": "<p>that is certainly not what I expected but I suppose it is logical</p>",
        "id": 213620640,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602887046
    },
    {
        "content": "<p>I think you can simulate dependent Pi types with dependent Sigma types and plain old (nondependent) functions, right?</p>",
        "id": 213623377,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602889627
    },
    {
        "content": "<p>(Of course, I'm not saying this is a good thing to do.)</p>",
        "id": 213623904,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602890241
    }
]