[
    {
        "content": "<p>Exploring mathlib I found the following proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mul_self_pos</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">;</span>\n   <span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">mul_pos_of_neg_of_neg</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mul_pos</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>What is that syntax in the last line? I've never seen a tactic block surrounded by square brackets before.</p>",
        "id": 207078796,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597596498
    },
    {
        "content": "<p>There are three goals and I guess each tactic in the list solves one goal</p>",
        "id": 207078876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597596620
    },
    {
        "content": "<p><code>tac0; [tac1, tac2, ... ]</code> indeed applies <code>tac0</code> and then applies <code>tac1</code> to the first subgoal generated by <code>tac0</code>, <code>tac2</code> to the second subgoal, and so on. I think it fails if you give an incorrect number of tactics.</p>",
        "id": 207078919,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597596711
    },
    {
        "content": "<p>Coq has similar syntax, but theirs has more bells and whistles than Lean's.</p>",
        "id": 207078980,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597596786
    },
    {
        "content": "<p>I see! Thanks!</p>",
        "id": 207079032,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597596872
    },
    {
        "content": "<p>Can I suggest not using it much? It seems like an over-strenuous effort to reduce LOC, compared to just a <code>begin ... end</code> block and some braces. :-)</p>",
        "id": 207098416,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597626382
    },
    {
        "content": "<p>I agree with Scott.<br>\nI myself only use it in the form <code>t0; [t1, t2, t3]; t4</code>. This is not the best proof style, but in some boring proofs it seems fine.</p>",
        "id": 207100701,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597630324
    },
    {
        "content": "<p>If it's so discouraged, would it be worth removing it from the language altogether?</p>",
        "id": 207115597,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597650655
    },
    {
        "content": "<p>Since this was mentioned here I've been noticing that it's pretty useful actually.</p>",
        "id": 207851040,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598279980
    }
]