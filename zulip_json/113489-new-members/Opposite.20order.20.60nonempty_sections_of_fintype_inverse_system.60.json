[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461830\">@Rémi Bottinelli</span>  It's easier to derive the desired result from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonempty_sections_of_fintype_cofiltered_system\">docs#nonempty_sections_of_fintype_cofiltered_system</a> by mimicking the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonempty_sections_of_fintype_inverse_system/src\">src#nonempty_sections_of_fintype_inverse_system</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.category.Top.limits</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_directed</span> <span class=\"n\">J</span> <span class=\"n\">ge</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nonempty_sections_of_fintype_inverse_system'</span>\n <span class=\"o\">[</span><span class=\"n\">fin</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"n\">j</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">nempty</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"n\">j</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">F.sections.nonempty</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">is_empty_or_nonempty</span> <span class=\"n\">J</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">is_empty_elim</span><span class=\"o\">,</span> <span class=\"n\">is_empty_elim</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nonempty_sections_of_fintype_cofiltered_system</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 297042741,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662247099
    },
    {
        "content": "<p>I think the error you get is due to the category structure you get from <br>\n<code>Joppreo : preorder Jᵒᵖ ⟿ category Jᵒᵖ</code> is different from<br>\n<code>preorder J ⟿ category J ⟿ category Jᵒᵖ</code>, <br>\nwhich is known as a diamond.<br>\n(normally you would get the opposite preorder using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual\">docs#order_dual</a> Jᵒᵈ instead of Jᵒᵖ, but then you won't be able to use <code>category_theory.op_op</code>.)</p>",
        "id": 297042928,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662247326
    }
]