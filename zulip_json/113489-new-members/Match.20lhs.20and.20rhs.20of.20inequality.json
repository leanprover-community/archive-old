[
    {
        "content": "<p>Hello! Currently I am trying to formalizing some inequality exercises involving amgm. Here is the first draft that works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.mean_inequalities</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">algebra_amgm2_a2oncpc2onbpb2onaleqa3conb3pb3aonc3pc3bona3</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha₃</span> <span class=\"o\">:=</span> <span class=\"n\">pow_pos</span> <span class=\"n\">h₀.1</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb₃</span> <span class=\"o\">:=</span> <span class=\"n\">pow_pos</span> <span class=\"n\">h₀.2.1</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc₃</span> <span class=\"o\">:=</span> <span class=\"n\">pow_pos</span> <span class=\"n\">h₀.2.2</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">hb₃</span> <span class=\"n\">h₀.1</span><span class=\"o\">)</span> <span class=\"n\">hc₃</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">hc₃</span> <span class=\"n\">h₀.2.1</span><span class=\"o\">)</span> <span class=\"n\">ha₃</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">ha₃</span> <span class=\"n\">h₀.2.2</span><span class=\"o\">)</span> <span class=\"n\">hb₃</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:=</span> <span class=\"n\">real.geom_mean_le_arith_mean2_weighted</span> <span class=\"n\">h₄</span> <span class=\"n\">h₄</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₇</span> <span class=\"o\">:=</span> <span class=\"n\">real.geom_mean_le_arith_mean2_weighted</span> <span class=\"n\">h₄</span> <span class=\"n\">h₄</span> <span class=\"n\">h₁</span> <span class=\"n\">h₃</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₈</span> <span class=\"o\">:=</span> <span class=\"n\">real.geom_mean_le_arith_mean2_weighted</span> <span class=\"n\">h₄</span> <span class=\"n\">h₄</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₉</span> <span class=\"o\">:=</span> <span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">add_le_add</span> <span class=\"n\">h₇</span> <span class=\"n\">h₈</span><span class=\"o\">)</span> <span class=\"n\">h₆</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h₆</span> <span class=\"n\">h₇</span> <span class=\"n\">h₈</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n   <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n   <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">real.mul_rpow</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_add.add</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_add.add</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">pow_can₁</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">):</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">{</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">h₀.1</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h₀.2.2</span><span class=\"o\">)],</span>\n      <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"n\">pow_can₁</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">pow</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">],</span>\n      <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">hb₃</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">hc₃</span><span class=\"o\">,</span> <span class=\"n\">pow_succ'</span> <span class=\"n\">c</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">h₀.2.2</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel_left</span><span class=\"o\">],</span>\n      <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">pow_can₂</span><span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">):</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">{</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">h₀.2.2</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h₀.2.1</span><span class=\"o\">)],</span>\n      <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"n\">pow_can₂</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">pow</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">],</span>\n      <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">ha₃</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">hb₃</span><span class=\"o\">,</span> <span class=\"n\">pow_succ'</span> <span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">h₀.2.1</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel_left</span><span class=\"o\">],</span>\n      <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">pow_can₃</span><span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">):</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">{</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">h₀.2.1</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h₀.1</span><span class=\"o\">)],</span>\n      <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"n\">pow_can₃</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">pow</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">],</span>\n      <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">hc₃</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">hb₃</span><span class=\"o\">,</span> <span class=\"n\">pow_succ'</span> <span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">h₀.1</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel_left</span><span class=\"o\">],</span>\n      <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n    <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">+</span>\n    <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n      <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">rhs</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The roadmap is to construct an inequality forwardly (h₉) then prove its lhs and rhs can simplify to the goal's.  I have to state explicitly the lhs and rhs here because I didn't find any tactic that helps with this kind of situation, something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trans_le_trans</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>can help me use the <code>refine</code> tactic to generate 2 subgoals of equalities. But I can only find tactic for 1 equality like <code>eq.trans_le</code>. Also, my proof is very forward reasony so I wonder if you have any advice on the proof itself.</p>",
        "id": 242178896,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1623316653
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trans_le_trans</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 242179690,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623317144
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_le.le.trans_eq\">docs#has_le.le.trans_eq</a>?</p>",
        "id": 242189437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623323244
    },
    {
        "content": "<p><code>j.symm.le.trans (h.trans k.le)</code> is a short term-mode proof</p>",
        "id": 242189582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623323334
    },
    {
        "content": "<p><code>j.symm.le</code> is <code>j.ge</code></p>",
        "id": 242190045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623323656
    },
    {
        "content": "<p>But I guess we don't get a <code>trans</code> then?</p>",
        "id": 242190072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623323678
    },
    {
        "content": "<p>Of course <code>by rwa [j, k] at h</code> also works</p>",
        "id": 242190205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623323764
    },
    {
        "content": "<p>I find that what is below is closer to how I think of it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trans_le_trans</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span>  <span class=\"c1\">--  I know the correct inequality is this one</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">j.symm</span> <span class=\"o\">},</span>  <span class=\"c1\">-- now fix it!</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">k.symm</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 242190310,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623323878
    },
    {
        "content": "<p>For increased opacity, this also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">eq.symm</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n</code></pre></div>",
        "id": 242190455,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623323968
    },
    {
        "content": "<p>Although, while the term mode proofs that have been given earlier are probably closer to mathlib proofs (and also how I would write them), using <code>convert</code> is often more \"mathematical\".</p>",
        "id": 242190565,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623324050
    },
    {
        "content": "<p>In particular, my impression is that the role of <code>h</code> is <em>fundamental</em>, while the extra equalities are <em>noise</em>.  Beginning a proof with <code>convert h</code> is bringing the attention to what matters.  After that, what is left is figuring out that you do indeed have the pieces of the puzzle.</p>",
        "id": 242190768,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623324161
    },
    {
        "content": "<p>You can also use the equation compiler for this type of thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trans_le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 242192174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623325003
    },
    {
        "content": "<p>But <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#linarith\">tactic#linarith</a> is the best \"I don't care about this stuff just solve it for me\" solution.</p>",
        "id": 242192287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623325072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Match.20lhs.20and.20rhs.20of.20inequality/near/242192174\">said</a>:</p>\n<blockquote>\n<p>You can also use the equation compiler for this type of thing:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trans_le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>could you please explain more about this syntax? I don't quite understand what's going on here (especially the <code>|</code> and the <code>,</code> after <code>(h : a ≤ b)</code>)</p>",
        "id": 242192555,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1623325231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408484\">@Kunhao Zheng</span> Note that the is now a <code>\\forall</code> on the first line of the lemma</p>",
        "id": 242192615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623325285
    },
    {
        "content": "<p>So the <code>,</code> is just <code>\\forall bla, blabla</code></p>",
        "id": 242192628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623325296
    },
    {
        "content": "<p>Also possible term mode is to use eq.subst, I think (k.subst (j.subst h)) will work. The rw triangle.</p>",
        "id": 242193022,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623325565
    },
    {
        "content": "<p>Regarding the proof and reverse reasoning, untested, but after you prove that the cubes are nonnegative, can you try field_simp? That should multiply everything out</p>",
        "id": 242193308,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623325755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Match.20lhs.20and.20rhs.20of.20inequality/near/242193308\">said</a>:</p>\n<blockquote>\n<p>Regarding the proof and reverse reasoning, untested, but after you prove that the cubes are nonnegative, can you try field_simp? That should multiply everything out</p>\n</blockquote>\n<p>Now my proof looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.mean_inequalities</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trans_le_trans</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">k.subst</span><span class=\"o\">(</span><span class=\"n\">j.subst</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_two_pow_half</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">algebra_amgm2_a2oncpc2onbpb2onaleqa3conb3pb3aonc3pc3bona3</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha₃</span> <span class=\"o\">:=</span> <span class=\"n\">pow_pos</span> <span class=\"n\">h₀.1</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb₃</span> <span class=\"o\">:=</span> <span class=\"n\">pow_pos</span> <span class=\"n\">h₀.2.1</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc₃</span> <span class=\"o\">:=</span> <span class=\"n\">pow_pos</span> <span class=\"n\">h₀.2.2</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">hb₃</span> <span class=\"n\">h₀.1</span><span class=\"o\">)</span> <span class=\"n\">hc₃</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">hc₃</span> <span class=\"n\">h₀.2.1</span><span class=\"o\">)</span> <span class=\"n\">ha₃</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">ha₃</span> <span class=\"n\">h₀.2.2</span><span class=\"o\">)</span> <span class=\"n\">hb₃</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:=</span> <span class=\"n\">real.geom_mean_le_arith_mean2_weighted</span> <span class=\"n\">h₄</span> <span class=\"n\">h₄</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₇</span> <span class=\"o\">:=</span> <span class=\"n\">real.geom_mean_le_arith_mean2_weighted</span> <span class=\"n\">h₄</span> <span class=\"n\">h₄</span> <span class=\"n\">h₁</span> <span class=\"n\">h₃</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₈</span> <span class=\"o\">:=</span> <span class=\"n\">real.geom_mean_le_arith_mean2_weighted</span> <span class=\"n\">h₄</span> <span class=\"n\">h₄</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₉</span> <span class=\"o\">:=</span> <span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">add_le_add</span> <span class=\"n\">h₇</span> <span class=\"n\">h₈</span><span class=\"o\">)</span> <span class=\"n\">h₆</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h₆</span> <span class=\"n\">h₇</span> <span class=\"n\">h₈</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">trans_le_trans</span> <span class=\"n\">h₉</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">real.mul_rpow</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two_pow_half</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pow_two_pow_half</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pow_two_pow_half</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_add.add</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_add.add</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">refine</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">pow</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">hb₃</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">hc₃</span><span class=\"o\">,</span> <span class=\"n\">pow_succ'</span> <span class=\"n\">c</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">h₀.2.2</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel_left</span><span class=\"o\">],</span>\n      <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">refine</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">pow</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">ha₃</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">hb₃</span><span class=\"o\">,</span> <span class=\"n\">pow_succ'</span> <span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">h₀.2.1</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel_left</span><span class=\"o\">],</span>\n      <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">refine</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">pow</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">hc₃</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">hb₃</span><span class=\"o\">,</span> <span class=\"n\">pow_succ'</span> <span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">h₀.1</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel_left</span><span class=\"o\">],</span>\n      <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">div_pos</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">h₀.2.1</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h₀.1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">div_pos</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">h₀.2.2</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h₀.2.1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">div_pos</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">h₀.1</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h₀.2.2</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The line of <code>field_simp [ne_of_gt hb₃, ne_of_gt hc₃, pow_succ' c 2, ne_of_gt h₀.2.2, mul_div_cancel_left],</code> helps me out to convert an equality of <code>b ^ 3 * a / c ^ 3 * (a ^ 3 * c / b ^ 3) = (a ^ 2 / c) ^ 2</code> to <code>b ^ 3 * a * (a ^ 3 * c) * c ^ 2 = (a ^ 2) ^ 2 * (c ^ 2 * c * b ^ 3)</code>. Not sure if this you're referring to?</p>",
        "id": 242194580,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1623326453
    },
    {
        "content": "<p>Just wondering: what's with the absurdly long theorem name? Mathlib theorem names tend to encode the formal statement of the theorem and I understand that you want to follow that convention, however I think this is very extreme.</p>",
        "id": 242197004,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623327783
    },
    {
        "content": "<p>As a side note, I tend to call everything a lemma because I'm not a mathematician, LOL. Only mathematicians can prove theorems. I'm just a mere programmer knowing absolutely nothing about proper mathematics.</p>",
        "id": 242197215,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623327898
    },
    {
        "content": "<p>Even though I know how to prove this inequality <span aria-label=\"clown\" class=\"emoji emoji-1f921\" role=\"img\" title=\"clown\">:clown:</span></p>",
        "id": 242197240,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623327917
    },
    {
        "content": "<p>you won't like Lean 4 then :-)</p>",
        "id": 242197245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623327920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/113489-new-members/topic/Match.20lhs.20and.20rhs.20of.20inequality/near/242197004\">said</a>:</p>\n<blockquote>\n<p>Just wondering: what's with the absurdly long theorem name? Mathlib theorem names tend to encode the formal statement of the theorem and I understand that you want to follow that convention, however I think this is very extreme.</p>\n</blockquote>\n<p>Somehow that's a naming convention we adapt from the metamath system to keep it aligned with statements written in that system (<a href=\"https://github.com/openai/miniF2F\">https://github.com/openai/miniF2F</a>), I admit it's a bit tedious and longer but you could know what it tells us by reading the name. I once wanted to come up with another naming convention but I fell back into it:( so if you have any suggestions I will be very happy!</p>",
        "id": 242198206,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1623328432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408484\">@Kunhao Zheng</span> The mathlib name would probably be <code>sq_div_add_sq_div_add_sq_div_le</code></p>",
        "id": 242198960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623328781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408484\">@Kunhao Zheng</span> When you have a goal that can be closed simply by substituting variables, try <code>cc</code>. The <code>cc</code> (congruence closure) tactic is specifically designed for this.</p>",
        "id": 242204510,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623331337
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trans_le_trans</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cc</span>\n</code></pre></div>",
        "id": 242204632,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623331405
    },
    {
        "content": "<p>The congruence closure tactic is based on the union-find data structure, which is very popular in competitive programming. You are from China, right? I know Chinese people are competitive programming gods!</p>",
        "id": 242204900,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623331540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/113489-new-members/topic/Match.20lhs.20and.20rhs.20of.20inequality/near/242204900\">said</a>:</p>\n<blockquote>\n<p>The congruence closure tactic is based on the union-find data structure, which is very popular in competitive programming. You are from China, right? I know Chinese people are competitive programming gods!</p>\n</blockquote>\n<p>Thank you for the hint! You're right. Though I have a CS background but I'm not so good at the competition <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 242232289,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1623341827
    }
]