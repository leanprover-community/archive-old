[
    {
        "content": "<p>I've heard about non-terminal <code>simp</code>s, but is there a similar rule for <code>ring</code>s ? Its mentioned in <a href=\"https://github.com/leanprover-community/mathlib/issues/3801\">#3801</a> and I thought I'd ask here. <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> looked through mathlib and saw it never happened.</p>",
        "id": 207136074,
        "sender_full_name": "James Arthur",
        "timestamp": 1597666861
    },
    {
        "content": "<p>non-terminal rings are also uncool I think. Why would you need one?</p>",
        "id": 207136254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597666986
    },
    {
        "content": "<p>I suspect it's less brittle - <code>simp</code> output could change as a result of simp lemmas changing (and maybe imports?), but I think <code>ring</code> output will only change if the tactic itself changes. They both do have the issue that the output is not clearly specified, though</p>",
        "id": 207136345,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1597667047
    },
    {
        "content": "<p>I don't remember where, but I've had cases where I needed to do <code>ring, ring</code> to finish</p>",
        "id": 207136379,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1597667079
    },
    {
        "content": "<p><code>ring</code> uses <code>simp</code> I believe, which is probably why it's not an ideal tactic if you're not finishing. The <code>ring, ring</code> thing is a bug, this is to do with metavariables</p>",
        "id": 207136407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597667100
    },
    {
        "content": "<p>Oh, does it? That makes sense, then</p>",
        "id": 207136456,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1597667141
    },
    {
        "content": "<p>I might be wrong, but I think it uses <code>simp</code> to try and tidy up if it doesn't close the goal</p>",
        "id": 207136530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597667176
    },
    {
        "content": "<p>If its bad, I can refactor code. I kind of used it as a short cut not to write out a load of rewrites. Thanks, I'll go refactor some code.</p>",
        "id": 207137656,
        "sender_full_name": "James Arthur",
        "timestamp": 1597667963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"304228\">@James Arthur</span> there's always a smarter way to use less automation:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">special_functions</span><span class=\"bp\">.</span><span class=\"n\">trigonometric</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">private</span> <span class=\"kn\">lemma</span> <span class=\"n\">aux_lemma</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sqrt</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sqrt</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">eq_one_div_of_mul_eq_one</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">add_nonneg</span> <span class=\"n\">zero_le_one</span> <span class=\"o\">(</span><span class=\"n\">pow_two_nonneg</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">sub_eq_neg_add</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_self_sub_mul_self</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_self_sqrt</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207139184,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597668875
    },
    {
        "content": "<p><code>ring</code> actually has a separate tidying step, not <code>simp</code>, that is done if it can't close the goal. The idea is to write the polynomial more plainly so you can see why it's not zero. It is intended primarily for debugging your proof, I wouldn't suggest using it non-terminally.</p>",
        "id": 207155929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597677307
    },
    {
        "content": "<p>ring uses the core simplifier routine internally but not anything that makes it <code>simp</code>, i.e. the default simp set</p>",
        "id": 207156337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597677421
    }
]