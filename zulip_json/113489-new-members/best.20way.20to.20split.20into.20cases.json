[
    {
        "content": "<p>I am trying to prove a theorem which splits into cases based on the degree of a polynomial. In particular, if <code>f</code> is my polynomial, I have seperate cases for if <code>degree f</code> is <code>⊥</code>, <code>0</code>, <code>1</code>, or <code>2</code>, and <code>n+3</code>, the final case requiring an induction. I have tried a few different approaches and haven't figured out a good way:</p>\n<ul>\n<li>the <code>cases</code> tactic replaces the instances of <code>degree f</code> in my goal, instead of giving me a term of type <code>degree f = ⊥</code> or <code>degree f = 0</code>, etc. I really need the term of type <code>degree f = ...</code>, so I tried hacking it in there with a variable (e.g. <code>let n = degree f, have  n = degree f, by simp [f], cases ...</code>) but I still wasn't able to figure out how to finish the proof this way</li>\n<li>the <code>by_cases</code> tactic gives me the proposition I want, but at the end I am left with a bunch of <code>¬degree f = ...</code> assumptions, making for a messy proof by induction</li>\n<li>if I try to switch into term mode and using a match statement like <code>exact match ... end</code> then Lean can't figure out any of the placeholders</li>\n</ul>\n<p>Overall, it just feels clunky to not be able to match in tactic mode, instead having to eliminate on the <code>option</code> type and then three times in the match--is there a better way to do this?</p>",
        "id": 203464739,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1594349667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"297832\">Jack J Garzella</span> <a href=\"#narrow/stream/113489-new-members/topic/best.20way.20to.20split.20into.20cases/near/203464739\">said</a>:</p>\n<blockquote>\n<ul>\n<li>the <code>by_cases</code> tactic gives me the proposition I want, but at the end I am left with a bunch of <code>¬degree f = ...</code> assumptions, making for a messy proof by induction</li>\n</ul>\n</blockquote>\n<p>you can probably prove <code>3 \\le degree f</code> by <code>omega</code></p>",
        "id": 203465197,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594350310
    },
    {
        "content": "<p>posting your code would help a lot here</p>",
        "id": 203465209,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594350357
    },
    {
        "content": "<p>perhaps <code>by_cases h : degree f \\le 2</code>, and then <code>interval_cases h</code>?</p>",
        "id": 203466158,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594351694
    },
    {
        "content": "<p>You might also find it helpful to introduce a new <code>n:nat</code>, with <code>h : n = degree f</code>, and then do induction on <code>n</code>.</p>",
        "id": 203466186,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594351794
    },
    {
        "content": "<p>Possibly with some <code>unfreezingI</code> magic</p>",
        "id": 203510429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594390026
    }
]