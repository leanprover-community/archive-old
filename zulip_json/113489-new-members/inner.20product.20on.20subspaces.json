[
    {
        "content": "<p>I want to have 'inheritance' of the real inner product structure of my E , but run into a problem I cant figure out. Here is my context and the code for defining the inner product from .core:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.real_inner_product</span>\n<span class=\"c1\">-- import data.complex.is_R_or_C</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span>  <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"n\">inner_product_space.of_core</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">inner</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">,(</span><span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">⟫</span><span class=\"o\">,</span>\n  <span class=\"n\">comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inner_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">,</span>\n  <span class=\"n\">nonneg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">inner_self_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">definite</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">inner_self_eq_zero.mp</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,},</span>\n  <span class=\"n\">add_left</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">inner_add_left</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_left</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">inner_smul_left</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n<p>I get the following error message in vscode, with the <code>:</code> after <code>instance</code> highlilghted as the offender:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">name</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"n\">provided</span> <span class=\"n\">explicitly</span>\n</code></pre></div>\n\n<p>Is there an alternative, more straightforward way to have submodules recognized as inner product spaces?</p>",
        "id": 212401459,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1601975123
    },
    {
        "content": "<p>According to that error message, all you have to do is provide an explicit name, like<br>\n<code>instance submodule_inner_product_space : inner_product_space K := ...</code></p>",
        "id": 212401833,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601975384
    },
    {
        "content": "<p><code>instance</code> is like a <code>def</code> that doesn't always need a name and that lets the typeclass resolution system know this definition exists.</p>",
        "id": 212401975,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601975461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212401833\">said</a>:</p>\n<blockquote>\n<p>According to that error message, all you have to do is provide an explicit name, like<br>\n<code>instance submodule_inner_product_space : inner_product_space K := ...</code></p>\n</blockquote>\n<p>Thanks. I also realized that if enclosed in a namespace, it goes away!</p>\n<p>But is this the way to ensure that in a lemma, every submodule used  has the inherited inner product? what invocation is required?</p>",
        "id": 212402794,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1601976048
    },
    {
        "content": "<p>It looks to me like the code you have already does that</p>",
        "id": 212406186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601978318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310419\">@Busiso Chisala</span> Yes, once you have defined this instance, it should be picked up automatically for all submodules!</p>\n<p>By the way, it would be nice to have this in mathlib, maybe you could contribute it!  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.normed_space\">docs#submodule.normed_space</a> does exist, but this one is missing, right? <span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 212430041,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601992248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212430041\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310419\">Busiso Chisala</span> Yes, once you have defined this instance, it should be picked up automatically for all submodules!</p>\n<p>By the way, it would be nice to have this in mathlib, maybe you could contribute it!  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.normed_space\">docs#submodule.normed_space</a> does exist, but this one is missing, right? <span class=\"user-mention silent\" data-user-id=\"266253\">Joseph Myers</span> <span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span></p>\n</blockquote>\n<p>Thanks for pointing out that @instance, which is the kind I wanted. But when I comment my code out,  Lean gets upset. Are you suggesting a way around this, using that reference?</p>\n<p>And while I have your attention: how do I 'lift' a map?  I have this scenario: submodules <code>F ≤ K</code>,  map <code>w: fin (k + 1) → ↥F </code> and <code>e: ↥K</code>. All I want is to get  <code>v: fin (k+2) → K</code> by extending <code>w</code> with the value <code>e</code> (I guess best at the end).  Why does this fail?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:(</span><span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">w</span>  <span class=\"o\">(</span><span class=\"n\">fin.pred_above</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"o\">)):</span><span class=\"n\">K</span> <span class=\"k\">else</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n</code></pre></div>\n\n<p>the returned error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">↥</span><span class=\"n\">F</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">↥</span><span class=\"n\">K</span>\n</code></pre></div>",
        "id": 212432754,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1601993424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310419\">Busiso Chisala</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212432754\">said</a>:</p>\n<blockquote>\n<p>Thanks for pointing out that @instance, which is the kind I wanted. But when I comment my code out,  Lean gets upset. Are you suggesting a way around this, using that reference?</p>\n</blockquote>\n<p>No, I wasn't suggesting that the normed space instance could replace your code for the inner product space instance (since the normed space instance is strictly weaker).  I was just checking what the closest existing thing was -- if <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.normed_space\">docs#submodule.normed_space</a> had not existed, I would have suggested you write that too and contribute them both!</p>",
        "id": 212433266,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601993629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310419\">Busiso Chisala</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212432754\">said</a>:</p>\n<blockquote>\n<p>And while I have your attention: how do I 'lift' a map?  I have this scenario: submodules <code>F ≤ K</code>,  map <code>w: fin (k + 1) → ↥F </code> and <code>e: ↥K</code>. All I want is to get  <code>v: fin (k+2) → K</code> by extending <code>w</code> with the value <code>e</code> (I guess best at the end).  Why does this fail?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:(</span><span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">w</span>  <span class=\"o\">(</span><span class=\"n\">fin.pred_above</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"o\">)):</span><span class=\"n\">K</span> <span class=\"k\">else</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n</code></pre></div>\n\n<p>the returned error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">↥</span><span class=\"n\">F</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">↥</span><span class=\"n\">K</span>\n</code></pre></div>\n\n</blockquote>\n<p>Try this:  You have a hypothesis somewhere that tells you <code>e</code> is in K, right?  Let's call it <code>he</code>.  Can you use <code> else e, ⟨e, he⟩</code>?  (An element of K is an element of E together with a witness that that element is in K.)</p>",
        "id": 212434010,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601993914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212434010\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310419\">Busiso Chisala</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212432754\">said</a>:</p>\n<blockquote>\n<p>And while I have your attention: how do I 'lift' a map?  I have this scenario: submodules <code>F ≤ K</code>,  map <code>w: fin (k + 1) → ↥F </code> and <code>e: ↥K</code>. All I want is to get  <code>v: fin (k+2) → K</code> by extending <code>w</code> with the value <code>e</code> (I guess best at the end).  Why does this fail?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:(</span><span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">w</span>  <span class=\"o\">(</span><span class=\"n\">fin.pred_above</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"o\">)):</span><span class=\"n\">K</span> <span class=\"k\">else</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n</code></pre></div>\n\n<p>the returned error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">↥</span><span class=\"n\">F</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">↥</span><span class=\"n\">K</span>\n</code></pre></div>\n\n</blockquote>\n<p>Try this:  You have a hypothesis somewhere that tells you <code>e</code> is in K, right?  Let's call it <code>he</code>.  Can you use <code> else e, ⟨e, he⟩</code>?  (An element of K is an element of E together with a witness that that element is in K.)</p>\n</blockquote>\n<p>Not really, <code>e</code> came from an existential so appears as <code>e:↥K</code>. Witness enough?  I do think the trouble is my failed 'coercion'  into K, since w certainly maps into the subspace F ... no? It fails even with humble 0 (or (0:K)) . I 'checked' the rest of the syntax (I believe) by replacing K with F as target, and e with 0. That worked, but is not what I need :(</p>",
        "id": 212435757,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1601994597
    },
    {
        "content": "<p>For debugging at least, you can try to split <code>e</code> into its pieces.  Some experiments to try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">e.1</span><span class=\"o\">,</span> <span class=\"c1\">-- or = e,</span>\n<span class=\"k\">let</span> <span class=\"n\">he'</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">\\</span><span class=\"k\">in</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">e.2</span><span class=\"o\">,</span>\n<span class=\"c1\">-- alternately,</span>\n<span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">he'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n</code></pre></div>\n\n<p>(these should be doing roughly the same thing, but I'm providing different variants in case one doesn't work)</p>",
        "id": 212436576,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601994919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212436576\">said</a>:</p>\n<blockquote>\n<p>For debugging at least, you can try to split <code>e</code> into its pieces.  Some experiments to try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">e.1</span><span class=\"o\">,</span> <span class=\"c1\">-- or = e,</span>\n<span class=\"k\">let</span> <span class=\"n\">he'</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">\\</span><span class=\"k\">in</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">e.2</span><span class=\"o\">,</span>\n<span class=\"c1\">-- alternately,</span>\n<span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">he'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n</code></pre></div>\n\n<p>(these should be doing roughly the same thing, but I'm providing different variants in case one doesn't work)</p>\n</blockquote>\n<p>Great. I have never seen <code>obtain</code> before. Very illuminating.  It splits <code>e</code> indeed. And I don't think the trouble is there.  <code>obtain ⟨w0', hw0'⟩  := (w 0),</code> reveals what I am failing to get over: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">w0'</span><span class=\"o\">:</span> <span class=\"n\">E</span>\n<span class=\"n\">hw0'</span><span class=\"o\">:</span> <span class=\"n\">w0'</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span>\n</code></pre></div>\n\n<p>I thought that by simply writing <code>(w 0):K</code> [as in the code], I could coax the value of w into the containing K ... how do I do that? recombine each value of w ...?</p>",
        "id": 212439368,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1601996070
    },
    {
        "content": "<p>At a low level, you need to combine <code>hw0': w0' ∈ F</code> with your hypothesis that <code>F</code> is a submodule of <code>K</code>. It won't just be a coercion.</p>",
        "id": 212439972,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601996337
    },
    {
        "content": "<p>At a higher level, there's likely to be some kind of <code>submodule.incl</code> or something that provides a map <code>F -&gt; K</code> for you.</p>",
        "id": 212440071,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601996375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212439972\">said</a>:</p>\n<blockquote>\n<p>At a low level, you need to combine <code>hw0': w0' ∈ F</code> with your hypothesis that <code>F</code> is a submodule of <code>K</code>. It won't just be a coercion.</p>\n</blockquote>\n<p>So just to do it the \"low level\" way for now:  now that you have a hypothesis <code>hw0': w0' ∈ F</code> and a hypothesis that  <code>F</code> is a submodule of <code>K</code>, you can probably get <code>hw0'' : w0' ∈ K</code>by library_search.</p>",
        "id": 212443169,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601997447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212443169\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212439972\">said</a>:</p>\n<blockquote>\n<p>At a low level, you need to combine <code>hw0': w0' ∈ F</code> with your hypothesis that <code>F</code> is a submodule of <code>K</code>. It won't just be a coercion.</p>\n</blockquote>\n<p>So just to do it the \"low level\" way for now:  now that you have a hypothesis <code>hw0': w0' ∈ F</code> and a hypothesis that  <code>F</code> is a submodule of <code>K</code>, you can probably get <code>hw0'' : w0' ∈ K</code>by library_search.</p>\n</blockquote>\n<p>Thank you so kindly ... I think I'm almost there. Surprisingly awkward, Isn't this an obvious thing ?</p>",
        "id": 212444606,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1601998060
    },
    {
        "content": "<p>You learn the tricks as time goes on</p>",
        "id": 212449857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602000469
    },
    {
        "content": "<p>Just keep doing projects and writing mathematics in lean and it doesn't take long to pick up the core tricks</p>",
        "id": 212450004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602000526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212449857\">said</a>:</p>\n<blockquote>\n<p>You learn the tricks as time goes on</p>\n</blockquote>\n<p>like this? ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">incl</span><span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">f2k</span> <span class=\"n\">x.2</span><span class=\"o\">⟩,</span>\n<span class=\"k\">let</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:(</span><span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">incl</span> <span class=\"o\">(</span><span class=\"n\">w</span>  <span class=\"o\">(</span><span class=\"n\">fin.pred_above</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"o\">))</span> <span class=\"k\">else</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n</code></pre></div>\n\n<p>I am dreading showing this has the desired properties :(<br>\n(where <code>f2k: F ≤ K</code>, of course)</p>",
        "id": 212454210,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602002595
    },
    {
        "content": "<p>That looks like a statement we would definitely want in mathlib! If you're planning to PR it, I would suggest doing it for <code>submodule 𝕜 E</code> where <code>𝕜</code> is an <code>[is_R_or_C 𝕜]</code>; this way we get the statement for both the real and complex case at the same time.</p>",
        "id": 212475279,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1602013319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212440071\">said</a>:</p>\n<blockquote>\n<p>At a higher level, there's likely to be some kind of <code>submodule.incl</code> or something that provides a map <code>F -&gt; K</code> for you.</p>\n</blockquote>\n<p>So does this exist?  In the simplest possible context, given <code>s t : set X</code>, with a hypothesis that <code>s</code> is a subset of <code>t</code>, do we have the induced map <code>s → t</code> (when both have been promoted to types)?</p>",
        "id": 212499157,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602027469
    },
    {
        "content": "<p>Likewise for subgroups, submodules, ...</p>",
        "id": 212499211,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602027504
    },
    {
        "content": "<p>Isn't that just the coe from subtype to parent type?</p>",
        "id": 212499715,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602027996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> What do you mean exactly?  Coercion will turn an <code>s</code> object to an <code>X</code> object, not to a <code>t</code> object.  See thread above.</p>",
        "id": 212502245,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602029924
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.inclusion\">docs#set.inclusion</a></p>",
        "id": 212502624,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602030301
    },
    {
        "content": "<p>Ah good!  I also find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subring.inclusion\">docs#subring.inclusion</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.inclusion\">docs#submonoid.inclusion</a></p>",
        "id": 212502722,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602030393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310419\">@Busiso Chisala</span> would need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.inclusion\">docs#submodule.inclusion</a>, which doesn't currently exist.</p>",
        "id": 212502763,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602030439
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.inclusion\">docs#subgroup.inclusion</a> also missing, I'm not sure whether or not it is magically inherited from submonoids.</p>",
        "id": 212502877,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602030534
    },
    {
        "content": "<p>It looks like you'd have to use <code>to_submonoid</code> and then use some lemma to turn the coercion of <code>to_submonoid</code> of the subgroup into the coercion of the subgroup, since <code>submonoid</code> and <code>subgroup</code> are structures and not classes.</p>",
        "id": 212503006,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602030706
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> mentioned a couple weeks ago that there was a category of the lattice of subobjects that got added to mathlib. That would include all the induced maps from inclusion, I think</p>",
        "id": 212503077,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602030767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212503006\">said</a>:</p>\n<blockquote>\n<p>It looks like you'd have to use <code>to_submonoid</code> and then use some lemma to turn the coercion of <code>to_submonoid</code> of the subgroup into the coercion of the subgroup, since <code>submonoid</code> and <code>subgroup</code> are structures and not classes.</p>\n</blockquote>\n<p>Yes, it might be better to just construct <code>subgroup.inclusion</code> directly rather than trying to inherit something from monoids.  Don't know if it's the correct analogy, but this is what's done for fields (no attempt to inherit from rings):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inclusion</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">subfield</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"n\">S.subtype.cod_restrict_field</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x.2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212503545,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602031284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212503077\">said</a>:</p>\n<blockquote>\n<p>I think <span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> mentioned a couple weeks ago that there was a category of the lattice of subobjects that got added to mathlib. That would include all the induced maps from inclusion, I think</p>\n</blockquote>\n<p>It's not in yet, I've got it in a repo but not yet in mathlib, I can prioritise that if it'd help though. That said I think it wouldn't make this a lot easier, since you'd have to go through all the category theory machinery</p>",
        "id": 212503610,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602031373
    },
    {
        "content": "<p>I would like to propose instead that <span class=\"user-mention\" data-user-id=\"310419\">@Busiso Chisala</span> make a 4-line PR for <code>subgroup.inclusion</code> and <code>submodule.inclusion</code> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<p>(If you have time!  Here's how: <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> , and anyone here will be happy to answer questions.)</p>",
        "id": 212503715,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602031529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212503545\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212503006\">said</a>:</p>\n<blockquote>\n<p>It looks like you'd have to use <code>to_submonoid</code> and then use some lemma to turn the coercion of <code>to_submonoid</code> of the subgroup into the coercion of the subgroup, since <code>submonoid</code> and <code>subgroup</code> are structures and not classes.</p>\n</blockquote>\n<p>Yes, it might be better to just construct <code>subgroup.inclusion</code> directly rather than trying to inherit something from monoids.  Don't know if it's the correct analogy, but this is what's done for fields (no attempt to inherit from rings):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inclusion</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">subfield</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"n\">S.subtype.cod_restrict_field</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x.2</span><span class=\"o\">)</span>\n</code></pre></div>\n\n</blockquote>\n<p>This is exactly what I need. Having defined my <code>incl</code> map, I realized that I actually need a monomorphism. I have yet to do that (easy enough) but thus far here is my ugly demonstration of injectivity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"k\">let</span> <span class=\"n\">incl</span><span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">f2k</span> <span class=\"n\">x.2</span><span class=\"o\">⟩,</span>\n  <span class=\"c1\">-- verify some properties</span>\n  <span class=\"k\">have</span> <span class=\"n\">incl_inj</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">incl</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">incl</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">cond</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">one</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,(</span><span class=\"n\">incl</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span><span class=\"o\">:=</span> <span class=\"kd\">by</span><span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">incl</span><span class=\"o\">],},</span>\n    <span class=\"k\">have</span> <span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">incl</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">incl</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">cond</span><span class=\"o\">,},</span>\n    <span class=\"k\">have</span> <span class=\"n\">onea</span><span class=\"o\">:=</span> <span class=\"n\">one</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">oneb</span> <span class=\"o\">:=</span> <span class=\"n\">one</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a.val</span> <span class=\"bp\">=</span> <span class=\"n\">b.val</span> <span class=\"o\">:=</span> <span class=\"n\">eq.trans</span> <span class=\"o\">(</span><span class=\"n\">eq.trans</span> <span class=\"n\">onea.symm</span> <span class=\"n\">two</span><span class=\"o\">)</span> <span class=\"n\">oneb</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subtype.eq</span> <span class=\"n\">two</span><span class=\"o\">,},</span>\n</code></pre></div>\n\n<p>excuse the absence of lambdas :)</p>",
        "id": 212523275,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602056002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212475279\">said</a>:</p>\n<blockquote>\n<p>That looks like a statement we would definitely want in mathlib! If you're planning to PR it, I would suggest doing it for <code>submodule 𝕜 E</code> where <code>𝕜</code> is an <code>[is_R_or_C 𝕜]</code>; this way we get the statement for both the real and complex case at the same time.</p>\n</blockquote>\n<p>This was my original plan, even though I'm only interested in the real field. But my headers simply wouldn't run! Here was where I started:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.is_R_or_C</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.real_inner_product</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"c1\">-- open is_R_or_C real</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n</code></pre></div>\n\n<p>And Lean complained about classes ..</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span>\n</code></pre></div>\n\n<p>So I abandoned that route, once I saw that the old style was fussless. Where did I mess up?</p>",
        "id": 212524007,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602056555
    },
    {
        "content": "<p>This looks like an outdated mathlib. You shouldn't have analysis.normed_space.real_inner_product nowadays</p>",
        "id": 212524295,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602056784
    },
    {
        "content": "<p>I don't know what you want to do because I didn't follow this thread, but the lines you posted above compile just fine on an up to date mathlib as long as you replace <code>import analysis.normed_space.real_inner_product</code> by <code>import analysis.normed_space.inner_product</code>.</p>",
        "id": 212524648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602057071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212524648\">said</a>:</p>\n<blockquote>\n<p>I don't know what you want to do because I didn't follow this thread, but the lines you posted above compile just fine on an up to date mathlib as long as you replace <code>import analysis.normed_space.real_inner_product</code> by <code>import analysis.normed_space.inner_product</code>.</p>\n</blockquote>\n<p>Thanks. This is the fix I wanted. I don't think my mathlib is dated - I only recently started.</p>\n<p>I take that back. It wont compile, cant find the stuff. What do I do about my mathlib?</p>",
        "id": 212536040,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602064386
    },
    {
        "content": "<p><code>leanproject upgrade-mathlib</code></p>",
        "id": 212539360,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602066453
    },
    {
        "content": "<p>(or just <code>leanproject up</code> for short)</p>",
        "id": 212539369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602066459
    },
    {
        "content": "<p>This assumes that you followed the <a href=\"https://leanprover-community.github.io/get_started.html#regular-install\">#install</a> instructions.</p>",
        "id": 212539380,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602066469
    },
    {
        "content": "<p>If you're working in a branch on mathlib, rather than in a project with mathlib as a dependency, then instead you need <code>git merge master</code>.</p>",
        "id": 212539486,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602066532
    },
    {
        "content": "<p>(mathlib changes about 20 times each day at the moment, so \"out of date\" is almost certain :-)</p>",
        "id": 212539713,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602066690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212539380\">said</a>:</p>\n<blockquote>\n<p>This assumes that you followed the <a href=\"https://leanprover-community.github.io/get_started.html#regular-install\">#install</a> instructions.</p>\n</blockquote>\n<p>I'm pretty sure that I did. I have upgraded mathlib and went back and did so a second time, because nothing changed except the substantial download. My project only recognizes <code>import analysis.normed_space.real_inner_product </code> as a normed space import. No idea.</p>",
        "id": 212556035,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602076513
    },
    {
        "content": "<p>Can you directly open up the folder <code>src/analysis/normed_space/...</code> and see the names of the files listed there?</p>",
        "id": 212560686,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602078547
    },
    {
        "content": "<p>Older versions of leanproject can leave oleans  behind, and imports work if the olean is still there</p>",
        "id": 212561575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602078959
    },
    {
        "content": "<p>If I have weirdness like this going on I usually manually delete all the olean files and then put the correct ones back with leanproject get-cache (they will be backed up locally)</p>",
        "id": 212561803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602079053
    },
    {
        "content": "<p>Make sure your mathlib is up to date and your leanproject</p>",
        "id": 212561954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602079093
    },
    {
        "content": "<p>By the way, for more specific help you should clarify whether you are working with a clone of mathlib or with a project which has mathlib as a dependency</p>",
        "id": 212562076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602079156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212560686\">said</a>:</p>\n<blockquote>\n<p>Can you directly open up the folder <code>src/analysis/normed_space/...</code> and see the names of the files listed there?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">-</span><span class=\"n\">rw</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"c1\">--r--    1 busiso   busiso     74232 Oct  7 13:17 inner_product.lean</span>\n    <span class=\"bp\">-</span><span class=\"n\">rw</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"c1\">--r--    1 busiso   busiso    487192 Oct  7 14:05 inner_product.olean</span>\n    <span class=\"bp\">-</span><span class=\"n\">rw</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"c1\">--r--    1 busiso   busiso      6213 Sep 20 10:53 mazur_ulam.lean</span>\n</code></pre></div>\n\n<p>and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">-</span><span class=\"n\">rw</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"c1\">--r--    1 busiso   busiso    312421 Oct  7 14:05 real_inner_product.olean</span>\n</code></pre></div>\n\n<p>the offending <code>olean</code>?</p>",
        "id": 212564550,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602080237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212562076\">said</a>:</p>\n<blockquote>\n<p>By the way, for more specific help you should clarify whether you are working with a clone of mathlib or with a project which has mathlib as a dependency</p>\n</blockquote>\n<p>mathlib dependent project</p>",
        "id": 212564636,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602080271
    },
    {
        "content": "<p>I would recommend going into the project, deleting <code>_target</code> and then typing <code>leanproject up</code>.</p>",
        "id": 212572162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602083257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/inner.20product.20on.20subspaces/near/212572162\">said</a>:</p>\n<blockquote>\n<p>I would recommend going into the project, deleting <code>_target</code> and then typing <code>leanproject up</code>.</p>\n</blockquote>\n<p>Will do</p>",
        "id": 212574853,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602084171
    }
]