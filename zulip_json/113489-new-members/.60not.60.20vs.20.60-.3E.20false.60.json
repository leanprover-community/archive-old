[
    {
        "content": "<p>A short question about negation. The definition of <code>not p</code> is <code>p -&gt; false</code>. In order to apply lemmas about <code>not</code> to propositions in the <code>-&gt; false</code> form, is there a better way other than to explicitly convert between forms, like in the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"c1\">-- does not work without the previous</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238517144,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1620842261
    },
    {
        "content": "<p><code>rw</code> is a special case because it works up to syntactic equality. You can just do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_not.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">not_not</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238517440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620842386
    },
    {
        "content": "<p>I see, thanks, I should start using <code>change</code> more often</p>",
        "id": 238518405,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1620842744
    },
    {
        "content": "<p>I don't think change is the right solution often. change can be a very expensive tactic</p>",
        "id": 238535749,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620849894
    },
    {
        "content": "<p>change breaks through all api that's been set up. It can lead to really expensive defeq checks</p>",
        "id": 238535937,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620849968
    },
    {
        "content": "<p>Your <code>have</code> is <code>imp_false</code> (but with <code>=</code> rather than <code>iff</code>), so you can also do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">imp_false</span><span class=\"o\">,</span> <span class=\"n\">imp_false</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238539926,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1620851605
    }
]