[
    {
        "content": "<p>I tripped over an error message as I've been working my way through the exercises in <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/dependent_type_theory.html\">*Theorem Proving in Lean 4*</a>. This simple attempt at a proof...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>...gives me this error message that I'm very puzzled by:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n <span class=\"n\">And</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n <span class=\"n\">hp</span> <span class=\"n\">x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>  <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>However, this seemingly equivalent approach works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">And.intro</span> <span class=\"c1\">-- And.intro : ?m.21 → ?m.22 → ?m.21 ∧ ?m.22</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">And.intro</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Where is the difference in the two proofs that breaks the first one?</p>",
        "id": 313750158,
        "sender_full_name": "Matt Pillsbury",
        "timestamp": 1670115465
    },
    {
        "content": "<p><code>And.intro</code> makes the term. <code>(hp x) ∧ (hq x)</code> is the type. You can't prove a theorem by <em>stating</em> the theorem.</p>",
        "id": 313750382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670115625
    },
    {
        "content": "<p>In fact <code>(hp x) ∧ (hq x)</code> is just a mess. If <code>P</code> and <code>Q</code> have type <code>Prop</code> then <code>P ∧ Q</code> has type <code>Prop</code> and it's the theorem statement. <code>hp x</code> is a proof, so it has type <code>P</code> for some <code>P</code> of type <code>Prop</code>. You're confusing types and terms.</p>",
        "id": 313750565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670115759
    },
    {
        "content": "<p><code>def foo := 2 + 2 = 5</code>. Do you understand what that means and why it works? I ask because I was confused about this when I was a beginner. Another example is <code>def f := Nat -&gt; Nat</code>.</p>",
        "id": 313750619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670115811
    },
    {
        "content": "<p>I think I get it now, especially based on the last bit. I was confusing the <strong>type</strong> of <code>And.intro</code> with the <strong>term</strong> <code>And.intro</code>.</p>\n<p>Thanks!</p>",
        "id": 313752117,
        "sender_full_name": "Matt Pillsbury",
        "timestamp": 1670117271
    }
]