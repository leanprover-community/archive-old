[
    {
        "content": "<p>Hello there!</p>\n<p><strong>TLDR:</strong> Is there a tactic that allows me to prove goals of the form \"there exists...\" with the probabilistic method?</p>\n<p>I'd like to prove Erdos' classical lower bound on the diagonal Ramsey numbers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">{R}(k)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> with Lean.  For the following, note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> refers to the complete graph on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span> vertices and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">E(G)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">G</span><span class=\"mclose\">)</span></span></span></span> is the edge set of graph <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">G</span></span></span></span>. The diagonal Ramsey number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">{R}(k)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> is the smallest number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> such that for any 2-coloring of the edges of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, there is a monchromatic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> subgraph of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (i.e. a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> subgraph where either all the edges are blue or all the edges are red). Ramsey proved in 1929 that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(k)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> is finite for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, but finding the exact number is much more challenging! Here is the theorem I am trying to prove and its proof for reference:</p>\n<p><a href=\"/user_uploads/3121/5uFIf4eKFTjYwIrWSNdT4J7H/proof1.jpeg\" title=\"proof1.jpeg\">proof1.jpeg</a> <br>\n<a href=\"/user_uploads/3121/AKIlqMuaUGKixG034dQfivWg/proof2.jpeg\" title=\"proof2.jpeg\">proof2.jpeg</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5uFIf4eKFTjYwIrWSNdT4J7H/proof1.jpeg\" title=\"proof1.jpeg\"><img src=\"/user_uploads/3121/5uFIf4eKFTjYwIrWSNdT4J7H/proof1.jpeg\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AKIlqMuaUGKixG034dQfivWg/proof2.jpeg\" title=\"proof2.jpeg\"><img src=\"/user_uploads/3121/AKIlqMuaUGKixG034dQfivWg/proof2.jpeg\"></a></div><p>If I were just to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">R(k) &gt; n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> given the necessary inequality on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> in Lean, I expect my goal for the proof would look like something along the lines of \"there exists some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>:</mo><mi>E</mi><mo stretchy=\"false\">(</mo><msub><mi>K</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">{</mo><mi>r</mi><mi>e</mi><mi>d</mi><mo separator=\"true\">,</mo><mi>b</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">c : E(K_n) \\rightarrow \\{red, blue\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">e</span><span class=\"mclose\">}</span></span></span></span> such that for every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo>⊆</mo><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">H \\subseteq K_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo>≅</mo><msub><mi>K</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">H \\cong K_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> there exists <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>e</mi><mn>2</mn></msub><mo>∈</mo><mi>E</mi><mo stretchy=\"false\">(</mo><mi>H</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">e_1, e_2 \\in E(H)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mclose\">)</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo stretchy=\"false\">(</mo><msub><mi>e</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo mathvariant=\"normal\">≠</mo><mi>c</mi><mo stretchy=\"false\">(</mo><msub><mi>e</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c(e_1) \\neq c(e_2)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.  </p>\n<p><strong>Now, onto my question:</strong> What tactic would I use to prove a goal of the form \"there exists...\" in Lean with a non-constructive proof? The only way I know how to prove existence goals is with the <code>use</code> tactic, but as you can see the proof pictured above does not construct anything that I could give the <code>use</code> tactic.  Instead the argument is that since there is a positive probability that a random 2 coloring of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> has no monochromatic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> subgraphs, then there is <em>some</em> coloring in the space of random colorings of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> which has no monochromatic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> subgraph. What tactic could I use to prove the goal with such an argument?</p>",
        "id": 195273821,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587801811
    },
    {
        "content": "<p>I think you want something like this, to translate an existential statement into the negation of a universal statement</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>There's probably a more idiomatic way of writing this, but <code>push_neg</code> is convenient whenever you want to get rid of negations in a complicated Prop</p>",
        "id": 195274311,
        "sender_full_name": "David Wärn",
        "timestamp": 1587802756
    },
    {
        "content": "<p>There are two different ways to say \"this colouring does not satisfy Ramsey\": there's the one you mentioned of \"for any subset there are two edges with distinct colours\", and there's \"there is no subset that is mono\". Of course the two formulations are equivalent (via <code>push_neg</code> or something), so feel free to choose whichever formulation is more convenient</p>",
        "id": 195274594,
        "sender_full_name": "David Wärn",
        "timestamp": 1587803260
    },
    {
        "content": "<p>The details will depend on how you implement your probability distribution</p>",
        "id": 195274631,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587803284
    },
    {
        "content": "<p>i don't know of really any development of probability theory in Lean</p>",
        "id": 195274662,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587803338
    },
    {
        "content": "<p>Thank you both for your answers. Jalex's comment has me wondering if I'm thinking too far ahead. I might need to rely on a version of the proof that is a counting argument instead. I was unaware that Lean didn't have any probability theory : (</p>",
        "id": 195274725,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587803466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> actually formalized this particular argument here: <a href=\"https://github.com/b-mehta/combinatorics/blob/graphs/src/lower_ramsey.lean\" title=\"https://github.com/b-mehta/combinatorics/blob/graphs/src/lower_ramsey.lean\">https://github.com/b-mehta/combinatorics/blob/graphs/src/lower_ramsey.lean</a><br>\nMy understanding is that for this argument you just need cardinalities of finite sets, or <code>finset.card</code></p>",
        "id": 195274730,
        "sender_full_name": "David Wärn",
        "timestamp": 1587803495
    },
    {
        "content": "<p>Lean does have probability theory though!</p>",
        "id": 195274732,
        "sender_full_name": "David Wärn",
        "timestamp": 1587803510
    },
    {
        "content": "<p>where? mathlib has a little bit of measure theory</p>",
        "id": 195274776,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587803572
    },
    {
        "content": "<p>Thanks for the find David! I'll have to take a good look into this later</p>",
        "id": 195274792,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587803640
    },
    {
        "content": "<p>Yes I wouldn't know if there are actually enough facts about probability that you could formalize this sort of arguments comfortably</p>",
        "id": 195274846,
        "sender_full_name": "David Wärn",
        "timestamp": 1587803731
    },
    {
        "content": "<p>But you can at least talk about probability mass functions. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> made an attempt at formailizing Erdos' probabilistic proof that there are graphs with high chromatic number and high girth in this language<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/hedetniemi/src/graph_theory/random_graph.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/hedetniemi/src/graph_theory/random_graph.lean\">https://github.com/leanprover-community/mathlib/blob/hedetniemi/src/graph_theory/random_graph.lean</a><br>\nI think at the moment it's unclear what the best way of formulating probabilistic arguments is</p>",
        "id": 195274917,
        "sender_full_name": "David Wärn",
        "timestamp": 1587803870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span> proved the Markov and Chebyshev inequalities here: <a href=\"https://github.com/jtristan/stump-learnable/blob/81b3854a8ef9ce4329ed1bb6f0e5528ec2ca136f/src/lib/attributed/to_mathlib.lean\" title=\"https://github.com/jtristan/stump-learnable/blob/81b3854a8ef9ce4329ed1bb6f0e5528ec2ca136f/src/lib/attributed/to_mathlib.lean\">https://github.com/jtristan/stump-learnable/blob/81b3854a8ef9ce4329ed1bb6f0e5528ec2ca136f/src/lib/attributed/to_mathlib.lean</a></p>",
        "id": 195275056,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587804067
    },
    {
        "content": "<p>Just to chime in, David's exactly right that my proof just used cardinalities of finite sets - the argument is the exact same as the one you posted though, just phrased in terms of cardinalities rather than probabilities. I'm of the opinion that at the moment, cardinality arguments are the easiest way to prove this sort of thing in lean - there's a lot of api for finsets already there</p>",
        "id": 195280357,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587813252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> Thank you for your reply. What exactly do you mean by \"phrased in terms of cardinalities rather than probabilities\"?</p>",
        "id": 195296643,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587839008
    },
    {
        "content": "<p>Instead of using the language of probability, one can \"clear denominators\" and make claims about sizes of sets instead. For example, to prove \"there exists...\" using the probabilistic language one would prove that the probability that a random structure satisfied your property is a positive real. To prove it using the cardinality language one would prove that the cardinality of the structures which had the property was a positive integer.</p>",
        "id": 195296776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587839232
    },
    {
        "content": "<p>I see, thank you</p>",
        "id": 195296850,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587839284
    },
    {
        "content": "<p>Wasn't sure that my other questions were non-trivial enough to deserve their own topic, but I'll just post them here instead. Also sorry I thought I provided an MWE earlier. What else do you need <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ? The casting isssue has gone away but now I have:</p>\n<p>don't know how to synthesize placeholder<br>\ncontext:<br>\nn k : ℕ,<br>\nh : n ≥ k<br>\n⊢ Type ?</p>\n<p>Occurring at <code>mono_sub_colorings</code></p>",
        "id": 195562161,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588079953
    },
    {
        "content": "<p>You had an example of an error talking about <code>real</code> when applying <code>choose</code> to too many arguments, I want to reproduce that</p>",
        "id": 195562339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588080014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294527\">Sam Raleigh</span> <a href=\"#narrow/stream/113489-new-members/topic/Diagonal.20Ramsey.20Number.20Lower.20Bound/near/195562161\" title=\"#narrow/stream/113489-new-members/topic/Diagonal.20Ramsey.20Number.20Lower.20Bound/near/195562161\">said</a>:</p>\n<blockquote>\n<p>Wasn't sure that my other questions were non-trivial enough to deserve their own topic</p>\n</blockquote>\n<p>This is not the right attitude.  And you still aren't posting MWE.</p>",
        "id": 195562376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588080031
    },
    {
        "content": "<p>the more topics the better :-)</p>",
        "id": 195562404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588080046
    },
    {
        "content": "<p>(as we just saw)</p>",
        "id": 195562415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588080051
    },
    {
        "content": "<p>I think there will always be some fraction of people who think this way, and this is their first post so we don't have a chance to intercept. The \"noob questions\" thread is unkillable</p>",
        "id": 195562605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588080126
    },
    {
        "content": "<p>Sure, we simply need to keep moving people out of it.</p>",
        "id": 195562780,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588080207
    },
    {
        "content": "<p>I think we can probably have a rule saying that if the discussion goes beyond problem -&gt; MWE please -&gt; what's an MWE -&gt; MWE given -&gt; solution then it should go into its own topic post facto</p>",
        "id": 195562826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588080218
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">edges_of</span> <span class=\"bp\">`</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">powerset_len</span> <span class=\"mi\">2</span> <span class=\"n\">X</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mono_sub_colorings</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">num_mono_sub_colorings</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">mono_sub_colorings</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195562830,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588080220
    },
    {
        "content": "<p>Here's a minimized example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>Apparently, <code>nat</code> coerces to <code>int</code>, which coerces to <code>cau_seq real int</code> because <code>cau_seq real int</code> is a ring, and <code>cau_seq real int</code> has a coe_fn instance to <code>nat -&gt; real</code>. So with these imports you can apply one <code>nat</code> to another and you get a <code>real</code>. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 195565510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588081324
    },
    {
        "content": "<p>This is why I don't like transitive coercions</p>",
        "id": 195565568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588081370
    },
    {
        "content": "<p>So what real do you get?</p>",
        "id": 195565827,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588081501
    },
    {
        "content": "<p><code>n</code>?</p>",
        "id": 195565832,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588081504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Diagonal.20Ramsey.20Number.20Lower.20Bound/near/195565510\" title=\"#narrow/stream/113489-new-members/topic/Diagonal.20Ramsey.20Number.20Lower.20Bound/near/195565510\">said</a>:</p>\n<blockquote>\n<p><code>cau_seq real int</code></p>\n</blockquote>\n<p>This can't be what you meant, right?</p>",
        "id": 195566054,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588081602
    },
    {
        "content": "<p>sorry, <code>cau_seq real abs</code></p>",
        "id": 195566150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588081647
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">a_ih</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">a_ih</span><span class=\"o\">}]</span>\n</code></pre></div>",
        "id": 195566665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588081862
    },
    {
        "content": "<p><a href=\"https://www.destroyallsoftware.com/talks/wat\" title=\"https://www.destroyallsoftware.com/talks/wat\">https://www.destroyallsoftware.com/talks/wat</a></p>",
        "id": 195567546,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588082259
    },
    {
        "content": "<p>not exactly the hall of fame we were targeting...</p>",
        "id": 195567659,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588082298
    },
    {
        "content": "<p>I wonder how far we could get by elaborating <code>x y</code> when <code>x</code> is not a function to <code>x.to_fun y</code>, combined with the proposal to search \"superclass\" namespaces</p>",
        "id": 195569467,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588083065
    },
    {
        "content": "<p>Or even without that second part.</p>",
        "id": 195569696,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588083164
    },
    {
        "content": "<p>In any case,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">coe_fn_trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_to_fun</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u₂</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_coe_t_aux</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u₁</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>and perhaps</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">coe_sort_trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_to_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u₂</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_coe_t_aux</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u₁</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>seem particularly dubious; possibly we can just delete them?</p>",
        "id": 195572415,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588084329
    },
    {
        "content": "<p>What happens if you try?</p>",
        "id": 195572473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588084355
    },
    {
        "content": "<p>I would have to wait a few hours for mathlib to finish building, I imagine?</p>",
        "id": 195572518,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588084374
    },
    {
        "content": "<p>I'm happy to try this but I cannot offer instant feedback <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 195572674,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588084435
    },
    {
        "content": "<p>(hopefully I can offer instance feedback)</p>",
        "id": 195572827,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588084476
    },
    {
        "content": "<p>Could someone please explain why I'm getting a \"don't know how to synthesize placeholder context\" issue (and what this means) on <code>card</code> in the following code? Also just to be sure, is this an appropriate MWE for the problem at hand?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mono_sub_colorings</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">mono_sub_colorings</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Thank you!</p>",
        "id": 195587633,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588090340
    },
    {
        "content": "<p>the type of <code>\\a</code>cannot be inferred</p>",
        "id": 195587913,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588090470
    },
    {
        "content": "<p>but this is not an MWE because it does not compile (I only compiled it with my eyes though so I'm not 100% sure)</p>",
        "id": 195588003,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588090507
    },
    {
        "content": "<p>Thanks! I copied and pasted this exact code into a separate lean file and it compiles (aside from this issue you just fixed).</p>",
        "id": 195588311,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588090636
    },
    {
        "content": "<p>well the MWE would be <code>mono_sub_colorings _ n k</code></p>",
        "id": 195588378,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588090667
    },
    {
        "content": "<p>and then my comment of the type of <code>\\a</code> not able to be inferred would apply</p>",
        "id": 195588467,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588090686
    },
    {
        "content": "<p>also this is not python, we write <code>n.choose k</code> here</p>",
        "id": 195588530,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588090721
    },
    {
        "content": "<p>Thank you for the clarification. Wouldn't a person seeking to assist with the problem want to know what <code>mono_sub_colorings</code> was?</p>",
        "id": 195588673,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588090788
    },
    {
        "content": "<p>Perhaps I don't understand the definition of an MWE</p>",
        "id": 195588745,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588090812
    },
    {
        "content": "<p>And what do you mean by your last comment? I did write <code>n.choose(k)</code>, no?</p>",
        "id": 195588784,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588090846
    },
    {
        "content": "<p>o wait</p>",
        "id": 195588825,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588090866
    },
    {
        "content": "<p>I see what you mean</p>",
        "id": 195588833,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588090870
    },
    {
        "content": "<p>I think Kenny is being somewhat unreasonable. If the issue is that some code is not compiling, then we want to be able to verify that the same code does not compile. It is not supposed to be \"W\" in the sense of working/compiling then!</p>",
        "id": 195588887,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588090905
    },
    {
        "content": "<p>well this is just a misunderstanding.</p>",
        "id": 195589018,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588090956
    },
    {
        "content": "<p>Ah I think I'm starting to get it. So by \"don't know how to synthesize placeholder\" Lean means that it is unsure what argument to insert in the underscore in <code>mono_sub_colorings _ n k</code>, yes?</p>",
        "id": 195589339,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588091111
    },
    {
        "content": "<p>right</p>",
        "id": 195589537,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588091196
    },
    {
        "content": "<p>Given <code>universe u</code>, what is the difference between <code>variables {α : Type u} </code> and <code>variables α : Type u</code>?</p>",
        "id": 195591662,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588092084
    },
    {
        "content": "<p>if you prove a theorem / make a definition using the latter then you don't need to supply <code>\\a</code> and Lean will try to infer <code>\\a</code></p>",
        "id": 195592193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588092322
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 195592374,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588092385
    },
    {
        "content": "<p>Obligatory <a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments\" title=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments\">TPiL link</a>. See also <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments\" title=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments\">6.5</a>.</p>",
        "id": 195592546,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588092475
    },
    {
        "content": "<p>The <em>former</em>!</p>",
        "id": 195592660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588092510
    },
    {
        "content": "<p>I stand corrected.</p>",
        "id": 195593118,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588092696
    },
    {
        "content": "<p>Judging by what Kevin said, I'd think that <code>variable {\\a : u}</code> would allow me to have <code>lemma test (n k : ℕ) : card (mono_sub_colorings n k) = n.choose(k) := sorry</code> without any issues. So why am I getting a cannot synthesize placeholder error?</p>",
        "id": 195593920,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588093015
    },
    {
        "content": "<p>Kevin said Lean would try to infer <code>\\a</code>, not that it would succeed.</p>",
        "id": 195593996,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093048
    },
    {
        "content": "<p>How would it know what type to pick?</p>",
        "id": 195594053,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093075
    },
    {
        "content": "<p>Wouldn't it be able to infer it from the definition of <code>mono_sub_colorings</code>?</p>",
        "id": 195594177,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588093113
    },
    {
        "content": "<p>But what even is the correct answer? There isn't one.</p>",
        "id": 195594474,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093224
    },
    {
        "content": "<p>If this isn't clear, imagine adding <code>variable {\\b : Type u}</code>, or even deleting <code>variable {\\a : Type u}</code>.</p>",
        "id": 195594526,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093242
    },
    {
        "content": "<p>Who knows, Lean seems to like the type <code>nat -&gt; real</code> so maybe that is a good choice.</p>",
        "id": 195594720,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093311
    },
    {
        "content": "<p>If you like, the point is that <code>card</code> could take a <code>finset</code> of anything, so that's precisely the point where we lose the ability to determine the implicit parameter of <code>mono_sub_colorings</code>.</p>",
        "id": 195595310,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093538
    },
    {
        "content": "<p>No matter what that parameter is, this equation will type check.</p>",
        "id": 195595339,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093556
    },
    {
        "content": "<p>I see. So how do I fix it? If I try Kenny's suggestion <code>lemma test (n k : ℕ) : card (mono_sub_colorings α n k) = n.choose k  := sorry</code>, then I get a type mismatch because <code>\\a</code>is expected to be of type <code>nat</code>.</p>",
        "id": 195595740,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588093708
    },
    {
        "content": "<p><code>card (@mono_sub_colorings α n k)</code><br>\nor<br>\n<code>card (mono_sub_colorings n k : finset (finset (finset α)))</code></p>",
        "id": 195595992,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093819
    },
    {
        "content": "<p><code>@</code> means \"I'm going to give all the parameters including the implicit ones\".</p>",
        "id": 195596065,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093854
    },
    {
        "content": "<p>I was wondering how to do this, thank you.</p>",
        "id": 195596247,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588093925
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">core_ineq</span>\n    <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n  <span class=\"c1\">--stuff</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"n\">h</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">--other stuff</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>How do I fix the type mismatch at <code>mul_lt_mul_of_pos_left</code>?</p>",
        "id": 195624933,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588106996
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"err\">?</span><span class=\"n\">m_6</span> <span class=\"err\">?</span><span class=\"n\">m_7</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">*</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">&lt;</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">*</span> <span class=\"err\">?</span><span class=\"n\">m_5</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 195625119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107080
    },
    {
        "content": "<p>Your right hand side says ?m_3 must be 2^a but the left hand side is not of the form <code>2^a * X</code></p>",
        "id": 195625298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107148
    },
    {
        "content": "<p>(because of associativity conventions)</p>",
        "id": 195626253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107616
    },
    {
        "content": "<p>Is that the error you got? I mean thank you for pointing that out as I would have had to fix it eventually, but I got this error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"n\">h</span> <span class=\"n\">h0</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h0</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">a</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 195626375,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588107687
    },
    {
        "content": "<p>Read more?</p>",
        "id": 195626503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107731
    },
    {
        "content": "<p>Had my eyes only looked an inch farther down on the screen, I would not have needed to ask such a silly question. Thanks Kevin : D</p>",
        "id": 195626637,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588107803
    },
    {
        "content": "<p>Learning to read Lean error messages takes a long time</p>",
        "id": 195626678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107820
    },
    {
        "content": "<p>and I remember the power I felt I had once I realised that more often than not I could actually turn the information in the error message into a way of figuring out how to fix my code</p>",
        "id": 195626806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107864
    },
    {
        "content": "<p>That'll be the day...</p>",
        "id": 195626895,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588107905
    },
    {
        "content": "<p>I think the error just means \"I'm trying to match up all the metavariables but I am hopelessly stuck, I can't even solve for the first one: here's what I was thinking\"</p>",
        "id": 195626909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107914
    },
    {
        "content": "<p>I get a particularly difficult to read error message when I add the parentheses:</p>\n<p><code>have h1 : 2^a * (2 ^ 1 / 2 ^ ↑b * ↑c) &lt; 2^a * 1 := by exact mul_lt_mul_of_pos_left h h0,</code></p>",
        "id": 195626981,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588107953
    },
    {
        "content": "<p>Everything has to match exactly for this lemma to work, your <code>h0</code> does not say what you want it to say.</p>",
        "id": 195627068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107990
    },
    {
        "content": "<p>2^(1-\\u b) might look the same as 2^1/2^\\u b to you but it's certainly not definitionally equal to it</p>",
        "id": 195627108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588108015
    },
    {
        "content": "<p>this is part of why backwards reasoning flows more smoothly</p>",
        "id": 195627116,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588108020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> the \"stuff\" part of my code handles that</p>",
        "id": 195627292,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588108105
    },
    {
        "content": "<p><code>h0</code> is also wrong, though</p>",
        "id": 195627323,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588108128
    },
    {
        "content": "<p>Sorry I should have posted the full thing</p>",
        "id": 195627337,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588108136
    },
    {
        "content": "<p>Give me one moment</p>",
        "id": 195627347,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588108142
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">core_ineq</span>\n    <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fpow_sub</span> <span class=\"n\">ℚ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">two_ne_zero</span> <span class=\"mi\">1</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"n\">h</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">--other stuff</span>\n</code></pre></div>",
        "id": 195627418,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588108193
    },
    {
        "content": "<p>I made a mistake omitting that line in my last example, I forgot I changed <code>h</code> my bad</p>",
        "id": 195627485,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588108216
    },
    {
        "content": "<p><code>have h0 : 0 &lt; 2^a := sorry</code> &lt;-- this is a statement about <code>nat</code></p>",
        "id": 195627488,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588108217
    },
    {
        "content": "<p>That is why you get this confusing</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">a</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>\n\n\n<p>error. Yes, the error message could be more helpful.</p>",
        "id": 195627629,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588108299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Thanks for pointing that out, too. I'll change it to <code>have h0 : 0 &lt; (2 : ℚ)^a := sorry,</code></p>",
        "id": 195627651,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588108313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Could you elaborate on why backwards reasoning is better?</p>",
        "id": 195628741,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588108906
    },
    {
        "content": "<p>Lean already knows the correct way to elaborate the goal</p>",
        "id": 195628842,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588108950
    },
    {
        "content": "<p>If you apply a lemma which requires a side condition, then Lean will work out the correct side condition</p>",
        "id": 195628881,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588108972
    },
    {
        "content": "<p>and it may print as the same <code>0 &lt; 2^a</code> but it will be at the correct type</p>",
        "id": 195628918,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588108995
    },
    {
        "content": "<p>If you build up forwards, Lean has no way of knowing how your facts like <code>h0</code> are supposed to relate to the goal so you must help the elaborator by being specific</p>",
        "id": 195628967,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588109020
    },
    {
        "content": "<p><code>rw fpow_sub at h,</code> works because Lean knows the type of <code>h</code></p>",
        "id": 195629078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588109069
    },
    {
        "content": "<p>or say you skip <code>have h0 : 0 &lt; 2^a := sorry</code>, and instead begin</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 195629376,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588109208
    },
    {
        "content": "<p>now the goal is the correct <code>0 &lt; 2^a</code></p>",
        "id": 195629397,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588109220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Diagonal.20Ramsey.20Number.20Lower.20Bound/near/195629078\" title=\"#narrow/stream/113489-new-members/topic/Diagonal.20Ramsey.20Number.20Lower.20Bound/near/195629078\">said</a>:</p>\n<blockquote>\n<p><code>rw fpow_sub at h,</code> works because Lean knows the type of <code>h</code></p>\n</blockquote>\n<p>That adds an additional <code>2 ≠ 0</code> goal. We discussed this around <a href=\"#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/195362228\" title=\"#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/195362228\">here</a> last night.</p>",
        "id": 195629611,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588109340
    },
    {
        "content": "<p>you can solve that goal whenever you feel like it with <code>by norm_num</code></p>",
        "id": 195629671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588109375
    },
    {
        "content": "<p><code>rw fpow_sub at h; try {by norm_num},</code></p>",
        "id": 195629841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588109454
    },
    {
        "content": "<p>You are going to end up with a bunch of <code>2 \\ne 0</code> goals, it might be even worth proving it beforehand.</p>",
        "id": 195629926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588109516
    },
    {
        "content": "<p>Maybe the mathematician tactic mode should apply <code>; try  {by norm_num}</code> after every step.</p>",
        "id": 195629997,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588109547
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fpow_sub</span> <span class=\"n\">h2</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>I suspect you'll need <code>h2</code> later on</p>",
        "id": 195630020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588109559
    },
    {
        "content": "<p>Does <code>rw</code> put the side conditions at the end or something?</p>",
        "id": 195630119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588109622
    },
    {
        "content": "<p>I seem to recall that</p>",
        "id": 195630126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588109626
    },
    {
        "content": "<p>That seems usually annoying</p>",
        "id": 195630218,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588109678
    },
    {
        "content": "<p>maybe there's a good reason though</p>",
        "id": 195630233,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588109689
    },
    {
        "content": "<p>Because nobody fixed it yet?</p>",
        "id": 195631204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588110276
    },
    {
        "content": "<p>Actually maybe the idea is that if you knew how to prove it with a one-liner you would have written the proof in the rw line</p>",
        "id": 195631244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588110303
    },
    {
        "content": "<p>Is there a list of all the theorems somewhere?</p>",
        "id": 195632154,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588110747
    },
    {
        "content": "<p>The documentation?</p>",
        "id": 195632753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588111051
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/\" title=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a></p>",
        "id": 195633160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588111209
    },
    {
        "content": "<p>Better make yourself a nice cup of tea before you start</p>",
        "id": 195633184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588111230
    },
    {
        "content": "<p>Haha thanks!</p>",
        "id": 195634667,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588112002
    },
    {
        "content": "<p>Is this list complete though? For example I can't find <code>fpow_add</code> in the <code>algebra.field_power</code> section. Is that because it isn't located here?</p>",
        "id": 195635011,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588112216
    },
    {
        "content": "<p>That's correct</p>",
        "id": 195636289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588112816
    },
    {
        "content": "<p>Import enough stuff to make <code>#check fpow_add</code> work, and then right click and go to definition to find where it's located</p>",
        "id": 195636318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588112840
    },
    {
        "content": "<p>It recently moved to <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group_with_zero_power.html#fpow_add\" title=\"https://leanprover-community.github.io/mathlib_docs/algebra/group_with_zero_power.html#fpow_add\">algebra.group_with_zero_power</a>. (I guess that's why the google search doesn't pull it up).</p>",
        "id": 195636458,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588112934
    },
    {
        "content": "<p>Another question - how come <code>example (a b : ℕ) : (2 : ℚ)^(a - b : ℤ) = (2 : ℚ)^a * (2 : ℚ)^(-b : ℤ) := by exact fpow_add two_ne_zero a (-b)</code> has no errors but the following code gives me a type mismatch error?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">core_ineq</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fpow_add</span> <span class=\"n\">two_ne_zero</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 195636579,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588113012
    },
    {
        "content": "<p>Why not use <code>h2</code> from above instead of <code>two_ne_zero</code> -- does it make a difference? [edit: no]</p>",
        "id": 195636649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113071
    },
    {
        "content": "<p>This is precisely what was discussed at <a href=\"#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/195362228\" title=\"#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/195362228\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/195362228</a></p>",
        "id": 195636651,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588113073
    },
    {
        "content": "<p>It's because <code>exact</code> is happy with definitional equality and <code>rw</code> needs syntactic equality I should think.</p>",
        "id": 195636936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113228
    },
    {
        "content": "<p><code>a + -b</code> isn't syntactically equal to <code>a - b</code></p>",
        "id": 195636960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113241
    },
    {
        "content": "<p>That also doesn't help.</p>",
        "id": 195637119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588113334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'm just playing around with different possibilities to increase my understanding of type casting. <br>\n<span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Ah right, thank you. I guess I didn't understand Mario's answer as clearly as I thought I did</p>",
        "id": 195637231,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588113394
    },
    {
        "content": "<p>Sam, a lot of your recent questions seem to indicate that you are doing implicit steps in your head. Lean will not let you skip anything. The error is clear. Lean is looking for <code>2 ^ (↑a + -↑b)</code> and it can only see <code>2 ^ (↑a - ↑b)</code>. Just because you know these are the same doesn't mean that the <code>rw</code> tactic knows they are the same.</p>",
        "id": 195637346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113464
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">core_ineq</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"bp\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fpow_add</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Lean needs to be explicitly told to make the change because <code>rw</code> isn't going to do it.</p>",
        "id": 195637569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113614
    },
    {
        "content": "<p>But really this is cheeky, because the fact that a-b happens to be definitionally equal to a+(-b) shouldn't really be used.</p>",
        "id": 195637616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113666
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fpow_add</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 195637638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113686
    },
    {
        "content": "<p>Got it. From henceforth I shall assume lean is as pedantic as my 7th grade english teacher. Is there some resource that lists the definitional equivalences in lean so that you can recognize when to avoid proving unnecessary steps?</p>",
        "id": 195637642,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588113688
    },
    {
        "content": "<p>You can just look up the definitions :-)</p>",
        "id": 195637669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113708
    },
    {
        "content": "<p>Lean is at least as pedantic as your 7th grade english teacher.</p>",
        "id": 195637722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113727
    },
    {
        "content": "<p>genius! why didn't I think of that</p>",
        "id": 195637727,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588113734
    },
    {
        "content": "<p>(not being sarcastic - I genuinely did not think to do that for some reason)</p>",
        "id": 195637750,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588113754
    },
    {
        "content": "<p>The definition of <code>a - b</code> is actually hard to look up I should think</p>",
        "id": 195637763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113766
    },
    {
        "content": "<p>but what is true by definition and what isn't shouldn't really be relevant. You're supposed to use the interface</p>",
        "id": 195637791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113792
    },
    {
        "content": "<p>You can prove <code>a - b = a + -b</code> either by <code>rfl</code> or by <code>sub_eq_add_neg</code> and in some sense the latter is more appropriate</p>",
        "id": 195637815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113820
    },
    {
        "content": "<p>(of course if you look up the proof of <code>sub_eq_add_neg</code> you'll probably see that it's <code>rfl</code>)</p>",
        "id": 195637840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113841
    },
    {
        "content": "<p>So \"good practice\" is always proving equivalences yourself instead of relying on coincidental definitional equivalences</p>",
        "id": 195637909,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588113872
    },
    {
        "content": "<p>In the natural number game, the proof of <code>0 + n = n</code> is <code>zero_add</code>, which is proved by induction, but the proof of <code>n + 0 = n</code> is <code>rfl</code> because it's true by definition</p>",
        "id": 195637912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113878
    },
    {
        "content": "<p>This to me is an indication that definitional equality is really a rather pathological thing</p>",
        "id": 195637924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113893
    },
    {
        "content": "<p>You can only find this out by looking at the definition of +, and mathematical arguments should not depend on the definition of +, they should depend on the interface for +, which includes zero_add and add_zero</p>",
        "id": 195637963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113940
    },
    {
        "content": "<p>just like you shouldn't care whether Lean's real numbers are defined via Cauchy sequences, Dedekind cuts, or something else</p>",
        "id": 195638029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113967
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_sub</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ eq (has_add.add a (has_neg.neg b)) 0</span>\n  <span class=\"c1\">-- now comment out the set_option line</span>\n  <span class=\"c1\">-- ⊢ a + -b = 0</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195638341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588114144
    },
    {
        "content": "<p>Where did this thing come from that you abbreviate <code>refl</code> <code>rfl</code>?</p>",
        "id": 195641809,
        "sender_full_name": "Steffan",
        "timestamp": 1588116546
    },
    {
        "content": "<p><code>rfl</code> is a term, <code>refl</code> is a tactic</p>",
        "id": 195641964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588116692
    },
    {
        "content": "<p>Oh, didn't know that existed</p>",
        "id": 195642055,
        "sender_full_name": "Steffan",
        "timestamp": 1588116759
    },
    {
        "content": "<p>I don't see the purpose of it though.</p>",
        "id": 195642076,
        "sender_full_name": "Steffan",
        "timestamp": 1588116787
    },
    {
        "content": "<p>which one? they are both useful</p>",
        "id": 195642086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588116807
    },
    {
        "content": "<p>I probably use <code>rfl</code> a lot more than the <code>refl</code> tactic</p>",
        "id": 195642106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588116838
    },
    {
        "content": "<p>I don't see the purpose of <code>rfl</code>. <code>refl</code> is much shorter than <code>apply rfl</code>.</p>",
        "id": 195642196,
        "sender_full_name": "Steffan",
        "timestamp": 1588116912
    },
    {
        "content": "<p>not everything has to be written as a tactic you know</p>",
        "id": 195642217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588116942
    },
    {
        "content": "<p>you can write terms in all sorts of places, like inside tactics</p>",
        "id": 195642273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588116973
    },
    {
        "content": "<p>as well as just writing a term proof and skipping tactics altogether</p>",
        "id": 195642287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588116992
    },
    {
        "content": "<p>Nevermind, I see. e.g. <code>rfl</code> is easier to write than <code>by refl</code>.</p>",
        "id": 195642323,
        "sender_full_name": "Steffan",
        "timestamp": 1588117047
    },
    {
        "content": "<p>You should search mathlib for <code>rfl</code>, it's surprisingly common, especially for proving lemmas \"by definition\"</p>",
        "id": 195642391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588117085
    },
    {
        "content": "<p>here's a fun one from the sensitivity conjecture:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">succ_n_eq</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">π</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"bp\">...</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195642444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588117161
    },
    {
        "content": "<p>haha, that's a cool one :D</p>\n<p>although I don't know what <code>rintro</code> is yet.</p>\n<p>I actually didn't know that <code>by apply term</code> = <code>term</code>, that was my problem.</p>",
        "id": 195642518,
        "sender_full_name": "Steffan",
        "timestamp": 1588117220
    },
    {
        "content": "<p>Actually <code>by apply term</code> is like <code>term _ _ _</code> depending on how many arguments <code>term</code> has as a function</p>",
        "id": 195642557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588117266
    },
    {
        "content": "<p><code>by exact term</code> is like <code>term</code></p>",
        "id": 195642571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588117284
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">core_ineq</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fpow_sub</span> <span class=\"n\">ℚ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">two_ne_zero</span> <span class=\"mi\">1</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_one</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>How do I make rw recognize the instance of the target pattern <code>(2:\\Q)^1</code> in <code>h</code>? Is rw failing to do so because I've coerced <code>1</code> to <code>\\Z</code>, but the <code>1</code> in <code>pow_one</code> is of type <code>\\nat</code>?</p>",
        "id": 195650858,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588124745
    },
    {
        "content": "<p>Please include imports</p>",
        "id": 195651012,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588124866
    },
    {
        "content": "<p>the solution is <code>rw fpow_one at h,</code></p>",
        "id": 195651093,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588124913
    },
    {
        "content": "<p>also all those <code>(2:\\Q)</code> are redundant</p>",
        "id": 195651110,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588124942
    },
    {
        "content": "<p>The imports:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n</code></pre></div>",
        "id": 195651294,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588125124
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">core_ineq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">fpow_pos_of_pos</span> <span class=\"n\">two_pos</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"kn\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fpow_sub</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">fpow_sub</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">fpow_one</span><span class=\"o\">,</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_one</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195651301,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588125145
    },
    {
        "content": "<p>Thanks kenny, but I wasn't asking for the full proof. I want to do it myself (as ugly as that might turn out to be).</p>",
        "id": 195651466,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588125303
    },
    {
        "content": "<p>Still valuable as an answer key though!</p>",
        "id": 195651479,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588125331
    },
    {
        "content": "<p>I am curious as to what <code>this</code> means though</p>",
        "id": 195651642,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588125479
    },
    {
        "content": "<p>if you look at the tactic state you will see <code>this : 2 \\ne 0</code></p>",
        "id": 195651697,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588125504
    },
    {
        "content": "<p>which is because I didn't specify a name for the lemma</p>",
        "id": 195651713,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588125519
    },
    {
        "content": "<p>oh so it's just a default name</p>",
        "id": 195651719,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588125541
    },
    {
        "content": "<p>got it, thanks!</p>",
        "id": 195651733,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588125574
    },
    {
        "content": "<p>If my context looks like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>How would I go about closing the goal using <code>nat.fpow_ne_zero_of_pos</code>? The online documentation says that the parameters for <code>nat.fpow_ne_zero_of_pos</code> are <code>(h : 0 &lt; p) (n : ℤ)</code>, but this seems to be inconsistent with what lean expects:</p>\n<p><code>fpow_ne_zero_of_pos : 0 &lt; ?M_3 → ∀ (n : ℤ), ↑?M_3 ^ n ≠ 0</code></p>",
        "id": 195654836,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588129314
    },
    {
        "content": "<p>I want a theorem for which I can specify the exponent, not receive statement prefaced by a universal quantifier.</p>",
        "id": 195654919,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588129363
    },
    {
        "content": "<p>(that's the same thing)</p>",
        "id": 195655030,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588129448
    },
    {
        "content": "<p>How about starting with <code>apply nat.fpow_ne_zero_of_pos</code>?</p>",
        "id": 195655039,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588129468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I get </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span>\n  <span class=\"err\">↑?</span><span class=\"n\">m_3</span> <span class=\"bp\">^</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 195655283,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588129748
    },
    {
        "content": "<p>maybe <code>fpow_ne_zero_of_ne_zero</code> then? is a field a <code>group_with_zero</code>, whatever that is?</p>",
        "id": 195655435,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588129939
    },
    {
        "content": "<p>What is <code>fpow_ne_zero_of_ne_zero</code>? It isnt showing up in the documentation</p>",
        "id": 195655521,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588130083
    },
    {
        "content": "<p>It's in src/algebra/group_with_zero_power.lean</p>",
        "id": 195655552,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588130128
    },
    {
        "content": "<p>maybe in some namespace</p>",
        "id": 195655553,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588130131
    },
    {
        "content": "<p>I just <code>#check</code>'d it, I see</p>",
        "id": 195655610,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588130207
    },
    {
        "content": "<p>Why doesn't it appear in the online documentation?</p>",
        "id": 195655612,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588130221
    },
    {
        "content": "<p>No idea, is the online documentation older than April 7 maybe?</p>",
        "id": 195655621,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588130243
    },
    {
        "content": "<p>No, it's there: <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group_with_zero_power.html#fpow_ne_zero_of_ne_zero\" title=\"https://leanprover-community.github.io/mathlib_docs/algebra/group_with_zero_power.html#fpow_ne_zero_of_ne_zero\">https://leanprover-community.github.io/mathlib_docs/algebra/group_with_zero_power.html#fpow_ne_zero_of_ne_zero</a></p>",
        "id": 195655625,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588130252
    },
    {
        "content": "<p>Ah I see, so it's just the google search engine for the docs that was acting up again</p>",
        "id": 195655665,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588130307
    },
    {
        "content": "<p>Thanks bryan</p>",
        "id": 195655674,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588130314
    },
    {
        "content": "<p>ok, I see a field is indeed a <code>group_with_zero</code> though maybe it would be better if the documentation didn't require me to know the term \"division ring\".</p>",
        "id": 195655675,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588130324
    },
    {
        "content": "<p>Does virtual studio have functionality that would allow me to query my local mathlib documents instead of the online documentation for theorems that I need?</p>",
        "id": 195655695,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588130381
    },
    {
        "content": "<p>I just use <code>git grep</code></p>",
        "id": 195655704,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588130394
    },
    {
        "content": "<p>IS dec_trivial a theorem or a tactic? A bit unclear on this</p>",
        "id": 195655827,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588130582
    },
    {
        "content": "<p>What exactly does it do?</p>",
        "id": 195655832,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588130591
    },
    {
        "content": "<p>more importantly, where is it located in the online documentation?</p>",
        "id": 195655882,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588130650
    },
    {
        "content": "<p><code>dec_trivial</code> is a term. I don't think it has a particularly useful docstring, but it's explained in (where else) <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions\">TPiL</a>.</p>",
        "id": 195656184,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588131170
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 195656274,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588131297
    },
    {
        "content": "<p>(OK, technically, <code>dec_trivial</code> does call a tactic... but you use it like a term.)</p>",
        "id": 195656462,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588131527
    },
    {
        "content": "<p>So I'm trying to define a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> of all 2-colorings of a complete graph on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> vertices <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> which are monochromatic on a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> subgraph of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. I've used some of the definitions of <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> as an initial stepping stone. Here is Bhavik's definition of the set of all colorings of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">edges_of</span> <span class=\"bp\">`</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">powerset_len</span> <span class=\"mi\">2</span> <span class=\"n\">X</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">colorings</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">powerset</span> <span class=\"o\">(</span><span class=\"n\">edges_of</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I'd like to define something similar for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">mono_sub_colorings</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"c1\">--something</span>\n</code></pre></div>\n\n\n<p>I am having some difficulty formalizing this. At first I thought I could somehow define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> by starting with the powerset of edges of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">K_{n-k}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span>, and then taking the union of this set and some set of order <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">(n-k)*k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> (for the edges between the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> subgraph and the rest of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>). Then I would take the union of this union over all choice of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> subgraph. My questions are:</p>\n<ol>\n<li>Can you define a finset by the union of two other finsets?</li>\n<li>Is this construction ideal in lean or is there a more canonical / less contrived way of constructing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span>? How would you go about doing it?</li>\n</ol>\n<p>Thank you!</p>",
        "id": 195702229,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588164315
    },
    {
        "content": "<ol start=\"3\">\n<li>If the answer to question 1 is yes, then how?</li>\n</ol>",
        "id": 195702325,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588164363
    },
    {
        "content": "<ol>\n<li>Yes! You can use the union operator which should take the union of the two given finsets</li>\n</ol>",
        "id": 195716138,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588169897
    },
    {
        "content": "<p>Contrived example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">new_finset</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"err\">∪</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">new_finset</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195716307,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588169978
    },
    {
        "content": "<p>As for 2, I did the same construction in a different way. I defined a predicate <code>red_on H c</code> which indicated when the colouring <code>c</code> was red on the particular subgraph <code>H</code></p>",
        "id": 195716591,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588170086
    },
    {
        "content": "<p>(More specifically, for the <code>K_k</code> given by the vertices of the subset <code>H</code>)</p>",
        "id": 195716724,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588170134
    },
    {
        "content": "<p>I defined <code>blue_on</code> similarly, and then <code>mono_on</code> as the \"or\" of those two</p>",
        "id": 195716801,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588170182
    },
    {
        "content": "<p>Then all the colourings which are monochromatic on <code>H</code> are given by filtering: <code>(colourings G).filter (mono_on H)</code></p>",
        "id": 195716891,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588170227
    },
    {
        "content": "<p>Next I defined <code>def has_mono G (s : ℕ) c : Prop := ∃ (H' ∈ powerset_len s G), mono_on H' c</code>, which says that <code>G</code> with the colouring <code>c</code> has a monochromatic <code>K_s</code> if there is a subset of the vertices of size <code>s</code> for which the colouring is monochromatic</p>",
        "id": 195717111,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588170300
    },
    {
        "content": "<p>and filtering with this predicate gives your set S</p>",
        "id": 195717136,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588170312
    },
    {
        "content": "<p><code>card ((colourings G).filter (has_mono G s))</code></p>",
        "id": 195717152,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588170320
    },
    {
        "content": "<p>(I should apologise, the code I wrote is pretty hard to understand and might not compile with newer versions of mathlib since I PR'd some lemmas at the top - if it'd be useful to you I can tidy it up)</p>",
        "id": 195717349,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588170415
    },
    {
        "content": "<p>Defining <code>S</code> in the way you suggest would be possible - I personally went straight for my way because filtering is a natural way of thinking about it to me - I don't see any immediate reason yours wouldn't work though.  An important thing you should be aware of though is that taking a union over another set as you suggest here: \"union over all choice of the <code>K_k</code> subgraph\" is better expressed using the <code>bind</code> operator in <code>data/finset</code></p>",
        "id": 195717702,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588170574
    },
    {
        "content": "<p>And just in case you weren't aware yet, there's some lemmas for getting the cardinality of finsets in <code>algebra/big_operator</code></p>",
        "id": 195717827,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588170615
    },
    {
        "content": "<p>Let me know if you have any questions or want me to explain my proof some more! I should say that the proofs I gave weren't \"good lean\" so don't take them as good practice, but you can certainly take implementation ideas - I think these were reasonably well thought out</p>",
        "id": 195718215,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588170738
    },
    {
        "content": "<p>Another piece of advice which took me too long to learn when I started doing combinatorics in lean is that your definitions should be general, and your lemmas can restrict usage. For instance, when I defined <code>def red_on (H : finset α) (c : finset (finset α)) : Prop := (edges_of H) ⊆ c</code>, I didn't insist that H was a subset of G, nor that c was actually a colouring of G, but instead these conditions are on the lemmas, eg <code>thing1</code> has the condition that H is a subset of G, and the filter ensures that c is a colouring of G. A simpler example is when we define division on naturals - the definition of division doesn't require the denominator to be non-zero, but (most of) the useful lemmas do. For combinatorics at least I've found this turns out to make things much much easier</p>",
        "id": 195720462,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588171642
    },
    {
        "content": "<p>This is a fantastic answer, thank you so much for your help <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>. I'll look into the <code>bind</code> and <code>`big_operator</code>.  Don't worry about your cold not being readable. I just needed an example of how to even begin a proof about objects (graphs) that don't have a standard definition in lean yet, and your proof was extremely useful in this regard to a lean beginner like me.</p>",
        "id": 195726262,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588173761
    },
    {
        "content": "<p>Also I had no idea <code>filter</code> was a thing. I'll have to look into this as well</p>",
        "id": 195727166,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588174140
    }
]