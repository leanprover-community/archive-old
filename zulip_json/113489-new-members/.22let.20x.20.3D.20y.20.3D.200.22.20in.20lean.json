[
    {
        "content": "<p>I'm trying to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Cau_func_eq</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f_additive</span><span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">f_zero_is_zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>how can I access my f_additive hypothesis and input values into it to create more hypotheses?</p>",
        "id": 278879555,
        "sender_full_name": "Mason McBride",
        "timestamp": 1649878685
    },
    {
        "content": "<p>You can't, what you did here is say that for <em>fix</em> x and y your f_additive hypothesis holds which is entirely different from saying that <code>∀ x y, f (x + y) = f x + f y</code> so you'll have to change your f_additive hpothesis to that. Then if you want to e.g. plug in 0 for x and 1 for y you just do: <code>f_additive 0 1</code></p>",
        "id": 278879797,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649878817
    },
    {
        "content": "<p>Thanks, but I'm still confused on how I use <code>f_additive 0 0</code> in my f_zero_is_zero. Do have <code>have</code> it somehow? or apply it?</p>",
        "id": 278880683,
        "sender_full_name": "Mason McBride",
        "timestamp": 1649879273
    },
    {
        "content": "<p>Start with have</p>",
        "id": 278880752,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1649879300
    },
    {
        "content": "<p>Thanks I'm using <code>have expr : f(0 + 0) = f(0) + f(0) := f_additive 0 0</code> rn</p>",
        "id": 278881657,
        "sender_full_name": "Mason McBride",
        "timestamp": 1649879774
    },
    {
        "content": "<p>There is probably something similar in mathlib already, but I can't find it.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Proof</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hh₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">},</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">div_eq_iff</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hh₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">},</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eq_div_iff</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}},</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h₃</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">]</span> <span class=\"o\">}},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">h₄</span><span class=\"o\">,</span> <span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h₃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h₄</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">nat.le_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h₄</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h₄</span> <span class=\"o\">},</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hh₂</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">symmetry'</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_div.div</span> <span class=\"n\">h₃</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"n\">hh₁</span> <span class=\"n\">h₅</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">}},</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"bp\">←</span><span class=\"n\">rat.num_div_denom</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">h₄</span> <span class=\"n\">b.pos</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">rat.num_div_denom</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h₁</span> <span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 279171635,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650120441
    },
    {
        "content": "<p>Perhaps <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.to_rat_linear_map\">docs#add_monoid_hom.to_rat_linear_map</a>?</p>",
        "id": 279173393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650123308
    },
    {
        "content": "<p>Combined with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.mk'\">docs#add_monoid_hom.mk'</a></p>",
        "id": 279173422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650123363
    },
    {
        "content": "<p>That's a good idea.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_hom.mk'</span> <span class=\"n\">_</span> <span class=\"bp\">@</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_rat_linear_map.map_smul'</span> <span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279173775,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650123913
    },
    {
        "content": "<p>Probably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/map_rat_smul\">docs#map_rat_smul</a> gets you there marginally faster</p>",
        "id": 279181932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650136088
    }
]