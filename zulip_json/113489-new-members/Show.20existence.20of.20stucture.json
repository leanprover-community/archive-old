[
    {
        "content": "<p>Beginner here, I want to show that some object exists, but need to make a lemma first. Here is what I tried, but not sure how to fix it. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">dpair</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">):=</span>\n<span class=\"o\">(</span><span class=\"n\">alb</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">dpairmk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">dpair</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">alb</span><span class=\"o\">:=</span><span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_dpair</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">dpairmk</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292077630,
        "sender_full_name": "Gregor Kikelj",
        "timestamp": 1659651792
    },
    {
        "content": "<p>Here's the error message, so I guess the approach isn't very good :) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">dpairmk</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">dpairmk</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">dpair</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 292077736,
        "sender_full_name": "Gregor Kikelj",
        "timestamp": 1659651858
    },
    {
        "content": "<p>What should that mean? <code>dpairmk a b c</code> is a definition. What does it mean for a definition to exist?</p>",
        "id": 292077779,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659651897
    },
    {
        "content": "<p>I was thinking that dpairmk is something that gives me a dpair from a b and proof that (a&lt;b)</p>",
        "id": 292077833,
        "sender_full_name": "Gregor Kikelj",
        "timestamp": 1659651932
    },
    {
        "content": "<p>Yes, so what you want is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_dpair</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">dpair</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>maybe?</p>",
        "id": 292077978,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659652016
    },
    {
        "content": "<p>Thanks a lot, exactly what I need :)</p>",
        "id": 292078038,
        "sender_full_name": "Gregor Kikelj",
        "timestamp": 1659652073
    }
]