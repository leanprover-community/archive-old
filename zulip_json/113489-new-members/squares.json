[
    {
        "content": "<p>Here's something trivial that I'm trying to formalize: If a and b are coprime and a*b is a perfect square, then a and b are squares. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">divides</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span><span class=\"bp\">ℤ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">d</span>\n\n<span class=\"n\">def</span> <span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span><span class=\"bp\">ℤ</span>  <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">divides</span> <span class=\"n\">d</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">divides</span> <span class=\"n\">d</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">d</span><span class=\"bp\">=</span><span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_square</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">r</span><span class=\"bp\">*</span><span class=\"n\">r</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">product_coprimes_square</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span><span class=\"bp\">ℤ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">coprime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">):</span>\n<span class=\"o\">((</span><span class=\"n\">is_square</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">is_square</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The argument could go something like: a is a square &lt;-&gt; every prime in its factorization appears with even multiplicity. How does unique factorization work in Lean? Help please? Thanks!</p>",
        "id": 187825068,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1581348227
    },
    {
        "content": "<p>Ooh stupid subtlety: a and b need to be positive, or else it's false!... (Originally I was doing this all in naturals, but elsewhere I need to subtract ... which doesn't exist for naturals!...)</p>",
        "id": 187825273,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1581348345
    },
    {
        "content": "<p>This is fine for an example, but if you want \"real\" theorems about primes and stuff then use the library definitions of <code>divides</code> and <code>coprime</code> (<code>is_square</code> doesn't have a definition)</p>",
        "id": 187825422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581348427
    },
    {
        "content": "<p>You can certainly subtract on naturals, but you have to do the subtraction in <code>int</code> if you want it to mean the expected thing</p>",
        "id": 187825586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581348503
    },
    {
        "content": "<p>Also your definition of <code>divides</code> isn't right for <code>int</code>, as it implies <code>x</code> and <code>y</code> have the same sign</p>",
        "id": 187825701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581348590
    },
    {
        "content": "<p>do you have mathlib?</p>",
        "id": 187825794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581348632
    },
    {
        "content": "<p>yes I have mathlib. (How do I use it?...)</p>",
        "id": 187827246,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1581349524
    },
    {
        "content": "<p>How do I fix this with \"int\" so that it works? (I can \"cheat\" and change \\N to \\Z...)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">converse</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">px</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"bp\">*</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">py</span><span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">r</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pz</span><span class=\"o\">:</span><span class=\"n\">z</span><span class=\"bp\">=</span><span class=\"n\">r</span><span class=\"bp\">*</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">rw</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">py</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">pz</span><span class=\"o\">,</span>\n <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187827566,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1581349689
    },
    {
        "content": "<p>(the goal, if it isn't clear, is to show that, if x=r^2-s^2, y=2rs, and z=r^2+s^2, then x^2+y^2=z^2...)</p>",
        "id": 187827672,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1581349746
    },
    {
        "content": "<p>One option:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">converse</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">px</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"bp\">*</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">py</span><span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">r</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pz</span><span class=\"o\">:</span><span class=\"n\">z</span><span class=\"bp\">=</span><span class=\"n\">r</span><span class=\"bp\">*</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">px</span><span class=\"o\">,</span> <span class=\"n\">py</span><span class=\"o\">,</span> <span class=\"n\">pz</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187828549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581350220
    },
    {
        "content": "<p>There's a tricky way to prove your original statement avoiding prime factorization using <code>prod_dvd_and_dvd_of_dvd_prod</code>, which states (in particular) that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> divides <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>∗</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c*c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>d</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">a = de</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">d</span></span></span></span> dividing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">e</span></span></span></span> dividing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span></span></span></span>.</p>",
        "id": 187829171,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581350540
    },
    {
        "content": "<p>You might have fun working out the rest of the proof.</p>",
        "id": 187829212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581350582
    },
    {
        "content": "<p>(It's still kind of tricky after this step.)</p>",
        "id": 187829427,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581350715
    },
    {
        "content": "<p>I have FLT for n=4 lying around on my old laptop, but it is for a 2 year old version of mathlib so it probably doesn't work any more.</p>",
        "id": 187829475,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581350761
    },
    {
        "content": "<p>Right, that's exactly where I'm going with this, FLT for n=4 (of course). Just to learn Lean. Thanks for the hint. </p>\n<p>Related/complaint: I wish the file \"prime.lean\" used fever fancy tactics so mathematicians like me had less start-up cost...</p>",
        "id": 187830198,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1581351241
    },
    {
        "content": "<p>prime.lean uses very few fancy tactics last time I checked. In fact, that might be why it's not so readable</p>",
        "id": 187830270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581351277
    },
    {
        "content": "<p>Heh :) As a mathematician who came here because Kevin made his \"game\" look very much like \"regular math\", the fewer tactics (besides, say, \"ring\", which for me means, leave the algebra as an exercise) the better (at least for me, for now).</p>",
        "id": 187831558,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1581352059
    },
    {
        "content": "<p>When I did this there was nothing in mathlib yet about prime factorization or multiplicity of primes so the easiest way was to use this little trick. But now we should be close to stating and proving things like if every exponent in the prime factorization of n is even, then n is a square, and of course these facts are more generally useful (or at least easiier to think of!)</p>",
        "id": 187831702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581352138
    },
    {
        "content": "<p>Agreed! Is there a place where ord_p(n) is defined? (Exponent of p in the prime factorization of n)</p>",
        "id": 187831973,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1581352286
    },
    {
        "content": "<p>I'm actually really curious in how the \"descent\" part of FLTn=4 will go. (Don't tell me yet... Still trying to get Pythagorean parametrization up and running)</p>",
        "id": 187832116,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1581352379
    },
    {
        "content": "<p>See <code>multiplicity</code>, in <code>ring_theory.multiplicity</code></p>",
        "id": 187832305,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581352529
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 187832422,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1581352601
    }
]