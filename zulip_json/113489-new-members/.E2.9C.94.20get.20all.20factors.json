[
    {
        "content": "<p>I'm trying to prove that if a number divides 2, then it is either 1 or 2.<br>\nI did manage to prove it, but it is ridiculously long and uses probably unnecessary contradictions. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_lt_n</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">bit0_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">nat.one_ne_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">n_le_two</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">finish</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m.succ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m.succ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_right</span> <span class=\"o\">(</span><span class=\"n\">zero_lt_succ</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">g</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_cases</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">omega</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_factors</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">two_cases</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">zero_lt_n</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_le_two</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I feel like I'm missing something. Any help in golfing this would be appreciated!</p>",
        "id": 298566484,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1663069866
    },
    {
        "content": "<p>If you can use mathlb you have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime_two\">docs#nat.prime_two</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.dvd_prime\">docs#nat.dvd_prime</a></p>",
        "id": 298566778,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663069980
    },
    {
        "content": "<p>Might be cheating, but you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_num\">tactic#norm_num</a> to prove <code>nat.prime 2</code> and then apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.dvd_prime\">docs#nat.dvd_prime</a></p>",
        "id": 298566779,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663069980
    },
    {
        "content": "<p>You can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.le_of_dvd\">docs#nat.le_of_dvd</a> (doesn't need mathlib) for proving <code>n_le_two</code></p>",
        "id": 298566994,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663070053
    },
    {
        "content": "<p>very nice! thanks</p>",
        "id": 298567076,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1663070083
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">two_factors</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">dvd_prime</span> <span class=\"n\">prime_two</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works</p>",
        "id": 298567452,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1663070228
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">FOOBAR</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">FOOBAR</span>\n</code></pre></div>",
        "id": 298567521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663070264
    },
    {
        "content": "<p>Also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.divisors</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.divisors</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works</p>",
        "id": 298567653,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663070303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/get.20all.20factors/near/298567653\">said</a>:</p>\n<blockquote>\n<p>Also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.divisors</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.divisors</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works</p>\n</blockquote>\n<p>Good idea, let the computer do the computing for you! :D</p>",
        "id": 298567827,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663070391
    },
    {
        "content": "<p>Of course getting to the precise statement with <code>∨</code> is some crazy finset stuff (but I suppose the literal statement for 2 elements is already in mathib).</p>",
        "id": 298568052,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663070451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> has marked this topic as resolved.</p>",
        "id": 298568180,
        "sender_full_name": "Notification Bot",
        "timestamp": 1663070504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span> the point of my example is the <code>nat.divisors</code> is \"computable\", meaning that Lean knows there is an algorithm to list all the divisors of a given natural number, so you can just say \"do it\". Of course this has nothing to do with fast algorithm, so it can be very very slow, but <code>2</code> is very very small.</p>",
        "id": 298568341,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663070558
    },
    {
        "content": "<p>To get the exact statement you had at the beginning, you can do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.divisors</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_factors</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">finset.mem_singleton</span> <span class=\"n\">_</span> <span class=\"mi\">2</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">finset.mem_insert.mp</span> <span class=\"o\">(</span><span class=\"n\">nat.mem_divisors.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">two_ne_zero</span><span class=\"o\">⟩),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(sadly, this hides Riccardo's nice observation about computability of <code>nat.divisors</code>, but highlights the awkardness of working with (fin)sets containing two elements.)</p>",
        "id": 298578535,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663073876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20get.20all.20factors/near/298568341\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> the point of my example is the <code>nat.divisors</code> is \"computable\", meaning that Lean knows there is an algorithm to list all the divisors of a given natural number, so you can just say \"do it\". Of course this has nothing to do with fast algorithm, so it can be very very slow, but <code>2</code> is very very small.</p>\n</blockquote>\n<p>Thanks, got it!</p>",
        "id": 298578866,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1663073992
    },
    {
        "content": "<p>Don't we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.mem_pair\">docs#finset.mem_pair</a> ?</p>",
        "id": 298581669,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663074891
    },
    {
        "content": "<p>It seems we don't <span aria-label=\"unamused\" class=\"emoji emoji-1f612\" role=\"img\" title=\"unamused\">:unamused:</span></p>",
        "id": 298581887,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663074964
    },
    {
        "content": "<p>There are a few lemmas mentioning <code>doubleton</code> (whose names should perhaps be changed to use <code>pair</code> instead?), but not this one.</p>",
        "id": 298594767,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663078466
    }
]