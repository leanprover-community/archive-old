[
    {
        "content": "<p>I was trying to prove the following statement about the index type resulting from <code>pSet.powerset</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.zfc</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pSet_powerset_type</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">pSet</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pSet.powerset</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span> <span class=\"bp\">=</span> <span class=\"n\">set</span> <span class=\"n\">s.type</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I tried <code>rw pSet.powerset</code> to expose the definition of the function (so that the goal would look something like <code>(pSet.mk (set s.type) (...)).type = set s.type</code>), but that didn't work. I can't tell if I'm missing something simple or if the index type is intended to be opaque and I'm not supposed to prove anything about it directly.</p>\n<p>For context, I was hoping to write some simple proofs re: how the pSet functions affect the cardinality of the index types.</p>",
        "id": 286289013,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1655336346
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.zfc</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pSet_powerset_type</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">pSet.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pSet.powerset</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span> <span class=\"bp\">=</span> <span class=\"n\">set</span> <span class=\"n\">s.type</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 286290026,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655337169
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pSet.powerset\">docs#pSet.powerset</a> is defined by induction, so you need induction to prove stuff about it.</p>",
        "id": 286290044,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655337192
    },
    {
        "content": "<p>ah ha! that makes a lot of sense... thanks!</p>",
        "id": 286290120,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1655337245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> has marked this topic as resolved.</p>",
        "id": 286290136,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655337260
    }
]