[
    {
        "content": "<p>I am trying to prove that a dependent type (\"move\") is finite, and found <code>derive fintype</code>. When I try to use it, I get <code>cases tactic failed, unexpected failure when introducing auxiliary equalities</code> -- I assume this is because just adding it to my structure is trying to prove <code>fintype move</code>, which is indeed not true, I want it to derive <code>fintype (move b)</code> for a fixed thing.</p>\n<p>Is there something else I can do to still use that helper or should I give up on <code>derive fintype</code> and  prove finiteness without it (something I'm not having much success doing either but at least I know what the proof should look like.)</p>",
        "id": 214494140,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603638510
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive fintype, nolint has_inhabited_instance]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">move</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">start_square</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">end_square</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">occupied_start</span> <span class=\"o\">:</span> <span class=\"n\">b.contents.occupied_at</span> <span class=\"n\">start_square</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.exact_dec_trivial</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">unoccupied_end</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">b.contents.occupied_at</span> <span class=\"n\">end_square</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.exact_dec_trivial</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>is what the type looks like, though it's taking me a bit to make that a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 214494198,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603638592
    },
    {
        "content": "<p>OK trying to use <code>refine derive_fintype.mk_fintype _ _ _,</code> isn't getting me much further so probably I've done something else wrong I guess. Never mind the above will try to put something self contained together if I can't figure it out.</p>",
        "id": 214495386,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603640038
    },
    {
        "content": "<p>It might be easier to guess what's going on with at least the declarations of what appear to be variables <code>m</code>, <code>n</code>, <code>b</code></p>",
        "id": 214498165,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603643537
    },
    {
        "content": "<p>Yeah apologies... <code>m</code> and <code>n</code> are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n</code></pre></div>\n\n<p><code>b</code> is another struct... a <code> board m n ι K</code> which is what's making it hard to reproduce on a smaller example. When I try with some other contrived derived type I seem to be able to make <code>derive fintype</code> work regardless.</p>\n<p>The full (non-working) patch is <a href=\"https://github.com/Julian/lean-across-the-board/commit/e7c7531b1288e72d9e96b54373fa3d2008f5f52e#diff-8ddc75490aa5cdbfa06071ac71ab81708c32207a98cd5688fa4dcc74781b9cefR74-R76\">https://github.com/Julian/lean-across-the-board/commit/e7c7531b1288e72d9e96b54373fa3d2008f5f52e#diff-8ddc75490aa5cdbfa06071ac71ab81708c32207a98cd5688fa4dcc74781b9cefR74-R76</a></p>\n<p>which I just took a break from again to recharge, but if anything looks obviously wrong there lemme know. Otherwise going to take another crack at it later.</p>",
        "id": 214499290,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603644794
    },
    {
        "content": "<p>The documentation for fintype deriving says that it will assume <code>fintype</code> instances on any type variables of the structure, so that seems okay. Does it work if you delete the last two fields of <code>move</code>?</p>",
        "id": 214499402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603644915
    },
    {
        "content": "<p>Yes</p>",
        "id": 214499412,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603644937
    },
    {
        "content": "<p>how about if you remove the <code>. tactic</code> stuff?</p>",
        "id": 214499546,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603645075
    },
    {
        "content": "<p>I assume those fields are <code>Prop</code>s?</p>",
        "id": 214499598,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603645094
    },
    {
        "content": "<p>It also works on e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.derive_fintype</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span>\n<span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"mi\">7</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[derive fintype]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.exact_dec_trivial</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>which was my attempt to extract</p>",
        "id": 214499623,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603645137
    },
    {
        "content": "<p>I see. Sometimes it's easier to put everything needed in a new file and then start whittling away at it until it no longer breaks, rather than trying to build up from scratch while guessing the key features</p>",
        "id": 214499669,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603645198
    },
    {
        "content": "<p><em>nod</em> yeah will try doing that</p>",
        "id": 214499733,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603645214
    },
    {
        "content": "<p>But anyways it seems like your original usage is within the scope of what the derive handler is currently supposed to do</p>",
        "id": 214499812,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603645311
    },
    {
        "content": "<p>OK that's good, glad to have the sanity check, appreciated.</p>",
        "id": 214499999,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603645469
    },
    {
        "content": "<p>It doesn't handle this</p>",
        "id": 214500228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603645756
    },
    {
        "content": "<p>I didn't implement anything for propositional fields</p>",
        "id": 214500238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603645785
    },
    {
        "content": "<p>these are problematic because they don't have fintype instances</p>",
        "id": 214500333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603645898
    },
    {
        "content": "<p>because <code>fintype p</code> for <code>p : Prop</code> is already not well typed</p>",
        "id": 214500342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603645918
    },
    {
        "content": "<p>actually, looking at the code again, it seems that we only need a fintype instance on the iterated <code>Sigma'</code> type</p>",
        "id": 214500413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603645982
    },
    {
        "content": "<p>if you'll allow me to say something naive just to check my understanding...</p>",
        "id": 214500418,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603645986
    },
    {
        "content": "<p>terms of <code>p</code> are proofs right?</p>",
        "id": 214500423,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603645992
    },
    {
        "content": "<p>and there's proof equivalence that I've seen referenced before?</p>",
        "id": 214500432,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603646004
    },
    {
        "content": "<p><code>p</code> is a proposition, its elements are proofs</p>",
        "id": 214500437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603646011
    },
    {
        "content": "<p>it's obviously a fintype in the mathematical sense, there is only zero or one element</p>",
        "id": 214500449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603646034
    },
    {
        "content": "<p>so even if they're infinite, one could regard them as finite</p>",
        "id": 214500456,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603646038
    },
    {
        "content": "<p>right ok cool</p>",
        "id": 214500462,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603646042
    },
    {
        "content": "<p>but <code>fintype : Type u -&gt; Type u</code> so <code>p</code> doesn't fit in there</p>",
        "id": 214500510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603646063
    },
    {
        "content": "<p>you could put <code>plift p</code> in instead</p>",
        "id": 214500523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603646072
    },
    {
        "content": "<p>clearly <code>fin_enum</code> is superior <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 214500551,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603646106
    },
    {
        "content": "<p>This should probably be addressed in <code>fintype</code> but it's a question of where to draw the line, as you might argue that <code>finset</code> or <code>multiset</code> or <code>list</code> should accept <code>Sort u</code> as well</p>",
        "id": 214500666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603646224
    },
    {
        "content": "<p>However, given that the proof method relies on inferring instances for <code>Sigma'</code> it might be possible to fix this with a few extra instances</p>",
        "id": 214500690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603646273
    },
    {
        "content": "<p>Specifically, <code>Sigma' h : p, a h</code> is a fintype if <code>a h</code> is, and <code>Sigma' x : A, p x</code> is a fintype if <code>A</code> is, where <code>p</code> is a prop</p>",
        "id": 214500770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603646353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> Didn't you say that your <code>foo</code> example worked though?</p>",
        "id": 214500780,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603646362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> it does yes</p>",
        "id": 214500852,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603646408
    },
    {
        "content": "<p>I was confused about this for a bit until I realized that <code>foo</code> there has three parameters and no fields</p>",
        "id": 214501148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603646736
    },
    {
        "content": "<p>ah :( sorry</p>",
        "id": 214501209,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603646785
    },
    {
        "content": "<p>I noticed that about <code>bar</code> (because of <code>bar 7</code>) but missed it for <code>foo</code>!</p>",
        "id": 214501212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603646789
    },
    {
        "content": "<p>and if you put the <code>:=</code> in the right place you get the expected error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 214501235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603646824
    },
    {
        "content": "<p>that's still slightly different than the one in my real code which blows up harder and doesn't even show me a failed to synthesize type class message</p>",
        "id": 214501262,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603646877
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4777\">#4777</a> adds some tweaks to make sure that this use case is supported</p>",
        "id": 214503565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603649394
    },
    {
        "content": "<p>but it would be good to know what error you are seeing in case it's not handled</p>",
        "id": 214503619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603649431
    },
    {
        "content": "<p>btw the instances on psigma for props are already there, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/psigma.fintype_prop_left/src\">src#psigma.fintype_prop_left</a></p>",
        "id": 214503779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603649633
    },
    {
        "content": "<p>the reason the example above isn't finding it is because the prop has to be decidable and equality on <code>bar 7</code> is not registered as decidable</p>",
        "id": 214503845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603649696
    },
    {
        "content": "<p>Oh amazing, thanks. Will give that commit a shot.</p>",
        "id": 214508192,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603655032
    },
    {
        "content": "<p>The error I get at the minute is really the above -- <code>cases tactic failed, unexpected failure when introducing auxiliary equalities</code> with no further detail</p>",
        "id": 214508239,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603655057
    },
    {
        "content": "<p>I don't know what sigma' and psigma are yet to understand the other thing you told me :), but will see if I can follow after staring a bit</p>",
        "id": 214508283,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603655147
    },
    {
        "content": "<p>Actually I guess I can show you the error by pushing and letting CI fail, so can do that...</p>",
        "id": 214508448,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603655338
    },
    {
        "content": "<p>Yeah, that bug is fixed in <a href=\"https://github.com/leanprover-community/mathlib/issues/4777\">#4777</a></p>",
        "id": 214508518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603655419
    },
    {
        "content": "<p>ah awesome, ok gonna try it now thanks.</p>",
        "id": 214508547,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603655485
    },
    {
        "content": "<p>OK that indeed now gives me a clearer error, now I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">lean</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"n\">exact</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">given</span> <span class=\"n\">expression</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">end_square</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">occupied_start</span> <span class=\"o\">:</span>\n      <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"n\">b.contents.occupied_at</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"exact_dec_trivial\"</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"tactic\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">unoccupied_end</span> <span class=\"o\">:</span>\n      <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">b.contents.occupied_at</span> <span class=\"n\">end_square</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"exact_dec_trivial\"</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"tactic\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">))),</span>\n    <span class=\"n\">unit</span>\n</code></pre></div>",
        "id": 214508805,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603655783
    },
    {
        "content": "<p>(where I guess it figured out one field?)</p>",
        "id": 214508827,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603655819
    },
    {
        "content": "<p>oh no that's a bug</p>",
        "id": 214509144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603656207
    },
    {
        "content": "<p>could you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 214509155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603656227
    },
    {
        "content": "<p>Trying to.</p>",
        "id": 214509243,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603656344
    },
    {
        "content": "<p>OK I think this is reasonably minimal hopefully:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.derive_fintype</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">board</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">contents</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">board</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[derive fintype]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">move</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">start_square</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">occupied_start</span> <span class=\"o\">:</span> <span class=\"n\">b.contents</span> <span class=\"n\">start_square</span> <span class=\"bp\">=</span> <span class=\"n\">b.contents</span> <span class=\"n\">start_square</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 214509912,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603657150
    },
    {
        "content": "<p>ok, fixed in <a href=\"https://github.com/leanprover-community/mathlib/issues/4777\">#4777</a></p>",
        "id": 214510633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603658046
    },
    {
        "content": "<p>Works, thank you!</p>",
        "id": 214511153,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603658653
    },
    {
        "content": "<p>Found another bug here if you're not tired of me already. I think minimal repro is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.derive_fintype</span>\n\n<span class=\"kd\">@[derive fintype]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">foo4</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"n\">y.1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[derive fintype]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">foo5</span> <span class=\"kd\">extends</span> <span class=\"o\">(</span><span class=\"n\">foo4</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">to_foo4</span> <span class=\"bp\">=</span> <span class=\"n\">to_foo4</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 214526503,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603679236
    },
    {
        "content": "<p>(Seems it doesn't like the <code>to_foo4</code> in particular.)</p>",
        "id": 214526511,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603679264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> This one is not a bug. The <code>fintype</code> deriver assumes that the fintype instance has the form (<code>fintype</code> on all type args -&gt; <code>fintype</code> on inductive), but for propositions you need <code>decidable_eq</code>, and even if you <code>derive decidable_eq</code> on <code>foo4</code> it still will have to assume that <code>m</code> and <code>n</code> have <code>decidable_eq</code>, which is not implied by <code>fintype</code>. So you have to state the correct assumptions manually, although you can still use the tactic to prove it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive [fintype, decidable_eq]</span><span class=\"o\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">foo4</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"n\">y.1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo5</span> <span class=\"kd\">extends</span> <span class=\"o\">(</span><span class=\"n\">foo4</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">to_foo4</span> <span class=\"bp\">=</span> <span class=\"n\">to_foo4</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo5.fintype</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">foo5</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tactic.mk_fintype_instance</span>\n</code></pre></div>",
        "id": 214534277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603689622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Apologies I think I slightly oversimplified the example, just to be sure, it's this one (which even with that manual declaration produces the error I see in my real code, shown at the bottom here): </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.derive_fintype</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">board</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">contents</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">board</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[derive [fintype, decidable_eq]</span><span class=\"o\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">foo4</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b.contents</span> <span class=\"bp\">=</span> <span class=\"n\">b.contents</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo5</span> <span class=\"kd\">extends</span> <span class=\"n\">foo4</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">to_foo4</span> <span class=\"bp\">=</span> <span class=\"n\">to_foo4</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo5.fintype</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">foo5</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tactic.mk_fintype_instance</span>\n</code></pre></div>\n\n<p>produces:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">lean</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">_inst_6</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">inferred</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">_inst_4</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">——————————————————————————————————————————————————————————————————————————————</span>\n<span class=\"o\">[</span><span class=\"n\">lean</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">_inst_6</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">inferred</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">_inst_4</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 214566405,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603715367
    },
    {
        "content": "<p>Let me see if I understand enough about what you explained to see whether that's still my fault.</p>",
        "id": 214566426,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603715378
    },
    {
        "content": "<p>OK I <em>think</em> if I follow what you told me this morning that that's now \"fixed\" about this example?</p>",
        "id": 214567134,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603715812
    },
    {
        "content": "<p>And now that error message is saying what... <code>derive_fintype</code> figured out how to make a <code>fintype</code> instance, but the one it made isn't equal enough to the one <code>fintype</code> wants? <del>Is that saying I need <code>foo5</code> to be <code>decidable_eq</code> too.. let's see.</del></p>",
        "id": 214567302,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603715926
    },
    {
        "content": "<p>You now have two decidable_eq assumptions, since you've got it in the variables</p>",
        "id": 214571593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603718370
    },
    {
        "content": "<p>you can actually use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foo5.fintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">foo5</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tactic.mk_fintype_instance</span>\n</code></pre></div>\n\n<p>or go back to the simple form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive fintype]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">foo5</span> <span class=\"kd\">extends</span> <span class=\"n\">foo4</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">to_foo4</span> <span class=\"bp\">=</span> <span class=\"n\">to_foo4</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>with this version</p>",
        "id": 214575544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603720329
    },
    {
        "content": "<p>Ahh ok I think I follow.</p>",
        "id": 214576448,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603720783
    },
    {
        "content": "<p>Yeah that indeed works perfectly again, I guess I didn't realize having <code>[decidable_eq m]</code> twice wasn't \"idempotent\", probably my understanding of precisely what that does is still too hazy, sorry for the noise, and thanks again.</p>",
        "id": 214577740,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603721373
    },
    {
        "content": "<p>It's just like having two <code>has_zero A</code> instances</p>",
        "id": 214578490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603721699
    },
    {
        "content": "<p>the two zeros aren't necessarily the same</p>",
        "id": 214578507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603721709
    },
    {
        "content": "<p>In this case, the two decidable instances are equal, because <code>decidable</code> is a subsingleton, but they aren't definitionally equal and the tactic is picking the wrong one up from typeclass inference</p>",
        "id": 214578592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603721748
    },
    {
        "content": "<p>ahh ok that I think is my misunderstanding -- I thought <code>[decidable_eq m]</code> means \"make sure m is a type for which instances have decidable equality\"</p>",
        "id": 214578594,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603721749
    },
    {
        "content": "<p>it means literally get me an instance of that type?</p>",
        "id": 214578626,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603721762
    },
    {
        "content": "<p>(one with that property)</p>",
        "id": 214578681,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603721768
    },
    {
        "content": "<p>er, term, sorry</p>",
        "id": 214578688,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603721770
    },
    {
        "content": "<p>yes, it's literally an extra argument to the instance</p>",
        "id": 214578713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603721784
    },
    {
        "content": "<p>got it</p>",
        "id": 214578737,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603721802
    },
    {
        "content": "<p>You can <code>#print foo5.fintype</code> to see all the instance arguments that are going into it</p>",
        "id": 214578743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603721805
    },
    {
        "content": "<p>you should try to avoid having duplicate instance arguments</p>",
        "id": 214578765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603721823
    },
    {
        "content": "<p>what do you do in your case? where you want 2 <code>has_zero</code>s?</p>",
        "id": 214578854,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603721864
    },
    {
        "content": "<p>why would you ever want that? That's just asking for trouble to notate two distinct elements with the same notation</p>",
        "id": 214578946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603721901
    },
    {
        "content": "<p>ok good</p>",
        "id": 214579029,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603721940
    },
    {
        "content": "<p>thanks that makes a lot more sense now</p>",
        "id": 214579065,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603721957
    }
]