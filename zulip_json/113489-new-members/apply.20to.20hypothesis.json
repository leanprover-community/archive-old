[
    {
        "content": "<p>How do you apply to an hypothesis.</p>\n<p>I know how to rewrite, etc. But I can't figure out how to work with a hypothesis (especially when using contradiction when the goal is false).</p>",
        "id": 207041026,
        "sender_full_name": "Rick Love",
        "timestamp": 1597528213
    },
    {
        "content": "<p>I'm not really sure what you're trying to do, but, from a logical point of view, you can't use the tactic <code>apply</code> on a hypothesis.</p>",
        "id": 207041260,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597528609
    },
    {
        "content": "<p><code>specialize</code></p>",
        "id": 207041290,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597528669
    },
    {
        "content": "<p>Yeah, that's probably what you're trying to do.</p>",
        "id": 207041345,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597528699
    },
    {
        "content": "<p>That will replace (i.e. specialize) some variables in the hypothesis with specific values.</p>",
        "id": 207041363,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597528735
    },
    {
        "content": "<p>would help to include goal state</p>",
        "id": 207041365,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597528742
    },
    {
        "content": "<p>Or maybe you want to go the other way around : if <code>hpq : p -&gt; q</code> and <code>hp : p</code> you can get <code>hq : q</code> just by writing <code>have hq := hpq hp</code> (\"applying\" <code>hpq</code> to <code>hp</code>)</p>",
        "id": 207041477,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597528859
    },
    {
        "content": "<p>use <code>hpq</code> and <code>hp</code> and <code>hq</code></p>",
        "id": 207041510,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597528903
    },
    {
        "content": "<p>Here is what I am working on:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">gcd_then_not_one_left_01</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span>\n    <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">-&gt;</span>\n    <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">hgcd</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">hcont</span><span class=\"o\">,</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hcont</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">revert</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hgcd</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n\n    <span class=\"c1\">-- Probably need to use one of:</span>\n    <span class=\"c1\">-- eq_zero_of_gcd_eq_zero_left</span>\n    <span class=\"c1\">-- gcd_pos_of_pos_left</span>\n\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p><a href=\"/user_uploads/3121/GSX-qwrsB5y290VwVrpO9vql/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/GSX-qwrsB5y290VwVrpO9vql/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/GSX-qwrsB5y290VwVrpO9vql/image.png\"></a></div>",
        "id": 207041700,
        "sender_full_name": "Rick Love",
        "timestamp": 1597529150
    },
    {
        "content": "<p>and what do you want to apply to what hypothesis?</p>",
        "id": 207041781,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597529241
    },
    {
        "content": "<p>So I was trying to use gcd_pos_of_pos_left on a_1</p>",
        "id": 207041844,
        "sender_full_name": "Rick Love",
        "timestamp": 1597529311
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">gcd_pos_of_pos_left</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">pos_of_dvd_of_pos</span> <span class=\"o\">(</span><span class=\"n\">gcd_dvd_left</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">mpos</span>\n</code></pre></div>",
        "id": 207041871,
        "sender_full_name": "Rick Love",
        "timestamp": 1597529363
    },
    {
        "content": "<p>It's not exactly the same (but I can figure out how to adjust the 1 to the 0)</p>",
        "id": 207041936,
        "sender_full_name": "Rick Love",
        "timestamp": 1597529446
    },
    {
        "content": "<p>You can't deduce <code>p</code> from a proof of <code>q</code> and a proof of <code>p -&gt; q</code>.</p>",
        "id": 207041999,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597529531
    },
    {
        "content": "<p>It sounds like that's what you're trying to do</p>",
        "id": 207042016,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597529567
    },
    {
        "content": "<p>Unless I'm misunderstanding</p>",
        "id": 207042020,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597529573
    },
    {
        "content": "<p>For the lemma you're trying to prove, I would use the fact that gcd(a,b) divides a, and the fact that, for two natural numbers m and n, if m is positive and n divides n then n is positive</p>",
        "id": 207042140,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597529717
    },
    {
        "content": "<p>Wait, that's false, everything divides 0</p>",
        "id": 207042161,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597529758
    },
    {
        "content": "<p>Well, I can deal with the gcd 0,0 = 0 case. I'm having trouble with the rest of it.</p>",
        "id": 207042226,
        "sender_full_name": "Rick Love",
        "timestamp": 1597529870
    },
    {
        "content": "<p>How is gcd defined? What's the gcd of 0 and 1?</p>",
        "id": 207042228,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597529874
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 207042267,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597529896
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 207042268,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597529911
    },
    {
        "content": "<p>yes, gcd of 0, n = 0 I believe</p>",
        "id": 207042271,
        "sender_full_name": "Rick Love",
        "timestamp": 1597529927
    },
    {
        "content": "<p>Ok, then use the fact that the gcd of a and b divides a*b</p>",
        "id": 207042282,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597529965
    },
    {
        "content": "<p>There is also these:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">eq_zero_of_gcd_eq_zero_left</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_or_pos</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">id</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"o\">(</span><span class=\"n\">gcd_pos_of_pos_left</span> <span class=\"bp\">_</span> <span class=\"n\">H1</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eq_zero_of_gcd_eq_zero_right</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">gcd_comm</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">eq_zero_of_gcd_eq_zero_left</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 207042283,
        "sender_full_name": "Rick Love",
        "timestamp": 1597529966
    },
    {
        "content": "<p>Oh then it's easy, there should be a lemma saying that a natural is positive if and only if it's not 0</p>",
        "id": 207042336,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597530016
    },
    {
        "content": "<p>The gcd of 0 and n is n</p>",
        "id": 207042337,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597530019
    },
    {
        "content": "<p>Yeah it's the sum of the ideals</p>",
        "id": 207042340,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597530032
    },
    {
        "content": "<p>I can't think of these things without thinking of ideals in Z</p>",
        "id": 207042354,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597530098
    },
    {
        "content": "<p>Anyway <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.pos_of_ne_zero\">docs#nat.pos_of_ne_zero</a></p>",
        "id": 207042503,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597530340
    },
    {
        "content": "<p>Jeez, my brain is not working right now</p>",
        "id": 207042558,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597530406
    },
    {
        "content": "<p>Oh nice, I needed that earlier on another problem.</p>",
        "id": 207042686,
        "sender_full_name": "Rick Love",
        "timestamp": 1597530618
    },
    {
        "content": "<p>Ok, so this is another problem I have. I have a hyp: hcont : a ≤ 1</p>\n<p>But I only care about the a = 1 case in order to reach my goal. The a=0 case is a contradiction. So how do I assume a = 1 and ignore the other case?</p>",
        "id": 207042811,
        "sender_full_name": "Rick Love",
        "timestamp": 1597530863
    },
    {
        "content": "<p>Why not prove a \\ne 0 next</p>",
        "id": 207042825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597530915
    },
    {
        "content": "<p>i.e. in general how do I ignore cases that are contradictions, but continue on cases that proceed to the goal?</p>",
        "id": 207042830,
        "sender_full_name": "Rick Love",
        "timestamp": 1597530926
    },
    {
        "content": "<p>You can't ignore cases</p>",
        "id": 207042832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597530942
    },
    {
        "content": "<p>I don't know, but you can just start the proof by applying nat.pos_of_ne_zero,</p>",
        "id": 207042833,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597530946
    },
    {
        "content": "<p>It's your job to prove the contradictions, not just assert that they're contradictions so you don't have to deal with them</p>",
        "id": 207042890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597530975
    },
    {
        "content": "<p>Ok, so how would you set up cases so that one branch ends with a contradiction (proving that the case is invalid), but the other case is successful?</p>",
        "id": 207042966,
        "sender_full_name": "Rick Love",
        "timestamp": 1597531116
    },
    {
        "content": "<p>Assuming you prove a contradiction, the <code>contradiction</code> tactic will close the goal</p>",
        "id": 207042967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597531121
    },
    {
        "content": "<p>If you start by applying nat.pos_of_ne_zero, that reduces to proving the gcd is nonzero, then use contradiction and one of the lemmas above to contradict the fact that a is nonzero</p>",
        "id": 207042971,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597531137
    },
    {
        "content": "<p>Well, it won't directly:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span>\n<span class=\"k\">with</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 207043099,
        "sender_full_name": "Rick Love",
        "timestamp": 1597531346
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 207043107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597531370
    },
    {
        "content": "<p>the message says that you tried to apply something that proves <code>? &gt; 0</code></p>",
        "id": 207043114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597531385
    },
    {
        "content": "<p>you need <code>a &gt; 1</code></p>",
        "id": 207043117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597531391
    },
    {
        "content": "<p>I suppose you did what adam said and applied <code>nat.pos_of_ne_zero</code>. That will prove <code>a &gt; 0</code> from <code>a != 0</code>, but what you need is <code>a &gt; 1</code></p>",
        "id": 207043176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597531501
    },
    {
        "content": "<p>But even then:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">gcd_then_not_one_left_02</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span>\n    <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">-&gt;</span>\n    <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">le_or_gt</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span>\n<span class=\"k\">with</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">case</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 207043235,
        "sender_full_name": "Rick Love",
        "timestamp": 1597531571
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, don't forget the imports</p>",
        "id": 207043245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597531606
    },
    {
        "content": "<p>Nevermind, I did the wrong case</p>",
        "id": 207043254,
        "sender_full_name": "Rick Love",
        "timestamp": 1597531633
    },
    {
        "content": "<p>Ok, so I can create a new hypothesis, but my goal is unchanged...</p>",
        "id": 207043310,
        "sender_full_name": "Rick Love",
        "timestamp": 1597531714
    },
    {
        "content": "<p>Oh sorry, I misread your original lemma. But once you prove that a is nonzero, you can use divisibility by the gcd to prove that it's &gt;1</p>",
        "id": 207043390,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597531825
    },
    {
        "content": "<p>Here's an easy set up:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">gcd_then_not_one_left_02</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"bp\">_|_|</span><span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- a is zero, prove a contradiction</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- a is one, interesting case</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span> <span class=\"c1\">-- a + 2 &gt; 1</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207043594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597532198
    },
    {
        "content": "<p>Thanks! That's helpful. My main goal is to learn helpful patterns.</p>",
        "id": 207043694,
        "sender_full_name": "Rick Love",
        "timestamp": 1597532394
    },
    {
        "content": "<p>How does this work?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 207043785,
        "sender_full_name": "Rick Love",
        "timestamp": 1597532501
    },
    {
        "content": "<p>Lean knows a decision procedure for natural number less than (among many other things), and this procedure can determine that <code>a + 2 &gt; 1</code> is true before evaluating <code>a</code>, so it is true for all <code>a</code>. This technique only works in limited circumstances but it's nice when it works</p>",
        "id": 207043851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597532630
    },
    {
        "content": "<p>That's some rcases voodoo too...</p>",
        "id": 207043914,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597532700
    },
    {
        "content": "<p>Perhaps a more useful way to close that last case is <code>{ simp [succ_eq_add_one] }</code></p>",
        "id": 207043925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597532718
    },
    {
        "content": "<p>Ok, I usually try: <code>simp</code>, <code>cc</code>, <code>ring</code> which sometimes work</p>",
        "id": 207043927,
        "sender_full_name": "Rick Love",
        "timestamp": 1597532720
    },
    {
        "content": "<p><code>rcases</code> is awesome</p>",
        "id": 207043928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597532724
    },
    {
        "content": "<p>Yeah, cc works in this case</p>",
        "id": 207043940,
        "sender_full_name": "Rick Love",
        "timestamp": 1597532757
    },
    {
        "content": "<p>What's exactly going on with this rcases?</p>",
        "id": 207043998,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597532821
    },
    {
        "content": "<p>it's best to use tactics only when you know why they work though; the strategy of trying everything that works runs out of steam once you get to larger scale</p>",
        "id": 207044002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597532826
    },
    {
        "content": "<p>The <code>rcases</code> splits the nat into three cases, 0,1,a+2</p>",
        "id": 207044005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597532846
    },
    {
        "content": "<p>because <code>nat</code> is an inductive type</p>",
        "id": 207044012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597532858
    },
    {
        "content": "<p>that's the easiest way to handle this sort of argument where you want to say that a = 0 or a = 1 or a &gt; 1</p>",
        "id": 207044056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597532904
    },
    {
        "content": "<p>Ok, so I'm still trying to figure out the contradiction:</p>\n<p>So the first case is a clear contradiction in the goal:</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"c1\">-- a is zero, prove a contradiction</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 207044057,
        "sender_full_name": "Rick Love",
        "timestamp": 1597532906
    },
    {
        "content": "<p>it's not clear to me. why is it clear to you?</p>",
        "id": 207044066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597532936
    },
    {
        "content": "<p>oh you mean the goal is a contradiction</p>",
        "id": 207044077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597532976
    },
    {
        "content": "<p>Well I mean 0 &gt; 1 is not true... oh so is this just <code>false</code></p>",
        "id": 207044080,
        "sender_full_name": "Rick Love",
        "timestamp": 1597532980
    },
    {
        "content": "<p>the goal doesn't really matter</p>",
        "id": 207044084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597532987
    },
    {
        "content": "<p>because you are proving a contradiction in this case</p>",
        "id": 207044085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597532996
    },
    {
        "content": "<p>the question is why <code>0.gcd b &gt; 1</code> is false</p>",
        "id": 207044127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597533010
    },
    {
        "content": "<p>Ok, so it would be the same if I started with exfalso to get rid of that.</p>\n<p>Ah, I see</p>",
        "id": 207044131,
        "sender_full_name": "Rick Love",
        "timestamp": 1597533032
    },
    {
        "content": "<p>you can use exfalso if it helps cognitively, but it's usually not needed</p>",
        "id": 207044143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597533080
    },
    {
        "content": "<p>Yeah, I'm still fuzzy on how to fulfill the false goal. Usually I try to create contradictory hypothesis and revert them and then use 'simp' and that sometimes works.</p>\n<p>What is the correct way to complete it?</p>",
        "id": 207044220,
        "sender_full_name": "Rick Love",
        "timestamp": 1597533232
    },
    {
        "content": "<p>I would first try to figure out what <code>gcd 0 b</code> is</p>",
        "id": 207044377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597533436
    },
    {
        "content": "<p>that seems like the sort of thing that would have a simp lemma</p>",
        "id": 207044381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597533452
    },
    {
        "content": "<p>Well, I think it has two cases: gcd 0 0 = 0, gcd 0 d = d,</p>",
        "id": 207044465,
        "sender_full_name": "Rick Love",
        "timestamp": 1597533545
    },
    {
        "content": "<p>Your lemma is false. gcd 0 10 &gt; 1 but 0 is not &gt; 1.</p>",
        "id": 207044681,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597533952
    },
    {
        "content": "<p>You can prove that gcd a b &gt; 1 implies that a&gt;1 or b&gt;1</p>",
        "id": 207044907,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597534370
    },
    {
        "content": "<p>Or you can add an assumption that a is nonzero to begin with.</p>",
        "id": 207044912,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597534419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329841\">@Rick Love</span> those two cases look the same to me</p>",
        "id": 207044914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597534431
    },
    {
        "content": "<p>Don't look at the definition of <code>gcd</code>, look at the API</p>",
        "id": 207044951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597534444
    },
    {
        "content": "<p>that would be the theorems in <code>data.nat.gcd</code></p>",
        "id": 207044954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597534455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/apply.20to.20hypothesis/near/207044681\">said</a>:</p>\n<blockquote>\n<p>Your lemma is false. gcd 0 10 &gt; 1 but 0 is not &gt; 1.</p>\n</blockquote>\n<p>Good catch. I tried working with nat+, but it seems akward so I keep forgetting to include the assumptions</p>",
        "id": 207045303,
        "sender_full_name": "Rick Love",
        "timestamp": 1597535164
    },
    {
        "content": "<p>pnat are the \"actual\" natural numbers anyway. (I can already feel the angry responses.)</p>",
        "id": 207045315,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597535237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/apply.20to.20hypothesis/near/207044912\">said</a>:</p>\n<blockquote>\n<p>Or you can add an assumption that a is nonzero to begin with.</p>\n</blockquote>\n<p>What is the best way to write an assumption?</p>\n<p>I just put <code>a &gt; 1 -&gt; b &gt; 1 -&gt; ...</code> at the beginning usually, but is there a better way?</p>",
        "id": 207045316,
        "sender_full_name": "Rick Love",
        "timestamp": 1597535248
    },
    {
        "content": "<p>Use something like Mario wrote, adding the hypotheses before the colon. But make it &gt;0 <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span>️</p>",
        "id": 207045368,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597535346
    },
    {
        "content": "<p>Ah, I see so each assumption would get it's own (hn:...)</p>",
        "id": 207045432,
        "sender_full_name": "Rick Love",
        "timestamp": 1597535514
    },
    {
        "content": "<p>Note that if you used pnats instead of Nats, Mario's rcases trick probably would not work as is.</p>",
        "id": 207045480,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597535613
    },
    {
        "content": "<p>But if you add in the hypotheses on the nats, it should be ok.</p>",
        "id": 207045532,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597535683
    },
    {
        "content": "<p>Rick, did you try to do the <a href=\"https://github.com/leanprover-community/tutorials/blob/master/README.md\">Lean tutorial</a> or read <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">Mathematics in Lean</a>? I looks like you still have some basic stuff to learn.</p>",
        "id": 207045643,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597535955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/apply.20to.20hypothesis/near/207045643\">said</a>:</p>\n<blockquote>\n<p>Rick, did you try to do the <a href=\"https://github.com/leanprover-community/tutorials/blob/master/README.md\">Lean tutorial</a> or read <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">Mathematics in Lean</a>? I looks like you still have some basic stuff to learn.</p>\n</blockquote>\n<p>Yeah, I've read alot and done some tutorials, but there is a difference between a spoonfed walkthrough and actually trying to create your own objectives and learning which patterns are actually useful.</p>",
        "id": 207046857,
        "sender_full_name": "Rick Love",
        "timestamp": 1597538229
    },
    {
        "content": "<p>But haven't done those tutorials, so I'll work on those also since I can see they go beyond the other resources and I'll probably retain more than <code>Mathematics in Lean</code></p>",
        "id": 207046904,
        "sender_full_name": "Rick Love",
        "timestamp": 1597538288
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> after getting the tutorial repo and scanning through the exercises, I can see there are many things covered that I have questions about.</p>",
        "id": 207047089,
        "sender_full_name": "Rick Love",
        "timestamp": 1597538670
    }
]