[
    {
        "content": "<p>At the end of my proof for this exercise, what remains is to show <code>-M ≤ f x</code> given <code>-f x ≤ M</code>, and for some reason <code>linarith</code> is not working for me.  The proof I'm trying is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- 0079</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">bdd_below_segment</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">continuous_at_pt</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">continuous_opposite</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">bdd_above_segment</span> <span class=\"n\">hf&#39;</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"n\">bdd</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">inc</span><span class=\"o\">,</span> <span class=\"n\">specialize</span> <span class=\"n\">bdd</span> <span class=\"n\">x</span> <span class=\"n\">inc</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I know the proof is \"good\" since I can insert the following two lines before <code>linarith</code> to rewrite the inequalities as <code>0 ≤ M + f x</code> and <code>0 ≤ f x + M</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">sub_nonneg</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">sub_nonneg</span> <span class=\"n\">at</span> <span class=\"n\">bdd</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">bdd</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>and then <code>linarith</code> will do its job.</p>\n<p>The <code>linarith</code> tactic still seems unhappy even if I clear out everything from the current context but the inequality and the types of the variables.  Strangely, the exercise's solution successfully uses <code>linarith</code> with almost exactly the same context.</p>\n<p>(My best guess is that the lambda expression is being beta reduced only in the goal viewer, but for some reason <code>linarith</code> can't deal with that; however, <code>linarith!</code> doesn't work either.  Whatever is going on, I'm not sure how to deal with it properly.)</p>",
        "id": 199809507,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591305427
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 199810539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591306052
    },
    {
        "content": "<p>Have you tried <code>have : -f x ≤ M := inc, show -M ≤ f x, linarith</code>?</p>",
        "id": 199810712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591306139
    },
    {
        "content": "<p>if there is any funny business going on in the types of <code>inc</code> or the goal this should fix it</p>",
        "id": 199810830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591306211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/tutorial.200079/near/199810539\">said</a>:</p>\n<blockquote>\n<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>\n</blockquote>\n<p>I thought referencing a tutorial exercise counted as a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, especially for a proof as short as this, though I do appreciate how having a self-contained example would be better.</p>\n<p>It does turn out that</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">bdd</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>is enough to make <code>linarith</code> happy.  What is frustrating is that in the goal window, <code>bdd : -f x ≤ M</code> is literally one of the hypotheses.  How can I figure out what makes <code>linarith</code> fail here?  Expanding on what I said earlier, all I can guess is that the goal window automatically beta reduces <code>(λ (x : ℝ), -f x) x</code>, but somehow this is not equivalent to <code>-f x</code> in the eyes of <code>linarith</code>.</p>",
        "id": 199813070,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591307444
    },
    {
        "content": "<p>A link to the tutorial exercise would be good (in place of a MWE). There are a couple of things out there that could be called tutorial (the old lean one, the new community one), I guess you mean the new one though?</p>",
        "id": 199813539,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1591307750
    },
    {
        "content": "<p>For a question like this it is really best to actually extract a MWE not using the tutorial. Use the usual techniques: put it in its own file, stub out everything that doesn't matter while preserving the interesting failure until you have something that is actually a test case for <code>linarith</code></p>",
        "id": 199814203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591308157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/tutorial.200079/near/199813539\">said</a>:</p>\n<blockquote>\n<p>A link to the tutorial exercise would be good (in place of a MWE). There are a couple of things out there that could be called tutorial (the old lean one, the new community one), I guess you mean the new one though?</p>\n</blockquote>\n<p>I'm following what you get from <code>leanproject get tutorials</code>, and its README said to just create a zulip thread like 'tutorials NNNN'.  Here's a link to the solution, which is almost the same as mine: <a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/solutions/09_limits_final.lean#L317\">https://github.com/leanprover-community/tutorials/blob/master/src/solutions/09_limits_final.lean#L317</a></p>\n<p>The difference seems to be the way it constructs the hypothesis I called <code>hf'</code>, which seems to effectively incorporate the <code>have : -f x ≤ M := bdd</code> fix.</p>",
        "id": 199814288,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591308218
    },
    {
        "content": "<p>the point of a MWE isn't just so that people know what you are talking about, it is so that the problem is isolated. This is half of the way to the solution and you may find you have solved the problem before you even post it</p>",
        "id": 199814320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591308236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/tutorial.200079/near/199814320\">said</a>:</p>\n<blockquote>\n<p>the point of a MWE isn't just so that people know what you are talking about, it is so that the problem is isolated. This is half of the way to the solution and you may find you have solved the problem before you even post it</p>\n</blockquote>\n<p>I get that, and I'm working on making a MWE (and figuring out some basics to do so that haven't been covered by the tutorials so far...), but, while I can see why it appears the question is about <code>linarith</code>, it's actually this: is there any general advice for how to deal with a misleading goal window?  (And a followup: is there a tactic that will do whatever <code>have : -f x ≤ M := bdd</code> is doing without my having to type out a hypothesis?)</p>\n<p>To be somewhat more complete about what I mean by misleading, in the linked solution, the context right before the use of <code>linarith</code> has <code>hM : -f x ≤ M</code> and for mine it has <code>bdd : -f x ≤ M</code>, yet for some reason this is different.  This is rather frustrating for someone just learning Lean.</p>",
        "id": 199817064,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591310099
    },
    {
        "content": "<p><code>set_option pp.implicit true</code> (or <code>set_option pp.all true</code>) will disable some of the pretty-printing which can help distinguish such goals. Try <code>#help options</code> to see all such options.</p>\n<p>Unfortunately, there's still a ton of frustrating things about learning and using Lean...</p>",
        "id": 199817347,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591310313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/tutorial.200079/near/199817347\">said</a>:</p>\n<blockquote>\n<p><code>set_option pp.all true</code></p>\n</blockquote>\n<p>Thanks for the suggestion; I wasn't aware of the pretty print options.  Setting <code>set_option pp.beta false</code> and then doing <code>have bdd': -f x ≤ M := bdd</code> results in a context containing</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">bdd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">bdd&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span>\n</code></pre></div>\n\n\n<p>This suggests my theory about beta reduction might be correct.  Is there a tactic that will beta reduce something like the left-hand-side of <code>bdd</code>?  (Or am I fundamentally mistaken that this should be possible?)</p>",
        "id": 199819406,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591311743
    },
    {
        "content": "<p><code>dsimp at bdd</code> works.</p>",
        "id": 199819802,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591312078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/tutorial.200079/near/199819802\">said</a>:</p>\n<blockquote>\n<p><code>dsimp at bdd</code> works.</p>\n</blockquote>\n<p>It looks like I should have tried <code>simp at bdd</code>.  Thanks, this is enough of a solution for me for now.</p>",
        "id": 199820296,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591312463
    },
    {
        "content": "<p>It turns out the tutorial file contains <code>set_option pp.beta true</code> at the top, which is what led to all this confusion.  Is there a reason for it being there?</p>\n<p>Here's a MWE showing how it's confusing:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">beta</span> <span class=\"n\">true</span> <span class=\"c1\">-- this is at the top of 09_limits_final.lean</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c1\">-- fails, because H&#39; is not actually -x ≤ 0, despite what the goal window shows.</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>(Adding <code>simp at H'</code> before <code>linarith</code> saves the proof.)</p>",
        "id": 199821069,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591313072
    },
    {
        "content": "<p>this is why the option is disabled by default in the first place</p>",
        "id": 199821681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591313575
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 199839359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591337931
    },
    {
        "content": "<p>I really think people should stop asking for a mwe when a message topic is <code>tutorial NNNN</code>. This whole mwe thing is very unwelcoming but it is usually necessary, we have no other option in general. Here everybody interested in helping beginners can type <code>leanproject get tutorials</code> and wait 15 seconds. You don't have to do it for every question, the tutorials haven't change since they were released, and I don't plan to change them (the plan is <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> taking over).</p>",
        "id": 199845244,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591343926
    },
    {
        "content": "<p>Let me turn to the question now. In my course where these exercises began their life, I have <code>set_option pp.beta true</code> on top of many files, because this is a course in mathematics, and it doesn't make any sense to write non-beta reduced things in the real world. To be honest I have no idea why Lean tolerates non beta-reduced terms, I guess it's for performance reasons. Now the surprising thing is I think no student ever met this issue. It would be very annoying otherwise. In the tutorials project context the situation is different, the focus is more on teaching Lean and less on teaching how to prove stuff. So here it definitely makes sense to remove that <code>pp</code> option, and add a paragraph of explanations about <code>dsimp only at bdd</code> before the first exercise where it could show up. PR welcome.</p>",
        "id": 199845782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591344281
    }
]