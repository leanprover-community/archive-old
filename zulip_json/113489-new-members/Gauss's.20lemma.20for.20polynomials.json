[
    {
        "content": "<p>Looking for a decent piece of work to use to teach myself Lean, I've sized up <a href=\"https://github.com/leanprover-community/mathlib/issues/2871\">https://github.com/leanprover-community/mathlib/issues/2871</a> as something that looks nice and chunky (and will require me to learn a lot) while still being reasonably achievable. Can't see any work on it in any pull requests / public branches, so I'm gonna give it a try unless someone tells me not to :)</p>",
        "id": 206932772,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597414086
    },
    {
        "content": "<p>Hmmm, I'm still surprised we don't have this.</p>",
        "id": 206932906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597414186
    },
    {
        "content": "<p>But I don't think we got it since that issue was opened...</p>",
        "id": 206932970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597414205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328624\">@Iain Monro</span> A quick grep through the source code confirms that this is still an open hole. I greatly encourage you to take this on (-;</p>",
        "id": 206933381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597414458
    },
    {
        "content": "<p>I assume you've seen the maths before?</p>",
        "id": 206933408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597414475
    },
    {
        "content": "<p>Yep, in a lecture ten years ago and on the Wikipedia page yesterday :p</p>",
        "id": 206933666,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597414618
    },
    {
        "content": "<p>I shouldn't be too rusty though!</p>",
        "id": 206933709,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597414645
    },
    {
        "content": "<p>You should also probably prove that polynomial rings over a finite set of variables are UFD's.</p>",
        "id": 206940190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597418298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'll start with the version for univariate polynomials, and once I've got my head around that, hopefully it won't be too bad to generalise it!</p>",
        "id": 206947087,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597421772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328624\">@Iain Monro</span> We've done that several times before, I'm pretty sure it will work fine.</p>",
        "id": 206947303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597421892
    },
    {
        "content": "<p>Early sketch of the proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">localization</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normalization_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">unique_factorization_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">associates</span> <span class=\"n\">R</span><span class=\"o\">)]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">content</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">is_primitive</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">content</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">def</span> <span class=\"n\">primitive_part</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">R</span><span class=\"o\">)):</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">embed_in_field_of_fractions</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_map</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">primitive_part_is_primitive</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">R</span><span class=\"o\">)):</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">primitive_part</span><span class=\"bp\">.</span><span class=\"n\">is_primitive</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">primitive_part_of_irreducible_is_irreducible</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">R</span><span class=\"o\">)):</span> <span class=\"kn\">irreducible</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kn\">irreducible</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">primitive_part</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">irreducibility_condition</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"kn\">irreducible</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">is_primitive</span> <span class=\"bp\">∧</span> <span class=\"kn\">irreducible</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">embed_in_field_of_fractions</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- Turn the PID instance for `polynomial (fraction_ring R)` into a UFD instance</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">principal_ideal_ring</span><span class=\"bp\">.</span><span class=\"n\">to_unique_factorization_domain</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">unique_factorization_domain</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">unique_factorization_domain</span><span class=\"bp\">.</span><span class=\"n\">of_unique_irreducible_factorization</span> <span class=\"o\">{</span>\n  <span class=\"n\">factors</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">unique_factorization_domain</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">embed_in_field_of_fractions</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">primitive_part</span><span class=\"o\">,</span>\n  <span class=\"n\">factors_prod</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">irreducible_factors</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">unique</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">polynomial</span>\n</code></pre></div>\n\n\n<p>I'm guessing that the <code>polynomial</code> namespace and <code>src\\ring_theory\\polynomial\\unique_factorization.lean</code> are a good place for it.</p>",
        "id": 206949573,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597423170
    },
    {
        "content": "<p>Hey, before you embark on this, do you know mathlib's crazy definition of a UFD?</p>",
        "id": 206950283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597423560
    },
    {
        "content": "<p>It's not a predicate on integral domains, it contains data. Maybe you want to prove this for some predicate <code>is_UFD</code>?</p>",
        "id": 206950413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597423609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> do you have one of these up your sleeve? Lean currently only (as far as I know) has constructive UFD's; to make a UFD structure on an ID you actually have to produce a function which factors each nonzero element, as opposed to just proving that such a function exists. I am unclear about whether such a thing will be easier to reason about but my <em>guess</em> is that it will cause problems.</p>",
        "id": 206950766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597423812
    },
    {
        "content": "<p>mathlib's definition of a UFD makes a reasonable amount of sense to me.</p>",
        "id": 206950773,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597423819
    },
    {
        "content": "<p>What would a predicate-based proof of this look like?</p>",
        "id": 206950894,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597423879
    },
    {
        "content": "<p>So far the only thing I have is that with an instance of <code>normalization_domain</code>, we could choose a constructive UFD instance</p>",
        "id": 206952549,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597424659
    },
    {
        "content": "<p>I suspect that making the function (probably using the axiom of choice) and then proving things about it won't be much fun. I'd happily be proved wrong! After much discussion on how commutative ring theory should look, we decided on base definitions of <code>comm_ring</code> and <code>integral_domain</code>, and then everything else should be predicates on top, because this solves type class inference. It's on my job list to make a Prop-valued <code>is_UFD</code> but I've not done it yet (we have Prop-valued local rings and DVRs and principal ideal rings, but I have been distracted by valuations and haven't got to UFD's yet). For reasoning, Prop-valued classes are the best.</p>",
        "id": 206953410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597425130
    },
    {
        "content": "<p>Ah, that does explain my confusion at the difference between the definitions of UFDs and PIDs.</p>",
        "id": 206953825,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597425369
    },
    {
        "content": "<p>I was going to be hiding the AoC stuff behind <code>normalization_domain</code>, which I had unquestioningly picked up from the GCD domain definition.</p>",
        "id": 206955380,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597426251
    },
    {
        "content": "<p>Happy to try to convert UFD into a predicate before trying this, if it helps standardise things.</p>",
        "id": 206955443,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597426292
    },
    {
        "content": "<p>On the math stream, I’ve been talking about my plans for some of the domain criteria</p>",
        "id": 206956464,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597426939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328624\">@Iain Monro</span> If you start working on <a href=\"https://github.com/leanprover-community/mathlib/issues/2871\">#2871</a>, please also post a note on that issue page to \"claim\" the task <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 207111383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597646807
    },
    {
        "content": "<p>I've claimed it, because I already have plans for part of it, but I certainly don't want to keep you out of it, <span class=\"user-mention\" data-user-id=\"328624\">@Iain Monro</span>.</p>",
        "id": 207176211,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597687180
    },
    {
        "content": "<p>I'm going to try to refactor UFDs once <a href=\"https://github.com/leanprover-community/mathlib/issues/3838\">#3838</a> merges, and then it'll be easy to prove that a Noetherian GCD domain is a UFD.</p>",
        "id": 207176489,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597687313
    },
    {
        "content": "<p>However, it'll still be necessary to prove the formulation of Gauss's lemma that says that the polynomial ring over a GCD domain is a GCD domain.</p>",
        "id": 207176495,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597687314
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"328624\">@Iain Monro</span>, if you haven't made up your mind, I'd recommend working on Gauss's lemma in the context of <code>gcd_monoid</code> first. Technically this will still require a <code>normalization_monoid</code> instance, but it sounds like you were going to use that anyway.</p>",
        "id": 207176841,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597687461
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4156\">#4156</a></p>",
        "id": 210082461,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600133525
    },
    {
        "content": "<p>Once that's done, Gauss's Lemma (in the sense of putting an instance of <code>gcd_monoid</code> on a polynomial ring over a <code>gcd_monoid</code>) should be enough to solve <a href=\"https://github.com/leanprover-community/mathlib/issues/2871\">#2871</a></p>",
        "id": 210082502,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600133587
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 210086773,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600139702
    },
    {
        "content": "<p>Nice!</p>",
        "id": 210094809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600151973
    },
    {
        "content": "<p>Sorry for the maybe stupid question, but is there enough material in the last PR (or somewhere else) to prove that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∈</mo><mi mathvariant=\"bold\">Z</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f \\in \\mathbf{Z}[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo separator=\"true\">,</mo><mi>h</mi><mo>∈</mo><mi mathvariant=\"bold\">Q</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g,h\\in \\mathbf{Q}[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Q</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> are all monic and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><mi>g</mi><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">f = gh</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo separator=\"true\">,</mo><mi>h</mi><mo>∈</mo><mi mathvariant=\"bold\">Z</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g,h \\in \\mathbf{Z}[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span>? Thanks!</p>",
        "id": 210537345,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1600443633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> ?</p>",
        "id": 210639406,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600556484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Gauss's.20lemma.20for.20polynomials/near/210537345\">said</a>:</p>\n<blockquote>\n<p>Sorry for the maybe stupid question, but is there enough material in the last PR (or somewhere else) to prove that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∈</mo><mi mathvariant=\"bold\">Z</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f \\in \\mathbf{Z}[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo separator=\"true\">,</mo><mi>h</mi><mo>∈</mo><mi mathvariant=\"bold\">Q</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g,h\\in \\mathbf{Q}[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Q</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> are all monic and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><mi>g</mi><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">f = gh</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo separator=\"true\">,</mo><mi>h</mi><mo>∈</mo><mi mathvariant=\"bold\">Z</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g,h \\in \\mathbf{Z}[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span>? Thanks!</p>\n</blockquote>\n<p>That's part of Gauss's lemma, which isn't in <a href=\"https://github.com/leanprover-community/mathlib/issues/4156\">#4156</a>.</p>",
        "id": 210639553,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600556720
    },
    {
        "content": "<p>My impression was that <span class=\"user-mention\" data-user-id=\"328624\">@Iain Monro</span> was interested in proving Gauss's lemma.</p>",
        "id": 210639623,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600556870
    },
    {
        "content": "<p>For now, I just have some notions on what formulation of Gauss's lemma we should prove in Lean, and I'm not 100% sure which parts <span class=\"user-mention\" data-user-id=\"328624\">@Iain Monro</span>  is looking to prove.</p>",
        "id": 210639819,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600557162
    },
    {
        "content": "<p>First, we define what it means for a polynomial with coefficients in a gcd domain to be primitive (gcd of the coefficients is 1). This will need the theory of <code>gcd</code> of a multiset/finset.</p>",
        "id": 210640007,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600557546
    },
    {
        "content": "<p>Then we show Gauss's Lemma, defined as \"the product of two primitive polynomials is primitive\".</p>",
        "id": 210640162,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600557827
    },
    {
        "content": "<p>That'd (at least basically) imply what <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> was saying.</p>",
        "id": 210640474,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600558395
    },
    {
        "content": "<p>Then we put a <code>gcd_monoid</code> instance on the polynomial ring over our gcd domain.</p>",
        "id": 210640480,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600558420
    },
    {
        "content": "<p>That finishes <a href=\"https://github.com/leanprover-community/mathlib/issues/2871\">#2871</a>.</p>",
        "id": 210640486,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600558432
    },
    {
        "content": "<p>I started <a href=\"https://github.com/leanprover-community/mathlib/tree/gauss_lemma\">branch#gauss_lemma</a>, which now has a basic version of Gauss's lemma, although it might not build overall, because I changed the definition of coprime.</p>",
        "id": 211859077,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601514569
    },
    {
        "content": "<p>There's still a lot of work that'd need to go into chopping it up into PRs, and a decent amount more work in turning it from this form (the content of the product of two polynomials is the product of the contents of the polynomials) to other forms</p>",
        "id": 211859316,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601514884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, when I get back to my computer, I’ll link to this branch on the github pull page</p>",
        "id": 212181909,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601746938
    },
    {
        "content": "<p>thx</p>",
        "id": 212182223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601747312
    },
    {
        "content": "<p>I see that multiplicitavity of content in now in mathlib, that's great!</p>",
        "id": 214043259,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1603283798
    },
    {
        "content": "<p>Is someone working on other versions of Gauss lemma? Like irreducibility in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Z</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Z}[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> is the same as irreducibility in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Q</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Q}[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Q</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span>?</p>",
        "id": 214043409,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1603283890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 214049356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603287034
    },
    {
        "content": "<p>I’m working first on providing a gcd instance on polynomials (which will also imply a ufd instance)</p>",
        "id": 214086171,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1603301497
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 214086559,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1603301663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> Is the fact that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo separator=\"true\">,</mo><mi>q</mi><mo>∈</mo><mi mathvariant=\"bold\">Z</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">p, q\\in \\mathbf{Z}[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> monic with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi mathvariant=\"normal\">∣</mi><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">p | q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Q</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Q}[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Q</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> then the quotient has integer coefficients written somewhere now? It should be not too hard but I don't want to redo something already done <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 216735597,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605369057
    },
    {
        "content": "<p>I don't think so... as I've already been dealing with the relevant things, I can make it happen.</p>",
        "id": 216743323,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605379229
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5003\">#5003</a></p>",
        "id": 216745234,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605381861
    },
    {
        "content": "<p>reviewed</p>",
        "id": 216745568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605382373
    },
    {
        "content": "<p>Wow, thank you!!</p>",
        "id": 216746413,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605383247
    },
    {
        "content": "<p>Technically it’ll only work over a gcd domain, but that’ll work fine here.</p>",
        "id": 216748094,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605385495
    },
    {
        "content": "<p>I think soon I should refactor <code>is_primitive</code> to mean “not divisible by non-unit constants”, which is equivalent over gcd domains</p>",
        "id": 216748147,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605385569
    },
    {
        "content": "<p>But I doubt there are any applications coming down the pipeline now that need that generality</p>",
        "id": 216748160,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605385622
    },
    {
        "content": "<p>For me it is more than enough! To start writing down the irreducibility of cyclotomic polynomials now I only need that minimal polynomials are irreducible (we have it for fields, it shouldn't be difficult). I will work on it tomorrow.</p>",
        "id": 216748845,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605386428
    },
    {
        "content": "<p>There is a lemma <code>minimal_polynomial.irreducible</code>, and I think it should apply here?</p>",
        "id": 216750931,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605389182
    },
    {
        "content": "<p>The trouble as I see it is showing that the product definition is in fact minimal, but perhaps you've figured that out.</p>",
        "id": 216751209,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605389610
    },
    {
        "content": "<p>The point is that  <code>minimal_polynomial.irreducible</code> works for minimal polynomials over a field. What I plan to do is to take <code>μ</code> a primitive root of unity, show <code>h : is_integral ℤ μ</code> (that is trivial), so I can consider <code>P := minimal_polynomial h</code>. At the end I want to prove that <code>P = cyclotomic n ℤ</code>, but first of all I need that <code>P</code> is the minimal polynomial over <code>ℚ</code>. I thought this was easy with Gauss' lemma, but now I see that I have to prove that <code>P</code> is irreducible. By definition it is the monic polynomial with minimal degree that has <code>μ</code> as root, showing the irreducibiity seems a little long, but not difficult.</p>",
        "id": 216751951,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605390379
    }
]