[
    {
        "content": "<p>Given a type <code>A</code>, how do I represent the type of all nonempty finsets of <code>A</code>. Is it <code>inhabited (finset A)</code> or <code>nonempty (finset A)</code> or something completely different?</p>",
        "id": 203871753,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1594752506
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 203872031,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594752669
    },
    {
        "content": "<p><code>{ s : finset A // s ≠ ∅ }</code></p>",
        "id": 203872415,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594752912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> If you want <code>nonempty</code>, maybe <code>{s : finset A // nonempty (↑s : set A)}</code>.  I think I like Kenny's more, though.</p>",
        "id": 203872496,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594752961
    },
    {
        "content": "<p><code>s.nonempty</code> avoids all that coercion</p>",
        "id": 203872555,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594752977
    },
    {
        "content": "<p>but yes, i also like the version with <code>\\ne</code></p>",
        "id": 203872579,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594752994
    },
    {
        "content": "<p>Oh, didn't know about that.  <code>{s : finset A // s.nonempty}</code></p>",
        "id": 203872632,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594753022
    },
    {
        "content": "<p><code>s.nonempty</code> is approximately equal to <code>finset.nonempty s</code></p>",
        "id": 203872796,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594753112
    },
    {
        "content": "<p>I wonder if the <code>s.nonempty</code> version might be better in practice because you get a witness, and you don't have to rewrite with <code>nonempty_iff_ne_empty</code>.</p>",
        "id": 203872863,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594753158
    },
    {
        "content": "<p>you also see things like <code>n.succ</code> for <code>nat.succ n</code> sometimes, though I think many people find the latter form preferable</p>",
        "id": 203872870,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594753161
    },
    {
        "content": "<p>Sorry, I just meant I didn't know about <code>finset.nonempty</code>.</p>",
        "id": 203872911,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594753187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> that works perfectly. Thanks!</p>",
        "id": 203874356,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1594753901
    },
    {
        "content": "<p>I have a new problem now:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">constant</span> <span class=\"n\">myset</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span> <span class=\"bp\">//</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">}</span>\n<span class=\"kn\">constant</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">myset</span>\n</code></pre></div>\n\n\n<p>This final check gives me the error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_mem</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>How do I create this instance <code>has_mem</code>? I think I somehow need to derive it using <code>finset.has_mem</code>?</p>",
        "id": 203879944,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1594756734
    },
    {
        "content": "<p>The <code>subtype</code> doesn't inherit any of the instances from <code>finset</code>, and I think you have to manually derive all the ones you want yourself (as far as I know).  One thing you can do without doing that is write <code>a ∈ myset.val</code> instead.</p>",
        "id": 203883711,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594758605
    },
    {
        "content": "<p>Phew. I will do that. I definitely don't want to derive these instances by hand if I can avoid it.</p>",
        "id": 203884176,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1594758805
    },
    {
        "content": "<p>Remember that the <code>{ ... // ... }</code> notation is shorthand for this type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">subtype</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>It bundles together a value with the property the value satisfies.  Depending on what you're doing, it might be easier to make all your functions/lemmas take two arguments: <code>(x : finset A) (h : x.nonempty)</code></p>",
        "id": 203884337,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594758863
    },
    {
        "content": "<p>What are you actually trying to do?</p>",
        "id": 203884350,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594758871
    },
    {
        "content": "<p>All those <code>constant</code> are not in your real code, right?</p>",
        "id": 203884396,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594758892
    },
    {
        "content": "<p>Why not just write the instances you want by hand?</p>",
        "id": 203884638,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594758987
    },
    {
        "content": "<p>There's only \\in and maybe \\subset, right?</p>",
        "id": 203885435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594759362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/type.20of.20nonempty.20finset.3F/near/203884396\">said</a>:</p>\n<blockquote>\n<p>All those <code>constant</code> are not in your real code, right?</p>\n</blockquote>\n<p>Right. This was just for the sake of the MWE.</p>",
        "id": 203886383,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1594759821
    },
    {
        "content": "<p>Slightly larger MWE to show what I am doing:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">Define CNFs in Lean-/</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">Literals of V are either positive V, negative V, or booleans.-/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">Lit</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Lit</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Lit</span>\n<span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">Lit</span>\n\n<span class=\"n\">def</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Lit</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Lit</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Lit</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Lit</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Lit</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Lit</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Lit</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Lit</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Lit</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Lit</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">tt</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">A Clause is a non-empty, finite set of Literals of V.-/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">Clause</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lits</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">Lit</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">})</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">A Cnf is a non-empty, finite set of Clauses of V.-/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">Cnf</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">clauses</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">Clause</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">})</span>\n</code></pre></div>",
        "id": 203886884,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1594760045
    },
    {
        "content": "<p>Another thing I am unsure about is if I should make defs instead of structures.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">Clause</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">Lit</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 203887172,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1594760175
    },
    {
        "content": "<p>Cnf stands for <em>conjunctive normal form</em></p>",
        "id": 203887280,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1594760246
    },
    {
        "content": "<p>Does a CNF actually need to be nonempty?</p>",
        "id": 203887298,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594760259
    },
    {
        "content": "<p>There's also the consideration of using lists instead of finsets.  A finset is a list with no duplicates modulo permutations, but a specific CNF might be an actual expression in a specific order.  You could have lemmas that say you can reorder things while preserving satisfiability.</p>",
        "id": 203887648,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594760424
    },
    {
        "content": "<p>I forgot to mention that you might not need the no duplicates assumption.  You could have additional lemmas that let you deduplicate literals or clauses in the CNF.</p>",
        "id": 203887739,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594760492
    },
    {
        "content": "<p>(Just for completeness: you could interpret an empty clause as being false, and an empty CNF as being true.  If I remember correctly, these sorts of things can naturally occur over the course of SAT solving.)</p>",
        "id": 203888214,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594760727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <br>\nI agree with everything you have said. However, I am trying to build towards to type of all \"reduced\" CNFs i.e. CNFs that have been reduced under the following tautologies:</p>\n<ul>\n<li><code>a ∨ a = a</code></li>\n<li><code>a ∧ a = a</code></li>\n<li><code>a ∨ ¬ a = ⊤</code></li>\n<li><code>a ∧ ¬ a = ⊥</code><br>\nIf I implement them as lists instead of finsets then I will have to define these recursive maps simplification maps, right? And then I'll have to prove that once all the tautology-rewriting is done then the resultant has no duplicates. And then I will finally be able to create a reduced CNF type. Hence I thought I will use finsets to enforce tautologies 1 and 2 from the very beginning.</li>\n</ul>",
        "id": 203890020,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1594761673
    },
    {
        "content": "<p>Don't you need to allow the empty lists to represent the true clause / false formula, then?</p>",
        "id": 203891976,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594762843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"241485\">@Vaibhav Karve</span> Take what I'm saying with a grain of salt because I haven't done enough Lean, but I would probably go through the following:</p>\n<ul>\n<li>Define the unreduced version of a CNF</li>\n<li>Define what it means for a clause to be reduced (see <code>list.nodup</code>)</li>\n<li>Define what it means for a CNF to be reduced</li>\n<li>Define a subtype of reduced CNFs</li>\n<li>Define a function <code>reduce</code> that reduces a CNF (and prove <code>reduce</code> results in a reduced CNF)</li>\n<li>Define a satisfying assignment and the set of satisfying assignments for a CNF</li>\n<li>Show that the set of satisfying assignments is unchanged after <code>reduce</code>.  Then you'll have some confidence the definitions are good.</li>\n</ul>\n<p>A complication with <code>finset</code> is that it is a quotient.  If you use <code>finset</code> instead of <code>list</code>, then you are going to have to deal with expressions being defined only up to permutation all the time.  If you really want this property, that two CNFs are equal even after permuting clauses and variables, then you might instead define an equivalence relation on CNFs (a <code>setoid</code> instance) and take the <code>quotient</code>, after the above work.</p>",
        "id": 203891982,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594762848
    },
    {
        "content": "<p>Thank you so much for that detailed outline. I am going to follow the <code>list</code> path.</p>",
        "id": 203893652,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1594763967
    }
]