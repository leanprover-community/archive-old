[
    {
        "content": "<p>Suppose I make</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">foo</span> <span class=\"bp\">|</span><span class=\"n\">A</span> <span class=\"bp\">|</span><span class=\"n\">B</span> <span class=\"bp\">|</span><span class=\"n\">C</span> <span class=\"bp\">|</span><span class=\"n\">D</span> <span class=\"bp\">|</span><span class=\"n\">E</span>\n</pre></div>\n\n\n<p>How can I show that<code>foo</code> is decidably equal with minimal faff?</p>",
        "id": 146870382,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541516904
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>@[derive decidable_eq] inductive foo |A |B |C |D |E\n</pre></div>",
        "id": 146870461,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541517001
    },
    {
        "content": "<p>win for Lean</p>",
        "id": 146870516,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541517019
    },
    {
        "content": "<p>What else can I <code>@[derive ...]</code>?</p>",
        "id": 146870537,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541517043
    },
    {
        "content": "<p>Not sure. In mathlib, if I search for derive, I only find <code>derive decidable_eq</code> and <code>derive has_reflect</code>.</p>",
        "id": 146870660,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541517138
    },
    {
        "content": "<p>I found <code>has_sizeof</code> in the wild</p>",
        "id": 146870661,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541517139
    },
    {
        "content": "<p>I would love to write some \"functorial\" derive handlers, for automatically showing constructions are functorial with respect to either morphisms in their arguments, or isomorphisms in their arguments. This would be part of a bigger program to do transport of structure.</p>",
        "id": 146895917,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541539605
    },
    {
        "content": "<p>Today Cyril worked quite a lot on transport stuff.</p>",
        "id": 146896228,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541539871
    },
    {
        "content": "<p>Ah, okay, what approach are they taking?</p>",
        "id": 146897672,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541541154
    },
    {
        "content": "<p>parametricity for free, or something like that</p>",
        "id": 146897712,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541541185
    },
    {
        "content": "<p><a href=\"https://hal.inria.fr/hal-01559073\" target=\"_blank\" title=\"https://hal.inria.fr/hal-01559073\">https://hal.inria.fr/hal-01559073</a></p>",
        "id": 146897752,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541541212
    },
    {
        "content": "<p>I would really like some feedback on my <code>iso_induction</code> approach sketched in the comments of <a href=\"https://github.com/leanprover/mathlib/issues/408\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/408\">https://github.com/leanprover/mathlib/issues/408</a>, and the very initial branch at <a href=\"https://github.com/leanprover-community/mathlib/commit/fc31a8c81040f2a7e087df890f1c848ff6d34eff\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/fc31a8c81040f2a7e087df890f1c848ff6d34eff\">https://github.com/leanprover-community/mathlib/commit/fc31a8c81040f2a7e087df890f1c848ff6d34eff</a>. </p>\n<p>It needs more examples of definitions shown to be functorial in their arguments (hopefully automatically) before you can really see how it would work.</p>",
        "id": 146897881,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541541341
    }
]