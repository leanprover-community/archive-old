[
    {
        "content": "<p>I've noticed that a lot of projects by students from Xena haven't made it to mathlib. In particular mathlib doesn't have all 3 Sylow's Theorems, even though Chris Hughes has formalized them. Is there a reason for not adding these? Is it a manpower issue, or a refactoring issue, or just \"no one has done it yet\" (or maybe something else entirely)?</p>",
        "id": 221257290,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609372978
    },
    {
        "content": "<p>Mathlib has some code quality guidelines and a review process, and a lot of people might be good enough to write a proof in lean but aren't bold enough to face the gauntlet of PR process, especially if they've never done it before. This probably requires some kind of mentorship process in order to help guide new users through the experience while maintaining the standards.</p>",
        "id": 221257541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609373327
    },
    {
        "content": "<p>That makes sense, but how does one get experience if they don't have a direct human mentor? I have a bit of code for nat.fib that I know isn't good enough for mathlib currently. Zulip seems like the obvious place to start, but I haven't seen much \"can someone tidy up my code for mathlib?\" posts. Presumably because it's tedious and time-consuming, so likely to be ignored? Saying people \"aren't bold enough to face the gauntlet of PR process\" is not making me feel bold. :/</p>",
        "id": 221258343,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609374169
    },
    {
        "content": "<p>We definitely get a \"can someone suggest improvements to my code to make it mathlib ready\" posts every now and then, less than just general questions about lean, but they do exist. Indeed one of my first posts to this chatroom long ago was a post like this. Personally I would welcome more such posts, and be happy to provide feedback! (nat.fib seems like a great place to start, it is sad that we don't have things like <a href=\"https://proofwiki.org/wiki/Divisibility_of_Fibonacci_Number\">https://proofwiki.org/wiki/Divisibility_of_Fibonacci_Number</a>) <br>\nYou should also check out <a href=\"https://leanprover-community.github.io/contribute/style.html\">https://leanprover-community.github.io/contribute/style.html</a> if you haven't already, and just read through some mathlib files of course, but note that mathlib is not homogenous, some people work a lot in tactic mode, some in term mode only, and some of mathlib was written before we started the current documentation requirements, so it might be best to look at some of the more recently merged PRs on github to get an idea for what the current best practices are.</p>",
        "id": 221259313,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609375381
    },
    {
        "content": "<p>Or these two <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.fib</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.gcd</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"sd\">/-- https://proofwiki.org/wiki/Consecutive_Fibonacci_Numbers_are_Coprime -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fib_succ_coprime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"bp\">$</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">ih</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fib_succ_succ</span><span class=\"o\">,</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">gcd_rec</span><span class=\"o\">,</span> <span class=\"n\">add_mod_right</span><span class=\"o\">,</span> <span class=\"n\">gcd_comm</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n      <span class=\"n\">gcd_rec</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))],</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n<span class=\"sd\">/-- https://proofwiki.org/wiki/Fibonacci_Number_in_terms_of_Smaller_Fibonacci_Numbers -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fib_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">m</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">succ_eq_add_one</span><span class=\"bp\">;</span> <span class=\"n\">ac_refl</span> <span class=\"o\">:</span> <span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n      <span class=\"n\">fib_succ_succ</span><span class=\"o\">,</span> <span class=\"n\">fib_succ_succ</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221259389,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609375500
    },
    {
        "content": "<p>Alex covered a lot of the same ground while I was typing this reply up, but in my opinion, anyone who's read the <a href=\"https://leanprover-community.github.io/contribute/index.html\">contributor guidelines</a> (or watched the youtube video linked there) and made an attempt to follow the suggestions there should feel free to request write access to mathlib and submit a PR. </p>\n<p>If you're still feeling nervous, you can always read over the open and closed PRs to get a sense of what the review process is like in practice, and you should always feel free to open a new thread here on Zulip for feedback about a potential contribution or if you have any questions about the process.</p>\n<p>I haven't seen very many threads here get completely ignored. In my opinion, a thread like \"can someone tidy up my code for mathlib\" is probably too much to ask for if your code is &gt; 100 lines or so. On the other hand, a similar post phrased like \"can I get some suggestions to make this code shorter / faster\" would definitely be welcomed (and in my opinion, you'd learn more from working through the suggestions).</p>",
        "id": 221259555,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609375683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"355764\">@Hanting Zhang</span> Welcome! If you want to contribute to mathlib, that's great. There are many people here on Zulip that would like to help you.</p>\n<p>Back when I started using Lean, my proofs were horrible. I posted something on Zulip, and Patrick Massot said: \"Great! Now you should golf your proofs, and clean them up.\" And I thought: Wait, what? How do I do that. And it took me some time to figure out all the tricks. But many people helped me, and I learned a lot of stuff.</p>\n<p>The biggest thing that matters whether someone PRs code to mathlib is</p>\n<ul>\n<li>\"you are happy that you finished the proof and want to move on to a new lemma\" vs</li>\n<li>\"you want to learn how to improve code quality and make the lemmas clean and reusable, and you like the idea of contributing to mathlib\"</li>\n</ul>\n<p>If you fall in the second category, and you don't mind it if your code goes through 10 iterations of improvements, then you should definitely make a PR. In general this community is very friendly, and we don't mind teaching people all the tricks.<br>\nInteraction is key.</p>",
        "id": 221271270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609393077
    },
    {
        "content": "<p>I have been very much of the opinion for years now that it's much more important to teach mathematicians to write _any code at all_ than it is to teach them to write mathlib-ready code. I find it a hard enough effort to write mathlib-ready code myself!</p>",
        "id": 221274718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609399461
    },
    {
        "content": "<p>On the other hand, if we want the \"library of undergrad maths\" to grow (and grow faster), then we should also occasionally teach people to write mathlib-ready code.</p>",
        "id": 221275347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609400553
    },
    {
        "content": "<p>People who are interested learn themselves by PRing</p>",
        "id": 221275423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609400752
    },
    {
        "content": "<p>Most mathematics that most people write is just stuff like solutions to problem sheet questions and is not at all appropriate for mathlib</p>",
        "id": 221275477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609400829
    },
    {
        "content": "<p>Even if these formalized problem sheet solutions out there aren’t suitable to be added to mathlib, if they rely on mathlib, I think it’d be worthwhile to collect feedback on what parts of the API are missing / hard to use.</p>",
        "id": 221276535,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609402608
    },
    {
        "content": "<p>I have been ignored often enough that now I  just maintain a local folder missing_mathlib.</p>",
        "id": 221285947,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1609416197
    },
    {
        "content": "<p>Make PR's!</p>",
        "id": 221286016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609416292
    },
    {
        "content": "<p>I was annoyed that the complex numbers were missing in 2017 so I just made a PR, and I didn't have a clue what I was doing at the time!</p>",
        "id": 221286026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609416328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111433\">Alistair Tucker</span> <a href=\"#narrow/stream/113489-new-members/topic/Expansion.20of.20mathlib/near/221285947\">said</a>:</p>\n<blockquote>\n<p>I have been ignored often enough that now I  just maintain a local folder missing_mathlib.</p>\n</blockquote>\n<p>I've started doing this too, but for different reasons - it means you can check your definitions are actually useful to you before immediately PRing them to mathlib. The workflow of</p>\n<ul>\n<li>Add the lemma to <code>missing_mathlib</code></li>\n<li>Use it in <code>your_project</code></li>\n<li>Adjust <code>missing_mathlib</code> as your project evolves, which probably makes your lemmas get slightly more general</li>\n<li>Make a PR to upstream bits and pieces of <code>missing_mathlib</code> that you don't expect to change any more</li>\n<li>Repeat</li>\n</ul>\n<p>is far more pleasant than</p>\n<ul>\n<li>Add the lemma to mathlib</li>\n<li>Wait 3 hours for it to build</li>\n<li>Go through a few cycles of review</li>\n<li>Upgrade mathlib in your project</li>\n<li>Find the lemma wasn't general enough for your use-cases</li>\n<li>Adjust the lemma in mathlib</li>\n<li>Repeat</li>\n</ul>",
        "id": 221286410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609416934
    },
    {
        "content": "<p>I suspect the level of ignored PRs / messages is higher at the moment due to seasonal holidays though</p>",
        "id": 221286462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609416992
    },
    {
        "content": "<p>Call me a conspiracy theorist, but I have this strange feeling that the computer scientists are watching the mathematicians trying to build a mathlib  and somewhere in the dark recesses of github they are building a mathematicianlib that will eat it someday!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 221305264,
        "sender_full_name": "Joel Healy",
        "timestamp": 1609436578
    },
    {
        "content": "<p>I look forward to early retirement and proving the Langlands philosophy at the touch of a button.</p>",
        "id": 221305307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609436629
    },
    {
        "content": "<p>or disproving...</p>",
        "id": 221305367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609436668
    },
    {
        "content": "<p>You clearly have no understanding of how mathematics works</p>",
        "id": 221305382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609436690
    },
    {
        "content": "<p>lol</p>",
        "id": 221305388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609436695
    },
    {
        "content": "<p>It's so beautiful, it must be true.</p>",
        "id": 221305400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609436710
    },
    {
        "content": "<p>Ahh.  You are a physicist then!</p>",
        "id": 221305415,
        "sender_full_name": "Joel Healy",
        "timestamp": 1609436737
    },
    {
        "content": "<p>Once I spent a few days learning about Bessel functions, and wrote some code which approximated a certain analytic function on the upper half plane. I evaluated it at two totally random apparently unrelated points and the numbers were equal. It was at this point that I became convinced of everything.</p>",
        "id": 221305481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609436783
    },
    {
        "content": "<p>Maybe this is why some physicists like Langlands</p>",
        "id": 221305489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609436801
    },
    {
        "content": "<p>The advantage of Langlands is that there is no competing theory. It just works more and more.</p>",
        "id": 221305511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609436821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Expansion.20of.20mathlib/near/221305481\">said</a>:</p>\n<blockquote>\n<p>It was at this point that I became convinced of everything.</p>\n</blockquote>\n<p><code>everything</code> = <code>Type</code>?</p>",
        "id": 221305601,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1609436909
    },
    {
        "content": "<p>If Langlands is false then it will just be some edge case, people will cheat and redefine what it says. In fact figuring out what it says in full generality is a notoriously tricky problem, and one which I forcefully argued should be fixed as part of my proposal for digitising Langlands (job ad out early Jan!)</p>",
        "id": 221305604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609436910
    },
    {
        "content": "<p>Everything is some finset of Props.</p>",
        "id": 221305623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609436927
    },
    {
        "content": "<p>But different people have different finsets.</p>",
        "id": 221305636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609436944
    },
    {
        "content": "<p>After you knock of Langlands, maybe work on string theory.</p>",
        "id": 221305718,
        "sender_full_name": "Joel Healy",
        "timestamp": 1609437005
    }
]