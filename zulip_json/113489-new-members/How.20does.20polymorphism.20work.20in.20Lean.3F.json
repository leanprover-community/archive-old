[
    {
        "content": "<p>For example, if I want to write</p>\n<div class=\"codehilite\"><pre><span></span>lemma tN (a b : ℕ) (a &gt; 0) : (a + b &gt; b) := sorry\nlemma tQ (a b : ℚ) (a &gt; 0) : (a + b &gt; b) := sorry\nlemma tR (a b : ℝ) (a &gt; 0) : (a + b &gt; b) := sorry\n</pre></div>\n\n\n<p>how do I convince Lean that the 2nd <code>+</code> is for ℚ and the 3rd <code>+</code> is for <code>ℝ</code>? Lean doesn't seem happy if I just write it like that. (Same question for <code>&gt;</code>.)</p>",
        "id": 183130857,
        "sender_full_name": "YH",
        "timestamp": 1576045412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249123\">@YH</span> This solves your error message:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">tN</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">tQ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">tR</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 183131586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576046363
    },
    {
        "content": "<p>The problem was with the positivity assumption</p>",
        "id": 183131591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576046387
    },
    {
        "content": "<p>Oh, OK. Let me check it out.</p>",
        "id": 183131639,
        "sender_full_name": "YH",
        "timestamp": 1576046415
    },
    {
        "content": "<p>Try eg:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">tQ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- cursor here</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 183131644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576046448
    },
    {
        "content": "<p>You'll see that the 2nd <code>a</code> in the statement is introduced as a new variable of type <code>nat</code></p>",
        "id": 183131650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576046471
    },
    {
        "content": "<p>I don't know why... it looks a bit buggy to me. But explicitly naming the hypothesis solves the issue</p>",
        "id": 183131655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576046493
    },
    {
        "content": "<p>Yes it works, thanks.</p>",
        "id": 183131663,
        "sender_full_name": "YH",
        "timestamp": 1576046520
    },
    {
        "content": "<p>Hypotheses before the colon need to be named, right?</p>\n<p>I would avoid <code>y &gt; x</code> if you can. Replace it with <code>x &lt; y</code>.</p>",
        "id": 183165431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576076693
    },
    {
        "content": "<p>I think the acceptance of <code>(a &gt; 0)</code> is a \"feature\" related to the parsing of <code>∀ x &gt; 0</code>. Not sure how intentional it is.</p>",
        "id": 183165704,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1576076850
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma a (α : Type*) (xs : list α) (x : α) (h : x ∈ xs) : true := sorry\nlemma b (α : Type*) (xs : list α) (x ∈ xs) : true := sorry\nlemma c (α : Type*) (xs : list α) : Π x ∈ xs, true := sorry\n</pre></div>\n\n\n<p>all yield the same type when using <code>check</code></p>",
        "id": 183166266,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1576077160
    }
]