[
    {
        "content": "<p>I seem to be stuck. Does this lemma actually hold? Am I missing an axiom? Did I define something wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">total_order</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">asymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">le</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">le</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">conn</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">le</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">total_order</span>\n\n\n<span class=\"c1\">-- s &lt; t</span>\n<span class=\"kd\">def</span> <span class=\"n\">lt</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">total_order</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">le</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lt_trans</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">total_order</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">lt</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">lt</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">lt</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">lt</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">lt</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">and.left</span> <span class=\"o\">(</span><span class=\"n\">and.left</span> <span class=\"n\">a1</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">and.right</span> <span class=\"o\">(</span><span class=\"n\">and.left</span> <span class=\"n\">a1</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">s3</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">and.left</span> <span class=\"o\">(</span><span class=\"n\">and.right</span> <span class=\"n\">a1</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">s4</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">and.right</span> <span class=\"o\">(</span><span class=\"n\">and.right</span> <span class=\"n\">a1</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">s5</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">trans</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"n\">s1</span> <span class=\"n\">s3</span><span class=\"o\">),</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 213720330,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1603047950
    },
    {
        "content": "<p>The lemma is true</p>",
        "id": 213720618,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603048309
    },
    {
        "content": "<p>And you don't need <code>lt y z</code>; it suffices to have <code>le y z</code></p>",
        "id": 213720659,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603048329
    },
    {
        "content": "<p>Once you know <code>le x z</code>, you need <code>x ≠ z</code>.</p>",
        "id": 213720668,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603048358
    },
    {
        "content": "<p>By definition this is <code>x = z → false</code></p>",
        "id": 213720674,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603048374
    },
    {
        "content": "<p>That is where I am stuck.</p>",
        "id": 213720675,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1603048374
    },
    {
        "content": "<p>So, you can <code>assume hxz : x = z</code></p>",
        "id": 213720683,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603048391
    },
    {
        "content": "<p>If you rewrite on this equality in <code>s3</code>, then you'll be able to apply <code>asymm</code></p>",
        "id": 213720702,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603048424
    },
    {
        "content": "<p>Ah! Thank you!</p>",
        "id": 213720761,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1603048482
    }
]