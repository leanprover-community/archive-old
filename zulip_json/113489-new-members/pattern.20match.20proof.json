[
    {
        "content": "<p>Hi I need to prove the termination of this function:</p>\n<div class=\"codehilite\" data-code-language=\"def\"><pre><span></span><code>| [] n := (0, 0)\n| [x] n := (0, 0)\n| l n := let h := head l, t := lastn l in match cmp (h + t) n with\n    | eq :=  (h, t)\n    | gt := have (initial l).sizeof &lt; l.sizeof,\n            from sizeof_less_initial l (by sorry), find_sum_num (initial l) n\n    | lt := have (tail l).sizeof &lt; l.sizeof,\n            from sizeof_less_tail l (by sorry), find_sum_num (tail l) n\n    end\n</code></pre></div>\n<p>Within this where the <code>by sorry</code> is I need a proof that <code>l</code> is not <code>nil</code> . It obviously is as otherwise the function<br>\nwould  have matched at the first case. When I try to enter the proof here though this fact does not seem to be there. Any idea how I get the fact <code>l</code> is not <code>nil</code> here?</p>",
        "id": 218489722,
        "sender_full_name": "Jem Bishop",
        "timestamp": 1606860789
    },
    {
        "content": "<p>Why not match on <code>a :: L</code> instead of <code>l</code>?</p>",
        "id": 218489799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606860833
    },
    {
        "content": "<p>then you get it for free</p>",
        "id": 218489876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606860856
    },
    {
        "content": "<p>or even on <code>a :: b :: L</code></p>",
        "id": 218489914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606860885
    },
    {
        "content": "<p>yeah thats a good point, thanks for your help</p>",
        "id": 218490336,
        "sender_full_name": "Jem Bishop",
        "timestamp": 1606861093
    },
    {
        "content": "<p>PS you're right, the fact that l isn't nil really isn't there, the way you have it set up.</p>",
        "id": 218490437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606861156
    }
]