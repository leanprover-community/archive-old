[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">and.left</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">and.left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">[</span><span class=\"n\">and.left</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Some questions:</p>\n<ol>\n<li>I'm guessing this is not a circular definition, but how does it work?</li>\n<li>What do the square braces around <code>[and.left c]</code> mean?</li>\n<li>Meta-question: where do I learn about these syntax things?  I searched through \"Theorem proving with Lean\" and the reference manual and couldn't find anything about square braces (besides lists.)</li>\n</ol>",
        "id": 241346268,
        "sender_full_name": "Ben Lee",
        "timestamp": 1622692899
    },
    {
        "content": "<p>The square brackets denote a macro, this is really a part of the internals  of lean not seen too often, so while I don't know a good reference, looking at tpil and the reference manual and mathlib docs suffices for normal notation.<br>\nTo see what it really is we can ask lean to unfold the macro with a short metaprogram:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">run_cmd</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n<span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">and.left</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">e.unfold_all_macros</span> <span class=\"n\">d.value</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to see that the definition is really</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">and.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>as for why it is written in this weird way, I can only assume there are some C-level efficiency reasons that this gets special treatment.</p>",
        "id": 241347278,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1622694446
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/macro_def\">docs#macro_def</a> is the closest thing I know to documentation of this!</p>",
        "id": 241347352,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1622694538
    },
    {
        "content": "<p>It's a projection macro. Lean implements reduction for projections directly rather than using the recursor for efficiency.</p>",
        "id": 241348696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622696479
    },
    {
        "content": "<p>it is also ignored by <code>#reduce</code> (not expanded to the recursor), which is a kind of magic you can't achieve any other way</p>",
        "id": 241348789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622696588
    },
    {
        "content": "<p>Thanks for the pointers, that helps!</p>",
        "id": 241410116,
        "sender_full_name": "Ben Lee",
        "timestamp": 1622735196
    }
]