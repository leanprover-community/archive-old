[
    {
        "content": "<p>I'm trying to do another kata on uniform continuity. I have got to the point where I can see the end - but I'm tripping up on fiddly calculations. This is my file.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Uniform continuity</span>\n<span class=\"cm\">  A function f(x) is said to be uniform continuous if it is continuous</span>\n<span class=\"cm\">  with the additional condition that the choice of δ depends on ε only</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">uniform_continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Lipschitz functions</span>\n<span class=\"cm\">  A function f(x) is said to be Lipschitz if there is L s.t.</span>\n<span class=\"cm\">  |f(x) - f(y)| ≤ L|x - y| for any x, y.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">lipschitz</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">L</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">uniform_continuous_of_lipschitz</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">lipschitz</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">uniform_continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">δ_pos</span> <span class=\"o\">:</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">div_pos</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n        <span class=\"k\">calc</span>\n        <span class=\"mi\">0</span>   <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">abs_nonneg</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n    <span class=\"o\">},</span>\n    <span class=\"n\">use</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">δ_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hL</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I would prefer not to be messing around with specific axioms and was hoping linarith could do this for me, but it doesn't seem to. What's the nicest way to do this?</p>",
        "id": 216608238,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605273403
    },
    {
        "content": "<p>(In a sense the fact that the Lipshitz definition here doesn't explictly require L to be non-negative is part of the issue...)</p>",
        "id": 216608715,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605273679
    },
    {
        "content": "<p><code>linarith</code> doesn't do it because it involves multiplication.</p>",
        "id": 216641355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605287193
    },
    {
        "content": "<p>What's the maths proof here? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">calc</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">L</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hL</span>\n    <span class=\"bp\">...</span>                  <span class=\"bp\">&lt;</span> <span class=\"n\">L</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span>\n    <span class=\"bp\">...</span>                  <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">...</span>                  <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>finishes it modulo the two sorries, but to prove the sorries I guess you need that L&gt;0. From <code>hL</code> we see that if L&lt;0 then abs(x-y) is going to have to be 0 meaning x=y and in this case we can solve the goal directly. If L=0 then we can solve the goal using hL, and if L&gt;0 then the calc route above will work.</p>",
        "id": 216642228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605287592
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">uniform_continuous_of_lipschitz</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">lipschitz</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">uniform_continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">δ_pos</span> <span class=\"o\">:</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">div_pos</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n        <span class=\"k\">calc</span>\n        <span class=\"mi\">0</span>   <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">abs_nonneg</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n    <span class=\"o\">},</span>\n    <span class=\"n\">use</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">δ_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hL</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">L</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">hneg</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hpos</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- L &lt; 0</span>\n      <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">convert</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">},</span>\n      <span class=\"n\">by_contra</span> <span class=\"n\">non0</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hxy3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">abs_nonneg</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"n\">le_iff_eq_or_lt</span> <span class=\"n\">at</span> <span class=\"n\">hxy3</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hxy3</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">non0</span> <span class=\"n\">hxy3.symm</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hnonsense</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n        <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs_nonneg</span> <span class=\"n\">_</span>\n        <span class=\"bp\">...</span>     <span class=\"bp\">≤</span> <span class=\"n\">L</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hL</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mul_neg_of_neg_of_pos</span> <span class=\"n\">hneg</span> <span class=\"n\">hxy3</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">lt_irrefl</span> <span class=\"mi\">0</span> <span class=\"n\">hnonsense</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- L = 0</span>\n      <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span> <span class=\"n\">at</span> <span class=\"n\">hL</span><span class=\"o\">,</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- L &gt; 0</span>\n      <span class=\"k\">have</span> <span class=\"n\">hL2</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_lt_one</span><span class=\"o\">,</span> <span class=\"n\">abs_of_pos</span> <span class=\"n\">hpos</span><span class=\"o\">],</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">add_pos_of_nonneg_of_pos</span> <span class=\"o\">(</span><span class=\"n\">abs_nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span>\n      <span class=\"k\">calc</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">L</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hL</span>\n      <span class=\"bp\">...</span>                  <span class=\"bp\">&lt;</span> <span class=\"n\">L</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">hpos</span>\n      <span class=\"bp\">...</span>                  <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n      <span class=\"bp\">...</span>                  <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">ε_pos</span>\n      <span class=\"bp\">...</span>                  <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">mul_one</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Did I miss a trick?</p>",
        "id": 216644831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605288720
    },
    {
        "content": "<p>This is quite similar to what I did in the end.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">uniform_continuous_of_lipschitz</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">lipschitz</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">uniform_continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">abs_L_plus_1_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"k\">calc</span>\n        <span class=\"mi\">0</span>   <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">abs_nonneg</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">δ_pos</span> <span class=\"o\">:</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">div_pos</span> <span class=\"n\">ε_pos</span> <span class=\"n\">abs_L_plus_1_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">δ_pos</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hL</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span><span class=\"o\">,</span>\n        <span class=\"k\">calc</span>\n        <span class=\"n\">L</span>   <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">le_abs_self</span> <span class=\"n\">L</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">abs_nonneg</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">mul_lt_mul_of_pos_left</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">mul_div_cancel'</span><span class=\"o\">,</span>\n        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216659032,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605295109
    },
    {
        "content": "<p>As you can see I really don't like calc mode...</p>",
        "id": 216659084,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605295135
    },
    {
        "content": "<p>You can avoid worrying about the sign of L, though.</p>",
        "id": 216660022,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605295582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span> you can learn some compression tricks from this version of your proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">uniform_continuous_of_lipschitz</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">lipschitz</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">uniform_continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">abs_L_plus_1_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">abs_nonneg</span> <span class=\"n\">L</span><span class=\"o\">],</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">div_pos</span> <span class=\"n\">ε_pos</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">abs_nonneg</span> <span class=\"n\">L</span><span class=\"o\">])],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"bp\">;</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">le_abs_self</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">abs_nonneg</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">),</span>\n      <span class=\"k\">from</span> <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">mul_div_cancel'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hL</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216664950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1605297429
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 216664993,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605297453
    },
    {
        "content": "<p>Or have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lipschitz_with.uniform_continuous\">docs#lipschitz_with.uniform_continuous</a></p>",
        "id": 216665295,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605297593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Two things I don't follow there.</p>",
        "id": 216665725,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605297765
    },
    {
        "content": "<p>What does the semicolon do, and what are the ‹_› doing?</p>",
        "id": 216665743,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605297778
    },
    {
        "content": "<p><code>‹_›</code> is shorthand for <code>by assumption</code></p>",
        "id": 216666265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605298063
    },
    {
        "content": "<p>i.e. <code>assumption</code> as a term instead of a tactic</p>",
        "id": 216666296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605298082
    },
    {
        "content": "<p>Huh! Alright.</p>",
        "id": 216666338,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605298086
    },
    {
        "content": "<p><code>tac1; tac2</code> runs <code>tac2</code> on all subgoals produced by <code>tac1</code></p>",
        "id": 216666373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605298110
    },
    {
        "content": "<p>Perfect. Thank you.</p>",
        "id": 216666399,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605298126
    },
    {
        "content": "<p>And thank you for your patience. I'm continuing to really enjoy Lean!</p>",
        "id": 216666430,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605298152
    },
    {
        "content": "<p>I do struggle a bit with converting \"well, I can just see how I'd do that in words\" into the Lean-world: currently bumping at another kata to do with primes which is like that.</p>",
        "id": 216674541,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605302458
    },
    {
        "content": "<p>I can see why all the things I need to be true are true to give me my result.</p>",
        "id": 216674571,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605302472
    },
    {
        "content": "<p>But actually, mmm, showing them in good order in Lean... a trickier task!</p>",
        "id": 216675079,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605302732
    },
    {
        "content": "<p>If I have other questions on different kata, is it better etiquette here to start a new thread or continue this one? (Ironically I sent this twice...)</p>",
        "id": 216677348,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605303826
    },
    {
        "content": "<p>I'd say feel free to make new threads.</p>",
        "id": 216678035,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605304094
    }
]