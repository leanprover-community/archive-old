[
    {
        "content": "<p>How can I prove this goal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">ξ</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">fx</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">ξ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ξ</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">B</span> <span class=\"bp\">∉</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>here is the proof so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">ξ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">exists_eq'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ξ</span><span class=\"o\">,</span> <span class=\"n\">fx</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ξ</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">B</span> <span class=\"bp\">∉</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fx</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">not_p_iff_not_p</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">}}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the proof of this goal should go in the <code>sorry</code><br>\nthanks in advance</p>",
        "id": 280767929,
        "sender_full_name": "Joseph O",
        "timestamp": 1651371479
    },
    {
        "content": "<p>It's a bit easier on us if you include imports in the code section to make it an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 280773089,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1651378658
    },
    {
        "content": "<p>It's not clear to me that there's a simple way of doing this from here. Presumably you want to use the injectivity in some way. So you need some statement of the form <code>f A = f B</code> for which <code>A</code> is not <code>B</code>. But <code>B</code> here won't necessarily work for that: You could imagine the function <code>f</code> on <code>set nat</code> that maps finite sets to their cardinality, and infinite sets to 17. In that case every nat is in the range, so <code>B</code> would be the empty set. But now you can't find a collision because <code>B</code> is the only thing that <code>f</code> maps to 0.</p>",
        "id": 280775035,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1651381740
    },
    {
        "content": "<p>Are you following a Maths proof that you already know here? It seems unlikely to me that the <code>have... exists_eq' ... cases this</code> is an accurate translation, as it's entirely vacuous mathematically</p>",
        "id": 280783013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651395217
    },
    {
        "content": "<p>You can replace those three lines with <code>set ξ := f B with hx</code></p>",
        "id": 280783082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651395347
    },
    {
        "content": "<p>Can anyone tell me why this doesnt work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 280796004,
        "sender_full_name": "Joseph O",
        "timestamp": 1651413709
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"sc\">'{'</span> <span class=\"n\">expression</span><span class=\"o\">,</span> <span class=\"sc\">','</span><span class=\"o\">,</span> <span class=\"sc\">'}'</span><span class=\"o\">,</span> <span class=\"bp\">'..'</span><span class=\"o\">,</span> <span class=\"bp\">`//`</span> <span class=\"n\">or</span> <span class=\"bp\">`|`</span> <span class=\"n\">expected</span>\n</code></pre></div>",
        "id": 280796009,
        "sender_full_name": "Joseph O",
        "timestamp": 1651413715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as unresolved.</p>",
        "id": 280796085,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651413804
    },
    {
        "content": "<p><code>(f : set α → α)</code></p>",
        "id": 280796099,
        "sender_full_name": "Joseph O",
        "timestamp": 1651413831
    },
    {
        "content": "<p>Even adding type signatures didnt help</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 280796616,
        "sender_full_name": "Joseph O",
        "timestamp": 1651414452
    },
    {
        "content": "<p>You're not allowed to put expressions to the left of <code>|</code> in a set literal</p>",
        "id": 280796815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651414722
    },
    {
        "content": "<p>The thing to the left of <code>|</code> is a variable name</p>",
        "id": 280796817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651414732
    },
    {
        "content": "<p>I'm not sure what the expression is supposed to mean, which makes it hard to figure out what to tell lean</p>",
        "id": 280796841,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651414799
    },
    {
        "content": "<p>I would guess the intent is \"the set of <code>y</code> such that there exists an <code>x</code> satisfying <code>f x = y</code> and (rest of the conditions)\"</p>",
        "id": 280796907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651414893
    },
    {
        "content": "<p>^ this</p>",
        "id": 280797427,
        "sender_full_name": "Joseph O",
        "timestamp": 1651415624
    },
    {
        "content": "<p>Well then you need to write it out like that, complete with spelling out the <code>exists</code></p>",
        "id": 280797484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651415665
    },
    {
        "content": "<p>Why? This is what I want I think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 280797516,
        "sender_full_name": "Joseph O",
        "timestamp": 1651415738
    },
    {
        "content": "<p>Well actually not really</p>",
        "id": 280797587,
        "sender_full_name": "Joseph O",
        "timestamp": 1651415841
    },
    {
        "content": "<p>Its of type <code>set (set a)</code>, but I want it to be of type <code>set a</code></p>",
        "id": 280797603,
        "sender_full_name": "Joseph O",
        "timestamp": 1651415859
    },
    {
        "content": "<p>seems like its counting <code>x : set α</code> as elements</p>",
        "id": 280797657,
        "sender_full_name": "Joseph O",
        "timestamp": 1651415888
    },
    {
        "content": "<p>Yes, because when you write <code>{x : A | p x}</code>, that means \"I am giving you a set of <code>A</code>s\"</p>",
        "id": 280797669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651415916
    },
    {
        "content": "<p>I need <code>x</code> to be some <code>set a</code>, and <code>B</code> to be a set of <code>a</code>s where each element is not in <code>x</code></p>",
        "id": 280797743,
        "sender_full_name": "Joseph O",
        "timestamp": 1651416012
    },
    {
        "content": "<p>Idea on how to do this?</p>",
        "id": 280797888,
        "sender_full_name": "Joseph O",
        "timestamp": 1651416253
    },
    {
        "content": "<p>Do you have an English proof you can paste?</p>",
        "id": 280797938,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651416353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20prove.20this.3F/near/280797888\">said</a>:</p>\n<blockquote>\n<p>Idea on how to do this?</p>\n</blockquote>\n<p>Yes, try translating this into lean, since you said it was what you meant</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20prove.20this.3F/near/280796907\">said</a>:</p>\n<blockquote>\n<p>I would guess the intent is \"the set of <code>y</code> such that there exists an <code>x</code> satisfying <code>f x = y</code> and (rest of the conditions)\"</p>\n</blockquote>",
        "id": 280798079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651416510
    },
    {
        "content": "<p>Your translation should include an <code>exists</code> symbol</p>",
        "id": 280798090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651416525
    },
    {
        "content": "<p>Like this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 280798184,
        "sender_full_name": "Joseph O",
        "timestamp": 1651416655
    },
    {
        "content": "<p>You've not include the \"set of\" bit</p>",
        "id": 280798203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651416681
    },
    {
        "content": "<p>\"the set of <code>y: α</code> such that ...\" is spelt <code>{y : α| ... }</code></p>",
        "id": 280798211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651416709
    },
    {
        "content": "<p>You also should be writing <code>B :=</code> not <code>B :</code></p>",
        "id": 280798252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651416730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20prove.20this.3F/near/280798211\">said</a>:</p>\n<blockquote>\n<p>\"the set of <code>y: α</code> such that ...\" is spelt <code>{y : α| ... }</code></p>\n</blockquote>\n<p>But then I can't do the <code>x : set a</code> part</p>",
        "id": 280798287,
        "sender_full_name": "Joseph O",
        "timestamp": 1651416803
    },
    {
        "content": "<p>Yes you can, put the <code>∃ x : set α</code> inside the <code>...</code></p>",
        "id": 280798291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651416823
    },
    {
        "content": "<p>I see</p>",
        "id": 280798334,
        "sender_full_name": "Joseph O",
        "timestamp": 1651416856
    },
    {
        "content": "<p>So its this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 280798355,
        "sender_full_name": "Joseph O",
        "timestamp": 1651416903
    },
    {
        "content": "<p>You wanted to add <code>∧ (f x) ∉ x</code> too though, right?</p>",
        "id": 280798379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651416954
    },
    {
        "content": "<p>So far, is the math here right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">ξ</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">τ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280798451,
        "sender_full_name": "Joseph O",
        "timestamp": 1651417041
    },
    {
        "content": "<p>The <code>have</code> looks like nonsense, it's obviously true (pick <code>ξ  = τ = empty</code>) and isn't going to help with the rest of the proof</p>",
        "id": 280798522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651417092
    },
    {
        "content": "<p>I was trying to follow the definition of injective functions</p>",
        "id": 280798535,
        "sender_full_name": "Joseph O",
        "timestamp": 1651417124
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/init/function.html#function.injective\">doc#function.injective</a></p>",
        "id": 280798550,
        "sender_full_name": "Joseph O",
        "timestamp": 1651417150
    },
    {
        "content": "<p>You should go back to your pen and paper proof and check you've translated it accurately</p>",
        "id": 280798675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651417252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span> it is very <em>very</em> difficult to formalize some math if you haven't already understood it perfectly. Formalization, even if it is of course useful, tends to add problems rather than solving them. In particular you should first of all write a very detailed pen and paper proof.</p>",
        "id": 280798787,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1651417399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20prove.20this.3F/near/280796815\">said</a>:</p>\n<blockquote>\n<p>You're not allowed to put expressions to the left of <code>|</code> in a set literal</p>\n</blockquote>\n<p>Since <a href=\"https://github.com/leanprover-community/lean/pull/402\">lean#402</a> there is a very important special case where this is allowed though. But I don't think this is completely general</p>",
        "id": 280800257,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651419390
    },
    {
        "content": "<p>I remembered seeing that but had totally forgotten you needed the parens for it to work</p>",
        "id": 280800704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651420014
    },
    {
        "content": "<p>It's in the file of \"all the things that start with <code>{</code>\" <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/brackets.cpp\">https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/brackets.cpp</a> (see <code>parse_set_replacement</code>)</p>",
        "id": 280802765,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651422838
    },
    {
        "content": "<p>Here's a way to write Joseph's set from earlier: <code>{ (f x) | (x : set α) (h : f x ∉ x) }</code>. You can put any binders you want after the <code>|</code>.</p>",
        "id": 280803015,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651423132
    },
    {
        "content": "<p>That gets interpreted as <code>{_x : α | ∃ (x : set α) (h : f x ∉ x), f x = _x}</code></p>",
        "id": 280803042,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651423170
    },
    {
        "content": "<p>I guess you can also use union notation to build that kind of set. <code>⋃ (x : set α) (h : f x ∉ x), {f x}</code></p>",
        "id": 280803288,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651423500
    },
    {
        "content": "<p>how would the mathematical proof for the <code>sorry</code> go?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">=</span> <span class=\"n\">ξ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">exists_eq'</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ξ</span><span class=\"o\">,</span> <span class=\"n\">fx</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fx</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">not_p_iff_not_p</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">ξ</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">fx</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">=</span> <span class=\"n\">ξ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n</code></pre></div>",
        "id": 280818598,
        "sender_full_name": "Joseph O",
        "timestamp": 1651445785
    },
    {
        "content": "<p>Didn't you ask exactly that question at the top of the thread? I feel like we're going in circles a bit here...</p>",
        "id": 280819337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651446890
    },
    {
        "content": "<p>Hmm you are right, except my proof is now different. Let me go take a look again,</p>",
        "id": 280820640,
        "sender_full_name": "Joseph O",
        "timestamp": 1651449154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20prove.20this.3F/near/280783013\">said</a>:</p>\n<blockquote>\n<p>Are you following a Maths proof that you already know here? It seems unlikely to me that the <code>have... exists_eq' ... cases this</code> is an accurate translation, as it's entirely vacuous mathematically</p>\n</blockquote>\n<p>Though that is how the proof went for surjective functions</p>",
        "id": 280873365,
        "sender_full_name": "Joseph O",
        "timestamp": 1651498185
    },
    {
        "content": "<p>But I am going to try <code>set ξ := f B' with hx,</code></p>",
        "id": 280873395,
        "sender_full_name": "Joseph O",
        "timestamp": 1651498201
    },
    {
        "content": "<p>What do you mean by \"how the proof went\"? Which proof? Your own proof, or one you're following?</p>",
        "id": 280877256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651500112
    },
    {
        "content": "<p>Oh sorry, so here was the proof for surjective functions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_surjective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">ξ</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ξ</span><span class=\"o\">,</span> <span class=\"n\">fx</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ξ</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">ξ</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">ξ</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mem_set_of</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fx</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">not_p_iff_not_p</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">}}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280877696,
        "sender_full_name": "Joseph O",
        "timestamp": 1651500313
    },
    {
        "content": "<p>Someone told me the proof for injective functions should be very similar</p>",
        "id": 280878785,
        "sender_full_name": "Joseph O",
        "timestamp": 1651500924
    },
    {
        "content": "<p>Following <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> 's suggestion in the second reply,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">ξ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"k\">with</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and this gives a goal of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">ξ</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span>\n<span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">ξ</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>which I dont know if it makes things any better?</p>",
        "id": 280880016,
        "sender_full_name": "Joseph O",
        "timestamp": 1651501526
    },
    {
        "content": "<p>The lean code is at least short. But it sounds like your problem is that you don't know the maths proof? To make any progress there, you need to come up with something (an equality of two <code>α </code> terms of the form <code>f _ = f _</code>) to apply <code>h</code> to.</p>",
        "id": 280880266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651501663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20prove.20this.3F/near/280880266\">said</a>:</p>\n<blockquote>\n<p>The lean code is at least short. But it sounds like your problem is that you don't know the maths proof? To make any progress there, you need to come up with something (an equality of two <code>α </code> terms of the form <code>f _ = f _</code>) to apply <code>h</code> to.</p>\n</blockquote>\n<p>Does this look fine?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">τ</span> <span class=\"bp\">=</span> <span class=\"n\">ξ</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 280900609,
        "sender_full_name": "Joseph O",
        "timestamp": 1651510362
    },
    {
        "content": "<p>But for some reason applying <code>h</code> doesnt really work</p>",
        "id": 280900634,
        "sender_full_name": "Joseph O",
        "timestamp": 1651510379
    },
    {
        "content": "<p>I get two goals. The first one I was able to close off with <code>exact Exists.intro B' rfl,</code>,</p>",
        "id": 280900697,
        "sender_full_name": "Joseph O",
        "timestamp": 1651510407
    },
    {
        "content": "<p>The reason applying <code>h</code> doesnt work is because the goal is to result in <code>false</code></p>",
        "id": 280900956,
        "sender_full_name": "Joseph O",
        "timestamp": 1651510515
    },
    {
        "content": "<p>Maybe I shouldnt do a contradiction</p>",
        "id": 280901018,
        "sender_full_name": "Joseph O",
        "timestamp": 1651510540
    },
    {
        "content": "<p>Here is the error and goal I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">false</span>\n<span class=\"k\">with</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n<span class=\"n\">B'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">ξ</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">τ</span> <span class=\"bp\">=</span> <span class=\"n\">ξ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 280901261,
        "sender_full_name": "Joseph O",
        "timestamp": 1651510631
    },
    {
        "content": "<p>You did not make progress. You already knew that there was some <code>\\tau</code> such that <code>f \\tau = \\xi</code>. Just take <code>B'</code>.</p>",
        "id": 280902663,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651511210
    },
    {
        "content": "<p>What do you mean by \"just take <code>B'</code>\"?</p>",
        "id": 280902801,
        "sender_full_name": "Joseph O",
        "timestamp": 1651511266
    },
    {
        "content": "<p>What is the next step of the proof in <strong>words</strong>?</p>",
        "id": 280902959,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651511319
    },
    {
        "content": "<p>We have an equality of <code>f τ = f B'</code>, and since <code>h</code> says that <code>f</code> is injective, if we apply it, we get a proof that <code>τ = B'</code>.</p>",
        "id": 280903929,
        "sender_full_name": "Joseph O",
        "timestamp": 1651511687
    },
    {
        "content": "<p>Great! But you <em>picked</em> <code>\\tau = B'</code> in the first place, so you did not learn anything.</p>",
        "id": 280905669,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651512439
    },
    {
        "content": "<p>By the way, while the proof of <code>cantor_surjective</code> in mathlib is the classic one, I had not seen the proof of <code>cantor_injective</code> before and it was based on a proof on nLab</p>",
        "id": 280908097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651513528
    },
    {
        "content": "<p>I don't think it is easy to come up with that proof on your own (the classic proof uses <code>inv_surj</code> and the axiom of choice and is probably easier to guess)</p>",
        "id": 280908336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651513642
    },
    {
        "content": "<p>Hmm... I personally tried them for fun a while back and figured that both proofs were pretty similar (I only knew the surjective one and came up with the injective version myself).</p>",
        "id": 280918538,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651518301
    },
    {
        "content": "<p>Yeah they should be very similar</p>",
        "id": 280918822,
        "sender_full_name": "Joseph O",
        "timestamp": 1651518416
    },
    {
        "content": "<p>I'm stuck trying to prove the following fact in lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">()</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>What's a simple way to prove this? I tried using simp and cases everywhere, but it doesn't seem to help.<br>\nAny suggestions are welcome.</p>",
        "id": 305825164,
        "sender_full_name": "Michael Jam",
        "timestamp": 1666619772
    },
    {
        "content": "<p><code>open Classical</code> is only there so that I don't need an extra Decidable assumption.<br>\nThis example came up while proving the basic laws of a discrete category.</p>",
        "id": 305829588,
        "sender_full_name": "Michael Jam",
        "timestamp": 1666620922
    },
    {
        "content": "<p>Why would you want to forcibly insert a noncomputable decidability instance into the theorem statement rather than letting typeclass inference find its own? In Lean 3 the rule of thumb is that if the <em>statement</em> doesn't compile without decidability assumptions, put them in the statement; if the <em>proof</em> needs them, use classical assumptions. This makes lemmas maximally applicable.</p>\n<p>As for your question, I feel like it would be easier if we had more tactics, for example <code>convert</code> or <code>split_ifs</code>. But neither of these have been ported yet :-( Can I ask for more details about how you got into this mess?</p>",
        "id": 305892677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666637404
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">()</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">infer_instance</span>\n  <span class=\"n\">Subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 305893794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666637863
    },
    {
        "content": "<p>Can you do it with <code>s/Empty/Nat</code>?</p>",
        "id": 305893965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666637920
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">revert</span> <span class=\"n\">e</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 305895084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666638267
    },
    {
        "content": "<p>Aah nice; this is somehow the \"proper\" proof.</p>",
        "id": 305895254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666638324
    },
    {
        "content": "<p>Probably you should not use <code>if c then Unit else Nat</code> in the first place, but rather whatever the Lean 4 spelling of <code>plift</code> is</p>",
        "id": 305896154,
        "sender_full_name": "Reid Barton",
        "timestamp": 1666638616
    },
    {
        "content": "<p>or a custom inductive family</p>",
        "id": 305896208,
        "sender_full_name": "Reid Barton",
        "timestamp": 1666638637
    },
    {
        "content": "<p>Oh, by a quirk it seems this works too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">T</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">()</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">infer_instance</span>\n  <span class=\"n\">Subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 305897840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666639177
    },
    {
        "content": "<p>It looks like <code>split</code> got confused and applied <code>h</code> to simplify the if in both cases, so both calls to <code>infer_instance</code> are proving <code>Subsingleton Unit</code>!</p>",
        "id": 305897956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666639214
    },
    {
        "content": "<p>Help please lean3 how to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">notPiffnotP</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 305926826,
        "sender_full_name": "Moahu Cheng",
        "timestamp": 1666652088
    },
    {
        "content": "<p>Is this homework? It comes up a lot :-)</p>",
        "id": 305926910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666652128
    },
    {
        "content": "<p>Try the <code>hint</code> tactic; it might find other tactics which can solve it</p>",
        "id": 305926961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666652161
    },
    {
        "content": "<p>hint does not work :-\\<br>\nit does not give me anything</p>",
        "id": 305927543,
        "sender_full_name": "Moahu Cheng",
        "timestamp": 1666652426
    },
    {
        "content": "<p>keep in mind that <code>¬X</code> in Lean means <code>X → false</code></p>",
        "id": 305929474,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666653472
    },
    {
        "content": "<p>also you might need to <code>import tactic.hint</code> for <code>hint</code> to work</p>",
        "id": 305930364,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666653960
    },
    {
        "content": "<p>two other hints:</p>\n<ol>\n<li><code>intro h</code> is always a good thing to try</li>\n<li>understand what <code>classical.em</code> does</li>\n</ol>",
        "id": 305946610,
        "sender_full_name": "Arien Malec",
        "timestamp": 1666665608
    },
    {
        "content": "<p>and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases\">tactic#by_cases</a>!</p>",
        "id": 305947488,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666666529
    },
    {
        "content": "<p>The usual context for this question is that the student has been told to prove it constructively, which is tricky but possible. I was expecting <code>hint</code> to suggest <code>tauto!</code> which should nail it classically</p>",
        "id": 305957054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666675537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> To give you some details, I was just making a small category library in my lean 4 playground. To make something into a diagram, I want to view a Type as a discrete category.<br>\nSo the code looks like this in isolation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Category</span>\n<span class=\"kd\">class</span> <span class=\"n\">Hom.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"kn\">export</span> <span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">hom</span><span class=\"o\">)</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"s2\">\" ⟶ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hom</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Data</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n  <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span>\n<span class=\"kn\">export</span> <span class=\"n\">Data</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" ≫ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">comp</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"𝟙\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span>\n<span class=\"kd\">end</span> <span class=\"n\">Category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Category</span> <span class=\"k\">in</span>\n<span class=\"kd\">class</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Data</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">id_comp</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"n\">comp_id</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⟶</span> <span class=\"n\">W</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Empty.elim</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TUnit.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">TUnit</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Category.discreteCategoryOf</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"k\">then</span> <span class=\"n\">TUnit</span> <span class=\"n\">X</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span> <span class=\"n\">ite</span> <span class=\"bp\">..</span> <span class=\"k\">from</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"k\">then</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">Z</span> <span class=\"k\">then</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n    <span class=\"n\">if_pos</span> <span class=\"o\">(</span><span class=\"n\">h1.trans</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">ite</span> <span class=\"bp\">..</span> <span class=\"k\">from</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span> <span class=\"bp\">▸</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">id_comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"k\">then</span> <span class=\"kd\">by</span>\n      <span class=\"k\">show</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">⟨⟩</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n      <span class=\"n\">generalize</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">revert</span> <span class=\"n\">f</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"n\">comp_id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"k\">then</span> <span class=\"kd\">by</span>\n      <span class=\"k\">show</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">⟨⟩</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n      <span class=\"n\">generalize</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">revert</span> <span class=\"n\">f</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Those proofs are probably dumb and automatable. <br>\nMany thanks to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  for your generalize,revert,rw trick. I often get stuck in those kind of situations.</p>",
        "id": 305995817,
        "sender_full_name": "Michael Jam",
        "timestamp": 1666692485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"403214\">@Michael Jam</span> Here's what Reid was alluding to by saying you shouldn't use <code>if c then Unit else Empty</code>: You can express that much more nicely by using <code>PLift c</code>, and since it's an inductive type everything is nice by pattern matching:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Category.discreteCategoryOf</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">I</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">PLift</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"n\">comp</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">h1.trans</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">id_comp</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">comp_id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 305998549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666693668
    },
    {
        "content": "<p>and we can even drop the <code>DecidableEq I</code> assumption</p>",
        "id": 305998673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666693708
    },
    {
        "content": "<p>Your definition of the morphisms is going to be super-hard to work with (as you just saw). Use <code>plift (X = Y)</code> (or whatever the Lean 4 equivalent is). In Lean 3 it's </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Universe lifting operation from Sort to Type -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">up</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(edit: Mario got there first!)</p>",
        "id": 305998686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666693716
    },
    {
        "content": "<p>Right thanks, this is much simpler. I could even get rid of PLift by allowing Sort valued arrows as in lean 3's category library</p>",
        "id": 306004632,
        "sender_full_name": "Michael Jam",
        "timestamp": 1666696435
    }
]