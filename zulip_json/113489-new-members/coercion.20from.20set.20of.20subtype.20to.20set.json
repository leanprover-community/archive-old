[
    {
        "content": "<p>I am trying to create a coercion from a set of subtype A to set and I somehow got it to work but I don't understand why it does work :/<br>\nHere is my <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>If I hover over <code>x</code> in vs code, it says <code>x : X</code> but I would expect <code>x</code> to have type <code>subtype A</code>.</p>\n<p>On the other hand I would expect the following code to work since I would think <code>x.1</code> will have type <code>X</code> but it doesn't seem to be the case.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 198754796,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590496528
    },
    {
        "content": "<p>In each example, you have two variables called <code>x</code></p>",
        "id": 198754996,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590496664
    },
    {
        "content": "<p><code>{x | </code> already binds <code>x</code>, which I think you were trying to achieve again with the forall. For example <code>{x | x &gt;= 0}</code> makes sense.</p>",
        "id": 198755140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590496737
    },
    {
        "content": "<p>Something like this? <code>⟨λ U, {x.1 | x : subtype A, x ∈ U}⟩</code></p>",
        "id": 198755193,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590496777
    },
    {
        "content": "<p>You can only put a variable before the <code>|</code>, not an expression</p>",
        "id": 198755372,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590496864
    },
    {
        "content": "<p>I don't think I understand how to extract the value of <code>x : subtype A</code>, i.e. get something of type <code>X</code> from <code>x</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>I thought the above should work but its complaining invalid field notation</p>",
        "id": 198755863,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590497131
    },
    {
        "content": "<p>I think that's because Lean is dense about inference involving ∈? Otherwise it looks correct to me</p>",
        "id": 198755986,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590497194
    },
    {
        "content": "<p>The error message is probably telling you that Lean doesn't know <code>x</code> is a <code>subtype A</code></p>",
        "id": 198756022,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590497216
    },
    {
        "content": "<p>Vs code says it's of type <code>subtype A </code> when I hover over it so it's very strange lean doesn't know.<br>\nI got it to work by adding it though :) </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 198756217,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590497304
    },
    {
        "content": "<ol>\n<li><code>subtype A</code> isn't idiomatic. just use coercion<br>\n2.</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">S</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 198756324,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590497380
    },
    {
        "content": "<p>Wow, I did not expect lean would convert <code>set X</code> to <code>Type*</code> (which is what I needed) so easily. Nice!</p>",
        "id": 198756796,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590497623
    }
]