[
    {
        "content": "<p>Hello everyone,  I am an engineering student fascinated by \"digitizing\" mathematics and a lean newbie. I was wondering if there was any way in lean to prove basic probability identities like say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo>∪</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>P</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>P</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> P(A \\cup B) \\leq P(A) + P(B) </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span>.  I'm suspecting this requires formalizing the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> P() </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mclose\">)</span></span></span></span> probability law using measure theory or something,  which I have no idea about :)</p>",
        "id": 217127954,
        "sender_full_name": "Miraç Gülgönül",
        "timestamp": 1605702513
    },
    {
        "content": "<p>We don't have much probability theory in mathlib, but we don't have some measure theory. For instance your statement is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure_union_le\">docs#measure_theory.measure_union_le</a></p>",
        "id": 217129960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1605703899
    },
    {
        "content": "<p>thanks! could you also give me an example on how to implement this <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ? how do I construct <code>[measurable_space α] {μ : measure_theory.measure α}</code> ?  For example like in a file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kd\">variable</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span>\n\n<span class=\"bp\">????</span>\n</code></pre></div>",
        "id": 217131720,
        "sender_full_name": "Miraç Gülgönül",
        "timestamp": 1605704909
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">U</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">U</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">μ</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">measure_union_le</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217132209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605705234
    },
    {
        "content": "<p>final question :D apparently one can define this <code>measure</code> to be a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.probability_measure\">docs#measure_theory.probability_measure</a>, but I couldn't figure out how to \"instantiate\" it. How do I assert that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\"> \\mu </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span> is a <code>probability_measure</code> ?</p>",
        "id": 217141714,
        "sender_full_name": "Miraç Gülgönül",
        "timestamp": 1605710081
    },
    {
        "content": "<p>Probably just add <code>[probability_measure \\mu]</code> after <code>{\\mu : measure U}</code>?</p>",
        "id": 217144786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605711389
    },
    {
        "content": "<p>that works! however a minor inconvenience, now the assumptions <code>measurable_space U</code> and <code>probability_measure P</code> have ugly names like <code>_inst_1</code> and <code>_inst_2</code>. Can I alias these somehow ? I have tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"n\">ms</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">U</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"n\">pm</span> <span class=\"o\">:</span> <span class=\"n\">probability_measure</span> <span class=\"n\">P</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">P</span> <span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">P</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">measure_union_le</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but this causes the <code>probability_measure P</code> to dissappear from the state, it only shows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">U</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">ms</span><span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">U</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">U</span>\n<span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">⇑</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">⇑</span><span class=\"n\">P</span> <span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"bp\">⇑</span><span class=\"n\">P</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 217159812,
        "sender_full_name": "Miraç Gülgönül",
        "timestamp": 1605717001
    },
    {
        "content": "<p>It's better to leave the default names (note that you didn't need to refer to them by name to apply <code>measure_union_le</code>).</p>",
        "id": 217160315,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605717212
    },
    {
        "content": "<p>In math you would also say \"Let U be a measurable space and P a probability measure on U\" and not have a specific name for the hypothesis that U is a measurable space and so on.</p>",
        "id": 217160426,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605717246
    },
    {
        "content": "<p>But if you really want you can force them to be included by writing <code>include ms pm</code> somewhere before <code>example</code>.</p>",
        "id": 217160543,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605717295
    },
    {
        "content": "<p>thanks for the insight!</p>",
        "id": 217160769,
        "sender_full_name": "Miraç Gülgönül",
        "timestamp": 1605717374
    },
    {
        "content": "<p>The idea is that if something is a typeclass then the system should be able to supply the variables with ugly names, and the human should never need to explicitly refer to them. In Lean functions have three kinds of input: round brackets <code>()</code>, meaning \"user supplies them\", squiggly brackets <code>{}</code> meaning \"system will figure them out from the types of other inputs, and square bracket <code>[]</code> inputs, meaning \"system will figure them out by looking at a database of instances, so don't worry that they have horrible names, you should never need to use them\".</p>",
        "id": 217172688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605722272
    },
    {
        "content": "<p>but then how I would \"use\" the fact that the measure <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is indeed a \"probability\" measure ? for example right now I am doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">probability_measure</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> 3.(Normalization)</span>\n<span class=\"cm\">The probability of the entire sample space Ω is equal to 1, that is,P(Ω) = 1.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">normalization</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">(</span><span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"c1\">--simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I was hoping  I would be able to <code>simp</code> it away, since the lemma is literally the definition of the <code>probability_measure</code> class, however I don't seem to be able to extract it.</p>",
        "id": 217176119,
        "sender_full_name": "Miraç Gülgönül",
        "timestamp": 1605723860
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">normalization</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">(</span><span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">probability_measure.measure_univ</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217176250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605723940
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">probability_measure</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">measure_univ</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This (from mathlib) defines (amongst other things) a function <code>probability_measure.measure_univ</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">probability_measure.measure_univ</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">measure_univ :</span>\n<span class=\"cm\">  ∀ {α : Type u_1} [_inst_1 : measurable_space α] {μ : measure α}</span>\n<span class=\"cm\">    [c : probability_measure μ], ⇑μ univ = 1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>The function says \"I'll guess alpha and the fact that it's a measurable space, I'll guess mu, I'll guess the fact that mu is a probability measure, and I will output a proof that mu(univ)=1. If you attempt to use me on a goal which looks like <code>P univ = 1</code>, I will guess mu = P, P is a measure on nat so I'll guess alpha is nat, and now I'll look in my database of instances (square bracket stuff) to find the other things.\"</p>",
        "id": 217177036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605724287
    },
    {
        "content": "<p>I kept thinking it had to be something like <code>P.measure_univ</code>,  it seems to me like the expression <code>probability_measure.measure_univ</code> suggests that it has nothing to do with <code>P</code> itself: but of course your explanation makes sense :D I should do more reading on classes/instances on lean!</p>",
        "id": 217177362,
        "sender_full_name": "Miraç Gülgönül",
        "timestamp": 1605724418
    },
    {
        "content": "<p>Dot notation unfortunately won't work here, in fact that was the first thing I tried, but <code>P : measure nat</code> so <code>P.measure_univ</code> expands to <code>measure.measure_univ P</code> rather than <code>probability_measure.measure_univ</code>, that's why it doesn't work here.</p>",
        "id": 217177518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605724494
    }
]