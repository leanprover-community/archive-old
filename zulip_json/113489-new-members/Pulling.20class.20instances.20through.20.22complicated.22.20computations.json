[
    {
        "content": "<p>Good morning all.</p>\n<p>I wonder if anyone could help me understand how best to tackle the following.  In a nutshell, I am performing some computations on types (taking quotients of submodules) and lean is struggling to find an instance I need for the result (that a quotient of a submodule is indeed a module).</p>\n<p>Here is my minimal code.  Mathematically I am defining a filtration of a module, and then finding its subquotients.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">U₁</span> <span class=\"n\">U₂</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n  <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">U₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">U₂</span><span class=\"o\">}</span>\n  <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n  <span class=\"c1\">-- Much like head,</span>\n  <span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">head&#39;&#39;</span><span class=\"o\">:</span> <span class=\"bp\">Π</span>  <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">L</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>        <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"n\">rfl</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n  <span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n  <span class=\"kn\">lemma</span> <span class=\"n\">chain&#39;_desc_left</span> <span class=\"o\">:</span> <span class=\"n\">chain&#39;</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">chain&#39;</span> <span class=\"n\">R</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">L</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">chain&#39;</span><span class=\"o\">]</span>\n\n  <span class=\"n\">def</span> <span class=\"n\">chain&#39;_apply_between</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;</span> <span class=\"n\">R</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">rel_of_chain_cons</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">::</span>\n                       <span class=\"o\">(</span><span class=\"n\">chain&#39;_apply_between</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">chain&#39;_desc_left</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"n\">class</span> <span class=\"n\">filtration</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mods</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">is_fil</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;</span> <span class=\"o\">(</span><span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">)</span> <span class=\"n\">mods</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mk_quotient</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">≤</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">((</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">map_subtype</span><span class=\"bp\">.</span><span class=\"n\">order_iso</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">factors</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;_apply_between</span> <span class=\"o\">(</span><span class=\"n\">mk_quotient</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">mods</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">is_fil</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">factors</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">F</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">M</span>                                          <span class=\"c\">/-</span><span class=\"cm\"> M : Type -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">((</span><span class=\"n\">factors</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head&#39;&#39;</span> <span class=\"n\">h</span><span class=\"o\">)</span>                 <span class=\"c\">/-</span><span class=\"cm\"> list.head&#39;&#39; (factors R M F) h : Type -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">neg_smul</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>                        <span class=\"c\">/-</span><span class=\"cm\"> neg_smul : ∀ (r : R) (x : M), -r • x = -(r • x) -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">neg_smul</span> <span class=\"n\">R</span> <span class=\"o\">((</span><span class=\"n\">factors</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head&#39;&#39;</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>The last line fails, </p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nR : Type,\n_inst_1 : ring R,\nM : Type,\n_inst_2 : add_comm_group M,\n_inst_3 : module R M,\nF : filtration R M,\nh : factors R M F ≠ list.nil\n⊢ add_comm_group (list.head&#39;&#39; (factors R M F) h)\n</pre></div>\n\n\n<p>Now, there is an instance defined in mathlib for <code>instance : add_comm_group (quotient p) </code>, which, once you unpack <code>head''</code> and <code>chain'_apply_between</code> is really what we are looking at.</p>\n<p>How would be the best way to help lean find this instance?  I have two ideas: either a bunch of lemmas that carry the instances over each step or bundling the type with its instance data (in a similar manner to <code>submodule</code>) so that it is all in one place.  Are either of these good lean practice?</p>\n<p>Hope I am not missing something obvious and stupid!</p>",
        "id": 172748298,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565253819
    },
    {
        "content": "<p>I would first point out that your use of <code>list Type</code> is rather unidiomatic and can lead to this kind of issues</p>",
        "id": 172749428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565255013
    },
    {
        "content": "<p>It's almost useless to have a <code>list Type</code> because you don't know where the types came from so you don't know what structure they carry (like add_comm_group structure here)</p>",
        "id": 172749499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565255075
    },
    {
        "content": "<p>and you can't use the usual list lemmas because that leads to an equality of types which is problematic (aka \"evil\")</p>",
        "id": 172749538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565255134
    },
    {
        "content": "<p>One possibility is to use <code>fin n -&gt; Type</code> instead, which has better characteristics. But you need to know <code>n</code>, which here is something like <code>mods.length - 1</code> which is not so nice, especially in a rigid position like the <code>n</code> in <code>fin n</code>. You can remove the dependency by extending the list by some suitable default value past the end, for example if <code>modn n := if h : n &lt; mods.length then mods.nth_le n h else \\top</code>, then you can prove <code>is_filn n : modn n &lt;= modn (n+1)</code> and then write <code>factors n := mk_quotient (is_filn n)</code> and now everything unfolds nicely.</p>",
        "id": 172750025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565255692
    },
    {
        "content": "<p>I understand that <code>list Type</code> is a problem, exactly for the reasons stated.</p>\n<p>I had thought that <code>fin n -&gt; A</code> was almost interchangeable with <code>list A</code>, as there are suitable coercions between them (I think).  As you say, though, <code>fin n</code> requires you to know <code>n</code>.  This is not the end of the world for me I don't think.  I'd much rather not extend the filtration past the top, as I would like to distinguish between <code>0 &lt; U_1 &lt; U_2 &lt; M</code> and <code>0 &lt; U_1 &lt; U_2 &lt; M &lt; M</code> as filtrations.</p>\n<p>This problem completely goes away if we have a <code>list (submodule R M)</code> for example because <code>submodule R M</code> is itself a structure and carries instances associated to that structure.  In an earlier draft of this I redefined a <code>modules</code> structure along the lines of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">modules</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">add_comm_group</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>and then defined suitable coercions to <code>Type</code>, and instances of <code>add_comm_group</code> on that coercion etc. etc.  This felt very dirty though, and not at all in the spirit of lean, but did let me have a <code>list (modules R)</code> very easily.</p>",
        "id": 172751046,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565256972
    },
    {
        "content": "<p>The problem seems to be that each of the subquotients has type <code>Type</code>, but type class inference isn't smart enough to spot that it can put a module structure on the subquotients. I suspect this problem could be solved by bundling. If you had a type whose terms were R-modules, rather than the current set-up where M is a parameter for the R-module set-up, then perhaps things would go better.</p>",
        "id": 172751056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565256990
    },
    {
        "content": "<p>\"Bundling\" such as the above <code>structure</code>?</p>",
        "id": 172751218,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565257188
    },
    {
        "content": "<p>At the minute you have terms of type <code>Type</code> and it's not generally true that a random term of this type is a module, so Lean's typeclass system can't deal with what you are trying to do. I guess another possibility would be to make your own structure consisting of a list and an R-module structure of each element of the list, and then work with these structures.</p>",
        "id": 172751295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565257271
    },
    {
        "content": "<p>Sorry, I'm on the London underground and I only have sporadic reception [messages are being sent before I see earlier messages you sent]. Yes, you're making the bundled category of R-modules. I am sure <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> would thoroughly approve and would argue that it was, or perhaps should be, in the spirit of Lean. Different people seem to have different opinions on the matter.</p>",
        "id": 172751402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565257431
    },
    {
        "content": "<p>Currently people believe that submodules of a given module should be a type, but that rings should not be a type (R should be a type and then the ring structure should be handled by the typeclass systems). Modules over a given ring are somewhere in the middle. Currently we're letting the typeclass system try and handle them -- but it's not clear to me whether this is \"right\" -- there will be advantages and disadvantages to each approach I guess. I will remark that we had real problems trying to make the typeclass system work with modules, there were a couple of failed attempts. The mathlib code</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">of_core</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">to_has_scalar</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"o\">{</span> <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">add_smul</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">add_left_cancel</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">smul_add</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">add_left_cancel</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">M</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>already seems to indicate that something funny is going on.</p>",
        "id": 172751651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565257781
    },
    {
        "content": "<p>The best way would be to stick to submodules in your list, and then only quotient by them at the end. A <code>fin n -&gt; Type</code> would also be better, because you can easily get the instance, by just unfolding the function, and you will have the right definitional equalities.</p>",
        "id": 172752428,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565258814
    },
    {
        "content": "<p>But if the entire R-module structure is bundled then he can just use lists, right? There is a category of R-modules. Was this ever created? Do these help to solve the problem?</p>",
        "id": 172753704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565260480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  Not quite understanding what you mean by \"only quotient by them at the end\".  If you mean that <code>(U : submodule R M)</code> encodes the same information as <code>M / U</code>, then this is true, but I'd have to have a list where each member is a submodule of the next, which seems messy.</p>",
        "id": 172755365,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565262456
    },
    {
        "content": "<p>Something like this (not sure if this Type checks, but hopefully you get the idea)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">mk_quotient</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">≤</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">map_subtype</span><span class=\"bp\">.</span><span class=\"n\">order_iso</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">factors</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;_apply_between</span> <span class=\"o\">(</span><span class=\"n\">mk_quotient</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">mods</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">is_fil</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">neg_smul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">((</span><span class=\"n\">factors</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head&#39;&#39;</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 172756279,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565263442
    },
    {
        "content": "<p>Hmm.  So if, for example, I wanted to check some filtration were a composition series I'd have to do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">F</span><span class=\"o\">)),</span> <span class=\"n\">is_simple</span> <span class=\"n\">N</span>\n</pre></div>\n\n\n<p>I feel like it would be neater if I could write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span> <span class=\"n\">N</span> <span class=\"bp\">//</span> <span class=\"n\">is_simple</span> <span class=\"n\">N</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>which I think I could get with a bundled object.</p>\n<p>Is the consensus that this is currently a stylistic choice: bundle or not?</p>",
        "id": 172757374,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565264687
    },
    {
        "content": "<p>Chris and Mario have suggested sticking with unbundled modules, and they have written a lot more Lean code than I have. But submodules are bundled and subgroups are not bundled, which in my mind is evidence that the community is still learning what the best way to go about things is. I don't see anything wrong with bundling modules. Perhaps if you try it you'll see the problems which I cannot.</p>",
        "id": 172757990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565265472
    },
    {
        "content": "<p>You can still write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span> <span class=\"n\">N</span> <span class=\"bp\">|</span> <span class=\"n\">is_simple</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>(you'd have to coerce the list into a set for this to work)</p>",
        "id": 172758044,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565265496
    },
    {
        "content": "<p>This is nicer from a category theoretic perspective, because if your objects are submodules, your category is small. This might be useful at some point.</p>",
        "id": 172758170,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565265639
    },
    {
        "content": "<p>The problem with using <code>submodule</code> is that if you are taking subquotients of a chain of submodules then everything is a submodule of everything above it and there is not one canonical module for which the submodules are the answer.</p>\n<p>Perhaps another approach is bundled subquotients of a module. I think this would be a very interesting way of going about things. You carry around A and B, submodules of some fixed module M, with A a subset of B, and this represents the quotient module B/A. You'd have to write an API for this but if the community think that submodules are worth bundling, surely bundling subquotients is also a natural idea.</p>",
        "id": 172758288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565265751
    },
    {
        "content": "<p>Assia Mahboubi wrote a paper called \"the rooster and the butterfly\" where she talks about subquotients of groups in Coq. This might have some relevant ideas. The more CS-minded people in this conversation seem to be against the idea of bundling modules, but perhaps they would be more open to the idea of bundling subquotients of a given module.</p>",
        "id": 172758336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565265827
    },
    {
        "content": "<p>I'm open to the idea of bundling subquotients, but first I would like to know what that is exactly. It doesn't quite line up with our current definitions; is there a single set of all subquotients of a module?</p>",
        "id": 172760072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565267535
    },
    {
        "content": "<p>Yes. A subquotient of a module <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is just <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mi mathvariant=\"normal\">/</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">B/A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">A</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>⊆</mo><mi>B</mi><mo>⊆</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">A\\subseteq B\\subseteq M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> are submodules.</p>",
        "id": 172760092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565267572
    },
    {
        "content": "<p>A subquotient of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is equivalently a subset of a quotient of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span>, or a quotient of a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span>.</p>",
        "id": 172760112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565267605
    },
    {
        "content": "<p>but you have to equate isomorphic subquotients I assume?</p>",
        "id": 172760114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565267609
    },
    {
        "content": "<p>I think it's better than that.</p>",
        "id": 172760118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565267623
    },
    {
        "content": "<p>If you're dealing with subquotients then you can literally keep track of just the two submodules.</p>",
        "id": 172760131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565267641
    },
    {
        "content": "<p>Is the set simply a subset of the product of subquotients then?</p>",
        "id": 172760177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565267651
    },
    {
        "content": "<p>Quotienting <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mi mathvariant=\"normal\">/</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">B/A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">A</span></span></span></span> is just making <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> bigger, and submoduling it is making <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> smaller.</p>",
        "id": 172760181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565267660
    },
    {
        "content": "<p>You mean a product of submodules I suspect. Yes.</p>",
        "id": 172760186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565267673
    },
    {
        "content": "<p>I mean a subquotient is encoded as a pair of submodules</p>",
        "id": 172760195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565267691
    },
    {
        "content": "<p>Right.</p>",
        "id": 172760200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565267697
    },
    {
        "content": "<p>It's not obvious to me that this has nice algebraic properties like submodules do though</p>",
        "id": 172760215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565267709
    },
    {
        "content": "<p>That is, the collection of submodules is a \"space\", not just a \"set\"</p>",
        "id": 172760239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565267748
    },
    {
        "content": "<p>There is such a thing as a simple subquotient -- a subquotient which is simple as a module. A simple module is a module which has precisely two submoules, bot and top.</p>",
        "id": 172760243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565267752
    },
    {
        "content": "<p>That, to me, is the compelling justification for bundling. If we are only claiming that subquotients are determined by this data (a pair A &lt;= B), then you could just as well do that with a function <code>mk_quotient (A B) (h: A &lt;= B): Type</code></p>",
        "id": 172760348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565267831
    },
    {
        "content": "<p>Simple modules are the analogue of prime numbers. Every positive integer is a uniquely a product of primes. For modules life isn't so simple. Recall that a <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>-module is just the same as an abelian group. The <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>-module <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>4</mn><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/4\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord\">4</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> is not simple, and even worse, it's not even isomorphic to a product of simple modules.</p>",
        "id": 172760357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565267837
    },
    {
        "content": "<p>However given a module with certain finiteness properties (e.g. a finite abelian group) one can produce a \"saturated chain\" of submodules <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>=</mo><msub><mi>M</mi><mn>0</mn></msub><mo>⊂</mo><msub><mi>M</mi><mn>1</mn></msub><mo>⊂</mo><msub><mi>M</mi><mn>2</mn></msub><mo>⊂</mo><mo>⋯</mo><mo>⊂</mo><msub><mi>M</mi><mi>n</mi></msub><mo>=</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">0=M_0\\subset M_1\\subset M_2\\subset\\cdots\\subset M_n=M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span>, with each subquotient <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>M</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mi mathvariant=\"normal\">/</mi><msub><mi>M</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">M_{i+1}/M_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> simple.</p>",
        "id": 172760458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565267917
    },
    {
        "content": "<p>And the theorem is that the multiset of isomorphism classes of simple factors is an invariant of the module.</p>",
        "id": 172760472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565267933
    },
    {
        "content": "<blockquote>\n<p>I understand that <code>list Type</code> is a problem, exactly for the reasons stated.</p>\n<p>I had thought that <code>fin n -&gt; A</code> was almost interchangeable with <code>list A</code>, as there are suitable coercions between them (I think).  As you say, though, <code>fin n</code> requires you to know <code>n</code>.  This is not the end of the world for me I don't think.  I'd much rather not extend the filtration past the top, as I would like to distinguish between <code>0 &lt; U_1 &lt; U_2 &lt; M</code> and <code>0 &lt; U_1 &lt; U_2 &lt; M &lt; M</code> as filtrations.</p>\n</blockquote>\n<p>To be clear, I'm not saying that the filtration actually extends past the top. This is only an encoding trick - the <code>list (submodule R M)</code> is still just as it was</p>",
        "id": 172760494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565267951
    },
    {
        "content": "<p>For example, for the cyclic groups <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>C</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">C_4</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>C</mi><mn>2</mn></msub><mo>×</mo><msub><mi>C</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">C_2\\times C_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> the multisets are <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>C</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">C_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with multiplicity 2 (in both cases), so you can't reconstruct a module from its irreducible subquotients. However the multiset is still useful -- for example in algebraic geometry one often does induction on the size of the multiset (with the inductive step typically being straightforward and the base case being the interesting one).</p>",
        "id": 172760592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565268022
    },
    {
        "content": "<p>That is, the filtrations <code>0 &lt; U_1 &lt; U_2 &lt; M</code> and <code>0 &lt; U_1 &lt; U_2 &lt; M &lt; M</code> are distinct, but the function <code>factors F : nat -&gt; Type</code> is the same for both filtrations. You just remember that they have different lengths and the function is \"garbage\" past the end</p>",
        "id": 172760761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565268162
    },
    {
        "content": "<blockquote>\n<p>That is, the collection of submodules is a \"space\", not just a \"set\"</p>\n</blockquote>\n<p>I find it hard to imagine a definition of \"space\" where the submodules form a space and the subquotients do not. The subquotients are a subspace of the product of two copies of the space of submodules.</p>",
        "id": 172760890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565268284
    },
    {
        "content": "<p>My question is mostly directed at whether that encoding is reflecting some real structure that we care about or if it's just the usual \"a group is a 4-tuple\" business</p>",
        "id": 172760951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565268348
    },
    {
        "content": "<p>In some cases (for example subspaces of a finite-dimensional real vector space) the \"space\" of submodules really do naturally form a topological space, with one connected component for each dimension. But similarly the subquotients do too, they're a topological space with one connected component for each pair (dim A, dim B).</p>",
        "id": 172761007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565268376
    },
    {
        "content": "<p>Are they a lattice?</p>",
        "id": 172761060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565268468
    },
    {
        "content": "<p>Or at least, is there an ordering</p>",
        "id": 172761121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565268497
    },
    {
        "content": "<p>You can visualise the space of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">d</span></span></span></span>-dimensional submodules of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> as a quotient <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">GL_n(\\mathbb{R})/P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is a subgroup of \"block upper triangular matrices\" consisting of a <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mo>×</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d\\times d</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">d</span></span></span></span> block at the top and an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(n-d)\\times (n-d)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mclose\">)</span></span></span></span> block at the bottom. You can get more general subquotients (or even chains of submodules) by using other choices of \"parabolic subgroup\" P with more blocks on the diagonal.</p>",
        "id": 172761195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565268574
    },
    {
        "content": "<p>I don't think I can intersect two subquotients, but I am more confident about an ordering. I think I would suggest that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mi mathvariant=\"normal\">/</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">B/A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>B</mi><mo mathvariant=\"normal\">′</mo></msup><mi mathvariant=\"normal\">/</mi><msup><mi>A</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">B'/A'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> were incomparable unless <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>=</mo><msup><mi>A</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">A=A'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> in which case it goes on the subset ordering on the $$B$$s.</p>",
        "id": 172761270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565268632
    },
    {
        "content": "<p>One could risk <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>B</mi><mo>∩</mo><msup><mi>B</mi><mo mathvariant=\"normal\">′</mo></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo>∩</mo><msup><mi>A</mi><mo mathvariant=\"normal\">′</mo></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(B\\cap B')/(A\\cap A')</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> but it might not be a great idea. It looks a bit odd to me in the sense that I've not seen it before.</p>",
        "id": 172761307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565268674
    },
    {
        "content": "<p>Oh, I was going to guess <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub><mi mathvariant=\"normal\">/</mi><msub><mi>A</mi><mn>1</mn></msub><mo>≤</mo><msub><mi>B</mi><mn>2</mn></msub><mi mathvariant=\"normal\">/</mi><msub><mi>A</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">B_1/A_1 \\le B_2/A_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> iff <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub><mo>≤</mo><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">B_1\\le B_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub><mo>≤</mo><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_2\\le A_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 172761344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565268704
    },
    {
        "content": "<p>It might work but not be useful, or it might work and be a really cool way of thinking about things, or it might just not work.</p>",
        "id": 172761345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565268704
    },
    {
        "content": "<p>One could I guess also say <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub><mi mathvariant=\"normal\">/</mi><msub><mi>A</mi><mn>1</mn></msub><mo>≤</mo><msub><mi>B</mi><mn>2</mn></msub><mi mathvariant=\"normal\">/</mi><msub><mi>A</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">B_1/A_1\\leq B_2/A_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> iff there was a \"natural map\" from one to the other, like for submodules.</p>",
        "id": 172761442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565268755
    },
    {
        "content": "<p>If you did that you'd get <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo>⊆</mo><msub><mi>A</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_1\\subseteq A_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub><mo>⊆</mo><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">B_1\\subseteq B_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 172761503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565268800
    },
    {
        "content": "<p>Your point about considering subquotients as generalizations of submodules by inserting an additional block, and filtrations as a further generalization to multiple blocks, suggests a way to encode this as an inductive type, which might work out nicer</p>",
        "id": 172761537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565268832
    },
    {
        "content": "<p>Grassmannians are the topological spaces which one gets by considering filtrations on a finite-dimensional vector space. Because they can be computed as quotients of general linear groups by subgroups there is also a purely algebraic way of thinking about them, where your base field is now arbitrary and the quotients are (non-affine) schemes.</p>",
        "id": 172761633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565268893
    },
    {
        "content": "<p>Projective 1-space is the space of 1-dimensional subspaces of a 2-dimensional vector space. These are the first natural examples of non-affine schemes. <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> how is gluing?</p>",
        "id": 172761868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565269137
    },
    {
        "content": "<p>Do we have Grassmannians yet? ;-)</p>",
        "id": 172761879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565269145
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">transit</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">transit</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">transit</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">transit</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">transit</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"n\">def</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">bounded_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">transit</span> <span class=\"o\">(</span><span class=\"err\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">⊤</span>\n</pre></div>\n\n\n<p>The downside of this encoding is that it distinguishes reassociated sequences, i.e. <code>0 &lt; (A &lt; (B &lt; M))</code> vs <code>(0 &lt; A) &lt; (B &lt; M)</code></p>",
        "id": 172762157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565269384
    },
    {
        "content": "<p>Here's how you can say that a filtration is simple:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">transit</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">transit</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">transit</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">transit</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">transit</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"n\">def</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">bounded_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">transit</span> <span class=\"o\">(</span><span class=\"err\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">⊤</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">le_pair</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_le_b</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">transit</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">transit</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">le_pair</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">transit</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">transit</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t1</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"bp\">++</span> <span class=\"n\">t2</span><span class=\"bp\">.</span><span class=\"n\">factors</span>\n\n<span class=\"n\">def</span> <span class=\"n\">subquotient</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">le_pair</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">quotient</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">le_pair</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">subquotient</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"bp\">_</span>\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">le_pair</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">subquotient</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">def</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">is_simple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">filtration</span><span class=\"bp\">.</span><span class=\"n\">is_simple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">factors</span><span class=\"o\">,</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">is_simple</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">subquotient</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 172764341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565270938
    },
    {
        "content": "<p>I'll have to take some time to look at that solution and wrap my head around it, and how <code>transit</code> is really different from a <code>list</code> with a <code>chain'</code> (in particular, I think one could replace <code>transit.factors</code> with some sort of <code>chain'_factors (l : list \\a) [chain' &lt;= l] : list (le_pair \\a)</code> and get a similar result.</p>",
        "id": 172774026,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565277252
    },
    {
        "content": "<p>Thanks for the pointers though</p>",
        "id": 172774041,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565277261
    },
    {
        "content": "<p>I think for now I'll just treat sub quotients as these <code>le_pairs</code> until something better comes around</p>",
        "id": 172774122,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565277325
    },
    {
        "content": "<p>You can still use list and chain; the key point here is that you don't put types in a list, you put the data from which you generate the types</p>",
        "id": 172776682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565279183
    },
    {
        "content": "<p>But I think it would be better to use structures that encode the relevant invariants, so that for example it's not possible to have an empty factors list, rather than having a predicate on the side to assert this</p>",
        "id": 172776791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565279270
    },
    {
        "content": "<p>You can also avoid the reassociation problem by structuring the inductive type a little differently so that it's all associated one way (this is basically what the <code>list</code> representation gives you), but this has different defeq simplifications and introduces a bias for one kind of association over the other. Whether this matters one way or another depends on details of the application</p>",
        "id": 172776951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565279399
    },
    {
        "content": "<p>When I said use a list I meant something more along the lines of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n\n<span class=\"n\">class</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">modules</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">modules</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">le_pair</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_le_b</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">chain&#39;_of_first_two</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">dunfold</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">chain&#39;_desc_left</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;</span> <span class=\"n\">R</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">L</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">filtration</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">bounded_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">le_pair</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span> <span class=\"o\">[],</span>       <span class=\"bp\">_</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">],</span>      <span class=\"bp\">_</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"n\">y</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">),</span><span class=\"n\">h</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">,</span> <span class=\"n\">chain&#39;_of_first_two</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">filtration</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"bp\">⟨</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">chain&#39;_desc_left</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">subquotient</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">le_pair</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">quotient</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">le_pair</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">subquotient</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"bp\">_</span>\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">le_pair</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">subquotient</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">def</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">is_simple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">filtration</span><span class=\"bp\">.</span><span class=\"n\">is_simple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">factors</span><span class=\"o\">,</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">is_simple</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">subquotient</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>which I am pretty sure never has a list of types?</p>",
        "id": 172779143,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565280937
    },
    {
        "content": "<p>To return to the bundling issue, am I going to  run into problems when I try to define equivalence classes of modules?  From a (very brief) reading of <code>setoid</code> and <code>quot</code>, you aren't allowed to tack classes onto the types.  In particular this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">function</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">are_isomorphic</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"bp\">...</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">quot</span> <span class=\"n\">are_isomorphic</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span> <span class=\"n\">are_isomorphic</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>gives errors, and I feel very dirty defining <code>setoid Type</code></p>",
        "id": 172830800,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565334948
    },
    {
        "content": "<p>If you want to deal with isomorphism classes of R-modules then this is another argument that says you should be bundling them. Independent of this, the usual way in Lean to express that two objects are isomorphic is not to ask for a bijection between them but to ask for functions in each direction whose composite is the identity -- see e.g. data.equiv.basic (which also provides notation \\equiv)</p>",
        "id": 172831578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565335998
    },
    {
        "content": "<p>The more you talk about the sort of things you are interested in, the more I am convinced you should just be working with a type representing the category of R-modules. I still don't know if such a type is in Lean (I was hoping that Scott would have chimed in by now) but even if it doesn't exist I would suspect that it wouldn't be too much trouble to make. Then you have all the category machinery available to you and in particular the notion of isomorphism would be available to you already together with all standard theorems you'll need about it (transitivity etc).</p>",
        "id": 172831735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565336204
    },
    {
        "content": "<blockquote>\n<p>the usual way in Lean to express that two objects are isomorphic is not to ask for a bijection between them but to ask for functions in each direction whose composite is the identity -- see e.g. data.equiv.basic (which also provides notation \\equiv)</p>\n</blockquote>\n<p>yes, I think I've seen this, but wanted to throw together a MWE above.</p>",
        "id": 172834433,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565339782
    },
    {
        "content": "<p>I know next-to-nothing about categories in lean.  Is there any documentation or sample code I could peruse?</p>",
        "id": 172834456,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565339833
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/category_theory/calculating_colimits_in_Top.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/category_theory/calculating_colimits_in_Top.lean\">https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/category_theory/calculating_colimits_in_Top.lean</a></p>",
        "id": 172834693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565340151
    },
    {
        "content": "<p>But another alternative is just to write the stuff yourself without categories. It will be a pleasant, but long, exercise. I don't know which will be easier. You bundle modules like earlier in the thread, bundle linear maps, and you can make your own kernels and cokernels. I'm really sorry -- it's the kind of thing I would just spend a couple of hours doing because I like that kind of thing, but I am really snowed under at the minute.</p>",
        "id": 172834802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565340279
    },
    {
        "content": "<p>Ok.  I'll take a look.  I'm not so keen on the idea (in general) of writing custom bundlings for every algebraic structure (once modules are done, what about bimodules, comodules etc. etc.) so I'll look into categories first.</p>",
        "id": 172835047,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565340539
    },
    {
        "content": "<p>This has been Scott's argument too. In mathlib we are still figuring out the right way to do things, and several approaches have been tried (and I am partly to blame for this) . I am working with two summer students on group theory and we have been using unbundled groups but bundled subgroups and isomorphisms, so we're having to write our own theorems such as if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi><mo>≅</mo><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">G\\cong H</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>H</mi><mo>≅</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">H\\cong K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi><mo>≅</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">G\\cong K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, and are introducing new notation for each kind of isomorphism. With the category theory approach we get all these for free.</p>",
        "id": 172835801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565341311
    },
    {
        "content": "<p>Ok, I think I have a (very ugly) first pass at this, culminating in the line</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">filtration</span><span class=\"bp\">.</span><span class=\"n\">is_composition_series</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">factors</span><span class=\"o\">,</span> <span class=\"n\">is_simple</span> <span class=\"o\">(</span><span class=\"n\">subquotient&#39;</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>There are many ugly bits, mostly due to my ignorance (e.g. stating a object in a category is isomorphic to another), but it works.  At last.  I think.<br>\n<a href=\"https://github.com/rspencer01/lean_representation_theory/tree/master/src\" target=\"_blank\" title=\"https://github.com/rspencer01/lean_representation_theory/tree/master/src\">https://github.com/rspencer01/lean_representation_theory/tree/master/src</a></p>",
        "id": 172921112,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565436131
    },
    {
        "content": "<p>What's up with the remark on <code>submodule</code> not inferring <code>add_comm_group</code>?</p>",
        "id": 172922487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565438925
    },
    {
        "content": "<p>I think the issue might be in the definition of <code>Module</code></p>",
        "id": 172922495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565438955
    },
    {
        "content": "<p><code>r_mod</code> is a bad idea</p>",
        "id": 172922553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565439050
    },
    {
        "content": "<p>I'm very happy to suggestions/corrections.  I defined <code>r_mod</code> because <code>bundled</code> only works on a single class.</p>",
        "id": 172922610,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565439139
    },
    {
        "content": "<p>You should probably define <code>Module</code> directly rather than using <code>bundled</code></p>",
        "id": 172922611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565439145
    },
    {
        "content": "<p>I don't think it's actually saving you that much work, you still have to associate the right category structure</p>",
        "id": 172922621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565439186
    },
    {
        "content": "<p>and don't make it <code>reducible</code></p>",
        "id": 172922625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565439217
    },
    {
        "content": "<p>Ah.</p>\n<p>I was basically copying <code>mathlib</code>'s <code>group_theory.category</code></p>",
        "id": 172922668,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565439247
    },
    {
        "content": "<p>I still am not certain what is up with <code>submodule</code> and <code>add_comm_group</code>.  Here is an example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span><span class=\"bp\">.</span><span class=\"n\">le_pair</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">b</span>\n<span class=\"c\">/-</span><span class=\"cm\"> p.b : submodule R ↥M -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">a</span>\n<span class=\"c\">/-</span><span class=\"cm\"> submodule.comap (submodule.subtype (p.b)) (p.a) : submodule R ↥(p.b) -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>                              <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">a</span>\n<span class=\"c\">/-</span><span class=\"cm\"> maximum class-instance resolution depth has been reached (the limit can be increased by setting option &#39;class.instance_max_depth&#39;) (the class-instance resolution trace can be visualized by setting option &#39;trace.class_instances&#39;)-/</span>\n</pre></div>\n\n\n<p>which seems to indicate that it can't find an instance of <code>add_comm_group</code> for <code>p.b</code>, an honest <code>submodule R ↥M</code>.</p>\n<p>To me this feels like a problem in <code>submodule</code>, rather than <code>Module</code>.</p>",
        "id": 172922869,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565439692
    },
    {
        "content": "<p>In fact, the same happens if I replace <code>M : Module R</code> with <code>(N : Type) [add_comm_group N] [module R N]</code></p>",
        "id": 172923102,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565440186
    },
    {
        "content": "<p>Whoops.  Nevermind.  I retract that.  Its only a problem when I <code>import Module</code>.</p>",
        "id": 172923578,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1565441101
    }
]