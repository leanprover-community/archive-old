[
    {
        "content": "<p>Hi, thank you all for the awesome work done on Lean. I have been messing with it for the past month or so, and I'm absolutely amazed by it. Quick question: what does <code>Type*</code> mean? I haven't encountered an asterisk like that before, and first encountered it when reading Logic and Proof after doing all of the exercises in TPiL.</p>",
        "id": 184686187,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1578000788
    },
    {
        "content": "<p>It usually means <code>Type u</code> where <code>u</code> is a universe variable. Basically it lets Lean choose the universe, and it usually chooses the most polymorphic option.</p>",
        "id": 184686474,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1578000984
    },
    {
        "content": "<p>Oh interesting. Is this a more general notation that can be used elsewhere or is it specific to being a placeholder for universes?</p>",
        "id": 184686544,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1578001067
    },
    {
        "content": "<p>I think it's just <code>Type*</code> and <code>Sort*</code>. I think <code>Type*</code> might be the same as <code>Type _</code> and underscores can be used in a lot of places</p>",
        "id": 184689349,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1578003843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  Does this means that if I don't want to go through the universe details, then I can use Type * or Type _ ?</p>",
        "id": 184715911,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1578037050
    },
    {
        "content": "<p>Yes. <code>Type*</code> is what is used most of the time to avoid having to think about universes.</p>",
        "id": 184718394,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1578040803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  Sorry for disturbing you, but could you please tell me that why the second one is not accepted by Lean? <br>\nThis is accepted by Lean:</p>\n<div class=\"codehilite\"><pre><span></span>universe u\nclass Associative {G : Type u} (f : G → G → G) : Type u :=\n(Hassoc : ∀ x y z : G, f (f x y) z = f x (f y z))\n</pre></div>\n\n\n<p>But this one not:</p>\n<div class=\"codehilite\"><pre><span></span>class Associative {G : Type _} (f : G → G → G) : Type _ :=\n(Hassoc : ∀ x y z : G, f (f x y) z = f x (f y z))\n</pre></div>",
        "id": 184828115,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1578188142
    },
    {
        "content": "<p>I guess I was wrong about <code>Type*</code> being the same as <code>Type _</code>. <code>Type _</code> will probably try to infer from the context what the universe should be - it will fill it in with whatever it is forced to be, and will fail if there's nothing forcing it to be a particular universe. and <code>Type*</code> will fill it in with something sensible basically. I don't know the precise algorithms.</p>",
        "id": 184828333,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1578188545
    },
    {
        "content": "<p>These are not the same; one uses <code>Type u</code> and the other uses <code>Type _</code>. I'm pretty sure that <code>Type*</code> and <code>Type _</code> are identical</p>",
        "id": 184829264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578190630
    },
    {
        "content": "<p>The error message makes it clear what the problem is:</p>\n<div class=\"codehilite\"><pre><span></span>failed to add declaration &#39;Associative&#39; to environment, type has metavariables\n</pre></div>\n\n\n<p>It successfully unified, but it wasn't completely able to pin down the target type because this is also valid:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">class</span> <span class=\"n\">Associative</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Hassoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 184829336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578190770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thanks for the answer. The purpose of the question was to avoid universe hierarchy, and let Lean figured out the universe; hence, I left the return type as Type _.  If I do not mention any return type, then it is fine. </p>\n<div class=\"codehilite\"><pre><span></span>class Associative {G : Type _} (f : G → G → G) :=\n(Hassoc : ∀ x y z : G, f (f x y) z = f x (f y z))\n\n#check Associative\nreturns Associative : (?M_1 → ?M_1 → ?M_1) → Type\n</pre></div>\n\n\n<p>Coming back to my question (also because of my Coq background), if I want to avoid the universe hierarchy, then what is the best way to go?</p>",
        "id": 184834481,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1578201605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239476\">@Mukesh Tiwari</span> This technique almost always works, but inductive types are special because you actually have to make a choice of what universe they should live in; the target type is only lower bounded, and different choices above that lead to different types. For definitions and theorems, the universe is uniquely determined from the inputs so you can use <code>Type*</code> consistently and lean will just figure everything out.</p>",
        "id": 184847581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578228349
    },
    {
        "content": "<p>What does <code>Type*</code> mean? I saw it in Mathlib (in particular <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/real/cau_seq.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/data/real/cau_seq.lean</a>). I couldn't find it in Theorem Proving in Lean or Lean Reference Manual. <code>#check Type*</code> prints <code>Type u_1 : Type (u_1+1)</code>, but what's <code>u_1</code>? <code>#check u_1</code> gives <code>unknown identifier 'u_1'</code>.</p>",
        "id": 198549633,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590264068
    },
    {
        "content": "<p><code>Type*</code> means the same as <code>Type _</code>, that is, a type in an arbitrary universe</p>",
        "id": 198549888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590264444
    },
    {
        "content": "<p>However lean deals with universe metavariables a bit differently from regular metavariables; in particular if after elaborating the whole definition/theorem there are still outstanding universe metavariables, they are all converted to fresh universe variables (<code>u_1</code> in this case)</p>",
        "id": 198549948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590264525
    },
    {
        "content": "<p>It's basically an easy way to create universe polymorphic definitions/theorems without ever naming a universe (and needing to declare universes)</p>",
        "id": 198549992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590264595
    },
    {
        "content": "<p>What is the advantage/disadvantages of the following declarations at the beginning of your file then:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"err\">\\</span><span class=\"n\">alpha</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>vs.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"err\">\\</span><span class=\"n\">alpha</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>?</p>",
        "id": 198550037,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590264607
    },
    {
        "content": "<p>In a variable, it actually does declare the universe variable as well. The second line is equivalent to the first line (except the universe is called <code>u_1</code> not <code>u</code>)</p>",
        "id": 198550059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590264670
    },
    {
        "content": "<p>I get the impression that it's more important to declare the universes explicitly when you have multiple of them, as happens in category theory work?</p>",
        "id": 198550065,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590264693
    },
    {
        "content": "<p>The style I try to stick to in mathlib is to never declare universes unless necessary</p>",
        "id": 198550106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590264728
    },
    {
        "content": "<p>this is both less to type and also usually gets the right answer</p>",
        "id": 198550110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590264751
    },
    {
        "content": "<p>In category theory, there is the problem that <code>category</code> has an internal universe variable, so it sometimes doesn't get inferred correctly. I think this has been fixed in later versions of lean 3 so you might start to see those universe declarations disappear</p>",
        "id": 198550166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590264843
    },
    {
        "content": "<p>I have the following lines in the top of a file I'm working proving basic topology facts (just for practice, not for Mathlib).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">t</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">t</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Jalex's comment implies that there is no reason to have distinct universes for your different types, but there is more generality giving each type it's own universe, correct?</p>\n<p>Would you instead declare this as:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span>  <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>or perhaps as:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Does the latter allow for each type to be in a distinct universe while the former doesn't?</p>",
        "id": 198550210,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590264932
    },
    {
        "content": "<p>I would like to be able to write <code>variables {α β γ δ : Type*}</code> but there is an outstanding parser bug that causes this to fail (last I checked, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> has this changed?)</p>",
        "id": 198550277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590265051
    },
    {
        "content": "<p>so you have to write <code>variables {α : Type*} {β : Type*} {γ : Type*} {δ : Type*}</code> instead</p>",
        "id": 198550283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590265080
    },
    {
        "content": "<p>But doesn't <code>variables {α β γ δ : Type*}</code> make the assumption that <code>α β γ δ </code> all have the same type, which is more restrictive than <code>variables {α : Type*} {β : Type*} {γ : Type*} {δ : Type*} </code>? (Assuming it worked)</p>",
        "id": 198550331,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590265129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I don't think anything has changed in this area recently.  PRs and/or issues are always welcome.</p>",
        "id": 198550339,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590265155
    },
    {
        "content": "<p>The first line is equivalent to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u_1</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u_1</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u_1</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u_1</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>and lean complains about the redeclaration of <code>u_1</code></p>",
        "id": 198550360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590265182
    },
    {
        "content": "<p>however if it wasn't for that this would make them all different types</p>",
        "id": 198550403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590265205
    },
    {
        "content": "<p>If you do this in the binders of a def or theorem, it works fine</p>",
        "id": 198550415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590265257
    },
    {
        "content": "<p>It doesn't mean that they get the same type (admittedly this might be a bit counter intuitive). They get the same type pre-expression, that is <code>Type _</code>, but this is elaborated 4 times for 4 variables and so they are not related to each other</p>",
        "id": 198550434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590265321
    },
    {
        "content": "<p>One reason I've had to explicitly write universe variables is when formalising a universal property or more generally a property that involves quantifying over \"all topological spaces\" or some such thing: in lean this might translate to \"all topological spaces in the same universe as the one you're talking about\"</p>",
        "id": 198550895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590266051
    },
    {
        "content": "<p>There was a thread somewhere about a topological space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> being compact if and only if the projection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>×</mo><mi>Y</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X\\times Y\\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> was closed for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> and here one could not get away with <code>Type*</code></p>",
        "id": 198550925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590266155
    },
    {
        "content": "<p>PS <span class=\"user-mention\" data-user-id=\"300684\">@Keefer Rowan</span> did you try <code>variables {a b c d : Type*}</code> before you wrote your guess about what it did?</p>",
        "id": 198550989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590266225
    },
    {
        "content": "<p>No, but Mario's comment made it clear this wouldn't work, so I was wondering how it was supposed to work. And interesting example, I see how it could help to be explicit there.</p>",
        "id": 198551255,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590266585
    },
    {
        "content": "<p>One day hopefully it will make them all have different universes, because this is by far the most common use case.</p>",
        "id": 198551794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590267513
    }
]