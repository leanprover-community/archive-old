[
    {
        "content": "<p>Could someone help me with this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.pimage</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">char</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">box</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">formula</span>\n\n<span class=\"c1\">-- Do I have to do this manually? I saw Lean 4 has \"deriving Repr\", but Lean 3 does not?</span>\n<span class=\"kd\">def</span> <span class=\"n\">formToString</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">c</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"s2\">\"atom \"</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"n\">f</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"s2\">\"neg \"</span> <span class=\"bp\">++</span> <span class=\"n\">formToString</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"s2\">\"and (\"</span> <span class=\"bp\">++</span> <span class=\"n\">formToString</span> <span class=\"n\">f</span> <span class=\"bp\">++</span> <span class=\"s2\">\") (\"</span> <span class=\"bp\">++</span> <span class=\"n\">formToString</span> <span class=\"n\">g</span> <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">box</span> <span class=\"n\">f</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"s2\">\"box (\"</span><span class=\"bp\">++</span> <span class=\"n\">formToString</span> <span class=\"n\">f</span> <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">form_repr</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">formToString</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">projection</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">box</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">uglySetProjection</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">formula</span> <span class=\"o\">:=</span>  <span class=\"n\">finset.pimage</span> <span class=\"o\">(</span><span class=\"n\">part.of_option</span> <span class=\"bp\">∘</span> <span class=\"n\">projection</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">uglySetProjection</span> <span class=\"o\">{</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"sc\">'p'</span><span class=\"o\">),</span> <span class=\"n\">box</span> <span class=\"o\">(</span><span class=\"n\">box</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"sc\">'q'</span><span class=\"o\">)),</span> <span class=\"n\">box</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"sc\">'q'</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">--  Maybe it is better to use a \"pfun\"?</span>\n<span class=\"kd\">def</span> <span class=\"n\">pfunProjection</span> <span class=\"o\">:</span> <span class=\"n\">pfun</span> <span class=\"n\">formula</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">box</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"c1\">-- But now I need something decidable here?</span>\n<span class=\"kd\">def</span> <span class=\"n\">niceSetProjection</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">formula</span> <span class=\"o\">:=</span> <span class=\"n\">finset.pimage</span> <span class=\"n\">pfunProjection</span>\n\n<span class=\"c1\">-- It would be great if I could say projection X := { f | (box f) ∈ X }</span>\n<span class=\"c1\">-- but it is impossibe to define finsets using set comprehension?</span>\n<span class=\"c1\">-- (because then there is no proof that the result is finit?)</span>\n</code></pre></div>",
        "id": 271251897,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1644400203
    },
    {
        "content": "<p>Indeed, the <code>finset</code> images require decidability, and a general <code>part</code> has undecidable domain. This is the content of the noncomputability of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/part.equiv_option\">docs#part.equiv_option</a></p>",
        "id": 271253371,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644400874
    },
    {
        "content": "<p>Ok. So it is better to use <code>option</code> instead of <code>part</code> (or <code>pfun</code>) in my case? It mostly feels weird to use <code>part.of_option</code> instead of using a <code>part</code> in the first place ;-)</p>",
        "id": 271253610,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1644400990
    },
    {
        "content": "<p>I think so, yeah</p>",
        "id": 271261698,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644405344
    }
]