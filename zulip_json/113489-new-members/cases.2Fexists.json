[
    {
        "content": "<p>Documentation says <code>cases x</code> works on an instance <code>x</code> of an inductive type. What is the inductive type in <code>cases h ((u n - l)/2)</code> in <a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/solutions/08_limits_negation.lean#L128\">this solution</a>?</p>",
        "id": 205296455,
        "sender_full_name": "Iocta",
        "timestamp": 1595974064
    },
    {
        "content": "<p>it's something like <code>\\exists N, hN</code></p>",
        "id": 205296573,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595974141
    },
    {
        "content": "<p>The full thing we apply <code>cases</code> to is <code>h ((u n - l)/2) (by linarith)</code>. If you want to see its type, you can just insert a line <code>have := h ((u n - l)/2) (by linarith),</code> and see the type of <code>this</code> in the tactic state</p>",
        "id": 205296638,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595974190
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n_1</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n_1</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 205296819,
        "sender_full_name": "Iocta",
        "timestamp": 1595974302
    },
    {
        "content": "<p>that looks right; are you still confused about something?</p>",
        "id": 205296876,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595974325
    },
    {
        "content": "<p>What is inductive about it?</p>",
        "id": 205296938,
        "sender_full_name": "Iocta",
        "timestamp": 1595974396
    },
    {
        "content": "<p><code>\\exists</code> is an inductive constructor</p>",
        "id": 205297253,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595974587
    },
    {
        "content": "<p>so are <code>\\and</code> and <code>\\or</code></p>",
        "id": 205297260,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595974596
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/core/init/logic.html#Exists\">https://leanprover-community.github.io/mathlib_docs/core/init/logic.html#Exists</a></p>",
        "id": 205297263,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595974600
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#inductively-defined-propositions\">Relevant TPiL section</a></p>",
        "id": 205297410,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595974705
    },
    {
        "content": "<p>thanks, will review that</p>",
        "id": 205297463,
        "sender_full_name": "Iocta",
        "timestamp": 1595974746
    }
]