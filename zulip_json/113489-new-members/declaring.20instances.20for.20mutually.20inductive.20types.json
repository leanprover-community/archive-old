[
    {
        "content": "<p>I'm modeling a programming language with datatypes, and to capture the notion of a structure which itself has fields I wrote the following </p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">mutual</span> <span class=\"kn\">inductive</span> <span class=\"n\">PrimType</span><span class=\"o\">,</span> <span class=\"n\">Struct</span>\n  <span class=\"k\">with</span> <span class=\"n\">PrimType</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n   <span class=\"bp\">|</span> <span class=\"n\">pInt</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>  <span class=\"bp\">→</span> <span class=\"n\">PrimType</span>\n   <span class=\"bp\">|</span> <span class=\"n\">pStr</span> <span class=\"o\">:</span> <span class=\"n\">string</span>  <span class=\"bp\">→</span> <span class=\"n\">PrimType</span>\n   <span class=\"bp\">|</span> <span class=\"n\">pBool</span><span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">PrimType</span>\n   <span class=\"bp\">|</span> <span class=\"n\">pStruct</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">}:</span> <span class=\"n\">Struct</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">PrimType</span>\n\n  <span class=\"k\">with</span> <span class=\"n\">Struct</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n   <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fields</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">PrimType</span><span class=\"o\">))</span>\n          <span class=\"o\">:</span> <span class=\"n\">Struct</span> <span class=\"n\">name</span>\n   <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Struct</span> <span class=\"n\">name</span>\n</code></pre></div>\n\n\n<p>Lean can't derive <code>decidable_eq</code> for this pair. Here's a more minimal example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">mutual</span> <span class=\"kn\">inductive</span> <span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">B</span>\n<span class=\"k\">with</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n <span class=\"bp\">|</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"k\">with</span> <span class=\"n\">B</span><span class=\"o\">:</span>  <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">b1</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"n\">B</span>\n</code></pre></div>\n\n\n<p>I <em>think</em> it's possible to define decidable equality for the pair, but I don't know how to do this syntactically. I've only ever seen declaring an instance for a single type at a time, whereas the only way I can define equality for <code>A</code> is to define it for <code>B</code> at the same time. How would I do this?</p>",
        "id": 203926125,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594800107
    },
    {
        "content": "<p>I don't know whether there is syntax to write mutually recursive instances directly, but you can just write mutually recursive <code>def</code>s and then mark them as instances with <code>attribute [instance]</code>.</p>",
        "id": 203943048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594812631
    },
    {
        "content": "<p>Thanks, that makes sense! I've  made some progress, but hit two roadblocks </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">and_eq</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"k\">then</span> <span class=\"n\">is_true</span> <span class=\"bp\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"bp\">⟩</span>\n    <span class=\"k\">else</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hq</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n    <span class=\"k\">else</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n\n<span class=\"n\">mutual</span> <span class=\"n\">def</span> <span class=\"n\">P_eq</span><span class=\"o\">,</span> <span class=\"n\">S_eq</span>\n<span class=\"k\">with</span> <span class=\"n\">P_eq</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">PrimType</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"bp\">_</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pStruct</span> <span class=\"bp\">_</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"bp\">_</span><span class=\"o\">)</span>      <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"bp\">_</span><span class=\"o\">)</span>      <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"bp\">_</span><span class=\"o\">)</span>      <span class=\"o\">(</span><span class=\"n\">pStruct</span> <span class=\"bp\">_</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"bp\">_</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pStruct</span> <span class=\"bp\">_</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pStruct</span> <span class=\"bp\">_</span><span class=\"o\">)</span>    <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pStruct</span> <span class=\"bp\">_</span><span class=\"o\">)</span>    <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pStruct</span> <span class=\"bp\">_</span><span class=\"o\">)</span>    <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"bp\">_</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"n\">x</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"n\">y</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"n\">x</span><span class=\"o\">)</span>      <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"n\">y</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"n\">x</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"n\">y</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">has_decidable_eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pStruct</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pStruct</span> <span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span>\n        <span class=\"k\">have</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">has_decidable_eq</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">heq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n            <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"n\">m</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"bp\">@</span><span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"c1\">-- this can only prove a Prop, not decidable (...)</span>\n            <span class=\"o\">},</span>\n        <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">and_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">heq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n        <span class=\"o\">}</span>\n\n<span class=\"k\">with</span> <span class=\"n\">S_eq</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">},</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">Struct</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">_</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span>\n        <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">PrimType</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span> <span class=\"n\">string</span> <span class=\"n\">PrimType</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">has_decidable_eq</span> <span class=\"n\">P_eq</span><span class=\"o\">},</span>\n        <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">PrimType</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">true</span><span class=\"o\">}</span>\n<span class=\"c1\">--using_well_founded {rel_tac := λ _ _, _}</span>\n</code></pre></div>\n\n\n<p>I'm a bit unsure how to go about proving that the recursion is well- founded here, even after looking at <a href=\"https://leanprover-community.github.io/extras/well_founded_recursion.html\">https://leanprover-community.github.io/extras/well_founded_recursion.html</a> (lean cannot determine this for <code>P_eq </code>).</p>\n<p>Also there's one <code>sorry</code> at the end of <code>P_eq</code> because I'm stuck trying to prove decidability of heterogenous equality for the first time (<code>decidable (Struct n = Struct m)</code>). I thought I could case split on <code>n=m</code> but this doesn't work since <code>or.elim</code> can only prove another <code>Prop</code> from a disjunction.</p>",
        "id": 203993024,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594837221
    },
    {
        "content": "<p>I also had to copypaste the <code>and_eq</code> from mathlib because that instance didn't have a name, so I didn't know how to refer to it in the proof otherwise. Not sure if there's a workaround for that.</p>",
        "id": 203993785,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594837568
    },
    {
        "content": "<p>You can run <code>#print instances decidable</code> to see a (long) list of all its instances.</p>",
        "id": 204002403,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594841807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312852\">@Kris Brown</span> All instances have names. If they are not specified, their names are automatically generated from the statement, where <code>A (B x)</code> gets the name <code>B.A</code></p>",
        "id": 204002621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594841910
    },
    {
        "content": "<p>Also, here is a problem to your <code>or</code> problem: use <code>cases p</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">heq_iff_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">eq_of_heq</span><span class=\"o\">,</span> <span class=\"n\">heq_of_eq</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">mutual</span> <span class=\"n\">def</span> <span class=\"n\">P_eq</span><span class=\"o\">,</span> <span class=\"n\">S_eq</span>\n<span class=\"k\">with</span> <span class=\"n\">P_eq</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">PrimType</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"bp\">_</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pStruct</span> <span class=\"bp\">_</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"bp\">_</span><span class=\"o\">)</span>      <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"bp\">_</span><span class=\"o\">)</span>      <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"bp\">_</span><span class=\"o\">)</span>      <span class=\"o\">(</span><span class=\"n\">pStruct</span> <span class=\"bp\">_</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"bp\">_</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pStruct</span> <span class=\"bp\">_</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pStruct</span> <span class=\"bp\">_</span><span class=\"o\">)</span>    <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pStruct</span> <span class=\"bp\">_</span><span class=\"o\">)</span>    <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"bp\">_</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pStruct</span> <span class=\"bp\">_</span><span class=\"o\">)</span>    <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"bp\">_</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"n\">x</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pInt</span> <span class=\"n\">y</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"n\">x</span><span class=\"o\">)</span>      <span class=\"o\">(</span><span class=\"n\">pBool</span> <span class=\"n\">y</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"n\">x</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"n\">pStr</span> <span class=\"n\">y</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pStruct</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pStruct</span> <span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">has_decidable_eq</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">],</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">heq_iff_eq</span><span class=\"o\">],</span> <span class=\"n\">apply</span> <span class=\"n\">S_eq</span><span class=\"o\">,</span>\n        <span class=\"o\">}</span>\n\n<span class=\"k\">with</span> <span class=\"n\">S_eq</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">},</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">Struct</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">_</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span>\n        <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">PrimType</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span> <span class=\"n\">string</span> <span class=\"n\">PrimType</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">has_decidable_eq</span> <span class=\"n\">P_eq</span><span class=\"o\">},</span>\n        <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">PrimType</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">true</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 204003785,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594842558
    },
    {
        "content": "<p><code>using_well_founded</code> still scares me. You can try to mimic <a href=\"https://github.com/leanprover-community/mathlib/blob/5fe67b7/src/set_theory/lists.lean#L256\">src#lists.equiv.decidable</a></p>",
        "id": 204004532,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594842949
    },
    {
        "content": "<p>That example is scary. I'll make a post focused on this in #general.</p>",
        "id": 204010181,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594845710
    }
]