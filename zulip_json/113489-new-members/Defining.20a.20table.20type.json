[
    {
        "content": "<p>Hello! I've just started learning Lean, and I'm trying to define a table type. (Apologies if this is the wrong stream to ask!) So far, I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Table</span> <span class=\"o\">(</span><span class=\"n\">nrows</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">schema</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span><span class=\"o\">)):</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">make</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">schema.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">x.2</span> <span class=\"n\">nrows</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>In Haskell-y pseudocode, I'd like to be able to construct tables like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">Table</span> <span class=\"mi\">3</span> <span class=\"bp\">'</span><span class=\"o\">[</span><span class=\"s2\">\"name\"</span> <span class=\"o\">:</span><span class=\"bp\">-&gt;</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"s2\">\"age\"</span> <span class=\"o\">:</span><span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span><span class=\"o\">]</span>\n<span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"s2\">\"Alice\"</span><span class=\"o\">,</span> <span class=\"s2\">\"Bob\"</span><span class=\"o\">,</span> <span class=\"s2\">\"Charlie\"</span><span class=\"o\">]</span> <span class=\"o\">:::</span> <span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>However, I run into a type error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">term</span>\n  <span class=\"n\">vector</span> <span class=\"n\">x.snd</span> <span class=\"n\">nrows</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Why is the type checker expecting <code>Prop</code> instead of <code>Type</code>? The <a href=\"https://leanprover-community.github.io/mathlib_docs/init/data/list/basic.html#list.map\"><code>list.map</code> signature</a> has <code>{α : Type u} {β : Type v} (f : α → β) : list α → list β</code> -- given that <code>v</code> can vary, wouldn't inferring <code>v = 1</code> solve the issue?</p>",
        "id": 262661392,
        "sender_full_name": "Varun Gandhi",
        "timestamp": 1637807969
    },
    {
        "content": "<p>Here's the error I'm seeing in full:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">60</span><span class=\"o\">:</span><span class=\"mi\">55</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">lambda</span> <span class=\"n\">expression</span><span class=\"o\">,</span> <span class=\"sc\">','</span> <span class=\"n\">or</span> <span class=\"sc\">'⟨'</span> <span class=\"n\">expected</span>\n\n<span class=\"mi\">60</span><span class=\"o\">:</span><span class=\"mi\">56</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">expression</span>\n\n<span class=\"mi\">60</span><span class=\"o\">:</span><span class=\"mi\">56</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">⁇</span> <span class=\"bp\">=</span> <span class=\"bp\">⁇</span> <span class=\"bp\">&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">x.snd</span> <span class=\"n\">nrows</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">vector</span> <span class=\"n\">x.snd</span> <span class=\"n\">nrows</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>In Lean 3, the syntax for lambda expressions uses a comma instead of <code>=&gt;</code> (that's Lean 4).</p>",
        "id": 262661721,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637808451
    },
    {
        "content": "<p>Fixing that, the next problem is to figure out what to do with <code>schema.map (λ (x : (string × Type)), vector x.2 nrows</code>, which has type <code>list Type</code>.  That's not a type itself, so Lean has an error that a type is expected for the type of <code>data</code>.</p>",
        "id": 262661893,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637808690
    },
    {
        "content": "<p>Here's an attempt at something like the pseudocode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.vector.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">vector</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Table</span> <span class=\"o\">(</span><span class=\"n\">nrows</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Table</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ty</span> <span class=\"n\">nrows</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">schema</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Table</span> <span class=\"n\">schema</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Table</span> <span class=\"o\">((</span><span class=\"n\">name</span><span class=\"o\">,</span><span class=\"n\">ty</span><span class=\"o\">)::</span><span class=\"n\">schema</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Table</span> <span class=\"mi\">3</span> <span class=\"o\">[(</span><span class=\"s2\">\"name\"</span><span class=\"o\">,</span> <span class=\"n\">string</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"age\"</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"o\">)]</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Table.cons</span> <span class=\"o\">(</span><span class=\"s2\">\"Alice\"</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"s2\">\"Bob\"</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"s2\">\"Charlie\"</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n  <span class=\"n\">Table.cons</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"mi\">12</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"mi\">11</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n  <span class=\"n\">Table.nil</span>\n</code></pre></div>",
        "id": 262662659,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637809685
    },
    {
        "content": "<p>Not addressing the question (sorry), but just to mention that some other discussion about tables has happened here: <a href=\"#narrow/stream/270676-lean4/topic/abstraction.20for.20tables/near/262482596\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/abstraction.20for.20tables/near/262482596</a><br>\nMaybe it helps</p>",
        "id": 262663049,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637810299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thank you, that's very helpful. I probably got confused because I was reading the docs for Lean 4, but editing code for Lean 3. Appreciate the code sample.</p>",
        "id": 262663845,
        "sender_full_name": "Varun Gandhi",
        "timestamp": 1637811467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Thanks for the link. I will probably end up creating an <code>alist</code> version of <code>vector</code> since I want to make the columns unique, and I don't care about real-world use for now, just playing around.</p>",
        "id": 262665391,
        "sender_full_name": "Varun Gandhi",
        "timestamp": 1637813670
    },
    {
        "content": "<p>Hello! Is this the right forum to ask questions about Z3 theorem prover? I'm particularly interested in its Python version. Thanks</p>",
        "id": 262669615,
        "sender_full_name": "Pavel Kulko",
        "timestamp": 1637819610
    },
    {
        "content": "<p>Probably not, but you are welcome to try</p>",
        "id": 262670589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637820852
    }
]