[
    {
        "content": "<p>Is there a way to take the square root of a variable?</p>",
        "id": 241711231,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623014227
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.sqrt\">docs#real.sqrt</a> and I guess you can raise a complex number to the power 1/2.</p>",
        "id": 241711468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623014605
    },
    {
        "content": "<p>Yes but how do I use it in lean. I want to take the square root of x^2</p>",
        "id": 241711938,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623015353
    },
    {
        "content": "<p>it's a function. Just apply it. Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 241711981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623015375
    },
    {
        "content": "<p>idk what that is</p>",
        "id": 241712046,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623015489
    },
    {
        "content": "<p>click on it</p>",
        "id": 241712049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623015498
    },
    {
        "content": "<p>apply real.sqrt?</p>",
        "id": 241712051,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623015500
    },
    {
        "content": "<p>I cannot help unless you tell me far more precisely what you are talking about. Click on the link. Post some fully working code.</p>",
        "id": 241712060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623015525
    },
    {
        "content": "<p>oh</p>",
        "id": 241712063,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623015530
    },
    {
        "content": "<p>okay</p>",
        "id": 241712064,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623015532
    },
    {
        "content": "<p>example (x y : ℝ) : x^2 = y^2 → x = y ∨ x = -y :=<br>\nbegin<br>\n  intro hyp,</p>\n<p>end</p>",
        "id": 241712079,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623015579
    },
    {
        "content": "<p>So it seems to me that you do not mean \"how do I take the square root of x^2\", you mean \"how do I prove that the only square roots of x^2 are +-x\".</p>",
        "id": 241712129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623015620
    },
    {
        "content": "<p>oh I was going to sqrt the x^2 to prove that lol</p>",
        "id": 241712138,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623015661
    },
    {
        "content": "<p>So you need to work on your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> skills and why not learn now. You post code between triple back ticks <code> ``` </code>, and \"fully working\" means that you have to include all imports etc, so that I can just cut and paste it to my VS Code and it will work.</p>",
        "id": 241712143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623015678
    },
    {
        "content": "<p>If you sqrt the x^2 then you'll get sqrt(x^2).</p>",
        "id": 241712145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623015692
    },
    {
        "content": "<p>yeah and then sqrt(y^2) which will show x=y but i don't think you can do that right</p>",
        "id": 241712208,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623015777
    },
    {
        "content": "<p>You can just edit your post above -- try and make it into an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. If you're going to ask a bunch of questions on on this site then it's really important that you quickly learn how to ask good questions.</p>",
        "id": 241712210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623015781
    },
    {
        "content": "<p>Right now you seem to be confused between the sqrt function, and theorems about the sqrt function.</p>",
        "id": 241712222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623015814
    },
    {
        "content": "<p>But when you've fixed up your mwe we can talk about this.</p>",
        "id": 241712226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623015830
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>import algebra.group.pi\n\nset_option pp.beta true\n\nexample (x y : ℝ) : x^2 = y^2 → x = y ∨ x = -y :=\nbegin\n intro hyp,\n\nend```\n</code></pre></div>",
        "id": 241712271,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623015870
    },
    {
        "content": "<p>Use triple back ticks <code> ``` </code> on lines by themselves before and after your code. You can just edit your last post.</p>",
        "id": 241712280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623015901
    },
    {
        "content": "<p>This information is included in the link.</p>",
        "id": 241712299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623015957
    },
    {
        "content": "<p>You just need one <code> ``` </code> before the start of your code, and one <code> ``` </code> after the end of it.</p>",
        "id": 241712344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623015995
    },
    {
        "content": "<p>haha sorry, thanks for your patience</p>",
        "id": 241712405,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623016104
    },
    {
        "content": "<p>It's Ok. I see you're asking a bnuch of questions and this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> thing is something which works really well for communication on Zulip.</p>",
        "id": 241712411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623016136
    },
    {
        "content": "<p>The answer to your question is that this looks like it is a standard fact about square roots, and so probably it is a theorem which is already in the library. So you can try <code>library_search</code> on the line after <code>intro hyp,</code> and see if you're lucky.</p>",
        "id": 241712420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623016181
    },
    {
        "content": "<p>yeah i can tell</p>",
        "id": 241712471,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623016240
    },
    {
        "content": "<p>and on this occasion it looks like you are lucky. You can click on the blue code where it says \"Try this\" and it will replace <code>library_search</code> with some code which works. You can then hover over the new code which has appeared and learn about it.</p>",
        "id": 241712472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623016243
    },
    {
        "content": "<p>ahhh it worked</p>",
        "id": 241712474,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623016246
    },
    {
        "content": "<p>The naming conventions <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> explain why the theorem is called that.</p>",
        "id": 241712484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623016272
    },
    {
        "content": "<p>ok, some commands are different they do not stand alone. why is that so?</p>",
        "id": 241712492,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623016295
    },
    {
        "content": "<p>such as</p>",
        "id": 241712493,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623016297
    },
    {
        "content": "<p>After a while you can start guessing the names of theorems by yourself. I keep meaning to put a little quiz up for this sort of thing.</p>",
        "id": 241712494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623016298
    },
    {
        "content": "<p>dvd_refl</p>",
        "id": 241712503,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623016315
    },
    {
        "content": "<p>Do you understand the difference between tactic mode and term mode?</p>",
        "id": 241712551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623016326
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">my_hyp</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_refl</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.gcd_eq_left_iff_dvd</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 241712561,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623016360
    },
    {
        "content": "<p><code>dvd_refl</code> is a term. <code>library_search</code> is a tactic. To learn about term mode I would recommend that you read the first few chapters of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> and do the exercises. To learn about tactic mode you can play the natural number game. Lean has a very high learning curve and both of these are designed to be beginner-friendly.</p>",
        "id": 241712565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623016373
    },
    {
        "content": "<p>Okay</p>",
        "id": 241712574,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623016394
    },
    {
        "content": "<p>Thanks</p>",
        "id": 241712576,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623016397
    },
    {
        "content": "<p>Those last <code> ``` </code>s at the end should be on a line by themselves, not on the same line as the <code>end</code></p>",
        "id": 241712578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623016405
    },
    {
        "content": "<p>okay</p>",
        "id": 241712580,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623016419
    },
    {
        "content": "<p>i want to use the fact that a|a and a|b to just say gcd a b is a</p>",
        "id": 241712626,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623016448
    },
    {
        "content": "<p>but im not sure how</p>",
        "id": 241712629,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623016455
    },
    {
        "content": "<p>Do you see the \"copy code\" link at the top right of your code block? Once you have it exactly right, people can just click there and instantly get your code onto their computer. This is why it's so important to get it right -- it makes other people's lives easier.</p>",
        "id": 241712634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623016478
    },
    {
        "content": "<p>Yeah, i fixed it i think it should be good now</p>",
        "id": 241712653,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623016520
    },
    {
        "content": "<p>how would i finish up the proof? do you have any ideas?</p>",
        "id": 241712712,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623016625
    },
    {
        "content": "<p>The opening <code> ``` </code> need to be on a line by themselves too</p>",
        "id": 241712847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623016867
    },
    {
        "content": "<p>If you fix that, zulip will syntax highlight your code. Right now it's throwing away your <code>import</code> line because it's on the same line</p>",
        "id": 241712895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623016923
    },
    {
        "content": "<p><del>Can you fix your two posts above for practice?</del> Thanks!</p>",
        "id": 241712911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623016950
    },
    {
        "content": "<p>Sorry</p>",
        "id": 241712918,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623016975
    },
    {
        "content": "<p>It looks like the statement of the lemma <code>nat.gcd_eq_left_iff_dvd</code> is precisely the fact that you are trying to prove, namely</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>You can see this by looking at the lemma statement in the mathlib documentation -- click on the following link: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.gcd_eq_left_iff_dvd\">docs#nat.gcd_eq_left_iff_dvd</a></p>",
        "id": 241713253,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623017408
    },
    {
        "content": "<p>This means that you can prove the exercise just in the following way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.gcd_eq_left_iff_dvd</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 241713280,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623017491
    },
    {
        "content": "<p>Ahh yeah, I used this term from that site. Just didn't know how to implement it. Thank you!</p>",
        "id": 241713352,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623017598
    },
    {
        "content": "<p>However, since this exercise comes from the tutorials, I would guess that this is not how you are \"supposed to\" do it -- instead, there is probably a way of doing the exercise from first principles, using whatever lemmas are proved right before this in the tutorial.</p>",
        "id": 241713354,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623017601
    }
]