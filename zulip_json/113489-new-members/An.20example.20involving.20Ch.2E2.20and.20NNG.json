[
    {
        "content": "<p>In chapter 2 in Theorem Proving in Lean, we learn about definitions, so to try it out I made this definition: <br>\n<code>def dvd (m n: ℕ): Prop := ∃ k, n = m * k</code><br>\nIn the Natural Number Game, we learn about tactics like rw,etc. So I was wondering how to rewrite a goal with a definition.  I have this statement in my tatic state: <br>\n<code>hbleft : n = a * b</code>. Clearly we see that a divides  n. But when I say <code>rw dvd at hbleft</code> Lean rejects this as a valid piece of code. So I can I apply <code>dvd</code> to the statement <code>hbleft</code> to show a divides n?</p>",
        "id": 190791538,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584400423
    },
    {
        "content": "<p><code>have hadn : dvd a n := \\&lt;_, hbleft\\&gt;</code></p>",
        "id": 190791674,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1584400505
    },
    {
        "content": "<p>Thanks, it works now</p>",
        "id": 190792242,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584400949
    },
    {
        "content": "<p>Also in the natural number game we could use the <code>rw</code> tactic to invoke previous theorems; does that same thing work for conditional sentences that I assume to be true? For instance I have a conditional sentence <code>hp : dvd p n → q</code> and in my tactic state I have <code>hadn : dvd a n</code> Can I use my <code>hp</code>to rewrite <code>hadn</code>. I tried <code>rw hp at hadn</code> and <code>apply hp at hadn</code> but Lean stated that code was not valid. How to I use hp to simplify hadn?</p>",
        "id": 190792882,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584401512
    },
    {
        "content": "<p>You can only <code>rw</code> with an equality or an iff. An implication is just a function, so you can apply it, but there is no such thing as <code>apply at</code>. Here, you could write <code>replace hadn := hp hadn</code></p>",
        "id": 190793769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584402279
    },
    {
        "content": "<p>Or just use <code>hp hadn</code> directly wherever you need it</p>",
        "id": 190793773,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584402291
    },
    {
        "content": "<p>Or <code>have hq : q, { apply hp, exact hadn },</code> or many other variations.</p>",
        "id": 190793796,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584402331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  I used  <code>have hq : q, { apply hp, exact hadn },</code> and <code>replace hadn := hp hadn</code> but got this error:</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  hp hadn\nterm\n  hadn\nhas type\n  dvd a n\nbut is expected to have type\n  dvd p n\n</pre></div>",
        "id": 190794579,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584403043
    },
    {
        "content": "<p>Ah, well, yeah</p>",
        "id": 190794659,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584403103
    },
    {
        "content": "<p>I missed that it was a trick question. <code>a</code> is not <code>p</code>.</p>",
        "id": 190794682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584403131
    },
    {
        "content": "<p>But when I replace a with p I get the error:</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  hp hadn\nterm\n  hadn\nhas type\n  dvd p n\nbut is expected to have type\n  dvd p n\ntypes contain aliased name(s): p\nremark: the tactic `dedup` can be used to rename aliases\n</pre></div>",
        "id": 190794972,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584403361
    },
    {
        "content": "<p>So what is <code>dedup</code> and how is it used?</p>",
        "id": 190795003,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584403396
    },
    {
        "content": "<p>It means you have two variables with the same name <code>p</code></p>",
        "id": 190795013,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1584403408
    },
    {
        "content": "<p>You've done something wrong earlier.</p>",
        "id": 190795115,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584403476
    },
    {
        "content": "<p>But if I use difference variable names a and p I still get the Type Mismatch</p>",
        "id": 190795128,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584403493
    },
    {
        "content": "<p>Please post your code. It's very hard to help without seeing what you're working with.</p>",
        "id": 190795161,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584403526
    },
    {
        "content": "<p><code>def composite (d : ℕ): Prop:= ¬ prime d</code></p>\n<p><code>theorem composite_fact (c: ℕ) : composite c ↔ ∃ (a b: ℕ), c = a*b ∧ a ≤ b := sorry</code></p>\n<p>Main part:</p>\n<div class=\"codehilite\"><pre><span></span>theorem practice (n p : ℕ) (hn : n &gt; 1) (hp : dvd p n → p*p &gt;  n) : ¬ composite  n :=\nbegin\n  intro h,\n  rw composite_fact at h,\n  cases h with p ha,\n  cases ha with b hb,\n\n  have hbleft: n = p*b, from and.left hb,\n  have hbright: p ≤ b, from and.right hb,\n\n  have hadn : dvd p n,\n\n  rw dvd,\n  use b,\n  rw hbleft,\n\n  replace hadn := hp hadn,\n\nend\n</pre></div>",
        "id": 190795327,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584403659
    },
    {
        "content": "<p>This proof, and possibly statement, doesn't make sense</p>",
        "id": 190795568,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584403839
    },
    {
        "content": "<p>please can you post exactly one code block containing all imports and opens, so people can just cut and paste to see your problem.</p>",
        "id": 190795572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584403844
    },
    {
        "content": "<p>What are you trying to prove in English?</p>",
        "id": 190795594,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584403875
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 190795904,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584404138
    },
    {
        "content": "<p>but 1 is a factor of n</p>",
        "id": 190795914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584404155
    },
    {
        "content": "<p>just because it's called p doesn't make it prime :-)</p>",
        "id": 190795960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584404165
    },
    {
        "content": "<p>It's not what your <code>practice</code> statement says anyways.</p>",
        "id": 190795968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584404179
    },
    {
        "content": "<p>Unrelated: if you put <code> ```lean </code> at the top of where you quote your code, then it comes out in neat colours</p>",
        "id": 190795976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584404198
    },
    {
        "content": "<p>Wait really?</p>",
        "id": 190797187,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584405465
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">practice</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">dvd</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"bp\">*</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span>  <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">composite</span>  <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">composite_fact</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hbleft</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hbright</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hadn</span> <span class=\"o\">:</span> <span class=\"n\">dvd</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">dvd</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hbleft</span><span class=\"o\">,</span>\n\n  <span class=\"n\">replace</span> <span class=\"n\">hadn</span> <span class=\"o\">:=</span> <span class=\"n\">hp</span> <span class=\"n\">hadn</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190797191,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584405473
    },
    {
        "content": "<p>Oh wow...</p>",
        "id": 190797232,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584405484
    },
    {
        "content": "<p>Your hypothesis <code>hp</code> says \"if the fixed number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span></span></span></span> you chose at the beginning divides <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>, then also assume that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>p</mi><mn>2</mn></msup><mo>&gt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">p^2&gt;n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>. So for example <code>practice 7 5</code> says \"if 7&gt;1, and if the statement 'if 5 divides 7 then 5^2&gt;7' is true (which it is, because 5 doesn't divide 7) then 7 is not composite\". In particular <code>practice 7 5</code> is false so you can't prove <code>practice</code> in general. You need to learn to work basic logic before you can get to Hungerford.</p>",
        "id": 190798064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584406346
    },
    {
        "content": "<p>Hi there, I m stuck again <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 190820288,
        "sender_full_name": "jack",
        "timestamp": 1584435006
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Equivalence1</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- classical should be used</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"c1\">--classical.by_contradiction $</span>\n<span class=\"c1\">--assume h1,</span>\n<span class=\"bp\">_</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">Equivalence2</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span>\n</pre></div>",
        "id": 190820383,
        "sender_full_name": "jack",
        "timestamp": 1584435110
    },
    {
        "content": "<p>Maybe equivalence2 is simpler.</p>",
        "id": 190820453,
        "sender_full_name": "jack",
        "timestamp": 1584435150
    },
    {
        "content": "<p>If you use</p>\n<div class=\"codehilite\"><pre><span></span>```lean\ncode goes here\n```\n</pre></div>\n\n\n<p>for your codeblocks, you even get fancy colors (-;</p>",
        "id": 190820506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584435203
    },
    {
        "content": "<p>This is not the homework, but I would like to challenge myself.</p>",
        "id": 190820614,
        "sender_full_name": "jack",
        "timestamp": 1584435279
    },
    {
        "content": "<p>Still SO difficult ...</p>",
        "id": 190820647,
        "sender_full_name": "jack",
        "timestamp": 1584435309
    },
    {
        "content": "<p>Hint: <code>or.cases_on</code></p>",
        "id": 190820746,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584435367
    },
    {
        "content": "<p><code>#check @or.cases_on</code> seems similar to <code>or.elim</code>... actually I see no difference between them.</p>",
        "id": 190820925,
        "sender_full_name": "jack",
        "timestamp": 1584435491
    },
    {
        "content": "<p>it is!</p>\n<p>for the first one, i'd try using <code>(classical.em A).elim</code> instead, maybe you had the law of excluded middle in class to motivate things like <code>by_contradiction</code></p>",
        "id": 190821036,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1584435594
    },
    {
        "content": "<p>100% correct!</p>",
        "id": 190821206,
        "sender_full_name": "jack",
        "timestamp": 1584435689
    },
    {
        "content": "<p>(note that <code>(classical.em A).elim</code> is just <code>or.elim (classical.em A)</code>, i should perhaps be careful with using notation that might not have been introduced yet)</p>",
        "id": 190821698,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1584435978
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Equivalence2</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">h</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">na</span> <span class=\"o\">,</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span>\n<span class=\"k\">assume</span> <span class=\"n\">na</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span>\n<span class=\"o\">)</span> <span class=\"err\">$</span>\n<span class=\"k\">assume</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">b</span>\n<span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>I m getting into a circle.</p>",
        "id": 190822289,
        "sender_full_name": "jack",
        "timestamp": 1584436357
    },
    {
        "content": "<p>Hint: <code>false.elim</code></p>",
        "id": 190822388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584436419
    },
    {
        "content": "<p>You should remove the second block of <code>or.cases_on h _ _</code></p>",
        "id": 190822482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584436460
    },
    {
        "content": "<p><code>#check @false.elim</code> gives me <code>Π {C : Sort u_1}, false → C</code>. Is it pi-calculus?</p>",
        "id": 190822562,
        "sender_full_name": "jack",
        "timestamp": 1584436520
    },
    {
        "content": "<p>think about the proof you'd write on paper. you've got <code>¬ A ∨ B</code> and <code>A</code>. in the first case, where you've got <code>¬ A</code>, you've got a contradiction on your hands that allows you to get <code>false</code>, and thus prove anything (with <code>false.elim</code>).</p>",
        "id": 190822572,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1584436530
    },
    {
        "content": "<p>this is known as the principle of explosion, \"from falsehood, anything follows\"</p>",
        "id": 190822685,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1584436599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272189\">jack</span> <a href=\"#narrow/stream/113489-new-members/topic/An.20example.20involving.20Ch.2E2.20and.20NNG/near/190822562\" title=\"#narrow/stream/113489-new-members/topic/An.20example.20involving.20Ch.2E2.20and.20NNG/near/190822562\">said</a>:</p>\n<blockquote>\n<p><code>#check @false.elim</code> gives me <code>Π {C : Sort u_1}, false → C</code>. Is it pi-calculus?</p>\n</blockquote>\n<p>I don't know anything about calculus, but this is telling you that if you can find a contradiction (i.e., proof of <code>false</code>), then you can prove everything.</p>",
        "id": 190822791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584436679
    },
    {
        "content": "<p>OK got you. After adding a <code>false.elim</code> I 've got a <code>A</code> and <code>\\not A</code>, then I can get a false <code>\\not A A</code>. Cheers!</p>",
        "id": 190822884,
        "sender_full_name": "jack",
        "timestamp": 1584436734
    },
    {
        "content": "<p>My proves seems like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Equivalence2</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">h</span>\n<span class=\"o\">(</span>\n<span class=\"k\">assume</span> <span class=\"n\">na</span><span class=\"o\">,</span>\n<span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">$</span>\n<span class=\"n\">na</span> <span class=\"n\">a</span>\n<span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>I'm wondering if I can use <code>$</code> to remove the parentheses.</p>",
        "id": 190823101,
        "sender_full_name": "jack",
        "timestamp": 1584436861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272189\">jack</span> <a href=\"#narrow/stream/113489-new-members/topic/An.20example.20involving.20Ch.2E2.20and.20NNG/near/190822562\" title=\"#narrow/stream/113489-new-members/topic/An.20example.20involving.20Ch.2E2.20and.20NNG/near/190822562\">said</a>:</p>\n<blockquote>\n<p><code>#check @false.elim</code> gives me <code>Π {C : Sort u_1}, false → C</code>. Is it pi-calculus?</p>\n</blockquote>\n<p>Pi is the name of the types, lambda is the name of the terms. <code>λ a, b</code> has type <code>Π A, B</code></p>",
        "id": 190823260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584436933
    },
    {
        "content": "<p><code>or.elim</code> is a 3-parameter operator, where comes the problem.</p>",
        "id": 190823309,
        "sender_full_name": "jack",
        "timestamp": 1584436960
    },
    {
        "content": "<p>i don't think so, <code>$</code> won't allow you to eliminate all parentheses, only the ones at the end. the proof looks good!</p>",
        "id": 190823317,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1584436965
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 190823326,
        "sender_full_name": "jack",
        "timestamp": 1584436972
    },
    {
        "content": "<p>Thanks to all of you <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> I have only 50% left.</p>",
        "id": 190823413,
        "sender_full_name": "jack",
        "timestamp": 1584437021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"272189\">@jack</span> If you wanna golf: <code>assume b : B, b</code> is the same as <code>id</code></p>",
        "id": 190823682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584437161
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Equivalence2</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">∘</span> <span class=\"n\">absurd</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">id</span>\n</pre></div>",
        "id": 190823835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584437235
    },
    {
        "content": "<p>Do you invent this language <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ? Or do you use it every day?</p>",
        "id": 190824027,
        "sender_full_name": "jack",
        "timestamp": 1584437345
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 190824185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584437413
    },
    {
        "content": "<p>I use Lean pretty much every day. But I usually don't write my proofs like this.</p>",
        "id": 190824244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584437448
    },
    {
        "content": "<p>I prefer tactic mode.</p>",
        "id": 190824257,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584437453
    },
    {
        "content": "<p>Maybe I'll learn to use it at the end of this semester.</p>",
        "id": 190824336,
        "sender_full_name": "jack",
        "timestamp": 1584437497
    },
    {
        "content": "<p>Could you please explain <code>∘</code> a little more? Never seen this in the class.</p>",
        "id": 190824623,
        "sender_full_name": "jack",
        "timestamp": 1584437697
    },
    {
        "content": "<p>It is called \"function composition\"</p>",
        "id": 190824643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584437709
    },
    {
        "content": "<p><code>f ∘ g = \\lambda x, f (g x)</code></p>",
        "id": 190824672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584437738
    },
    {
        "content": "<p>Does it mean <code>false.elim ∘ absurd a</code> is the same as <code>false.elim (absurd a)</code>?</p>",
        "id": 190824851,
        "sender_full_name": "jack",
        "timestamp": 1584437849
    },
    {
        "content": "<p>Nope</p>",
        "id": 190824868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584437867
    },
    {
        "content": "<p>It's the same as <code>assume blabla, false.elim (absurd a blabla)</code></p>",
        "id": 190824923,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584437885
    },
    {
        "content": "<p>Amazing!</p>",
        "id": 190825129,
        "sender_full_name": "jack",
        "timestamp": 1584438082
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span>\n</pre></div>\n\n\n<p>May I have some hint please?</p>",
        "id": 190827078,
        "sender_full_name": "jack",
        "timestamp": 1584439236
    },
    {
        "content": "<p>case on whether <code>A</code> is true or false</p>",
        "id": 190827153,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1584439313
    },
    {
        "content": "<p>Do you mean <code>or.cases_on</code>? Which only works with a <code>... \\or ...</code> but there isn't.</p>",
        "id": 190827630,
        "sender_full_name": "jack",
        "timestamp": 1584439557
    },
    {
        "content": "<p>use <code>classical.em</code></p>",
        "id": 190828300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1584440024
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Equivalence1</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- classical should be used</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n<span class=\"o\">)</span> <span class=\"err\">$</span>\n <span class=\"k\">assume</span> <span class=\"n\">na</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"bp\">_</span> <span class=\"n\">na</span>\n</pre></div>",
        "id": 190830267,
        "sender_full_name": "jack",
        "timestamp": 1584441273
    },
    {
        "content": "<p>Finally I made it <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> There must be some fancy syntax which could simplify the prove.</p>",
        "id": 190830344,
        "sender_full_name": "jack",
        "timestamp": 1584441328
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 190830379,
        "sender_full_name": "jack",
        "timestamp": 1584441350
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Equivalence1</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 190836505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584445709
    },
    {
        "content": "<p>Same proof but bundled up into a more compact form.</p>",
        "id": 190836536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584445744
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">skip</span> <span class=\"c1\">-- working around open_locale bug</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">Equivalence1</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hAB</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hAB</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Same proof but in tactic mode.</p>",
        "id": 190836703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584445914
    },
    {
        "content": "<p>what does the $ sign mean?</p>",
        "id": 190836892,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1584446045
    },
    {
        "content": "<p>It means saving some paratheses, e.g. <code>foo $ a b c &lt;-&gt; foo (a b c)</code></p>",
        "id": 190840088,
        "sender_full_name": "jack",
        "timestamp": 1584448282
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Equivalence1</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>$-free version</p>",
        "id": 190841449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584449043
    },
    {
        "content": "<p>thank you!</p>",
        "id": 190843848,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1584450251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"272823\">@anas himmi</span> you can work out what most things mean in Lean if you know how. For example, if you realise that <code>$</code> is notation then <code>#print notation $</code> is the next step. It tells you <code>_ </code>$<code>:1 _:0 := #1 #0</code> which is a rather encrypted way of saying that <code>f $ g</code> means <code>f g</code> except that the binding power of <code>$</code> is 1, which is very low.</p>",
        "id": 190843861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584450257
    },
    {
        "content": "<p>This means that the composition happens last, saving you from having to write the brackets (which have super-high binding power). I wrote a blog post about binding power in Lean <a href=\"https://xenaproject.wordpress.com/2019/01/20/a-word-on-bidmas/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2019/01/20/a-word-on-bidmas/\">here</a>.</p>",
        "id": 190843979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584450319
    },
    {
        "content": "<p>You can compare with <code>#print notation +</code> and so on.</p>",
        "id": 190844020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584450340
    },
    {
        "content": "<p>i tested it out before asking but didn't understand the notation. now i see it better</p>",
        "id": 190844117,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1584450385
    }
]