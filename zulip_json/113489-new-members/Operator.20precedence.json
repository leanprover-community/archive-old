[
    {
        "content": "<p>I need to prove the lemma at the bottom of this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. My strategy is to prove it for functions and then write a simp lemma for for the behavior of the coercion from linear_map to functions, however I cannot manage to make the precedence of operators and coercions work. What is a standard solution for this? changing the precedence of the operator?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">lie_algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">100</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">asdfg</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">lie_ring</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bracket</span>  <span class=\"o\">:=</span> <span class=\"n\">ring_commutator</span><span class=\"bp\">.</span><span class=\"n\">commutator</span><span class=\"o\">,</span>\n  <span class=\"n\">add_lie</span>  <span class=\"o\">:=</span> <span class=\"n\">ring_commutator</span><span class=\"bp\">.</span><span class=\"n\">add_left</span><span class=\"o\">,</span>\n  <span class=\"n\">lie_add</span>  <span class=\"o\">:=</span> <span class=\"n\">ring_commutator</span><span class=\"bp\">.</span><span class=\"n\">add_right</span><span class=\"o\">,</span>\n  <span class=\"n\">lie_self</span> <span class=\"o\">:=</span> <span class=\"n\">ring_commutator</span><span class=\"bp\">.</span><span class=\"n\">alternate</span><span class=\"o\">,</span>\n  <span class=\"n\">jacobi</span>   <span class=\"o\">:=</span> <span class=\"n\">ring_commutator</span><span class=\"bp\">.</span><span class=\"n\">jacobi</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">100</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">jnknj</span><span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">lie_algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">lie_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lie_ring</span><span class=\"bp\">.</span><span class=\"n\">of_associative_ring_bracket</span><span class=\"o\">,</span> <span class=\"n\">lie_ring</span><span class=\"bp\">.</span><span class=\"n\">of_associative_ring_bracket</span><span class=\"o\">,</span>\n           <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">mul_smul_comm</span><span class=\"o\">,</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">smul_mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">smul_sub</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">commutator_to_fun_coe</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⁅</span><span class=\"n\">L1</span><span class=\"o\">,</span> <span class=\"n\">L2</span><span class=\"err\">⁆</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⁅</span><span class=\"o\">(</span><span class=\"n\">L1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">L2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"err\">⁆</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">commutator_apply</span> <span class=\"o\">:</span> <span class=\"err\">⁅</span><span class=\"n\">L1</span><span class=\"o\">,</span> <span class=\"n\">L2</span><span class=\"err\">⁆</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"err\">⁅</span><span class=\"n\">L1</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">L2</span> <span class=\"n\">a</span><span class=\"err\">⁆</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 206343075,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596884188
    },
    {
        "content": "<p>(Any other idea to prove the lemma at the bottom is welcome it does not need to follow my strategy. It's just that any attempt to do <code>unfold ring_commutator.commutator</code> failed and I do not know why!)</p>",
        "id": 206351622,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596899495
    },
    {
        "content": "<p>I've just seen this but a few things confuse me.</p>",
        "id": 206505506,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1597089142
    },
    {
        "content": "<p>Firstly it looks like <code>foo</code> and <code>bar</code> are just copies of <code>lie_ring.of_associative_ring</code> and <code>lie_algebra.of_associative_algebra</code> so I think instead we should just use:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">lie_ring</span><span class=\"bp\">.</span><span class=\"n\">of_associative_ring</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">lie_algebra</span><span class=\"bp\">.</span><span class=\"n\">of_associative_algebra</span>\n</code></pre></div>",
        "id": 206505575,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1597089199
    },
    {
        "content": "<p>(There is also the issue of <code>@[priority 100]</code> which I am ignoring, this might be connected with the fact the <code>*.of_associative_ring</code>  are <code>def</code>s and not <code>instance</code>s --- I confess I am not sure what issues may lurk here.)</p>",
        "id": 206505770,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1597089311
    },
    {
        "content": "<p>It is not clear to me that you need <code>commutator_to_fun_coe</code> because this is the sort of thing that we should be able to solve with <code>lie_ring.of_associative_ring_bracket</code> and indeed <code>rw lie_ring.of_associative_ring_bracket</code> serves as a proof and anyway the proof is <code>rfl</code>.</p>",
        "id": 206505930,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1597089399
    },
    {
        "content": "<p>Finally I could be missing something but I just don't think <code>commutator_apply</code> is true!</p>",
        "id": 206506020,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1597089469
    },
    {
        "content": "<p>Indeed if you start the would-be proof as:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">change</span> <span class=\"n\">L1</span> <span class=\"o\">(</span><span class=\"n\">L2</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">L2</span> <span class=\"o\">(</span><span class=\"n\">L1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">L1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">L2</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">L2</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">L1</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>It seems to me that the results is obviously false in general.</p>",
        "id": 206506227,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1597089571
    },
    {
        "content": "<p>where can I find a table of operator precedence and associativity in lean?<br>\nspecifically, I'm having a hard time understanding this goal: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊢</mo><mi>P</mi><mo>∧</mo><mi>Q</mi><mo>∨</mo><mi>P</mi><mo>∧</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\"> \\vdash P \\land Q \\vee P \\land R </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, using <code>left</code> and <code>right</code> soon shows that lean implies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊢</mo><mo stretchy=\"false\">(</mo><mi>P</mi><mo>∧</mo><mi>Q</mi><mo stretchy=\"false\">)</mo><mo>∨</mo><mo stretchy=\"false\">(</mo><mi>P</mi><mo>∧</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> \\vdash (P \\land Q) \\vee (P \\land R) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span></span></span></span>, which is neither left nor right associativity. It seems to imply that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∧</mo></mrow><annotation encoding=\"application/x-tex\">\\land</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5556em;\"></span><span class=\"mord\">∧</span></span></span></span> has higher precedence than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∨</mo></mrow><annotation encoding=\"application/x-tex\">\\vee</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5556em;\"></span><span class=\"mord\">∨</span></span></span></span> ?</p>",
        "id": 270926223,
        "sender_full_name": "Matt Yan",
        "timestamp": 1644201882
    }
]