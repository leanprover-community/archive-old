[
    {
        "content": "<p>It would be convenient to be able to write <code>n &lt; m &lt;l</code> instead of <code>n &lt; m ∧ m &lt; l</code>. Is that possible?</p>\n<p><a href=\"https://leanprover.github.io/live/3.4.1/#code=--%20Live%20javascript%20version%20of%20Lean%0A%0Avariables%20n%20m%20l%20:%20%E2%84%95%20%0Avariable%20p%20:%20n%20%3C%20m%20%E2%88%A7%20m%20%3C%20l%0Avariable%20q%20:%20n%20%3C%20m%20%3C%20l%20%20--%20doesn't%20work%0A\" title=\"https://leanprover.github.io/live/3.4.1/#code=--%20Live%20javascript%20version%20of%20Lean%0A%0Avariables%20n%20m%20l%20:%20%E2%84%95%20%0Avariable%20p%20:%20n%20%3C%20m%20%E2%88%A7%20m%20%3C%20l%0Avariable%20q%20:%20n%20%3C%20m%20%3C%20l%20%20--%20doesn't%20work%0A\">example</a></p>",
        "id": 192186897,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1585505651
    },
    {
        "content": "<p>It's not currently possible -- indeed I remember spending a very long time trying to work out what was going on in some code by an undergraduate until I finally realised that they had written this. Currently it compiles to something like <code>(n &lt; m) &lt; l</code> and then complains that it doesn't know what it means for a proposition to be less than a number. In fact given that the syntax is perfectly valid it might be hard to get what you want to work.</p>",
        "id": 192186981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585505778
    },
    {
        "content": "<p>PS take a look at <a href=\"https://leanprover-community.github.io/\" title=\"https://leanprover-community.github.io/\">https://leanprover-community.github.io/</a> and in particular note that there is a far more modern web editor at <a href=\"https://leanprover-community.github.io/lean-web-editor/\" title=\"https://leanprover-community.github.io/lean-web-editor/\">https://leanprover-community.github.io/lean-web-editor/</a></p>",
        "id": 192186991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585505812
    },
    {
        "content": "<p>Ah thanks for letting me know. <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">https://leanprover.github.io/theorem_proving_in_lean/</a> should be updated then. I was using the web editor it links to in the examples.</p>",
        "id": 192187168,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1585506031
    },
    {
        "content": "<p>I recall <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> playing with syntax of this kind in lean 3 and lean 4</p>",
        "id": 192196102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585518932
    },
    {
        "content": "<p>Python has this syntax even though <code>(n &lt; m) &lt; l</code> is also perfectly sensible in Python.</p>",
        "id": 192196159,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585518982
    },
    {
        "content": "<p>I don't quite recall anything about Lean 3, but in Lean 4 adding a specific chain is of course trivial:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">macro_rules</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">$</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"err\">$</span><span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"err\">$</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">$</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"err\">$</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"err\">$</span><span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"err\">$</span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span>\n</pre></div>\n\n\n<p>This should probably be automated to auto-generate rules for pairs of operators, though maybe not all pairs? As an undergrad, I was actually shocked to learn that mathematicians write <code>a ≠ b ≠ c</code> and <em>mean</em> pairwise inequality by that. The following rule implements that, though with a good deal of duplicated clauses in the output.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">macro_rules</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">$</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"err\">$</span><span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"err\">$</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">$</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"err\">$</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"err\">$</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"err\">$</span><span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"err\">$</span><span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"err\">$</span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">4</span> <span class=\"bp\">≠</span> <span class=\"mi\">5</span>  <span class=\"c1\">-- ((1≠2∧1≠3∧2≠3)∧(1≠2∧1≠4∧2≠4)∧3≠4)∧((1≠2∧1≠3∧2≠3)∧(1≠2∧1≠5∧2≠5)∧3≠5)∧4≠5 : Prop</span>\n</pre></div>",
        "id": 192372984,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1585652250
    },
    {
        "content": "<p>I would be curious whether the mathematicians in the chat agree or disagree with this interpretation of chained disequality</p>",
        "id": 192374132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585652970
    },
    {
        "content": "<p>(here, let's make it a poll: vote this comment up if you agree that chained disequality is pairwise, down if you think it should only be the adjacent pairs)</p>",
        "id": 192374292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585653056
    },
    {
        "content": "<p>I just avoid it, because I think it's ambiguous...</p>",
        "id": 192374731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585653334
    },
    {
        "content": "<p>On the other hand.... <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>B</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A \\iff B \\iff C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span> also means pairwise iff in maths, and that's not what it means in Lean...</p>",
        "id": 192374831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585653400
    },
    {
        "content": "<p>Well, for iff it could mean either pairwise or adjacent pairwise since they are the same</p>",
        "id": 192375078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585653593
    },
    {
        "content": "<p>Lean's interpretation, nested iff, is never what mathematicians mean (unless you put parentheses in)</p>",
        "id": 192375195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585653652
    },
    {
        "content": "<p>which reminds me of a funny theorem: iff is associative, but the proof requires classical logic</p>",
        "id": 192375258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585653700
    },
    {
        "content": "<p>Rule 1: only write chained relation for transitive relations</p>",
        "id": 192375409,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585653801
    },
    {
        "content": "<p>If I want to say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">a,b,c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">c</span></span></span></span> are pairwise distinct I usually say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo mathvariant=\"normal\">≠</mo><mi>b</mi><mo mathvariant=\"normal\">≠</mo><mi>c</mi><mo mathvariant=\"normal\">≠</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a\\ne b\\ne c\\ne a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span>.</p>",
        "id": 192375879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585654128
    },
    {
        "content": "<p>You only find yourself saying this sort of thing when you're doing Olympiad style problems though I think?</p>",
        "id": 192375903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585654147
    },
    {
        "content": "<p>I would never write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo mathvariant=\"normal\">≠</mo><mi>b</mi><mo mathvariant=\"normal\">≠</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">a \\neq b \\neq c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span></span></span></span>.</p>",
        "id": 192376541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585654557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> is it still time to implore you and Leo to stop using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\implies</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span> when you mean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↦</mo></mrow><annotation encoding=\"application/x-tex\">\\mapsto</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mrel\">↦</span></span></span></span>? It almost made it impossible for me to read the macro paper. We can get over Lean using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> when we would write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\implies</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span>, but writing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\implies</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span> instead of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↦</mo></mrow><annotation encoding=\"application/x-tex\">\\mapsto</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mrel\">↦</span></span></span></span> is much much worse. What's wrong with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↦</mo></mrow><annotation encoding=\"application/x-tex\">\\mapsto</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mrel\">↦</span></span></span></span>? I don't know any other interpretation of that symbol, and you can ascii art it if you really want to.</p>",
        "id": 192376771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585654709
    },
    {
        "content": "<p>I think that if mathematicians were offered to choose one notation to change in Lean 4 that would be this notation. Seriously, we don't care at all about CamelCase, we'll get used to it in one afternoon.</p>",
        "id": 192376852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585654782
    },
    {
        "content": "<p>What? It's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇒</span></span></span></span>, not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⟹</mo></mrow><annotation encoding=\"application/x-tex\">\\Longrightarrow</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mrel\">⟹</span></span></span></span>. Completely different.</p>",
        "id": 192376864,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1585654788
    },
    {
        "content": "<p>Please <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 192376966,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585654838
    },
    {
        "content": "<p>Where does this <em>crazy</em> use of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇒</span></span></span></span> comes from anyway?</p>",
        "id": 192377032,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585654912
    },
    {
        "content": "<p>It's javascript syntax, right?</p>",
        "id": 192377095,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1585654941
    },
    {
        "content": "<p>Even the weird use of <code>:=</code> in the equation compiler was better.</p>",
        "id": 192377100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585654944
    },
    {
        "content": "<p>Oh, great. We already have Coq developers coming here to tell us Lean is the PHP of proof assistants and now they'll be able to add it's also javascript.</p>",
        "id": 192377157,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585654989
    },
    {
        "content": "<p>the camelCase / PascalCase change is actually pretty cool, you get less name collisions between functions/variables and types!</p>",
        "id": 192377452,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1585655169
    },
    {
        "content": "<p>I think it's not yet clear whether lemma names will keep their snake case. I saw a lemma using PascalCase at some point. But this is completely irrelevant compared to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↦</mo></mrow><annotation encoding=\"application/x-tex\">\\mapsto</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mrel\">↦</span></span></span></span>.</p>",
        "id": 192377554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585655250
    },
    {
        "content": "<p>So merely for historical context, Lean's syntax is somewhat inspired by ML, which has <code>fn ... =&gt;</code> and <code>case ... =&gt;</code></p>",
        "id": 192377862,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1585655451
    },
    {
        "content": "<p>I thought Lean was only getting good ideas from the past, without being hampered by backward compatibility?</p>",
        "id": 192377912,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585655497
    },
    {
        "content": "<p>Actually, to be more specific this is 1:1 Coq syntax, which of course is itself derived from ML</p>",
        "id": 192378359,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1585655778
    },
    {
        "content": "<p>So maybe we should send Kevin to the Coq mailing lists to write that Coq is the javascript of proof assistants.</p>",
        "id": 192378423,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585655840
    },
    {
        "content": "<p>In the mean time one get one more cheap way to make sure mathematicians will never be tempted to use Coq instead of Lean: use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↦</mo></mrow><annotation encoding=\"application/x-tex\">\\mapsto</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mrel\">↦</span></span></span></span>.</p>",
        "id": 192378482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585655882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/chained.20inequalities.20.3F/near/192376771\" title=\"#narrow/stream/113489-new-members/topic/chained.20inequalities.20.3F/near/192376771\">said</a>:</p>\n<blockquote>\n<p>I don't know any other interpretation of that symbol, and you can ascii art it if you really want to.</p>\n</blockquote>\n<p><code>⊢&gt;</code></p>",
        "id": 192378531,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1585655899
    },
    {
        "content": "<p>I'm not sure yet I want to commit to this discussion, but as for <code>↦</code>, I don't see any satisfactory ASCII syntax. <code>|-&gt;</code> is terrible.</p>",
        "id": 192378775,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1585656036
    },
    {
        "content": "<p>Do you really need ASCII?</p>",
        "id": 192378813,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585656067
    },
    {
        "content": "<p>What's the point?</p>",
        "id": 192378827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585656075
    },
    {
        "content": "<p>If it's only for the very early bootstrapping then you could use the ugly <code>|-&gt;</code> in a couple of files.</p>",
        "id": 192378860,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585656101
    },
    {
        "content": "<p>i think =&gt; is one of the most commonly typed symbols in lean4</p>",
        "id": 192378882,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1585656120
    },
    {
        "content": "<p>Writing in this chat without copying from Emacs, for example. I think people regularly use ASCII in this case.</p>",
        "id": 192378942,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1585656143
    },
    {
        "content": "<p>Sure (at the moment since there is not yet any maths written in Lean 4), but could it be typed in unicode?</p>",
        "id": 192378952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585656153
    },
    {
        "content": "<p>Sebastian, there are plenty of browser extensions allowing to use any editor to edit textarea inputs.</p>",
        "id": 192378988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585656191
    },
    {
        "content": "<p>To be honest, I've thought about reverting the paper syntax back from <code>⇒</code> to <code>=&gt;</code>, since that is what we're actually writing. <code>fun</code> isn't very mathematical for a start, so maybe <code>=&gt;</code> is simply more adequate.</p>",
        "id": 192379141,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1585656284
    },
    {
        "content": "<p><code>fun x ↦ f(x)</code> would be understood immediately, although we don't write \"fun\" on paper.</p>",
        "id": 192379378,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585656397
    },
    {
        "content": "<p>And I agree the paper would be less painful to read with ascii art <code>=&gt;</code> which somehow indicates this is not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇒</span></span></span></span>.</p>",
        "id": 192379432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585656446
    },
    {
        "content": "<p>Mathematicians are missing lots of symbols -- we don't have <code>\\subset</code> or <code>subseteq</code> or <code>\\le</code> and we just write the shortcuts in the chat. Shortcut it to \\R or something and forget it? <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\implies</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span> means something important in maths.</p>",
        "id": 192379576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585656529
    },
    {
        "content": "<p>So... everyone would be semi-happy to happy with ASCII <code>fun ... =&gt;</code>? You are very welcome to introduce <code>x ↦ f(x)</code> as alternative syntax.</p>",
        "id": 192379905,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1585656731
    },
    {
        "content": "<p>Having <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x \\mapsto f(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> being the primary syntax would be much much better. Because every new user will end up meeting the WTF version by navigating files or reading papers.</p>",
        "id": 192379991,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585656798
    },
    {
        "content": "<p>Let me give a big vote for <code>\\mapsto</code>, aka <code>↦</code>.</p>",
        "id": 192380961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585657433
    },
    {
        "content": "<p>do you like <code>\\mapsto</code> for term mode proofs, too? in my mind, <code>\\mapsto</code> is reserved for functions over data</p>",
        "id": 192389878,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1585661693
    },
    {
        "content": "<p>Here the Lean 3, <code>assume fact, ...</code> is much more natural. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↦</mo></mrow><annotation encoding=\"application/x-tex\">\\mapsto</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mrel\">↦</span></span></span></span> would indeed feel weird, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇒</span></span></span></span> would be worse!</p>",
        "id": 192390077,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585661785
    },
    {
        "content": "<p>judging from many of the questions here of people working through TPIL, <code>assume</code> is perhaps <em>too</em> natural - beginners seem to struggle with disconnecting their intuitions about assumptions from the formal meaning of <code>assume</code> in lean. it's also pretty verbose, to the degree where i always see people using <code>\\lam</code> over <code>assume</code> in practice.</p>",
        "id": 192390877,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1585662145
    },
    {
        "content": "<p>It's true that I use <code>\\lambda</code> in practice, because it doesn't mean anything, so why not using it both for introduction and function creation. The situation is very different with hijacking <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇒</span></span></span></span> because it already means something.</p>",
        "id": 192391693,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585662537
    },
    {
        "content": "<p>i think lean4 also tries to get rid of the comma in most places</p>",
        "id": 192392012,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1585662652
    },
    {
        "content": "<p>In ML, lists are written <code>[a; b; c]</code>, while <code>[a,b,c]</code> means <code>[(a,b,c)]</code>. This really throws me off</p>",
        "id": 192392223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585662740
    },
    {
        "content": "<p>Looks like <code>⇒</code> got removed, leaving only the ascii syntax <code>=&gt;</code> for lambda. The drama continues</p>",
        "id": 193102911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586207715
    },
    {
        "content": "<p>I think it's more important not to use  <code>⇒</code> everywhere for something else than implication than to use unicode.</p>",
        "id": 193104391,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586208493
    },
    {
        "content": "<p>So I see this as an improvement.</p>",
        "id": 193104420,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586208513
    },
    {
        "content": "<p>I still don't understand what's wrong with <code>,</code></p>",
        "id": 193104499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586208573
    },
    {
        "content": "<p>Mathematicians might not like the arrows, meanwhile computer scientists constantly complained to Leo that Lean's programming syntax looks wonky, including that weird comma that is without precedent from other languages. That's why Lean 4's (programming) syntax is now much closer to other programming and ITP languages. See also naming convention, Agda-like dependent arrows, ...</p>",
        "id": 193165409,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586254670
    },
    {
        "content": "<p>Ever since Kenny told me I had to use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span> and not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding=\"application/x-tex\">\\subseteq</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">⊆</span></span></span></span> for ideals of a ring, I knew we were going to have to start adapting.</p>",
        "id": 193166827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586255593
    },
    {
        "content": "<p>↦, what's not to love? It's an arrow, making computer scientists happy, and it's the arrow that mathematicians already use for lambdas, making mathematicians happy.</p>",
        "id": 193167786,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586256217
    },
    {
        "content": "<p>Well, what about <code>match</code>? It uses the same <code>=&gt;</code> in Lean 4, since <code>:=</code> makes zero sense at that position.</p>",
        "id": 193187614,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586266402
    },
    {
        "content": "<p>What's the problem with  ↦ in match?</p>",
        "id": 193189701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586267208
    },
    {
        "content": "<p>Anyway, I hope you and Leo didn't spend too much time discussing this. Notations are important, but much less than moving Lean 4 forward.</p>",
        "id": 193189863,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586267276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/chained.20inequalities.20.3F/near/193189701\" title=\"#narrow/stream/113489-new-members/topic/chained.20inequalities.20.3F/near/193189701\">said</a>:</p>\n<blockquote>\n<p>What's the problem with  ↦ in match?</p>\n</blockquote>\n<p>In <code>match</code> it has no precedent in <em>either</em> programming or math! IOW: it looked plain silly to us.</p>",
        "id": 193197527,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586270466
    },
    {
        "content": "<p>I'm sure that whatever happens, we'll be able to parse our way out :-)</p>",
        "id": 193197747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586270563
    },
    {
        "content": "<p>That's because in maths you write</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.3599999999999999em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>37</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi>x</mi><mo>=</mo><mn>0</mn></mstyle></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>otherwise.</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">f(x) =\n\\begin{cases}\n  37 &amp; \\text{if $x = 0$} \\\\\n  0 &amp; \\text{otherwise.}\n\\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">7</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise.</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>",
        "id": 193197857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586270604
    },
    {
        "content": "<p>Well, this discussion did lead to a change, so it wasn't completely moot. Specifically, it makes sure the category people can still use that Unicode arrow without breaking <code>match</code>. But regarding <code>fun x ↦</code>, I'll just reiterate that I'm fine with somebody declaring an alternative math syntax <code> x ↦</code> to the programming syntax <code>fun x =&gt;</code>, but I'm very much not fine with creating an unholy mix of the two and making it the default.</p>",
        "id": 193198542,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586270851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I feel like the hardest part of defining that in Lean 4 will be coming up with a reasonable approximation to the big curly bracket :)</p>",
        "id": 193198760,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586270935
    },
    {
        "content": "<p>In this case, I prefer what the computer scientists do (i.e., put the conditions first and the definitions afterwards). Of course mathematicians can have pretty sophisticated cases that aren't constructors of an inductive type.<br>\nBut for inductive types, the way match works is fine for me.</p>",
        "id": 193198953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586271021
    },
    {
        "content": "<p>Still, I would think</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"err\">↦</span> <span class=\"mi\">37</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">↦</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>is pretty intuitive.</p>",
        "id": 193199130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586271101
    },
    {
        "content": "<p>I just learnt that <code> ```latex </code> exists from this thread :-)</p>",
        "id": 193199164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586271113
    },
    {
        "content": "<p>You just have to remember that <code>↦</code> should be read out loud as \"maps to\"</p>",
        "id": 193199244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586271133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/113489-new-members/topic/chained.20inequalities.20.3F/near/192377452\">said</a>:</p>\n<blockquote>\n<p>the camelCase / PascalCase change is actually pretty cool, you get less name collisions between functions/variables and types!</p>\n</blockquote>\n<p>... but you get more collisions between typeclasses and categories <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 279433346,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650385540
    }
]