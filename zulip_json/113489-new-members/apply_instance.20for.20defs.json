[
    {
        "content": "<p>In the following code</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">hn_fd</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">hn_fd&#39;</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204356532,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595173526
    },
    {
        "content": "<p>The first instance works but the second gives an error</p>",
        "id": 204356581,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595173570
    },
    {
        "content": "<p>Is <code>def</code> doing something more than just setting <code>V</code> definitionally equal to <code>(n → ℂ)</code>?</p>",
        "id": 204356610,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595173649
    },
    {
        "content": "<p><code>delta V, apply_instance</code></p>",
        "id": 204356612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595173655
    },
    {
        "content": "<p>You need to tell Lean to \"open the box\" and look inside the definition. That's what the <code>delta</code> does.</p>",
        "id": 204356669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595173689
    },
    {
        "content": "<p>I tried this </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">hn_fd&#39;</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">delta</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"c1\">--similar error with unfold</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>but I'm still getting </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_instance</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"err\">⊢</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204356701,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595173773
    },
    {
        "content": "<p>looks like Lean is forgetting that <code>n</code> is  <code>fintype</code></p>",
        "id": 204356764,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595173834
    },
    {
        "content": "<p>If I copy your code block, I get an error even earlier, in the statement of the lemma. Do you also get it, and do you understand what it means?</p>",
        "id": 204356963,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595174080
    },
    {
        "content": "<p>Ah, I totally missed that, thanks! This is what I'm seeing </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"err\">⊢</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</code></pre></div>",
        "id": 204357380,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595174457
    },
    {
        "content": "<p>I <em>think</em> Lean is unable to infer what <code>n</code> is</p>",
        "id": 204357391,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595174476
    },
    {
        "content": "<p>This is very interesting. I thought that using <code>variables {n : Type u} [fintype n]</code> will pass <code>n</code> as an implicit variable to all the definitions and theorems in the namespace.  I don't think I know how to fix this.</p>",
        "id": 204357635,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595174735
    },
    {
        "content": "<p>Maybe you need to use <code>include n</code>?</p>",
        "id": 204357729,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595174850
    },
    {
        "content": "<p>Still getting error in the statement of the lemma :(</p>",
        "id": 204357826,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595174951
    },
    {
        "content": "<p>Although the error has slightly changed now </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">n</span>\n<span class=\"err\">⊢</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</code></pre></div>",
        "id": 204357830,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595174990
    },
    {
        "content": "<p>It basically just means <code>{n : Type u} [fintype n]</code> is implictly in all your definitions (actually, only the ones which mention <code>n</code>).</p>",
        "id": 204357852,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595174998
    },
    {
        "content": "<p>This isn't what you want, for the reason you are discovering.</p>",
        "id": 204357923,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595175020
    },
    {
        "content": "<p>I honestly don't know what to do. My guess is that <code>def V := (n → ℂ)</code> is not the right way to ask Lean to treat <code>V</code> as a placeholder for <code>(n → ℂ)</code></p>",
        "id": 204358061,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595175239
    },
    {
        "content": "<p><code>variables (n : Type u)</code> is the easiest</p>",
        "id": 204358134,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595175265
    },
    {
        "content": "<p>This is giving me </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"n\">V</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">V</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">],</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">?</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Wow, this is turning out to be more complicated than I expected!</p>",
        "id": 204358277,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595175415
    },
    {
        "content": "<p>This is because <code>V</code> now requires an explicit argument for <code>n</code>.</p>",
        "id": 204358297,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595175466
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">hn_fd&#39;</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Now Lean complains that it can't find an <code>add_comm_group</code> instance on <code>V n</code>.</p>",
        "id": 204358341,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595175502
    },
    {
        "content": "<p>Hmm... it seems to me that Lean does not like <em>hiding</em> the variable <code>n</code> in <code>V</code>. <br>\nFor now, I'll just stick to using <code>(n → ℂ)</code> everywhere. <br>\nI'm a bit sad though that there is no straightforward way in Lean to simply rename a term like <code>(n → ℂ)</code></p>",
        "id": 204358565,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595175934
    },
    {
        "content": "<p>Although, in math, it is common to write statements like \"In this section, we will let <code>V</code> decode <code>ℂ^n</code>.\" It would be  good to know what the Lean variant of this is.</p>",
        "id": 204358689,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595176120
    },
    {
        "content": "<p><code>parameter</code>, but I wouldn't recommend using it unless you first know how to use <code>variable</code></p>",
        "id": 204358706,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595176152
    },
    {
        "content": "<p>You would still need to copy the instances you want anyways.</p>",
        "id": 204358720,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595176195
    },
    {
        "content": "<p>Another option is <code>local notation</code>.</p>",
        "id": 204358725,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595176200
    },
    {
        "content": "<p>Yess! This works, thanks so much!!</p>",
        "id": 204358846,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595176377
    },
    {
        "content": "<p>What's the issue with using delta? That's the Lean variant you asked for. When we say that V will encode, delta is the decoding step.</p>",
        "id": 204358861,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1595176391
    },
    {
        "content": "<p>Although local notation is very easy too.</p>",
        "id": 204358870,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1595176406
    },
    {
        "content": "<p><code>delta</code> did not work</p>",
        "id": 204358876,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595176418
    },
    {
        "content": "<p>there was an error in the theorem statement itself</p>",
        "id": 204358881,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595176427
    },
    {
        "content": "<p>Well, this works, but this is worse than just using <code>n → ℂ</code> everywhere:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">hn_fd&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">delta</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">delta</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">delta</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204359005,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595176613
    },
    {
        "content": "<p><code>def V n :=... </code></p>",
        "id": 204359006,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1595176617
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">add_comm_group</span><span class=\"o\">,</span> <span class=\"n\">derive</span> <span class=\"o\">(</span><span class=\"n\">vector_space</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"n\">derive</span> <span class=\"o\">(</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span><span class=\"o\">)]</span>\n<span class=\"n\">def</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I don't know if it's possible to get <code>[fintype n]</code> on only the <code>finite_dimensional</code> instance</p>",
        "id": 204359225,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595176963
    },
    {
        "content": "<p>or to avoid repeating <code>derive</code></p>",
        "id": 204359233,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595176974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/apply_instance.20for.20defs/near/204359233\">said</a>:</p>\n<blockquote>\n<p>or to avoid repeating <code>derive</code></p>\n</blockquote>\n<p>This yes, <code>@[derive [..., ...]]</code>. The other probably not.</p>",
        "id": 204359511,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595177413
    },
    {
        "content": "<p>We should really have a doc entry on <code>derive</code> <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html\">here</a>. Does anyone want to volunteer?</p>",
        "id": 204359515,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595177436
    },
    {
        "content": "<p>(I'll do it if someone gives me some pointers on how it works...)</p>",
        "id": 204360194,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595178226
    },
    {
        "content": "<p>I also wonder how <code>derive</code> works. Some search (by <code>git blaming</code> the related tests) got me <a href=\"https://github.com/leanprover-community/mathlib/issues/1475\">leanprover-community/mathlib#1475</a> then  <a href=\"#narrow/stream/113488-general/topic/deriving.20instances\">this Zulip chat</a>  and <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/derive.lean\">https://github.com/leanprover-community/lean/blob/master/library/init/meta/derive.lean</a> .</p>\n<p>I can't immediately tell how it works (from the source), only knowing that there's such a mechanism to register derive handlers and there're a few such handlers available in mathlib, each targeting a specific scenario.</p>\n<p>By a few I mean two of them (found by searching <code>derive_handler</code>: <code>inhabited_instance</code> and <code>delta_instance</code>) and they seem to be well documented by themselves, it's just not easy for anyone to find the doc by just seeing <code>@[derive ...]</code>.</p>\n<p>P.S. Is it possible to make VSCode display the doc when hover <code>@[derive ...]</code> or make it clickable? I don't know where's related code in VSCode plugin.</p>",
        "id": 205085382,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595831716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113489-new-members/topic/apply_instance.20for.20defs/near/205085382\">said</a>:</p>\n<blockquote>\n<p>P.S. Is it possible to make VSCode display the doc when hover <code>@[derive ...]</code> or make it clickable? I don't know where's related code in VSCode plugin.</p>\n</blockquote>\n<p>Most likely not without making changes to Lean itself. I don't know how hard it would be.</p>",
        "id": 205085522,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595831952
    },
    {
        "content": "<p>Seems possible to address the hover part by modifying  <a href=\"https://github.com/leanprover/vscode-lean/blob/master/src/hover.ts\">https://github.com/leanprover/vscode-lean/blob/master/src/hover.ts</a> by manually write some doc in json and provide them to hover. To avoid becoming out of sync with the source, it could be just a link to an HTML doc generated from Lean /Mathlib. This would be enough for most users I guess.</p>\n<p>As for the clickable part, modifying <a href=\"https://github.com/leanprover/vscode-lean/blob/master/src/definition.ts\">https://github.com/leanprover/vscode-lean/blob/master/src/definition.ts</a> with the same naive manual approach would not work since the location has to be provided by Lean language server and there's no such an API to literal specify the symbol (out of context) to locate.</p>",
        "id": 205088395,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595835234
    },
    {
        "content": "<p>I think it'd be better overall to have the Lean server return the doc string and location from the attribute declaration. That would allow Emacs users to view such docstrings as well.</p>",
        "id": 205088712,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595835559
    },
    {
        "content": "<p>Sure.</p>",
        "id": 205088947,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595835787
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">monoidal</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">delta_instance</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoidal_category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">tensor_power</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">𝟙</span><span class=\"bp\">_</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"err\">⊗</span> <span class=\"n\">tensor_power</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">tensor_power</span> <span class=\"n\">M</span> <span class=\"mi\">17</span>\n\n<span class=\"c1\">-- And if you want to do this with unbundled objects:</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">tensor_power</span> <span class=\"o\">(</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"mi\">17</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- WORKS</span>\n<span class=\"c1\">-- instance : add_comm_group (foo R M) := by { delta foo, apply_instance, }</span>\n<span class=\"c1\">-- instance : module R (foo R M) := by { delta foo, apply_instance, }</span>\n\n<span class=\"c1\">-- WORKS</span>\n<span class=\"c1\">-- instance : add_comm_group (foo R M) := by delta_instance foo</span>\n<span class=\"c1\">-- instance : module R (foo R M) :=  by delta_instance foo</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">tactic.mk_instance failed to generate instance for</span>\n<span class=\"cm\">  add_comm_group (foo R M)</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">add_comm_group</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">to_add_comm_group</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">R : Type u,</span>\n<span class=\"cm\">_inst_3 : comm_ring R,</span>\n<span class=\"cm\">M : Type u,</span>\n<span class=\"cm\">_inst_4 : add_comm_group M,</span>\n<span class=\"cm\">_inst_5 : module R M</span>\n<span class=\"cm\">⊢ add_comm_group (to_module R M)</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">module</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">to_module</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 205195259,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595907177
    },
    {
        "content": "<p>I don't understand why <code>derive</code> doesn't work here.</p>",
        "id": 205195265,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595907201
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/linear_algebra/dual.lean#L39\">https://github.com/leanprover-community/mathlib/blob/master/src/linear_algebra/dual.lean#L39</a> is similar but works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">R</span><span class=\"o\">]]</span> <span class=\"n\">def</span> <span class=\"n\">dual</span> <span class=\"o\">:=</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 205195313,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595907253
    },
    {
        "content": "<p>This doesn't work because <code>derive</code> only unfolds the current definition (i.e. <code>to_add_comm_group</code> in your example). It would need to _also_ unfold <code>foo</code> before it could find the instance.</p>",
        "id": 205196396,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595909045
    },
    {
        "content": "<p>If you put another <code>@[derive]</code> on <code>foo</code> it should work.</p>",
        "id": 205196405,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595909065
    },
    {
        "content": "<p>Oh, moving <code>derive</code> to where <code>foo</code> is defined works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">R</span><span class=\"o\">]]</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">tensor_power</span> <span class=\"o\">(</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"mi\">17</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205196698,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595909637
    },
    {
        "content": "<p>So does <code>attribute [derive [add_comm_group, module R]] foo</code></p>",
        "id": 205196743,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595909684
    }
]