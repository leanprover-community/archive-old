[
    {
        "content": "<p>Hey! I'm looking for this type, which surely exists somewhere in the standard library:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Lift</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Lift_intro</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Lift</span>\n</pre></div>\n\n\n<p>(<code>library_search</code> and <code>suggest</code> didn't bring up anything.)</p>",
        "id": 192138827,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1585425112
    },
    {
        "content": "<p><code>ulift</code></p>",
        "id": 192138999,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585425401
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 192139313,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1585425860
    },
    {
        "content": "<p>I think it's worth just quoting Lean's definition here, because I think it's a rather beautiful part of the core library:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">ulift</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">up</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p><code>up</code> and <code>down</code> and <code>ulift</code> are all defined simultaneously. It's not often you see the use of Lean's ability to name the constructor of a structure something other than <code>mk</code>.</p>\n<div class=\"codehilite\"><pre><span></span>ulift.up : Π {α : Type s}, α → ulift α\nulift.down : Π {α : Type s}, ulift α → α\n</pre></div>\n\n\n<p>I still remember where I was when I first spent several minutes staring at this definition -- coming home from AITP 2019. I should have been coming home from AITP2020 today :-(</p>",
        "id": 192139832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585426707
    },
    {
        "content": "<p>Thanks, I wasn't aware of this incantation. (Coq and Agda also have this feature, but the syntax is of course very different.)</p>",
        "id": 192144361,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1585434238
    }
]