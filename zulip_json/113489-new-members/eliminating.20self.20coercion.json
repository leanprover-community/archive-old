[
    {
        "content": "<p>How can I reduce (@coe _ _ lift_self x) to x?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- I can do it with `cast`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">rfl</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lift_self</span><span class=\"o\">:</span> <span class=\"n\">has_lift_t</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">tautology</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">lift_self</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215204597,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1604168484
    },
    {
        "content": "<p>I'm not sure what you mean. In your <code>example</code>s, you postulate a term <code>x</code> of type <code>A</code>, (written <code>(x : A)</code> for short). What exactly do you want to reduce <code>x</code> to?</p>",
        "id": 215204832,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604168744
    },
    {
        "content": "<p>Sorry for confusion. I wrote <code>(x : A)</code> as a shorthand for <code>(@coe _ _ lift_self x)</code>. I'd like to reduce it to <code>x</code>.</p>",
        "id": 215204931,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1604168827
    },
    {
        "content": "<p>Don't use <code>lemma</code> for <code>lift_self</code>, use <code>def</code> instead</p>",
        "id": 215205031,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604168951
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> . That was it.</p>",
        "id": 215205049,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1604168993
    },
    {
        "content": "<p>We have a linter that warns you if <code>lemma</code>s should be <code>def</code>s and vice versa. Unfortunately, it has to be called manually at the moment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lift_self</span><span class=\"o\">:</span> <span class=\"n\">has_lift_t</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">tautology</span>\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">/- Checking 1 declarations (plus 0 automatically generated ones) in the current file -/</span>\n\n<span class=\"cm\">/- The `def_lemma` linter reports: -/</span>\n<span class=\"cm\">/- INCORRECT DEF/LEMMA: -/</span>\n<span class=\"cm\">#print lift_self /- is a lemma/theorem, should be a def -/</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 215205196,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604169148
    },
    {
        "content": "<p>I see. Thanks! <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span></p>",
        "id": 215205646,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1604169733
    }
]