[
    {
        "content": "<p>This seemingly trivial statement is proving painful for me to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sum_congr_swap_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv.sum_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv.swap</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">swap_self</span> <span class=\"n\">_</span><span class=\"o\">],</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">sum_congr_refl</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum_congr_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">swap_eq_update</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">swap_eq_update</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">function.update_comm</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"n\">revert</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">function.funext_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">function.update_comp_eq_of_injective'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">sum.injective_inl</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">function.update_comp_eq_of_injective'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">sum.injective_inl</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">-- help!</span>\n    <span class=\"c1\">-- not sure where these come from</span>\n    <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">swap_eq_update</span><span class=\"o\">,</span>\n    <span class=\"n\">revert</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">function.funext_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">function.update_comp_eq_of_not_mem_range'</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">function.update_comp_eq_of_not_mem_range'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I could probably get there by completely unfolding <code>swap</code> to <code>ite</code>s and case-bashing, but I thought I ought to try and \"use the API\". Have I missed a crucial piece of the API?</p>\n<p>It doesn't help here that I have to juggle the <code>1</code> and <code>refl</code> spellings of the identity permutation.</p>",
        "id": 218985780,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607259389
    },
    {
        "content": "<p>mwe?</p>",
        "id": 218989919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607266141
    },
    {
        "content": "<p>There is an unavoidable bit of case bashing, because I don't think we have any theorem about what <code>swap (f x) (f y)</code> does for general injections <code>f</code>, but otherwise it's not too bad:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">equiv</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sum_congr_swap_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv.sum_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv.swap</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">mul_left_inj</span> <span class=\"o\">(</span><span class=\"n\">equiv.swap</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">j</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">swap_mul_self</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">equiv.ext</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum.map</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">swap_apply_def</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum.map</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">swap_apply_of_ne_of_ne</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">swap_apply_of_ne_of_ne</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">equiv</span>\n</code></pre></div>",
        "id": 218990417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607266759
    },
    {
        "content": "<p>I guess this is a symptom of a more general issue I have, where I want lemmas to exist to \"swap\" or \"commute\" <code>f</code> and <code>g</code> in some way (to push terms together that match other lemmas), but there are sometimes O(n²) of those pairs so inevitably many aren't in mathlib</p>",
        "id": 218992909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607270828
    },
    {
        "content": "<p>My approach to API design is to do the full O(n^2)</p>",
        "id": 218994370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607273280
    },
    {
        "content": "<p>people will thank you later</p>",
        "id": 218994414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607273292
    },
    {
        "content": "<p>but it does explain why I often try to discourage unnecessary new definitions, because they come with significant overhead in terms of API surface area</p>",
        "id": 218994433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607273363
    },
    {
        "content": "<p>O(n^2) might sound scary to a computer scientist, but they are typically thinking of n=10,000. When n=4, O(n^2) is something which you might want to just bite the bullet and do.</p>",
        "id": 218995096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607274483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20.60equiv.2Eswap.60/near/218995096\">said</a>:</p>\n<blockquote>\n<p>O(n^2) might sound scary to a computer scientist</p>\n</blockquote>\n<p>depends on the computer scientist</p>",
        "id": 218995100,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607274506
    },
    {
        "content": "<p>it sounds scary to algorithm researchers. cryptography people will be satisfied with it being polynomial, and ITP researchers will be delighted to hear that there's a decision algorithm <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 218995125,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607274588
    },
    {
        "content": "<p>My model of a computer scientist is based on my son, who is 18 and does these informatics olympiad problems where often the question is \"here's a problem with an obvious O(n^2) algorithm; here are 10,000 pieces of data. Now go find the O(n log n) algorithm\"</p>",
        "id": 218995186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607274650
    },
    {
        "content": "<p>\"algorithm engineering\" is a pretty prominent topic here,  where time complexity isn't good enough, it also needs to perform good in practice!<br>\ni guess they might be happy with O(n^2) if it's fast on the problem sets they care about.</p>",
        "id": 218995410,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607275041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20.60equiv.2Eswap.60/near/218995186\">said</a>:</p>\n<blockquote>\n<p>My model of a computer scientist is based on my son, who is 18 and does these informatics olympiad problems where often the question is \"here's a problem with an obvious O(n^2) algorithm; here are 10,000 pieces of data. Now go find the O(n log n) algorithm\"</p>\n</blockquote>\n<p>this sounds also like the \"programming job interview\" model of algorithmic complexity and optimization</p>",
        "id": 218996347,
        "sender_full_name": "Julian Berman",
        "timestamp": 1607276485
    },
    {
        "content": "<p>In reality it's less than O(n^2) because the network of connections between mathematical concepts is not the complete graph, and is probably on the sparse end of the spectrum</p>",
        "id": 218996602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607276927
    },
    {
        "content": "<p>What is the edge density of graphs like social networks? It's probably somewhere around that</p>",
        "id": 218996658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607277006
    },
    {
        "content": "<p>For example, how does <code>list.modify_nth</code> commute with <code>T1_space</code>?</p>",
        "id": 218996678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607277100
    },
    {
        "content": "<p>Does lean give us for free how function composition commutes with recursors for inductive types?</p>",
        "id": 218997466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607278376
    },
    {
        "content": "<p>Eg, <code>f ° sum.rec g h = sum.rec f°g f°h</code>, but for all inductive types?</p>",
        "id": 218997518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607278443
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5260\">#5260</a> makes a start on some of the missing n² lemmas</p>",
        "id": 219025587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607291969
    }
]