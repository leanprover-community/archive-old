[
    {
        "content": "<p>Hello - complete amateur here, stumbling through verifying my first elementary proof.<br>\nI've made some good progress, and I'm really enjoying Lean so far, but I'm hung up on a basic property of real exponents.</p>\n<p>I would like to be able to use the following theorem, but I'm not seeing it in mathlib and I'm not quite sure how to proceed with a proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">rpow_eq_one_iff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The statement I need in my proof is the following, so any direct solution for the below example would suffice.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thank you for any help!</p>",
        "id": 305850245,
        "sender_full_name": "Dave Jones",
        "timestamp": 1666626493
    },
    {
        "content": "<p>Have you tried <code>by positivity</code>?</p>",
        "id": 305850454,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666626540
    },
    {
        "content": "<p>Oh wait <a href=\"https://github.com/leanprover-community/mathlib/pull/16632\">#16632</a> still hasn't been merged, <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span></p>",
        "id": 305850686,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666626596
    },
    {
        "content": "<p>(but that would only give you <code>0 &lt; (2 : ℝ)^(1 - a)</code> anyway)</p>",
        "id": 305850956,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666626656
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.one_lt_rpow\">docs#real.one_lt_rpow</a> together with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne_of_gt\">docs#ne_of_gt</a> should help (I hope I got the inequality sign the right way round)</p>",
        "id": 305853876,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1666627448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20with.20Basic.20Property.20of.20Real.20Exponents/near/305850686\">said</a>:</p>\n<blockquote>\n<p>Oh wait <a href=\"https://github.com/leanprover-community/mathlib/pull/16632\">#16632</a> still hasn't been merged, <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span></p>\n</blockquote>\n<p>I'm not opposed to merging this but it's more important to come to a consensus with the other reviewers. I'll try and ask them to come to a conclusion.</p>",
        "id": 305856261,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1666628146
    },
    {
        "content": "<p>Thank you for the quick responses!</p>\n<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span>  - These two theorems did the trick!<br>\nThis would have taken me way longer to come up with on my own - thank you so much! </p>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> My system was actually able to recognize the keyword <code>positivity</code>, but I got the following errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">positivity</span><span class=\"bp\">/</span><span class=\"n\">nonnegativity</span><span class=\"bp\">/</span><span class=\"n\">nonzeroness</span> <span class=\"n\">goal</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">positivity</span><span class=\"bp\">/</span><span class=\"n\">nonnegativity</span><span class=\"bp\">/</span><span class=\"n\">nonzeroness</span>\n</code></pre></div>\n<p>Just in case this might be useful feedback.</p>\n<p>Thanks all</p>",
        "id": 305863302,
        "sender_full_name": "Dave Jones",
        "timestamp": 1666630315
    },
    {
        "content": "<p>the reason why <code>positivity</code> does not work here is because you are proving something that is not 'by design' positive such as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><mn>3</mn><mo>∗</mo><mi mathvariant=\"normal\">∣</mi><mi>y</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">0 \\leq e^x + 3*|y|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7477em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span></span></span></span>. There is the addition that if <code>positivity</code> can prove such a goal it can also prove that the RHS is not equal to zero.</p>",
        "id": 305928614,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1666652988
    },
    {
        "content": "<p>I know I know. I just hadn't seen the <code>- 1</code> on the LHS.</p>",
        "id": 305965297,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666680126
    },
    {
        "content": "<p>I had a proof of this floating around:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">real.rpow_eq_one_iff_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hy</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">y</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">real.one_rpow</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">real.rpow_left_inj_on</span> <span class=\"n\">hy</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">zero_le_one</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">real.one_rpow</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">real.rpow_zero</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nnreal.rpow_eq_one_iff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">real.rpow_eq_one_iff_of_nonneg</span> <span class=\"n\">x.prop</span>\n</code></pre></div>",
        "id": 305978261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666686006
    }
]