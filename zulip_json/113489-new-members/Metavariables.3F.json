[
    {
        "content": "<p>I have 3 related questions about metavariables, but allow me to set the stage, so you know where I'm coming from.  <br>\nI'm trying to do Level 1/4 of Advanced Multiplication World from The Natural Number Game, which is asking to prove </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_pos</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>So far, I've come up with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">a_zero</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">b_zero</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">b_zero</span><span class=\"o\">,</span>\n\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_succ</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n<span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which leaves me with a goal state of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">a_zero</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">b_zero</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>Now one thing I'm trying at this point, is to force a to be zero, however when I try writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Lean is telling me it won't apply the tactic because the lhs is a \"metavariable\".  <br>\n1) What is a metavariable?<br>\n2) Why can't I use this tactic on metavariables?<br>\n3) How should I proceed?</p>",
        "id": 224832122,
        "sender_full_name": "Kristaps John Balodis",
        "timestamp": 1612245572
    },
    {
        "content": "<p>The lemma <code>eq_zero_of_add_right_eq_self</code> is an implication. You can only use <code>rw</code> with equalities and iffs</p>",
        "id": 224832345,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612245804
    },
    {
        "content": "<p>Also, I think that you want to use <code>add_left_eq_zero</code> rather than <code>eq_zero_of_add_right_eq_self</code></p>",
        "id": 224832434,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612245894
    },
    {
        "content": "<p>That seems to give me the same error about metavariables, as does <code>add_right_eq_zero</code></p>",
        "id": 224832616,
        "sender_full_name": "Kristaps John Balodis",
        "timestamp": 1612246135
    },
    {
        "content": "<p>You can't use <code>rw</code> with <code>add_right_eq_zero</code>, since it is an implication</p>",
        "id": 224832631,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612246188
    },
    {
        "content": "<p>Instead, maybe start with <code>have key := add_right_eq_zero h</code></p>",
        "id": 224832676,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612246206
    },
    {
        "content": "<p>That directly feeds <code>h</code> into <code>add_right_eq_zero</code></p>",
        "id": 224832691,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612246233
    },
    {
        "content": "<p>That seemed to work.  The only issue is, <code> have key</code> has not been introduced in The Natural Number Game yet, so there ought to be some other way of making this work.</p>",
        "id": 224833105,
        "sender_full_name": "Kristaps John Balodis",
        "timestamp": 1612246886
    },
    {
        "content": "<p>Ah, but <code> have </code> has been introduced, and that seems to work without writing <code> key </code>, thanks!</p>",
        "id": 224833158,
        "sender_full_name": "Kristaps John Balodis",
        "timestamp": 1612246947
    },
    {
        "content": "<p><code>key</code> is just an optional name you can give the hypothesis, if you don't give a name <code>have</code> will call it <code>this</code>  by default which becomes annoying if you <code>have</code> more than one thing, they end up all called <code>this</code>!</p>",
        "id": 224833270,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612247074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"378276\">@Kristaps John Balodis</span> Roughly speaking, a metavariable is what Lean uses to fill in missing details automatically, and Lean solves for metavariables in a process called unification.  I think what's happening here is that it wasn't sure what <code>b</code> was supposed to be.</p>",
        "id": 224833974,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1612247911
    }
]