[
    {
        "content": "<p>Just reading the statement of the lemma below may make most people frown. Is there a reason not to change the definition of <code>monotone</code> to include monotonically decreasing sequences in <code>mathlib</code>? Also, could someone please teach me how to use the <code>order_dual</code> tag to produce the proper result in this case?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"c1\">-- reciprocals of nats</span>\n<span class=\"n\">def</span> <span class=\"n\">recipr_seq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_mono_recipr</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">monotone</span> <span class=\"n\">recipr_seq</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">monotone</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">recipr_seq</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203536746,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594402911
    },
    {
        "content": "<p>Aah, the convention is that mono is order-preserving</p>",
        "id": 203538790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404010
    },
    {
        "content": "<p>I think there's antimono?</p>",
        "id": 203538827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404028
    },
    {
        "content": "<p>The order dual way would be</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"c1\">-- reciprocals of nats</span>\n<span class=\"n\">def</span> <span class=\"n\">recipr_seq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">order_dual</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mono_recipr</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">recipr_seq</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">recipr_seq</span><span class=\"o\">],</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203538878,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594404052
    },
    {
        "content": "<p>But antimono is way less confusing looking <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 203539074,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594404144
    },
    {
        "content": "<p>This will probably get very confusing if you try to use it, yes</p>",
        "id": 203539321,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594404273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/203538878\">said</a>:</p>\n<blockquote>\n<p>The order dual way would be</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"c1\">-- reciprocals of nats</span>\n<span class=\"n\">def</span> <span class=\"n\">recipr_seq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">order_dual</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mono_recipr</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">recipr_seq</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">recipr_seq</span><span class=\"o\">],</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>This is something I tried, but it still gives the same goal as without <code>order_dual</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">xy</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 203539440,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594404323
    },
    {
        "content": "<p>Right, but now <code>\\le</code> means the opposite of the usual one on <code>\\R</code></p>",
        "id": 203539479,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594404350
    },
    {
        "content": "<p>What Reid said</p>",
        "id": 203540086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594404660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/203538827\">said</a>:</p>\n<blockquote>\n<p>I think there's antimono?</p>\n</blockquote>\n<p>There's  at least <code>antimono_seq_of_seq</code> that I could find in <code>filter/bases</code>.</p>",
        "id": 203540133,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594404689
    },
    {
        "content": "<p>Thank you all!</p>",
        "id": 203540230,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594404731
    },
    {
        "content": "<p>We had \"fun\" with this in the category theory library for a while.</p>",
        "id": 203540383,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594404818
    },
    {
        "content": "<p>We don't have a definition of <code>antimono</code> in <code>mathlib</code>. One of the ways to state this is <code>((≤) ⇒ (≥)) recipr_seq recipr_seq</code>.</p>",
        "id": 203578760,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1594439375
    },
    {
        "content": "<p>Thanks Yury, I'll give this a try. But isn't this basically the same as <code>order_dual</code>? At any rate, I gave <code>order_dual</code> a try the other day and apparently there are quite some problems. I was also using positivity of the terms and <code>linarith</code> was somehow getting confused. Let alone my own confusion. </p>\n<p>What are the cons to having an additional definition, something like <code>monotone_seq</code>, to leave <code>monotone</code> alone but still use a language that users will understand at first glance?</p>",
        "id": 203599082,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594478081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"259857\">Dan Stanescu</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/203599082\">said</a>:</p>\n<blockquote>\n<p>Thanks Yury, I'll give this a try. But isn't this basically the same as <code>order_dual</code>? At any rate, I gave <code>order_dual</code> a try the other day and apparently there are quite some problems. I was also using positivity of the terms and <code>linarith</code> was somehow getting confused. Let alone my own confusion. </p>\n</blockquote>\n<p>In some sense it is basically the same, but the difference is that you write <code>a ≤ b</code> and <code>a ≥ b</code> to mean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\le b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≥</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\ge b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span>, as opposed to writing <code>a ≤ b</code> and  <code>a ≤ b</code> but using different instances of <code>has_le real</code>. Otherwise they are probably definitionally equal.</p>",
        "id": 203599472,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594478644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"259857\">Dan Stanescu</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/203599082\">said</a>:</p>\n<blockquote>\n<p>What are the cons to having an additional definition, something like <code>monotone_seq</code>, to leave <code>monotone</code> alone but still use a language that users will understand at first glance?</p>\n</blockquote>\n<p>What additional definition do you have in mind?</p>",
        "id": 203599479,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594478680
    },
    {
        "content": "<p>I really don't know what started this monotone crazyness. Maybe it's just that English is a broken language. This issue simply don't exist in French.</p>",
        "id": 203599763,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594479211
    },
    {
        "content": "<p>In French monotone mean either non-increasing or non-decreasing. And of course we don't have those non-* crazyness either, we say \"croissante, strictement croissante, décroissante, strictement décroissante\".</p>",
        "id": 203599818,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594479274
    },
    {
        "content": "<p>In non-lean english monotone means monotone increasing or decreasing too, even the venerable wikipedia agrees: \"In mathematics, a monotonic function (or monotone function) is a function between ordered sets that preserves or reverses the given order.\"</p>",
        "id": 203600428,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594480116
    },
    {
        "content": "<p>Ok, so we'll need a fun refactor at some point.</p>",
        "id": 203600660,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594480450
    },
    {
        "content": "<p>I think this is true in high school algebra but not really true otherwise.</p>",
        "id": 203600893,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594480812
    },
    {
        "content": "<p>What is true? What Alex says?</p>",
        "id": 203601437,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594481754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/203599818\">said</a>:</p>\n<blockquote>\n<p>In French monotone mean either non-increasing or non-decreasing. And of course we don't have those non-* crazyness either, we say \"croissante, strictement croissante, décroissante, strictement décroissante\".</p>\n</blockquote>\n<p>Patrick, the terminology is the same in both languages. The \"problem\"  I see is that the mathlib definition does not agree with either language. In mathlib, a <code>monotone</code> sequence is only monotone increasing.</p>",
        "id": 203601564,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594481948
    },
    {
        "content": "<p>So if one has a monotonically decreasing sequence, one needs to do extra acrobatics to obtain a proof that it is <code>monotone</code>.</p>",
        "id": 203601613,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594482009
    },
    {
        "content": "<p>These acrobatics involve using <code>order_dual</code> and are somehow like changing the sign, for example. So one has a decreasing sequence going to 1, change the sign to get an increasing sequence into \"-1\", and you can much more easily prove the latter one is <code>monotone</code>.</p>",
        "id": 203601747,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594482250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/203601437\">said</a>:</p>\n<blockquote>\n<p>What is true? What Alex says?</p>\n</blockquote>\n<p>Yes. Compare <a href=\"https://en.wikipedia.org/wiki/Monotonic_function#Monotonicity_in_order_theory\">https://en.wikipedia.org/wiki/Monotonic_function#Monotonicity_in_order_theory</a>, <a href=\"https://ncatlab.org/nlab/show/monotone+function\">https://ncatlab.org/nlab/show/monotone+function</a>.</p>",
        "id": 203601793,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594482333
    },
    {
        "content": "<p>I'm also skeptical that \"monotone increasing or monotone decreasing\" is a useful concept</p>",
        "id": 203601858,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594482417
    },
    {
        "content": "<p>Dan, it seems Alex and Reid disagree with you.</p>",
        "id": 203601875,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594482461
    },
    {
        "content": "<p>Whether it's useful in general or not, surely what you want to prove about the original <code>recipr_seq</code> is that it's monotone decreasing, not that it is monotone-increasing-or-monotone-decreasing.</p>",
        "id": 203601954,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594482572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/203601875\">said</a>:</p>\n<blockquote>\n<p>Dan, it seems Alex and Reid disagree with you.</p>\n</blockquote>\n<p>It seems to me that Alex agrees 100%.</p>",
        "id": 203601959,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594482584
    },
    {
        "content": "<p>I'm sure people who study order theory or something similar use the stricter definition, but I'd put the cutoff of people using the strictly increasing or decreasing definition way above \"high school algebra\", I'm sure it includes undergraduate analysis for one. For instance I just checked baby rudin for example: where he has</p>\n<blockquote>\n<p>4.28 Definition Let f be real on (a, b). Then f is said to be monotonically<br>\nincreasing on (a, b) if a &lt; x &lt; у &lt; b implies f(x) &lt;,fiy). If the last inequality<br>\nis reversed, we obtain the definition of a monotonically decreasing function. The<br>\nclass of monotonic functions consists of both the increasing and the decreasing<br>\nfunctions.</p>\n</blockquote>",
        "id": 203601964,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594482599
    },
    {
        "content": "<p>Sorry Dan, I meant Reid indeed.</p>",
        "id": 203602008,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594482611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/203601954\">said</a>:</p>\n<blockquote>\n<p>Whether it's useful in general or not, surely what you want to prove about the original <code>recipr_seq</code> is that it's monotone decreasing, not that it is monotone-increasing-or-monotone-decreasing.</p>\n</blockquote>\n<p>I want to prove that it is a monotone sequence, as an input for Bolzano-Weierstrass.</p>",
        "id": 203602022,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594482650
    },
    {
        "content": "<p>Its not that I'm personally invested in the definition of monotone, but trying to follow the principle of least astonishment seems like a good idea to me <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 203602031,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594482676
    },
    {
        "content": "<p>But for me that is what the current definition achieves already.</p>",
        "id": 203602096,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594482724
    },
    {
        "content": "<p>It seems we are mixing two debates. The debate \"monotone means increasing\" and whether increasing is meant as strictly increasing</p>",
        "id": 203602099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594482729
    },
    {
        "content": "<p>I think everyone here agrees that \"monotone\" is about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span> and not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&lt;</mo></mrow><annotation encoding=\"application/x-tex\">&lt;</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span></span></span></span></p>",
        "id": 203602110,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594482762
    },
    {
        "content": "<p>Reid, would you be confused if we replaced <code>monotone</code> by <code>non-decreasing</code> everywhere?</p>",
        "id": 203602117,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594482778
    },
    {
        "content": "<p>Well, it's kind of a weird name in the context of partial orders</p>",
        "id": 203602132,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594482817
    },
    {
        "content": "<p>I didn't mean to produce an uproar. The point is, Bolzano-Weierstrass for sequences is the most useful tool in showing convergence of sequences generated by numerical approximations. For this simple example <code>recipr_seq</code> though, I can't get to prove that it's <code>monotone</code>.</p>",
        "id": 203602135,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594482820
    },
    {
        "content": "<p>Unless I do special acrobatics which really are not related to the case under scrutiny.</p>",
        "id": 203602188,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594482856
    },
    {
        "content": "<p>I don't get the link between Bolzano-Weirstrass and monotone sequences.</p>",
        "id": 203602202,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594482884
    },
    {
        "content": "<p>since for partial orders \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span> is not less than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>\" is not the same as \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≤</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\le y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>\"</p>",
        "id": 203602203,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594482885
    },
    {
        "content": "<p>Oh, you're complaining about the non-* crazyness? This is indeed crazy.</p>",
        "id": 203602215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594482921
    },
    {
        "content": "<p><code>order_preserving</code> would be okay, I think.</p>",
        "id": 203602222,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594482942
    },
    {
        "content": "<p>That one indeed avoids the issue, and can come together with <code>order_reversing</code>.</p>",
        "id": 203602278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594482988
    },
    {
        "content": "<p>and <code>strictly_order_preserving</code> for the <code>&lt;</code> counterpart works as well</p>",
        "id": 203602291,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594483029
    },
    {
        "content": "<p>and, the pair is even French-compatible</p>",
        "id": 203602298,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594483039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/203602202\">said</a>:</p>\n<blockquote>\n<p>I don't get the link between Bolzano-Weirstrass and monotone sequences.</p>\n</blockquote>\n<p>BW uses the monotone subsequence theorem (every sequence has a monotone subsequence), doesn't it?</p>",
        "id": 203602366,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594483136
    },
    {
        "content": "<p>Certainly not in the BW we have in mathlib.</p>",
        "id": 203602502,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594483319
    },
    {
        "content": "<p>Which has no order in sight.</p>",
        "id": 203602548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594483332
    },
    {
        "content": "<p>If you ask mathlib about BW for segments of real numbers, it will go through the fact that the uniform structure on R has a countable basis, but not through the order relation on R <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 203602595,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594483413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  OK, there are two flavors of BW (for sequences and for sets) and I confess I didn't look in mathlib yet as my internet is on and off today.<br>\nBut the monotone convergence theorem then (a bounded monotone sequence converges). Which I don't know if it is in mathlib or not.</p>",
        "id": 203602690,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594483520
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/sequences.html#tendsto_subseq_of_bounded\">https://leanprover-community.github.io/mathlib_docs/topology/sequences.html#tendsto_subseq_of_bounded</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/ordered.html#tendsto_of_monotone\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/ordered.html#tendsto_of_monotone</a></p>",
        "id": 203602852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594483791
    },
    {
        "content": "<p>or maybe you prefer <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/ordered.html#tendsto_at_top_csupr\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/ordered.html#tendsto_at_top_csupr</a></p>",
        "id": 203602899,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594483815
    },
    {
        "content": "<p>I don't know what you call BW for sets.</p>",
        "id": 203602911,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594483838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/203602911\">said</a>:</p>\n<blockquote>\n<p>I don't know what you call BW for sets.</p>\n</blockquote>\n<p>The way I know it is:  every bounded infinite subset of \\R has an accumulation point in \\R.</p>",
        "id": 203603061,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594484065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/203602008\">said</a>:</p>\n<blockquote>\n<p>Sorry Dan, I meant Reid indeed.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Patrick, it turns out your message also shows that you agree (and Alex, and Rudin's book, and Wikipedia, and the common usage of the term, and so on). Quoting you: \"In French monotone mean either non-increasing or non-decreasing.\" That's exactly what I'm advocating. In other words, your definition of monotone, just like mine, means that the sequence <code>def x (n : ℕ) : ℝ := ( 1/(n+1) : ℝ ) </code> should be monotone (because it is non-increasing). I find it unfortunate (and confusing) that the mathlib definition <code>monotone</code> works differently. With mathlib's definition, one can prove that this sequence is not <code>monotone</code>. Just scroll back to the top of this stream. </p>\n<p>I came back to this because I think it is important. Hold on, I'll try to explain why in a subsequent message.</p>",
        "id": 203656118,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594580394
    },
    {
        "content": "<p>Here is the point I want to make here, for whatever it's worth. This will be a somewhat longer message, so beware!</p>\n<p>Lean + mathlib are interesting from many perspectives. Not the least of them is the fact that they offer a great educational tool. I have read students' arguments about how much Lean proofs help them focus, thus diminishing the effects of ADHD. And we all know the impact the NNG had. If this is worth pursuing then, it is probably a good idea to keep the API as close as possible to standard terminology. It is only with mathlib's <code>monotone</code> that I found (so far) this is not the case. We can't teach students monotone means something and have them come to mathlib to show them that <code>monotone</code> means something else. Well, we can, but is it desirable?<br>\nFurthermore, a great API will help many more people adopt Lean, or at the very least try it out. For example, people working in numerical methods, which is where I come from. There isn't any contribution in numerical analysis in mathlib yet, AFAIK. In numerics we usually care only about \\R and \\C for the most part, that is true. But nobody I know would ever consider <code>1/n</code> to <strong>not</strong> be monotone. I'm an engineer by training, not a mathematician; this is bad for me in this context, I totally agree that there may be lots of things for which I don't have a mathematician's perspective. But it is good for most of you, as it gives you a perspective from the other side of the fence. <br>\nIn this particular case, there are alternatives that would keep the current gains in mathlib without sacrifice for the friendliness of the interface. For example, as <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> and <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> suggest, what is currently <code>monotone</code> in mathlib should rather be <code>order_preserving</code>. Maybe <code>monotone</code> could then be changed to reflect the common meaning. Also, we should ideally have <code>tendsto_of_monotone</code> taking care of all monotone sequences (unless I'm wrong, it currently can only handle non-decreasing). Or have some alternative, like <code>tendsto_of_non_increasing</code> and <code>tendsto_of_non_decreasing</code>.<br>\nTo wrap up, this is not about pointing fingers and/or blaming past decisions. It's about possibly changing for the better. Again, I may not have the best perspective, so this is rather something to be considered by long-time members of the community. If any change is deemed worth pursuing, I hope it can be largely done through software.</p>",
        "id": 203656389,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594580752
    },
    {
        "content": "<p>I still don't think this \"increasing or decreasing\" meaning of monotone is really \"standard\", or better, it is standard in some fields, but not in others.</p>",
        "id": 203656703,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594581323
    },
    {
        "content": "<p>I would suggest the following changes:</p>\n<ul>\n<li>rename <code>monotone</code> to <code>order_preserving</code></li>\n<li>add <code>monotonic</code> (not <code>monotone</code>) with the increasing-or-decreasing definition</li>\n</ul>",
        "id": 203656752,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594581373
    },
    {
        "content": "<p>What's <code>tendsto_of_monotone</code>?</p>",
        "id": 203656769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594581454
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/ordered.html#tendsto_of_monotone\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/ordered.html#tendsto_of_monotone</a></p>",
        "id": 203656835,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594581584
    },
    {
        "content": "<p>Thanks, too new for my local mathlib.</p>",
        "id": 203656883,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594581627
    },
    {
        "content": "<p>The issue I'm having is I can't think of another good name for \"order preserving or reversing\", but there are other good names for the strict version, like order_hom or isotone/isotonic. Having monotonic and monotone be different sounds very confusing to me.</p>",
        "id": 203656950,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594581769
    },
    {
        "content": "<p>I'm suggesting having nothing named <code>monotone</code>.</p>",
        "id": 203656956,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594581790
    },
    {
        "content": "<p>Oh my bad I misread, I agree with you then!</p>",
        "id": 203656960,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594581814
    },
    {
        "content": "<p>This is an example of why I'm a little bit skeptical about the utility of the increasing-or-decreasing notion for formalization--the statement of <code>tendsto_of_monotone</code> is false with that version; you can add \"converges to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span></span></span></span>\" as another option but then the statement is a bit weaker if you know the sequence is order-preserving.</p>",
        "id": 203657004,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594581854
    },
    {
        "content": "<p>My sense is that in practice you don't just know that the sequence is increasing-or-decreasing, you know which one it is.</p>",
        "id": 203657016,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594581912
    },
    {
        "content": "<p>And sometimes it matters which one it is, while other times it doesn't</p>",
        "id": 203657076,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594581990
    },
    {
        "content": "<p>Or you want to use the fact that a monotone bounded sequence converges. Well, really you want to use the fact that a monotone increasing sequence that's bounded above converges, otherwise you have to prove an unnecessary side condition (bounded below).</p>",
        "id": 203657148,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594582095
    },
    {
        "content": "<p>That's why my reaction to your original example was that you really want to prove the sequence is monotone decreasing</p>",
        "id": 203657156,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594582115
    },
    {
        "content": "<p>What about some results like strict monotonic implies has an inverse, or non-zero first derivative implies strict monotonic for functions on subsets  of reals.</p>",
        "id": 203657162,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594582134
    },
    {
        "content": "<p>Sure, it sometimes happens this way too</p>",
        "id": 203657169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594582152
    },
    {
        "content": "<p>I do agree also though that if you can prove somethings derivative is nonvanishing you can probably prove whether or not it is positive or negative.</p>",
        "id": 203657181,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594582197
    },
    {
        "content": "<p>I just think that, on balance, the \"monotone increasing\" notion is far more useful (already hundreds of uses of <code>monotone</code> in mathlib) than the \"increasing or decreasing\" notion, so it should not be <em>too</em> surprising that <code>monotone</code> currently means the former</p>",
        "id": 203657235,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594582246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/203657156\">said</a>:</p>\n<blockquote>\n<p>That's why my reaction to your original example was that you really want to prove the sequence is monotone decreasing</p>\n</blockquote>\n<p>Part of the problem is that I don't think there's anything for monotone decreasing sequences in mathlib. It's as if monotone decreasing sequences don't exist.</p>",
        "id": 203657250,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594582295
    },
    {
        "content": "<p>Sort of like how <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊂</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\subset B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> almost surely means \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> is a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>\" rather than \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> is a strict subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>\" (even though Lean thinks it means the second one) simply because the former notion is far more frequent than the latter.</p>",
        "id": 203657294,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594582337
    },
    {
        "content": "<p>So we must have some mechanisms for monotone decreasing sequences also.</p>",
        "id": 203657304,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594582414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"259857\">Dan Stanescu</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/203657304\">said</a>:</p>\n<blockquote>\n<p>So we must have some mechanisms for monotone decreasing sequences also.</p>\n</blockquote>\n<p>This is completely independent from the terminology question. Of course we should also prove lemmas for decreasing sequences.</p>",
        "id": 203658307,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594584015
    },
    {
        "content": "<p>Side note about your long message: as you know I'm using Lean for very elementary teaching, but the <code>monotone</code> thing is irrelevant here because  I redefine everything (there is no way I can use our filter based topology library with my first year undergrads.</p>",
        "id": 203658354,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594584110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/203656752\">said</a>:</p>\n<blockquote>\n<p>I would suggest the following changes:</p>\n<ul>\n<li>rename <code>monotone</code> to <code>order_preserving</code></li>\n<li>add <code>monotonic</code> (not <code>monotone</code>) with the increasing-or-decreasing definition</li>\n</ul>\n</blockquote>\n<p>So I came back to this and I'm concerned about the practicality of the change I proposed above. Here's a small sample of the 699 lines in mathlib matching <code>monotone</code>, just the lines from a single file <code>topology.uniform_space.basic</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">theorem</span> <span class=\"n\">monotone_comp_rel</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)}</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">○</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>    <span class=\"n\">apply</span> <span class=\"n\">monotone_comp_rel</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">monotone_id</span><span class=\"o\">,</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:(</span><span class=\"n\">mem_lift&#39;_sets</span> <span class=\"err\">$</span> <span class=\"n\">monotone_comp_rel</span> <span class=\"n\">monotone_id</span> <span class=\"n\">monotone_id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">this</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">⟨</span><span class=\"n\">t&#39;</span><span class=\"o\">,</span> <span class=\"n\">ht&#39;</span><span class=\"o\">,</span> <span class=\"n\">ht&#39;₁</span><span class=\"o\">,</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">monotone_comp_rel</span> <span class=\"n\">monotone_id</span> <span class=\"n\">monotone_id</span> <span class=\"n\">ht&#39;₂</span><span class=\"o\">)</span> <span class=\"n\">ht₂</span><span class=\"bp\">⟩</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">theorem</span> <span class=\"n\">uniformity_lift_le_swap</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">lemma</span> <span class=\"n\">uniformity_lift_le_comp</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>    <span class=\"n\">exact</span> <span class=\"n\">monotone_comp_rel</span> <span class=\"n\">monotone_id</span> <span class=\"n\">monotone_id</span><span class=\"o\">,</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">monotone_comp_rel</span> <span class=\"n\">monotone_const</span> <span class=\"err\">$</span> <span class=\"n\">monotone_comp_rel</span> <span class=\"n\">monotone_id</span> <span class=\"n\">monotone_id</span><span class=\"o\">),</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">monotone_comp_rel</span> <span class=\"n\">monotone_id</span> <span class=\"n\">monotone_const</span><span class=\"o\">),</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>      <span class=\"n\">monotone_principal</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">monotone_comp_rel</span> <span class=\"n\">monotone_const</span> <span class=\"n\">monotone_id</span><span class=\"o\">)</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">monotone_comp_rel</span> <span class=\"n\">monotone_const</span> <span class=\"n\">monotone_id</span><span class=\"o\">)</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">monotone_comp_rel</span> <span class=\"n\">monotone_id</span> <span class=\"n\">monotone_const</span><span class=\"o\">)</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">lemma</span> <span class=\"n\">lift_nhds_left</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">lift_assoc</span> <span class=\"err\">$</span> <span class=\"n\">monotone_principal</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"err\">$</span> <span class=\"n\">monotone_preimage</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">monotone_preimage</span> <span class=\"o\">)</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">lemma</span> <span class=\"n\">lift_nhds_right</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>    <span class=\"n\">map_lift_eq2</span> <span class=\"err\">$</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">monotone_preimage</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>  <span class=\"n\">exact</span> <span class=\"n\">monotone_principal</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">monotone_prod</span> <span class=\"n\">monotone_const</span> <span class=\"n\">monotone_id</span><span class=\"o\">),</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">monotone_lift&#39;</span> <span class=\"n\">monotone_const</span> <span class=\"err\">$</span> <span class=\"n\">monotone_lam</span> <span class=\"err\">$</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>    <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">monotone_prod</span> <span class=\"n\">monotone_id</span> <span class=\"n\">monotone_const</span><span class=\"o\">)</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">monotone_prod</span> <span class=\"n\">monotone_const</span> <span class=\"n\">monotone_preimage</span> <span class=\"o\">},</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">monotone_prod</span> <span class=\"n\">monotone_preimage</span> <span class=\"n\">monotone_const</span> <span class=\"o\">}</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>    <span class=\"n\">exact</span> <span class=\"n\">monotone_prod</span> <span class=\"n\">monotone_preimage</span> <span class=\"n\">monotone_preimage</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>    <span class=\"n\">exact</span> <span class=\"n\">monotone_prod</span> <span class=\"n\">monotone_preimage</span> <span class=\"n\">monotone_preimage</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>    <span class=\"n\">exact</span> <span class=\"n\">monotone_inter</span> <span class=\"o\">(</span><span class=\"n\">monotone_prod</span> <span class=\"n\">monotone_preimage</span> <span class=\"n\">monotone_preimage</span><span class=\"o\">)</span> <span class=\"n\">monotone_const</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>      <span class=\"n\">monotone_comp_rel</span> <span class=\"n\">monotone_id</span> <span class=\"err\">$</span> <span class=\"n\">monotone_comp_rel</span> <span class=\"n\">monotone_id</span> <span class=\"n\">monotone_id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">comp_le_uniformity3</span> <span class=\"n\">hd</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>    <span class=\"n\">exact</span> <span class=\"n\">monotone_comp_rel</span> <span class=\"n\">monotone_id</span> <span class=\"n\">monotone_id</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>      <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">monotone_comp_rel</span> <span class=\"n\">monotone_id</span> <span class=\"n\">monotone_id</span> <span class=\"o\">}</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>    <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">m&#39;</span><span class=\"o\">,</span> <span class=\"n\">hm&#39;</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">monotone_comp_rel</span> <span class=\"n\">monotone_id</span> <span class=\"n\">monotone_const</span> <span class=\"n\">mm&#39;</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>As you can see, <code>monotone</code> appears an average of many times per line. Now <code>order_preserving</code> is quite a few characters longer than <code>monotone</code> and I don't really want to reflow a bunch of proofs here and throughout the rest of mathlib.</p>",
        "id": 208395100,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598648872
    },
    {
        "content": "<p>What about shortening it? <code>order_pre</code>? <code>ord_pre</code>?</p>",
        "id": 208395236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598648953
    },
    {
        "content": "<p>I was going to suggest, of all things, <code>increasing</code> as a possibility</p>",
        "id": 208395348,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598649005
    },
    {
        "content": "<p>If we're going for cryptic, <code>mono</code> is another possibility. But it could be expanded to other things.</p>",
        "id": 208395374,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598649025
    },
    {
        "content": "<p>I thought <code>increasing</code> meant something else in English. I would certainly vote for <code>increasing</code> from a French speaking perspective.</p>",
        "id": 208395416,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598649068
    },
    {
        "content": "<p>In any case it's great to see you have courage for such an endeavor in addition to the great <code>nat.pow</code> quest!</p>",
        "id": 208395532,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598649144
    },
    {
        "content": "<p>I'm slightly embarrassed to admit I'm currently interested in formalizing a theorem whose English formulation uses the word \"monotone\" with the \"increasing or decreasing\" meaning.</p>",
        "id": 208395574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598649189
    },
    {
        "content": "<p>Another option, that nobody will have heard of, is <a href=\"https://en.wikipedia.org/wiki/Monotonic_function#Monotonicity_in_order_theory\">isotone</a></p>",
        "id": 208395719,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598649287
    },
    {
        "content": "<p>I think the situation with \"increasing\" in English is that it is ambiguous</p>",
        "id": 208395785,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598649310
    },
    {
        "content": "<p>but, it wouldn't be the only such word for which we pick a meaning in mathlib</p>",
        "id": 208395872,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598649337
    },
    {
        "content": "<p>Anyways, I'm in no great hurry here so I'll just say my current preference is for <code>increasing</code> but give people a few days to chime in with opinions/suggestions.</p>",
        "id": 208396460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598649744
    },
    {
        "content": "<p><code>ord_hom</code> seems abstract but unambiguous</p>",
        "id": 208397477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598650462
    },
    {
        "content": "<p>I would suggest reserving <code>mono</code> (or <code>le_of_le</code>) for the idiom <code>x &lt;= y -&gt; f x &lt;= f y</code> without any abbreviation</p>",
        "id": 208397590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598650552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/208396460\">said</a>:</p>\n<blockquote>\n<p>Anyways, I'm in no great hurry here so I'll just say my current preference is for <code>increasing</code> but give people a few days to chime in with opinions/suggestions.</p>\n</blockquote>\n<p>Probably the only question is whether the ambiguity in <code>increasing</code> versus <code>non_decreasing</code> or<code>order_preserving</code>, say, may lead again to reconsideration later on - just as the choice of <code>monotone</code> turned out to do. Either way we chose though, restructuring headache (which I can't evaluate for difficulty) aside, it will be much more easily understood across the board.</p>",
        "id": 208398874,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598651551
    },
    {
        "content": "<p>\"nondecreasing\" isn't really appropriate because the order may be partial--probably the most common choice of order by far is the subset relation (or something closely related). But we also want to choose a name that makes sense for things like <code>nat -&gt; real</code> or <code>real -&gt; real</code>. That's part of what makes choosing a good name difficult.</p>",
        "id": 208399341,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598651960
    },
    {
        "content": "<p>Can we maybe compromise on \"monotonic means increasing or decreasing\" instead? For example calling this <code>inc_dec</code> or something</p>",
        "id": 208399888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598652408
    },
    {
        "content": "<p>that seems more sensible than changing a definition that is already very useful and used widely in mathlib</p>",
        "id": 208399920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598652437
    },
    {
        "content": "<p>Yes, that might be the better option</p>",
        "id": 208401361,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598653655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20monotone.20definition/near/208397477\">said</a>:</p>\n<blockquote>\n<p><code>ord_hom</code> seems abstract but unambiguous</p>\n</blockquote>\n<p>sort of ambiguous, you could still have <code>ord_hom</code> be a <code>rel_hom</code> for <code>&lt;=</code> or <code>&lt;</code>. One of those is <code>monotone</code>, the other is <code>strict_mono</code></p>",
        "id": 208407611,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598660590
    },
    {
        "content": "<p>I don't think it matters, it will either be obvious from context or the statement, or it can be disambiguated with a <code>strict</code></p>",
        "id": 208407832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598660915
    }
]