[
    {
        "content": "<p>Hey, I'm playing/trying to work out some code allowing to defining a path metric given enough structure on a set, and have trouble, as usual, making sense of parameters/variables.<br>\nWhy is it that in <code>edist_symm_le</code> below, lean complains of an unknown identifier when I try to uncomment the <code>sorry</code>ed line?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ennreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.emetric_space</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">emetric</span> <span class=\"n\">ennreal</span>\n\n\n\n\n<span class=\"kn\">section</span> <span class=\"n\">Path_Metric</span>\n\n<span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">Lrefl</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">infi</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">L</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"n\">Psymm</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">Lsymm</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">Psymm</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">L</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">Ptran</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">Ltran</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">Ptran</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">L</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">edist</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span> <span class=\"n\">infi</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">L</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">edist_refl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Lrefl</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">edist_symm_le</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">edist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">infi_mono'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">L</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">L</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span><span class=\"c1\">--exact (@Lsymm a b p)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">edist_symm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">edist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_le.le.antisymm</span> <span class=\"o\">(</span><span class=\"n\">edist_symm_le</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">edist_symm_le</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">edist_triangle</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">edist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">edist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">edist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">pq</span> <span class=\"o\">:=</span> <span class=\"n\">Ptran</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"n\">pq</span> <span class=\"bp\">≤</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">edist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">infi_le_of_le</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Path_Metric</span>\n</code></pre></div>",
        "id": 290356926,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1658398283
    },
    {
        "content": "<p>Generally speaking, thinkg work better if you don't use <code>parameter</code>s</p>",
        "id": 290361170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658401650
    },
    {
        "content": "<p>Although the reason <code>exact (@Lsymm a b p)</code> fails is because lean doesn't know you were intending to use <code>Lsymm</code> in your proof, so doesn't make it available to you</p>",
        "id": 290361257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658401705
    },
    {
        "content": "<p>If you add <code>include Lsymm</code> before that lemma (and <code>omit Lsymm</code> after) then that should be resolved</p>",
        "id": 290361277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658401735
    },
    {
        "content": "<p>It works for <code>Lrefl a</code> because lean will look inside term-mode proofs to see which variables/parameters you intended to use; but it can't look inside tactic-mode ones</p>",
        "id": 290361309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658401775
    },
    {
        "content": "<p>ah, yeah, I remember readding about this, thanks!</p>",
        "id": 290362002,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1658402258
    },
    {
        "content": "<p>How would you correct the code to not use parameters, then, if I may ask?</p>",
        "id": 290362025,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1658402281
    },
    {
        "content": "<p>I'm thinking such generic code would be useful to generalize constructions such as the path metric on graphs, or the length metric on metric spaces. Would it be worth pursuing?</p>",
        "id": 290362452,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1658402563
    },
    {
        "content": "<p>If you replace <code>parameters</code> with <code>variables</code>, you can then supply all of alpha, P L Lrefl, Psymm, ... each time.<br>\nThis is a bit unwieldy, so you might be best off packing all these things into a structure, which is much easier to pass around</p>",
        "id": 290364334,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1658403671
    }
]