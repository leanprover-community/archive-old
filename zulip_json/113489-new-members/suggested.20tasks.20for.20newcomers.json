[
    {
        "content": "<p>Hello! I was wondering if the mathlib project maintains a list of things for curious and interested newcomers (like, potentially, me) to work on? I see the <a href=\"https://leanprover-community.github.io/100-missing.html\">list of missing proofs from the list of 100 theorems</a>, but I am not sure if this is a suitable contributions-welcome list.</p>",
        "id": 267477853,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1641838417
    },
    {
        "content": "<p>Hi! The 100 theorems list probably isn't the best place to start (many of the easy / fun ones are already done, either merged or in some open PR somewhere).<br>\nInstead; we have a few issues tagged as good-first-projects <a href=\"https://github.com/leanprover-community/mathlib/issues?q=is%3Aopen+is%3Aissue+label%3Agood-first-project\">https://github.com/leanprover-community/mathlib/issues?q=is%3Aopen+is%3Aissue+label%3Agood-first-project</a>, and a list of problems from the undergraduate topics list that are \"trivial\" <a href=\"https://github.com/leanprover-community/mathlib/wiki/Undergrad-TODO-trivial-targets\">https://github.com/leanprover-community/mathlib/wiki/Undergrad-TODO-trivial-targets</a> or \"low-hanging-fruit\" <a href=\"https://github.com/leanprover-community/mathlib/wiki/Undergrad-low-hanging-fruits\">https://github.com/leanprover-community/mathlib/wiki/Undergrad-low-hanging-fruits</a>.<br>\nSo I'd say check all these lists out and see what you think might suit you, and feel free to discuss your plans/ideas here of course!</p>",
        "id": 267478431,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641838662
    },
    {
        "content": "<p>You might also come across some lines marked with <code>TODO</code> in mathlib code base. Some of them may represent whole new milestones but some of them might be small goals</p>",
        "id": 267478876,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641838887
    },
    {
        "content": "<p>Look for <code>## TODO</code> in VScode and you'll find lots.</p>",
        "id": 267479600,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641839238
    },
    {
        "content": "<p>Or maybe I can port some of the proofs about Free Groups that I did in Isabelle a long time ago (e.g. “Free Groups are isomorphic iff their set of generators are isomorphic” )<br>\nAnyways, first I have to get into lean etc., before I make too big a promise here ;-)</p>",
        "id": 267480767,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1641839760
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_abelian_group\">docs#free_abelian_group</a>, done by <span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> a while back.</p>",
        "id": 267483205,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641840941
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_group\">docs#free_group</a> is also there</p>",
        "id": 267484489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1641841478
    },
    {
        "content": "<p>Also even <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup_is_free_of_is_free\">docs#subgroup_is_free_of_is_free</a>, but I don't think any further development</p>",
        "id": 267487526,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641842788
    },
    {
        "content": "<p>We should have <del>docs#free_group.congr</del> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_group.free_group_congr\">docs#free_group.free_group_congr</a>` or something...</p>",
        "id": 267490087,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641844089
    },
    {
        "content": "<p>Although I don't know if the converse is there.</p>",
        "id": 267490202,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641844158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> It's also worthwhile to note that we have a class characterizing free groups in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_free_group\">docs#is_free_group</a> which is more general than using just the <code>free_group</code> itself.</p>",
        "id": 267491599,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641844811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> had the strong version of Nielsen-Schreier (giving the rank in terms of the index) at <a href=\"https://github.com/dwarn/nielsen-schreier-lean\">https://github.com/dwarn/nielsen-schreier-lean</a> which I think would give this result, but I don't know the status of that code these days</p>",
        "id": 267492755,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641845278
    },
    {
        "content": "<p>As far as I know the Nielsen-Schreier index formula is orthogonal to the fact that rank is well-defined. (What I showed was that every subgroup has a free generating set whose cardinality satisfies the index formula, but a priori another generating set can have a different cardinality.) Probably the easiest way to prove the latter result would be via the abelianisation. Probably mathlib knows that the abelianisation of a free group is a free abelian group, and that isomorphic groups have isomorphic abelianisations?</p>",
        "id": 267496753,
        "sender_full_name": "David Wärn",
        "timestamp": 1641847366
    },
    {
        "content": "<p>At some point the free abelian group was <em>defined</em> as the abelianization of the free group.... I'm not sure if that's still the case.</p>",
        "id": 267497062,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641847532
    },
    {
        "content": "<p>It is :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The free abelian group on a type. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">free_abelian_group</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">additive</span> <span class=\"bp\">$</span> <span class=\"n\">abelianization</span> <span class=\"bp\">$</span> <span class=\"n\">free_group</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 267497112,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641847561
    },
    {
        "content": "<p>Btw the file containing <code>free_abelian_group</code> is one of the last ones to import deprecated stuff, if someone feels like cleaning that up!</p>",
        "id": 267497289,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641847645
    },
    {
        "content": "<p>Ah, right. Back then when I tried to prove this in Isabelle I first shied away because all the proofs I had seen use the abelianization, which wasn't available in Isabelle. Then  someone pointed me to a proof that doesn’t  use that (it goes via Hom(F(X),C2)), and I used that. But since abelianization is available in mathlib, likely an simpler proof is possible.</p>",
        "id": 267497291,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1641847646
    },
    {
        "content": "<p>The reason for this import has to do with considering <code>free_abelian_group</code> as a monad and Kenny going wild with monadic programming.</p>",
        "id": 267497406,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641847700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> what's deprecated in that file?</p>",
        "id": 267497462,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641847743
    },
    {
        "content": "<p>Oh I see it's just all the ascii art..</p>",
        "id": 267497512,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641847772
    },
    {
        "content": "<p>Regarding an earlier message, an easy task would be to change the type of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_group.free_group_congr\">docs#free_group.free_group_congr</a> to <code>(α ≃ β) ≃ (free_group α ≃* free_group β)</code></p>",
        "id": 267498571,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641848305
    },
    {
        "content": "<p>In that it would be good practice for leaning how to use lean to glue together existing definitions and proofs</p>",
        "id": 267498647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641848338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/suggested.20tasks.20for.20newcomers/near/267498571\">said</a>:</p>\n<blockquote>\n<p>Regarding an earlier message, an easy task would be to change the type of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_group.free_group_congr\">docs#free_group.free_group_congr</a> to <code>(α ≃ β) ≃ (free_group α ≃* free_group β)</code></p>\n</blockquote>\n<p>This is actually false! If <code>α</code> and <code>β</code> are both <code>unit</code>, then <code>α ≃ β</code> has one element while <code>free_group α ≃* free_group β</code> has two (one for each automorphism of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>). All you get is a 'logical equivalence' (by which I mean the map <code>(free_group α ≃* free_group β) → (α ≃ β)</code> is ill-behaved)</p>",
        "id": 267500390,
        "sender_full_name": "David Wärn",
        "timestamp": 1641849067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/suggested.20tasks.20for.20newcomers/near/267497289\">said</a>:</p>\n<blockquote>\n<p>Btw the file containing <code>free_abelian_group</code> is one of the last ones to import deprecated stuff, if someone feels like cleaning that up!</p>\n</blockquote>\n<p>I think it would be a good idea to <code>git mv src/deprecated src/unbundled</code>.</p>",
        "id": 267544257,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641884847
    },
    {
        "content": "<p>It would be a better descriptive for sure.</p>",
        "id": 267544345,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641884907
    },
    {
        "content": "<p>However the plan is still to get rid of it, right?</p>",
        "id": 267545142,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641885697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> No, I don't see why we should get rid of it.</p>",
        "id": 267546314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641886740
    },
    {
        "content": "<p>Sometimes they might just be genuinely useful. They just shouldn't be the default API/entry point.</p>",
        "id": 267546331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641886767
    },
    {
        "content": "<p>When I was pushing the deprecated imports towards the leaves there were times when the new code was clunkier than the old</p>",
        "id": 267548526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641888541
    },
    {
        "content": "<p>Regarding the original question, I think it's time we had a new list of interesting things to do</p>",
        "id": 267548558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641888582
    },
    {
        "content": "<p>I think there are problems with all the current lists. I think that the way to grow the community is to start advertising a new list of mathematically interesting problems which are now accessible and which would be good first issues for people with a mathematical background but little Lean experience -- a project to get their teeth into. I have an in progress list here <a href=\"https://github.com/kbuzzard/xena/blob/master/student_projects.md\">https://github.com/kbuzzard/xena/blob/master/student_projects.md</a> but right now I have to worry about teaching and it's too number theory heavy</p>",
        "id": 267548938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641888850
    },
    {
        "content": "<p>I have some ideas myself. For example, <a href=\"https://github.com/leanprover-community/mathlib/pull/11308\">#11308</a> will unlock Sperner theory with lots of cool untapped stuff.</p>",
        "id": 267549002,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641888902
    },
    {
        "content": "<p>I am unclear about whether it's a good idea to just spam the mathlib issues page and mark a bunch of issues as \"good for the mathematician wanting to learn Lean\"</p>",
        "id": 267549156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641889002
    },
    {
        "content": "<p>There are two questions:</p>\n<ul>\n<li>What we want to advertise</li>\n<li>Where to advertise it</li>\n</ul>",
        "id": 267549221,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641889041
    },
    {
        "content": "<p>I want to start pushing the idea of Lean to PhD students. Not \"become my student and spend 4 years formalising\" but \"do a PhD with someone else and do some formalising on the side\". For this I think we need a list of fun accessible projects at MSc level</p>",
        "id": 267549712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641889359
    },
    {
        "content": "<p>I think it's an easy sell because lean is in the collective consciousness of young mathematicians right now</p>",
        "id": 267549758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641889398
    },
    {
        "content": "<p>Also, I don’t think it’s an easy task: The reverse direction <code>(free_group α ≃* free_group β) → (α ≃ β)</code> I think requires a bit of proving?  But yes, that’s the task I set for myself :-)</p>",
        "id": 267579003,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1641907049
    },
    {
        "content": "<p>if they're iso then the abelianisations mod 2 are iso and we know that isomorphic vector spaces have bases of the same cardinality but what perhaps won't be there right now is that the generating set is a basis</p>",
        "id": 267579233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641907175
    }
]