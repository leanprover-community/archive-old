[
    {
        "content": "<p>I am a bit unsure about the best way to phrase a lemma about <code>nat.find</code>.  Consider something like the following. Which formulation of the lemma about <code>nat.find</code> is best?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">green_are_followed_by_red</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">is_green</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n.</span> <span class=\"n\">is_red</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"bp\">…</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">first_red_after_green_is_joe1</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">is_green</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n.</span> <span class=\"n\">is_red</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"n\">nat.find</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">joe</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">first_red_after_green_is_joe2</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">is_green</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n.</span> <span class=\"n\">is_red</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">green_are_followed_by_red</span> <span class=\"n\">n</span> <span class=\"n\">hG</span> <span class=\"k\">in</span>\n  <span class=\"n\">nat.find</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">joe</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">first_red_after_green_is_joe3</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">is_green</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.find</span> <span class=\"o\">(</span><span class=\"n\">green_are_followed_by_red</span> <span class=\"n\">n</span> <span class=\"n\">hG</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">joe</span>\n</code></pre></div>\n<p>The first is most readable, but annoying to use – you have to provide a proof for <code>h</code> when you want to use the lemma.<br>\nThe last is compact, but it somehow look silly to me to give a _specific_ proof term for that existential here (and indeed later lean prints this as <code>nat.find _ = joe</code>, because the proof term doesn’t matter…).<br>\nThe middle one might be a compromise.</p>\n<p>Or maybe I am approaching this the wrong way?</p>\n<p>(If you want a more real example; this comes up when <a href=\"https://github.com/leanprover-community/mathlib/pull/11540\">proving that various possible nilpotency class definitions are equivalent</a>.)</p>",
        "id": 268463671,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642544097
    }
]