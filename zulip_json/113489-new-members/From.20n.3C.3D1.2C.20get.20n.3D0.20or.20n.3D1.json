[
    {
        "content": "<p>I'm sure I've seen before that there's a tactic to turn a hypothesis <code>n &lt;= 1</code> into <code>n = 1 \\/ n = 0</code>, but I can't find it :( I could prove it by induction, but I think I remember someone mentioning a more general tactic that splits inequalities into individual cases. Can anyone remember what that was?</p>",
        "id": 197179119,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589218477
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#interval_cases\">https://leanprover-community.github.io/mathlib_docs/tactics.html#interval_cases</a></p>",
        "id": 197179324,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1589218568
    },
    {
        "content": "<p>For small examples like this, <code>cases</code> is also sometimes useful:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>It's also mentioned and used briefly in the last example here, <a href=\"https://avigad.github.io/mathematics_in_lean/the_natural_numbers.html\">https://avigad.github.io/mathematics_in_lean/the_natural_numbers.html</a>. Some of the tricks in Section 3.2 may also be helpful.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 197180393,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1589219060
    },
    {
        "content": "<p>Back in the old days, before that tactic, I would just do cases on n and then cases on everything that showed up until I was down to the two cases. For n&lt;=1 this would work fine but for any larger ranges the tactic is definitely the way to proceed. Actually I bet this can be done with <code>rcases</code> in some cool way.</p>",
        "id": 197180394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589219060
    },
    {
        "content": "<p>Hah Jeremy beat me to it :-)</p>",
        "id": 197180441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589219086
    },
    {
        "content": "<p>The new tutorial doesn't yet mention the <code>interval_cases</code> tactic, but I'll add that.</p>",
        "id": 197180537,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1589219131
    },
    {
        "content": "<p>You could use <code>omega </code> as well.</p>",
        "id": 197182689,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589220158
    }
]