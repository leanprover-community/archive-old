[
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Copyright (c) 2020 Alena Gusakov. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Alena Gusakov, Arthur Paulino, Kyle Miller</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.subgraph</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.degree_sum</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Matchings</span>\n\n<span class=\"cm\">A *matching* for a simple graph is a set of disjoint pairs of adjacent vertices, and the set of all</span>\n<span class=\"cm\">the vertices in a matching is called its *support* (and sometimes the vertices in the support are</span>\n<span class=\"cm\">said to be *saturated* by the matching). A *perfect matching* is a matching whose support contains</span>\n<span class=\"cm\">every vertex of the graph.</span>\n\n<span class=\"cm\">In this module, we represent a matching as a subgraph whose vertices are each incident to at most</span>\n<span class=\"cm\">one edge, and the edges of the subgraph represent the paired vertices.</span>\n\n<span class=\"cm\">## Main definitions</span>\n\n<span class=\"cm\">* `simple_graph.subgraph.is_matching`: `M.is_matching` means that `M` is a matching of its</span>\n<span class=\"cm\">  underlying graph.</span>\n<span class=\"cm\">  denoted `M.is_matching`.</span>\n\n<span class=\"cm\">* `simple_graph.subgraph.is_perfect_matching` defines when a subgraph `M` of a simple graph is a</span>\n<span class=\"cm\">  perfect matching, denoted `M.is_perfect_matching`.</span>\n\n<span class=\"cm\">## TODO</span>\n\n<span class=\"cm\">* Lemma stating that the existence of a perfect matching on `G` implies that</span>\n<span class=\"cm\">  the cardinality of `V` is even (assuming it's finite)</span>\n\n<span class=\"cm\">* Tutte's Theorem</span>\n\n<span class=\"cm\">* Hall's Marriage Theorem (see combinatorics.hall)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">simple_graph</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">subgraph</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">subgraph</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">The subgraph `M` of `G` is a matching if every vertex of `M` is incident to exactly one edge in `M`.</span>\n<span class=\"sd\">We say that the vertices in `M.support` are *matched* or *saturated*.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_matching</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">v</span><span class=\"o\">⦄,</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">M.verts</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">The subgraph `M` of `G` is a perfect matching on `G` if it's a matching and every vertex `G` is</span>\n<span class=\"sd\">matched.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_perfect_matching</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">M.is_matching</span> <span class=\"bp\">∧</span> <span class=\"n\">M.is_spanning</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_matching.support_eq_verts</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">subgraph</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M.is_matching</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M.support</span> <span class=\"bp\">=</span> <span class=\"n\">M.verts</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">M.support_subset_verts.antisymm</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hvw</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hvw</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_matching_iff_forall_degree</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">subgraph</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">M.neighbor_set</span> <span class=\"n\">v</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">M.is_matching</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">M.verts</span> <span class=\"bp\">→</span> <span class=\"n\">M.degree</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">degree_eq_one_iff_unique_adj</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_perfect_matching_iff</span> <span class=\"o\">:</span> <span class=\"n\">M.is_perfect_matching</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">hm</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hm</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">M.edge_vert</span> <span class=\"n\">hw</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">even_card_vertices_of_perfect_matching</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">subgraph</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M.is_perfect_matching</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">G'</span> <span class=\"o\">:=</span> <span class=\"n\">M.coe</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">G'.adj</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">M.verts</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">G'.edge_finset.card</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sum_degrees_eq_twice_card_edges</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">M.verts</span><span class=\"o\">),</span> <span class=\"n\">G'.degree</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">fintype.card</span><span class=\"o\">],</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  simpa failed</span>\n<span class=\"cm\">  state:</span>\n<span class=\"cm\">  V : Type u,</span>\n<span class=\"cm\">  G : simple_graph V,</span>\n<span class=\"cm\">  M : G.subgraph,</span>\n<span class=\"cm\">  _inst_1 : fintype V,</span>\n<span class=\"cm\">  _inst_2 : decidable_eq V,</span>\n<span class=\"cm\">  _inst_3 : decidable_rel G.adj,</span>\n<span class=\"cm\">  h : M.is_perfect_matching,</span>\n<span class=\"cm\">  G' : simple_graph ↥(M.verts) := M.coe,</span>\n<span class=\"cm\">  this : decidable_rel G'.adj,</span>\n<span class=\"cm\">  this : fintype ↥(M.verts),</span>\n<span class=\"cm\">  hv : ∀ (v : ↥(M.verts)), G'.degree v = 1</span>\n<span class=\"cm\">  ⊢ finset.univ.card = finset.univ.card</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subgraph</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">simple_graph</span>\n</code></pre></div>\n<p>For some reason, <code>simpa</code> is not being able to close the goal <code>finset.univ.card = finset.univ.card</code>. Has anyone seen this before?</p>",
        "id": 266202251,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640636709
    },
    {
        "content": "<p>Try convert rfl? I guess it's two different fintype instances.</p>",
        "id": 266202336,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640636777
    },
    {
        "content": "<p>Your <code>finset.univ</code>s are for different types.</p>",
        "id": 266202355,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640636804
    },
    {
        "content": "<p>One for <code>M.verts</code> and one for <code>V</code>.</p>",
        "id": 266202381,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640636831
    },
    {
        "content": "<p>Hmmm, I suspect I'm taking a wrong turn somewhere</p>",
        "id": 266202610,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640637068
    },
    {
        "content": "<p>Hi, I have this problem when I want I want to verify that Lean is working<br>\n<a href=\"/user_uploads/3121/1nMm0Bsw6mPetC1xOQ5cb3-v/tut.PNG\">tut.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/1nMm0Bsw6mPetC1xOQ5cb3-v/tut.PNG\" title=\"tut.PNG\"><img src=\"/user_uploads/3121/1nMm0Bsw6mPetC1xOQ5cb3-v/tut.PNG\"></a></div>",
        "id": 266204829,
        "sender_full_name": "Sofia Salazar",
        "timestamp": 1640639100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466560\">@Sofia Salazar</span> It would be better if you start a new topic. You can edit the topic of your message if you click the pencil icon on the top-right of your message.</p>",
        "id": 266204866,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640639146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/.60simpa.60.20not.20closing.20goal/near/266204866\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"466560\">Sofia Salazar</span> It would be better if you start a new topic. You can edit the topic of your message if you click the pencil icon on the top-right of your message.</p>\n</blockquote>\n<p>Thanks</p>",
        "id": 266205043,
        "sender_full_name": "Sofia Salazar",
        "timestamp": 1640639289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466560\">@Sofia Salazar</span> and to send the message on a newly created topic, simply type something else (the name of the new topic) on this field:<br>\n<a href=\"/user_uploads/3121/qXYK7B0L5UwOFuVxzGToM0yJ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qXYK7B0L5UwOFuVxzGToM0yJ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/qXYK7B0L5UwOFuVxzGToM0yJ/image.png\"></a></div>",
        "id": 266205857,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640640080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/.60simpa.60.20not.20closing.20goal/near/266202336\">said</a>:</p>\n<blockquote>\n<p>Try convert rfl? I guess it's two different fintype instances.</p>\n</blockquote>\n<p>aka <code>congr'</code> (but it won't help here if what Adam says is true)</p>",
        "id": 266208853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640642942
    }
]