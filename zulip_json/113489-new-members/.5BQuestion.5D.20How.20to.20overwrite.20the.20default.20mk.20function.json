[
    {
        "content": "<p>Can the default <code>&lt;structure name&gt;.mk</code> function be overriden?</p>",
        "id": 321173929,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1673619862
    },
    {
        "content": "<p>Yes, check out <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ULift#src\">src4#ULift</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ulift/src\">src#ulift</a></p>",
        "id": 321175133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673620166
    },
    {
        "content": "<p>That changes the name of <code>mk</code> to <code>up</code></p>",
        "id": 321175226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673620196
    },
    {
        "content": "<p>Which means you're free to define <code>&lt;structure name&gt;.mk</code> as whatever you want</p>",
        "id": 321175317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673620210
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> !!</p>",
        "id": 321176802,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1673620606
    },
    {
        "content": "<p>I might sound stupid but I don't know how to use it since the input type is of <code>Type s</code> but my structure is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Scanner</span> <span class=\"n\">where</span>\n  <span class=\"n\">source</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">tokens</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Token</span>\n  <span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">current</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>so doing <code>#eval Ulift Scanner</code> results in an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expression</span>\n  <span class=\"n\">ULift</span> <span class=\"n\">Scanner</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.9938</span> <span class=\"bp\">?</span><span class=\"n\">u.9939</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Lean.Eval</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.9938</span> <span class=\"bp\">?</span><span class=\"n\">u.9939</span><span class=\"o\">))</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">synthesized</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"kd\">instance</span> <span class=\"n\">instructs</span> <span class=\"n\">Lean</span> <span class=\"n\">on</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">display</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">recall</span> <span class=\"n\">that</span> <span class=\"n\">any</span> <span class=\"n\">type</span> <span class=\"n\">implementing</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">Repr</span><span class=\"bp\">`</span> <span class=\"kd\">class</span> <span class=\"n\">also</span> <span class=\"n\">implements</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Eval</span><span class=\"bp\">`</span> <span class=\"kd\">class</span>\n</code></pre></div>\n<p>Because it doesn't have a concrete type to implement Repr class.</p>\n<p>How do I use <code>ULift</code> because this is certainly not the right way?</p>",
        "id": 321210946,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1673629324
    },
    {
        "content": "<p>What Eric meant is \"look at the source of ULift to see how this can be done\".</p>",
        "id": 321211470,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673629459
    },
    {
        "content": "<p>I wasn't able to figure out so I gave up and did the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Scanner.make</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Scanner.mk</span> <span class=\"n\">src</span> <span class=\"o\">[]</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 321321867,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1673688565
    },
    {
        "content": "<p>To be more direct about it, the syntax is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Scanner</span> <span class=\"n\">where</span>\n  <span class=\"n\">mk'</span> <span class=\"o\">::</span>\n  <span class=\"n\">source</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">tokens</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Token</span>\n  <span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">current</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>",
        "id": 321322755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673689026
    },
    {
        "content": "<p>where <code>mk'</code> is whatever you want to name the constructor</p>",
        "id": 321322773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673689040
    },
    {
        "content": "<p>If the reason you want to have a custom constructor is to give default values for the arguments, you can put them in the structure definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Scanner</span> <span class=\"n\">where</span>\n  <span class=\"n\">source</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">tokens</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Token</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">current</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>",
        "id": 321322944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673689119
    },
    {
        "content": "<p>oh I get that I just wanted <code>mk</code> to be defined in a way where I only need to pass <code>source</code> field and rest are hardcoded. So in a way shadowing the <code>mk</code> used by default which requires all the fields to be defined whenever they are called</p>",
        "id": 321322963,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1673689135
    },
    {
        "content": "<p>Oh adding the default values is exactly what I wanted<br>\n<span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/.5BQuestion.5D.20How.20to.20overwrite.20the.20default.20mk.20function/near/321322944\">said</a>:</p>\n<blockquote>\n<p>If the reason you want to have a custom constructor is to give default values for the arguments, you can put them in the structure definition:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Scanner</span> <span class=\"n\">where</span>\n  <span class=\"n\">source</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">tokens</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Token</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">current</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 321323052,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1673689180
    },
    {
        "content": "<p>I will use that</p>",
        "id": 321323085,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1673689197
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 321323140,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1673689210
    }
]