[
    {
        "content": "<p>There are some trivial things like <code>(a^b)^c = a^(b*c)</code> that I want to find in the library, but how? I searched for things whose name containing <code>\"pow\"</code> or <code>\"exp\"</code> but it doesn't help much.</p>",
        "id": 183216138,
        "sender_full_name": "YH",
        "timestamp": 1576109317
    },
    {
        "content": "<p>You can use the tactic <code>library_search</code> for this sort of thing! I think this one is called <code>pow_mul</code></p>",
        "id": 183216178,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576109372
    },
    {
        "content": "<blockquote>\n<p>You can use the tactic <code>library_search</code> for this sort of thing! I think this one is called <code>pow_mul</code></p>\n</blockquote>\n<p>I am aware of <code>library_search</code> but it seems it only search for tactics that handles the whole problem?</p>\n<p>What if I want to find some rewrite <code>x</code> so that I can do <code>rw x at h</code> for a particular <code>h</code>, can I use that one?</p>",
        "id": 183216401,
        "sender_full_name": "YH",
        "timestamp": 1576109571
    },
    {
        "content": "<p>Let's say after <code>pow_mul</code> I get <code>a^(1/2 + 1/2)</code>, what do I do to make it <code>a^1</code> or <code>a</code>?</p>",
        "id": 183216617,
        "sender_full_name": "YH",
        "timestamp": 1576109836
    },
    {
        "content": "<p>you can temporarily split off the statement you're looking for into a lemma (or a have-subproof) and then use library_search</p>",
        "id": 183216803,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1576110073
    },
    {
        "content": "<p>For your specific example what you would split off could just be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span>  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">add_halves</span> <span class=\"mi\">1</span> <span class=\"c1\">-- by library_search</span>\n\n<span class=\"c1\">-- so now we can do</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">pi</span> <span class=\"err\">^</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pi</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_halves</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n<span class=\"n\">exact</span> <span class=\"n\">rpow_one</span> <span class=\"n\">pi</span><span class=\"o\">,</span> <span class=\"c1\">-- library_search again</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>but the best way if you have actual numbers is probably <code>example : pi ^ ((1:ℝ)/2 + 1/2) = pi := by norm_num</code></p>",
        "id": 183217706,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1576110989
    },
    {
        "content": "<p><code>add_halves</code>? What if I had <code>a^(1/3 + 2/3)</code>?</p>",
        "id": 183217956,
        "sender_full_name": "YH",
        "timestamp": 1576111247
    },
    {
        "content": "<p>Not actual numbers, any <code>a:ℝ</code></p>",
        "id": 183217957,
        "sender_full_name": "YH",
        "timestamp": 1576111262
    },
    {
        "content": "<p>Right, library search isn't good for that, it won't find tactics for you just lemmas. Thats why  the <code>norm_num</code> tactic may be better depending on your actual application, the trade -off is that a tactic may take (slightly) longer to do its thing than calling an explicit lemma.</p>",
        "id": 183218157,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1576111488
    },
    {
        "content": "<blockquote>\n<p><code>add_halves</code>? What if I had <code>a^(1/3 + 2/3)</code>?</p>\n</blockquote>\n<p>Oh I just realized I can't prove <code>lemma b : 1/2 + 1/2 = 1 := by sorry</code> yet... (where <code>1</code> is not of type <code>ℝ</code>)</p>",
        "id": 183218822,
        "sender_full_name": "YH",
        "timestamp": 1576112108
    },
    {
        "content": "<p>If everything has type nat (which it might do by default) then this might not even be true</p>",
        "id": 183235304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576137178
    },
    {
        "content": "<blockquote>\n<p>If everything has type nat (which it might do by default) then this might not even be true</p>\n</blockquote>\n<p>Yeah I realized this later...</p>",
        "id": 183235339,
        "sender_full_name": "YH",
        "timestamp": 1576137211
    }
]