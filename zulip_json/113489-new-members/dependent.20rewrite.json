[
    {
        "content": "<p>I found that I had to write a helper lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">comap_center_subst</span> <span class=\"o\">{</span><span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normal</span> <span class=\"n\">H₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normal</span> <span class=\"n\">H₂</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">mk'</span> <span class=\"n\">H₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">center</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H₁</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">mk'</span> <span class=\"n\">H₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">center</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H₂</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>because simply <code>rw h</code> in my main proof (where my <code>h</code> is an equality that’s non-trivial on both sides) did not work  – presumably because <code>rw</code> replaces just the first occurrence, and then the term becomes ill-typed. Is there a way to do rewrite that can change stuff that appears dependently in the goal?</p>",
        "id": 268882613,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642789406
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 268883084,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642789607
    },
    {
        "content": "<p>In what context do you hope to use this lemma? What about \"simp_rw [h]\"? The issue is the normal instance isn't simply a target of the rewrite.</p>",
        "id": 268883379,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642789729
    },
    {
        "content": "<p>I assume that <code>comap</code> is <code>subgroup.comap</code> and <code>mk'</code> is <code>quotient_group.mk'</code>?</p>",
        "id": 268883470,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642789772
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.comap\">docs#subgroup.comap</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.normal\">docs#subgroup.normal</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.center\">docs#subgroup.center</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.mk'\">docs#quotient_group.mk'</a></p>",
        "id": 268883503,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642789789
    },
    {
        "content": "<p>Cant you use <code>subgroup.ext</code> and some lemma that tells you when something is inside of <code>comap</code>, then rewrite <code>h</code> on the resulting condition?</p>",
        "id": 268884002,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642789976
    },
    {
        "content": "<p>So this is true regardless of the [normal] instances, right?</p>",
        "id": 268884007,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642789978
    },
    {
        "content": "<p>you need normality for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi mathvariant=\"normal\">/</mi><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">G/H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span> to be a group, and hence for <code>mk'</code> to be a homomorphism along which  you can comap.</p>",
        "id": 268884109,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642790029
    },
    {
        "content": "<p>Ah</p>",
        "id": 268884119,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642790038
    },
    {
        "content": "<p>I don't see what's wrong about unfreezingI in this case, you can go through extensionality in the carrier, of just force the rewrite against the cached typeclass instance.</p>",
        "id": 268884273,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642790093
    },
    {
        "content": "<p>It feels a bit hacky to me :)</p>",
        "id": 268884620,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642790236
    },
    {
        "content": "<p>Unfreezing doesn’t help, I still get <code>rewrite tactic failed, motive is not type correct</code>. I’ll try to construct a MWE.</p>",
        "id": 268884913,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642790340
    },
    {
        "content": "<p>yeah, that error is common in these situations.</p>",
        "id": 268885059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642790400
    },
    {
        "content": "<p>Maybe we could add the following lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_comap_center_quotient</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normal</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">mk'</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">center</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 268885110,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642790404
    },
    {
        "content": "<p>(With a better name, of course ;))</p>",
        "id": 268885217,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642790448
    },
    {
        "content": "<p>Sorry, I meant subst, not rw. Subst makes sure to do it everywhere</p>",
        "id": 268885553,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642790568
    },
    {
        "content": "<p>Note that we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.equiv_quotient_of_eq\">docs#quotient_group.equiv_quotient_of_eq</a> which IIRC was added to get around motive is not type correct errors</p>",
        "id": 268885611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642790592
    },
    {
        "content": "<p>If you have a hypothesis of equality, you might as well simplify everything (substitute everywhere) to simplify your goal state</p>",
        "id": 268885638,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642790601
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">subgroup</span>\n<span class=\"kn\">open</span> <span class=\"n\">quotient_group</span>\n<span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">normal</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">())]</span> <span class=\"o\">[</span><span class=\"n\">normal</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">())]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">())</span>\n  <span class=\"o\">:</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">mk'</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">()))</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">mk'</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">()))</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268885888,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642790696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> <code>subst</code> only works if it is an equality with a variable on one side? That’s what I can do inside the helper lemma, but not where I actually want to do the rewriting.</p>",
        "id": 268886037,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642790757
    },
    {
        "content": "<p>I see</p>",
        "id": 268886211,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642790819
    },
    {
        "content": "<p>I think we should at some point develop some commutator calculus in groups, so it might be worthwhile to have a lemma expressing the condition in terms of commutators.</p>",
        "id": 268887147,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642791175
    },
    {
        "content": "<p>Just for those examples, what goal does the congr tactic leave you?</p>",
        "id": 268888771,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642791838
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">11</span> <span class=\"n\">goals</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"n\">H₁H₂</span><span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"n\">H₁H₂</span><span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"n\">H₁H₂</span><span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">_inst_2</span> <span class=\"bp\">==</span> <span class=\"n\">_inst_3</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"n\">H₁H₂</span><span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"n\">H₁H₂</span><span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">_inst_2</span> <span class=\"bp\">==</span> <span class=\"n\">_inst_3</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"n\">H₁H₂</span><span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"n\">H₁H₂</span><span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"n\">H₁H₂</span><span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">_inst_2</span> <span class=\"bp\">==</span> <span class=\"n\">_inst_3</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"n\">H₁H₂</span><span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"n\">H₁H₂</span><span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"n\">H₁H₂</span><span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">H₂</span> <span class=\"o\">()</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">_inst_2</span> <span class=\"bp\">==</span> <span class=\"n\">_inst_3</span>\n</code></pre></div>",
        "id": 268888997,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642791953
    },
    {
        "content": "<p>So indeed, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>works in the MWE. <br>\nBut not in my real example.</p>",
        "id": 268889167,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642792025
    },
    {
        "content": "<p>There, I get remaining goals of type <code>_ == _</code>,  and <code>suggest</code> says I should use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"n\">cast_heq</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">normal</span> <span class=\"o\">(</span><span class=\"n\">eq.symm</span> <span class=\"n\">ih</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">upper_central_series.subgroup.normal</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n</code></pre></div>\n<p>which actually works. But is hardly better than the helper lemma :-)</p>",
        "id": 268889581,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642792242
    },
    {
        "content": "<p>Likely, some less unraveling congr' 2 or something will not go as deep. But Adam's suggestion of proving via extensionality is also always possible to avoid dependent type hell. Or use mathematical statements about isomorphisms using Kevin's definition</p>",
        "id": 268892303,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642793746
    }
]