[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">positive_nats</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">positive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">zero_singleton</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>How do I say \"you can't instantiate <code>positive_nats</code> with <code>zero_singleton</code>\"?</p>",
        "id": 207313118,
        "sender_full_name": "Iocta",
        "timestamp": 1597783076
    },
    {
        "content": "<p>What would you do with that statement?</p>",
        "id": 207313821,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597783450
    },
    {
        "content": "<p>It provides a counterexample to \"any <code>set nat</code> can be a <code>positive_nats</code>.\"</p>",
        "id": 207314551,
        "sender_full_name": "Iocta",
        "timestamp": 1597783821
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">positive_nats</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">zero_singleton</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 207314649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597783877
    },
    {
        "content": "<p>PS you should write <code>0 &lt; n</code> not <code>n &gt; 0</code>; all the lemmas use <code>&lt;</code> so it makes life easier.</p>",
        "id": 207315028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597784073
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">positive_nats</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">positive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">zero_singleton</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">positive_nats</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"n\">zero_singleton</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dunfold</span> <span class=\"n\">zero_singleton</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpos</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"mi\">0</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207315083,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597784106
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">positive_nats</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"n\">zero_singleton</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">lt_irrefl</span> <span class=\"mi\">0</span> <span class=\"err\">$</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"mi\">0</span> <span class=\"err\">$</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 207315719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597784416
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">no_positive_nats_zero_singleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">positive_nats</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"n\">zero_singleton</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">lt_irrefl</span> <span class=\"mi\">0</span> <span class=\"err\">$</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"mi\">0</span> <span class=\"err\">$</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span> <span class=\"mi\">0</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">nats</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"n\">positive_nats</span><span class=\"o\">),</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">nats</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">zero_singleton</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">pn</span> <span class=\"n\">hpn</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">no_positive_nats_zero_singleton</span> <span class=\"n\">pn</span> <span class=\"n\">hpn</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207316646,
        "sender_full_name": "Iocta",
        "timestamp": 1597784887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Why <code>X</code>is capitalized there?</p>",
        "id": 207346661,
        "sender_full_name": "Iocta",
        "timestamp": 1597787370
    },
    {
        "content": "<p>(is there a convention this choice conforms to?)</p>",
        "id": 207346699,
        "sender_full_name": "Iocta",
        "timestamp": 1597787400
    },
    {
        "content": "<p>It's a set?</p>",
        "id": 207348147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597788479
    },
    {
        "content": "<p>or at least set-ish thing</p>",
        "id": 207348194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597788487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> you made the structure so you make the conventions. We call groups G, abelian groups A, monoids M, topological spaces X, etc. But you didn't name any instances of your structure so I made a convention for you, that's all. If a computer scientist had got to it first they would probably have called it \\alpha, which is their version of X.</p>",
        "id": 207348663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597788934
    },
    {
        "content": "<p>Real computer scientists are laughing at this</p>",
        "id": 207348743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597788989
    },
    {
        "content": "<p>Actually I think the \\alpha naming convention goes back to polymorphic type systems like <a href=\"https://en.wikipedia.org/wiki/System_F\">system F</a></p>",
        "id": 207348794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597789047
    },
    {
        "content": "<p>so more type theory than CS</p>",
        "id": 207348803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597789055
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">positive_nats</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">positive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">zero_singleton</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">positive_nats</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"n\">zero_singleton</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 207374596,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597818943
    }
]