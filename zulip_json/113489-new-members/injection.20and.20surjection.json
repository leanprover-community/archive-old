[
    {
        "content": "<p>Is there a subtype version for <a href=\"https://leanprover-community.github.io/mathlib_docs/data/set/function.html#set.inj_on\">https://leanprover-community.github.io/mathlib_docs/data/set/function.html#set.inj_on</a>?</p>",
        "id": 245533766,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625899650
    },
    {
        "content": "<p>Can you elaborate on what you mean by that?</p>",
        "id": 245534174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625900261
    },
    {
        "content": "<p>Perhaps give an example of the sort of statement you're looking for?</p>",
        "id": 245534218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625900299
    },
    {
        "content": "<p>Yeah. <code> set.inj_on</code> is <code>def set.inj_on {α : Type u} {β : Type v} (f : α → β) (s : set α) : Prop</code> meaning <code>f is injective on s if the restriction of f to s is injective</code>.  Something like <code>subtype.inj_on</code>is jsut changing<code> (s : set α)</code> to  s being a subtype of  α.</p>",
        "id": 245534521,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625900769
    },
    {
        "content": "<p>Can you write out what you want instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.inj_on/src\">src#set.inj_on</a>?</p>",
        "id": 245535253,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625901765
    },
    {
        "content": "<p>Which is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inj_on</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">x₁</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">x₂</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span>\n</code></pre></div>",
        "id": 245535274,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625901823
    },
    {
        "content": "<p>You might be after <code>function.injective (f ∘ (coe : subtype p → α))</code></p>",
        "id": 245535322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625901893
    },
    {
        "content": "<p>I was not thinking a precise def as I am looking for if there is anything already. The last one you gave seems to be a suggestion for the purpose I described.</p>",
        "id": 245535597,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625902264
    },
    {
        "content": "<p>It usually helps to give a precise def even if you're hoping it already exists</p>",
        "id": 245535784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625902544
    },
    {
        "content": "<p>For one, that means you can use <code>library_search</code> to look for the def</p>",
        "id": 245535837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625902574
    },
    {
        "content": "<p>Basically Eric is asking you to ask a precise question by writing some lean down</p>",
        "id": 245542035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625912259
    }
]