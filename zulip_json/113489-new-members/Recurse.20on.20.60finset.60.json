[
    {
        "content": "<p>Is there some way to define a function recursively over a <code>finset</code>, where each \"iteration\" has access to one element of the set?<br>\nFirst I thought this shouldn't be possible, since choosing an element from a set isn't really possible. But then again there's <code>classical.choice</code>.</p>\n<p>I want to do something <em>for each element</em> in a <code>finset</code> and so far my approach has been to sort the set into a list first, which requires some kind of order on the elements though.</p>\n<p>So far I've only found <a href=\"https://leanprover-community.github.io/mathlib_docs/data/finset/basic.html#finset.strong_induction_on\">finset.strong_induction_on</a>, which doesn't suit my case (I think).</p>",
        "id": 222437418,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610461622
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.induction_on'\">docs#finset.induction_on'</a></p>",
        "id": 222438872,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610462220
    },
    {
        "content": "<p>I haven't done a ton of this kind of stuff with <code>finset</code>, but maybe you can do the recursion on the underlying <code>multiset</code> (lists up to permutation) and then provide a proof that your function doesn't introduce duplicates</p>",
        "id": 222438933,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1610462254
    },
    {
        "content": "<p>Perhaps I should clarify my exact use case:<br>\nI have some object <code>o : O</code> and <code>p : finset P</code>. For each <code>x âˆˆ p</code> I need to update something about <code>o</code> by using <code>p</code>. I happen to know that the order in which the <code>x</code>s are chosen doesn't matter.</p>",
        "id": 222439375,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610462450
    },
    {
        "content": "<p>It might help to know more about <code>O</code> and <code>P</code></p>",
        "id": 222440623,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610462964
    },
    {
        "content": "<p>for example, if <code>O = P = nat</code> and \"update something about <code>o</code> using <code>p</code>\" means \"add <code>p</code> to <code>o</code>\" then this is <code>finset.sum</code></p>",
        "id": 222440648,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610462979
    },
    {
        "content": "<p>more generally, if <code>P</code> acts on <code>O</code> through a commutative monoid of operations then again you can express it directly as a kind of fold/product</p>",
        "id": 222440731,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610463005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Thanks! <code>finset.fold</code> is what I was looking for.</p>",
        "id": 222441290,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610463254
    }
]