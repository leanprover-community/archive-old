[
    {
        "content": "<p>Hello,  I have the definition <code>def ord_pair (x y : Set) := pair_set (sing x) (pair_set x y)</code> and want to be able to write <code>(a, b)</code> for  <code>ord_pair a b</code>, but I'm struggling to understand how to use notation declarations.  </p>\n<p>It would also be nice to be able to write <code>{x, y, z}</code> for <code>sing x ∪ sing y ∪ sing z </code>, where <code>sing x</code> is the singleton containing <code>x</code>. For this I tried <br>\n<code>notation </code>{<code> l:(foldr </code>, <code> (h t, (sing h) ∪ (sing t)) ∅ </code>}<code>) := l</code> copying the definition of the notation for lists, but this conflicts with other notations that use  curly brackets. Any suggestions?</p>",
        "id": 267883133,
        "sender_full_name": "Eduardo Freire",
        "timestamp": 1642087093
    },
    {
        "content": "<p>The <code>{x, y, z}</code> notation comes from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_insert\">docs#has_insert</a>, so you could declare such an instance.</p>",
        "id": 267883571,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642087228
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_singleton\">docs#has_singleton</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_lawful_singleton\">docs#has_lawful_singleton</a> that you might want to have a look at.</p>",
        "id": 267883620,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642087259
    },
    {
        "content": "<p>So the instance of insert should be something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">sing</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_insert</span> <span class=\"n\">Set</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">insert</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>?</p>",
        "id": 267885574,
        "sender_full_name": "Eduardo Freire",
        "timestamp": 1642088117
    },
    {
        "content": "<p>I don't know. This is up to you. However note that whatever your definition is, you probably want to do directly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_insert</span> <span class=\"n\">Set</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">sing</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>to avoid having two spellings of <code>insert</code>.</p>",
        "id": 267885801,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642088205
    },
    {
        "content": "<p>I see, thank you. Also, did you mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_lawful_singleton\">docs#is_lawful_singleton</a>?</p>",
        "id": 267886223,
        "sender_full_name": "Eduardo Freire",
        "timestamp": 1642088363
    },
    {
        "content": "<p>Do you know which file defines the notation for <code>has_insert</code> ?  It seems like the notation <code>{x, y, z}</code> is not working after defining the has_insert instance.</p>",
        "id": 267887943,
        "sender_full_name": "Eduardo Freire",
        "timestamp": 1642089137
    },
    {
        "content": "<p>It's a file in C++ I think. That's because curly brackets are used everywhere so Lean can't handle them itself.</p>",
        "id": 267890336,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642090139
    },
    {
        "content": "<p>You're probabyl missing a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_emptyc\">docs#has_emptyc</a> instance.</p>",
        "id": 267890423,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642090186
    },
    {
        "content": "<p>I do have <code>emptyc</code>, <code>has_singleton</code>  and <code>is_lawful_singleton</code> instances</p>",
        "id": 267893840,
        "sender_full_name": "Eduardo Freire",
        "timestamp": 1642091600
    }
]