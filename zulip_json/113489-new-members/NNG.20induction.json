[
    {
        "content": "<p>I have the following code from the Natural number game:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_add</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>My question is about the reason I can't use <code>hb</code> to simplify <code> t * (succ a + b) </code>. I know <code> t * (succ a + b) </code> isn't written exactly like <code>hb</code>, but the induction hypothesis isn't about a specific a, it says that for every t and a a certain equality holds, and I want to substitute succ a as the value for the variable named a. It feels mostly like a matter of naming variables.</p>",
        "id": 310667923,
        "sender_full_name": "Nir Paz",
        "timestamp": 1668708454
    },
    {
        "content": "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Can.27t.20display.20a.20number.20wrapped.20in.20a.20structure\">#new members &gt; Can't display a number wrapped in a structure</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>.</p>",
        "id": 310668479,
        "sender_full_name": "Notification Bot",
        "timestamp": 1668708626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"565854\">@Nir Paz</span> Hint: do <code>revert a</code> before the induction.</p>",
        "id": 310668524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668708639
    },
    {
        "content": "<p>The induction hypothesis is not a statement about every <code>t</code> and <code>a</code>. It's only a statement about that specific <code>t</code> and <code>a</code>.</p>",
        "id": 310668528,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1668708641
    },
    {
        "content": "<p><code>induction b with b hb generalizing t a</code> is another way to generalize the induction hypothesis.</p>",
        "id": 310668659,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1668708683
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 310671460,
        "sender_full_name": "Nir Paz",
        "timestamp": 1668709607
    },
    {
        "content": "<p>I struggled with this as well -- Lean is far more stubborn than you are. It will only use <code>rw</code> using statements that it <strong>knows</strong> are definitionally equal; that means that it won't use leaps of logic that make sense to you until you teach it.</p>",
        "id": 310671723,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668709693
    }
]