[
    {
        "content": "<p>I noticed that using a <code>variable</code> declaration in inductive type constructors makes them \"non-local\", in the sense that they apply to the whole type rather than just the constructor, even though they are irrelevant to the type. For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">have_this</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">Foo</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">of_nat</span><span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">a</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">Foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">inductive Foo : Π {a : ℕ}, ℕ → Type</span>\n<span class=\"cm\">constructors:</span>\n<span class=\"cm\">Foo.of_nat : Π {a : ℕ}, Foo a</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span> <span class=\"n\">have_this</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">want_this</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">Foo&#39;</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">of_nat</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">Foo&#39;</span> <span class=\"n\">a</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">Foo&#39;</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">inductive Foo&#39; : ℕ → Type</span>\n<span class=\"cm\">constructors:</span>\n<span class=\"cm\">Foo&#39;.of_nat : Π {a : ℕ}, Foo&#39; a</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span> <span class=\"n\">want_this</span>\n</pre></div>\n\n\n<p>I would like Lean to generate something like <code>Foo'</code> for me, where only the constructor is a pi-type, but the type being defined is not, but Lean generates <code>Foo</code>, which depends on <code>a</code> resulting in inference errors anywhere. Can I somehow achieve <code>Foo'</code> without explicitly specifying the Pi in every constructor?</p>",
        "id": 158052845,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1549910250
    },
    {
        "content": "<p>don't use variable names that overlap?</p>",
        "id": 158054671,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1549911585
    },
    {
        "content": "<p>alternatively, you might be able to use <code>omit a</code>, but I don't have lean in front of me to check</p>",
        "id": 158054781,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1549911637
    },
    {
        "content": "<p>I'm not sure what you mean by overlap? There is no overlap, I simply want <code>a</code> to be added as a Pi-variable to the type of <code>of_nat</code> but not to the type <code>Foo</code>. <code>omit</code> undoes <code>include</code>, but I never had <code>include</code> in the first place. Just to clarify, <code>Foo</code> and <code>Foo'</code> are separate examples - I edited the code to show this.</p>",
        "id": 158055162,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1549911961
    },
    {
        "content": "<p>ah. I don't know the solution to your problem. fixed parameters to the left of the colon ala variable apply to all constructors, so to work around I always explicitly specified the pi type as you did</p>",
        "id": 158055561,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1549912229
    }
]