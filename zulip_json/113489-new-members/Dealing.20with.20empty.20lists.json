[
    {
        "content": "<p>Hi folks, how do you often deal with empty lists. For example, how do you write List.min?</p>",
        "id": 303059681,
        "sender_full_name": "Nam",
        "timestamp": 1665259968
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.min\">docs#list.min</a></p>",
        "id": 303059717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665259995
    },
    {
        "content": "<p>That function doesn't exist. What do you mean by it?</p>",
        "id": 303059730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665260008
    },
    {
        "content": "<p>Do you use subtype to restrict a list to non-empty, or use Maybe in the result?</p>",
        "id": 303059753,
        "sender_full_name": "Nam",
        "timestamp": 1665260037
    },
    {
        "content": "<p>Perhaps I can second guess your question. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth\">docs#list.nth</a> exists, and has type <code>list α → ℕ → option α</code>, so it returns the n'th element of the list if it exists and <code>none</code> otherwise. Is this what you're asking?</p>",
        "id": 303059819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665260063
    },
    {
        "content": "<p>Ah, yes, that function does not exist. I meant to write a function that returns the minimum value from a List</p>",
        "id": 303059825,
        "sender_full_name": "Nam",
        "timestamp": 1665260068
    },
    {
        "content": "<p>On the other hand <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.head\">docs#list.head</a> has type <code>list α → α</code> but also the assumption <code> [inhabited α]</code> which means it can return the \"default element\" of alpha if the list is empty.</p>",
        "id": 303059881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665260127
    },
    {
        "content": "<p>The real answer to your question is probably \"yes we can do all of those things and indeed we do do all of those things\".</p>",
        "id": 303059977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665260183
    },
    {
        "content": "<p>For example as well as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth\">docs#list.nth</a> we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth_le\">docs#list.nth_le</a> which asks for a proof and in return doesn't return an <code>option</code>.</p>",
        "id": 303060009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665260232
    },
    {
        "content": "<p>Oh, interesting. Thank you Kevin. Which way do you think is used more often?</p>",
        "id": 303060130,
        "sender_full_name": "Nam",
        "timestamp": 1665260334
    },
    {
        "content": "<p>I'm sure that this will depend on what you want to do.</p>",
        "id": 303060146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665260349
    },
    {
        "content": "<p>Is there a way to tell Lean that \"trust me, my lists are non-empty\"?</p>",
        "id": 303060167,
        "sender_full_name": "Nam",
        "timestamp": 1665260385
    },
    {
        "content": "<p>You can take a proof as an argument as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.min'\">docs#finset.min'</a></p>",
        "id": 303060303,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665260480
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.min\">docs#finset.min</a> instead returns <code>with_top</code> which is essentially <code>option</code>.</p>",
        "id": 303060312,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665260502
    },
    {
        "content": "<p>Yes, I can provide Lean with a proof (or just admit such cases). I guess what I am wondering is if there is a way that I do not need to do that, that Lean does not need to check for such cases?</p>",
        "id": 303060533,
        "sender_full_name": "Nam",
        "timestamp": 1665260681
    },
    {
        "content": "<p>I guess no unless you want Lean to be able to verify a proof of <code>false</code> :)</p>",
        "id": 303061043,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665261111
    },
    {
        "content": "<p>You can't just promise that your list is nonempty, however you can demand that your function takes as input a proof that the list is nonempty, a bit like nth_le above.</p>",
        "id": 303061706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665261732
    },
    {
        "content": "<p>This isn't Haskell, this is a theorem prover, and it's really important that you can't prove false things by abusing a function.</p>",
        "id": 303061776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665261803
    },
    {
        "content": "<p>This is a question about the Natural number game (Sorry I don't know if this is the right place to post it but I could not find otherwhere to ask, and I think some people here shall be familiar with the game): in trying to use the add_left_cancel theorem to get from h2 to the goal, it says that the type of h2 should be mynat instead of Prop, which I think is problematic? I have also tried to just repeat again the proofs of all the theorems I need, but at the end I could not use induction on (a * d), so this doesn't work either, does anyone have some hint of it?<br>\n<a href=\"/user_uploads/3121/XwbSmhDGxubP00qUErQo95nI/SharedScreenshot.jpg\">SharedScreenshot.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XwbSmhDGxubP00qUErQo95nI/SharedScreenshot.jpg\" title=\"SharedScreenshot.jpg\"><img src=\"/user_uploads/3121/XwbSmhDGxubP00qUErQo95nI/SharedScreenshot.jpg\"></a></div>",
        "id": 303066389,
        "sender_full_name": "Ruizhe Wan",
        "timestamp": 1665265523
    },
    {
        "content": "<p>This is the right stream, but this is a thread about empty lists. You should make a new topic, or find an old natural number game topic, and I'll answer your question there.</p>",
        "id": 303066829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665265861
    },
    {
        "content": "<p>ok</p>",
        "id": 303066844,
        "sender_full_name": "Ruizhe Wan",
        "timestamp": 1665265896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284601\">@Nam</span> I don't think anyone mentioned this, but we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.minimum\">docs#list.minimum</a>... the caveat is that it may return <code>⊤</code> (which is represented by <code>option.none</code>) if the list is empty</p>",
        "id": 303068946,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1665267777
    },
    {
        "content": "<p>If you want to specify a default value to handle the case of an empty list, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top.untop'\">docs#with_top.untop'</a> with the resulting value</p>",
        "id": 303069657,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1665268435
    },
    {
        "content": "<p>so in theory you could do <code>myList.minimum.untop' 0</code> and you would get the minimum back or 0 if the list is empty</p>",
        "id": 303069818,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1665268563
    },
    {
        "content": "<p>How do I force the \\a of an empty List \\a?</p>",
        "id": 303934782,
        "sender_full_name": "Nam",
        "timestamp": 1665700386
    },
    {
        "content": "<p>[] can be any List a, or List b. If the function does not have anything else that can bind or resolve a or b, how can I help Lean know what a or b is from an empty list []?</p>",
        "id": 303935101,
        "sender_full_name": "Nam",
        "timestamp": 1665700554
    },
    {
        "content": "<p><code>([] : list \\a)</code></p>",
        "id": 303935293,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665700661
    },
    {
        "content": "<p>For example, <code>#check List.concat [] []</code> cannot resolve the type parameter</p>",
        "id": 303935300,
        "sender_full_name": "Nam",
        "timestamp": 1665700663
    },
    {
        "content": "<p>oh, let me try. thank you.</p>",
        "id": 303935320,
        "sender_full_name": "Nam",
        "timestamp": 1665700676
    },
    {
        "content": "<p>ah, yes, that works! thanks again.</p>",
        "id": 303935410,
        "sender_full_name": "Nam",
        "timestamp": 1665700707
    }
]