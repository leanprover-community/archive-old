[
    {
        "content": "<p>Pretty mundane question but I can't figure it out  - is there some tactic that will automatically prove that 11 is not a divisor of 100? (couldnt quite get the lean code to display in zulip.) <code>\\not (11 \\| 100)</code></p>",
        "id": 211849299,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601505792
    },
    {
        "content": "<p><code>norm_num</code> works</p>",
        "id": 211849426,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601505879
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">11</span> <span class=\"bp\">∣</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211849439,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601505890
    },
    {
        "content": "<p>nice thanks</p>",
        "id": 211849553,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601505972
    },
    {
        "content": "<p>ok similar question. i have a function defined as <code>def sum_of_squares (L : list ℕ) : ℕ := L.foldr (λ x y, x*x + y) 0</code>. I would like to just automatically expand this out on a given list to have it be able to solve that, for example, <code>sum_of_squares [1, 1, 0] = 2</code>. is there any tactic that can do this?</p>",
        "id": 211850215,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601506595
    },
    {
        "content": "<p>well, i figured this out by trial and error, first <code>norm_num</code> then <code>ring</code> can do it</p>",
        "id": 211850707,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601506902
    },
    {
        "content": "<p>hmm, but if the statement is mildly more complicated - <code>10 \\ne sum_of_squares [1, 1, 0]</code> - then ring cannot solve it</p>",
        "id": 211851266,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601507367
    },
    {
        "content": "<p>i feel like i must be solving this the wrong way, i am just stabbing around seeing what these tactics can automatically solve</p>",
        "id": 211851284,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601507394
    },
    {
        "content": "<p>whereas i want to be expressing, hey this <code>sum_of_squares</code> function can just be simplified wherever it occurs in an expression</p>",
        "id": 211851361,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601507433
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum_of_squares</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">L.foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"bp\">≠</span> <span class=\"n\">sum_of_squares</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">sum_of_squares</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211851420,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1601507502
    },
    {
        "content": "<p>If you give the def to <code>norm_num</code> it will pass it on to the simplifier and then do all the arithmetic.</p>",
        "id": 211851489,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1601507536
    },
    {
        "content": "<p>You can mark a definition @[reducible], also:<br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html\">https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html</a></p>",
        "id": 211851540,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601507586
    },
    {
        "content": "<p>And there is <code>unfold sum_of_squares</code> (optionally <code>at ...</code>) to get rid of it just in one place.</p>",
        "id": 211851648,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601507650
    },
    {
        "content": "<p>reducible does not seem to enable <code>norm_num</code> to solve it here, but passing along the definition explicitly does</p>",
        "id": 211851721,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601507743
    },
    {
        "content": "<p>okay, this is a more complicated question. I have an expression <code>a \\or b</code>, and I know that one of a or b is provable by norm_num, but I don't know which. is there a way to say, try it out on both of them, and as long as it works on one of them, then the proof is fine?</p>",
        "id": 211852118,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601508084
    },
    {
        "content": "<p>How do you know that one of them is provable by <code>norm_num</code>? Is that \"meta\" knowledge, or is it something in the context?</p>",
        "id": 211852235,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601508187
    },
    {
        "content": "<p>well only one of them is true</p>",
        "id": 211852252,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601508205
    },
    {
        "content": "<p>i mean, I personally know it. lean doesn't know anything of the sort</p>",
        "id": 211852264,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601508221
    },
    {
        "content": "<p>Don't use <code>reducible</code> for recursive definitions, that only makes sense for \"abbreviation\" style definitions</p>",
        "id": 211852315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601508248
    },
    {
        "content": "<p>If you have <code>a \\or b</code> and norm_num can solve one of them then it can solve the or</p>",
        "id": 211852348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601508283
    },
    {
        "content": "<p>because it passes all that along to <code>simp</code> and simp will simplify <code>true \\or p</code> to <code>true</code></p>",
        "id": 211852366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601508308
    },
    {
        "content": "<p>ok, excellent</p>",
        "id": 211852380,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601508321
    },
    {
        "content": "<p>and presumably i can pass irrelevant functions to <code>norm_num</code> and it'll happily ignore them</p>",
        "id": 211852394,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601508334
    },
    {
        "content": "<p>Why not do a <code>&lt;|&gt;</code> with or something with try?</p>",
        "id": 211852400,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601508342
    },
    {
        "content": "<p>it just calls <code>simp</code> with the passed arguments</p>",
        "id": 211852405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601508353
    },
    {
        "content": "<p>maybe I shoudl be doing that. <code>&lt;|&gt;</code> is just yet more lean syntax i have not heard of</p>",
        "id": 211852474,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601508374
    },
    {
        "content": "<p>you should prefer <code>simp</code> over <code>norm_num</code> unless you have some numerical calculations to do in the middle</p>",
        "id": 211852480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601508380
    },
    {
        "content": "<p>simp doesn't seem to work</p>",
        "id": 211852485,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601508386
    },
    {
        "content": "<p><code>&lt;|&gt;</code> is a tactic combinator that lets you try one tactic and then another if the first fails</p>",
        "id": 211852509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601508415
    },
    {
        "content": "<p>cool</p>",
        "id": 211852511,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601508421
    },
    {
        "content": "<p>for example <code>{left, norm_num} &lt;|&gt; {right, norm_num}</code> would do what you suggested</p>",
        "id": 211852531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601508443
    }
]