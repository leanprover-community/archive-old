[
    {
        "content": "<p>I have a problem defining <code>∀ t</code> when <code>t</code> is <code>∈</code> some set and not <code>:</code> some Type. I try to do this as in the mwe below, but then Lean does not remember the properties of <code>t</code> and does not allow <code>t</code> to be fed to a function. Is there a (better) way to do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_interval</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a_in_my_interval</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"kd\">end</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">my_const_map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">to_fun</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"o\">⟨</span> <span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"n\">a_in_my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>I have also tried having the following variation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">const'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"o\">⟨</span> <span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"n\">a_in_my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>but then I run into problems later when I want to prove more things because I don't know how to translate the hypothesis</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b.</span>\n</code></pre></div>",
        "id": 291511813,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1659300666
    },
    {
        "content": "<p>Use <code>t.prop</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.prop\">docs#subtype.prop</a>)</p>",
        "id": 291511822,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659300701
    },
    {
        "content": "<p>Alternately, you can give a name to <code>t ∈ my_interval a b</code>: <code>∀ t (h : t ∈ my_interval a b), ...</code><br>\nOr you can call the assumption without naming using French quotes : <code>‹t ∈ my_interval a b›</code> at the place of use.</p>",
        "id": 291511981,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659300890
    },
    {
        "content": "<p>Thanks a lot! I think the option of naming the hypothesis looks best to me. But i can't get it to work.  What is the syntax? The following does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">my_const_map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>  <span class=\"n\">to_fun</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"o\">⟨</span> <span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"n\">a_in_my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>The problem might be that it needs to know<code> t : ℕ</code> but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"o\">⟨</span> <span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"n\">a_in_my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>does not work either</p>",
        "id": 291512557,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1659301662
    },
    {
        "content": "<p>Untested: <code> ∀ (t : ℕ) (h : t ∈ my_interval a b)</code></p>",
        "id": 291512792,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659301937
    },
    {
        "content": "<p>For</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"o\">⟨</span> <span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"n\">a_in_my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>I still get <code> type mismatch at application  to_fun t  term  t has type   ℕ  but is expected to have type   ↥(my_interval a b)   </code>.</p>",
        "id": 291512888,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1659302058
    },
    {
        "content": "<p>Try <code>to_fun ⟨t, h⟩</code>.</p>",
        "id": 291513085,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659302323
    },
    {
        "content": "<p>Oh yes, that makes sense. This works now.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">⟨</span> <span class=\"n\">t</span> <span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span>  <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"o\">⟨</span> <span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"n\">a_in_my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 291513251,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1659302570
    },
    {
        "content": "<p>I tried to understand your recommendation about <code>subtype.prop</code>, but was not able to make sense of it. Where can I learn more about it?</p>",
        "id": 291513274,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1659302632
    },
    {
        "content": "<p>If you write <code>t : my_interval a b</code>, then actually <code>t</code> is of type <code>subtype (λ x, x ∈ my_interval a b)</code>. Then you can see how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype\">docs#subtype</a> is implemented.</p>",
        "id": 291513334,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659302702
    },
    {
        "content": "<p>Ah, thank you so much for all the help!</p>",
        "id": 291513418,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1659302811
    },
    {
        "content": "<p>This is so cool, when I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I can get bot the value <code>(t:ℕ)</code> and the property <code>t.prop</code> which is <code> t ∈ my_interval a b</code>. Is it also possible to go the other way, i.e. If I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>can I somehow get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 291515507,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1659305831
    },
    {
        "content": "<p>or if I just have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">\\</span><span class=\"k\">in</span> <span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>can I get <code>t : my_interval a b</code> from this already?</p>",
        "id": 291515589,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1659305964
    },
    {
        "content": "<p><code>⟨_, h⟩</code> once again.</p>",
        "id": 291515902,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659306391
    },
    {
        "content": "<p>The brackets here mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.mk\">docs#subtype.mk</a></p>",
        "id": 291515909,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659306401
    },
    {
        "content": "<p>Unfortunately I am again not sure what you mean. I have the following example-lemma I would like to prove. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sample</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">my_const_map</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">my_interval</span> <span class=\"n\">f.a</span> <span class=\"n\">f.b</span><span class=\"o\">)</span>\n   <span class=\"o\">:</span> <span class=\"n\">f.to_fun</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">f.to_fun</span> <span class=\"o\">⟨</span> <span class=\"n\">f.a</span> <span class=\"o\">,</span> <span class=\"n\">a_in_my_interval</span> <span class=\"n\">f.a</span> <span class=\"n\">f.b</span> <span class=\"n\">f.h</span><span class=\"o\">⟩</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"c1\">-- current state has both x :  ℕ and h : x ∈ my_interval f.a f.b</span>\n  <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- both these give an error: invalid constructor ⟨...⟩, expected type is not an inductive type</span>\n  <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">⟨</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>with the definitions as above.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">my_const_map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"c1\">--(const : ∀ (t : ℕ) (h2 : t ∈ my_interval a b) , to_fun ⟨ t , h2⟩  = to_fun ⟨ a , a_in_my_interval a b h ⟩)</span>\n<span class=\"o\">(</span><span class=\"n\">const'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"o\">⟨</span> <span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"n\">a_in_my_interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 291516666,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1659307553
    },
    {
        "content": "<p>So I am not sure how I can get the exact hypothesis <code>x  : my_interval f.a f.b</code> to appear in the list of assumptions, but maybe I don't really need that and can just write <code>&lt; x , h&gt;</code> whenever I would otherwise use the hypothesis <code>x</code>. Concretely I would solve my sample by:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sample</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">my_const_map</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">my_interval</span> <span class=\"n\">f.a</span> <span class=\"n\">f.b</span><span class=\"o\">)</span>\n   <span class=\"o\">:</span> <span class=\"n\">f.to_fun</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">f.to_fun</span> <span class=\"o\">⟨</span> <span class=\"n\">f.a</span> <span class=\"o\">,</span> <span class=\"n\">a_in_my_interval</span> <span class=\"n\">f.a</span> <span class=\"n\">f.b</span> <span class=\"n\">f.h</span><span class=\"o\">⟩</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">const'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">my_interval</span> <span class=\"n\">f.a</span> <span class=\"n\">f.b</span> <span class=\"o\">,</span> <span class=\"n\">f.to_fun</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">f.to_fun</span> <span class=\"o\">⟨</span> <span class=\"n\">f.a</span> <span class=\"o\">,</span> <span class=\"n\">a_in_my_interval</span> <span class=\"n\">f.a</span> <span class=\"n\">f.b</span> <span class=\"n\">f.h</span> <span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f.const'</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">const'</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">const'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thanks for all the patience with me.</p>",
        "id": 291517157,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1659308341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"494571\">Raphael Appenzeller</span> <a href=\"#narrow/stream/113489-new-members/topic/Universal.20quantifier.20over.20set/near/291516666\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sample</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">my_const_map</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">my_interval</span> <span class=\"n\">f.a</span> <span class=\"n\">f.b</span><span class=\"o\">)</span>\n   <span class=\"o\">:</span> <span class=\"n\">f.to_fun</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">f.to_fun</span> <span class=\"o\">⟨</span> <span class=\"n\">f.a</span> <span class=\"o\">,</span> <span class=\"n\">a_in_my_interval</span> <span class=\"n\">f.a</span> <span class=\"n\">f.b</span> <span class=\"n\">f.h</span><span class=\"o\">⟩</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"c1\">-- current state has both x :  ℕ and h : x ∈ my_interval f.a f.b</span>\n  <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- both these give an error: invalid constructor ⟨...⟩, expected type is not an inductive type</span>\n  <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">⟨</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Should be something like <code>let x' : my_interval f.a f.b := ⟨ x , h⟩, </code></p>",
        "id": 291517545,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659308889
    },
    {
        "content": "<p>Jep that works.  Thank you!</p>",
        "id": 291517619,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1659309013
    }
]