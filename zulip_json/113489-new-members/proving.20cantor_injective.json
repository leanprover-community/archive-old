[
    {
        "content": "<p>So I have this proof, with two sorrys. I am currently worried about the first, in between the <code>begin ... end</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p_equiv_np_implies_false</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">fi</span> <span class=\"n\">fn</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_set_of.mp</span> <span class=\"n\">fi</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fs_eq_gB'</span><span class=\"o\">,</span> <span class=\"n\">x_in_B</span><span class=\"o\">⟩,</span>\n      <span class=\"k\">have</span> <span class=\"n\">fB'_notin_B'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n        <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">x_in_B</span> <span class=\"o\">(</span><span class=\"n\">false.rec</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fB'_notin_B'</span> <span class=\"n\">fi</span><span class=\"o\">)),</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">fn</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mem_set_of.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_set_of.mpr</span> <span class=\"n\">fn</span><span class=\"o\">),</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So before I start implementing it in lean, im still confused how the math proof will go.</p>",
        "id": 281094295,
        "sender_full_name": "Joseph O",
        "timestamp": 1651621842
    },
    {
        "content": "<p>That's not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (it has no imports and <code>p_equiv_np_implies_false </code> is presumably your own code), so it will be difficult for anyone to help you</p>",
        "id": 281096914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651623890
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths/topic/Stuck.20on.20mathematical.20proof\">#maths &gt; Stuck on mathematical proof</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 281096937,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651623913
    },
    {
        "content": "<p>(I've move the thread to <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> since this is more a request for help with lean and proving rather than a more in-depth question about formalizing a specific piece of math)</p>",
        "id": 281097071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651624026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281096914\">said</a>:</p>\n<blockquote>\n<p>That's not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (it has no imports and <code>p_equiv_np_implies_false </code> is presumably your own code), so it will be difficult for anyone to help you</p>\n</blockquote>\n<p>Sure. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">init.data.set</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">p_equiv_np_implies_false</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">classical.em</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">np</span> <span class=\"o\">:=</span> <span class=\"n\">h.mp</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">np</span> <span class=\"n\">h_1</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">h.mpr</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h_1</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p_equiv_np_implies_false</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">fi</span> <span class=\"n\">fn</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_set_of.mp</span> <span class=\"n\">fi</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fs_eq_gB'</span><span class=\"o\">,</span> <span class=\"n\">x_in_B</span><span class=\"o\">⟩,</span>\n      <span class=\"k\">have</span> <span class=\"n\">fB'_notin_B'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n        <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">x_in_B</span> <span class=\"o\">(</span><span class=\"n\">false.rec</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fB'_notin_B'</span> <span class=\"n\">fi</span><span class=\"o\">)),</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">fn</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mem_set_of.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_set_of.mpr</span> <span class=\"n\">fn</span><span class=\"o\">),</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281097500,
        "sender_full_name": "Joseph O",
        "timestamp": 1651624421
    },
    {
        "content": "<p>Your proof is going nowhere - the key piece of information you have is the <code>h</code> introduced by <code>by_contradiction</code> (normally you'd write <code>by_contradiction h</code> to make that clear). You need to come up with a clever way to apply <code>h</code>. The statement is impossible to prove without <code>h</code>.</p>",
        "id": 281097713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651624601
    },
    {
        "content": "<p>I havent found a way to apply <code>h</code></p>",
        "id": 281097972,
        "sender_full_name": "Joseph O",
        "timestamp": 1651624847
    },
    {
        "content": "<p>I suggest you try and work that out on paper where it's sometimes easier to see you're going in circles</p>",
        "id": 281098113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651624996
    },
    {
        "content": "<p>Are you trying to find a proof from scratch, or trying to formalize a \"paper\" one you've seen  elsewhere?</p>",
        "id": 281098150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651625032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281098150\">said</a>:</p>\n<blockquote>\n<p>Are you trying to find a proof from scratch, or trying to formalize a \"paper\" one you've seen  elsewhere?</p>\n</blockquote>\n<p>The proof I am trying to formalize currently was given to me by someone, not from a paper</p>",
        "id": 281098445,
        "sender_full_name": "Joseph O",
        "timestamp": 1651625329
    },
    {
        "content": "<p>This was it:</p>\n<p>First notice that B' ⊆ A. Now suppose f(B') ∈ B, then there is X ⊆ A such that f(B') = f(X) with f(X) ∉ X, but f is injective by assumption and so B' = X. So together with f(X) ∉ X we get f(B') ∉ B'. Conversely if f(B') ∉ B' then combined with B' ⊆ A and f(B') = f(B') we have that ∃X [f(B') = f(X) ∧ f(X) ∉ X ∧ X ⊆ A], namely X = B'. But that means that f(B') ∈ B.</p>",
        "id": 281098589,
        "sender_full_name": "Joseph O",
        "timestamp": 1651625460
    },
    {
        "content": "<p>Ah so when you wanted to prove <code>∃ X, f B' = f X</code>, what you were really after was <code>∃ X, f B' = f X ∧ f X ∉ X</code>!</p>",
        "id": 281098714,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651625570
    },
    {
        "content": "<p>yes!</p>",
        "id": 281098740,
        "sender_full_name": "Joseph O",
        "timestamp": 1651625603
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>i still feel like ive seen this before... am i going around in circles?</p>",
        "id": 281098947,
        "sender_full_name": "Joseph O",
        "timestamp": 1651625840
    },
    {
        "content": "<p>Note that \"now suppose P (and then later not P)\" is captured best with <code>by_cases hp : P</code></p>",
        "id": 281098954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651625849
    },
    {
        "content": "<p>In particular, your \"paper\" proof says you need to do that <em>before</em> you can construct that existential</p>",
        "id": 281099052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651625957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281098954\">said</a>:</p>\n<blockquote>\n<p>Note that \"now suppose P (and then later not P)\" is captured best with <code>by_cases hp : P</code></p>\n</blockquote>\n<p>That would probably be <code>by_cases hp : f(B') ∈ B',</code></p>",
        "id": 281099245,
        "sender_full_name": "Joseph O",
        "timestamp": 1651626081
    },
    {
        "content": "<p>Lets see how far in I can get</p>",
        "id": 281099770,
        "sender_full_name": "Joseph O",
        "timestamp": 1651626657
    },
    {
        "content": "<p>Wait this made three goals</p>",
        "id": 281099945,
        "sender_full_name": "Joseph O",
        "timestamp": 1651626863
    },
    {
        "content": "<p>so i closed off the first</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_set_of.mp</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281099952,
        "sender_full_name": "Joseph O",
        "timestamp": 1651626884
    },
    {
        "content": "<p><code>by_cases</code> turns a goal into two. Then, when trying to prove the first, you used <code>have</code> without providing a proof term, which creates another goal</p>",
        "id": 281100174,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651627172
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 281100562,
        "sender_full_name": "Joseph O",
        "timestamp": 1651627586
    },
    {
        "content": "<p>So the next part of the proof says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">but</span> <span class=\"n\">f</span> <span class=\"n\">is</span> <span class=\"n\">injective</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span> <span class=\"n\">and</span> <span class=\"n\">so</span> <span class=\"n\">B'</span> <span class=\"bp\">=</span> <span class=\"n\">X.</span>\n</code></pre></div>\n<p>this is most likely the part where we apply <code>h</code>, but I'm not exactly sure where and how to do that with the proof in it's current state</p>",
        "id": 281101688,
        "sender_full_name": "Joseph O",
        "timestamp": 1651628960
    },
    {
        "content": "<p>Any thoughts?</p>",
        "id": 281142649,
        "sender_full_name": "Joseph O",
        "timestamp": 1651664403
    },
    {
        "content": "<p>I haven't tested your code, but if <code>but f is injective by assumption and so B' = X.</code> should work at this point, it sounds like the <code>contradiction</code> tactic to me</p>",
        "id": 281142868,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651664556
    },
    {
        "content": "<p>That is, you have two contradictory hypotheses in your context</p>",
        "id": 281142915,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651664598
    },
    {
        "content": "<p><code>have := h the_proof_that_f_B'_eq_f_X</code> is the next step forward</p>",
        "id": 281142920,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651664601
    },
    {
        "content": "<p>I don't think it's that immediate, Arthur. We still need to use injectivity.</p>",
        "id": 281142953,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651664628
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"c1\">-- extracts an `s` and `hs : P s` from \"exists s such that `P s`\"</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>  <span class=\"c1\">-- uses injectivity</span>\n<span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>     <span class=\"c1\">-- `hp': f s ∉ s`, which contradicts `hp: f s ∈ s`</span>\n<span class=\"n\">contradiction</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 281144113,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651665349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281142920\">said</a>:</p>\n<blockquote>\n<p><code>have := h the_proof_that_f_B'_eq_f_X</code> is the next step forward</p>\n</blockquote>\n<p>So I have to extract that proof</p>",
        "id": 281146291,
        "sender_full_name": "Joseph O",
        "timestamp": 1651666721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281144113\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"c1\">-- extracts an `s` and `hs : P s` from \"exists s such that `P s`\"</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>  <span class=\"c1\">-- uses injectivity</span>\n<span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>     <span class=\"c1\">-- `hp': f s ∉ s`, which contradicts `hp: f s ∈ s`</span>\n<span class=\"n\">contradiction</span><span class=\"o\">,</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I never knew you could do <code>hs.1</code>, that's cool</p>",
        "id": 281146471,
        "sender_full_name": "Joseph O",
        "timestamp": 1651666816
    },
    {
        "content": "<p>Wow thanks for helping out, and I never knew the <code>contradiction</code> tactic existed.</p>",
        "id": 281146600,
        "sender_full_name": "Joseph O",
        "timestamp": 1651666905
    },
    {
        "content": "<p>Now the goal of the last sorry is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>I would like to try to figure this one out myself, though I am a bit confused which  part of the written proof this corresponds to.</p>",
        "id": 281146929,
        "sender_full_name": "Joseph O",
        "timestamp": 1651667076
    },
    {
        "content": "<p>\"Conversely if f(B') ∉ B'...\"</p>",
        "id": 281147044,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651667145
    },
    {
        "content": "<p>You're now on the complementary side of the <code>by_cases</code> tactic</p>",
        "id": 281147194,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651667235
    },
    {
        "content": "<p>Right</p>",
        "id": 281150927,
        "sender_full_name": "Joseph O",
        "timestamp": 1651669186
    },
    {
        "content": "<p>Then next line says <code>we have that ∃X [f(B') = f(X) ∧ f(X) ∉ X ∧ X ⊆ A],</code>, which is essentially <code>have : ∃ X, f(X) = f(B') ∧ f(X) ∉ X,</code> all over again</p>",
        "id": 281167352,
        "sender_full_name": "Joseph O",
        "timestamp": 1651676117
    },
    {
        "content": "<p>This is what I was able to get so far on the last part. Does it look good so far?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_set_of.mp</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hB'</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">),</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281170015,
        "sender_full_name": "Joseph O",
        "timestamp": 1651677169
    },
    {
        "content": "<p>What do you want to do with <code>hB'</code>? It doesn't seem to bring in much value</p>",
        "id": 281170778,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651677519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281170778\">said</a>:</p>\n<blockquote>\n<p>What do you want to do with <code>hB'</code>? It doesn't seem to bring in much value</p>\n</blockquote>\n<p>I don't know either. I am just trying to follow the proof. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Conversely if f(B') ∉ B' then combined with B' ⊆ A and f(B') = f(B'),</span>\n<span class=\"c1\">-- we have that ∃X [f(B') = f(X) ∧ f(X) ∉ X ∧ X ⊆ A],</span>\n<span class=\"c1\">-- namely X = B'. But that means that f(B') ∈ B.</span>\n</code></pre></div>",
        "id": 281171022,
        "sender_full_name": "Joseph O",
        "timestamp": 1651677621
    },
    {
        "content": "<p>I also dont want to do <code>have : ∃ X, f(X) = f(B') ∧ f(X) ∉ X,</code> again</p>",
        "id": 281171577,
        "sender_full_name": "Joseph O",
        "timestamp": 1651677866
    },
    {
        "content": "<p>Then place it before <code>by_cases</code> (and bring its proof along)</p>",
        "id": 281171698,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651677925
    },
    {
        "content": "<p>Oh ok</p>",
        "id": 281171715,
        "sender_full_name": "Joseph O",
        "timestamp": 1651677936
    },
    {
        "content": "<p>But then things get really moved around</p>",
        "id": 281171919,
        "sender_full_name": "Joseph O",
        "timestamp": 1651678029
    },
    {
        "content": "<p>Like for this goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>this proof doesnt work anymore because the is no <code>hp</code> anymore</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 281171996,
        "sender_full_name": "Joseph O",
        "timestamp": 1651678072
    },
    {
        "content": "<p>Wait, if you need <code>f(B') ∈ B'</code> to be true in order to prove that <code>∃ X, f(X) = f(B') ∧ f(X) ∉ X</code> then how would you prove it in the other <code>by_cases</code> section, supposing you were willing to do it \"all over again\"?</p>",
        "id": 281172694,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651678379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> well we have these three goals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">3</span> <span class=\"n\">goals</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 281173498,
        "sender_full_name": "Joseph O",
        "timestamp": 1651678752
    },
    {
        "content": "<p>Hm, can you come up with a proof of your own? I feel like syntactically following that proof (rather than semantically) is getting you more lost</p>",
        "id": 281173955,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651678930
    },
    {
        "content": "<p>I don't have a proof of my own.</p>",
        "id": 281174060,
        "sender_full_name": "Joseph O",
        "timestamp": 1651678978
    },
    {
        "content": "<p>Can you write the one you have with your own words? As if you were explaining it to someone</p>",
        "id": 281174226,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651679043
    },
    {
        "content": "<p>Ok so going back to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_set_of.mp</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">exists_eq</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the last <code>sorry</code> has a goal of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>and this corresponds with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">namely</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'.</span> <span class=\"n\">But</span> <span class=\"n\">that</span> <span class=\"n\">means</span> <span class=\"n\">that</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B.</span>\n</code></pre></div>\n<p>Do you know how to get <code>f(B') ∈ B</code> out of the current goal</p>",
        "id": 281174351,
        "sender_full_name": "Joseph O",
        "timestamp": 1651679092
    },
    {
        "content": "<p><code>exact hp</code></p>",
        "id": 281174877,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651679324
    },
    {
        "content": "<p>That doesnt work.</p>",
        "id": 281174970,
        "sender_full_name": "Joseph O",
        "timestamp": 1651679365
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 281174981,
        "sender_full_name": "Joseph O",
        "timestamp": 1651679374
    },
    {
        "content": "<p>Your proof starts off as \"First notice that B' ⊆ A\". What is <code>A</code>?</p>",
        "id": 281176474,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651679996
    },
    {
        "content": "<p>I think it's <code>set.univ : set α</code></p>",
        "id": 281177291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651680261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span>, note that when you use <code>by_cases</code> it splits into two goals - you should have two pairs of <code>{}</code> at that point to keep things clear</p>",
        "id": 281177359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651680292
    },
    {
        "content": "<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">mem_set_of.mp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"n\">exists_eq</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281177957,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651680545
    },
    {
        "content": "<p>Oh right I see, that was my mistake</p>",
        "id": 281193890,
        "sender_full_name": "Joseph O",
        "timestamp": 1651686773
    },
    {
        "content": "<p>Thanks</p>",
        "id": 281193894,
        "sender_full_name": "Joseph O",
        "timestamp": 1651686775
    },
    {
        "content": "<p>Im still confused on how to translate <code>But that means that f(B') ∈ B.</code> into lean</p>",
        "id": 281196333,
        "sender_full_name": "Joseph O",
        "timestamp": 1651687699
    },
    {
        "content": "<p>From </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"n\">exists_eq</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 281196353,
        "sender_full_name": "Joseph O",
        "timestamp": 1651687708
    },
    {
        "content": "<p>Do you understand why that is so in a math level? Note: I'm not claiming that it's true nor that I understand. I'm just saying that this will be a super hard task if you don't see it as true and understand precisely why it is</p>",
        "id": 281196688,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651687824
    },
    {
        "content": "<p>Well we have this hypothesis: <code>hp: f B' ∉ B'</code>, which seems contradictory</p>",
        "id": 281197091,
        "sender_full_name": "Joseph O",
        "timestamp": 1651687986
    },
    {
        "content": "<p>Why is it so?</p>",
        "id": 281197158,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651688013
    },
    {
        "content": "<p>Because we are saying that <code>f B' ∈ B'</code></p>",
        "id": 281197414,
        "sender_full_name": "Joseph O",
        "timestamp": 1651688111
    },
    {
        "content": "<p>or we are trying to prove that</p>",
        "id": 281197434,
        "sender_full_name": "Joseph O",
        "timestamp": 1651688121
    },
    {
        "content": "<p>Well, what im confused is how they got <code>f B' ∈ B'</code> from <code>X = B'</code></p>",
        "id": 281197566,
        "sender_full_name": "Joseph O",
        "timestamp": 1651688172
    },
    {
        "content": "<p>Did it say anywhere that <code>f X ∈ X</code></p>",
        "id": 281197866,
        "sender_full_name": "Joseph O",
        "timestamp": 1651688321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281197414\">said</a>:</p>\n<blockquote>\n<p>Because we are saying that <code>f B' ∈ B'</code></p>\n</blockquote>\n<p>Are you talking about <code>hp</code>? Because <code>by_cases hp : ⋯</code> is not like saying that <code>hp</code> is true. It's a way to prove what you want in both scenarios (when it's true and when it's false)</p>",
        "id": 281198097,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651688421
    },
    {
        "content": "<p>Well does this look correct so far?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">mem_set_of.mp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"n\">exists_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">X</span> <span class=\"n\">hXB'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hXB'</span> <span class=\"n\">at</span> <span class=\"n\">hI</span><span class=\"o\">,</span>\n      <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the goal of the last sorry is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span>\n<span class=\"n\">hXB'</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>which I have no idea how to prove</p>",
        "id": 281198353,
        "sender_full_name": "Joseph O",
        "timestamp": 1651688523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281197566\">said</a>:</p>\n<blockquote>\n<p>Well, what im confused is how they got <code>f B' ∈ B'</code> from <code>X = B'</code></p>\n</blockquote>\n<p>If that part of the proof is too mysterious for you, then ask for more detailed steps. Think of it as a convincing game. You're trying to prove something you're not convinced of. And this path is a painful one</p>",
        "id": 281198698,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651688683
    },
    {
        "content": "<p>Once you're convinced, then you'll have a better chance at convincing a machine</p>",
        "id": 281199080,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651688878
    },
    {
        "content": "<p>Sure Im asking them about it</p>",
        "id": 281199131,
        "sender_full_name": "Joseph O",
        "timestamp": 1651688888
    },
    {
        "content": "<p>I feel like introducing X here only confuses things - do you agree the proof is finished if you can prove <code>f B' ∈ B'</code>?</p>",
        "id": 281200646,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651689535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281200646\">said</a>:</p>\n<blockquote>\n<p>I feel like introducing X here only confuses things - do you agree the proof is finished if you can prove <code>f B' ∈ B'</code>?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 281201792,
        "sender_full_name": "Joseph O",
        "timestamp": 1651689971
    },
    {
        "content": "<p>Now the question is how do we prove that.</p>",
        "id": 281201871,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690010
    },
    {
        "content": "<p>If you need to prove that something is an element of a set defined by <code>{ a | something about a }</code>, the lemma <code>set.mem_set_of_eq</code> is a good first step</p>",
        "id": 281202266,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651690178
    },
    {
        "content": "<p><code>B'</code> is defined as <code>set B' := {y : α | ∃ x : set α, f x = y ∧ x ∈ B},</code> so would it work?</p>",
        "id": 281202740,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690379
    },
    {
        "content": "<p>Because with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>i get sortof an ugly error</p>",
        "id": 281202799,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690405
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">tactic.istep</span> <span class=\"mi\">54</span> <span class=\"mi\">6</span> <span class=\"mi\">54</span> <span class=\"mi\">6</span> <span class=\"mi\">182</span> <span class=\"n\">mem_set_of_eq</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">mem_set_of_eq</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">|</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">tactic</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n<span class=\"n\">B'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 281202841,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690425
    },
    {
        "content": "<p>Right, <code>mem_set_of_eq</code> is a lemma, so you'd write <code>rw mem_set_of_eq</code></p>",
        "id": 281202927,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651690446
    },
    {
        "content": "<p>Oh right</p>",
        "id": 281202943,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690453
    },
    {
        "content": "<p>Now our goal is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 281203113,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690538
    },
    {
        "content": "<p>Okay, so how do you prove an existential?</p>",
        "id": 281203254,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651690598
    },
    {
        "content": "<p><code>mem_set_of</code></p>",
        "id": 281203490,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690705
    },
    {
        "content": "<p>I believe</p>",
        "id": 281203536,
        "sender_full_name": "Joseph O",
        "timestamp": 1651690730
    },
    {
        "content": "<p>How would you prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281203811,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651690828
    },
    {
        "content": "<p>I honestly dont know.</p>",
        "id": 281204299,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691036
    },
    {
        "content": "<p>Is there a tactic for that?</p>",
        "id": 281204602,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691171
    },
    {
        "content": "<p>Generally, the easiest way to prove something exists with some property is by saying \"look, this object works\", and the tactic is <code>use B'</code></p>",
        "id": 281204729,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651691253
    },
    {
        "content": "<p>Or in Arthur's example, <code>use 5</code></p>",
        "id": 281204898,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651691330
    },
    {
        "content": "<p>I see.</p>",
        "id": 281205078,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691414
    },
    {
        "content": "<p>Now the goal is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 281205154,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691458
    },
    {
        "content": "<p>If you do <code>use 5</code> Lean will close the goal automatically because the property is too simple. But that's not always the case. If Lean can't prove the property automatically, it will turn the property into a goal for you to prove it</p>",
        "id": 281205177,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651691471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281205154\">said</a>:</p>\n<blockquote>\n<p>Now the goal is </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∉</span> <span class=\"n\">B'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>If we split the goal the first can be proved with <code>refl</code>, but the second...</p>",
        "id": 281205348,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691552
    },
    {
        "content": "<p>The second is again of the form something in { ... | ... }</p>",
        "id": 281205442,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651691607
    },
    {
        "content": "<p>Oh we can use <code>mem_set_of_eq</code></p>",
        "id": 281205467,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691624
    },
    {
        "content": "<p>Ok i proved it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 281205616,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691692
    },
    {
        "content": "<p>The final proof, completed!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">mem_set_of.mp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281205678,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691725
    },
    {
        "content": "<p>and lean says its correct!</p>",
        "id": 281205687,
        "sender_full_name": "Joseph O",
        "timestamp": 1651691730
    },
    {
        "content": "<p>(I'm not sure why we have both <code>mem_set_of</code> and <code>mem_set_of_eq</code>, but either works here)</p>",
        "id": 281205967,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651691882
    },
    {
        "content": "<p>This is the formatting you'll see more often in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">mem_set_of.mp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281206115,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651691967
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_set_of_eq\">docs#set.mem_set_of_eq</a> is <del>in core, and</del> stated weirdly; <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_set_of\">docs#set.mem_set_of</a> is newer and is less weird)</p>",
        "id": 281206225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651692040
    },
    {
        "content": "<p>Yeah I switched them all to <code>mem_set_of</code></p>",
        "id": 281206311,
        "sender_full_name": "Joseph O",
        "timestamp": 1651692092
    },
    {
        "content": "<p>Now this is something I recall reading from one of those backstage interviews: that sometimes the focus on typechecking can obfuscate the bigger mathematical picture. Now that you've proven it in Lean, would you be able to write a proof of your own, with your words?</p>",
        "id": 281206664,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651692262
    },
    {
        "content": "<p>Not that I'm saying that you should post it here. It's an investigation that you can do on your own. It's definitely something I do</p>",
        "id": 281206940,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651692410
    },
    {
        "content": "<p>Optional: you might be able to learn some tricks by comparing your version with this shorter version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_set_of_eq.mp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hs.2</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span> <span class=\"o\">⟨</span><span class=\"n\">B'</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281207040,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651692463
    },
    {
        "content": "<p>Oh man thats crazy</p>",
        "id": 281210155,
        "sender_full_name": "Joseph O",
        "timestamp": 1651693724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20cantor_injective/near/281207040\">said</a>:</p>\n<blockquote>\n<p>Optional: you might be able to learn some tricks by comparing your version with this shorter version:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">B'</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_set_of_eq.mp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hs.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hs.2</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span> <span class=\"o\">⟨</span><span class=\"n\">B'</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ill keep this on the side as a shorter variation, though I will stick to my version for now as a beginner and its more expressive despite being verbose</p>",
        "id": 281210220,
        "sender_full_name": "Joseph O",
        "timestamp": 1651693769
    },
    {
        "content": "<p>deleted</p>",
        "id": 281210375,
        "sender_full_name": "Joseph O",
        "timestamp": 1651693819
    },
    {
        "content": "<p>There are so many things I dont understand about the proof though</p>",
        "id": 281210712,
        "sender_full_name": "Joseph O",
        "timestamp": 1651693985
    },
    {
        "content": "<p>Well actually I understand it</p>",
        "id": 281210809,
        "sender_full_name": "Joseph O",
        "timestamp": 1651694029
    },
    {
        "content": "<p>My biggest question is how </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">⟨</span><span class=\"n\">B'</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>is equivalent to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 281210926,
        "sender_full_name": "Joseph O",
        "timestamp": 1651694072
    },
    {
        "content": "<p>Thats it</p>",
        "id": 281210940,
        "sender_full_name": "Joseph O",
        "timestamp": 1651694076
    },
    {
        "content": "<p><code>rw mem_set_of</code> is a \"no-op\" because its proof is <code>iff.rfl</code>, that is both sides are definitionally equal. <code>use B'</code>, is the same as <code>refine ⟨B', _⟩</code>, <code>split</code> is the same as <code>refine ⟨_, _⟩</code>.</p>",
        "id": 281211166,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651694178
    },
    {
        "content": "<p>That makes sense, though Im still confused how <code>rw mem_set_of</code> is implicitly applied</p>",
        "id": 281211907,
        "sender_full_name": "Joseph O",
        "timestamp": 1651694480
    },
    {
        "content": "<p>It's not applied or anything. It's simply that, when you give Lean something, it tries to \"unify\" it, which means performing a bunch of operations, notably replacing everything by its definition.</p>",
        "id": 281212176,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651694583
    },
    {
        "content": "<p>The <em>definition</em> of <code>f B' ∈ B'</code> is <code>f B' ∈ {y : α | ∃ x : set α, f x = y ∧ x ∈ B}</code>, whose <em>definition</em> is <code>∃ x : set α, f x = f B' ∧ x ∈ B}</code>.</p>",
        "id": 281212330,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651694663
    }
]