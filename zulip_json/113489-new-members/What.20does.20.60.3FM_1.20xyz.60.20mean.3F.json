[
    {
        "content": "<p>I am new to lean and when working on this section, <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#enumerated-types\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#enumerated-types</a> and  in the following snippet, when I do <code>#check weekday.rec</code> and <code>#check weekday.rec_on</code>, I see something like <code>?M_1 weekday.sunday</code> and <code>?M_1 n</code>.</p>\n<p>What does the form <code>?M_1 xyz</code> mean in a type signature?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">weekday</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">sunday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">monday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">tuessday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">wednesday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">thursday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">friday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">saturday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">weekday.rec</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">weekday.rec_on</span>\n</code></pre></div>",
        "id": 218839643,
        "sender_full_name": "Rajiv",
        "timestamp": 1607092485
    },
    {
        "content": "<p>I agree this is confusing. Try <code>#check @weekday.rec</code></p>",
        "id": 218839694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607092514
    },
    {
        "content": "<p>Thanks a lot. That helps! :-)</p>",
        "id": 218839924,
        "sender_full_name": "Rajiv",
        "timestamp": 1607092633
    },
    {
        "content": "<p>\"For all functions C from <code>weekday</code> to types, if you have a term of type <code>C sunday</code> and a term of type <code>C monday</code> and ... and a term of type <code>C saturday</code>, then I can give you a function which takes any weekday <code>n</code>, and returns a term of type <code>C n</code>\"</p>",
        "id": 218839940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607092644
    },
    {
        "content": "<p>Are there more examples of how to read <code>Π</code> type signatures somewhere? I am finding this way of reading type signatures quite useful.</p>",
        "id": 218921308,
        "sender_full_name": "Rajiv",
        "timestamp": 1607149264
    },
    {
        "content": "<p>I tried to read recursors when I was getting the hang of this stuff. For me when I was learning, I found it helpful to just focus on the idea that there were only two universes, <code>Prop</code> (the universe of types which represent true/false statements like 2+2=4 and 2+2+5) and <code>Type</code> (the universe of types which represent collections of stuff, like the real numbers). (This idea isn't actually true, there are infinitely many type universes because Type has to have a type, but this is just a quirk of the theory). When I see <code>Sort u</code> I would interpret it as meaning \"Either <code>Prop</code> or <code>Type</code>\". With that in mind, here is <code>nat.rec</code> (which is quite a difficult one):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nat.rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">d.succ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>If we interpret <code>Sort u</code> as <code>Prop</code>, this says the principle of mathematical induction, namely that for all families <code>C 0, C 1, C 2, ...</code> of true-false statements, if we know <code>C 0</code> is true and if we know that for all d, <code>C d</code> implies <code>C (d + 1)</code> (note that <code>d.succ</code> just means <code>d + 1</code>), then we can conclude that for all n, <code>C n</code> is true.</p>\n<p>If on the other hand we interpret <code>Sort u</code> as <code>Type</code>, then this says the principle of mathematical recursion, namely that for all families <code>C 0</code>, <code>C 1</code>, ... <code>C n</code>, ... of types or sets or however you want to think of them, if we have an element of <code>C 0</code>, and if we also have a method which given <code>d</code> and an element of <code>C d</code> produces an element of <code>C (d + 1)</code>, then we have a method to produce an element of <code>C n</code> for all <code>n</code>.</p>",
        "id": 218936811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607177637
    },
    {
        "content": "<p>Thanks again Prof. Kevin. I really appreciate your reply and pointers.</p>",
        "id": 218938714,
        "sender_full_name": "Rajiv",
        "timestamp": 1607180800
    }
]