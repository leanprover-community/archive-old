[
    {
        "content": "<p>Good morning, I'm working my way through the tutorial and I've stumbled across something I don't get. <br>\nIn chapter 11.2, you are encouraged to prove a certain theorem without propext, or more specifically, to prove that it's equivalent to the axiom.</p>\n<p>Here's the proof:</p>\n<div class=\"codehilite\"><pre><span></span>  theorem thm₃ : ((a ↔ b) → p a → p b) ↔ ((a ↔ b) → a = b) :=\n  begin\n    apply iff.intro,\n    intros h hab,\n    rw [hab],\n    intros ax h hpa,\n    from ax h ▸ hpa\n  end\n</pre></div>\n\n\n<p>I'm fairly confident, I don't use propext anywhere (it's being added as an assumption in of the two iff branches. But </p>\n<div class=\"codehilite\"><pre><span></span>  #print axioms thm₃\n</pre></div>\n\n\n<p>claims I'm using propext. And when I drill down into it, it looks like using substitution is what causes the message.</p>\n<p>Any explanation?</p>",
        "id": 173435119,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1566034947
    },
    {
        "content": "<p>You can prove <code>propext</code> directly using rewrite, so I guess <code>rw</code> must assume <code>propext</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">propext&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 173435423,
        "sender_full_name": "Joe",
        "timestamp": 1566035591
    },
    {
        "content": "<p>Also the theorem you want to prove should be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">thm₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 173435425,
        "sender_full_name": "Joe",
        "timestamp": 1566035638
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">thm₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">h</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">hab</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">h</span> <span class=\"n\">p</span> <span class=\"n\">hab</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hab</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 173435531,
        "sender_full_name": "Joe",
        "timestamp": 1566035838
    },
    {
        "content": "<p>well, I have a <code>variable p : Prop -&gt; Prop</code></p>",
        "id": 173435584,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1566035931
    },
    {
        "content": "<p>the version you stated isn't true</p>",
        "id": 173435591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566035970
    },
    {
        "content": "<p>if <code>p</code> is always true then the LHS is trivial</p>",
        "id": 173435593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566035985
    },
    {
        "content": "<p>it is important that the quantifier appear on the LHS as in Joe's version</p>",
        "id": 173435638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566036011
    },
    {
        "content": "<p>this is the full code:</p>\n<div class=\"codehilite\"><pre><span></span>section\n  variables a b c d e : Prop\n  variable p : Prop → Prop\n\n  theorem thm₁ (h : a ↔ b) : (c ∧ a ∧ d → e) ↔ (c ∧ b ∧ d → e) :=\n  propext h ▸ iff.refl _\n\n  theorem thm₂ (h : a ↔ b) (h₁ : p a) : p b :=\n  propext h ▸ h₁\n\n  theorem thm₃ : ((a ↔ b) → p a → p b) ↔ ((a ↔ b) → a = b) :=\n\n  begin\n    apply iff.intro,\n    intros h hab,\n    rw [hab],\n    intros ax h hpa,\n    from ax h ▸ hpa\n  end\n\n  #print axioms thm₃\nend\n</pre></div>",
        "id": 173435653,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1566036099
    },
    {
        "content": "<p>from what I understand about the syntax, <code>p</code> from the section is passed as an argument to thm_3, correct?</p>",
        "id": 173435696,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1566036134
    },
    {
        "content": "<p>it is</p>",
        "id": 173435697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566036139
    },
    {
        "content": "<p>but it is quantified at the top level, rather than on the LHS of the iff only</p>",
        "id": 173435702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566036161
    },
    {
        "content": "<p>i see</p>",
        "id": 173435703,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1566036180
    },
    {
        "content": "<p>i'm re-trying the proof with that different quantification, now</p>",
        "id": 173435757,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1566036291
    },
    {
        "content": "<p>thanks, got it working!</p>",
        "id": 173436259,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1566037401
    }
]