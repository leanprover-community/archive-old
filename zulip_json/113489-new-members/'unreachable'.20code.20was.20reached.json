[
    {
        "content": "<p>Lean version 3.35.1</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span>\n</code></pre></div>\n<p>Error: <code>'unreachable' code was reached</code>. What does it mean?</p>",
        "id": 262459404,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1637676257
    },
    {
        "content": "<p>in this case, it indicates a bug in Lean</p>",
        "id": 262459768,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637676449
    },
    {
        "content": "<p>Do you have a real example?</p>",
        "id": 262461487,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637677257
    },
    {
        "content": "<p>It's hard to guess what feature(s) of <code>id</code> might be relevant</p>",
        "id": 262461541,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637677284
    },
    {
        "content": "<p>In Lean 4 it gives a much better error: <code>only trivial inductive applications supported in premises</code></p>",
        "id": 262461939,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1637677445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/'unreachable'.20code.20was.20reached/near/262461487\">said</a>:</p>\n<blockquote>\n<p>Do you have a real example?</p>\n</blockquote>\n<p>hmm what do you mean by \"real example\"? <a href=\"https://tio.run/##y0lNzPv/PzMvpTS5JLMsVSFAwUohoCi/gKtGITcbyM5MAQo9apukEMD1/z8A\">I ran exactly that code on TIO and it produced the exact same error</a>, so this is pretty much a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 262462980,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1637677924
    },
    {
        "content": "<p>An example which achieves something useful</p>",
        "id": 262463357,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637678097
    },
    {
        "content": "<p>You can actually get a whole bunch of distinct errors for various combinations of whether it is a <code>def</code> or <code>abbreviation</code>, and whether it is constructing a simple kernel inductive or a nested inductive in the end:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.inductive_compiler.nested.simp.failure</span> <span class=\"n\">true</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span>\n<span class=\"c1\">-- simplifier failed to prove goal; trace 'inductive_compiler.nested.simp.failure' for more information</span>\n\n<span class=\"c1\">-- [inductive_compiler.nested.simp.failure]</span>\n<span class=\"c1\">-- -------------------</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo2</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">P2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">foo2</span> <span class=\"n\">P2</span> <span class=\"bp\">→</span> <span class=\"n\">P2</span>\n<span class=\"c1\">-- type mismatch at definition 'P2.mk.sizeof_spec', has type</span>\n<span class=\"c1\">--   ∀ (ᾰ : foo2 P2), P2.sizeof (P2.mk ᾰ) = P2.sizeof (P2.mk ᾰ)</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   ∀ (ᾰ : foo2 P2), P2.sizeof (P2.mk ᾰ) = 1</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">foo3</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">P3</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">foo3</span> <span class=\"n\">P3</span> <span class=\"bp\">→</span> <span class=\"n\">P3</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">P3.mk</span> <span class=\"c1\">-- P3.mk : foo3 P3 → P3</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">P3.rec</span> <span class=\"c1\">-- P3.rec : Π (C : P3 → Sort u_1), (Π (ᾰ : P3 × P3), C (P3.mk ᾰ)) → Π (x : P3), C x</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">foo4</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">P4</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">foo4</span> <span class=\"n\">P4</span> <span class=\"bp\">→</span> <span class=\"n\">P4</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">P4.mk</span> <span class=\"c1\">-- P4.mk : foo4 P4 → P4</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">P4.rec</span> <span class=\"c1\">-- P4.rec : Π {motive : P4 → Sort u_1},</span>\n               <span class=\"c1\">--   (Π (ᾰ : foo4 P4), motive ᾰ → motive (P4.mk ᾰ)) → Π (n : P4), motive n</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">foo5</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"n\">X</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">P5</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">foo5</span> <span class=\"n\">P5</span> <span class=\"bp\">→</span> <span class=\"n\">P5</span>\n<span class=\"c1\">-- invalid nested occurrence 'and P5 P5', either both must eliminate to Type or both must eliminate only to Prop</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">foo6</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">P6</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">foo6</span> <span class=\"n\">P6</span> <span class=\"bp\">→</span> <span class=\"n\">P6</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">P6.mk</span> <span class=\"c1\">-- P6.mk : foo6 P6 → P6</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">P6.rec</span> <span class=\"c1\">-- P6.rec : Π {motive : Sort u_1}, (foo6 P6 → motive → motive) → P6 → motive</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">P6.drec</span> <span class=\"c1\">-- P6.drec : Π {motive : P6 → Sort u_1}, (Π (ᾰ : foo6 P6), motive ᾰ → motive _) → Π (n : P6), motive n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo8</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">P8</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">foo8</span> <span class=\"n\">P8</span> <span class=\"bp\">→</span> <span class=\"n\">P8</span>\n<span class=\"c1\">-- LEAN ASSERTION VIOLATION</span>\n<span class=\"c1\">-- File: /home/mario/Documents/lean/lean/src/library/constructions/drec.cpp</span>\n<span class=\"c1\">-- Line: 132</span>\n<span class=\"c1\">-- Task: /home/mario/Documents/lean/lean/library/test.lean: parsing at line 41</span>\n<span class=\"c1\">-- j - num_fields &lt; recursive_params.size()</span>\n</code></pre></div>",
        "id": 262545920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637728709
    },
    {
        "content": "<p>Part of the problem is that I'm not sure what the answer is even supposed to be. The error occurs during the construction of the type of the <code>T.drec</code> recursor for the inductive type, and you can see that different combinations here result in different types. Notice, for example, that the minor premise of <code>P3.rec</code> unfolds the definition in <code>(ᾰ : P3 × P3)</code>, while <code>P4.rec</code> and <code>P6.drec</code> don't: <code>(ᾰ : foo4 P4)</code></p>",
        "id": 262546082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637728951
    },
    {
        "content": "<p>Should I worry about the consistency of the kernel? The <code>'unreachable' code was reached</code> indicates that someone didn't expect such use case, which means that there may be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">Not</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">Not</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span>\n</code></pre></div>\n<p>that would allow us to prove <code>P ↔ ¬P</code> and then <code>0 = 1</code></p>",
        "id": 262550429,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1637735071
    },
    {
        "content": "<p>This code is not part of the kernel</p>",
        "id": 262556508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637741456
    },
    {
        "content": "<p>The issue is not with the kernel spec, but rather what the front end is allowed to desugar to the kernel spec. The kernel spec says nothing about definitions, and would reject all these examples, but the front end thinks it would be fine as long as the generated types are defeq to the kernel types</p>",
        "id": 262556636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637741548
    },
    {
        "content": "<p>and then there is additional complication when it is a nested inductive, in which case even after unfolding definitions you get something that is not a valid kernel inductive and the front end does a more complicated simulation of the nested inductive (which is known to have bugs and be generally unreliable)</p>",
        "id": 262556705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637741629
    }
]