[
    {
        "content": "<p>Hi All!</p>\n<p>I try to proof Weak law in Lean(there is  no in mathlib). I already proof the main step which is the applying chebyshev inequality for our case(ineq in code below).  What I want to now is just to say that probability estimated by chebyshev inequality which converges to 0. However, I ran into a problem of definition of tends_to which is definite by filtration. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">probability.ident_distrib</span>\n<span class=\"kn\">import</span> <span class=\"n\">probability.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">probability.integration</span>\n<span class=\"kn\">import</span> <span class=\"n\">probability.variance</span>\n\n\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">filter</span> <span class=\"n\">finset</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">big_operators</span> <span class=\"n\">measure_theory</span> <span class=\"n\">probability_theory</span> <span class=\"n\">ennreal</span> <span class=\"n\">nnreal</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">probability_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Œ©</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"bp\">Œ©</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_probability_measure</span> <span class=\"o\">(</span><span class=\"n\">‚Ñô</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"bp\">Œ©</span><span class=\"o\">)][</span><span class=\"n\">œâ</span><span class=\"o\">:</span><span class=\"bp\">Œ©</span><span class=\"o\">][</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span>\n\n\n\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Weak_Law</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">integrable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hindep</span> <span class=\"o\">:</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">indep_fun</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">j</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">hident</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ident_distrib</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">mem_‚Ñíp</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">):</span>\n<span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">‚Ñô</span> <span class=\"o\">{</span><span class=\"n\">œâ</span> <span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">‚â§|</span><span class=\"o\">(</span><span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"o\">)</span> <span class=\"n\">œâ</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"bp\">*ùîº</span><span class=\"o\">[(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)]</span><span class=\"bp\">|</span><span class=\"o\">})</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">ineq</span><span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">‚Ñô</span> <span class=\"o\">{</span><span class=\"n\">œâ</span> <span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">m</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"o\">)</span> <span class=\"n\">œâ</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"bp\">*ùîº</span><span class=\"o\">[(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)]</span><span class=\"bp\">|</span><span class=\"o\">})</span> <span class=\"bp\">‚â§</span> <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"n\">Var</span><span class=\"o\">[(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">)),</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tendsto_def</span><span class=\"o\">,</span>\n\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">probability_theory</span>\n</code></pre></div>\n<p>As I understand it is very useful in lots of case but here I supposed to use usual definition of limits. Can I try to reformulate it for usual epsilon-delta definition(or analogue) or It should be proofed by filtration tools? Thank you in advance!</p>",
        "id": 299707576,
        "sender_full_name": "Daniil Homza",
        "timestamp": 1663663770
    },
    {
        "content": "<p>I am not answering your question, but we already have the strong law in mathlib, which is stronger than the weak law. But I would understand perfectly if you want to redo a proof on your own based on elementary principles, as it is always instructive.</p>",
        "id": 299708578,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1663664231
    },
    {
        "content": "<p>To answer your question, you have the lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.tendsto_at_top\">docs#metric.tendsto_at_top</a></p>",
        "id": 299709403,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1663664542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/Limit.20definition.20issue.2E.20Probability.20theory/near/299709403\">said</a>:</p>\n<blockquote>\n<p>To answer your question, you have the lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.tendsto_at_top\">docs#metric.tendsto_at_top</a></p>\n</blockquote>\n<p>I try to use <code>rewrite</code>  tactic with   <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.tendsto_at_top\">docs#metric.tendsto_at_top</a> but lean did not find instance of the pattern. Should I somehow add all necessary information(as in documentation <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pseudo_metric_space\">docs#pseudo_metric_space</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/no_max_order\">docs#no_max_order</a> and so on ) about my space (N, R&gt;=0) to be able apply it?</p>",
        "id": 299717340,
        "sender_full_name": "Daniil Homza",
        "timestamp": 1663668043
    },
    {
        "content": "<p>Sorry, you are in ennreal and not in a metric space. Use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.tendsto_nhds_zero\">docs#ennreal.tendsto_nhds_zero</a> instead.</p>",
        "id": 299720625,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1663669326
    },
    {
        "content": "<p>The original lemma <code>metric.tendsto_at_top</code> wants a so-called <code>pseudo_metric_space</code>. When I hover over this I see the following docstring, which I found unhelpful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Metric space</span>\n\n<span class=\"sd\">Each metric space induces a canonical `uniform_space` and hence a canonical `topological_space`.</span>\n<span class=\"sd\">This is enforced in the type class definition, by extending the `uniform_space` structure. When</span>\n<span class=\"sd\">instantiating a `metric_space` structure, the uniformity fields are not necessary, they will be</span>\n<span class=\"sd\">filled in by default. In the same way, each metric space induces an emetric space structure.</span>\n<span class=\"sd\">It is included in the structure, but filled in by default.</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>\n<p>My question: what is a pseudo-metric space, and should the docstring tell us this, rather than telling us something which I don't really understand (it seems to assume I know what an \"emetric space\" is) and which doesn't answer the obvious question (namely, what the heck is a pseudo-metric space?)</p>",
        "id": 299721282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663669640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/Limit.20definition.20issue.2E.20Probability.20theory/near/299708578\">said</a>:</p>\n<blockquote>\n<p>I am not answering your question, but we already have the strong law in mathlib, which is stronger than the weak law. </p>\n</blockquote>\n<p>The weak law remains to hold without assuming identically distributed via the Chebyshev inequality proof so its not strictly weaker than the strongly law right?</p>",
        "id": 299721917,
        "sender_full_name": "Jason KY.",
        "timestamp": 1663669917
    },
    {
        "content": "<p>If you do assume identically distributed (which is what you assume in your current formulation) you can get the weak law by composing the strong law with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.tendsto_in_measure_of_tendsto_ae\">docs#measure_theory.tendsto_in_measure_of_tendsto_ae</a></p>",
        "id": 299722384,
        "sender_full_name": "Jason KY.",
        "timestamp": 1663670134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Limit.20definition.20issue.2E.20Probability.20theory/near/299721282\">said</a>:</p>\n<blockquote>\n<p>The original lemma <code>metric.tendsto_at_top</code> wants a so-called <code>pseudo_metric_space</code>. When I hover over this I see the following docstring, which I found unhelpful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Metric space</span>\n\n<span class=\"sd\">Each metric space induces a canonical `uniform_space` and hence a canonical `topological_space`.</span>\n<span class=\"sd\">This is enforced in the type class definition, by extending the `uniform_space` structure. When</span>\n<span class=\"sd\">instantiating a `metric_space` structure, the uniformity fields are not necessary, they will be</span>\n<span class=\"sd\">filled in by default. In the same way, each metric space induces an emetric space structure.</span>\n<span class=\"sd\">It is included in the structure, but filled in by default.</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>\n<p>My question: what is a pseudo-metric space, and should the docstring tell us this, rather than telling us something which I don't really understand (it seems to assume I know what an \"emetric space\" is) and which doesn't answer the obvious question (namely, what the heck is a pseudo-metric space?)</p>\n</blockquote>\n<p>The doc needs to be fixed, but a <code>pseudo_metric_space</code> is like a metric space, without <code>d(x,y)=0 ‚Üí x = y</code>. They've been introduced because we needed them in the LTE.</p>",
        "id": 299722931,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663670355
    },
    {
        "content": "<p>Yeah, that sounds like a much better docstring :-) Thanks! I can never remember which generalisation is which (presumably the e one is the one which allows infinity). (oh -- penny drops -- like ereal and enat)</p>",
        "id": 299723469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663670579
    },
    {
        "content": "<p>We also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pseudo_emetric_space\">docs#pseudo_emetric_space</a></p>",
        "id": 299724858,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663671209
    },
    {
        "content": "<p>It's sad that the normed thing is called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/seminormed_add_comm_group\">docs#seminormed_add_comm_group</a>, but this seems to be the standard terminology</p>",
        "id": 299725100,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663671301
    },
    {
        "content": "<p>(And in the LTE there are pseudonormed groups, to make things even worse)</p>",
        "id": 299725206,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663671343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/Limit.20definition.20issue.2E.20Probability.20theory/near/299720625\">said</a>:</p>\n<blockquote>\n<p>Sorry, you are in ennreal and not in a metric space. Use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.tendsto_nhds_zero\">docs#ennreal.tendsto_nhds_zero</a> instead.</p>\n</blockquote>\n<p>Or even <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.tendsto_at_top_zero\">docs#ennreal.tendsto_at_top_zero</a></p>",
        "id": 299732790,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1663674643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> <a href=\"#narrow/stream/113489-new-members/topic/Limit.20definition.20issue.2E.20Probability.20theory/near/299721917\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/Limit.20definition.20issue.2E.20Probability.20theory/near/299708578\">said</a>:</p>\n<blockquote>\n<p>I am not answering your question, but we already have the strong law in mathlib, which is stronger than the weak law. </p>\n</blockquote>\n<p>The weak law remains to hold without assuming identically distributed via the Chebyshev inequality proof so its not strictly weaker than the strongly law right?</p>\n</blockquote>\n<p>What do You mean by Weak Law? I am assume that there are i.i.d., but actually it is easy to fixed using only independence and assumption on a same expected value and variance. Is it version which You think of?</p>",
        "id": 299742622,
        "sender_full_name": "Daniil Homza",
        "timestamp": 1663678372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/Limit.20definition.20issue.2E.20Probability.20theory/near/299732790\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/Limit.20definition.20issue.2E.20Probability.20theory/near/299720625\">said</a>:</p>\n<blockquote>\n<p>Sorry, you are in ennreal and not in a metric space. Use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.tendsto_nhds_zero\">docs#ennreal.tendsto_nhds_zero</a> instead.</p>\n</blockquote>\n<p>Or even <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.tendsto_at_top_zero\">docs#ennreal.tendsto_at_top_zero</a></p>\n</blockquote>\n<p>Yes, now is perfect, Thank you!</p>",
        "id": 299742703,
        "sender_full_name": "Daniil Homza",
        "timestamp": 1663678399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"525359\">Daniil Homza</span> <a href=\"#narrow/stream/113489-new-members/topic/Limit.20definition.20issue.2E.20Probability.20theory/near/299742622\">said</a>:</p>\n<blockquote>\n<p>What do You mean by Weak Law? I am assume that there are i.i.d., but actually it is easy to fixed using only independence and assumption on a same expected value and variance. Is it version which You think of?</p>\n</blockquote>\n<p>Yes, that's exactly what I'm saying</p>",
        "id": 299744735,
        "sender_full_name": "Jason KY.",
        "timestamp": 1663679064
    }
]