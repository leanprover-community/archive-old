[
    {
        "content": "<p>Hey! Short question: In MLTT, you can pretty much by definition get a map <code>A -&gt; B</code> from equality <code>A = B</code>. Am I right that this is not possible in lean due to <code>eq</code> living in <code>Prop</code> ? Is there an analogous non propositional identity allowing for such transport?</p>",
        "id": 273193133,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1645770071
    },
    {
        "content": "<p>Also, how much sense does it make to interpret inductive types defined as living in <code>Prop</code> to be \"propositionally truncated\" (in the HoTT sense): You first assume your newly defined inductive type to live in whichever large enough universe it would fit, and then take the propositional truncation, which means that (1) your type is now a <code>Prop</code>; and (2) the only way to get _out_ of this type is by mapping to a <code>Prop</code>.</p>",
        "id": 273194743,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1645772047
    },
    {
        "content": "<p>You do get <code>A -&gt; B</code> from <code>A = B</code>, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cast\">docs#cast</a>. Essentially, <code>eq</code> is an inductive type family with a fully general elimination rule . And <em>also</em>, separately from this, it is a proposition. You're right that for general inductive types, like <code>nat</code>, it wouldn't make sense to both make it a proposition and allow elimination into non-propositions. But it makes sense for some inductive types, including <code>eq</code>. I believe the technical term is \"syntactic subsingleton\".</p>",
        "id": 273200683,
        "sender_full_name": "David Wärn",
        "timestamp": 1645777955
    },
    {
        "content": "<p>It is called \"large elimination\" or \"subsingleton elimination\" in <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> . Certain propositional inductive types have a recursor targeting all universes, if they meet a syntactic criterion for being a subsingleton</p>",
        "id": 273200938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645778148
    },
    {
        "content": "<p>important examples of this are <a href=\"https://leanprover-community.github.io/mathlib_docs/find/false\">docs#false</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/and\">docs#and</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq\">docs#eq</a>, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/acc\">docs#acc</a></p>",
        "id": 273200997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645778188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> <a href=\"#narrow/stream/113489-new-members/topic/Transport.20along.20identity/near/273194743\">said</a>:</p>\n<blockquote>\n<p>Also, how much sense does it make to interpret inductive types defined as living in <code>Prop</code> to be \"propositionally truncated\" (in the HoTT sense): You first assume your newly defined inductive type to live in whichever large enough universe it would fit, and then take the propositional truncation, which means that (1) your type is now a <code>Prop</code>; and (2) the only way to get _out_ of this type is by mapping to a <code>Prop</code>.</p>\n</blockquote>\n<p>This \"squash\" elaboration of inductive types is explicitly worked out in the \"reduction to W-types\" chapter of <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> . The short answer is: except for large eliminating types, this is a correct model for how the inductives work. The \"squash to <code>Prop</code>\" operator in lean is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonempty\">docs#nonempty</a> . For large eliminating types, you need a separate encoding which writes them in terms of <code>eq</code> and <code>acc</code> to preserve the large eliminating behavior</p>",
        "id": 273201455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645778457
    },
    {
        "content": "<p>Thanks! <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> is quite a bit more technical than what I can easily digest, but I think i'm slowly getting the gist of it. If I'm not mistaken, inductive families as used in lean were introduced by Dybjer first; is this \"subsingleton elimination\" thing a \"patch\" added later on or did he introduce it at the same time?</p>",
        "id": 273322749,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1645857939
    },
    {
        "content": "<p>Two more questions if I may:<br>\n1) Taking this view of \"Propositional inductive types as propositionally truncated\": can I expand the analogy to say that \"subsingleton elimination\" should be interpreted as the inductive type _already_ being a proposition? It at least makes sense intuitively for <code>and</code> and <code>eq</code>, since I think lean has UIP and <code>and</code> preserves the property of being a proposition/subsingleton.<br>\n2) Am I correct that any inductive (indexed?) type (family?) can be encoded in terms of W types + equality? It seems to be the case from your paper, but you also mention <code>acc</code>, which I don't exactly understand.</p>",
        "id": 273338646,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1645879520
    },
    {
        "content": "<p>I think that (1) is true, but I'm honestly not sure where/when subsingleton elimination was introduced.</p>\n<p>As for (2), Dybjer's original work actually presented two equivalent schema for inductive type families: the nowadays standard form (\"generalized inductive type families\") where each constructor _computes_ its type indices from arguments and an alternative form (\"restricted inductive type families\") where each constructor _constrains_ its type indices with equality arguments. As a caveat, W-types aren't _quite_ enough to get the proof theory of inductive type families, unless you have functional extensionality.</p>",
        "id": 273353026,
        "sender_full_name": "Nathaniel Yazdani",
        "timestamp": 1645896960
    },
    {
        "content": "<p>Would you happen to know of a resource explaining/comparing the two approaches (and this W-type not being enough problem)?</p>",
        "id": 273353325,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1645897423
    },
    {
        "content": "<p>The only comparison that I can recommend is the introduction of <a href=\"http://www.cse.chalmers.se/~peterd/papers/Indexed_IR.pdf\">this paper from Dybjer</a>, although the rest of the paper is in the more complicated context of inductive-recursive definitions rather than just inductive definitions, <em>i.e.</em>, inductive type families. (Btw, this paper was probably what I was remembering in my previous comment; now i'm unsure whether there is a single Dybjer paper that presents inductive type families with both \"computed indices\" and \"constrained indices.\") </p>\n<p>As for W-types, <a href=\"http://www.cse.chalmers.se/~peterd/papers/Setsem_Inductive.pdf\">this other Dybjer paper</a> gives a rather concise explanation of why W-types cannot perfectly encode inductive types (as the root problem is the same for inductive type families).</p>",
        "id": 273356607,
        "sender_full_name": "Nathaniel Yazdani",
        "timestamp": 1645901651
    },
    {
        "content": "<p>oh, <a href=\"https://mazzo.li/epilogue/index.html%3Fp=324.html\">this blog post by Conor McBride</a> is an even better explanation of how W-types and equality relate in dependent type theory!</p>",
        "id": 273357678,
        "sender_full_name": "Nathaniel Yazdani",
        "timestamp": 1645902765
    },
    {
        "content": "<p>There is also a chapter on reduction to W-types in my thesis <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> . The short answer is that you can use plain W-types as long as you have eta for structures or the restricted version, eta for pairs and ulift. (Without this, you can get by with indexed W-types.) Also large eliminating props need a different encoding using acc, which is in some sense the equivalent of W for props.</p>",
        "id": 273388232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645946718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> <a href=\"#narrow/stream/113489-new-members/topic/Transport.20along.20identity/near/273322749\">said</a>:</p>\n<blockquote>\n<p>If I'm not mistaken, inductive families as used in lean were introduced by Dybjer first; is this \"subsingleton elimination\" thing a \"patch\" added later on or did he introduce it at the same time?</p>\n</blockquote>\n<p>I'm also not sure who introduced subsingleton elimination or its reasonable-but-complex rules for validity. It's not in the Dybjer papers that lean cites, and deals essentially with the interaction between inductive types and the impredicative and proof-irrelevant <code>Prop</code> universe, which as I understand it was introduced to address some perceived deficiencies in the Coq model (which were later also added to Coq in the form of the <code>SProp</code> universe). Perhaps <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> might know?</p>",
        "id": 273388582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645947193
    },
    {
        "content": "<p>Sorry for hijacking this thread, but I'm trying to understand <code>ite</code>, and this is close enough to be related I guess… In the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">dif_pos</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">dite</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">is_true</span> <span class=\"n\">hc</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">is_false</span> <span class=\"n\">hnc</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"n\">hc</span> <span class=\"n\">hnc</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is it true that we can make use of <code>rfl</code> because <code>c</code> is a <code>Prop</code>, hence a subsingleton? As I see it, if <code>c</code> was a type with more than one element, it wouldn't necessary be the case that the <code>hc</code> of <code>is_true hc</code> is the same as the <code>hc</code> given as a parameter, hence the resulting <code>then</code> branch would maybe result in something different. Am I mistaken?</p>",
        "id": 273404101,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1645969119
    },
    {
        "content": "<p>That's correct. The <code>hc</code> in the match is only defeq to the <code>hc</code> passed to the theorem because of proof irrelevance</p>",
        "id": 273404545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645969677
    },
    {
        "content": "<p>Ah, <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a>, last rule of p. 6! Prop is \"judgementally a subsingleton\"</p>",
        "id": 273404596,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1645969724
    },
    {
        "content": "<p>Thanks a lot, it's nice when things seem to get into place :)</p>",
        "id": 273404611,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1645969774
    },
    {
        "content": "<p>also illustrated by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/proof_irrel/src\">src#proof_irrel</a></p>",
        "id": 273404613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645969777
    },
    {
        "content": "<p>I'm looking at the proof that left inverses behave well assuming choice and all (last part of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a>) and the combination of it all seems quite magic.</p>",
        "id": 273404774,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1645969929
    },
    {
        "content": "<p>lowercase: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a></p>",
        "id": 273404788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645969965
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 273406720,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1645972480
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 273406752,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1645972556
    },
    {
        "content": "<blockquote>\n<p>Perhaps Jeremy Avigad might know?</p>\n</blockquote>\n<p>I am afraid I don't. When I first learned Coq in 2009, Russell O'Connor told me about singleton elimination, and explained how using it with a well-founded predicate can be used to do a search for a natural number satisfying a decidable predicate. Google turned up this: <a href=\"https://coq.inria.fr/library/Coq.Logic.ConstructiveEpsilon.html\">https://coq.inria.fr/library/Coq.Logic.ConstructiveEpsilon.html</a>. </p>\n<p>But as as already been noted, subsingleton elimination is implicitly used to justify the elimination rule for equality. The rules for equality types, in the predicate setting, go back to Martin-Löf's formulations of type theory in the 1970s (<a href=\"https://ncatlab.org/nlab/show/identity+type\">https://ncatlab.org/nlab/show/identity+type</a>). I don't really know the history of how equality type was first formulated as an inductive type in the impredicative setting and linked to subsingleton elimination. This 1989 paper by Pfenning and Paulin-Mohring describes equality as an inductive type, but I don't see any elimination rules: <a href=\"https://www.cs.cmu.edu/~fp/papers/mfps89.pdf\">https://www.cs.cmu.edu/~fp/papers/mfps89.pdf</a>. This paper by Coquand and Paulin-Mohring from around the same time mentions the need to restrict elimination from Prop, but I don't see any mention of equality or subsingleton elimination: <a href=\"http://david.darais.com/assets/Inductively_Defined_Types--Coquand+Paulin.pdf\">http://david.darais.com/assets/Inductively_Defined_Types--Coquand+Paulin.pdf</a>. Section 3.3 of the 1993 paper give the inductive characterizations of Acc and Eq, it it seems that they only eliminate to Prop: <a href=\"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.32.5387&amp;rep=rep1&amp;type=pdf\">https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.32.5387&amp;rep=rep1&amp;type=pdf</a>,</p>\n<p>There is a lot of history here: <a href=\"https://coq.inria.fr/refman/history.html\">https://coq.inria.fr/refman/history.html</a>. (Search in \"inductive\" \"Paulin\" \"equality\" etc.). There is the following note regarding version 7.3, which was released in the early 2000s:</p>\n<p>\"Changes in the allowed elimination sorts for certain class of inductive definitions : an inductive definition without constructors of Sort Prop can be eliminated on sorts Set and Type A \"singleton\" inductive definition (one constructor with arguments in the sort Prop like conjunction of two propositions or equality) can be eliminated directly on sort Type (In V7.2, only the sorts Prop and Set were allowed).\"</p>\n<p>This might be what we are looking for: one of the first documented instances of using a subsingleton argument to justify elimination from Prop to Type.</p>",
        "id": 273410094,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1645976765
    },
    {
        "content": "<p>Another thing: In the sources, I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cast_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cast</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>which I understand to be true since <code>h</code> is defeq to <code>eq.refl  α</code>, so that casting \"along <code>h</code>\" is defeq equal to casting \"along <code>eq.refl  α</code>\", which I want to be equal to the identity. But why exactly is that last claim true? In my \"HoTT book understanding\", transport is defined using <code>J</code> and the base case is exactly what we need. But here I'm not sure.</p>",
        "id": 273776715,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646212620
    },
    {
        "content": "<p>Lean has proof-irrelevance: since <code>eq</code> is a <code>Prop</code>, every proof of equality is automatically defeq to <code>rfl</code>.</p>",
        "id": 273776861,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1646212693
    },
    {
        "content": "<p>But that only covers the fact that <code>h</code> is defeq to <code>rfl</code>, doesn't it? I still have to provide a term of the form <code>cast h a = a</code>.</p>",
        "id": 273777194,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646212895
    },
    {
        "content": "<p>In lean if <code>P : Prop</code> and <code>h1 : P</code> and <code>h2 : P</code> then <code>h1 = h2</code> and the proof is <code>rfl</code>. This is very much not like HoTT.</p>",
        "id": 273779273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646213970
    },
    {
        "content": "<p><code>cast h a</code> unfolds to <code>eq.rec h a</code> or similar, which as you remark is the same as <code>eq.rec rfl a</code>; and recursors unfold definitionally on constructors</p>",
        "id": 273779404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646214015
    },
    {
        "content": "<p>Ah, I see what I got wrong: The equality type is \"based\" in lean, contrary to, say agda (or at least the one I know of), which I didn't take into account.</p>",
        "id": 273786919,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646217976
    },
    {
        "content": "<p>I think the term is \"indexed\" rather than \"based\". In any case, is <code>eq</code> implemented this way to allow subsingleton elimination, or am I off-base here?</p>",
        "id": 273790343,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646219579
    },
    {
        "content": "<p>The \"based\" formulation of <code>eq</code> seems strictly better than the other version, I don't see any downside to it. I assume you are asking why it is defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>rather than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">eq'</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eq'</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 273791210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646220060
    },
    {
        "content": "<p>This makes a difference in the recursors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">eq.rec</span>\n<span class=\"c1\">-- protected eliminator eq.rec : Π {α : Sort u} {a : α} {motive : α → Sort l},</span>\n<span class=\"c1\">--   motive a → Π {x : α}, a = x → motive x</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">eq'.rec</span>\n<span class=\"c1\">-- protected eliminator eq'.rec : Π {α : Sort u_1} {motive : α → α → Sort l},</span>\n<span class=\"c1\">--   (Π (a : α), motive a a) → Π {x y : α}, eq' x y → motive x y</span>\n</code></pre></div>",
        "id": 273791362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646220137
    },
    {
        "content": "<p>In order to use the second one, you need both sides of the equality to be variables; in the first one only the RHS has to be a variable</p>",
        "id": 273791428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646220176
    },
    {
        "content": "<p>You can prove them equivalent, of course, but the first one is easier to use directly</p>",
        "id": 273791474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646220193
    },
    {
        "content": "<p>So, nothing to do with subsingleton elimination?</p>",
        "id": 273791964,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646220404
    },
    {
        "content": "<p>they are both subsingleton eliminators, which you can tell above by noting that both versions live in <code>Prop</code> and yet have a motive that targets <code>Sort l</code></p>",
        "id": 273792119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646220487
    },
    {
        "content": "<p>Also, since you're here: </p>\n<ol>\n<li>Why is <code>eq</code> defined with <code>| refl [] : eq a</code>; why the <code>[]</code> ?</li>\n<li>Defining a type <code>eq2</code> which is exactly the same as <code>eq</code> and then <br>\n<code>def tr {α : Sort*} {P : α → Sort*} {a b : α} (p : Eq2 a  b) (x : P a) : P b := @eq2.rec α a P x b p</code><br>\n  , I get an error: <br>\n<code>``failed to generate bytecode for 'tr' code generation failed, inductive predicate 'eq2' is not supported</code>  <br>\n  Does that mean <code>eq</code> has some built-in stuff to it?</li>\n</ol>",
        "id": 273792568,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646220666
    },
    {
        "content": "<ol>\n<li>Compare with and without <code>[]</code>:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">eq'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">eq'</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">eq.refl</span>\n<span class=\"c1\">-- constructor eq.refl : ∀ {α : Sort u} (a : α), a = a</span>\n<span class=\"k\">#print</span> <span class=\"n\">eq'.refl</span>\n<span class=\"c1\">-- constructor eq'.refl : ∀ {α : Sort u} {a : α}, eq' a a</span>\n</code></pre></div>",
        "id": 273792758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646220757
    },
    {
        "content": "<p><code>refl</code> with an implicit <code>a</code> argument is also useful, we call it <code>rfl</code>, but for historical reasons that's not the constructor</p>",
        "id": 273792817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646220801
    },
    {
        "content": "<p>Note that <code>[]</code> used to be the default and <code>{}</code> was not; the default got switched at one point and so <code>eq.refl</code> got a <code>[]</code> to avoid breakage</p>",
        "id": 273792956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646220868
    },
    {
        "content": "<p>Hum, the only difference I see is <code>eq' a a</code> vs <code>a = a</code>, which I take to be pretty printing. Am I missing something?</p>",
        "id": 273793022,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646220915
    },
    {
        "content": "<p>the braces around <code>a</code></p>",
        "id": 273793188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646220993
    },
    {
        "content": "<p>ah, right, sorry!</p>",
        "id": 273793237,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646221011
    },
    {
        "content": "<ol start=\"2\">\n<li>Yes, inductive predicates could be supported but almost all large eliminating props are written in terms of <code>eq</code> and <code>acc</code> in practice, so the current implementation skimps out and just implements code generation manually on these two types</li>\n</ol>",
        "id": 273793241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646221013
    },
    {
        "content": "<p>there are three other large eliminating predicates in lean: <code>true</code>, <code>false</code>, and <code>and</code>. <code>true.rec</code> is totally useless and never used, <code>false.rec</code> is deliberately unimplemented since it's impossible to call, and <code>and.rec</code>... not sure</p>",
        "id": 273793423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646221086
    },
    {
        "content": "<p>looks like <code>and.rec</code> works too</p>",
        "id": 273793527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646221142
    },
    {
        "content": "<p>Actually, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">inductive</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>is trippy to read, since the <code>eq a</code> in the second line really is more like <code>eq a a</code>.</p>",
        "id": 273793774,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646221241
    },
    {
        "content": "<p>Iirc, that's because the index is not needed in the constructors.</p>",
        "id": 273793822,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646221266
    },
    {
        "content": "<p>Lean 4 addresses this by making the parameters required to write but must be the same as the inputs</p>",
        "id": 273793847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646221276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks a lot for the patient explanations :)</p>",
        "id": 273793880,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646221301
    },
    {
        "content": "<p>Does the \"large\" in \"large eliminating\" mean into <code>Sort u</code> vs <code>Type</code>?</p>",
        "id": 273803977,
        "sender_full_name": "Julian Berman",
        "timestamp": 1646226943
    },
    {
        "content": "<p>I think <code>Sort u</code> vs <code>Prop</code>, rather.</p>",
        "id": 273804133,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646227020
    }
]