[
    {
        "content": "<p>Dear All,</p>\n<p>once more, a Lean syntax question.  The mwe is as follows</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">images</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">â†’</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">S</span>\n</code></pre></div>\n\n\n<p>where Lean complains that <code>f ''</code> expects a <code>set</code>, not a <code>finset</code>.  In my actual context, it is not important that the set S is finite, so simply knowing how to convert a <code>finset</code> to a <code>set</code> could solve this issue.  Later on, though, I will need the assumption that <code>S</code> is finite, so ideally I would also like to be able to use this information later on.</p>\n<p>I hope that my question is clear!</p>",
        "id": 207499791,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597912253
    },
    {
        "content": "<p>There is <code>finset.image</code></p>",
        "id": 207499989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597912419
    },
    {
        "content": "<p>But it doesn't have nice notation</p>",
        "id": 207500001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597912424
    },
    {
        "content": "<p>Otherwise <code>S.to_set</code> will work</p>",
        "id": 207500018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597912438
    },
    {
        "content": "<p>Note that there are 2 approaches to finite sets: <code>set.finite</code> and <code>finset</code>.</p>",
        "id": 207500077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597912459
    },
    {
        "content": "<p>There is a reasonable amount of glue between the two approaches.</p>",
        "id": 207500106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597912493
    },
    {
        "content": "<p>(Also, <code>set.finite</code> depends on <code>finset</code>.)</p>",
        "id": 207500118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597912503
    },
    {
        "content": "<p>Ok, <code>S.to_set</code> solved the question, thanks!</p>\n<p>The issue with <code>finset</code> and <code>set.finite</code> is out of my hands, since the set <code>S</code> comes from the output of a function defined by someone else and it is a <code>finset</code>.</p>",
        "id": 207500289,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597912633
    },
    {
        "content": "<p>What do I need to convert a <code>set</code> to a <code>finset</code>?</p>",
        "id": 207500329,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597912667
    },
    {
        "content": "<p>If you have <code>s : set X</code> and <code>hs : s.finite</code> then <code>hs.to_finset</code> is the <code>finset</code> that will convert back to <code>s</code> under <code>finset.to_set</code>.</p>",
        "id": 207500475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597912765
    },
    {
        "content": "<p>\"convert\" means: there is a theorem. It isn't a definitional equality.</p>",
        "id": 207500558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597912813
    },
    {
        "content": "<p>Ok, I will try, thanks!</p>",
        "id": 207500622,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597912873
    }
]